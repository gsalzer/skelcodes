{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/IZeroEx.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./features/IOwnableFeature.sol\\\";\\nimport \\\"./features/ISimpleFunctionRegistryFeature.sol\\\";\\nimport \\\"./features/ITokenSpenderFeature.sol\\\";\\nimport \\\"./features/ISignatureValidatorFeature.sol\\\";\\nimport \\\"./features/ITransformERC20Feature.sol\\\";\\nimport \\\"./features/IMetaTransactionsFeature.sol\\\";\\nimport \\\"./features/IUniswapFeature.sol\\\";\\nimport \\\"./features/ILiquidityProviderFeature.sol\\\";\\nimport \\\"./features/INativeOrdersFeature.sol\\\";\\n\\n\\n/// @dev Interface for a fully featured Exchange Proxy.\\ninterface IZeroEx is\\n    IOwnableFeature,\\n    ISimpleFunctionRegistryFeature,\\n    ITokenSpenderFeature,\\n    ISignatureValidatorFeature,\\n    ITransformERC20Feature,\\n    IMetaTransactionsFeature,\\n    IUniswapFeature,\\n    ILiquidityProviderFeature,\\n    INativeOrdersFeature\\n{\\n    // solhint-disable state-visibility\\n\\n    /// @dev Fallback for just receiving ether.\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/IOwnableFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\n/// @dev Owner management and migration features.\\ninterface IOwnableFeature is\\n    IOwnableV06\\n{\\n    /// @dev Emitted when `migrate()` is called.\\n    /// @param caller The caller of `migrate()`.\\n    /// @param migrator The migration contract.\\n    /// @param newOwner The address of the new owner.\\n    event Migrated(address caller, address migrator, address newOwner);\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      The owner will be temporarily set to `address(this)` inside the call.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param newOwner The address of the new owner.\\n    /// @param data The call data.\\n    function migrate(address target, bytes calldata data, address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IOwnableV06 {\\n\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @dev The owner of this contract.\\n    /// @return ownerAddress The owner address.\\n    function owner() external view returns (address ownerAddress);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/ISimpleFunctionRegistryFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic registry management features.\\ninterface ISimpleFunctionRegistryFeature {\\n\\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\\n    /// @param selector The function selector.\\n    /// @param oldImpl The implementation contract address being replaced.\\n    /// @param newImpl The replacement implementation contract address.\\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl) external;\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl) external;\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        view\\n        returns (uint256 rollbackLength);\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        view\\n        returns (address impl);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/ITokenSpenderFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev Feature that allows spending token allowances.\\ninterface ITokenSpenderFeature {\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    ///      Only callable from within.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _spendERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /// @dev Get the address of the allowance target.\\n    /// @return target The target of token allowances.\\n    function getAllowanceTarget() external view returns (address target);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IERC20TokenV06 {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/ISignatureValidatorFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Feature for validating signatures.\\ninterface ISignatureValidatorFeature {\\n\\n   /// @dev Allowed signature types.\\n    enum SignatureType {\\n        Illegal,                     // 0x00, default value\\n        Invalid,                     // 0x01\\n        EIP712,                      // 0x02\\n        EthSign,                     // 0x03\\n        NSignatureTypes              // 0x04, number of signature types. Always leave at end.\\n    }\\n\\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\\n    ///      Reverts otherwise.\\n    /// @param hash The hash that was signed.\\n    /// @param signer The signer of the hash.\\n    /// @param signature The signature. The last byte of this signature should\\n    ///        be a member of the `SignatureType` enum.\\n    function validateHashSignature(\\n        bytes32 hash,\\n        address signer,\\n        bytes calldata signature\\n    )\\n        external\\n        view;\\n\\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\\n    /// @param hash The hash that was signed.\\n    /// @param signer The signer of the hash.\\n    /// @param signature The signature. The last byte of this signature should\\n    ///        be a member of the `SignatureType` enum.\\n    /// @return isValid `true` on success.\\n    function isValidHashSignature(\\n        bytes32 hash,\\n        address signer,\\n        bytes calldata signature\\n    )\\n        external\\n        view\\n        returns (bool isValid);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/ITransformERC20Feature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../transformers/IERC20Transformer.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Feature to composably transform between ERC20 tokens.\\ninterface ITransformERC20Feature {\\n\\n    /// @dev Defines a transformation to run in `transformERC20()`.\\n    struct Transformation {\\n        // The deployment nonce for the transformer.\\n        // The address of the transformer contract will be derived from this\\n        // value.\\n        uint32 deploymentNonce;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Arguments for `_transformERC20()`.\\n    struct TransformERC20Args {\\n        // The taker address.\\n        address payable taker;\\n        // The token being provided by the taker.\\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\\n        IERC20TokenV06 inputToken;\\n        // The token to be acquired by the taker.\\n        // `0xeee...` implies ETH.\\n        IERC20TokenV06 outputToken;\\n        // The amount of `inputToken` to take from the taker.\\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\\n        // will be solt.\\n        uint256 inputTokenAmount;\\n        // The minimum amount of `outputToken` the taker\\n        // must receive for the entire transformation to succeed. If set to zero,\\n        // the minimum output token transfer will not be asserted.\\n        uint256 minOutputTokenAmount;\\n        // The transformations to execute on the token balance(s)\\n        // in sequence.\\n        Transformation[] transformations;\\n    }\\n\\n    /// @dev Raised upon a successful `transformERC20`.\\n    /// @param taker The taker (caller) address.\\n    /// @param inputToken The token being provided by the taker.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the taker.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\\n    event TransformedERC20(\\n        address indexed taker,\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount\\n    );\\n\\n    /// @dev Raised when `setTransformerDeployer()` is called.\\n    /// @param transformerDeployer The new deployer address.\\n    event TransformerDeployerUpdated(address transformerDeployer);\\n\\n    /// @dev Raised when `setQuoteSigner()` is called.\\n    /// @param quoteSigner The new quote signer.\\n    event QuoteSignerUpdated(address quoteSigner);\\n\\n    /// @dev Replace the allowed deployer for transformers.\\n    ///      Only callable by the owner.\\n    /// @param transformerDeployer The address of the new trusted deployer\\n    ///        for transformers.\\n    function setTransformerDeployer(address transformerDeployer)\\n        external;\\n\\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\\n    ///      Only callable by the owner.\\n    /// @param quoteSigner The address of the new calldata signer.\\n    function setQuoteSigner(address quoteSigner)\\n        external;\\n\\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\\n    ///      Useful if we somehow break the current wallet instance.\\n    ///       Only callable by the owner.\\n    /// @return wallet The new wallet instance.\\n    function createTransformWallet()\\n        external\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\\n    ///      to an ERC20 `outputToken`.\\n    /// @param inputToken The token being provided by the sender.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the sender.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\\n    ///        must receive for the entire transformation to succeed.\\n    /// @param transformations The transformations to execute on the token balance(s)\\n    ///        in sequence.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\\n    function transformERC20(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] calldata transformations\\n    )\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20(TransformERC20Args calldata args)\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Return the current wallet instance that will serve as the execution\\n    ///      context for transformations.\\n    /// @return wallet The wallet instance.\\n    function getTransformWallet()\\n        external\\n        view\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Return the allowed deployer for transformers.\\n    /// @return deployer The transform deployer address.\\n    function getTransformerDeployer()\\n        external\\n        view\\n        returns (address deployer);\\n\\n    /// @dev Return the optional signer for `transformERC20()` calldata.\\n    /// @return signer The transform deployer address.\\n    function getQuoteSigner()\\n        external\\n        view\\n        returns (address signer);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/IERC20Transformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\\ninterface IERC20Transformer {\\n\\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\\n    struct TransformContext {\\n        // The caller of `TransformERC20.transformERC20()`.\\n        address payable sender;\\n        // taker The taker address, which may be distinct from `sender` in the case\\n        // meta-transactions.\\n        address payable taker;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\\n    ///      delegatecalled in the context of the FlashWallet instance being used.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        returns (bytes4 success);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/IFlashWallet.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n/// @dev A contract that can execute arbitrary calls from its owner.\\ninterface IFlashWallet {\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @param value Ether to attach to the call.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData,\\n        uint256 value\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\\n    ///      Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeDelegateCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Allows the puppet to receive ETH.\\n    receive() external payable;\\n\\n    /// @dev Fetch the immutable owner/deployer of this contract.\\n    /// @return owner_ The immutable owner/deployer/\\n    function owner() external view returns (address owner_);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/IMetaTransactionsFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\n\\n/// @dev Meta-transactions feature.\\ninterface IMetaTransactionsFeature {\\n    /// @dev Describes an exchange proxy meta transaction.\\n    struct MetaTransactionData {\\n        // Signer of meta-transaction. On whose behalf to execute the MTX.\\n        address payable signer;\\n        // Required sender, or NULL for anyone.\\n        address sender;\\n        // Minimum gas price.\\n        uint256 minGasPrice;\\n        // Maximum gas price.\\n        uint256 maxGasPrice;\\n        // MTX is invalid after this time.\\n        uint256 expirationTimeSeconds;\\n        // Nonce to make this MTX unique.\\n        uint256 salt;\\n        // Encoded call data to a function on the exchange proxy.\\n        bytes callData;\\n        // Amount of ETH to attach to the call.\\n        uint256 value;\\n        // ERC20 fee `signer` pays `sender`.\\n        IERC20TokenV06 feeToken;\\n        // ERC20 fee amount.\\n        uint256 feeAmount;\\n    }\\n\\n    /// @dev Emitted whenever a meta-transaction is executed via\\n    ///      `executeMetaTransaction()` or `executeMetaTransactions()`.\\n    /// @param hash The meta-transaction hash.\\n    /// @param selector The selector of the function being executed.\\n    /// @param signer Who to execute the meta-transaction on behalf of.\\n    /// @param sender Who executed the meta-transaction.\\n    event MetaTransactionExecuted(\\n        bytes32 hash,\\n        bytes4 indexed selector,\\n        address signer,\\n        address sender\\n    );\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData calldata mtx,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        payable\\n        returns (bytes memory returnResult);\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] calldata mtxs,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnResults);\\n\\n    /// @dev Execute a meta-transaction via `sender`. Privileged variant.\\n    ///      Only callable from within.\\n    /// @param sender Who is executing the meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function _executeMetaTransaction(\\n        address sender,\\n        MetaTransactionData memory mtx,\\n        LibSignature.Signature memory signature\\n    )\\n        external\\n        payable\\n        returns (bytes memory returnResult);\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (bytes32 mtxHash);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/libs/LibSignature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibSignatureRichErrors.sol\\\";\\n\\n\\n/// @dev A library for validating signatures.\\nlibrary LibSignature {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // '\\\\x19Ethereum Signed Message:\\\\n32\\\\x00\\\\x00\\\\x00\\\\x00' in a word.\\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Retrieve the signer of a signature.\\n    ///      Throws if the signature can't be validated.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    /// @return recovered The recovered signer address.\\n    function getSignerOfHash(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        // Ensure this is a signature type that can be validated against a hash.\\n        _validateHashCompatibleSignature(hash, signature);\\n\\n        if (signature.signatureType == SignatureType.EIP712) {\\n            // Signed using EIP712\\n            recovered = ecrecover(\\n                hash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\\n            // Signed using `eth_sign`\\n            // Need to hash `hash` with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\" prefix\\n            // in packed encoding.\\n            bytes32 ethSignHash;\\n            assembly {\\n                // Use scratch space\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            recovered = ecrecover(\\n                ethSignHash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        }\\n        // `recovered` can be null if the signature values are out of range.\\n        if (recovered == address(0)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Validates that a signature is compatible with a hash signee.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    function _validateHashCompatibleSignature(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        private\\n        pure\\n    {\\n        // Ensure the r and s are within malleability limits.\\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\\n        {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        if (signature.signatureType == SignatureType.ILLEGAL) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always invalid.\\n        if (signature.signatureType == SignatureType.INVALID) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Solidity should check that the signature type is within enum range for us\\n        // when abi-decoding.\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibSignatureRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSignatureRichErrors {\\n\\n    enum SignatureValidationErrorCodes {\\n        ALWAYS_INVALID,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        WRONG_SIGNER,\\n        BAD_SIGNATURE_DATA\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash,\\n        address signerAddress,\\n        bytes memory signature\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32,address,bytes)\\\")),\\n            code,\\n            hash,\\n            signerAddress,\\n            signature\\n        );\\n    }\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32)\\\")),\\n            code,\\n            hash\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/IUniswapFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev VIP uniswap fill functions.\\ninterface IUniswapFeature {\\n\\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\\n    /// @param tokens Sell path.\\n    /// @param sellAmount of `tokens[0]` Amount to sell.\\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\\n    /// @param isSushi Use sushiswap if true.\\n    /// @return buyAmount Amount of `tokens[-1]` bought.\\n    function sellToUniswap(\\n        IERC20TokenV06[] calldata tokens,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bool isSushi\\n    )\\n        external\\n        payable\\n        returns (uint256 buyAmount);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/ILiquidityProviderFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Feature to swap directly with an on-chain liquidity provider.\\ninterface ILiquidityProviderFeature {\\n\\n    /// @dev Sells `sellAmount` of `inputToken` to the liquidity provider\\n    ///      at the given `provider` address.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param provider The address of the on-chain liquidity provider\\n    ///        to trade with.\\n    /// @param recipient The recipient of the bought tokens. If equal to\\n    ///        address(0), `msg.sender` is assumed to be the recipient.\\n    /// @param sellAmount The amount of `inputToken` to sell.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to\\n    ///        buy. Reverts if this amount is not satisfied.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellToLiquidityProvider(\\n        address inputToken,\\n        address outputToken,\\n        address payable provider,\\n        address recipient,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/INativeOrdersFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\nimport \\\"./libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ninterface INativeOrdersFeature {\\n\\n    /// @dev Emitted whenever a `LimitOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param feeRecipient Fee recipient of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param protocolFeePaid How much protocol fee was paid.\\n    /// @param pool The fee pool associated with this order.\\n    event LimitOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address feeRecipient,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        uint128 takerTokenFeeFilledAmount,\\n        uint256 protocolFeePaid,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever an `RfqOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param pool The fee pool associated with this order.\\n    event RfqOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The order maker.\\n    event OrderCancelled(\\n        bytes32 orderHash,\\n        address maker\\n    );\\n\\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledLimitOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledRfqOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\\n    ///      orders with a given txOrigin.\\n    /// @param origin The address doing the allowing.\\n    /// @param addrs The address being allowed/disallowed.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event RfqOrderOriginsAllowed(\\n        address origin,\\n        address[] addrs,\\n        bool allowed\\n    );\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external;\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order. Internal variant.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\\n        external;\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\\n        external;\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\\n        external;\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint32 multiplier);\\n\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/libs/LibNativeOrder.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev A library for common native order operations.\\nlibrary LibNativeOrder {\\n\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\\n\\n    // The type hash for limit orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"LimitOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"uint128 takerTokenFeeAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address sender,\\\",\\n    //       \\\"address feeRecipient,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\\n\\n    // The type hash for RFQ orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"RfqOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\\n\\n    /// @dev Get the struct hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return structHash The struct hash of the order.\\n    function getLimitOrderStructHash(LimitOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.takerTokenFeeAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.sender,\\n        //   order.feeRecipient,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.takerTokenFeeAmount;\\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\\n            // order.maker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.taker;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.sender;\\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\\n            // order.feeRecipient;\\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\\n            // order.pool;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            // order.expiry;\\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\\n            // order.salt;\\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\\n            structHash := keccak256(mem, 0x1A0)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of a RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return structHash The struct hash of the order.\\n    function getRfqOrderStructHash(RfqOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.pool;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            // order.expiry;\\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\\n            // order.salt;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            structHash := keccak256(mem, 0x160)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/ZeroEx.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"./migrations/LibBootstrap.sol\\\";\\nimport \\\"./features/BootstrapFeature.sol\\\";\\nimport \\\"./storage/LibProxyStorage.sol\\\";\\nimport \\\"./errors/LibProxyRichErrors.sol\\\";\\n\\n\\n/// @dev An extensible proxy contract that serves as a universal entry point for\\n///      interacting with the 0x protocol.\\ncontract ZeroEx {\\n    // solhint-disable separate-by-one-line-in-contract,indent,var-name-mixedcase\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Construct this contract and register the `BootstrapFeature` feature.\\n    ///      After constructing this contract, `bootstrap()` should be called\\n    ///      by `bootstrap()` to seed the initial feature set.\\n    /// @param bootstrapper Who can call `bootstrap()`.\\n    constructor(address bootstrapper) public {\\n        // Temporarily create and register the bootstrap feature.\\n        // It will deregister itself after `bootstrap()` has been called.\\n        BootstrapFeature bootstrap = new BootstrapFeature(bootstrapper);\\n        LibProxyStorage.getStorage().impls[bootstrap.bootstrap.selector] =\\n            address(bootstrap);\\n    }\\n\\n    // solhint-disable state-visibility\\n\\n    /// @dev Forwards calls to the appropriate implementation contract.\\n    fallback() external payable {\\n        bytes4 selector = msg.data.readBytes4(0);\\n        address impl = getFunctionImplementation(selector);\\n        if (impl == address(0)) {\\n            _revertWithData(LibProxyRichErrors.NotImplementedError(selector));\\n        }\\n\\n        (bool success, bytes memory resultData) = impl.delegatecall(msg.data);\\n        if (!success) {\\n            _revertWithData(resultData);\\n        }\\n        _returnWithData(resultData);\\n    }\\n\\n    /// @dev Fallback for just receiving ether.\\n    receive() external payable {}\\n\\n    // solhint-enable state-visibility\\n\\n    /// @dev Get the implementation contract of a registered function.\\n    /// @param selector The function selector.\\n    /// @return impl The implementation contract address.\\n    function getFunctionImplementation(bytes4 selector)\\n        public\\n        view\\n        returns (address impl)\\n    {\\n        return LibProxyStorage.getStorage().impls[selector];\\n    }\\n\\n    /// @dev Revert with arbitrary bytes.\\n    /// @param data Revert data.\\n    function _revertWithData(bytes memory data) private pure {\\n        assembly { revert(add(data, 32), mload(data)) }\\n    }\\n\\n    /// @dev Return with arbitrary bytes.\\n    /// @param data Return data.\\n    function _returnWithData(bytes memory data) private pure {\\n        assembly { return(add(data, 32), mload(data)) }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibBytesV06 {\\n\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes1 result)\\n    {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                b.length,\\n                0\\n            ));\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n        internal\\n        pure\\n        returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n        internal\\n        pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                b.length,\\n                index + 4\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibBytesRichErrorsV06 {\\n\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\\n        0x28006595;\\n\\n    // solhint-disable func-name-mixedcase\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\\n            errorCode,\\n            offset,\\n            required\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/migrations/LibBootstrap.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibProxyRichErrors.sol\\\";\\n\\n\\nlibrary LibBootstrap {\\n\\n    /// @dev Magic bytes returned by the bootstrapper to indicate success.\\n    ///      This is `keccack('BOOTSTRAP_SUCCESS')`.\\n    bytes4 internal constant BOOTSTRAP_SUCCESS = 0xd150751b;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallBootstrapFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != BOOTSTRAP_SUCCESS)\\n        {\\n            LibProxyRichErrors.BootstrapCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibProxyRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibProxyRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function NotImplementedError(bytes4 selector)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NotImplementedError(bytes4)\\\")),\\n            selector\\n        );\\n    }\\n\\n    function InvalidBootstrapCallerError(address actual, address expected)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidBootstrapCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function InvalidDieCallerError(address actual, address expected)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidDieCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function BootstrapCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BootstrapCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/BootstrapFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"../storage/LibProxyStorage.sol\\\";\\nimport \\\"./IBootstrapFeature.sol\\\";\\n\\n\\n/// @dev Detachable `bootstrap()` feature.\\ncontract BootstrapFeature is\\n    IBootstrapFeature\\n{\\n    // solhint-disable state-visibility,indent\\n    /// @dev The ZeroEx contract.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _deployer;\\n    /// @dev The implementation address of this contract.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _implementation;\\n    /// @dev The deployer.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _bootstrapCaller;\\n    // solhint-enable state-visibility,indent\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Construct this contract and set the bootstrap migration contract.\\n    ///      After constructing this contract, `bootstrap()` should be called\\n    ///      to seed the initial feature set.\\n    /// @param bootstrapCaller The allowed caller of `bootstrap()`.\\n    constructor(address bootstrapCaller) public {\\n        _deployer = msg.sender;\\n        _implementation = address(this);\\n        _bootstrapCaller = bootstrapCaller;\\n    }\\n\\n    /// @dev Bootstrap the initial feature set of this contract by delegatecalling\\n    ///      into `target`. Before exiting the `bootstrap()` function will\\n    ///      deregister itself from the proxy to prevent being called again.\\n    /// @param target The bootstrapper contract address.\\n    /// @param callData The call data to execute on `target`.\\n    function bootstrap(address target, bytes calldata callData) external override {\\n        // Only the bootstrap caller can call this function.\\n        if (msg.sender != _bootstrapCaller) {\\n            LibProxyRichErrors.InvalidBootstrapCallerError(\\n                msg.sender,\\n                _bootstrapCaller\\n            ).rrevert();\\n        }\\n        // Deregister.\\n        LibProxyStorage.getStorage().impls[this.bootstrap.selector] = address(0);\\n        // Self-destruct.\\n        BootstrapFeature(_implementation).die();\\n        // Call the bootstrapper.\\n        LibBootstrap.delegatecallBootstrapFunction(target, callData);\\n    }\\n\\n    /// @dev Self-destructs this contract.\\n    ///      Can only be called by the deployer.\\n    function die() external {\\n        assert(address(this) == _implementation);\\n        if (msg.sender != _deployer) {\\n            LibProxyRichErrors.InvalidDieCallerError(msg.sender, _deployer).rrevert();\\n        }\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibProxyStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the proxy contract.\\nlibrary LibProxyStorage {\\n\\n    /// @dev Storage bucket for proxy contract.\\n    struct Storage {\\n        // Mapping of function selector -> function implementation\\n        mapping(bytes4 => address) impls;\\n        // The owner of the proxy contract.\\n        address owner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.Proxy\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Common storage helpers\\nlibrary LibStorage {\\n\\n    /// @dev What to bit-shift a storage ID by to get its slot.\\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\\n    uint256 private constant STORAGE_SLOT_EXP = 128;\\n\\n    /// @dev Storage IDs for feature storage buckets.\\n    ///      WARNING: APPEND-ONLY.\\n    enum StorageId {\\n        Proxy,\\n        SimpleFunctionRegistry,\\n        Ownable,\\n        TokenSpender,\\n        TransformERC20,\\n        MetaTransactions,\\n        ReentrancyGuard,\\n        NativeOrders\\n    }\\n\\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\\n    ///     slots to storage bucket variables to ensure they do not overlap.\\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\\n    /// @param storageId An entry in `StorageId`\\n    /// @return slot The storage slot.\\n    function getStorageSlot(StorageId storageId)\\n        internal\\n        pure\\n        returns (uint256 slot)\\n    {\\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\\n        // because Solidity will do a range check on `storageId` during the cast.\\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/IBootstrapFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Detachable `bootstrap()` feature.\\ninterface IBootstrapFeature {\\n\\n    /// @dev Bootstrap the initial feature set of this contract by delegatecalling\\n    ///      into `target`. Before exiting the `bootstrap()` function will\\n    ///      deregister itself from the proxy to prevent being called again.\\n    /// @param target The bootstrapper contract address.\\n    /// @param callData The call data to execute on `target`.\\n    function bootstrap(address target, bytes calldata callData) external;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/ZeroExOptimized.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./features/BootstrapFeature.sol\\\";\\nimport \\\"./storage/LibProxyStorage.sol\\\";\\n\\n/// @dev An extensible proxy contract that serves as a universal entry point for\\n///      interacting with the 0x protocol. Optimized version of ZeroEx.\\ncontract ZeroExOptimized {\\n    /// @dev Construct this contract and register the `BootstrapFeature` feature.\\n    ///      After constructing this contract, `bootstrap()` should be called\\n    ///      by `bootstrap()` to seed the initial feature set.\\n    /// @param bootstrapper Who can call `bootstrap()`.\\n    constructor(address bootstrapper) public {\\n        // Temporarily create and register the bootstrap feature.\\n        // It will deregister itself after `bootstrap()` has been called.\\n        BootstrapFeature bootstrap = new BootstrapFeature(bootstrapper);\\n        LibProxyStorage.getStorage().impls[bootstrap.bootstrap.selector] =\\n            address(bootstrap);\\n    }\\n\\n\\n    // solhint-disable state-visibility\\n\\n    /// @dev Forwards calls to the appropriate implementation contract.\\n    fallback() external payable {\\n        // This is used in assembly below as impls_slot.\\n        mapping(bytes4 => address) storage impls =\\n            LibProxyStorage.getStorage().impls;\\n\\n        assembly {\\n            let cdlen := calldatasize()\\n\\n            // equivalent of receive() external payable {}\\n            if iszero(cdlen) {\\n                return(0, 0)\\n            }\\n\\n            // Store at 0x40, to leave 0x00-0x3F for slot calculation below.\\n            calldatacopy(0x40, 0, cdlen)\\n            let selector := and(mload(0x40), 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n\\n            // Slot for impls[selector] is keccak256(selector . impls_slot).\\n            mstore(0, selector)\\n            mstore(0x20, impls_slot)\\n            let slot := keccak256(0, 0x40)\\n\\n            let delegate := sload(slot)\\n            if iszero(delegate) {\\n                // Revert with:\\n                // abi.encodeWithSelector(\\n                //   bytes4(keccak256(\\\"NotImplementedError(bytes4)\\\")),\\n                //   selector)\\n                mstore(0, 0x734e6e1c00000000000000000000000000000000000000000000000000000000)\\n                mstore(4, selector)\\n                revert(0, 0x24)\\n            }\\n\\n            let success := delegatecall(\\n                gas(),\\n                delegate,\\n                0x40, cdlen,\\n                0, 0\\n            )\\n            let rdlen := returndatasize()\\n            returndatacopy(0, 0, rdlen)\\n            if success {\\n                return(0, rdlen)\\n            }\\n            revert(0, rdlen)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/PermissionlessTransformerDeployer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Deployer contract for ERC20 transformers.\\ncontract PermissionlessTransformerDeployer {\\n    /// @dev Emitted when a contract is deployed via `deploy()`.\\n    /// @param deployedAddress The address of the deployed contract.\\n    /// @param salt The deployment salt.\\n    /// @param sender The caller of `deploy()`.\\n    event Deployed(address deployedAddress, bytes32 salt, address sender);\\n\\n    // @dev Mapping of deployed contract address to the deployment salt.\\n    mapping (address => bytes32) public toDeploymentSalt;\\n    // @dev Mapping of deployed contract address to the init code hash.\\n    mapping (address => bytes32) public toInitCodeHash;\\n\\n    /// @dev Deploy a new contract. Any attached ETH will be forwarded.\\n    function deploy(bytes memory bytecode, bytes32 salt)\\n        public\\n        payable\\n        returns (address deployedAddress)\\n    {\\n        assembly {\\n            deployedAddress := create2(callvalue(), add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\\n        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\\n        toDeploymentSalt[deployedAddress] = salt;\\n        toInitCodeHash[deployedAddress] = keccak256(bytecode);\\n        emit Deployed(deployedAddress, salt, msg.sender);\\n    }\\n\\n    /// @dev Checks whether a given address is safe to be called via\\n    ///      delegatecall. A contract is considered unsafe if it includes any\\n    ///      of the following opcodes: CALLCODE, DELEGATECALL, SELFDESTRUCT,\\n    ///      CREATE, CREATE2, SLOAD, and STORE. This code is adapted from\\n    ///      https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/IndestructibleRegistry.sol\\n    /// @param target The address to check.\\n    /// @return True if the contract is considered safe for delegatecall.\\n    function isDelegateCallSafe(address target) public view returns (bool) {\\n        uint256 size;\\n        assembly { size := extcodesize(target) }\\n        require(size > 0, 'PermissionlessTransformerDeployer/NO_CODE');\\n\\n        bytes memory extcode = new bytes(size);\\n        assembly {\\n            extcodecopy(target, add(extcode, 32), 0, size)\\n        }\\n\\n        // Look for any reachable, impermissible opcodes.\\n        bool reachable = true;\\n        for (uint256 i = 0; i < extcode.length; i++) {\\n            uint8 op = uint8(extcode[i]);\\n\\n            // If the opcode is a PUSH, skip over the push data.\\n            if (op > 95 && op < 128) { // pushN\\n                i += (op - 95);\\n                continue;\\n            }\\n\\n            if (reachable) {\\n                // If execution is halted, mark subsequent opcodes unreachable.\\n                if (\\n                    op == 254 || // invalid\\n                    op == 243 || // return\\n                    op == 253 || // revert\\n                    op == 86  || // jump\\n                    op == 0      // stop\\n                ) {\\n                    reachable = false;\\n                    continue;\\n                }\\n\\n                // If opcode is impermissible, contract is unsafe.\\n                if (\\n                    op == 242 || // callcode\\n                    op == 244 || // delegatecall\\n                    op == 255 || // selfdestruct\\n                    op == 240 || // create\\n                    op == 245 || // create2\\n                    op == 84  || // sload\\n                    op == 85     // sstore\\n                ) {\\n                    return false;\\n                }\\n            } else if (op == 91) { // jumpdest\\n                // After a JUMPDEST, opcodes are reachable again.\\n                reachable = true;\\n            }\\n        }\\n\\n        return true; // No impermissible opcodes found.\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/LiquidityProviderFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibLiquidityProviderRichErrors.sol\\\";\\nimport \\\"../external/ILiquidityProviderSandbox.sol\\\";\\nimport \\\"../external/LiquidityProviderSandbox.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./ILiquidityProviderFeature.sol\\\";\\n\\n\\ncontract LiquidityProviderFeature is\\n    IFeature,\\n    ILiquidityProviderFeature,\\n    FixinCommon,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"LiquidityProviderFeature\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 1);\\n\\n    /// @dev ETH pseudo-token address.\\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev The sandbox contract address.\\n    ILiquidityProviderSandbox public immutable sandbox;\\n\\n    /// @dev Event for data pipeline.\\n    event LiquidityProviderSwap(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        address provider,\\n        address recipient\\n    );\\n\\n    constructor(LiquidityProviderSandbox sandbox_, bytes32 greedyTokensBloomFilter)\\n        public\\n        FixinCommon()\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {\\n        sandbox = sandbox_;\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.sellToLiquidityProvider.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Sells `sellAmount` of `inputToken` to the liquidity provider\\n    ///      at the given `provider` address.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param provider The address of the on-chain liquidity provider\\n    ///        to trade with.\\n    /// @param recipient The recipient of the bought tokens. If equal to\\n    ///        address(0), `msg.sender` is assumed to be the recipient.\\n    /// @param sellAmount The amount of `inputToken` to sell.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to\\n    ///        buy. Reverts if this amount is not satisfied.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellToLiquidityProvider(\\n        address inputToken,\\n        address outputToken,\\n        address payable provider,\\n        address recipient,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        override\\n        payable\\n        returns (uint256 boughtAmount)\\n    {\\n        if (recipient == address(0)) {\\n            recipient = msg.sender;\\n        }\\n\\n        if (inputToken == ETH_TOKEN_ADDRESS) {\\n            provider.transfer(sellAmount);\\n        } else {\\n            _transferERC20Tokens(\\n                IERC20TokenV06(inputToken),\\n                msg.sender,\\n                provider,\\n                sellAmount\\n            );\\n        }\\n\\n        if (inputToken == ETH_TOKEN_ADDRESS) {\\n            uint256 balanceBefore = IERC20TokenV06(outputToken).balanceOf(recipient);\\n            sandbox.executeSellEthForToken(\\n                provider,\\n                outputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = IERC20TokenV06(outputToken).balanceOf(recipient).safeSub(balanceBefore);\\n        } else if (outputToken == ETH_TOKEN_ADDRESS) {\\n            uint256 balanceBefore = recipient.balance;\\n            sandbox.executeSellTokenForEth(\\n                provider,\\n                inputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = recipient.balance.safeSub(balanceBefore);\\n        } else {\\n            uint256 balanceBefore = IERC20TokenV06(outputToken).balanceOf(recipient);\\n            sandbox.executeSellTokenForToken(\\n                provider,\\n                inputToken,\\n                outputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = IERC20TokenV06(outputToken).balanceOf(recipient).safeSub(balanceBefore);\\n        }\\n\\n        if (boughtAmount < minBuyAmount) {\\n            LibLiquidityProviderRichErrors.LiquidityProviderIncompleteSellError(\\n                provider,\\n                outputToken,\\n                inputToken,\\n                sellAmount,\\n                boughtAmount,\\n                minBuyAmount\\n            ).rrevert();\\n        }\\n\\n        emit LiquidityProviderSwap(\\n            inputToken,\\n            outputToken,\\n            sellAmount,\\n            boughtAmount,\\n            provider,\\n            recipient\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibSafeMathV06 {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibLiquidityProviderRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibLiquidityProviderRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function LiquidityProviderIncompleteSellError(\\n        address providerAddress,\\n        address makerToken,\\n        address takerToken,\\n        uint256 sellAmount,\\n        uint256 boughtAmount,\\n        uint256 minBuyAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"LiquidityProviderIncompleteSellError(address,address,address,uint256,uint256,uint256)\\\")),\\n            providerAddress,\\n            makerToken,\\n            takerToken,\\n            sellAmount,\\n            boughtAmount,\\n            minBuyAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/ILiquidityProviderSandbox.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ILiquidityProviderSandbox {\\n\\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForToken(\\n        address provider,\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n\\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellEthForToken(\\n        address provider,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n\\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForEth(\\n        address provider,\\n        address inputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/LiquidityProviderSandbox.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2020 ZeroEx Intl.\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\\\";\\nimport \\\"../vendor/ILiquidityProvider.sol\\\";\\nimport \\\"../vendor/v3/IERC20Bridge.sol\\\";\\nimport \\\"./ILiquidityProviderSandbox.sol\\\";\\n\\n\\n/// @dev A permissionless contract through which the ZeroEx contract can\\n///      safely trigger a trade on an external `ILiquidityProvider` contract.\\ncontract LiquidityProviderSandbox is\\n    ILiquidityProviderSandbox\\n{\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Store the owner as an immutable.\\n    address public immutable owner;\\n\\n    constructor(address owner_)\\n        public\\n    {\\n        owner = owner_;\\n    }\\n\\n    /// @dev Allows only the (immutable) owner to call a function.\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) {\\n            LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForToken(\\n        address provider,\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        try ILiquidityProvider(provider).sellTokenForToken(\\n            inputToken,\\n            outputToken,\\n            recipient,\\n            minBuyAmount,\\n            auxiliaryData\\n        ) {} catch {\\n            IERC20Bridge(provider).bridgeTransferFrom(\\n                outputToken,\\n                provider,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n        }\\n    }\\n\\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellEthForToken(\\n        address provider,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        ILiquidityProvider(provider).sellEthForToken(\\n            outputToken,\\n            recipient,\\n            minBuyAmount,\\n            auxiliaryData\\n        );\\n    }\\n\\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForEth(\\n        address provider,\\n        address inputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        ILiquidityProvider(provider).sellTokenForEth(\\n            inputToken,\\n            payable(recipient),\\n            minBuyAmount,\\n            auxiliaryData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\"))\\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\\n        0x1de45ad1;\\n\\n    // bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\\n        hex\\\"e69edc3e\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ONLY_OWNER_ERROR_SELECTOR,\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/ILiquidityProvider.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface ILiquidityProvider {\\n\\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\\n    ///      to sell must be transferred to the contract prior to calling this\\n    ///      function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellTokenForToken(\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades ETH for token. ETH must either be attached to this function\\n    ///      call or sent to the contract prior to calling this function to\\n    ///      trigger the trade.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellEthForToken(\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\\n    ///      to calling this function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of ETH bought.\\n    function sellTokenForEth(\\n        address inputToken,\\n        address payable recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\\n    ///      selling `sellAmount` of `inputToken`.\\n    /// @param inputToken Address of the taker token (what to sell). Use\\n    ///        the wETH address if selling ETH.\\n    /// @param outputToken Address of the maker token (what to buy). Use\\n    ///        the wETH address if buying ETH.\\n    /// @param sellAmount Amount of `inputToken` to sell.\\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\\n    function getSellQuote(\\n        address inputToken,\\n        address outputToken,\\n        uint256 sellAmount\\n    )\\n        external\\n        view\\n        returns (uint256 outputTokenAmount);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/v3/IERC20Bridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20Bridge {\\n\\n    /// @dev Emitted when a trade occurs.\\n    /// @param inputToken The token the bridge is converting from.\\n    /// @param outputToken The token the bridge is converting to.\\n    /// @param inputTokenAmount Amount of input token.\\n    /// @param outputTokenAmount Amount of output token.\\n    /// @param from The `from` address in `bridgeTransferFrom()`\\n    /// @param to The `to` address in `bridgeTransferFrom()`\\n    event ERC20BridgeTransfer(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        address from,\\n        address to\\n    );\\n\\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\\n    /// @param tokenAddress The address of the ERC20 token to transfer.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\\n    /// @return success The magic bytes `0xdc1600f3` if successful.\\n    function bridgeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinCommon.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../features/IOwnableFeature.sol\\\";\\nimport \\\"../features/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinCommon {\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The implementation address of this feature.\\n    address internal immutable _implementation;\\n\\n    /// @dev The caller must be this contract.\\n    modifier onlySelf() virtual {\\n        if (msg.sender != address(this)) {\\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev The caller of this function must be the owner.\\n    modifier onlyOwner() virtual {\\n        {\\n            address owner = IOwnableFeature(address(this)).owner();\\n            if (msg.sender != owner) {\\n                LibOwnableRichErrors.OnlyOwnerError(\\n                    msg.sender,\\n                    owner\\n                ).rrevert();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // Remember this feature's original address.\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Registers a function implemented by this feature at `_implementation`.\\n    ///      Can and should only be called within a `migrate()`.\\n    /// @param selector The selector of the function whose implementation\\n    ///        is at `_implementation`.\\n    function _registerFeatureFunction(bytes4 selector)\\n        internal\\n    {\\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\\n    }\\n\\n    /// @dev Encode a feature version as a `uint256`.\\n    /// @param major The major version number of the feature.\\n    /// @param minor The minor version number of the feature.\\n    /// @param revision The revision number of the feature.\\n    /// @return encodedVersion The encoded version number.\\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\\n        internal\\n        pure\\n        returns (uint256 encodedVersion)\\n    {\\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibCommonRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibCommonRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyCallableBySelfError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableBySelfError(address)\\\")),\\n            sender\\n        );\\n    }\\n\\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IllegalReentrancyError(bytes4,uint256)\\\")),\\n            selector,\\n            reentrancyFlags\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibOwnableRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\")),\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n        );\\n    }\\n\\n    function MigrateCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MigrateCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinTokenSpender.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../features/ITokenSpenderFeature.sol\\\";\\nimport \\\"../errors/LibSpenderRichErrors.sol\\\";\\nimport \\\"../external/FeeCollector.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n\\n/// @dev Helpers for moving tokens around.\\nabstract contract FixinTokenSpender {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\\n\\n    /// @param greedyTokensBloomFilter The bloom filter for all greedy tokens.\\n    constructor(bytes32 greedyTokensBloomFilter)\\n        internal\\n    {\\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\\n    }\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bool success;\\n        bytes memory revertData;\\n\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        // If the token eats all gas when failing, we do not want to perform\\n        // optimistic fall through to the old AllowanceTarget contract if the\\n        // direct transferFrom() fails.\\n        if (_isTokenPossiblyGreedy(token)) {\\n            // If the token does not have a direct allowance on us then we use\\n            // the allowance target.\\n            if (token.allowance(owner, address(this)) < amount) {\\n                _transferFromLegacyAllowanceTarget(\\n                    token,\\n                    owner,\\n                    to,\\n                    amount,\\n                    \\\"\\\"\\n                );\\n                return;\\n            }\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transferFrom(address,address,uint256)\\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x44), amount)\\n\\n            success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x64,\\n                0,\\n                0\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            returndatacopy(add(ptr, 0x20), 0, rdsize) // reuse memory\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(add(ptr, 0x20)), 1) // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                // revertData is a bytes, so length-prefixed data\\n                mstore(ptr, rdsize)\\n                revertData := ptr\\n\\n                // update free memory pointer (ptr + 32-byte length + return data)\\n                mstore(0x40, add(add(ptr, 0x20), rdsize))\\n            }\\n        }\\n\\n        if (!success) {\\n            _transferFromLegacyAllowanceTarget(\\n                token,\\n                owner,\\n                to,\\n                amount,\\n                revertData\\n            );\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by this address.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function _getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(this)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n\\n    /// @dev Check if a token possibly belongs to the `GREEDY_TOKENS_BLOOM_FILTER`\\n    ///      bloom filter.\\n    function _isTokenPossiblyGreedy(IERC20TokenV06 token)\\n        internal\\n        view\\n        returns (bool isPossiblyGreedy)\\n    {\\n        // The hash is given by:\\n        // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\\n        bytes32 h;\\n        assembly {\\n            mstore(0, token)\\n            h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\\n        }\\n        return (h & GREEDY_TOKENS_BLOOM_FILTER) == h;\\n    }\\n\\n    /// @dev Transfer tokens using the legacy allowance target instead of\\n    ///      allowances directly set on the exchange proxy.\\n    function _transferFromLegacyAllowanceTarget(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        bytes memory initialRevertData\\n    )\\n        private\\n    {\\n        // Try the old AllowanceTarget.\\n        try ITokenSpenderFeature(address(this))._spendERC20Tokens(\\n                token,\\n                owner,\\n                to,\\n                amount\\n            ) {\\n        } catch (bytes memory revertData) {\\n            // Bubble up the first error message. (In general, the fallback to the\\n            // allowance target is opportunistic. We ignore the specific error\\n            // message if it fails.)\\n            LibSpenderRichErrors.SpenderERC20TransferFromFailedError(\\n                address(token),\\n                owner,\\n                to,\\n                amount,\\n                initialRevertData.length != 0 ? initialRevertData : revertData\\n            ).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\n\\ninterface IEtherTokenV06 is\\n    IERC20TokenV06\\n{\\n    /// @dev Wrap ether.\\n    function deposit() external payable;\\n\\n    /// @dev Unwrap ether.\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibSpenderRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSpenderRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SpenderERC20TransferFromFailedError(\\n        address token,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SpenderERC20TransferFromFailedError(address,address,address,uint256,bytes)\\\")),\\n            token,\\n            owner,\\n            to,\\n            amount,\\n            errorData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/FeeCollector.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n/// @dev The collector contract for protocol fees\\ncontract FeeCollector is AuthorizableV06 {\\n    /// @dev Allow ether transfers to the collector.\\n    receive() external payable { }\\n\\n    constructor() public {\\n        _addAuthorizedAddress(msg.sender);\\n    }\\n\\n    /// @dev   Approve the staking contract and join a pool. Only an authority\\n    ///        can call this.\\n    /// @param weth The WETH contract.\\n    /// @param staking The staking contract.\\n    /// @param poolId The pool ID this contract is collecting fees for.\\n    function initialize(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        bytes32 poolId\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        weth.approve(address(staking), type(uint256).max);\\n        staking.joinStakingPoolAsMaker(poolId);\\n    }\\n\\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\\n    /// @param weth The WETH contract.\\n    function convertToWeth(\\n        IEtherTokenV06 weth\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        // Leave 1 wei behind to avoid expensive zero-->non-zero state change.\\n        if (address(this).balance > 0) {\\n            weth.deposit{value: address(this).balance}();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IAuthorizableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibAuthorizableRichErrorsV06.sol\\\";\\nimport \\\"./OwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\ncontract AuthorizableV06 is\\n    OwnableV06,\\n    IAuthorizableV06\\n{\\n    /// @dev Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized {\\n        _assertSenderIsAuthorized();\\n        _;\\n    }\\n\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Address to query.\\n    // @return 0 Whether the address is authorized.\\n    mapping (address => bool) public override authorized;\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Index of authorized address.\\n    // @return 0 Authorized address.\\n    address[] public override authorities;\\n\\n    /// @dev Initializes the `owner` address.\\n    constructor()\\n        public\\n        OwnableV06()\\n    {}\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _addAuthorizedAddress(target);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        for (uint256 i = 0; i < authorities.length; i++) {\\n            if (authorities[i] == target) {\\n                _removeAuthorizedAddressAtIndex(target, i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _removeAuthorizedAddressAtIndex(target, index);\\n    }\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        override\\n        view\\n        returns (address[] memory)\\n    {\\n        return authorities;\\n    }\\n\\n    /// @dev Reverts if msg.sender is not authorized.\\n    function _assertSenderIsAuthorized()\\n        internal\\n        view\\n    {\\n        if (!authorized[msg.sender]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\\n        }\\n    }\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function _addAuthorizedAddress(address target)\\n        internal\\n    {\\n        // Ensure that the target is not the zero address.\\n        if (target == address(0)) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\\n        }\\n\\n        // Ensure that the target is not already authorized.\\n        if (authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\\n        }\\n\\n        authorized[target] = true;\\n        authorities.push(target);\\n        emit AuthorizedAddressAdded(target, msg.sender);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function _removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        internal\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        if (index >= authorities.length) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\\n                index,\\n                authorities.length\\n            ));\\n        }\\n        if (authorities[index] != target) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\\n                authorities[index],\\n                target\\n            ));\\n        }\\n\\n        delete authorized[target];\\n        authorities[index] = authorities[authorities.length - 1];\\n        authorities.pop();\\n        emit AuthorizedAddressRemoved(target, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IOwnableV06.sol\\\";\\n\\n\\ninterface IAuthorizableV06 is\\n    IOwnableV06\\n{\\n    // Event logged when a new address is authorized.\\n    event AuthorizedAddressAdded(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    // Event logged when a currently authorized address is unauthorized.\\n    event AuthorizedAddressRemoved(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external;\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return authorizedAddresses Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        view\\n        returns (address[] memory authorizedAddresses);\\n\\n    /// @dev Whether an adderss is authorized to call privileged functions.\\n    /// @param addr Address to query.\\n    /// @return isAuthorized Whether the address is authorized.\\n    function authorized(address addr) external view returns (bool isAuthorized);\\n\\n    /// @dev All addresseses authorized to call privileged functions.\\n    /// @param idx Index of authorized address.\\n    /// @return addr Authorized address.\\n    function authorities(uint256 idx) external view returns (address addr);\\n\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibAuthorizableRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"AuthorizedAddressMismatchError(address,address)\\\"))\\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\\n        0x140a84db;\\n\\n    // bytes4(keccak256(\\\"IndexOutOfBoundsError(uint256,uint256)\\\"))\\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\\n        0xe9f83771;\\n\\n    // bytes4(keccak256(\\\"SenderNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xb65a25b9;\\n\\n    // bytes4(keccak256(\\\"TargetAlreadyAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\\n        0xde16f1a0;\\n\\n    // bytes4(keccak256(\\\"TargetNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xeb5108a2;\\n\\n    // bytes4(keccak256(\\\"ZeroCantBeAuthorizedError()\\\"))\\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\\n        hex\\\"57654fe4\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function AuthorizedAddressMismatchError(\\n        address authorized,\\n        address target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\\n            authorized,\\n            target\\n        );\\n    }\\n\\n    function IndexOutOfBoundsError(\\n        uint256 index,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\\n            index,\\n            length\\n        );\\n    }\\n\\n    function SenderNotAuthorizedError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            sender\\n        );\\n    }\\n\\n    function TargetAlreadyAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function TargetNotAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function ZeroCantBeAuthorizedError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/OwnableV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IOwnableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibOwnableRichErrorsV06.sol\\\";\\n\\n\\ncontract OwnableV06 is\\n    IOwnableV06\\n{\\n    /// @dev The owner of this contract.\\n    /// @return 0 The owner address.\\n    address public override owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertSenderIsOwner();\\n        _;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\\n        } else {\\n            owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    function _assertSenderIsOwner()\\n        internal\\n        view\\n    {\\n        if (msg.sender != owner) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/v3/IStaking.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IStaking {\\n    function joinStakingPoolAsMaker(bytes32) external;\\n    function payProtocolFee(address, address, uint256) external payable;\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/migrations/LibMigrate.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\nlibrary LibMigrate {\\n\\n    /// @dev Magic bytes returned by a migrator to indicate success.\\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallMigrateFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\\n        {\\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/IFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic interface for a feature contract.\\ninterface IFeature {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /// @dev The name of this feature set.\\n    function FEATURE_NAME() external view returns (string memory name);\\n\\n    /// @dev The version of this feature set.\\n    function FEATURE_VERSION() external view returns (uint256 version);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/MetaTransactionsFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibMetaTransactionsRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinReentrancyGuard.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../fixins/FixinEIP712.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../storage/LibMetaTransactionsStorage.sol\\\";\\nimport \\\"./IMetaTransactionsFeature.sol\\\";\\nimport \\\"./ITransformERC20Feature.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\nimport \\\"./ISignatureValidatorFeature.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./INativeOrdersFeature.sol\\\";\\n\\n/// @dev MetaTransactions feature.\\ncontract MetaTransactionsFeature is\\n    IFeature,\\n    IMetaTransactionsFeature,\\n    FixinCommon,\\n    FixinReentrancyGuard,\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibBytesV06 for bytes;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Describes the state of a meta transaction.\\n    struct ExecuteState {\\n        // Sender of the meta-transaction.\\n        address sender;\\n        // Hash of the meta-transaction data.\\n        bytes32 hash;\\n        // The meta-transaction data.\\n        MetaTransactionData mtx;\\n        // The meta-transaction signature (by `mtx.signer`).\\n        LibSignature.Signature signature;\\n        // The selector of the function being called.\\n        bytes4 selector;\\n        // The ETH balance of this contract before performing the call.\\n        uint256 selfBalance;\\n        // The block number at which the meta-transaction was executed.\\n        uint256 executedBlockNumber;\\n    }\\n\\n    /// @dev Arguments for a `TransformERC20.transformERC20()` call.\\n    struct ExternalTransformERC20Args {\\n        IERC20TokenV06 inputToken;\\n        IERC20TokenV06 outputToken;\\n        uint256 inputTokenAmount;\\n        uint256 minOutputTokenAmount;\\n        ITransformERC20Feature.Transformation[] transformations;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"MetaTransactions\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 0);\\n    /// @dev EIP712 typehash of the `MetaTransactionData` struct.\\n    bytes32 public immutable MTX_EIP712_TYPEHASH = keccak256(\\n        \\\"MetaTransactionData(\\\"\\n            \\\"address signer,\\\"\\n            \\\"address sender,\\\"\\n            \\\"uint256 minGasPrice,\\\"\\n            \\\"uint256 maxGasPrice,\\\"\\n            \\\"uint256 expirationTimeSeconds,\\\"\\n            \\\"uint256 salt,\\\"\\n            \\\"bytes callData,\\\"\\n            \\\"uint256 value,\\\"\\n            \\\"address feeToken,\\\"\\n            \\\"uint256 feeAmount\\\"\\n        \\\")\\\"\\n    );\\n\\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\\n    modifier refundsAttachedEth() {\\n        _;\\n        uint256 remainingBalance =\\n            LibSafeMathV06.min256(msg.value, address(this).balance);\\n        if (remainingBalance > 0) {\\n            msg.sender.transfer(remainingBalance);\\n        }\\n    }\\n\\n    constructor(address zeroExAddress, bytes32 greedyTokensBloomFilter)\\n        public\\n        FixinCommon()\\n        FixinEIP712(zeroExAddress)\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {\\n        // solhint-disable-next-line no-empty-blocks\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.executeMetaTransaction.selector);\\n        _registerFeatureFunction(this.batchExecuteMetaTransactions.selector);\\n        _registerFeatureFunction(this._executeMetaTransaction.selector);\\n        _registerFeatureFunction(this.getMetaTransactionExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHashExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHash.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData memory mtx,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        refundsAttachedEth\\n        returns (bytes memory returnResult)\\n    {\\n        ExecuteState memory state;\\n        state.sender = msg.sender;\\n        state.mtx = mtx;\\n        state.hash = getMetaTransactionHash(mtx);\\n        state.signature = signature;\\n\\n        returnResult = _executeMetaTransactionPrivate(state);\\n    }\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] memory mtxs,\\n        LibSignature.Signature[] memory signatures\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        refundsAttachedEth\\n        returns (bytes[] memory returnResults)\\n    {\\n        if (mtxs.length != signatures.length) {\\n            LibMetaTransactionsRichErrors.InvalidMetaTransactionsArrayLengthsError(\\n                mtxs.length,\\n                signatures.length\\n            ).rrevert();\\n        }\\n        returnResults = new bytes[](mtxs.length);\\n        for (uint256 i = 0; i < mtxs.length; ++i) {\\n            ExecuteState memory state;\\n            state.sender = msg.sender;\\n            state.mtx = mtxs[i];\\n            state.hash = getMetaTransactionHash(mtxs[i]);\\n            state.signature = signatures[i];\\n\\n            returnResults[i] = _executeMetaTransactionPrivate(state);\\n        }\\n    }\\n\\n    /// @dev Execute a meta-transaction via `sender`. Privileged variant.\\n    ///      Only callable from within.\\n    /// @param sender Who is executing the meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function _executeMetaTransaction(\\n        address sender,\\n        MetaTransactionData memory mtx,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        payable\\n        override\\n        onlySelf\\n        returns (bytes memory returnResult)\\n    {\\n        ExecuteState memory state;\\n        state.sender = sender;\\n        state.mtx = mtx;\\n        state.hash = getMetaTransactionHash(mtx);\\n        state.signature = signature;\\n\\n        return _executeMetaTransactionPrivate(state);\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return getMetaTransactionHashExecutedBlock(getMetaTransactionHash(mtx));\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return LibMetaTransactionsStorage.getStorage().mtxHashToExecutedBlockNumber[mtxHash];\\n    }\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (bytes32 mtxHash)\\n    {\\n        return _getEIP712Hash(keccak256(abi.encode(\\n            MTX_EIP712_TYPEHASH,\\n            mtx.signer,\\n            mtx.sender,\\n            mtx.minGasPrice,\\n            mtx.maxGasPrice,\\n            mtx.expirationTimeSeconds,\\n            mtx.salt,\\n            keccak256(mtx.callData),\\n            mtx.value,\\n            mtx.feeToken,\\n            mtx.feeAmount\\n        )));\\n    }\\n\\n    /// @dev Execute a meta-transaction by `sender`. Low-level, hidden variant.\\n    /// @param state The `ExecuteState` for this metatransaction, with `sender`,\\n    ///              `hash`, `mtx`, and `signature` fields filled.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function _executeMetaTransactionPrivate(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        _validateMetaTransaction(state);\\n\\n        // Mark the transaction executed by storing the block at which it was executed.\\n        // Currently the block number just indicates that the mtx was executed and\\n        // serves no other purpose from within this contract.\\n        LibMetaTransactionsStorage.getStorage()\\n            .mtxHashToExecutedBlockNumber[state.hash] = block.number;\\n\\n        // Pay the fee to the sender.\\n        if (state.mtx.feeAmount > 0) {\\n            _transferERC20Tokens(\\n                state.mtx.feeToken,\\n                state.mtx.signer,\\n                state.sender,\\n                state.mtx.feeAmount\\n            );\\n        }\\n\\n        // Execute the call based on the selector.\\n        state.selector = state.mtx.callData.readBytes4(0);\\n        if (state.selector == ITransformERC20Feature.transformERC20.selector) {\\n            returnResult = _executeTransformERC20Call(state);\\n        } else if (state.selector == INativeOrdersFeature.fillLimitOrder.selector) {\\n            returnResult = _executeFillLimitOrderCall(state);\\n        } else if (state.selector == INativeOrdersFeature.fillRfqOrder.selector) {\\n            returnResult = _executeFillRfqOrderCall(state);\\n        } else {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionUnsupportedFunctionError(state.hash, state.selector)\\n                .rrevert();\\n        }\\n        emit MetaTransactionExecuted(\\n            state.hash,\\n            state.selector,\\n            state.mtx.signer,\\n            state.mtx.sender\\n        );\\n    }\\n\\n    /// @dev Validate that a meta-transaction is executable.\\n    function _validateMetaTransaction(ExecuteState memory state)\\n        private\\n        view\\n    {\\n        // Must be from the required sender, if set.\\n        if (state.mtx.sender != address(0) && state.mtx.sender != state.sender) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionWrongSenderError(\\n                    state.hash,\\n                    state.sender,\\n                    state.mtx.sender\\n                ).rrevert();\\n        }\\n        // Must not be expired.\\n        if (state.mtx.expirationTimeSeconds <= block.timestamp) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionExpiredError(\\n                    state.hash,\\n                    block.timestamp,\\n                    state.mtx.expirationTimeSeconds\\n                ).rrevert();\\n        }\\n        // Must have a valid gas price.\\n        if (state.mtx.minGasPrice > tx.gasprice || state.mtx.maxGasPrice < tx.gasprice) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionGasPriceError(\\n                    state.hash,\\n                    tx.gasprice,\\n                    state.mtx.minGasPrice,\\n                    state.mtx.maxGasPrice\\n                ).rrevert();\\n        }\\n        // Must have enough ETH.\\n        state.selfBalance  = address(this).balance;\\n        if (state.mtx.value > state.selfBalance) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionInsufficientEthError(\\n                    state.hash,\\n                    state.selfBalance,\\n                    state.mtx.value\\n                ).rrevert();\\n        }\\n\\n        if (LibSignature.getSignerOfHash(state.hash, state.signature) !=\\n                state.mtx.signer) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.WRONG_SIGNER,\\n                state.hash,\\n                state.mtx.signer,\\n                // TODO: Remove this field from SignatureValidationError\\n                //       when rich reverts are part of the protocol repo.\\n                \\\"\\\"\\n            ).rrevert();\\n        }\\n        // Transaction must not have been already executed.\\n        state.executedBlockNumber = LibMetaTransactionsStorage\\n            .getStorage().mtxHashToExecutedBlockNumber[state.hash];\\n        if (state.executedBlockNumber != 0) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionAlreadyExecutedError(\\n                    state.hash,\\n                    state.executedBlockNumber\\n                ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Execute a `ITransformERC20Feature.transformERC20()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `ITransformERC20Feature._transformERC20()` variant, where we can override\\n    ///      the taker address.\\n    function _executeTransformERC20Call(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        // HACK(dorothy-zbornak): `abi.decode()` with the individual args\\n        // will cause a stack overflow. But we can prefix the call data with an\\n        // offset to transform it into the encoding for the equivalent single struct arg,\\n        // since decoding a single struct arg consumes far less stack space than\\n        // decoding multiple struct args.\\n\\n        // Where the encoding for multiple args (with the selector ommitted)\\n        // would typically look like:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | inputToken               |       0 |\\n        // | outputToken              |      32 |\\n        // | inputTokenAmount         |      64 |\\n        // | minOutputTokenAmount     |      96 |\\n        // | transformations (offset) |     128 | = 32\\n        // | transformations (data)   |     160 |\\n\\n        // We will ABI-decode a single struct arg copy with the layout:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | (arg 1 offset)           |       0 | = 32\\n        // | inputToken               |      32 |\\n        // | outputToken              |      64 |\\n        // | inputTokenAmount         |      96 |\\n        // | minOutputTokenAmount     |     128 |\\n        // | transformations (offset) |     160 | = 32\\n        // | transformations (data)   |     192 |\\n\\n        ExternalTransformERC20Args memory args;\\n        {\\n            bytes memory encodedStructArgs = new bytes(state.mtx.callData.length - 4 + 32);\\n            // Copy the args data from the original, after the new struct offset prefix.\\n            bytes memory fromCallData = state.mtx.callData;\\n            assert(fromCallData.length >= 160);\\n            uint256 fromMem;\\n            uint256 toMem;\\n            assembly {\\n                // Prefix the calldata with a struct offset,\\n                // which points to just one word over.\\n                mstore(add(encodedStructArgs, 32), 32)\\n                // Copy everything after the selector.\\n                fromMem := add(fromCallData, 36)\\n                // Start copying after the struct offset.\\n                toMem := add(encodedStructArgs, 64)\\n            }\\n            LibBytesV06.memCopy(toMem, fromMem, fromCallData.length - 4);\\n            // Decode call args for `ITransformERC20Feature.transformERC20()` as a struct.\\n            args = abi.decode(encodedStructArgs, (ExternalTransformERC20Args));\\n        }\\n        // Call `ITransformERC20Feature._transformERC20()` (internal variant).\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                ITransformERC20Feature._transformERC20.selector,\\n                ITransformERC20Feature.TransformERC20Args({\\n                    taker: state.mtx.signer, // taker is mtx signer\\n                    inputToken: args.inputToken,\\n                    outputToken: args.outputToken,\\n                    inputTokenAmount: args.inputTokenAmount,\\n                    minOutputTokenAmount: args.minOutputTokenAmount,\\n                    transformations: args.transformations\\n              })\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Extract arguments from call data by copying everything after the\\n    ///      4-byte selector into a new byte array.\\n    /// @param callData The call data from which arguments are to be extracted.\\n    /// @return args The extracted arguments as a byte array.\\n    function _extractArgumentsFromCallData(\\n        bytes memory callData\\n    )\\n        private\\n        pure\\n        returns (bytes memory args)\\n    {\\n        args = new bytes(callData.length - 4);\\n        uint256 fromMem;\\n        uint256 toMem;\\n\\n        assembly {\\n            fromMem := add(callData, 36) // skip length and 4-byte selector\\n            toMem := add(args, 32)       // write after length prefix\\n        }\\n\\n        LibBytesV06.memCopy(toMem, fromMem, args.length);\\n\\n        return args;\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillLimitOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillLimitOrder()` variant, where we can override\\n    ///      the taker address.\\n    function _executeFillLimitOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.LimitOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.LimitOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillLimitOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer, // taker is mtx signer\\n                msg.sender\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillRfqOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillRfqOrder()` variant, where we can overrideunimpleme\\n    ///      the taker address.\\n    function _executeFillRfqOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.RfqOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.RfqOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillRfqOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer // taker is mtx signer\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Make an arbitrary internal, meta-transaction call.\\n    ///      Warning: Do not let unadulterated `callData` into this function.\\n    function _callSelf(bytes32 hash, bytes memory callData, uint256 value)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        bool success;\\n        (success, returnResult) = address(this).call{value: value}(callData);\\n        if (!success) {\\n            LibMetaTransactionsRichErrors.MetaTransactionCallFailedError(\\n                hash,\\n                callData,\\n                returnResult\\n            ).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibMetaTransactionsRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibMetaTransactionsRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function InvalidMetaTransactionsArrayLengthsError(\\n        uint256 mtxCount,\\n        uint256 signatureCount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidMetaTransactionsArrayLengthsError(uint256,uint256)\\\")),\\n            mtxCount,\\n            signatureCount\\n        );\\n    }\\n\\n    function MetaTransactionUnsupportedFunctionError(\\n        bytes32 mtxHash,\\n        bytes4 selector\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionUnsupportedFunctionError(bytes32,bytes4)\\\")),\\n            mtxHash,\\n            selector\\n        );\\n    }\\n\\n    function MetaTransactionWrongSenderError(\\n        bytes32 mtxHash,\\n        address sender,\\n        address expectedSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionWrongSenderError(bytes32,address,address)\\\")),\\n            mtxHash,\\n            sender,\\n            expectedSender\\n        );\\n    }\\n\\n    function MetaTransactionExpiredError(\\n        bytes32 mtxHash,\\n        uint256 time,\\n        uint256 expirationTime\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionExpiredError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            time,\\n            expirationTime\\n        );\\n    }\\n\\n    function MetaTransactionGasPriceError(\\n        bytes32 mtxHash,\\n        uint256 gasPrice,\\n        uint256 minGasPrice,\\n        uint256 maxGasPrice\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionGasPriceError(bytes32,uint256,uint256,uint256)\\\")),\\n            mtxHash,\\n            gasPrice,\\n            minGasPrice,\\n            maxGasPrice\\n        );\\n    }\\n\\n    function MetaTransactionInsufficientEthError(\\n        bytes32 mtxHash,\\n        uint256 ethBalance,\\n        uint256 ethRequired\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInsufficientEthError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            ethBalance,\\n            ethRequired\\n        );\\n    }\\n\\n    function MetaTransactionInvalidSignatureError(\\n        bytes32 mtxHash,\\n        bytes memory signature,\\n        bytes memory errData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInvalidSignatureError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            signature,\\n            errData\\n        );\\n    }\\n\\n    function MetaTransactionAlreadyExecutedError(\\n        bytes32 mtxHash,\\n        uint256 executedBlockNumber\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionAlreadyExecutedError(bytes32,uint256)\\\")),\\n            mtxHash,\\n            executedBlockNumber\\n        );\\n    }\\n\\n    function MetaTransactionCallFailedError(\\n        bytes32 mtxHash,\\n        bytes memory callData,\\n        bytes memory returnData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionCallFailedError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            callData,\\n            returnData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinReentrancyGuard.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../storage/LibReentrancyGuardStorage.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinReentrancyGuard {\\n\\n    using LibRichErrorsV06 for bytes;\\n    using LibBytesV06 for bytes;\\n\\n    // Combinable reentrancy flags.\\n    /// @dev Reentrancy guard flag for meta-transaction functions.\\n    uint256 constant internal REENTRANCY_MTX = 0x1;\\n\\n    /// @dev Cannot reenter a function with the same reentrancy guard flags.\\n    modifier nonReentrant(uint256 reentrancyFlags) virtual {\\n        LibReentrancyGuardStorage.Storage storage stor =\\n            LibReentrancyGuardStorage.getStorage();\\n        {\\n            uint256 currentFlags = stor.reentrancyFlags;\\n            // Revert if any bits in `reentrancyFlags` has already been set.\\n            if ((currentFlags & reentrancyFlags) != 0) {\\n                LibCommonRichErrors.IllegalReentrancyError(\\n                    msg.data.readBytes4(0),\\n                    reentrancyFlags\\n                ).rrevert();\\n            }\\n            // Update reentrancy flags.\\n            stor.reentrancyFlags = currentFlags | reentrancyFlags;\\n        }\\n\\n        _;\\n\\n        // Clear reentrancy flags.\\n        stor.reentrancyFlags = stor.reentrancyFlags & (~reentrancyFlags);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibReentrancyGuardStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `FixinReentrancyGuard` mixin.\\nlibrary LibReentrancyGuardStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Reentrancy flags set whenever a non-reentrant function is entered\\n        // and cleared when it is exited.\\n        uint256 reentrancyFlags;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.ReentrancyGuard\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinEIP712.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\n/// @dev EIP712 helpers for features.\\nabstract contract FixinEIP712 {\\n\\n    /// @dev The domain hash separator for the entire exchange proxy.\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    constructor(address zeroExAddress) internal {\\n        // Compute `EIP712_DOMAIN_SEPARATOR`\\n        {\\n            uint256 chainId;\\n            assembly { chainId := chainid() }\\n            EIP712_DOMAIN_SEPARATOR = keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(\\\"\\n                            \\\"string name,\\\"\\n                            \\\"string version,\\\"\\n                            \\\"uint256 chainId,\\\"\\n                            \\\"address verifyingContract\\\"\\n                        \\\")\\\"\\n                    ),\\n                    keccak256(\\\"ZeroEx\\\"),\\n                    keccak256(\\\"1.0.0\\\"),\\n                    chainId,\\n                    zeroExAddress\\n                )\\n            );\\n        }\\n    }\\n\\n    function _getEIP712Hash(bytes32 structHash)\\n        internal\\n        view\\n        returns (bytes32 eip712Hash)\\n    {\\n        return keccak256(abi.encodePacked(\\n            hex\\\"1901\\\",\\n            EIP712_DOMAIN_SEPARATOR,\\n            structHash\\n        ));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibMetaTransactionsStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `MetaTransactions` feature.\\nlibrary LibMetaTransactionsStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The block number when a hash was executed.\\n        mapping (bytes32 => uint256) mtxHashToExecutedBlockNumber;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.MetaTransactions\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/NativeOrdersFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinProtocolFees.sol\\\";\\nimport \\\"../fixins/FixinEIP712.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../errors/LibNativeOrdersRichErrors.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\nimport \\\"./libs/LibNativeOrder.sol\\\";\\nimport \\\"./INativeOrdersFeature.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ncontract NativeOrdersFeature is\\n    IFeature,\\n    INativeOrdersFeature,\\n    FixinCommon,\\n    FixinProtocolFees,\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibSafeMathV06 for uint128;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Params for `_settleOrder()`.\\n    struct SettleOrderInfo {\\n        // Order hash.\\n        bytes32 orderHash;\\n        // Maker of the order.\\n        address maker;\\n        // Taker of the order.\\n        address taker;\\n        // Maker token.\\n        IERC20TokenV06 makerToken;\\n        // Taker token.\\n        IERC20TokenV06 takerToken;\\n        // Maker token amount.\\n        uint128 makerAmount;\\n        // Taker token amount.\\n        uint128 takerAmount;\\n        // Maximum taker token amount to fill.\\n        uint128 takerTokenFillAmount;\\n        // How much taker token amount has already been filled in this order.\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Params for `_fillLimitOrderPrivate()`\\n    struct FillLimitOrderPrivateParams {\\n        // The limit order.\\n        LibNativeOrder.LimitOrder order;\\n        // The order signature.\\n        LibSignature.Signature signature;\\n        // Maximum taker token to fill this order with.\\n        uint128 takerTokenFillAmount;\\n        // The order taker.\\n        address taker;\\n        // The order sender.\\n        address sender;\\n    }\\n\\n    // @dev Fill results returned by `_fillLimitOrderPrivate()` and\\n    ///     `_fillRfqOrderPrivate()`.\\n    struct FillNativeOrderResults {\\n        uint256 ethProtocolFeePaid;\\n        uint128 takerTokenFilledAmount;\\n        uint128 makerTokenFilledAmount;\\n        uint128 takerTokenFeeFilledAmount;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"LimitOrders\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\\n    uint256 private constant HIGH_BIT = 1 << 255;\\n\\n    constructor(\\n        address zeroExAddress,\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        uint32 protocolFeeMultiplier,\\n        bytes32 greedyTokensBloomFilter\\n    )\\n        public\\n        FixinEIP712(zeroExAddress)\\n        FixinProtocolFees(weth, staking, protocolFeeMultiplier)\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.transferProtocolFeesForPools.selector);\\n        _registerFeatureFunction(this.fillLimitOrder.selector);\\n        _registerFeatureFunction(this.fillRfqOrder.selector);\\n        _registerFeatureFunction(this.fillOrKillLimitOrder.selector);\\n        _registerFeatureFunction(this.fillOrKillRfqOrder.selector);\\n        _registerFeatureFunction(this._fillLimitOrder.selector);\\n        _registerFeatureFunction(this._fillRfqOrder.selector);\\n        _registerFeatureFunction(this.cancelLimitOrder.selector);\\n        _registerFeatureFunction(this.cancelRfqOrder.selector);\\n        _registerFeatureFunction(this.batchCancelLimitOrders.selector);\\n        _registerFeatureFunction(this.batchCancelRfqOrders.selector);\\n        _registerFeatureFunction(this.cancelPairLimitOrders.selector);\\n        _registerFeatureFunction(this.batchCancelPairLimitOrders.selector);\\n        _registerFeatureFunction(this.cancelPairRfqOrders.selector);\\n        _registerFeatureFunction(this.batchCancelPairRfqOrders.selector);\\n        _registerFeatureFunction(this.getLimitOrderInfo.selector);\\n        _registerFeatureFunction(this.getRfqOrderInfo.selector);\\n        _registerFeatureFunction(this.getLimitOrderHash.selector);\\n        _registerFeatureFunction(this.getRfqOrderHash.selector);\\n        _registerFeatureFunction(this.getProtocolFeeMultiplier.selector);\\n        _registerFeatureFunction(this.registerAllowedRfqOrigins.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external\\n        override\\n    {\\n        for (uint256 i = 0; i < poolIds.length; ++i) {\\n            _transferFeesForPool(poolIds[i]);\\n        }\\n    }\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                sender: msg.sender\\n            }));\\n        _refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH should be attached to pay the\\n    ///      protocol fee.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                msg.sender\\n            );\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                sender: msg.sender\\n            }));\\n        // Must have filled exactly the amount requested.\\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\\n                getLimitOrderHash(order),\\n                results.takerTokenFilledAmount,\\n                takerTokenFillAmount\\n            ).rrevert();\\n        }\\n        _refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\\n    }\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        returns (uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                msg.sender\\n            );\\n        // Must have filled exactly the amount requested.\\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\\n                getRfqOrderHash(order),\\n                results.takerTokenFilledAmount,\\n                takerTokenFillAmount\\n            ).rrevert();\\n        }\\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\\n    }\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        public\\n        virtual\\n        override\\n        payable\\n        onlySelf\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: taker,\\n                sender: sender\\n            }));\\n        _refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    )\\n        public\\n        virtual\\n        override\\n        onlySelf\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                taker\\n            );\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder memory order)\\n        public\\n        override\\n    {\\n        bytes32 orderHash = getLimitOrderHash(order);\\n        if (msg.sender != order.maker) {\\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\\n                orderHash,\\n                msg.sender,\\n                order.maker\\n            ).rrevert();\\n        }\\n        _cancelOrderHash(orderHash, order.maker);\\n    }\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder memory order)\\n        public\\n        override\\n    {\\n        bytes32 orderHash = getRfqOrderHash(order);\\n        if (msg.sender != order.maker) {\\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\\n                orderHash,\\n                msg.sender,\\n                order.maker\\n            ).rrevert();\\n        }\\n        _cancelOrderHash(orderHash, order.maker);\\n    }\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] memory orders)\\n        public\\n        override\\n    {\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            cancelLimitOrder(orders[i]);\\n        }\\n    }\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] memory orders)\\n        public\\n        override\\n    {\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            cancelRfqOrder(orders[i]);\\n        }\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n        override\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        uint256 oldMinValidSalt =\\n            stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [msg.sender]\\n                [address(makerToken)]\\n                [address(takerToken)];\\n\\n        // New min salt must >= the old one.\\n        if (oldMinValidSalt > minValidSalt) {\\n            LibNativeOrdersRichErrors.\\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\\n                    .rrevert();\\n        }\\n\\n        stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n            [msg.sender]\\n            [address(makerToken)]\\n            [address(takerToken)] = minValidSalt;\\n\\n        emit PairCancelledLimitOrders(\\n            msg.sender,\\n            address(makerToken),\\n            address(takerToken),\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n        override\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            cancelPairLimitOrders(\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n        override\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        uint256 oldMinValidSalt =\\n            stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [msg.sender]\\n                [address(makerToken)]\\n                [address(takerToken)];\\n\\n        // New min salt must >= the old one.\\n        if (oldMinValidSalt > minValidSalt) {\\n            LibNativeOrdersRichErrors.\\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\\n                    .rrevert();\\n        }\\n\\n        stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n            [msg.sender]\\n            [address(makerToken)]\\n            [address(takerToken)] = minValidSalt;\\n\\n        emit PairCancelledRfqOrders(\\n            msg.sender,\\n            address(makerToken),\\n            address(takerToken),\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(\\n        address[] memory origins,\\n        bool allowed\\n    )\\n        external\\n        override\\n    {\\n        require(msg.sender == tx.origin,\\n            \\\"NativeOrdersFeature/NO_CONTRACT_ORIGINS\\\");\\n\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        for (uint256 i = 0; i < origins.length; i++) {\\n            stor.originRegistry[msg.sender][origins[i]] = allowed;\\n        }\\n\\n        emit RfqOrderOriginsAllowed(msg.sender, origins, allowed);\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n        override\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            cancelPairRfqOrders(\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder memory order)\\n        public\\n        override\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getLimitOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.takerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder memory order)\\n        public\\n        override\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getRfqOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.takerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n\\n        // Check for missing txOrigin.\\n        if (order.txOrigin == address(0)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n        }\\n    }\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder memory order)\\n        public\\n        override\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getLimitOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder memory order)\\n        public\\n        override\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getRfqOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        override\\n        view\\n        returns (uint32 multiplier)\\n    {\\n        return PROTOCOL_FEE_MULTIPLIER;\\n    }\\n\\n    /// @dev Populate `status` and `takerTokenFilledAmount` fields in\\n    ///      `orderInfo`, which use the same code path for both limit and\\n    ///      RFQ orders.\\n    /// @param orderInfo `OrderInfo` with `orderHash` and `maker` filled.\\n    /// @param takerAmount The order's taker token amount..\\n    /// @param expiry The order's expiry.\\n    /// @param salt The order's salt.\\n    /// @param salt The minimum valid salt for the maker and pair combination.\\n    function _populateCommonOrderInfoFields(\\n        LibNativeOrder.OrderInfo memory orderInfo,\\n        uint128 takerAmount,\\n        uint64 expiry,\\n        uint256 salt,\\n        uint256 minValidSalt\\n    )\\n        private\\n        view\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        // Get the filled and direct cancel state.\\n        {\\n            // The high bit of the raw taker token filled amount will be set\\n            // if the order was cancelled.\\n            uint256 rawTakerTokenFilledAmount =\\n                stor.orderHashToTakerTokenFilledAmount[orderInfo.orderHash];\\n            orderInfo.takerTokenFilledAmount = uint128(rawTakerTokenFilledAmount);\\n            if (orderInfo.takerTokenFilledAmount >= takerAmount) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.FILLED;\\n                return;\\n            }\\n            if (rawTakerTokenFilledAmount & HIGH_BIT != 0) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n                return;\\n            }\\n        }\\n\\n        // Check for expiration.\\n        if (expiry <= uint64(block.timestamp)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\\n            return;\\n        }\\n\\n        // Check if the order was cancelled by salt.\\n        if (minValidSalt > salt) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n            return;\\n        }\\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\\n    }\\n\\n    /// @dev Cancel a limit or RFQ order directly by its order hash.\\n    /// @param orderHash The order's order hash.\\n    /// @param maker The order's maker.\\n    function _cancelOrderHash(bytes32 orderHash, address maker)\\n        private\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n        // Set the high bit on the raw taker token fill amount to indicate\\n        // a cancel. It's OK to cancel twice.\\n        stor.orderHashToTakerTokenFilledAmount[orderHash] |= HIGH_BIT;\\n\\n        emit OrderCancelled(orderHash, maker);\\n    }\\n\\n    /// @dev Fill a limit order. Private variant. Does not refund protocol fees.\\n    /// @param params Function params.\\n    /// @return results Results of the fill.\\n    function _fillLimitOrderPrivate(FillLimitOrderPrivateParams memory params)\\n        private\\n        returns (FillNativeOrderResults memory results)\\n    {\\n        LibNativeOrder.OrderInfo memory orderInfo = getLimitOrderInfo(params.order);\\n\\n        // Must be fillable.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibNativeOrdersRichErrors.OrderNotFillableError(\\n                orderInfo.orderHash,\\n                uint8(orderInfo.status)\\n            ).rrevert();\\n        }\\n\\n        // Must be fillable by the taker.\\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\\n                orderInfo.orderHash,\\n                params.taker,\\n                params.order.taker\\n            ).rrevert();\\n        }\\n\\n        // Must be fillable by the sender.\\n        if (params.order.sender != address(0) && params.order.sender != params.sender) {\\n            LibNativeOrdersRichErrors.OrderNotFillableBySenderError(\\n                orderInfo.orderHash,\\n                params.sender,\\n                params.order.sender\\n            ).rrevert();\\n        }\\n\\n        // Signature must be valid for the order.\\n        {\\n            address signer = LibSignature.getSignerOfHash(\\n                orderInfo.orderHash,\\n                params.signature\\n            );\\n            if (signer != params.order.maker) {\\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\\n                    orderInfo.orderHash,\\n                    signer,\\n                    params.order.maker\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Pay the protocol fee.\\n        results.ethProtocolFeePaid = _collectProtocolFee(params.order.pool);\\n\\n        // Settle between the maker and taker.\\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\\n            SettleOrderInfo({\\n                orderHash: orderInfo.orderHash,\\n                maker: params.order.maker,\\n                taker: params.taker,\\n                makerToken: IERC20TokenV06(params.order.makerToken),\\n                takerToken: IERC20TokenV06(params.order.takerToken),\\n                makerAmount: params.order.makerAmount,\\n                takerAmount: params.order.takerAmount,\\n                takerTokenFillAmount: params.takerTokenFillAmount,\\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\\n            })\\n        );\\n\\n        // Pay the fee recipient.\\n        if (params.order.takerTokenFeeAmount > 0) {\\n            results.takerTokenFeeFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\\n                results.takerTokenFilledAmount,\\n                params.order.takerAmount,\\n                params.order.takerTokenFeeAmount\\n            ));\\n            _transferERC20Tokens(\\n                params.order.takerToken,\\n                params.taker,\\n                params.order.feeRecipient,\\n                uint256(results.takerTokenFeeFilledAmount)\\n            );\\n        }\\n\\n        emit LimitOrderFilled(\\n            orderInfo.orderHash,\\n            params.order.maker,\\n            params.taker,\\n            params.order.feeRecipient,\\n            address(params.order.makerToken),\\n            address(params.order.takerToken),\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount,\\n            results.takerTokenFeeFilledAmount,\\n            results.ethProtocolFeePaid,\\n            params.order.pool\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order. Private variant. Does not refund protocol fees.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @return results Results of the fill.\\n    function _fillRfqOrderPrivate(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    )\\n        private\\n        returns (FillNativeOrderResults memory results)\\n    {\\n        LibNativeOrder.OrderInfo memory orderInfo = getRfqOrderInfo(order);\\n\\n        // Must be fillable.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibNativeOrdersRichErrors.OrderNotFillableError(\\n                orderInfo.orderHash,\\n                uint8(orderInfo.status)\\n            ).rrevert();\\n        }\\n\\n        {\\n            LibNativeOrdersStorage.Storage storage stor =\\n                LibNativeOrdersStorage.getStorage();\\n\\n            // Must be fillable by the tx.origin.\\n            if (order.txOrigin != tx.origin && !stor.originRegistry[order.txOrigin][tx.origin]) {\\n                LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\\n                    orderInfo.orderHash,\\n                    tx.origin,\\n                    order.txOrigin\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Must be fillable by the taker.\\n        if (order.taker != address(0) && order.taker != taker) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\\n                orderInfo.orderHash,\\n                taker,\\n                order.taker\\n            ).rrevert();\\n        }\\n\\n        // Signature must be valid for the order.\\n        {\\n            address signer = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\\n            if (signer != order.maker) {\\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\\n                    orderInfo.orderHash,\\n                    signer,\\n                    order.maker\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Settle between the maker and taker.\\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\\n            SettleOrderInfo({\\n                orderHash: orderInfo.orderHash,\\n                maker: order.maker,\\n                taker: taker,\\n                makerToken: IERC20TokenV06(order.makerToken),\\n                takerToken: IERC20TokenV06(order.takerToken),\\n                makerAmount: order.makerAmount,\\n                takerAmount: order.takerAmount,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\\n            })\\n        );\\n\\n        emit RfqOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            taker,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount,\\n            order.pool\\n        );\\n    }\\n\\n    /// @dev Settle the trade between an order's maker and taker.\\n    /// @param settleInfo Information needed to execute the settlement.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _settleOrder(SettleOrderInfo memory settleInfo)\\n        private\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        // Clamp the taker token fill amount to the fillable amount.\\n        takerTokenFilledAmount = LibSafeMathV06.min128(\\n            settleInfo.takerTokenFillAmount,\\n            settleInfo.takerAmount.safeSub128(settleInfo.takerTokenFilledAmount)\\n        );\\n        // Compute the maker token amount.\\n        // This should never overflow because the values are all clamped to\\n        // (2^128-1).\\n        makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\\n            uint256(takerTokenFilledAmount),\\n            uint256(settleInfo.takerAmount),\\n            uint256(settleInfo.makerAmount)\\n        ));\\n\\n        if (takerTokenFilledAmount == 0 || makerTokenFilledAmount == 0) {\\n            // Nothing to do.\\n            return (0, 0);\\n        }\\n\\n        // Update filled state for the order.\\n        LibNativeOrdersStorage\\n            .getStorage()\\n            .orderHashToTakerTokenFilledAmount[settleInfo.orderHash] =\\n            // OK to overwrite the whole word because we shouldn't get to this\\n            // function if the order is cancelled.\\n                settleInfo.takerTokenFilledAmount.safeAdd128(takerTokenFilledAmount);\\n\\n        // Transfer taker -> maker.\\n        _transferERC20Tokens(\\n            settleInfo.takerToken,\\n            settleInfo.taker,\\n            settleInfo.maker,\\n            takerTokenFilledAmount\\n        );\\n\\n        // Transfer maker -> taker.\\n        _transferERC20Tokens(\\n            settleInfo.makerToken,\\n            settleInfo.maker,\\n            settleInfo.taker,\\n            makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\\n    function _refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\\n        private\\n    {\\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\\n            (bool success,) = msg\\n                .sender\\n                .call{value: refundAmount}(\\\"\\\");\\n            if (!success) {\\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\\n                    msg.sender,\\n                    refundAmount\\n                ).rrevert();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\n\\nlibrary LibERC20TokenV06 {\\n    bytes constant private DECIMALS_CALL_DATA = hex\\\"313ce567\\\";\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param allowance The allowance to set.\\n    function compatApprove(\\n        IERC20TokenV06 token,\\n        address spender,\\n        uint256 allowance\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            token.approve.selector,\\n            spender,\\n            allowance\\n        );\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\\n    ///      maximum if the current approval is not already >= an amount.\\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param amount The minimum allowance needed.\\n    function approveIfBelow(\\n        IERC20TokenV06 token,\\n        address spender,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (token.allowance(address(this), spender) < amount) {\\n            compatApprove(token, spender, uint256(-1));\\n        }\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransfer(\\n        IERC20TokenV06 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            token.transfer.selector,\\n            to,\\n            amount\\n        );\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param from The owner of the tokens.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransferFrom(\\n        IERC20TokenV06 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            token.transferFrom.selector,\\n            from,\\n            to,\\n            amount\\n        );\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Retrieves the number of decimals for a token.\\n    ///      Returns `18` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @return tokenDecimals The number of decimals places for the token.\\n    function compatDecimals(IERC20TokenV06 token)\\n        internal\\n        view\\n        returns (uint8 tokenDecimals)\\n    {\\n        tokenDecimals = 18;\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\\n        if (didSucceed && resultData.length == 32) {\\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\\n        }\\n    }\\n\\n    /// @dev Retrieves the allowance for a token, owner, and spender.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address the spender.\\n    /// @return allowance_ The allowance for a token, owner, and spender.\\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\\n        internal\\n        view\\n        returns (uint256 allowance_)\\n    {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(\\n                token.allowance.selector,\\n                owner,\\n                spender\\n            )\\n        );\\n        if (didSucceed && resultData.length == 32) {\\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Retrieves the balance for a token owner.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @return balance The token balance of an owner.\\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(\\n                token.balanceOf.selector,\\n                owner\\n            )\\n        );\\n        if (didSucceed && resultData.length == 32) {\\n            balance = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\\n    ///      is a successful result. Supported functions are `transfer()`,\\n    ///      `transferFrom()`, and `approve()`.\\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\\n    /// @return isSuccessful Whether the result data indicates success.\\n    function isSuccessfulResult(bytes memory resultData)\\n        internal\\n        pure\\n        returns (bool isSuccessful)\\n    {\\n        if (resultData.length == 0) {\\n            return true;\\n        }\\n        if (resultData.length == 32) {\\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\\n            if (result == 1) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a call on address `target` with calldata `callData`\\n    ///      and asserts that either nothing was returned or a single boolean\\n    ///      was returned equal to `true`.\\n    /// @param target The call target.\\n    /// @param callData The abi-encoded call data.\\n    function _callWithOptionalBooleanResult(\\n        address target,\\n        bytes memory callData\\n    )\\n        private\\n    {\\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\\n        if (didSucceed && isSuccessfulResult(resultData)) {\\n            return;\\n        }\\n        LibRichErrorsV06.rrevert(resultData);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./LibSafeMathV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibMathV06 {\\n\\n    using LibSafeMathV06 for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorFloor(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorCeil(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function getPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function getPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * denominator)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.safeSub(remainder) % denominator;\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"DivisionByZeroError()\\\"))\\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\\n        hex\\\"a791837c\\\";\\n\\n    // bytes4(keccak256(\\\"RoundingError(uint256,uint256,uint256)\\\"))\\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\\n        0x339f3de2;\\n\\n    // solhint-disable func-name-mixedcase\\n    function DivisionByZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return DIVISION_BY_ZERO_ERROR;\\n    }\\n\\n    function RoundingError(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ROUNDING_ERROR_SELECTOR,\\n            numerator,\\n            denominator,\\n            target\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/fixins/FixinProtocolFees.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../external/FeeCollector.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n\\n/// @dev Helpers for collecting protocol fees.\\nabstract contract FixinProtocolFees {\\n    /// @dev The protocol fee multiplier.\\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\\n    /// @dev Hash of the fee collector init code.\\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\\n    /// @dev The WETH token contract.\\n    IEtherTokenV06 private immutable WETH;\\n    /// @dev The staking contract.\\n    IStaking private immutable STAKING;\\n\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        uint32 protocolFeeMultiplier\\n    )\\n        internal\\n    {\\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\\n        WETH = weth;\\n        STAKING = staking;\\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\\n    }\\n\\n    /// @dev   Collect the specified protocol fee in ETH.\\n    ///        The fee is stored in a per-pool fee collector contract.\\n    /// @param poolId The pool ID for which a fee is being collected.\\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\\n    function _collectProtocolFee(bytes32 poolId)\\n        internal\\n        returns (uint256 ethProtocolFeePaid)\\n    {\\n        uint256 protocolFeePaid = _getSingleProtocolFee();\\n        if (protocolFeePaid == 0) {\\n            // Nothing to do.\\n            return 0;\\n        }\\n        FeeCollector feeCollector = _getFeeCollector(poolId);\\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\\\"\\\");\\n        require(success, \\\"FixinProtocolFees/ETHER_TRANSFER_FALIED\\\");\\n        return protocolFeePaid;\\n    }\\n\\n    /// @dev Transfer fees for a given pool to the staking contract.\\n    /// @param poolId Identifies the pool whose fees are being paid.\\n    function _transferFeesForPool(bytes32 poolId)\\n        internal\\n    {\\n        FeeCollector feeCollector = _getFeeCollector(poolId);\\n\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(feeCollector)\\n        }\\n\\n        if (codeSize == 0) {\\n            // Create and initialize the contract if necessary.\\n            new FeeCollector{salt: bytes32(poolId)}();\\n            feeCollector.initialize(WETH, STAKING, poolId);\\n        }\\n\\n        if (address(feeCollector).balance > 1) {\\n            feeCollector.convertToWeth(WETH);\\n        }\\n\\n        uint256 bal = WETH.balanceOf(address(feeCollector));\\n        if (bal > 1) {\\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\\n            STAKING.payProtocolFee(\\n                address(feeCollector),\\n                address(feeCollector),\\n                bal - 1);\\n        }\\n    }\\n\\n    /// @dev Compute the CREATE2 address for a fee collector.\\n    /// @param poolId The fee collector's pool ID.\\n    function _getFeeCollector(bytes32 poolId)\\n        internal\\n        view\\n        returns (FeeCollector)\\n    {\\n        // Compute the CREATE2 address for the fee collector.\\n        address payable addr = address(uint256(keccak256(abi.encodePacked(\\n            byte(0xff),\\n            address(this),\\n            poolId, // pool ID is salt\\n            FEE_COLLECTOR_INIT_CODE_HASH\\n        ))));\\n        return FeeCollector(addr);\\n    }\\n\\n    /// @dev Get the cost of a single protocol fee.\\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\\n    function _getSingleProtocolFee()\\n        internal\\n        view\\n        returns (uint256 protocolFeeAmount)\\n    {\\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibNativeOrdersRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibNativeOrdersRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function ProtocolFeeRefundFailed(\\n        address receiver,\\n        uint256 refundAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"ProtocolFeeRefundFailed(address,uint256)\\\")),\\n            receiver,\\n            refundAmount\\n        );\\n    }\\n\\n    function OrderNotFillableByOriginError(\\n        bytes32 orderHash,\\n        address txOrigin,\\n        address orderTxOrigin\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByOriginError(bytes32,address,address)\\\")),\\n            orderHash,\\n            txOrigin,\\n            orderTxOrigin\\n        );\\n    }\\n\\n    function OrderNotFillableError(\\n        bytes32 orderHash,\\n        uint8 orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableError(bytes32,uint8)\\\")),\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function OrderNotSignedByMakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByMakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            maker\\n        );\\n    }\\n\\n    function OrderNotFillableBySenderError(\\n        bytes32 orderHash,\\n        address sender,\\n        address orderSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableBySenderError(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            orderSender\\n        );\\n    }\\n\\n    function OrderNotFillableByTakerError(\\n        bytes32 orderHash,\\n        address taker,\\n        address orderTaker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            taker,\\n            orderTaker\\n        );\\n    }\\n\\n    function CancelSaltTooLowError(\\n        uint256 minValidSalt,\\n        uint256 oldMinValidSalt\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"CancelSaltTooLowError(uint256,uint256)\\\")),\\n            minValidSalt,\\n            oldMinValidSalt\\n        );\\n    }\\n\\n    function FillOrKillFailedError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"FillOrKillFailedError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n\\n    function OnlyOrderMakerAllowed(\\n        bytes32 orderHash,\\n        address sender,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOrderMakerAllowed(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            maker\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibNativeOrdersStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for `NativeOrdersFeature`.\\nlibrary LibNativeOrdersStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // How much taker token has been filled in order.\\n        // The lower `uint128` is the taker token fill amount.\\n        // The high bit will be `1` if the order was directly cancelled.\\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for limit orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for RFQ orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // For a given order origin, which tx.origin addresses are allowed to\\n        // fill the order.\\n        mapping(address => mapping(address => bool)) originRegistry;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.NativeOrders\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/OwnableFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../storage/LibOwnableStorage.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./IOwnableFeature.sol\\\";\\nimport \\\"./SimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Owner management features.\\ncontract OwnableFeature is\\n    IFeature,\\n    IOwnableFeature,\\n    FixinCommon\\n{\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"Ownable\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Initializes this feature. The intial owner will be set to this (ZeroEx)\\n    ///      to allow the bootstrappers to call `extend()`. Ownership should be\\n    ///      transferred to the real owner by the bootstrapper after\\n    ///      bootstrapping is complete.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap() external returns (bytes4 success) {\\n        // Set the owner to ourselves to allow bootstrappers to call `extend()`.\\n        LibOwnableStorage.getStorage().owner = address(this);\\n\\n        // Register feature functions.\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.transferOwnership.selector, _implementation);\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.owner.selector, _implementation);\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.migrate.selector, _implementation);\\n        return LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    ///      Only directly callable by the owner.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibOwnableStorage.Storage storage proxyStor = LibOwnableStorage.getStorage();\\n\\n        if (newOwner == address(0)) {\\n            LibOwnableRichErrors.TransferOwnerToZeroError().rrevert();\\n        } else {\\n            proxyStor.owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      Temporarily sets the owner to ourselves so we can perform admin functions.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param data The call data.\\n    /// @param newOwner The address of the new owner.\\n    function migrate(address target, bytes calldata data, address newOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            LibOwnableRichErrors.TransferOwnerToZeroError().rrevert();\\n        }\\n\\n        LibOwnableStorage.Storage storage stor = LibOwnableStorage.getStorage();\\n        // The owner will be temporarily set to `address(this)` inside the call.\\n        stor.owner = address(this);\\n\\n        // Perform the migration.\\n        LibMigrate.delegatecallMigrateFunction(target, data);\\n\\n        // Update the owner.\\n        stor.owner = newOwner;\\n\\n        emit Migrated(msg.sender, target, newOwner);\\n    }\\n\\n    /// @dev Get the owner of this contract.\\n    /// @return owner_ The owner of this contract.\\n    function owner() external override view returns (address owner_) {\\n        return LibOwnableStorage.getStorage().owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibOwnableStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `Ownable` feature.\\nlibrary LibOwnableStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The owner of this contract.\\n        address owner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.Ownable\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/SimpleFunctionRegistryFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../storage/LibProxyStorage.sol\\\";\\nimport \\\"../storage/LibSimpleFunctionRegistryStorage.sol\\\";\\nimport \\\"../errors/LibSimpleFunctionRegistryRichErrors.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Basic registry management features.\\ncontract SimpleFunctionRegistryFeature is\\n    IFeature,\\n    ISimpleFunctionRegistryFeature,\\n    FixinCommon\\n{\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"SimpleFunctionRegistry\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Initializes this feature, registering its own functions.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap()\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Register the registration functions (inception vibes).\\n        _extend(this.extend.selector, _implementation);\\n        _extend(this._extendSelf.selector, _implementation);\\n        // Register the rollback function.\\n        _extend(this.rollback.selector, _implementation);\\n        // Register getters.\\n        _extend(this.getRollbackLength.selector, _implementation);\\n        _extend(this.getRollbackEntryAtIndex.selector, _implementation);\\n        return LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    ///      Only directly callable by an authority.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        ) = _getStorages();\\n\\n        address currentImpl = proxyStor.impls[selector];\\n        if (currentImpl == targetImpl) {\\n            // Do nothing if already at targetImpl.\\n            return;\\n        }\\n        // Walk history backwards until we find the target implementation.\\n        address[] storage history = stor.implHistory[selector];\\n        uint256 i = history.length;\\n        for (; i > 0; --i) {\\n            address impl = history[i - 1];\\n            history.pop();\\n            if (impl == targetImpl) {\\n                break;\\n            }\\n        }\\n        if (i == 0) {\\n            LibSimpleFunctionRegistryRichErrors.NotInRollbackHistoryError(\\n                selector,\\n                targetImpl\\n            ).rrevert();\\n        }\\n        proxyStor.impls[selector] = targetImpl;\\n        emit ProxyFunctionUpdated(selector, currentImpl, targetImpl);\\n    }\\n\\n    /// @dev Register or replace a function.\\n    ///      Only directly callable by an authority.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _extend(selector, impl);\\n    }\\n\\n    /// @dev Register or replace a function.\\n    ///      Only callable from within.\\n    ///      This function is only used during the bootstrap process and\\n    ///      should be deregistered by the deployer after bootstrapping is\\n    ///      complete.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function _extendSelf(bytes4 selector, address impl)\\n        external\\n        onlySelf\\n    {\\n        _extend(selector, impl);\\n    }\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        override\\n        view\\n        returns (uint256 rollbackLength)\\n    {\\n        return LibSimpleFunctionRegistryStorage.getStorage().implHistory[selector].length;\\n    }\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        override\\n        view\\n        returns (address impl)\\n    {\\n        return LibSimpleFunctionRegistryStorage.getStorage().implHistory[selector][idx];\\n    }\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function _extend(bytes4 selector, address impl)\\n        private\\n    {\\n        (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        ) = _getStorages();\\n\\n        address oldImpl = proxyStor.impls[selector];\\n        address[] storage history = stor.implHistory[selector];\\n        history.push(oldImpl);\\n        proxyStor.impls[selector] = impl;\\n        emit ProxyFunctionUpdated(selector, oldImpl, impl);\\n    }\\n\\n    /// @dev Get the storage buckets for this feature and the proxy.\\n    /// @return stor Storage bucket for this feature.\\n    /// @return proxyStor age bucket for the proxy.\\n    function _getStorages()\\n        private\\n        pure\\n        returns (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        )\\n    {\\n        return (\\n            LibSimpleFunctionRegistryStorage.getStorage(),\\n            LibProxyStorage.getStorage()\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibSimpleFunctionRegistryStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `SimpleFunctionRegistry` feature.\\nlibrary LibSimpleFunctionRegistryStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Mapping of function selector -> implementation history.\\n        mapping(bytes4 => address[]) implHistory;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.SimpleFunctionRegistry\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibSimpleFunctionRegistryRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSimpleFunctionRegistryRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function NotInRollbackHistoryError(bytes4 selector, address targetImpl)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NotInRollbackHistoryError(bytes4,address)\\\")),\\n            selector,\\n            targetImpl\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/SignatureValidatorFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"../errors/LibSignatureRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./ISignatureValidatorFeature.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\n\\n\\n/// @dev Feature for validating signatures.\\ncontract SignatureValidatorFeature is\\n    IFeature,\\n    ISignatureValidatorFeature,\\n    FixinCommon\\n{\\n    using LibBytesV06 for bytes;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"SignatureValidator\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.validateHashSignature.selector);\\n        _registerFeatureFunction(this.isValidHashSignature.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\\n    ///      Reverts otherwise.\\n    /// @param hash The hash that was signed.\\n    /// @param signer The signer of the hash.\\n    /// @param signature The signature. The last byte of this signature should\\n    ///        be a member of the `SignatureType` enum.\\n    function validateHashSignature(\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    )\\n        public\\n        override\\n        view\\n    {\\n        SignatureType signatureType = _readValidSignatureType(\\n            hash,\\n            signer,\\n            signature\\n        );\\n\\n        // TODO: When we support non-hash signature types, assert that\\n        // `signatureType` is only `EIP712` or `EthSign` here.\\n\\n        _validateHashSignatureTypes(\\n            signatureType,\\n            hash,\\n            signer,\\n            signature\\n        );\\n    }\\n\\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\\n    /// @param hash The hash that was signed.\\n    /// @param signer The signer of the hash.\\n    /// @param signature The signature. The last byte of this signature should\\n    ///        be a member of the `SignatureType` enum.\\n    /// @return isValid `true` on success.\\n    function isValidHashSignature(\\n        bytes32 hash,\\n        address signer,\\n        bytes calldata signature\\n    )\\n        external\\n        view\\n        override\\n        returns (bool isValid)\\n    {\\n        // HACK: `validateHashSignature()` is stateless so we can just perform\\n        // a staticcall against the implementation contract. This avoids the\\n        // overhead of going through the proxy. If `validateHashSignature()` ever\\n        // becomes stateful this would need to change.\\n        (isValid, ) = _implementation.staticcall(\\n            abi.encodeWithSelector(\\n                this.validateHashSignature.selector,\\n                hash,\\n                signer,\\n                signature\\n            )\\n        );\\n    }\\n\\n    /// @dev Validates a hash-only signature type. Low-level, hidden variant.\\n    /// @param signatureType The type of signature to check.\\n    /// @param hash The hash that was signed.\\n    /// @param signer The signer of the hash.\\n    /// @param signature The signature. The last byte of this signature should\\n    ///        be a member of the `SignatureType` enum.\\n    function _validateHashSignatureTypes(\\n        SignatureType signatureType,\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    )\\n        private\\n        pure\\n    {\\n        address recovered = address(0);\\n        if (signatureType == SignatureType.Invalid) {\\n            // Always invalid signature.\\n            // Like Illegal, this is always implicitly available and therefore\\n            // offered explicitly. It can be implicitly created by providing\\n            // a correctly formatted but incorrect signature.\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash,\\n                signer,\\n                signature\\n            ).rrevert();\\n        } else if (signatureType == SignatureType.EIP712) {\\n            // Signature using EIP712\\n            if (signature.length != 66) {\\n                LibSignatureRichErrors.SignatureValidationError(\\n                    LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\\n                    hash,\\n                    signer,\\n                    signature\\n                ).rrevert();\\n            }\\n            uint8 v = uint8(signature[0]);\\n            bytes32 r = signature.readBytes32(1);\\n            bytes32 s = signature.readBytes32(33);\\n            if (uint256(r) < ECDSA_SIGNATURE_R_LIMIT && uint256(s) < ECDSA_SIGNATURE_S_LIMIT) {\\n                recovered = ecrecover(\\n                    hash,\\n                    v,\\n                    r,\\n                    s\\n                );\\n            }\\n        } else if (signatureType == SignatureType.EthSign) {\\n            // Signed using `eth_sign`\\n            if (signature.length != 66) {\\n                LibSignatureRichErrors.SignatureValidationError(\\n                    LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\\n                    hash,\\n                    signer,\\n                    signature\\n                ).rrevert();\\n            }\\n            uint8 v = uint8(signature[0]);\\n            bytes32 r = signature.readBytes32(1);\\n            bytes32 s = signature.readBytes32(33);\\n            if (uint256(r) < ECDSA_SIGNATURE_R_LIMIT && uint256(s) < ECDSA_SIGNATURE_S_LIMIT) {\\n                recovered = ecrecover(\\n                    keccak256(abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                        hash\\n                    )),\\n                    v,\\n                    r,\\n                    s\\n                );\\n            }\\n        } else {\\n            // This should never happen.\\n            revert('SignatureValidator/ILLEGAL_CODE_PATH');\\n        }\\n        if (recovered == address(0) || signer != recovered) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.WRONG_SIGNER,\\n                hash,\\n                signer,\\n                signature\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Reads the `SignatureType` from the end of a signature and validates it.\\n    function _readValidSignatureType(\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    )\\n        private\\n        pure\\n        returns (SignatureType signatureType)\\n    {\\n        // Read the signatureType from the signature\\n        signatureType = _readSignatureType(\\n            hash,\\n            signer,\\n            signature\\n        );\\n\\n        // Ensure signature is supported\\n        if (uint8(signatureType) >= uint8(SignatureType.NSignatureTypes)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.UNSUPPORTED,\\n                hash,\\n                signer,\\n                signature\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        // This is always an implicit option since a signer can create a\\n        // signature array with invalid type or length. We may as well make\\n        // it an explicit option. This aids testing and analysis. It is\\n        // also the initialization value for the enum type.\\n        if (signatureType == SignatureType.Illegal) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash,\\n                signer,\\n                signature\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Reads the `SignatureType` from the end of a signature.\\n    function _readSignatureType(\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    )\\n        private\\n        pure\\n        returns (SignatureType sigType)\\n    {\\n        if (signature.length == 0) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\\n                hash,\\n                signer,\\n                signature\\n            ).rrevert();\\n        }\\n        return SignatureType(uint8(signature[signature.length - 1]));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/TokenSpenderFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../errors/LibSpenderRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../external/IAllowanceTarget.sol\\\";\\nimport \\\"../storage/LibTokenSpenderStorage.sol\\\";\\nimport \\\"./ITokenSpenderFeature.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\n\\n\\n/// @dev Feature that allows spending token allowances.\\ncontract TokenSpenderFeature is\\n    IFeature,\\n    ITokenSpenderFeature,\\n    FixinCommon\\n{\\n    // solhint-disable\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"TokenSpender\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n    // solhint-enable\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Initialize and register this feature. Should be delegatecalled\\n    ///      into during a `Migrate.migrate()`.\\n    /// @param allowanceTarget An `allowanceTarget` instance, configured to have\\n    ///        the ZeroeEx contract as an authority.\\n    /// @return success `MIGRATE_SUCCESS` on success.\\n    function migrate(IAllowanceTarget allowanceTarget)\\n        external\\n        returns (bytes4 success)\\n    {\\n        LibTokenSpenderStorage.getStorage().allowanceTarget = allowanceTarget;\\n        _registerFeatureFunction(this.getAllowanceTarget.selector);\\n        _registerFeatureFunction(this._spendERC20Tokens.selector);\\n        _registerFeatureFunction(this.getSpendableERC20BalanceOf.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`. Only callable from within.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _spendERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        onlySelf\\n    {\\n        IAllowanceTarget spender = LibTokenSpenderStorage.getStorage().allowanceTarget;\\n        // Have the allowance target execute an ERC20 `transferFrom()`.\\n        (bool didSucceed, bytes memory resultData) = address(spender).call(\\n            abi.encodeWithSelector(\\n                IAllowanceTarget.executeCall.selector,\\n                address(token),\\n                abi.encodeWithSelector(\\n                    IERC20TokenV06.transferFrom.selector,\\n                    owner,\\n                    to,\\n                    amount\\n                )\\n            )\\n        );\\n        if (didSucceed) {\\n            resultData = abi.decode(resultData, (bytes));\\n        }\\n        if (!didSucceed || !LibERC20TokenV06.isSuccessfulResult(resultData)) {\\n            LibSpenderRichErrors.SpenderERC20TransferFromFailedError(\\n                address(token),\\n                owner,\\n                to,\\n                amount,\\n                resultData\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by the token spender.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\\n        external\\n        override\\n        view\\n        returns (uint256 amount)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(LibTokenSpenderStorage.getStorage().allowanceTarget)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n\\n    /// @dev Get the address of the allowance target.\\n    /// @return target The target of token allowances.\\n    function getAllowanceTarget()\\n        external\\n        override\\n        view\\n        returns (address target)\\n    {\\n        return address(LibTokenSpenderStorage.getStorage().allowanceTarget);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/IAllowanceTarget.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\\\";\\n\\n\\n/// @dev The allowance target for the TokenSpender feature.\\ninterface IAllowanceTarget is\\n    IAuthorizableV06\\n{\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        returns (bytes memory resultData);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibTokenSpenderStorage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IAllowanceTarget.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `TokenSpender` feature.\\nlibrary LibTokenSpenderStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Allowance target contract.\\n        IAllowanceTarget allowanceTarget;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.TokenSpender\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/TransformERC20Feature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\nimport \\\"../external/FlashWallet.sol\\\";\\nimport \\\"../storage/LibTransformERC20Storage.sol\\\";\\nimport \\\"../transformers/IERC20Transformer.sol\\\";\\nimport \\\"../transformers/LibERC20Transformer.sol\\\";\\nimport \\\"./ITransformERC20Feature.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./ISignatureValidatorFeature.sol\\\";\\n\\n\\n/// @dev Feature to composably transform between ERC20 tokens.\\ncontract TransformERC20Feature is\\n    IFeature,\\n    ITransformERC20Feature,\\n    FixinCommon,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Stack vars for `_transformERC20Private()`.\\n    struct TransformERC20PrivateState {\\n        IFlashWallet wallet;\\n        address transformerDeployer;\\n        uint256 takerOutputTokenBalanceBefore;\\n        uint256 takerOutputTokenBalanceAfter;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"TransformERC20\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 3, 1);\\n\\n    constructor(bytes32 greedyTokensBloomFilter)\\n        public\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {}\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @param transformerDeployer The trusted deployer for transformers.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate(address transformerDeployer)\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.getTransformerDeployer.selector);\\n        _registerFeatureFunction(this.createTransformWallet.selector);\\n        _registerFeatureFunction(this.getTransformWallet.selector);\\n        _registerFeatureFunction(this.setTransformerDeployer.selector);\\n        _registerFeatureFunction(this.setQuoteSigner.selector);\\n        _registerFeatureFunction(this.getQuoteSigner.selector);\\n        _registerFeatureFunction(this.transformERC20.selector);\\n        _registerFeatureFunction(this._transformERC20.selector);\\n        if (this.getTransformWallet() == IFlashWallet(address(0))) {\\n            // Create the transform wallet if it doesn't exist.\\n            this.createTransformWallet();\\n        }\\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Replace the allowed deployer for transformers.\\n    ///      Only callable by the owner.\\n    /// @param transformerDeployer The address of the trusted deployer for transformers.\\n    function setTransformerDeployer(address transformerDeployer)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\\n        emit TransformerDeployerUpdated(transformerDeployer);\\n    }\\n\\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\\n    ///      Only callable by the owner.\\n    /// @param quoteSigner The address of the new calldata signer.\\n    function setQuoteSigner(address quoteSigner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibTransformERC20Storage.getStorage().quoteSigner = quoteSigner;\\n        emit QuoteSignerUpdated(quoteSigner);\\n    }\\n\\n    /// @dev Return the allowed deployer for transformers.\\n    /// @return deployer The transform deployer address.\\n    function getTransformerDeployer()\\n        public\\n        override\\n        view\\n        returns (address deployer)\\n    {\\n        return LibTransformERC20Storage.getStorage().transformerDeployer;\\n    }\\n\\n    /// @dev Return the optional signer for `transformERC20()` calldata.\\n    /// @return signer The signer address.\\n    function getQuoteSigner()\\n        public\\n        override\\n        view\\n        returns (address signer)\\n    {\\n        return LibTransformERC20Storage.getStorage().quoteSigner;\\n    }\\n\\n    /// @dev Deploy a new wallet instance and replace the current one with it.\\n    ///      Useful if we somehow break the current wallet instance.\\n    ///      Only callable by the owner.\\n    /// @return wallet The new wallet instance.\\n    function createTransformWallet()\\n        public\\n        override\\n        onlyOwner\\n        returns (IFlashWallet wallet)\\n    {\\n        wallet = new FlashWallet();\\n        LibTransformERC20Storage.getStorage().wallet = wallet;\\n    }\\n\\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\\n    ///      to an ERC20 `outputToken`.\\n    /// @param inputToken The token being provided by the sender.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the sender.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\\n    ///        will be solt.\\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\\n    ///        must receive for the entire transformation to succeed. If set to zero,\\n    ///        the minimum output token transfer will not be asserted.\\n    /// @param transformations The transformations to execute on the token balance(s)\\n    ///        in sequence.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\\n    function transformERC20(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] memory transformations\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint256 outputTokenAmount)\\n    {\\n        return _transformERC20Private(\\n            TransformERC20Args({\\n                taker: msg.sender,\\n                inputToken: inputToken,\\n                outputToken: outputToken,\\n                inputTokenAmount: inputTokenAmount,\\n                minOutputTokenAmount: minOutputTokenAmount,\\n                transformations: transformations\\n            })\\n        );\\n    }\\n\\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20(TransformERC20Args memory args)\\n        public\\n        virtual\\n        override\\n        payable\\n        onlySelf\\n        returns (uint256 outputTokenAmount)\\n    {\\n        return _transformERC20Private(args);\\n    }\\n\\n    /// @dev Private version of `transformERC20()`.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20Private(TransformERC20Args memory args)\\n        private\\n        returns (uint256 outputTokenAmount)\\n    {\\n        // If the input token amount is -1 and we are not selling ETH,\\n        // transform the taker's entire spendable balance.\\n        if (args.inputTokenAmount == uint256(-1)) {\\n            if (LibERC20Transformer.isTokenETH(args.inputToken)) {\\n                // We can't pull more ETH from the taker, so we just set the\\n                // input token amount to the value attached to the call.\\n                args.inputTokenAmount = msg.value;\\n            } else {\\n                args.inputTokenAmount = _getSpendableERC20BalanceOf(\\n                    args.inputToken,\\n                    args.taker\\n                );\\n            }\\n        }\\n\\n        TransformERC20PrivateState memory state;\\n        state.wallet = getTransformWallet();\\n        state.transformerDeployer = getTransformerDeployer();\\n\\n        // Remember the initial output token balance of the taker.\\n        state.takerOutputTokenBalanceBefore =\\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.taker);\\n\\n        // Pull input tokens from the taker to the wallet and transfer attached ETH.\\n        _transferInputTokensAndAttachedEth(\\n            args.inputToken,\\n            args.taker,\\n            address(state.wallet),\\n            args.inputTokenAmount\\n        );\\n\\n        {\\n            // Perform transformations.\\n            for (uint256 i = 0; i < args.transformations.length; ++i) {\\n                _executeTransformation(\\n                    state.wallet,\\n                    args.transformations[i],\\n                    state.transformerDeployer,\\n                    args.taker\\n                );\\n            }\\n        }\\n\\n        // Compute how much output token has been transferred to the taker.\\n        state.takerOutputTokenBalanceAfter =\\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.taker);\\n        if (state.takerOutputTokenBalanceAfter < state.takerOutputTokenBalanceBefore) {\\n            LibTransformERC20RichErrors.NegativeTransformERC20OutputError(\\n                address(args.outputToken),\\n                state.takerOutputTokenBalanceBefore - state.takerOutputTokenBalanceAfter\\n            ).rrevert();\\n        }\\n        outputTokenAmount = state.takerOutputTokenBalanceAfter.safeSub(\\n            state.takerOutputTokenBalanceBefore\\n        );\\n        // Ensure enough output token has been sent to the taker.\\n        if (outputTokenAmount < args.minOutputTokenAmount) {\\n            LibTransformERC20RichErrors.IncompleteTransformERC20Error(\\n                address(args.outputToken),\\n                outputTokenAmount,\\n                args.minOutputTokenAmount\\n            ).rrevert();\\n        }\\n\\n        // Emit an event.\\n        emit TransformedERC20(\\n            args.taker,\\n            address(args.inputToken),\\n            address(args.outputToken),\\n            args.inputTokenAmount,\\n            outputTokenAmount\\n        );\\n    }\\n\\n    /// @dev Return the current wallet instance that will serve as the execution\\n    ///      context for transformations.\\n    /// @return wallet The wallet instance.\\n    function getTransformWallet()\\n        public\\n        override\\n        view\\n        returns (IFlashWallet wallet)\\n    {\\n        return LibTransformERC20Storage.getStorage().wallet;\\n    }\\n\\n    /// @dev Transfer input tokens from the taker and any attached ETH to `to`\\n    /// @param inputToken The token to pull from the taker.\\n    /// @param from The from (taker) address.\\n    /// @param to The recipient of tokens and ETH.\\n    /// @param amount Amount of `inputToken` tokens to transfer.\\n    function _transferInputTokensAndAttachedEth(\\n        IERC20TokenV06 inputToken,\\n        address from,\\n        address payable to,\\n        uint256 amount\\n    )\\n        private\\n    {\\n        // Transfer any attached ETH.\\n        if (msg.value != 0) {\\n            to.transfer(msg.value);\\n        }\\n        // Transfer input tokens.\\n        if (!LibERC20Transformer.isTokenETH(inputToken)) {\\n            // Token is not ETH, so pull ERC20 tokens.\\n            _transferERC20Tokens(\\n                inputToken,\\n                from,\\n                to,\\n                amount\\n            );\\n        } else if (msg.value < amount) {\\n             // Token is ETH, so the caller must attach enough ETH to the call.\\n            LibTransformERC20RichErrors.InsufficientEthAttachedError(\\n                msg.value,\\n                amount\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Executs a transformer in the context of `wallet`.\\n    /// @param wallet The wallet instance.\\n    /// @param transformation The transformation.\\n    /// @param transformerDeployer The address of the transformer deployer.\\n    /// @param taker The taker address.\\n    function _executeTransformation(\\n        IFlashWallet wallet,\\n        Transformation memory transformation,\\n        address transformerDeployer,\\n        address payable taker\\n    )\\n        private\\n    {\\n        // Derive the transformer address from the deployment nonce.\\n        address payable transformer = LibERC20Transformer.getDeployedAddress(\\n            transformerDeployer,\\n            transformation.deploymentNonce\\n        );\\n        // Call `transformer.transform()` as the wallet.\\n        bytes memory resultData = wallet.executeDelegateCall(\\n            // The call target.\\n            transformer,\\n            // Call data.\\n            abi.encodeWithSelector(\\n                IERC20Transformer.transform.selector,\\n                IERC20Transformer.TransformContext({\\n                    sender: msg.sender,\\n                    taker: taker,\\n                    data: transformation.data\\n                })\\n            )\\n        );\\n        // Ensure the transformer returned the magic bytes.\\n        if (resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != LibERC20Transformer.TRANSFORMER_SUCCESS\\n        ) {\\n            LibTransformERC20RichErrors.TransformerFailedError(\\n                transformer,\\n                transformation.data,\\n                resultData\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Check if a call data hash is signed by the quote signer.\\n    /// @param callDataHash The hash of the callData.\\n    /// @param signature The signature provided by `getQuoteSigner()`.\\n    /// @return validCallDataHash `callDataHash` if so and `0x0` otherwise.\\n    function _getValidCallDataHash(\\n        bytes32 callDataHash,\\n        bytes memory signature\\n    )\\n        private\\n        view\\n        returns (bytes32 validCallDataHash)\\n    {\\n        address quoteSigner = getQuoteSigner();\\n        if (quoteSigner == address(0)) {\\n            // If no quote signer is configured, then all calldata hashes are\\n            // valid.\\n            return callDataHash;\\n        }\\n        if (signature.length == 0) {\\n            return bytes32(0);\\n        }\\n\\n        if (ISignatureValidatorFeature(address(this)).isValidHashSignature(\\n            callDataHash,\\n            quoteSigner,\\n            signature\\n        )) {\\n            return callDataHash;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibTransformERC20RichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibTransformERC20RichErrors {\\n\\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\\n\\n    function InsufficientEthAttachedError(\\n        uint256 ethAttached,\\n        uint256 ethNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientEthAttachedError(uint256,uint256)\\\")),\\n            ethAttached,\\n            ethNeeded\\n        );\\n    }\\n\\n    function IncompleteTransformERC20Error(\\n        address outputToken,\\n        uint256 outputTokenAmount,\\n        uint256 minOutputTokenAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteTransformERC20Error(address,uint256,uint256)\\\")),\\n            outputToken,\\n            outputTokenAmount,\\n            minOutputTokenAmount\\n        );\\n    }\\n\\n    function NegativeTransformERC20OutputError(\\n        address outputToken,\\n        uint256 outputTokenLostAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NegativeTransformERC20OutputError(address,uint256)\\\")),\\n            outputToken,\\n            outputTokenLostAmount\\n        );\\n    }\\n\\n    function TransformerFailedError(\\n        address transformer,\\n        bytes memory transformerData,\\n        bytes memory resultData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransformerFailedError(address,bytes,bytes)\\\")),\\n            transformer,\\n            transformerData,\\n            resultData\\n        );\\n    }\\n\\n    // Common Transformer errors ///////////////////////////////////////////////\\n\\n    function OnlyCallableByDeployerError(\\n        address caller,\\n        address deployer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableByDeployerError(address,address)\\\")),\\n            caller,\\n            deployer\\n        );\\n    }\\n\\n    function InvalidExecutionContextError(\\n        address actualContext,\\n        address expectedContext\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidExecutionContextError(address,address)\\\")),\\n            actualContext,\\n            expectedContext\\n        );\\n    }\\n\\n    enum InvalidTransformDataErrorCode {\\n        INVALID_TOKENS,\\n        INVALID_ARRAY_LENGTH\\n    }\\n\\n    function InvalidTransformDataError(\\n        InvalidTransformDataErrorCode errorCode,\\n        bytes memory transformData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidTransformDataError(uint8,bytes)\\\")),\\n            errorCode,\\n            transformData\\n        );\\n    }\\n\\n    // FillQuoteTransformer errors /////////////////////////////////////////////\\n\\n    function IncompleteFillSellQuoteError(\\n        address sellToken,\\n        uint256 soldAmount,\\n        uint256 sellAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteFillSellQuoteError(address,uint256,uint256)\\\")),\\n            sellToken,\\n            soldAmount,\\n            sellAmount\\n        );\\n    }\\n\\n    function IncompleteFillBuyQuoteError(\\n        address buyToken,\\n        uint256 boughtAmount,\\n        uint256 buyAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteFillBuyQuoteError(address,uint256,uint256)\\\")),\\n            buyToken,\\n            boughtAmount,\\n            buyAmount\\n        );\\n    }\\n\\n    function InsufficientTakerTokenError(\\n        uint256 tokenBalance,\\n        uint256 tokensNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientTakerTokenError(uint256,uint256)\\\")),\\n            tokenBalance,\\n            tokensNeeded\\n        );\\n    }\\n\\n    function InsufficientProtocolFeeError(\\n        uint256 ethBalance,\\n        uint256 ethNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientProtocolFeeError(uint256,uint256)\\\")),\\n            ethBalance,\\n            ethNeeded\\n        );\\n    }\\n\\n    function InvalidERC20AssetDataError(\\n        bytes memory assetData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidERC20AssetDataError(bytes)\\\")),\\n            assetData\\n        );\\n    }\\n\\n    function InvalidTakerFeeTokenError(\\n        address token\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidTakerFeeTokenError(address)\\\")),\\n            token\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/FlashWallet.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibWalletRichErrors.sol\\\";\\nimport \\\"./IFlashWallet.sol\\\";\\n\\n\\n/// @dev A contract that can execute arbitrary calls from its owner.\\ncontract FlashWallet is\\n    IFlashWallet\\n{\\n    // solhint-disable no-unused-vars,indent,no-empty-blocks\\n    using LibRichErrorsV06 for bytes;\\n\\n    // solhint-disable\\n    /// @dev Store the owner/deployer as an immutable to make this contract stateless.\\n    address public override immutable owner;\\n    // solhint-enable\\n\\n    constructor() public {\\n        // The deployer is the owner.\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev Allows only the (immutable) owner to call a function.\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) {\\n            LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @param value Ether to attach to the call.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData,\\n        uint256 value\\n    )\\n        external\\n        payable\\n        override\\n        onlyOwner\\n        returns (bytes memory resultData)\\n    {\\n        bool success;\\n        (success, resultData) = target.call{value: value}(callData);\\n        if (!success) {\\n            LibWalletRichErrors\\n                .WalletExecuteCallFailedError(\\n                    address(this),\\n                    target,\\n                    callData,\\n                    value,\\n                    resultData\\n                )\\n                .rrevert();\\n        }\\n    }\\n\\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\\n    ///      Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeDelegateCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        payable\\n        override\\n        onlyOwner\\n        returns (bytes memory resultData)\\n    {\\n        bool success;\\n        (success, resultData) = target.delegatecall(callData);\\n        if (!success) {\\n            LibWalletRichErrors\\n                .WalletExecuteDelegateCallFailedError(\\n                    address(this),\\n                    target,\\n                    callData,\\n                    resultData\\n                )\\n                .rrevert();\\n        }\\n    }\\n\\n    // solhint-disable\\n    /// @dev Allows this contract to receive ether.\\n    receive() external override payable {}\\n    // solhint-enable\\n\\n    /// @dev Signal support for receiving ERC1155 tokens.\\n    /// @param interfaceID The interface ID, as per ERC-165 rules.\\n    /// @return hasSupport `true` if this contract supports an ERC-165 interface.\\n    function supportsInterface(bytes4 interfaceID)\\n        external\\n        pure\\n        returns (bool hasSupport)\\n    {\\n        return  interfaceID == this.supportsInterface.selector ||\\n                interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector ||\\n                interfaceID == this.tokenFallback.selector;\\n    }\\n\\n    ///  @dev Allow this contract to receive ERC1155 tokens.\\n    ///  @return success  `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    function onERC1155Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // id,\\n        uint256, // value,\\n        bytes calldata //data\\n    )\\n        external\\n        pure\\n        returns (bytes4 success)\\n    {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    ///  @dev Allow this contract to receive ERC1155 tokens.\\n    ///  @return success  `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    function onERC1155BatchReceived(\\n        address, // operator,\\n        address, // from,\\n        uint256[] calldata, // ids,\\n        uint256[] calldata, // values,\\n        bytes calldata // data\\n    )\\n        external\\n        pure\\n        returns (bytes4 success)\\n    {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @dev Allows this contract to receive ERC223 tokens.\\n    function tokenFallback(\\n        address, // from,\\n        uint256, // value,\\n        bytes calldata // value\\n    )\\n        external\\n        pure\\n    {}\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/errors/LibWalletRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibWalletRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function WalletExecuteCallFailedError(\\n        address wallet,\\n        address callTarget,\\n        bytes memory callData,\\n        uint256 callValue,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"WalletExecuteCallFailedError(address,address,bytes,uint256,bytes)\\\")),\\n            wallet,\\n            callTarget,\\n            callData,\\n            callValue,\\n            errorData\\n        );\\n    }\\n\\n    function WalletExecuteDelegateCallFailedError(\\n        address wallet,\\n        address callTarget,\\n        bytes memory callData,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"WalletExecuteDelegateCallFailedError(address,address,bytes,bytes)\\\")),\\n            wallet,\\n            callTarget,\\n            callData,\\n            errorData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/storage/LibTransformERC20Storage.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `TransformERC20` feature.\\nlibrary LibTransformERC20Storage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The current wallet instance.\\n        IFlashWallet wallet;\\n        // The transformer deployer address.\\n        address transformerDeployer;\\n        // The optional signer for `transformERC20()` calldata.\\n        address quoteSigner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.TransformERC20\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/LibERC20Transformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\n\\n\\nlibrary LibERC20Transformer {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    /// @dev ETH pseudo-token address.\\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev ETH pseudo-token.\\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\\n\\n    /// @dev Transfer ERC20 tokens and ETH.\\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\\n    /// @param to The recipient.\\n    /// @param amount The transfer amount.\\n    function transformerTransfer(\\n        IERC20TokenV06 token,\\n        address payable to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (isTokenETH(token)) {\\n            to.transfer(amount);\\n        } else {\\n            token.compatTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @dev Check if a token is the ETH pseudo-token.\\n    /// @param token The token to check.\\n    /// @return isETH `true` if the token is the ETH pseudo-token.\\n    function isTokenETH(IERC20TokenV06 token)\\n        internal\\n        pure\\n        returns (bool isETH)\\n    {\\n        return address(token) == ETH_TOKEN_ADDRESS;\\n    }\\n\\n    /// @dev Check the balance of an ERC20 token or ETH.\\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\\n    /// @param owner Holder of the tokens.\\n    /// @return tokenBalance The balance of `owner`.\\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\\n        internal\\n        view\\n        returns (uint256 tokenBalance)\\n    {\\n        if (isTokenETH(token)) {\\n            return owner.balance;\\n        }\\n        return token.balanceOf(owner);\\n    }\\n\\n    /// @dev RLP-encode a 32-bit or less account nonce.\\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\\n    /// @return rlpNonce The RLP encoding.\\n    function rlpEncodeNonce(uint32 nonce)\\n        internal\\n        pure\\n        returns (bytes memory rlpNonce)\\n    {\\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\\n        if (nonce == 0) {\\n            rlpNonce = new bytes(1);\\n            rlpNonce[0] = 0x80;\\n        } else if (nonce < 0x80) {\\n            rlpNonce = new bytes(1);\\n            rlpNonce[0] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFF) {\\n            rlpNonce = new bytes(2);\\n            rlpNonce[0] = 0x81;\\n            rlpNonce[1] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFFFF) {\\n            rlpNonce = new bytes(3);\\n            rlpNonce[0] = 0x82;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[2] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFFFFFF) {\\n            rlpNonce = new bytes(4);\\n            rlpNonce[0] = 0x83;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[3] = byte(uint8(nonce));\\n        } else {\\n            rlpNonce = new bytes(5);\\n            rlpNonce[0] = 0x84;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[4] = byte(uint8(nonce));\\n        }\\n    }\\n\\n    /// @dev Compute the expected deployment address by `deployer` at\\n    ///      the nonce given by `deploymentNonce`.\\n    /// @param deployer The address of the deployer.\\n    /// @param deploymentNonce The nonce that the deployer had when deploying\\n    ///        a contract.\\n    /// @return deploymentAddress The deployment address.\\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\\n        internal\\n        pure\\n        returns (address payable deploymentAddress)\\n    {\\n        // The address of if a deployed contract is the lower 20 bytes of the\\n        // hash of the RLP-encoded deployer's account address + account nonce.\\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\\n        return address(uint160(uint256(keccak256(abi.encodePacked(\\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\\n            byte(uint8(0x80 + 20)),\\n            deployer,\\n            rlpNonce\\n        )))));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/features/UniswapFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../external/IAllowanceTarget.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./IUniswapFeature.sol\\\";\\n\\n\\n/// @dev VIP uniswap fill functions.\\ncontract UniswapFeature is\\n    IFeature,\\n    IUniswapFeature,\\n    FixinCommon\\n{\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"UniswapFeature\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 0);\\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\\n    /// @dev WETH contract.\\n    IEtherTokenV06 private immutable WETH;\\n    /// @dev AllowanceTarget instance.\\n    IAllowanceTarget private immutable ALLOWANCE_TARGET;\\n\\n    // 0xFF + address of the UniswapV2Factory contract.\\n    uint256 constant private FF_UNISWAP_FACTORY = 0xFF5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f0000000000000000000000;\\n    // 0xFF + address of the (Sushiswap) UniswapV2Factory contract.\\n    uint256 constant private FF_SUSHISWAP_FACTORY = 0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000;\\n    // Init code hash of the UniswapV2Pair contract.\\n    uint256 constant private UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\\n    uint256 constant private SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    // ETH pseudo-token address.\\n    uint256 constant private ETH_TOKEN_ADDRESS_32 = 0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\\n    // Maximum token quantity that can be swapped against the UniswapV2Pair contract.\\n    uint256 constant private MAX_SWAP_AMOUNT = 2**112;\\n\\n    // bytes4(keccak256(\\\"executeCall(address,bytes)\\\"))\\n    uint256 constant private ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32 = 0xbca8c7b500000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"getReserves()\\\"))\\n    uint256 constant private UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"swap(uint256,uint256,address,bytes)\\\"))\\n    uint256 constant private UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n    uint256 constant private TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"allowance(address,address)\\\"))\\n    uint256 constant private ALLOWANCE_CALL_SELECTOR_32 = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"withdraw(uint256)\\\"))\\n    uint256 constant private WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"deposit()\\\"))\\n    uint256 constant private WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\\n    // bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n    uint256 constant private ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\\n\\n    /// @dev Construct this contract.\\n    /// @param weth The WETH contract.\\n    /// @param allowanceTarget The AllowanceTarget contract.\\n    /// @param greedyTokensBloomFilter The bloom filter for greedy tokens.\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IAllowanceTarget allowanceTarget,\\n        bytes32 greedyTokensBloomFilter\\n    ) public {\\n        WETH = weth;\\n        ALLOWANCE_TARGET = allowanceTarget;\\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.sellToUniswap.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\\n    /// @param tokens Sell path.\\n    /// @param sellAmount of `tokens[0]` Amount to sell.\\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\\n    /// @param isSushi Use sushiswap if true.\\n    /// @return buyAmount Amount of `tokens[-1]` bought.\\n    function sellToUniswap(\\n        IERC20TokenV06[] calldata tokens,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bool isSushi\\n    )\\n        external\\n        payable\\n        override\\n        returns (uint256 buyAmount)\\n    {\\n        require(tokens.length > 1, \\\"UniswapFeature/InvalidTokensLength\\\");\\n        {\\n            // Load immutables onto the stack.\\n            IEtherTokenV06 weth = WETH;\\n            IAllowanceTarget allowanceTarget = ALLOWANCE_TARGET;\\n            bytes32 greedyTokensBloomFilter = GREEDY_TOKENS_BLOOM_FILTER;\\n\\n            // Store some vars in memory to get around stack limits.\\n            assembly {\\n                // calldataload(mload(0xA00)) == first element of `tokens` array\\n                mstore(0xA00, add(calldataload(0x04), 0x24))\\n                // mload(0xA20) == isSushi\\n                mstore(0xA20, isSushi)\\n                // mload(0xA40) == WETH\\n                mstore(0xA40, weth)\\n                // mload(0xA60) == ALLOWANCE_TARGET\\n                mstore(0xA60, allowanceTarget)\\n                // mload(0xA80) == GREEDY_TOKENS_BLOOM_FILTER\\n                mstore(0xA80, greedyTokensBloomFilter)\\n            }\\n        }\\n\\n        assembly {\\n            // numPairs == tokens.length - 1\\n            let numPairs := sub(calldataload(add(calldataload(0x04), 0x4)), 1)\\n            // We use the previous buy amount as the sell amount for the next\\n            // pair in a path. So for the first swap we want to set it to `sellAmount`.\\n            buyAmount := sellAmount\\n            let buyToken\\n            let nextPair := 0\\n\\n            for {let i := 0} lt(i, numPairs) {i := add(i, 1)} {\\n                // sellToken = tokens[i]\\n                let sellToken := loadTokenAddress(i)\\n                // buyToken = tokens[i+1]\\n                buyToken := loadTokenAddress(add(i, 1))\\n                // The canonical ordering of this token pair.\\n                let pairOrder := lt(normalizeToken(sellToken), normalizeToken(buyToken))\\n\\n                // Compute the pair address if it hasn't already been computed\\n                // from the last iteration.\\n                let pair := nextPair\\n                if iszero(pair) {\\n                    pair := computePairAddress(sellToken, buyToken)\\n                    nextPair := 0\\n                }\\n\\n                if iszero(i) {\\n                    switch eq(sellToken, ETH_TOKEN_ADDRESS_32)\\n                        case 0 { // Not selling ETH. Selling an ERC20 instead.\\n                            // For the first pair we need to transfer sellTokens into the\\n                            // pair contract.\\n                            moveTakerTokensTo(sellToken, pair, sellAmount)\\n                        }\\n                        default {\\n                            // If selling ETH, we need to wrap it to WETH and transfer to the\\n                            // pair contract.\\n                            if iszero(eq(callvalue(), sellAmount)) {\\n                                revert(0, 0)\\n                            }\\n                            sellToken := mload(0xA40)// Re-assign to WETH\\n                            // Call `WETH.deposit{value: sellAmount}()`\\n                            mstore(0xB00, WETH_DEPOSIT_CALL_SELECTOR_32)\\n                            if iszero(call(gas(), sellToken, sellAmount, 0xB00, 0x4, 0x00, 0x0)) {\\n                                bubbleRevert()\\n                            }\\n                            // Call `WETH.transfer(pair, sellAmount)`\\n                            mstore(0xB00, ERC20_TRANSFER_CALL_SELECTOR_32)\\n                            mstore(0xB04, pair)\\n                            mstore(0xB24, sellAmount)\\n                            if iszero(call(gas(), sellToken, 0, 0xB00, 0x44, 0x00, 0x0)) {\\n                                bubbleRevert()\\n                            }\\n                        }\\n                    // No need to check results, if deposit/transfers failed the UniswapV2Pair will\\n                    // reject our trade (or it may succeed if somehow the reserve was out of sync)\\n                    // this is fine for the taker.\\n                }\\n\\n                // Call pair.getReserves(), store the results at `0xC00`\\n                mstore(0xB00, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\\n                if iszero(staticcall(gas(), pair, 0xB00, 0x4, 0xC00, 0x40)) {\\n                    bubbleRevert()\\n                }\\n\\n                // Sell amount for this hop is the previous buy amount.\\n                let pairSellAmount := buyAmount\\n                // Compute the buy amount based on the pair reserves.\\n                {\\n                    let sellReserve\\n                    let buyReserve\\n                    switch iszero(pairOrder)\\n                        case 0 {\\n                            // Transpose if pair order is different.\\n                            sellReserve := mload(0xC00)\\n                            buyReserve := mload(0xC20)\\n                        }\\n                        default {\\n                            sellReserve := mload(0xC20)\\n                            buyReserve := mload(0xC00)\\n                        }\\n                    // Ensure that the sellAmount is < 2B9B9B2.\\n                    if gt(pairSellAmount, MAX_SWAP_AMOUNT) {\\n                        revert(0, 0)\\n                    }\\n                    // Pairs are in the range (0, 2B9B9B2) so this shouldn't overflow.\\n                    // buyAmount = (pairSellAmount * 997 * buyReserve) /\\n                    //     (pairSellAmount * 997 + sellReserve * 1000);\\n                    let sellAmountWithFee := mul(pairSellAmount, 997)\\n                    buyAmount := div(\\n                        mul(sellAmountWithFee, buyReserve),\\n                        add(sellAmountWithFee, mul(sellReserve, 1000))\\n                    )\\n                }\\n\\n                let receiver\\n                // Is this the last pair contract?\\n                switch eq(add(i, 1), numPairs)\\n                    case 0 {\\n                        // Not the last pair contract, so forward bought tokens to\\n                        // the next pair contract.\\n                        nextPair := computePairAddress(\\n                            buyToken,\\n                            loadTokenAddress(add(i, 2))\\n                        )\\n                        receiver := nextPair\\n                    }\\n                    default {\\n                        // The last pair contract.\\n                        // Forward directly to taker UNLESS they want ETH back.\\n                        switch eq(buyToken, ETH_TOKEN_ADDRESS_32)\\n                            case 0 {\\n                                receiver := caller()\\n                            }\\n                            default {\\n                                receiver := address()\\n                            }\\n                    }\\n\\n                // Call pair.swap()\\n                mstore(0xB00, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\\n                switch pairOrder\\n                    case 0 {\\n                        mstore(0xB04, buyAmount)\\n                        mstore(0xB24, 0)\\n                    }\\n                    default {\\n                        mstore(0xB04, 0)\\n                        mstore(0xB24, buyAmount)\\n                    }\\n                mstore(0xB44, receiver)\\n                mstore(0xB64, 0x80)\\n                mstore(0xB84, 0)\\n                if iszero(call(gas(), pair, 0, 0xB00, 0xA4, 0, 0)) {\\n                    bubbleRevert()\\n                }\\n            } // End for-loop.\\n\\n            // If buying ETH, unwrap the WETH first\\n            if eq(buyToken, ETH_TOKEN_ADDRESS_32) {\\n                // Call `WETH.withdraw(buyAmount)`\\n                mstore(0xB00, WETH_WITHDRAW_CALL_SELECTOR_32)\\n                mstore(0xB04, buyAmount)\\n                if iszero(call(gas(), mload(0xA40), 0, 0xB00, 0x24, 0x00, 0x0)) {\\n                    bubbleRevert()\\n                }\\n                // Transfer ETH to the caller.\\n                if iszero(call(gas(), caller(), buyAmount, 0xB00, 0x0, 0x00, 0x0)) {\\n                    bubbleRevert()\\n                }\\n            }\\n\\n            // Functions ///////////////////////////////////////////////////////\\n\\n            // Load a token address from the `tokens` calldata argument.\\n            function loadTokenAddress(idx) -> addr {\\n                addr := and(ADDRESS_MASK, calldataload(add(mload(0xA00), mul(idx, 0x20))))\\n            }\\n\\n            // Convert ETH pseudo-token addresses to WETH.\\n            function normalizeToken(token) -> normalized {\\n                normalized := token\\n                // Translate ETH pseudo-tokens to WETH.\\n                if eq(token, ETH_TOKEN_ADDRESS_32) {\\n                    normalized := mload(0xA40)\\n                }\\n            }\\n\\n            // Compute the address of the UniswapV2Pair contract given two\\n            // tokens.\\n            function computePairAddress(tokenA, tokenB) -> pair {\\n                // Convert ETH pseudo-token addresses to WETH.\\n                tokenA := normalizeToken(tokenA)\\n                tokenB := normalizeToken(tokenB)\\n                // There is one contract for every combination of tokens,\\n                // which is deployed using CREATE2.\\n                // The derivation of this address is given by:\\n                //   address(keccak256(abi.encodePacked(\\n                //       bytes(0xFF),\\n                //       address(UNISWAP_FACTORY_ADDRESS),\\n                //       keccak256(abi.encodePacked(\\n                //           tokenA < tokenB ? tokenA : tokenB,\\n                //           tokenA < tokenB ? tokenB : tokenA,\\n                //       )),\\n                //       bytes32(UNISWAP_PAIR_INIT_CODE_HASH),\\n                //   )));\\n\\n                // Compute the salt (the hash of the sorted tokens).\\n                // Tokens are written in reverse memory order to packed encode\\n                // them as two 20-byte values in a 40-byte chunk of memory\\n                // starting at 0xB0C.\\n                switch lt(tokenA, tokenB)\\n                    case 0 {\\n                        mstore(0xB14, tokenA)\\n                        mstore(0xB00, tokenB)\\n                    }\\n                    default {\\n                        mstore(0xB14, tokenB)\\n                        mstore(0xB00, tokenA)\\n                    }\\n                let salt := keccak256(0xB0C, 0x28)\\n                // Compute the pair address by hashing all the components together.\\n                switch mload(0xA20) // isSushi\\n                    case 0 {\\n                        mstore(0xB00, FF_UNISWAP_FACTORY)\\n                        mstore(0xB15, salt)\\n                        mstore(0xB35, UNISWAP_PAIR_INIT_CODE_HASH)\\n                    }\\n                    default {\\n                        mstore(0xB00, FF_SUSHISWAP_FACTORY)\\n                        mstore(0xB15, salt)\\n                        mstore(0xB35, SUSHISWAP_PAIR_INIT_CODE_HASH)\\n                    }\\n                pair := and(ADDRESS_MASK, keccak256(0xB00, 0x55))\\n            }\\n\\n            // Revert with the return data from the most recent call.\\n            function bubbleRevert() {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n\\n            // Move `amount` tokens from the taker/caller to `to`.\\n            function moveTakerTokensTo(token, to, amount) {\\n\\n                // If the token is possibly greedy, we check the allowance rather\\n                // than relying on letting the transferFrom() call fail and\\n                // falling through to legacy allowance target because the token\\n                // will eat all our gas.\\n                if isTokenPossiblyGreedy(token) {\\n                    // Check if we have enough direct allowance by calling\\n                    // `token.allowance()``\\n                    mstore(0xB00, ALLOWANCE_CALL_SELECTOR_32)\\n                    mstore(0xB04, caller())\\n                    mstore(0xB24, address())\\n                    let success := call(gas(), token, 0, 0xB00, 0x44, 0xC00, 0x20)\\n                    if iszero(success) {\\n                        // Call to allowance() failed.\\n                        bubbleRevert()\\n                    }\\n                    // Call succeeded.\\n                    // Result is stored in 0xC00-0xC20.\\n                    if lt(mload(0xC00), amount) {\\n                        // We don't have enough direct allowance, so try\\n                        // going through the legacy allowance taregt.\\n                        moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\\n                        leave\\n                    }\\n                }\\n\\n                // Otherwise we will optimistically try to perform a `transferFrom()`\\n                // directly then if it fails we will go through the legacy allowance target.\\n                mstore(0xB00, TRANSFER_FROM_CALL_SELECTOR_32)\\n                mstore(0xB04, caller())\\n                mstore(0xB24, to)\\n                mstore(0xB44, amount)\\n\\n                let success := call(\\n                    // Cap the gas limit to prvent all gas being consumed\\n                    // if the token reverts.\\n                    gas(),\\n                    token,\\n                    0,\\n                    0xB00,\\n                    0x64,\\n                    0xC00,\\n                    // Copy only the first 32 bytes of return data. We\\n                    // only care about reading a boolean in the success\\n                    // case, and we discard the return data in the\\n                    // failure case.\\n                    0x20\\n                )\\n\\n                let rdsize := returndatasize()\\n\\n                // Check for ERC20 success. ERC20 tokens should\\n                // return a boolean, but some return nothing or\\n                // extra data. We accept 0-length return data as\\n                // success, or at least 32 bytes that starts with\\n                // a 32-byte boolean true.\\n                success := and(\\n                    success,                         // call itself succeeded\\n                    or(\\n                        iszero(rdsize),              // no return data, or\\n                        and(\\n                            iszero(lt(rdsize, 32)),  // at least 32 bytes\\n                            eq(mload(0xC00), 1)      // starts with uint256(1)\\n                        )\\n                    )\\n                )\\n\\n                if iszero(success) {\\n                    // Try to fall back to the allowance target.\\n                    moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\\n                }\\n            }\\n\\n            // Move tokens by going through the legacy allowance target contract.\\n            function moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount) {\\n                mstore(0xB00, ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32)\\n                mstore(0xB04, token)\\n                mstore(0xB24, 0x40)\\n                mstore(0xB44, 0x64)\\n                mstore(0xB64, TRANSFER_FROM_CALL_SELECTOR_32)\\n                mstore(0xB68, caller())\\n                mstore(0xB88, to)\\n                mstore(0xBA8, amount)\\n                if iszero(call(gas(), mload(0xA60), 0, 0xB00, 0xC8, 0x00, 0x0)) {\\n                    bubbleRevert()\\n                }\\n                // If this fall back failed, the swap will most likely fail\\n                // so there's no need to validate the result.\\n            }\\n\\n            // Checks if a token possibly belongs to the GREEDY_TOKENS_BLOOM_FILTER\\n            // bloom filter.\\n            function isTokenPossiblyGreedy(token) -> isPossiblyGreedy {\\n                // The hash is given by:\\n                // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\\n                mstore(0, token)\\n                let h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\\n                isPossiblyGreedy := eq(and(h, mload(0xA80)), h)\\n            }\\n        }\\n\\n        // Revert if we bought too little.\\n        // TODO: replace with rich revert?\\n        require(buyAmount >= minBuyAmount, \\\"UniswapFeature/UnderBought\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/migrations/FullMigration.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ZeroEx.sol\\\";\\nimport \\\"../features/IOwnableFeature.sol\\\";\\nimport \\\"../features/TokenSpenderFeature.sol\\\";\\nimport \\\"../features/TransformERC20Feature.sol\\\";\\nimport \\\"../features/SignatureValidatorFeature.sol\\\";\\nimport \\\"../features/MetaTransactionsFeature.sol\\\";\\nimport \\\"../features/NativeOrdersFeature.sol\\\";\\nimport \\\"../external/AllowanceTarget.sol\\\";\\nimport \\\"./InitialMigration.sol\\\";\\n\\n\\n/// @dev A contract for deploying and configuring the full ZeroEx contract.\\ncontract FullMigration {\\n\\n    // solhint-disable no-empty-blocks,indent\\n\\n    /// @dev Features to add the the proxy contract.\\n    struct Features {\\n        SimpleFunctionRegistryFeature registry;\\n        OwnableFeature ownable;\\n        TokenSpenderFeature tokenSpender;\\n        TransformERC20Feature transformERC20;\\n        SignatureValidatorFeature signatureValidator;\\n        MetaTransactionsFeature metaTransactions;\\n        NativeOrdersFeature nativeOrders;\\n    }\\n\\n    /// @dev Parameters needed to initialize features.\\n    struct MigrateOpts {\\n        address transformerDeployer;\\n    }\\n\\n    /// @dev The allowed caller of `initializeZeroEx()`.\\n    address public immutable initializeCaller;\\n    /// @dev The initial migration contract.\\n    InitialMigration private _initialMigration;\\n\\n    /// @dev Instantiate this contract and set the allowed caller of `initializeZeroEx()`\\n    ///      to `initializeCaller`.\\n    /// @param initializeCaller_ The allowed caller of `initializeZeroEx()`.\\n    constructor(address payable initializeCaller_)\\n        public\\n    {\\n        initializeCaller = initializeCaller_;\\n        // Create an initial migration contract with this contract set to the\\n        // allowed `initializeCaller`.\\n        _initialMigration = new InitialMigration(address(this));\\n    }\\n\\n    /// @dev Retrieve the bootstrapper address to use when constructing `ZeroEx`.\\n    /// @return bootstrapper The bootstrapper address.\\n    function getBootstrapper()\\n        external\\n        view\\n        returns (address bootstrapper)\\n    {\\n        return address(_initialMigration);\\n    }\\n\\n    /// @dev Initialize the `ZeroEx` contract with the full feature set,\\n    ///      transfer ownership to `owner`, then self-destruct.\\n    /// @param owner The owner of the contract.\\n    /// @param zeroEx The instance of the ZeroEx contract. ZeroEx should\\n    ///        been constructed with this contract as the bootstrapper.\\n    /// @param features Features to add to the proxy.\\n    /// @return _zeroEx The configured ZeroEx contract. Same as the `zeroEx` parameter.\\n    /// @param migrateOpts Parameters needed to initialize features.\\n    function migrateZeroEx(\\n        address payable owner,\\n        ZeroEx zeroEx,\\n        Features memory features,\\n        MigrateOpts memory migrateOpts\\n    )\\n        public\\n        returns (ZeroEx _zeroEx)\\n    {\\n        require(msg.sender == initializeCaller, \\\"FullMigration/INVALID_SENDER\\\");\\n\\n        // Perform the initial migration with the owner set to this contract.\\n        _initialMigration.initializeZeroEx(\\n            address(uint160(address(this))),\\n            zeroEx,\\n            InitialMigration.BootstrapFeatures({\\n                registry: features.registry,\\n                ownable: features.ownable\\n            })\\n        );\\n\\n        // Add features.\\n        _addFeatures(zeroEx, owner, features, migrateOpts);\\n\\n        // Transfer ownership to the real owner.\\n        IOwnableFeature(address(zeroEx)).transferOwnership(owner);\\n\\n        // Self-destruct.\\n        this.die(owner);\\n\\n        return zeroEx;\\n    }\\n\\n    /// @dev Destroy this contract. Only callable from ourselves (from `initializeZeroEx()`).\\n    /// @param ethRecipient Receiver of any ETH in this contract.\\n    function die(address payable ethRecipient)\\n        external\\n        virtual\\n    {\\n        require(msg.sender == address(this), \\\"FullMigration/INVALID_SENDER\\\");\\n        // This contract should not hold any funds but we send\\n        // them to the ethRecipient just in case.\\n        selfdestruct(ethRecipient);\\n    }\\n\\n    /// @dev Deploy and register features to the ZeroEx contract.\\n    /// @param zeroEx The bootstrapped ZeroEx contract.\\n    /// @param owner The ultimate owner of the ZeroEx contract.\\n    /// @param features Features to add to the proxy.\\n    /// @param migrateOpts Parameters needed to initialize features.\\n    function _addFeatures(\\n        ZeroEx zeroEx,\\n        address owner,\\n        Features memory features,\\n        MigrateOpts memory migrateOpts\\n    )\\n        private\\n    {\\n        IOwnableFeature ownable = IOwnableFeature(address(zeroEx));\\n        // TokenSpenderFeature\\n        {\\n            // Create the allowance target.\\n            AllowanceTarget allowanceTarget = new AllowanceTarget();\\n            // Let the ZeroEx contract use the allowance target.\\n            allowanceTarget.addAuthorizedAddress(address(zeroEx));\\n            // Transfer ownership of the allowance target to the (real) owner.\\n            allowanceTarget.transferOwnership(owner);\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.tokenSpender),\\n                abi.encodeWithSelector(\\n                    TokenSpenderFeature.migrate.selector,\\n                    allowanceTarget\\n                ),\\n                address(this)\\n            );\\n        }\\n        // TransformERC20Feature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.transformERC20),\\n                abi.encodeWithSelector(\\n                    TransformERC20Feature.migrate.selector,\\n                    migrateOpts.transformerDeployer\\n                ),\\n                address(this)\\n            );\\n        }\\n        // SignatureValidatorFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.signatureValidator),\\n                abi.encodeWithSelector(\\n                    SignatureValidatorFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n        // MetaTransactionsFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.metaTransactions),\\n                abi.encodeWithSelector(\\n                    MetaTransactionsFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n        // NativeOrdersFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.nativeOrders),\\n                abi.encodeWithSelector(\\n                    NativeOrdersFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/external/AllowanceTarget.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\\\";\\nimport \\\"../errors/LibSpenderRichErrors.sol\\\";\\nimport \\\"./IAllowanceTarget.sol\\\";\\n\\n\\n/// @dev The allowance target for the TokenSpender feature.\\ncontract AllowanceTarget is\\n    IAllowanceTarget,\\n    AuthorizableV06\\n{\\n    // solhint-disable no-unused-vars,indent,no-empty-blocks\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        override\\n        onlyAuthorized\\n        returns (bytes memory resultData)\\n    {\\n        bool success;\\n        (success, resultData) = target.call(callData);\\n        if (!success) {\\n            resultData.rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/migrations/InitialMigration.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ZeroEx.sol\\\";\\nimport \\\"../features/IBootstrapFeature.sol\\\";\\nimport \\\"../features/SimpleFunctionRegistryFeature.sol\\\";\\nimport \\\"../features/OwnableFeature.sol\\\";\\nimport \\\"./LibBootstrap.sol\\\";\\n\\n\\n/// @dev A contract for deploying and configuring a minimal ZeroEx contract.\\ncontract InitialMigration {\\n\\n    /// @dev Features to bootstrap into the the proxy contract.\\n    struct BootstrapFeatures {\\n        SimpleFunctionRegistryFeature registry;\\n        OwnableFeature ownable;\\n    }\\n\\n    /// @dev The allowed caller of `initializeZeroEx()`. In production, this would be\\n    ///      the governor.\\n    address public immutable initializeCaller;\\n    /// @dev The real address of this contract.\\n    address private immutable _implementation;\\n\\n    /// @dev Instantiate this contract and set the allowed caller of `initializeZeroEx()`\\n    ///      to `initializeCaller_`.\\n    /// @param initializeCaller_ The allowed caller of `initializeZeroEx()`.\\n    constructor(address initializeCaller_) public {\\n        initializeCaller = initializeCaller_;\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Initialize the `ZeroEx` contract with the minimum feature set,\\n    ///      transfers ownership to `owner`, then self-destructs.\\n    ///      Only callable by `initializeCaller` set in the contstructor.\\n    /// @param owner The owner of the contract.\\n    /// @param zeroEx The instance of the ZeroEx contract. ZeroEx should\\n    ///        been constructed with this contract as the bootstrapper.\\n    /// @param features Features to bootstrap into the proxy.\\n    /// @return _zeroEx The configured ZeroEx contract. Same as the `zeroEx` parameter.\\n    function initializeZeroEx(\\n        address payable owner,\\n        ZeroEx zeroEx,\\n        BootstrapFeatures memory features\\n    )\\n        public\\n        virtual\\n        returns (ZeroEx _zeroEx)\\n    {\\n        // Must be called by the allowed initializeCaller.\\n        require(msg.sender == initializeCaller, \\\"InitialMigration/INVALID_SENDER\\\");\\n\\n        // Bootstrap the initial feature set.\\n        IBootstrapFeature(address(zeroEx)).bootstrap(\\n            address(this),\\n            abi.encodeWithSelector(this.bootstrap.selector, owner, features)\\n        );\\n\\n        // Self-destruct. This contract should not hold any funds but we send\\n        // them to the owner just in case.\\n        this.die(owner);\\n\\n        return zeroEx;\\n    }\\n\\n    /// @dev Sets up the initial state of the `ZeroEx` contract.\\n    ///      The `ZeroEx` contract will delegatecall into this function.\\n    /// @param owner The new owner of the ZeroEx contract.\\n    /// @param features Features to bootstrap into the proxy.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap(address owner, BootstrapFeatures memory features)\\n        public\\n        virtual\\n        returns (bytes4 success)\\n    {\\n        // Deploy and migrate the initial features.\\n        // Order matters here.\\n\\n        // Initialize Registry.\\n        LibBootstrap.delegatecallBootstrapFunction(\\n            address(features.registry),\\n            abi.encodeWithSelector(\\n                SimpleFunctionRegistryFeature.bootstrap.selector\\n            )\\n        );\\n\\n        // Initialize OwnableFeature.\\n        LibBootstrap.delegatecallBootstrapFunction(\\n            address(features.ownable),\\n            abi.encodeWithSelector(\\n                OwnableFeature.bootstrap.selector\\n            )\\n        );\\n\\n        // De-register `SimpleFunctionRegistryFeature._extendSelf`.\\n        SimpleFunctionRegistryFeature(address(this)).rollback(\\n            SimpleFunctionRegistryFeature._extendSelf.selector,\\n            address(0)\\n        );\\n\\n        // Transfer ownership to the real owner.\\n        OwnableFeature(address(this)).transferOwnership(owner);\\n\\n        success = LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Self-destructs this contract. Only callable by this contract.\\n    /// @param ethRecipient Who to transfer outstanding ETH to.\\n    function die(address payable ethRecipient) public virtual {\\n        require(msg.sender == _implementation, \\\"InitialMigration/INVALID_SENDER\\\");\\n        selfdestruct(ethRecipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/AffiliateFeeTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"./Transformer.sol\\\";\\nimport \\\"./LibERC20Transformer.sol\\\";\\n\\n\\n/// @dev A transformer that transfers tokens to arbitrary addresses.\\ncontract AffiliateFeeTransformer is\\n    Transformer\\n{\\n    using LibRichErrorsV06 for bytes;\\n    using LibSafeMathV06 for uint256;\\n    using LibERC20Transformer for IERC20TokenV06;\\n\\n    /// @dev Information for a single fee.\\n    struct TokenFee {\\n        // The token to transfer to `recipient`.\\n        IERC20TokenV06 token;\\n        // Amount of each `token` to transfer to `recipient`.\\n        // If `amount == uint256(-1)`, the entire balance of `token` will be\\n        // transferred.\\n        uint256 amount;\\n        // Recipient of `token`.\\n        address payable recipient;\\n    }\\n\\n    uint256 private constant MAX_UINT256 = uint256(-1);\\n\\n    /// @dev Transfers tokens to recipients.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        TokenFee[] memory fees = abi.decode(context.data, (TokenFee[]));\\n\\n        // Transfer tokens to recipients.\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            uint256 amount = fees[i].amount;\\n            if (amount == MAX_UINT256) {\\n                amount = LibERC20Transformer.getTokenBalanceOf(fees[i].token, address(this));\\n            }\\n            if (amount != 0) {\\n                fees[i].token.transformerTransfer(fees[i].recipient, amount);\\n            }\\n        }\\n\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/Transformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"./IERC20Transformer.sol\\\";\\n\\n\\n/// @dev Abstract base class for transformers.\\nabstract contract Transformer is\\n    IERC20Transformer\\n{\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The address of the deployer.\\n    address public immutable deployer;\\n    /// @dev The original address of this contract.\\n    address internal immutable _implementation;\\n\\n    /// @dev Create this contract.\\n    constructor() public {\\n        deployer = msg.sender;\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Destruct this contract. Only callable by the deployer and will not\\n    ///      succeed in the context of a delegatecall (from another contract).\\n    /// @param ethRecipient The recipient of ETH held in this contract.\\n    function die(address payable ethRecipient)\\n        external\\n        virtual\\n    {\\n        // Only the deployer can call this.\\n        if (msg.sender != deployer) {\\n            LibTransformERC20RichErrors\\n                .OnlyCallableByDeployerError(msg.sender, deployer)\\n                .rrevert();\\n        }\\n        // Must be executing our own context.\\n        if (address(this) != _implementation) {\\n            LibTransformERC20RichErrors\\n                .InvalidExecutionContextError(address(this), _implementation)\\n                .rrevert();\\n        }\\n        selfdestruct(ethRecipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/FillQuoteTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"../vendor/v3/IExchange.sol\\\";\\nimport \\\"../vendor/v3/LibOrderHash.sol\\\";\\nimport \\\"./bridges/IBridgeAdapter.sol\\\";\\nimport \\\"./Transformer.sol\\\";\\nimport \\\"./LibERC20Transformer.sol\\\";\\n\\n/// @dev A transformer that fills an ERC20 market sell/buy quote.\\n///      This transformer shortcuts bridge orders and fills them directly\\ncontract FillQuoteTransformer is\\n    Transformer\\n{\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibERC20Transformer for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Whether we are performing a market sell or buy.\\n    enum Side {\\n        Sell,\\n        Buy\\n    }\\n\\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\\n    struct TransformData {\\n        // Whether we are performing a market sell or buy.\\n        Side side;\\n        // The token being sold.\\n        // This should be an actual token, not the ETH pseudo-token.\\n        IERC20TokenV06 sellToken;\\n        // The token being bought.\\n        // This should be an actual token, not the ETH pseudo-token.\\n        IERC20TokenV06 buyToken;\\n        // The orders to fill.\\n        IExchange.Order[] orders;\\n        // Signatures for each respective order in `orders`.\\n        bytes[] signatures;\\n        // Maximum fill amount for each order. This may be shorter than the\\n        // number of orders, where missing entries will be treated as `uint256(-1)`.\\n        // For sells, this will be the maximum sell amount (taker asset).\\n        // For buys, this will be the maximum buy amount (maker asset).\\n        uint256[] maxOrderFillAmounts;\\n        // Amount of `sellToken` to sell or `buyToken` to buy.\\n        // For sells, this may be `uint256(-1)` to sell the entire balance of\\n        // `sellToken`.\\n        uint256 fillAmount;\\n        // Who to transfer unused protocol fees to.\\n        // May be a valid address or one of:\\n        // `address(0)`: Stay in flash wallet.\\n        // `address(1)`: Send to the taker.\\n        // `address(2)`: Send to the sender (caller of `transformERC20()`).\\n        address payable refundReceiver;\\n        // Required taker address for RFQT orders.\\n        // Null means any taker can fill it.\\n        address rfqtTakerAddress;\\n    }\\n\\n    /// @dev Results of a call to `_fillOrder()`.\\n    struct FillOrderResults {\\n        // The amount of taker tokens sold, according to balance checks.\\n        uint256 takerTokenSoldAmount;\\n        // The amount of maker tokens sold, according to balance checks.\\n        uint256 makerTokenBoughtAmount;\\n        // The amount of protocol fee paid.\\n        uint256 protocolFeePaid;\\n    }\\n\\n    /// @dev Intermediate state variables to get around stack limits.\\n    struct FillState {\\n        uint256 ethRemaining;\\n        uint256 boughtAmount;\\n        uint256 soldAmount;\\n        uint256 protocolFee;\\n        uint256 takerTokenBalanceRemaining;\\n        bool isRfqtAllowed;\\n    }\\n\\n    /// @dev Emitted when a trade is skipped due to a lack of funds\\n    ///      to pay the 0x Protocol fee.\\n    /// @param orderHash The hash of the order that was skipped.\\n    event ProtocolFeeUnfunded(bytes32 orderHash);\\n\\n    /// @dev The Exchange ERC20Proxy ID.\\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\\n    /// @dev The Exchange ERC20BridgeProxy ID.\\n    bytes4 private constant ERC20_BRIDGE_PROXY_ID = 0xdc1600f3;\\n    /// @dev Maximum uint256 value.\\n    uint256 private constant MAX_UINT256 = uint256(-1);\\n    /// @dev If `refundReceiver` is set to this address, unpsent\\n    ///      protocol fees will be sent to the taker.\\n    address private constant REFUND_RECEIVER_TAKER = address(1);\\n    /// @dev If `refundReceiver` is set to this address, unpsent\\n    ///      protocol fees will be sent to the sender.\\n    address private constant REFUND_RECEIVER_SENDER = address(2);\\n\\n    /// @dev The Exchange contract.\\n    IExchange public immutable exchange;\\n    /// @dev The ERC20Proxy address.\\n    address public immutable erc20Proxy;\\n    /// @dev The BridgeAdapter address\\n    IBridgeAdapter public immutable bridgeAdapter;\\n\\n    /// @dev Create this contract.\\n    /// @param exchange_ The Exchange V3 instance.\\n    constructor(IExchange exchange_, IBridgeAdapter bridgeAdapter_)\\n        public\\n        Transformer()\\n    {\\n        exchange = exchange_;\\n        erc20Proxy = exchange_.getAssetProxy(ERC20_ASSET_PROXY_ID);\\n        bridgeAdapter = bridgeAdapter_;\\n    }\\n\\n    /// @dev Sell this contract's entire balance of of `sellToken` in exchange\\n    ///      for `buyToken` by filling `orders`. Protocol fees should be attached\\n    ///      to this call. `buyToken` and excess ETH will be transferred back to the caller.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        TransformData memory data = abi.decode(context.data, (TransformData));\\n        FillState memory state;\\n\\n        // Validate data fields.\\n        if (data.sellToken.isTokenETH() || data.buyToken.isTokenETH()) {\\n            LibTransformERC20RichErrors.InvalidTransformDataError(\\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_TOKENS,\\n                context.data\\n            ).rrevert();\\n        }\\n        if (data.orders.length != data.signatures.length) {\\n            LibTransformERC20RichErrors.InvalidTransformDataError(\\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_ARRAY_LENGTH,\\n                context.data\\n            ).rrevert();\\n        }\\n\\n        state.takerTokenBalanceRemaining = data.sellToken.getTokenBalanceOf(address(this));\\n        if (data.side == Side.Sell && data.fillAmount == MAX_UINT256) {\\n            // If `sellAmount == -1 then we are selling\\n            // the entire balance of `sellToken`. This is useful in cases where\\n            // the exact sell amount is not exactly known in advance, like when\\n            // unwrapping Chai/cUSDC/cDAI.\\n            data.fillAmount = state.takerTokenBalanceRemaining;\\n        }\\n\\n        // Approve the ERC20 proxy to spend `sellToken`.\\n        data.sellToken.approveIfBelow(erc20Proxy, data.fillAmount);\\n\\n        state.protocolFee = exchange.protocolFeeMultiplier().safeMul(tx.gasprice);\\n        state.ethRemaining = address(this).balance;\\n        // RFQT orders can only be filled if the actual taker matches the RFQT\\n        // taker (if set).\\n        state.isRfqtAllowed = data.rfqtTakerAddress == address(0)\\n            || context.taker == data.rfqtTakerAddress;\\n\\n        // Fill the orders.\\n        for (uint256 i = 0; i < data.orders.length; ++i) {\\n            // Check if we've hit our targets.\\n            if (data.side == Side.Sell) {\\n                // Market sell check.\\n                if (state.soldAmount >= data.fillAmount) {\\n                    break;\\n                }\\n            } else {\\n                // Market buy check.\\n                if (state.boughtAmount >= data.fillAmount) {\\n                    break;\\n                }\\n            }\\n\\n            // Fill the order.\\n            FillOrderResults memory results;\\n            if (data.side == Side.Sell) {\\n                // Market sell.\\n                results = _sellToOrder(\\n                    data.buyToken,\\n                    data.sellToken,\\n                    data.orders[i],\\n                    data.signatures[i],\\n                    data.fillAmount.safeSub(state.soldAmount).min256(\\n                        data.maxOrderFillAmounts.length > i\\n                        ? data.maxOrderFillAmounts[i]\\n                        : MAX_UINT256\\n                    ),\\n                    state\\n                );\\n            } else {\\n                // Market buy.\\n                results = _buyFromOrder(\\n                    data.buyToken,\\n                    data.sellToken,\\n                    data.orders[i],\\n                    data.signatures[i],\\n                    data.fillAmount.safeSub(state.boughtAmount).min256(\\n                        data.maxOrderFillAmounts.length > i\\n                        ? data.maxOrderFillAmounts[i]\\n                        : MAX_UINT256\\n                    ),\\n                    state\\n                );\\n            }\\n\\n            // Accumulate totals.\\n            state.soldAmount = state.soldAmount.safeAdd(results.takerTokenSoldAmount);\\n            state.boughtAmount = state.boughtAmount.safeAdd(results.makerTokenBoughtAmount);\\n            state.ethRemaining = state.ethRemaining.safeSub(results.protocolFeePaid);\\n            state.takerTokenBalanceRemaining = state.takerTokenBalanceRemaining.safeSub(results.takerTokenSoldAmount);\\n        }\\n\\n        // Ensure we hit our targets.\\n        if (data.side == Side.Sell) {\\n            // Market sell check.\\n            if (state.soldAmount < data.fillAmount) {\\n                LibTransformERC20RichErrors\\n                    .IncompleteFillSellQuoteError(\\n                        address(data.sellToken),\\n                        state.soldAmount,\\n                        data.fillAmount\\n                    ).rrevert();\\n            }\\n        } else {\\n            // Market buy check.\\n            if (state.boughtAmount < data.fillAmount) {\\n                LibTransformERC20RichErrors\\n                    .IncompleteFillBuyQuoteError(\\n                        address(data.buyToken),\\n                        state.boughtAmount,\\n                        data.fillAmount\\n                    ).rrevert();\\n            }\\n        }\\n\\n        // Refund unspent protocol fees.\\n        if (state.ethRemaining > 0 && data.refundReceiver != address(0)) {\\n            if (data.refundReceiver == REFUND_RECEIVER_TAKER) {\\n                context.taker.transfer(state.ethRemaining);\\n            } else if (data.refundReceiver == REFUND_RECEIVER_SENDER) {\\n                context.sender.transfer(state.ethRemaining);\\n            } else {\\n                data.refundReceiver.transfer(state.ethRemaining);\\n            }\\n        }\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n\\n    /// @dev Try to sell up to `sellAmount` from an order.\\n    /// @param makerToken The maker/buy token.\\n    /// @param takerToken The taker/sell token.\\n    /// @param order The order to fill.\\n    /// @param signature The signature for `order`.\\n    /// @param sellAmount Amount of taker token to sell.\\n    /// @param state Intermediate state variables to get around stack limits.\\n    function _sellToOrder(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        IExchange.Order memory order,\\n        bytes memory signature,\\n        uint256 sellAmount,\\n        FillState memory state\\n    )\\n        private\\n        returns (FillOrderResults memory results)\\n    {\\n        IERC20TokenV06 takerFeeToken =\\n            _getTokenFromERC20AssetData(order.takerFeeAssetData);\\n\\n        uint256 takerTokenFillAmount = sellAmount;\\n\\n        if (order.takerFee != 0) {\\n            if (takerFeeToken == makerToken) {\\n                // Taker fee is payable in the maker token, so we need to\\n                // approve the proxy to spend the maker token.\\n                // It isn't worth computing the actual taker fee\\n                // since `approveIfBelow()` will set the allowance to infinite. We\\n                // just need a reasonable upper bound to avoid unnecessarily re-approving.\\n                takerFeeToken.approveIfBelow(erc20Proxy, order.takerFee);\\n            } else if (takerFeeToken == takerToken){\\n                // Taker fee is payable in the taker token, so we need to\\n                // reduce the fill amount to cover the fee.\\n                // takerTokenFillAmount' =\\n                //   (takerTokenFillAmount * order.takerAssetAmount) /\\n                //   (order.takerAssetAmount + order.takerFee)\\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\\n                    order.takerAssetAmount,\\n                    order.takerAssetAmount.safeAdd(order.takerFee),\\n                    sellAmount\\n                );\\n            } else {\\n                //  Only support taker or maker asset denominated taker fees.\\n                LibTransformERC20RichErrors.InvalidTakerFeeTokenError(\\n                    address(takerFeeToken)\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Perform the fill.\\n        return _fillOrder(\\n            order,\\n            signature,\\n            takerTokenFillAmount,\\n            state,\\n            takerFeeToken == takerToken\\n        );\\n    }\\n\\n    /// @dev Try to buy up to `buyAmount` from an order.\\n    /// @param makerToken The maker/buy token.\\n    /// @param takerToken The taker/sell token.\\n    /// @param order The order to fill.\\n    /// @param signature The signature for `order`.\\n    /// @param buyAmount Amount of maker token to buy.\\n    /// @param state Intermediate state variables to get around stack limits.\\n    function _buyFromOrder(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        IExchange.Order memory order,\\n        bytes memory signature,\\n        uint256 buyAmount,\\n        FillState memory state\\n    )\\n        private\\n        returns (FillOrderResults memory results)\\n    {\\n        IERC20TokenV06 takerFeeToken =\\n            _getTokenFromERC20AssetData(order.takerFeeAssetData);\\n        // Compute the default taker token fill amount.\\n        uint256 takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\\n            buyAmount,\\n            order.makerAssetAmount,\\n            order.takerAssetAmount\\n        );\\n\\n        if (order.takerFee != 0) {\\n            if (takerFeeToken == makerToken) {\\n                // Taker fee is payable in the maker token.\\n                // Adjust the taker token fill amount to account for maker\\n                // tokens being lost to the taker fee.\\n                // takerTokenFillAmount' =\\n                //  (order.takerAssetAmount * buyAmount) /\\n                //  (order.makerAssetAmount - order.takerFee)\\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\\n                    buyAmount,\\n                    order.makerAssetAmount.safeSub(order.takerFee),\\n                    order.takerAssetAmount\\n                );\\n                // Approve the proxy to spend the maker token.\\n                // It isn't worth computing the actual taker fee\\n                // since `approveIfBelow()` will set the allowance to infinite. We\\n                // just need a reasonable upper bound to avoid unnecessarily re-approving.\\n                takerFeeToken.approveIfBelow(erc20Proxy, order.takerFee);\\n            } else if (takerFeeToken != takerToken) {\\n                //  Only support taker or maker asset denominated taker fees.\\n                LibTransformERC20RichErrors.InvalidTakerFeeTokenError(\\n                    address(takerFeeToken)\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Perform the fill.\\n        return _fillOrder(\\n            order,\\n            signature,\\n            takerTokenFillAmount,\\n            state,\\n            takerFeeToken == takerToken\\n        );\\n    }\\n\\n    /// @dev Attempt to fill an order. If the fill reverts, the revert will be\\n    ///      swallowed and `results` will be zeroed out.\\n    /// @param order The order to fill.\\n    /// @param signature The order signature.\\n    /// @param takerAssetFillAmount How much taker asset to fill.\\n    /// @param state Intermediate state variables to get around stack limits.\\n    /// @param isTakerFeeInTakerToken Whether the taker fee token is the same as the\\n    ///        taker token.\\n    function _fillOrder(\\n        IExchange.Order memory order,\\n        bytes memory signature,\\n        uint256 takerAssetFillAmount,\\n        FillState memory state,\\n        bool isTakerFeeInTakerToken\\n    )\\n        private\\n        returns (FillOrderResults memory results)\\n    {\\n        // Clamp to remaining taker asset amount or order size.\\n        uint256 availableTakerAssetFillAmount =\\n            takerAssetFillAmount.min256(order.takerAssetAmount);\\n        availableTakerAssetFillAmount =\\n            availableTakerAssetFillAmount.min256(state.takerTokenBalanceRemaining);\\n\\n        // If it is a Bridge order we fill this directly through the BridgeAdapter\\n        if (order.makerAssetData.readBytes4(0) == ERC20_BRIDGE_PROXY_ID) {\\n            (bool success, bytes memory resultData) = address(bridgeAdapter).delegatecall(\\n                abi.encodeWithSelector(\\n                    IBridgeAdapter.trade.selector,\\n                    order.makerAssetData,\\n                    address(_getTokenFromERC20AssetData(order.takerAssetData)),\\n                    availableTakerAssetFillAmount\\n                )\\n            );\\n            if (success) {\\n                results.makerTokenBoughtAmount = abi.decode(resultData, (uint256));\\n                results.takerTokenSoldAmount = availableTakerAssetFillAmount;\\n                // protocol fee paid remains 0\\n            }\\n            return results;\\n        } else {\\n            // If the order taker address is set to this contract's address then\\n            // this is an RFQT order, and we will only fill it if allowed to.\\n            if (order.takerAddress == address(this) && !state.isRfqtAllowed) {\\n                return results; // Empty results.\\n            }\\n            // Emit an event if we do not have sufficient ETH to cover the protocol fee.\\n            if (state.ethRemaining < state.protocolFee) {\\n                bytes32 orderHash = LibOrderHash.getTypedDataHash(\\n                    order,\\n                    exchange.EIP712_EXCHANGE_DOMAIN_HASH()\\n                );\\n                emit ProtocolFeeUnfunded(orderHash);\\n                return results;\\n            }\\n            try\\n                exchange.fillOrder\\n                    {value: state.protocolFee}\\n                    (order, availableTakerAssetFillAmount, signature)\\n                returns (IExchange.FillResults memory fillResults)\\n            {\\n                results.makerTokenBoughtAmount = fillResults.makerAssetFilledAmount;\\n                results.takerTokenSoldAmount = fillResults.takerAssetFilledAmount;\\n                results.protocolFeePaid = fillResults.protocolFeePaid;\\n                // If the taker fee is payable in the taker asset, include the\\n                // taker fee in the total amount sold.\\n                if (isTakerFeeInTakerToken) {\\n                    results.takerTokenSoldAmount =\\n                        results.takerTokenSoldAmount.safeAdd(fillResults.takerFeePaid);\\n                }\\n            } catch (bytes memory) {\\n                // Swallow failures, leaving all results as zero.\\n            }\\n        }\\n    }\\n\\n    /// @dev Extract the token from plain ERC20 asset data.\\n    ///      If the asset-data is empty, a zero token address will be returned.\\n    /// @param assetData The order asset data.\\n    function _getTokenFromERC20AssetData(bytes memory assetData)\\n        private\\n        pure\\n        returns (IERC20TokenV06 token)\\n    {\\n        if (assetData.length == 0) {\\n            return IERC20TokenV06(address(0));\\n        }\\n        if (assetData.length != 36 ||\\n            LibBytesV06.readBytes4(assetData, 0) != ERC20_ASSET_PROXY_ID)\\n        {\\n            LibTransformERC20RichErrors\\n                .InvalidERC20AssetDataError(assetData)\\n                .rrevert();\\n        }\\n        return IERC20TokenV06(LibBytesV06.readAddress(assetData, 16));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/v3/IExchange.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Interface to the V3 Exchange.\\ninterface IExchange {\\n\\n    /// @dev V3 Order structure.\\n    struct Order {\\n        // Address that created the order.\\n        address makerAddress;\\n        // Address that is allowed to fill the order.\\n        // If set to 0, any address is allowed to fill the order.\\n        address takerAddress;\\n        // Address that will recieve fees when order is filled.\\n        address feeRecipientAddress;\\n        // Address that is allowed to call Exchange contract methods that affect this order.\\n        // If set to 0, any address is allowed to call these methods.\\n        address senderAddress;\\n        // Amount of makerAsset being offered by maker. Must be greater than 0.\\n        uint256 makerAssetAmount;\\n        // Amount of takerAsset being bid on by maker. Must be greater than 0.\\n        uint256 takerAssetAmount;\\n        // Fee paid to feeRecipient by maker when order is filled.\\n        uint256 makerFee;\\n        // Fee paid to feeRecipient by taker when order is filled.\\n        uint256 takerFee;\\n        // Timestamp in seconds at which order expires.\\n        uint256 expirationTimeSeconds;\\n        // Arbitrary number to facilitate uniqueness of the order's hash.\\n        uint256 salt;\\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset.\\n        // The leading bytes4 references the id of the asset proxy.\\n        bytes makerAssetData;\\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset.\\n        // The leading bytes4 references the id of the asset proxy.\\n        bytes takerAssetData;\\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset.\\n        // The leading bytes4 references the id of the asset proxy.\\n        bytes makerFeeAssetData;\\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset.\\n        // The leading bytes4 references the id of the asset proxy.\\n        bytes takerFeeAssetData;\\n    }\\n\\n    /// @dev V3 `fillOrder()` results.`\\n    struct FillResults {\\n        // Total amount of makerAsset(s) filled.\\n        uint256 makerAssetFilledAmount;\\n        // Total amount of takerAsset(s) filled.\\n        uint256 takerAssetFilledAmount;\\n        // Total amount of fees paid by maker(s) to feeRecipient(s).\\n        uint256 makerFeePaid;\\n        // Total amount of fees paid by taker to feeRecipients(s).\\n        uint256 takerFeePaid;\\n        // Total amount of fees paid by taker to the staking contract.\\n        uint256 protocolFeePaid;\\n    }\\n\\n    /// @dev Fills the input order.\\n    /// @param order Order struct containing order specifications.\\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\\n    /// @param signature Proof that order has been created by maker.\\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\\n    function fillOrder(\\n        Order calldata order,\\n        uint256 takerAssetFillAmount,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        returns (FillResults memory fillResults);\\n\\n    /// @dev Returns the protocolFeeMultiplier\\n    /// @return multiplier The multiplier for protocol fees.\\n    function protocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint256 multiplier);\\n\\n    /// @dev Gets an asset proxy.\\n    /// @param assetProxyId Id of the asset proxy.\\n    /// @return proxyAddress The asset proxy registered to assetProxyId.\\n    ///         Returns 0x0 if no proxy is registered.\\n    function getAssetProxy(bytes4 assetProxyId)\\n        external\\n        view\\n        returns (address proxyAddress);\\n\\n    function EIP712_EXCHANGE_DOMAIN_HASH()\\n        external\\n        view\\n        returns (bytes32 domainHash);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/vendor/v3/LibOrderHash.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IExchange.sol\\\";\\n\\n\\nlibrary LibOrderHash {\\n\\n    using LibOrderHash for IExchange.Order;\\n\\n    // Hash for the EIP712 Order Schema:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"Order(\\\",\\n    //     \\\"address makerAddress,\\\",\\n    //     \\\"address takerAddress,\\\",\\n    //     \\\"address feeRecipientAddress,\\\",\\n    //     \\\"address senderAddress,\\\",\\n    //     \\\"uint256 makerAssetAmount,\\\",\\n    //     \\\"uint256 takerAssetAmount,\\\",\\n    //     \\\"uint256 makerFee,\\\",\\n    //     \\\"uint256 takerFee,\\\",\\n    //     \\\"uint256 expirationTimeSeconds,\\\",\\n    //     \\\"uint256 salt,\\\",\\n    //     \\\"bytes makerAssetData,\\\",\\n    //     \\\"bytes takerAssetData,\\\",\\n    //     \\\"bytes makerFeeAssetData,\\\",\\n    //     \\\"bytes takerFeeAssetData\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\\n\\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\\n    /// @param order The order structure.\\n    /// @param eip712ExchangeDomainHash Domain hash for the Exchange.\\n    /// @return orderHash EIP712 typed data hash of the order.\\n    function getTypedDataHash(IExchange.Order memory order, bytes32 eip712ExchangeDomainHash)\\n        internal\\n        pure\\n        returns (bytes32 orderHash)\\n    {\\n        orderHash = _hashEIP712Message(\\n            eip712ExchangeDomainHash,\\n            order.getStructHash()\\n        );\\n        return orderHash;\\n    }\\n\\n    /// @dev Calculates EIP712 hash of the order struct.\\n    /// @param order The order structure.\\n    /// @return result EIP712 hash of the order struct.\\n    function getStructHash(IExchange.Order memory order)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\\n        bytes memory makerAssetData = order.makerAssetData;\\n        bytes memory takerAssetData = order.takerAssetData;\\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\\n\\n        // Assembly for more efficiently computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP712_ORDER_SCHEMA_HASH,\\n        //     uint256(order.makerAddress),\\n        //     uint256(order.takerAddress),\\n        //     uint256(order.feeRecipientAddress),\\n        //     uint256(order.senderAddress),\\n        //     order.makerAssetAmount,\\n        //     order.takerAssetAmount,\\n        //     order.makerFee,\\n        //     order.takerFee,\\n        //     order.expirationTimeSeconds,\\n        //     order.salt,\\n        //     keccak256(order.makerAssetData),\\n        //     keccak256(order.takerAssetData),\\n        //     keccak256(order.makerFeeAssetData),\\n        //     keccak256(order.takerFeeAssetData)\\n        // ));\\n\\n        assembly {\\n            // Assert order offset (this is an internal error that should never be triggered)\\n            if lt(order, 32) {\\n                invalid()\\n            }\\n\\n            // Calculate memory addresses that will be swapped out before hashing\\n            let pos1 := sub(order, 32)\\n            let pos2 := add(order, 320)\\n            let pos3 := add(order, 352)\\n            let pos4 := add(order, 384)\\n            let pos5 := add(order, 416)\\n\\n            // Backup\\n            let temp1 := mload(pos1)\\n            let temp2 := mload(pos2)\\n            let temp3 := mload(pos3)\\n            let temp4 := mload(pos4)\\n            let temp5 := mload(pos5)\\n\\n            // Hash in place\\n            mstore(pos1, schemaHash)\\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\\n            result := keccak256(pos1, 480)\\n\\n            // Restore\\n            mstore(pos1, temp1)\\n            mstore(pos2, temp2)\\n            mstore(pos3, temp3)\\n            mstore(pos4, temp4)\\n            mstore(pos5, temp5)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\n    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IBridgeAdapter {\\n\\n    function trade(\\n        bytes calldata makerAssetData,\\n        address fromTokenAddress,\\n        uint256 sellAmount\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/LogMetadataTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Transformer.sol\\\";\\nimport \\\"./LibERC20Transformer.sol\\\";\\n\\n\\n/// @dev A transformer that just emits an event with an arbitrary byte payload.\\ncontract LogMetadataTransformer is\\n    Transformer\\n{\\n    event TransformerMetadata(address sender, address taker, bytes data);\\n\\n    /// @dev Maximum uint256 value.\\n    uint256 private constant MAX_UINT256 = uint256(-1);\\n\\n    /// @dev Emits an event.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        emit TransformerMetadata(context.sender, context.taker, context.data);\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/PayTakerTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"./Transformer.sol\\\";\\nimport \\\"./LibERC20Transformer.sol\\\";\\n\\n\\n/// @dev A transformer that transfers tokens to the taker.\\ncontract PayTakerTransformer is\\n    Transformer\\n{\\n    // solhint-disable no-empty-blocks\\n    using LibRichErrorsV06 for bytes;\\n    using LibSafeMathV06 for uint256;\\n    using LibERC20Transformer for IERC20TokenV06;\\n\\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\\n    struct TransformData {\\n        // The tokens to transfer to the taker.\\n        IERC20TokenV06[] tokens;\\n        // Amount of each token in `tokens` to transfer to the taker.\\n        // `uint(-1)` will transfer the entire balance.\\n        uint256[] amounts;\\n    }\\n\\n    /// @dev Maximum uint256 value.\\n    uint256 private constant MAX_UINT256 = uint256(-1);\\n\\n    /// @dev Create this contract.\\n    constructor()\\n        public\\n        Transformer()\\n    {}\\n\\n    /// @dev Forwards tokens to the taker.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        TransformData memory data = abi.decode(context.data, (TransformData));\\n\\n        // Transfer tokens directly to the taker.\\n        for (uint256 i = 0; i < data.tokens.length; ++i) {\\n            // The `amounts` array can be shorter than the `tokens` array.\\n            // Missing elements are treated as `uint256(-1)`.\\n            uint256 amount = data.amounts.length > i ? data.amounts[i] : uint256(-1);\\n            if (amount == MAX_UINT256) {\\n                amount = data.tokens[i].getTokenBalanceOf(address(this));\\n            }\\n            if (amount != 0) {\\n                data.tokens[i].transformerTransfer(context.taker, amount);\\n            }\\n        }\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/src/transformers/WethTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"./Transformer.sol\\\";\\nimport \\\"./LibERC20Transformer.sol\\\";\\n\\n\\n/// @dev A transformer that wraps or unwraps WETH.\\ncontract WethTransformer is\\n    Transformer\\n{\\n    using LibRichErrorsV06 for bytes;\\n    using LibSafeMathV06 for uint256;\\n    using LibERC20Transformer for IERC20TokenV06;\\n\\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\\n    struct TransformData {\\n        // The token to wrap/unwrap. Must be either ETH or WETH.\\n        IERC20TokenV06 token;\\n        // Amount of `token` to wrap or unwrap.\\n        // `uint(-1)` will unwrap the entire balance.\\n        uint256 amount;\\n    }\\n\\n    /// @dev The WETH contract address.\\n    IEtherTokenV06 public immutable weth;\\n    /// @dev Maximum uint256 value.\\n    uint256 private constant MAX_UINT256 = uint256(-1);\\n\\n    /// @dev Construct the transformer and store the WETH address in an immutable.\\n    /// @param weth_ The weth token.\\n    constructor(IEtherTokenV06 weth_)\\n        public\\n        Transformer()\\n    {\\n        weth = weth_;\\n    }\\n\\n    /// @dev Wraps and unwraps WETH.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        TransformData memory data = abi.decode(context.data, (TransformData));\\n        if (!data.token.isTokenETH() && data.token != weth) {\\n            LibTransformERC20RichErrors.InvalidTransformDataError(\\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_TOKENS,\\n                context.data\\n            ).rrevert();\\n        }\\n\\n        uint256 amount = data.amount;\\n        if (amount == MAX_UINT256) {\\n            amount = data.token.getTokenBalanceOf(address(this));\\n        }\\n\\n        if (amount != 0) {\\n            if (data.token.isTokenETH()) {\\n                // Wrap ETH.\\n                weth.deposit{value: amount}();\\n            } else {\\n                // Unwrap WETH.\\n                weth.withdraw(amount);\\n            }\\n        }\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFillQuoteTransformerBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"../src/vendor/v3/IERC20Bridge.sol\\\";\\nimport \\\"./TestMintableERC20Token.sol\\\";\\n\\n\\ncontract TestFillQuoteTransformerBridge {\\n\\n    struct FillBehavior {\\n        // Scaling for maker assets minted, in 1e18.\\n        uint256 makerAssetMintRatio;\\n        uint256 amount;\\n    }\\n\\n    function sellTokenForToken(\\n        address takerToken,\\n        address makerToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount)\\n    {\\n        FillBehavior memory behavior = abi.decode(auxiliaryData, (FillBehavior));\\n        boughtAmount = LibMathV06.getPartialAmountFloor(\\n            behavior.makerAssetMintRatio,\\n            1e18,\\n            behavior.amount\\n        );\\n        TestMintableERC20Token(makerToken).mint(\\n          recipient,\\n          boughtAmount\\n        );\\n    }\\n\\n    function encodeBehaviorData(FillBehavior calldata behavior)\\n        external\\n        pure\\n        returns (bytes memory encoded)\\n    {\\n        return abi.encode(behavior);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestMintableERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract TestMintableERC20Token {\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function transfer(address to, uint256 amount)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        return transferFrom(msg.sender, to, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        allowance[msg.sender][spender] = amount;\\n        return true;\\n    }\\n\\n    function approveAs(address owner, address spender, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        allowance[owner][spender] = amount;\\n        return true;\\n    }\\n\\n    function mint(address owner, uint256 amount)\\n        external\\n        virtual\\n    {\\n        balanceOf[owner] += amount;\\n    }\\n\\n    function burn(address owner, uint256 amount)\\n        external\\n        virtual\\n    {\\n        require(balanceOf[owner] >= amount, \\\"TestMintableERC20Token/INSUFFICIENT_FUNDS\\\");\\n        balanceOf[owner] -= amount;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        if (from != msg.sender) {\\n            require(\\n                allowance[from][msg.sender] >= amount,\\n                \\\"TestMintableERC20Token/INSUFFICIENT_ALLOWANCE\\\"\\n            );\\n            allowance[from][msg.sender] -= amount;\\n        }\\n        require(balanceOf[from] >= amount, \\\"TestMintableERC20Token/INSUFFICIENT_FUNDS\\\");\\n        balanceOf[from] -= amount;\\n        balanceOf[to] += amount;\\n        return true;\\n    }\\n\\n    function getSpendableAmount(address owner, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return balanceOf[owner] < allowance[owner][spender]\\n            ? balanceOf[owner]\\n            : allowance[owner][spender];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFillQuoteTransformerExchange.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../src/vendor/v3/IExchange.sol\\\";\\nimport \\\"./TestMintableERC20Token.sol\\\";\\n\\n\\ncontract TestFillQuoteTransformerExchange {\\n\\n    struct FillBehavior {\\n        // How much of the order is filled, in taker asset amount.\\n        uint256 filledTakerAssetAmount;\\n        // Scaling for maker assets minted, in 1e18.\\n        uint256 makerAssetMintRatio;\\n    }\\n\\n    bytes32 public constant EIP712_EXCHANGE_DOMAIN_HASH = 0xaa81d881b1adbbf115e15b849cb9cdc643cad3c6a90f30eb505954af943247e6;\\n\\n    uint256 private constant PROTOCOL_FEE_MULTIPLIER = 1337;\\n\\n    using LibSafeMathV06 for uint256;\\n\\n    function fillOrder(\\n        IExchange.Order calldata order,\\n        uint256 takerAssetFillAmount,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        returns (IExchange.FillResults memory fillResults)\\n    {\\n        require(\\n            signature.length != 0,\\n            \\\"TestFillQuoteTransformerExchange/INVALID_SIGNATURE\\\"\\n        );\\n        // The signature is the ABI-encoded FillBehavior data.\\n        FillBehavior memory behavior = abi.decode(signature, (FillBehavior));\\n\\n        uint256 protocolFee = PROTOCOL_FEE_MULTIPLIER * tx.gasprice;\\n        require(\\n            msg.value == protocolFee,\\n            \\\"TestFillQuoteTransformerExchange/INSUFFICIENT_PROTOCOL_FEE\\\"\\n        );\\n        // Return excess protocol fee.\\n        msg.sender.transfer(msg.value - protocolFee);\\n\\n        // Take taker tokens.\\n        TestMintableERC20Token takerToken = _getTokenFromAssetData(order.takerAssetData);\\n        takerAssetFillAmount = LibSafeMathV06.min256(\\n            order.takerAssetAmount.safeSub(behavior.filledTakerAssetAmount),\\n            takerAssetFillAmount\\n        );\\n        require(\\n            takerToken.getSpendableAmount(msg.sender, address(this)) >= takerAssetFillAmount,\\n            \\\"TestFillQuoteTransformerExchange/INSUFFICIENT_TAKER_FUNDS\\\"\\n        );\\n        takerToken.transferFrom(msg.sender, order.makerAddress, takerAssetFillAmount);\\n\\n        // Mint maker tokens.\\n        uint256 makerAssetFilledAmount = LibMathV06.getPartialAmountFloor(\\n            takerAssetFillAmount,\\n            order.takerAssetAmount,\\n            order.makerAssetAmount\\n        );\\n        TestMintableERC20Token makerToken = _getTokenFromAssetData(order.makerAssetData);\\n        makerToken.mint(\\n            msg.sender,\\n            LibMathV06.getPartialAmountFloor(\\n                behavior.makerAssetMintRatio,\\n                1e18,\\n                makerAssetFilledAmount\\n            )\\n        );\\n\\n        // Take taker fee.\\n        TestMintableERC20Token takerFeeToken = _getTokenFromAssetData(order.takerFeeAssetData);\\n        uint256 takerFee = LibMathV06.getPartialAmountFloor(\\n            takerAssetFillAmount,\\n            order.takerAssetAmount,\\n            order.takerFee\\n        );\\n        require(\\n            takerFeeToken.getSpendableAmount(msg.sender, address(this)) >= takerFee,\\n            \\\"TestFillQuoteTransformerExchange/INSUFFICIENT_TAKER_FEE_FUNDS\\\"\\n        );\\n        takerFeeToken.transferFrom(msg.sender, order.feeRecipientAddress, takerFee);\\n\\n        fillResults.makerAssetFilledAmount = makerAssetFilledAmount;\\n        fillResults.takerAssetFilledAmount = takerAssetFillAmount;\\n        fillResults.makerFeePaid = uint256(-1);\\n        fillResults.takerFeePaid = takerFee;\\n        fillResults.protocolFeePaid = protocolFee;\\n    }\\n\\n    function encodeBehaviorData(FillBehavior calldata behavior)\\n        external\\n        pure\\n        returns (bytes memory encoded)\\n    {\\n        return abi.encode(behavior);\\n    }\\n\\n    function protocolFeeMultiplier()\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return PROTOCOL_FEE_MULTIPLIER;\\n    }\\n\\n    function getAssetProxy(bytes4)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function _getTokenFromAssetData(bytes memory assetData)\\n        private\\n        pure\\n        returns (TestMintableERC20Token token)\\n    {\\n        return TestMintableERC20Token(LibBytesV06.readAddress(assetData, 16));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFillQuoteTransformerHost.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/transformers/IERC20Transformer.sol\\\";\\nimport \\\"./TestMintableERC20Token.sol\\\";\\nimport \\\"./TestTransformerHost.sol\\\";\\n\\n\\ncontract TestFillQuoteTransformerHost is\\n    TestTransformerHost\\n{\\n    function executeTransform(\\n        IERC20Transformer transformer,\\n        TestMintableERC20Token inputToken,\\n        uint256 inputTokenAmount,\\n        address payable sender,\\n        address payable taker,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n    {\\n        if (inputTokenAmount != 0) {\\n            inputToken.mint(address(this), inputTokenAmount);\\n        }\\n        // Have to make this call externally because transformers aren't payable.\\n        this.rawExecuteTransform(\\n            transformer,\\n            IERC20Transformer.TransformContext({\\n                sender: sender,\\n                taker: taker,\\n                data: data\\n            })\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestTransformerHost.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../src/transformers/IERC20Transformer.sol\\\";\\nimport \\\"../src/transformers/LibERC20Transformer.sol\\\";\\n\\n\\ncontract TestTransformerHost {\\n\\n    using LibERC20Transformer for IERC20TokenV06;\\n    using LibRichErrorsV06 for bytes;\\n\\n    function rawExecuteTransform(\\n        IERC20Transformer transformer,\\n        IERC20Transformer.TransformContext calldata context\\n    )\\n        external\\n    {\\n        (bool _success, bytes memory resultData) =\\n            address(transformer).delegatecall(abi.encodeWithSelector(\\n                transformer.transform.selector,\\n                context\\n            ));\\n        if (!_success) {\\n            resultData.rrevert();\\n        }\\n        require(\\n            abi.decode(resultData, (bytes4)) == LibERC20Transformer.TRANSFORMER_SUCCESS,\\n            \\\"TestTransformerHost/INVALID_TRANSFORMER_RESULT\\\"\\n        );\\n    }\\n\\n    // solhint-disable\\n    receive() external payable {}\\n    // solhint-enable\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFixinProtocolFees.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/fixins/FixinProtocolFees.sol\\\";\\n\\ncontract TestFixinProtocolFees is\\n    FixinProtocolFees\\n{\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        uint32 protocolFeeMultiplier\\n    )\\n        public\\n        FixinProtocolFees(weth, staking, protocolFeeMultiplier)\\n    {\\n        // solhint-disalbe no-empty-blocks\\n    }\\n\\n    function collectProtocolFee(bytes32 poolId)\\n        external\\n        payable\\n    {\\n        _collectProtocolFee(poolId);\\n    }\\n\\n    function transferFeesForPool(bytes32 poolId)\\n        external\\n    {\\n        _transferFeesForPool(poolId);\\n    }\\n\\n    function getFeeCollector(\\n        bytes32 poolId\\n    )\\n        external\\n        view\\n        returns (FeeCollector)\\n    {\\n        return _getFeeCollector(poolId);\\n    }\\n\\n    function getSingleProtocolFee()\\n        external\\n        view\\n        returns (uint256 protocolFeeAmount)\\n    {\\n        return _getSingleProtocolFee();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFixinTokenSpender.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../src/fixins/FixinTokenSpender.sol\\\";\\n\\ncontract TestFixinTokenSpender is\\n    FixinTokenSpender\\n{\\n    uint256 constant private TRIGGER_FALLBACK_SUCCESS_AMOUNT = 1340;\\n\\n    constructor(bytes32 greedyTokensBloomFilter)\\n        public\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {}\\n\\n    function transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        _transferERC20Tokens(\\n            token,\\n            owner,\\n            to,\\n            amount\\n        );\\n    }\\n\\n    event FallbackCalled(\\n        address token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    // This is called as a fallback when the original transferFrom() fails.\\n    function _spendERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        require(amount == TRIGGER_FALLBACK_SUCCESS_AMOUNT,\\n            \\\"TokenSpenderFallback/FAILURE_AMOUNT\\\");\\n\\n        emit FallbackCalled(address(token), owner, to, amount);\\n    }\\n\\n    function getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getSpendableERC20BalanceOf(token, owner);\\n    }\\n\\n    function isTokenPossiblyGreedy(IERC20TokenV06 token)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isTokenPossiblyGreedy(token);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestFullMigration.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/ZeroEx.sol\\\";\\nimport \\\"../src/migrations/FullMigration.sol\\\";\\n\\n\\ncontract TestFullMigration is\\n    FullMigration\\n{\\n    address public dieRecipient;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address payable deployer) public FullMigration(deployer) {}\\n\\n    function die(address payable ethRecipient) external override {\\n        dieRecipient = ethRecipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestInitialMigration.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/ZeroEx.sol\\\";\\nimport \\\"../src/features/IBootstrapFeature.sol\\\";\\nimport \\\"../src/migrations/InitialMigration.sol\\\";\\n\\n\\ncontract TestInitialMigration is\\n    InitialMigration\\n{\\n    address public bootstrapFeature;\\n    address public dieRecipient;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address deployer) public InitialMigration(deployer) {}\\n\\n    function callBootstrap(ZeroEx zeroEx) external {\\n        IBootstrapFeature(address(zeroEx)).bootstrap(address(this), new bytes(0));\\n    }\\n\\n    function bootstrap(address owner, BootstrapFeatures memory features)\\n        public\\n        override\\n        returns (bytes4 success)\\n    {\\n        success = InitialMigration.bootstrap(owner, features);\\n        // Snoop the bootstrap feature contract.\\n        bootstrapFeature =\\n            ZeroEx(address(uint160(address(this))))\\n            .getFunctionImplementation(IBootstrapFeature.bootstrap.selector);\\n    }\\n\\n    function die(address payable ethRecipient) public override {\\n        dieRecipient = ethRecipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestLibNativeOrder.sol\": {\r\n      \"content\": \"pragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/libs/LibNativeOrder.sol\\\";\\n\\n\\ncontract TestLibNativeOrder {\\n\\n    function getLimitOrderStructHash(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        return LibNativeOrder.getLimitOrderStructHash(order);\\n    }\\n\\n    function getRfqOrderStructHash(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        return LibNativeOrder.getRfqOrderStructHash(order);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestLibSignature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/libs/LibSignature.sol\\\";\\n\\n\\ncontract TestLibSignature {\\n\\n    function getSignerOfHash(bytes32 hash, LibSignature.Signature calldata signature)\\n        external\\n        pure\\n        returns (address signer)\\n    {\\n        return LibSignature.getSignerOfHash(hash, signature);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestMetaTransactionsNativeOrdersFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/NativeOrdersFeature.sol\\\";\\nimport \\\"../src/features/IMetaTransactionsFeature.sol\\\";\\n\\n\\ncontract TestMetaTransactionsNativeOrdersFeature is\\n    NativeOrdersFeature\\n{\\n    constructor(\\n    )\\n        public\\n        NativeOrdersFeature(address(0), IEtherTokenV06(0), IStaking(0), 0, bytes32(0))\\n    {\\n    }\\n\\n    event FillLimitOrderCalled(\\n        LibNativeOrder.LimitOrder order,\\n        LibSignature.SignatureType signatureType,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    );\\n\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        emit FillLimitOrderCalled(\\n            order,\\n            signature.signatureType,\\n            signature.v,\\n            signature.r,\\n            signature.s,\\n            takerTokenFillAmount,\\n            taker,\\n            sender\\n        );\\n        return (0, 1337);\\n    }\\n\\n    event FillRfqOrderCalled(\\n        LibNativeOrder.RfqOrder order,\\n        LibSignature.SignatureType signatureType,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    );\\n\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    )\\n        public\\n        override\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        emit FillRfqOrderCalled(\\n            order,\\n            signature.signatureType,\\n            signature.v,\\n            signature.r,\\n            signature.s,\\n            takerTokenFillAmount,\\n            taker\\n        );\\n        return (0, 1337);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestMetaTransactionsTransformERC20Feature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/TransformERC20Feature.sol\\\";\\nimport \\\"../src/features/IMetaTransactionsFeature.sol\\\";\\n\\n\\ncontract TestMetaTransactionsTransformERC20Feature is\\n    TransformERC20Feature\\n{\\n    event TransformERC20Called(\\n        address sender,\\n        uint256 value,\\n        address taker,\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] transformations\\n    );\\n\\n    constructor() public TransformERC20Feature(0) {}\\n\\n    function _transformERC20(TransformERC20Args memory args)\\n        public\\n        override\\n        payable\\n        returns (uint256 outputTokenAmount)\\n    {\\n        if (msg.value == 666) {\\n            revert('FAIL');\\n        }\\n\\n        if (msg.value == 777) {\\n            LibSignature.Signature memory signature;\\n\\n            // Try to reenter `executeMetaTransaction()`\\n            IMetaTransactionsFeature(address(this)).executeMetaTransaction(\\n                IMetaTransactionsFeature.MetaTransactionData({\\n                    signer: address(0),\\n                    sender: address(0),\\n                    minGasPrice: 0,\\n                    maxGasPrice: 0,\\n                    expirationTimeSeconds: 0,\\n                    salt: 0,\\n                    callData: \\\"\\\",\\n                    value: 0,\\n                    feeToken: IERC20TokenV06(0),\\n                    feeAmount: 0\\n                }),\\n                signature\\n            );\\n        }\\n\\n        if (msg.value == 888) {\\n            // Try to reenter `batchExecuteMetaTransactions()`\\n            IMetaTransactionsFeature.MetaTransactionData[] memory mtxs =\\n                new IMetaTransactionsFeature.MetaTransactionData[](1);\\n            LibSignature.Signature[] memory signatures = new LibSignature.Signature[](1);\\n            mtxs[0] = IMetaTransactionsFeature.MetaTransactionData({\\n                signer: address(0),\\n                sender: address(0),\\n                minGasPrice: 0,\\n                maxGasPrice: 0,\\n                expirationTimeSeconds: 0,\\n                salt: 0,\\n                callData: \\\"\\\",\\n                value: 0,\\n                feeToken: IERC20TokenV06(0),\\n                feeAmount: 0\\n            });\\n            IMetaTransactionsFeature(address(this)).batchExecuteMetaTransactions(\\n                mtxs,\\n                signatures\\n            );\\n        }\\n\\n        emit TransformERC20Called(\\n            msg.sender,\\n            msg.value,\\n            args.taker,\\n            args.inputToken,\\n            args.outputToken,\\n            args.inputTokenAmount,\\n            args.minOutputTokenAmount,\\n            args.transformations\\n        );\\n        return 1337;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestMintTokenERC20Transformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../src/transformers/IERC20Transformer.sol\\\";\\nimport \\\"../src/transformers/LibERC20Transformer.sol\\\";\\nimport \\\"./TestMintableERC20Token.sol\\\";\\n\\n\\ncontract TestMintTokenERC20Transformer is\\n    IERC20Transformer\\n{\\n    struct TransformData {\\n        IERC20TokenV06 inputToken;\\n        TestMintableERC20Token outputToken;\\n        uint256 burnAmount;\\n        uint256 mintAmount;\\n        uint256 feeAmount;\\n    }\\n\\n    event MintTransform(\\n        address context,\\n        address caller,\\n        address sender,\\n        address taker,\\n        bytes data,\\n        uint256 inputTokenBalance,\\n        uint256 ethBalance\\n    );\\n\\n    function transform(TransformContext calldata context)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        TransformData memory data = abi.decode(context.data, (TransformData));\\n        emit MintTransform(\\n            address(this),\\n            msg.sender,\\n            context.sender,\\n            context.taker,\\n            context.data,\\n            LibERC20Transformer.isTokenETH(data.inputToken)\\n                ? address(this).balance\\n                : data.inputToken.balanceOf(address(this)),\\n            address(this).balance\\n        );\\n        // \\\"Burn\\\" input tokens.\\n        if (LibERC20Transformer.isTokenETH(data.inputToken)) {\\n            address(0).transfer(data.burnAmount);\\n        } else {\\n            data.inputToken.transfer(address(0), data.burnAmount);\\n        }\\n        // Mint output tokens.\\n        if (LibERC20Transformer.isTokenETH(IERC20TokenV06(address(data.outputToken)))) {\\n            context.taker.transfer(data.mintAmount);\\n        } else {\\n            data.outputToken.mint(\\n                context.taker,\\n                data.mintAmount\\n            );\\n            // Burn fees from output.\\n            data.outputToken.burn(context.taker, data.feeAmount);\\n        }\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestNativeOrdersFeature.sol\": {\r\n      \"content\": \"pragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/NativeOrdersFeature.sol\\\";\\n\\ncontract TestNativeOrdersFeature is\\n    NativeOrdersFeature\\n{\\n    constructor(\\n        address zeroExAddress,\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        uint32 protocolFeeMultiplier,\\n        bytes32 greedyTokensBloomFilter\\n    )\\n        public\\n        NativeOrdersFeature(\\n            zeroExAddress,\\n            weth,\\n            staking,\\n            protocolFeeMultiplier,\\n            greedyTokensBloomFilter\\n        )\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    modifier onlySelf() override {\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestPermissionlessTransformerDeployerSuicidal.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract TestPermissionlessTransformerDeployerSuicidal {\\n    function kill() external {\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestPermissionlessTransformerDeployerTransformer.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/transformers/LibERC20Transformer.sol\\\";\\n\\n\\ncontract TestPermissionlessTransformerDeployerTransformer {\\n    uint256 public constant CONSTRUCTOR_FAIL_VALUE = 3333;\\n    address payable public immutable deployer;\\n\\n    constructor() public payable {\\n        deployer = msg.sender;\\n        require(\\n            msg.value != CONSTRUCTOR_FAIL_VALUE,\\n            \\\"TestTransformerDeployerTransformer/CONSTRUCTOR_FAIL\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestRfqOriginRegistration.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/INativeOrdersFeature.sol\\\";\\n\\ncontract TestRfqOriginRegistration {\\n    function registerAllowedRfqOrigins(\\n        INativeOrdersFeature feature,\\n        address[] memory origins,\\n        bool allowed\\n    )\\n        external\\n    {\\n        feature.registerAllowedRfqOrigins(origins, allowed);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestSimpleFunctionRegistryFeatureImpl1.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/fixins/FixinCommon.sol\\\";\\n\\n\\ncontract TestSimpleFunctionRegistryFeatureImpl1 is\\n    FixinCommon\\n{\\n    function testFn()\\n        external\\n        pure\\n        returns (uint256 id)\\n    {\\n        return 1337;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestSimpleFunctionRegistryFeatureImpl2.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/fixins/FixinCommon.sol\\\";\\n\\n\\ncontract TestSimpleFunctionRegistryFeatureImpl2 is\\n    FixinCommon\\n{\\n    function testFn()\\n        external\\n        pure\\n        returns (uint256 id)\\n    {\\n        return 1338;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestTokenSpender.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/TokenSpenderFeature.sol\\\";\\n\\ncontract TestTokenSpender is\\n    TokenSpenderFeature\\n{\\n    modifier onlySelf() override {\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestTokenSpenderERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TestMintableERC20Token.sol\\\";\\n\\n\\ncontract TestTokenSpenderERC20Token is\\n    TestMintableERC20Token\\n{\\n\\n    event TransferFromCalled(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    // `transferFrom()` behavior depends on the value of `amount`.\\n    uint256 constant private EMPTY_RETURN_AMOUNT = 1337;\\n    uint256 constant private FALSE_RETURN_AMOUNT = 1338;\\n    uint256 constant private REVERT_RETURN_AMOUNT = 1339;\\n    uint256 constant private TRIGGER_FALLBACK_SUCCESS_AMOUNT = 1340;\\n    uint256 constant private EXTRA_RETURN_TRUE_AMOUNT = 1341;\\n    uint256 constant private EXTRA_RETURN_FALSE_AMOUNT = 1342;\\n\\n    bool private _isGreedyRevert;\\n\\n    function setGreedyRevert(bool isGreedy) external {\\n        _isGreedyRevert = isGreedy;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        emit TransferFromCalled(msg.sender, from, to, amount);\\n        if (amount == EMPTY_RETURN_AMOUNT) {\\n            assembly { return(0, 0) }\\n        }\\n        if (amount == FALSE_RETURN_AMOUNT) {\\n            return false;\\n        }\\n        if (amount == REVERT_RETURN_AMOUNT) {\\n            assert(!_isGreedyRevert);\\n            revert(\\\"TestTokenSpenderERC20Token/Revert\\\");\\n        }\\n        if (amount == TRIGGER_FALLBACK_SUCCESS_AMOUNT) {\\n            assert(!_isGreedyRevert);\\n            return false;\\n        }\\n        if (amount == EXTRA_RETURN_TRUE_AMOUNT\\n            || amount == EXTRA_RETURN_FALSE_AMOUNT) {\\n            bool ret = amount == EXTRA_RETURN_TRUE_AMOUNT;\\n\\n            assembly {\\n                mstore(0x00, ret)\\n                mstore(0x20, amount) // just something extra to return\\n                return(0, 0x40)\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function setBalanceAndAllowanceOf(\\n        address owner,\\n        uint256 balance,\\n        address spender,\\n        uint256 allowance_\\n    )\\n        external\\n    {\\n        balanceOf[owner] = balance;\\n        allowance[owner][spender] = allowance_;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestTransformERC20.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/features/TransformERC20Feature.sol\\\";\\n\\n\\ncontract TestTransformERC20 is\\n    TransformERC20Feature\\n{\\n    modifier onlySelf() override {\\n        _;\\n    }\\n\\n    constructor() public TransformERC20Feature(0) {}\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestTransformerBase.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/transformers/Transformer.sol\\\";\\nimport \\\"../src/transformers/IERC20Transformer.sol\\\";\\nimport \\\"../src/transformers/LibERC20Transformer.sol\\\";\\n\\n\\ncontract TestTransformerBase is\\n    IERC20Transformer,\\n    Transformer\\n{\\n    function transform(TransformContext calldata /* context */)\\n        external\\n        override\\n        returns (bytes4 success)\\n    {\\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestWeth.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TestMintableERC20Token.sol\\\";\\n\\n\\ncontract TestWeth is\\n    TestMintableERC20Token\\n{\\n    function deposit()\\n        external\\n        payable\\n    {\\n        this.mint(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        require(balanceOf[msg.sender] >= amount, \\\"TestWeth/INSUFFICIENT_FUNDS\\\");\\n        balanceOf[msg.sender] -= amount;\\n        msg.sender.transfer(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestWethTransformerHost.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/transformers/IERC20Transformer.sol\\\";\\nimport \\\"./TestMintableERC20Token.sol\\\";\\nimport \\\"./TestTransformerHost.sol\\\";\\nimport \\\"./TestWeth.sol\\\";\\n\\n\\ncontract TestWethTransformerHost is\\n    TestTransformerHost\\n{\\n    // solhint-disable\\n    TestWeth private immutable _weth;\\n    // solhint-enable\\n\\n    constructor(TestWeth weth) public {\\n        _weth = weth;\\n    }\\n\\n    function executeTransform(\\n        uint256 wethAmount,\\n        IERC20Transformer transformer,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n    {\\n        if (wethAmount != 0) {\\n            _weth.deposit{value: wethAmount}();\\n        }\\n        // Have to make this call externally because transformers aren't payable.\\n        this.rawExecuteTransform(\\n            transformer,\\n            IERC20Transformer.TransformContext({\\n                sender: msg.sender,\\n                taker: msg.sender,\\n                data: data\\n            })\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/michaelzhu/protocol/contracts/zero-ex/contracts/test/TestZeroExFeature.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/fixins/FixinCommon.sol\\\";\\nimport \\\"../src/ZeroEx.sol\\\";\\n\\n\\ncontract TestZeroExFeature is\\n    FixinCommon\\n{\\n    event PayableFnCalled(uint256 value);\\n    event NotPayableFnCalled();\\n\\n    function payableFn()\\n        external\\n        payable\\n    {\\n        emit PayableFnCalled(msg.value);\\n    }\\n\\n    function notPayableFn()\\n        external\\n    {\\n        emit NotPayableFnCalled();\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    function unimplmentedFn()\\n        external\\n    {}\\n\\n    function internalFn()\\n        external\\n        onlySelf\\n    {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils\",\r\n      \"@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\"\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract LiquidityProviderSandbox\",\"name\":\"sandbox_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"greedyTokensBloomFilter\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityProviderSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GREEDY_TOKENS_BLOOM_FILTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sandbox\",\"outputs\":[{\"internalType\":\"contract ILiquidityProviderSandbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellToLiquidityProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LiquidityProviderFeature","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000db971b18ea5075734cec1241732cc1b41031dfc90000100800000480002c00401000000820000000000000020000001010800001","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}