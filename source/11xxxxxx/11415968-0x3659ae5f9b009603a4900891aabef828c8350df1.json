{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/IRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract IRegistry {\r\n    function getVotingAddress() public view returns (address);\r\n\r\n    function getExchangeFactoryAddress() public view returns (address);\r\n\r\n    function getWethAddress() public view returns (address);\r\n\r\n    function getMessageProcessorAddress() public view returns (address);\r\n\r\n    function getFsTokenAddress() public view returns (address);\r\n\r\n    function getFsTokenProxyAdminAddress() public view returns (address);\r\n\r\n    function getIncentivesAddress() public view returns (address);\r\n\r\n    function getWalletAddress() public view returns (address payable);\r\n\r\n    function getReplayTrackerAddress() public view returns (address);\r\n\r\n    function getLiquidityTokenFactoryAddress() public view returns (address);\r\n\r\n    function hasLiquidityTokensnapshotAccess(address sender) public view returns (bool);\r\n\r\n    function hasWalletAccess(address sender) public view returns (bool);\r\n\r\n    function removeWalletAccess(address _walletAccessor) public;\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool);\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool);\r\n\r\n    function isValidStamperAddress(address stamperAddress) public view returns (bool);\r\n\r\n    function isExchange(address exchangeAddress) public view returns (bool);\r\n\r\n    function addExchange(address _exchange) public;\r\n\r\n    function removeExchange(address _exchange) public;\r\n\r\n    function updateVotingAddress(address _address) public;\r\n}\r\n\r\n// File: contracts/registry/IRegistryUpdateConsumer.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n// Implemented by objects that need to know about registry updates.\r\ninterface IRegistryUpdateConsumer {\r\n    function onRegistryRefresh() external;\r\n}\r\n\r\n// File: contracts/registry/Registry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n// The registry maintains references to all parts of the system\r\ncontract Registry is IRegistry, Ownable {\r\n    event ExchangeAdded(address exchangeAddress);\r\n    event ExchangeRemoved(address exchangeAddress);\r\n    event OracleAdded(address oracle);\r\n    event OracleRemoved(address oracle);\r\n    event VerifierAdded(address verifier);\r\n    event VerifierRemoved(address verifier);\r\n    event LiquidityTokenSnapshotAccessAdded(address accessor);\r\n    event LiquidityTokenSnapshotAccessRemoved(address accessor);\r\n    event StamperAdded(address stamper);\r\n    event StamperRemoved(address stamper);\r\n    event WalletAccessAdded(address accessor);\r\n    event WalletAccessRemoved(address accessor);\r\n\r\n    // List of known exchanges\r\n    address[] public exchanges;\r\n    // A mapping of known exchanges\r\n    mapping(address => bool) public exchangeMapping;\r\n    // Whether or not a given address is an oracle\r\n    mapping(address => bool) public isOracle;\r\n    // Whether or not a given address is a verifier\r\n    mapping(address => bool) public isVerifier;\r\n    // Whether or not a given address is a stamper\r\n    mapping(address => bool) public isStamper;\r\n    // Whether or not an address is allowed to take a snapshot of liquidity tokens\r\n    mapping(address => bool) public liquidityTokenSnapshotAccess;\r\n    // Whether or not an address has access to the wallet\r\n    mapping(address => bool) public walletAccessMapping;\r\n\r\n    address private exchangeFactoryAddress;\r\n    address private fstTokenAddress;\r\n    address private fsTokenProxyAdminAddress;\r\n    address private incentivesAddress;\r\n    address private liquidityTokenFactoryAddress;\r\n    address private messageProcessorAddress;\r\n    address private replayTrackerAddress;\r\n    address private votingAddress;\r\n    address payable private walletAddress;\r\n    address private wethAddress;\r\n\r\n    modifier onlyVotingSystem() {\r\n        require(isVotingSystem(), \"Only voting system\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrVotingSystem() {\r\n        require(isVotingSystem() || isOwner(), \"Only owner or voting system\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrExchangeFactory() {\r\n        require(isExchangeFactory() || isOwner(), \"Only owner or exchange factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrExchangeFactoryOrVotingSystem() {\r\n        require(isVotingSystem() || isExchangeFactory() || isOwner(), \"Only owner or exchange factory\");\r\n        _;\r\n    }\r\n\r\n    function isVotingSystem() private view returns (bool) {\r\n        return msg.sender == votingAddress;\r\n    }\r\n\r\n    function isExchangeFactory() private view returns (bool) {\r\n        return msg.sender == exchangeFactoryAddress;\r\n    }\r\n\r\n    function getVotingAddress() public view returns (address) {\r\n        return votingAddress;\r\n    }\r\n\r\n    function setVotingAddress(address _newAddress) public onlyOwner {\r\n        votingAddress = _newAddress;\r\n    }\r\n\r\n    function getExchangeFactoryAddress() public view returns (address) {\r\n        return exchangeFactoryAddress;\r\n    }\r\n\r\n    function setExchangeFactoryAddress(address _newAddress) public onlyOwner {\r\n        exchangeFactoryAddress = _newAddress;\r\n    }\r\n\r\n    function getLiquidityTokenFactoryAddress() public view returns (address) {\r\n        return liquidityTokenFactoryAddress;\r\n    }\r\n\r\n    function setLiquidityTokenFactoryAddress(address _newAddress) public onlyOwner {\r\n        liquidityTokenFactoryAddress = _newAddress;\r\n    }\r\n\r\n    function getWethAddress() public view returns (address) {\r\n        return wethAddress;\r\n    }\r\n\r\n    function setWethAddress(address _newAddress) public onlyOwner {\r\n        wethAddress = _newAddress;\r\n    }\r\n\r\n    function getMessageProcessorAddress() public view returns (address) {\r\n        return messageProcessorAddress;\r\n    }\r\n\r\n    function setMessageProcessorAddress(address _newAddress) public onlyOwner {\r\n        messageProcessorAddress = _newAddress;\r\n    }\r\n\r\n    function getFsTokenAddress() public view returns (address) {\r\n        return fstTokenAddress;\r\n    }\r\n\r\n    function setFsTokenAddress(address _newAddress) public onlyOwner {\r\n        fstTokenAddress = _newAddress;\r\n    }\r\n\r\n    function getFsTokenProxyAdminAddress() public view returns (address) {\r\n        return fsTokenProxyAdminAddress;\r\n    }\r\n\r\n    function setFsTokenProxyAdminAddress(address _newAddress) public onlyOwner {\r\n        fsTokenProxyAdminAddress = _newAddress;\r\n    }\r\n\r\n    function getIncentivesAddress() public view returns (address) {\r\n        return incentivesAddress;\r\n    }\r\n\r\n    function setIncentivesAddress(address _newAddress) public onlyOwner {\r\n        incentivesAddress = _newAddress;\r\n    }\r\n\r\n    function getWalletAddress() public view returns (address payable) {\r\n        return walletAddress;\r\n    }\r\n\r\n    function setWalletAddress(address payable _newAddress) public onlyOwner {\r\n        walletAddress = _newAddress;\r\n    }\r\n\r\n    function getReplayTrackerAddress() public view returns (address) {\r\n        return replayTrackerAddress;\r\n    }\r\n\r\n    function setReplayTrackerAddress(address _newAddress) public onlyOwner {\r\n        replayTrackerAddress = _newAddress;\r\n    }\r\n\r\n    function updateExchangeFactoryAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        exchangeFactoryAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateFsTokenAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        fstTokenAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateFsTokenProxyAdminAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        fsTokenProxyAdminAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateIncentivesAddress(address _newAddress) public onlyVotingSystem {\r\n        // We decided to not remove wallet access for the old address to allow for\r\n        // a gradual switch over\r\n        requireNonZeroAddress(_newAddress);\r\n        incentivesAddress = _newAddress;\r\n        doAddLiquidityTokensnapshotAccess(incentivesAddress);\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateMessageProcessorAddress(address _newAddress) public onlyVotingSystem {\r\n        // We decided to not remove wallet access for the old address to allow for\r\n        // a gradual switch over\r\n        requireNonZeroAddress(_newAddress);\r\n        messageProcessorAddress = _newAddress;\r\n        doAddWalletAccess(_newAddress);\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateLiquidityTokenFactoryAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        liquidityTokenFactoryAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateReplayTrackerAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        replayTrackerAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateVotingAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        votingAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateWalletAddress(address payable _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        walletAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function updateWethAddress(address _newAddress) public onlyVotingSystem {\r\n        requireNonZeroAddress(_newAddress);\r\n        wethAddress = _newAddress;\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function fireRegistryUpdateEvent() public onlyOwner {\r\n        doFireRegistryUpdateEvent();\r\n    }\r\n\r\n    function doFireRegistryUpdateEvent() private {\r\n        callIfNonZero(replayTrackerAddress);\r\n        callIfNonZero(messageProcessorAddress);\r\n        callIfNonZero(exchangeFactoryAddress);\r\n        callIfNonZero(walletAddress);\r\n        callIfNonZero(incentivesAddress);\r\n\r\n        for (uint256 i = 0; i < exchanges.length; i++) {\r\n            callIfNonZero(exchanges[i]);\r\n        }\r\n    }\r\n\r\n    function callIfNonZero(address a) private {\r\n        if (a != address(0)) {\r\n            IRegistryUpdateConsumer(a).onRegistryRefresh();\r\n        }\r\n    }\r\n\r\n    function hasWalletAccess(address _sender) public view returns (bool) {\r\n        return walletAccessMapping[_sender];\r\n    }\r\n\r\n    function addWalletAccess(address _walletAccessor) public onlyOwnerOrVotingSystem {\r\n        doAddWalletAccess(_walletAccessor);\r\n    }\r\n\r\n    function doAddWalletAccess(address _walletAccessor) private {\r\n        requireNonZeroAddress(_walletAccessor);\r\n        require(!walletAccessMapping[_walletAccessor], \"Already present\");\r\n        walletAccessMapping[_walletAccessor] = true;\r\n        emit WalletAccessAdded(_walletAccessor);\r\n    }\r\n\r\n    function removeWalletAccess(address _walletAccessor) public onlyOwnerOrExchangeFactoryOrVotingSystem {\r\n        require(walletAccessMapping[_walletAccessor], \"No wallet access\");\r\n        delete walletAccessMapping[_walletAccessor];\r\n        emit WalletAccessRemoved(_walletAccessor);\r\n    }\r\n\r\n    function hasLiquidityTokensnapshotAccess(address _sender) public view returns (bool) {\r\n        return liquidityTokenSnapshotAccess[_sender];\r\n    }\r\n\r\n    function addLiquidityTokensnapshotAccess(address _snapshotAccessor) public onlyOwnerOrVotingSystem {\r\n        doAddLiquidityTokensnapshotAccess(_snapshotAccessor);\r\n    }\r\n\r\n    function doAddLiquidityTokensnapshotAccess(address _snapshotAccessor) private {\r\n        requireNonZeroAddress(_snapshotAccessor);\r\n        require(!liquidityTokenSnapshotAccess[_snapshotAccessor], \"Already present\");\r\n        liquidityTokenSnapshotAccess[_snapshotAccessor] = true;\r\n        emit LiquidityTokenSnapshotAccessAdded(_snapshotAccessor);\r\n    }\r\n\r\n    function removeLiquidityTokensnapshotAccess(address _snapshotAccessor)\r\n        public\r\n        onlyOwnerOrExchangeFactoryOrVotingSystem\r\n    {\r\n        require(liquidityTokenSnapshotAccess[_snapshotAccessor], \"No snapshot access\");\r\n        delete liquidityTokenSnapshotAccess[_snapshotAccessor];\r\n        emit LiquidityTokenSnapshotAccessRemoved(_snapshotAccessor);\r\n    }\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool) {\r\n        return isOracle[oracleAddress];\r\n    }\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool) {\r\n        return isVerifier[verifierAddress];\r\n    }\r\n\r\n    function isValidStamperAddress(address verifierAddress) public view returns (bool) {\r\n        return isStamper[verifierAddress];\r\n    }\r\n\r\n    function addOracle(address _toAdd) public onlyOwnerOrVotingSystem {\r\n        requireNonZeroAddress(_toAdd);\r\n        require(!isOracle[_toAdd], \"Already present\");\r\n        isOracle[_toAdd] = true;\r\n        emit OracleAdded(_toAdd);\r\n    }\r\n\r\n    function removeOracle(address _toRemove) public onlyOwnerOrVotingSystem {\r\n        require(isOracle[_toRemove], \"Not an oracle\");\r\n        delete isOracle[_toRemove];\r\n        emit OracleRemoved(_toRemove);\r\n    }\r\n\r\n    function addVerifier(address _toAdd) public onlyOwnerOrVotingSystem {\r\n        requireNonZeroAddress(_toAdd);\r\n        require(!isVerifier[_toAdd], \"Already present\");\r\n        isVerifier[_toAdd] = true;\r\n        emit VerifierAdded(_toAdd);\r\n    }\r\n\r\n    function removeVerifier(address _toRemove) public onlyOwnerOrVotingSystem {\r\n        require(isVerifier[_toRemove], \"Not a verifier\");\r\n        delete isVerifier[_toRemove];\r\n        emit VerifierRemoved(_toRemove);\r\n    }\r\n\r\n    function addStamper(address _toAdd) public onlyOwnerOrVotingSystem {\r\n        requireNonZeroAddress(_toAdd);\r\n        require(!isStamper[_toAdd], \"Already present\");\r\n        isStamper[_toAdd] = true;\r\n        emit StamperAdded(_toAdd);\r\n    }\r\n\r\n    function removeStamper(address _toRemove) public onlyOwnerOrVotingSystem {\r\n        require(isStamper[_toRemove], \"Not a stamper\");\r\n        delete isStamper[_toRemove];\r\n        emit StamperRemoved(_toRemove);\r\n    }\r\n\r\n    function isExchange(address exchangeAddress) public view returns (bool) {\r\n        return exchangeMapping[exchangeAddress];\r\n    }\r\n\r\n    function addExchange(address _exchange) public onlyOwnerOrExchangeFactoryOrVotingSystem {\r\n        requireNonZeroAddress(_exchange);\r\n        require(!exchangeMapping[_exchange], \"Already added\");\r\n        doAddWalletAccess(_exchange);\r\n        exchanges.push(_exchange);\r\n        exchangeMapping[_exchange] = true;\r\n        emit ExchangeAdded(_exchange);\r\n    }\r\n\r\n    function removeExchange(address _exchange) public onlyOwnerOrExchangeFactoryOrVotingSystem {\r\n        require(exchangeMapping[_exchange], \"Not an exchange\");\r\n        removeWalletAccess(_exchange);\r\n\r\n        delete exchangeMapping[_exchange];\r\n\r\n        removeExchangeFromArray(_exchange);\r\n        emit ExchangeRemoved(_exchange);\r\n    }\r\n\r\n    function removeExchangeFromArray(address exchange) private {\r\n        require(exchanges.length > 0, \"No elements\");\r\n\r\n        int256 index = getIndexOf(exchange);\r\n\r\n        require(index >= 0, \"Exchange not found\");\r\n\r\n        // copy last entry into the slot in which we found the address\r\n        exchanges[uint256(index)] = exchanges[exchanges.length - 1];\r\n\r\n        // remove last element\r\n        exchanges.pop();\r\n    }\r\n\r\n    function getIndexOf(address exchange) private view returns (int256) {\r\n        for (uint256 index = 0; index < exchanges.length; index++) {\r\n            if (exchanges[index] == exchange) {\r\n                return int256(index);\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function requireNonZeroAddress(address a) private pure {\r\n        require(a != address(0), \"address must be non zero\");\r\n    }\r\n\r\n    function getExchanges() public view returns (address[] memory) {\r\n        return exchanges;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"ExchangeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"ExchangeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"LiquidityTokenSnapshotAccessAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"LiquidityTokenSnapshotAccessRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stamper\",\"type\":\"address\"}],\"name\":\"StamperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stamper\",\"type\":\"address\"}],\"name\":\"StamperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"WalletAccessAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"WalletAccessRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"addExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snapshotAccessor\",\"type\":\"address\"}],\"name\":\"addLiquidityTokensnapshotAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addStamper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAccessor\",\"type\":\"address\"}],\"name\":\"addWalletAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fireRegistryUpdateEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchanges\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFsTokenProxyAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIncentivesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityTokenFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMessageProcessorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReplayTrackerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVotingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasLiquidityTokensnapshotAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasWalletAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"isExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStamper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"isValidOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isValidStamperAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isValidVerifierAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTokenSnapshotAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"removeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snapshotAccessor\",\"type\":\"address\"}],\"name\":\"removeLiquidityTokensnapshotAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeStamper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAccessor\",\"type\":\"address\"}],\"name\":\"removeWalletAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setExchangeFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFsTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFsTokenProxyAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setIncentivesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityTokenFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setMessageProcessorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setReplayTrackerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setVotingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateExchangeFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFsTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFsTokenProxyAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateIncentivesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateLiquidityTokenFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateMessageProcessorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateReplayTrackerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateVotingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateWethAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAccessMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://426d52e3cb3bf3b82232390119c21f7e0ae889b8a04ddbb715c776679aa54e16"}]}