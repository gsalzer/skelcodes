{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/IDexRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/paraswap/IAugustusSwapper.sol\\\";\\n\\n/**\\n * @title IDexRegistry\\n * @notice Interface for DexRegistry.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ninterface IDexRegistry {\\n    function verifyExchangeAdapters(IAugustusSwapper.Path[] calldata _path) external view;\\n    function verifyExchangeAdapters(IAugustusSwapper.BuyRoute[] calldata _routes) external view;\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/IModuleRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * @title IModuleRegistry\\n * @notice Interface for the registry of authorised modules.\\n */\\ninterface IModuleRegistry {\\n    function registerModule(address _module, bytes32 _name) external;\\n\\n    function deregisterModule(address _module) external;\\n\\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\\n\\n    function deregisterUpgrader(address _upgrader) external;\\n\\n    function recoverToken(address _token) external;\\n\\n    function moduleInfo(address _module) external view returns (bytes32);\\n\\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\\n\\n    function isRegisteredModule(address _module) external view returns (bool);\\n\\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\\n\\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/ITokenPriceRegistry.sol\": {\r\n      \"content\": \"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ITokenPriceRegistry\\n * @notice TokenPriceRegistry interface\\n */\\ninterface ITokenPriceRegistry {\\n    function getTokenPrice(address _token) external view returns (uint184 _price);\\n    function isTokenTradable(address _token) external view returns (bool _isTradable);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/storage/ILimitStorage.sol\": {\r\n      \"content\": \"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ILimitStorage\\n * @notice LimitStorage interface\\n */\\ninterface ILimitStorage {\\n\\n    struct Limit {\\n        // the current limit\\n        uint128 current;\\n        // the pending limit if any\\n        uint128 pending;\\n        // when the pending limit becomes the current limit\\n        uint64 changeAfter;\\n    }\\n\\n    struct DailySpent {\\n        // The amount already spent during the current period\\n        uint128 alreadySpent;\\n        // The end of the current period\\n        uint64 periodEnd;\\n    }\\n\\n    function setLimit(address _wallet, Limit memory _limit) external;\\n\\n    function getLimit(address _wallet) external view returns (Limit memory _limit);\\n\\n    function setDailySpent(address _wallet, DailySpent memory _dailySpent) external;\\n\\n    function getDailySpent(address _wallet) external view returns (DailySpent memory _dailySpent);\\n\\n    function setLimitAndDailySpent(address _wallet, Limit memory _limit, DailySpent memory _dailySpent) external;\\n\\n    function getLimitAndDailySpent(address _wallet) external view returns (Limit memory _limit, DailySpent memory _dailySpent);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/storage/ILockStorage.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\ninterface ILockStorage {\\n    function isLocked(address _wallet) external view returns (bool);\\n\\n    function getLock(address _wallet) external view returns (uint256);\\n\\n    function getLocker(address _wallet) external view returns (address);\\n\\n    function setLock(address _wallet, address _locker, uint256 _releaseAfter) external;\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/modules/TokenExchanger.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./common/BaseFeature.sol\\\";\\nimport \\\"../../lib/other/ERC20.sol\\\";\\nimport \\\"../../lib/paraswap/IAugustusSwapper.sol\\\";\\nimport \\\"../infrastructure/ITokenPriceRegistry.sol\\\";\\nimport \\\"../infrastructure/IDexRegistry.sol\\\";\\n\\n/**\\n * @title TokenExchanger\\n * @notice Module to trade tokens (ETH or ERC20) using ParaSwap.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ncontract TokenExchanger is BaseFeature {\\n\\n    bytes32 constant NAME = \\\"TokenExchanger\\\";\\n\\n    using SafeMath for uint256;\\n\\n    // Mock token address for ETH\\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // Signatures of Paraswap's trade methods\\n    // solhint-disable-next-line max-line-length\\n    bytes4 constant internal MULTISWAP = 0xcbd1603e; // bytes4(keccak256(\\\"multiSwap(address,address,uint256,uint256,uint256,(address,uint256,(address,address,uint256,bytes,uint256)[])[],uint256,address,uint256,string)\\\"))\\n    // solhint-disable-next-line max-line-length\\n    bytes4 constant internal BUY = 0xbb2a349b; // bytes4(keccak256(\\\"buy(address,address,uint256,uint256,uint256,(address,address,uint256,uint256,bytes,uint256)[],uint256,address,uint256,string)\\\"))\\n\\n    // The address of the Paraswap Proxy contract\\n    address public paraswapProxy;\\n    // The address of the Paraswap contract\\n    address public paraswapSwapper;\\n    // The label of the referrer\\n    string public referrer;\\n    // Registry of authorised exchanges\\n    IDexRegistry public dexRegistry;\\n    // The token price registry\\n    ITokenPriceRegistry public tokenPriceRegistry;\\n\\n    event TokenExchanged(address indexed wallet, address srcToken, uint srcAmount, address destToken, uint destAmount);\\n\\n\\n    // *************** Constructor ********************** //\\n\\n    constructor(\\n        ILockStorage _lockStorage,\\n        ITokenPriceRegistry _tokenPriceRegistry,\\n        IVersionManager _versionManager,\\n        IDexRegistry _dexRegistry,\\n        address _paraswap,\\n        string memory _referrer\\n    )\\n        BaseFeature(_lockStorage, _versionManager, NAME)\\n        public\\n    {\\n        tokenPriceRegistry = _tokenPriceRegistry;\\n        dexRegistry = _dexRegistry;\\n        paraswapSwapper = _paraswap;\\n        paraswapProxy = IAugustusSwapper(_paraswap).getTokenTransferProxy();\\n        referrer = _referrer;\\n    }\\n\\n    /**\\n     * @inheritdoc IFeature\\n     */\\n    function getRequiredSignatures(address, bytes calldata) external view override returns (uint256, OwnerSignature) {\\n        return (1, OwnerSignature.Required);\\n    }\\n\\n    /**\\n     * @notice Lets the owner of the wallet execute a \\\"sell\\\" trade (fixed source amount, variable destination amount).\\n     * @param _wallet The target wallet\\n     * @param _srcToken The address of the source token.\\n     * @param _destToken The address of the destination token.\\n     * @param _srcAmount The exact amount of source tokens to sell.\\n     * @param _minDestAmount The minimum amount of destination tokens required for the trade.\\n     * @param _expectedDestAmount The expected amount of destination tokens (used only in ParaSwap's Swapped event).\\n     * @param _path Sequence of sets of weighted ParaSwap routes. Each route specifies an exchange to use to convert a given (exact) amount of\\n     * a given source token into a given (minimum) amount of a given destination token. The path is a sequence of sets of weighted routes where\\n     * the destination token of a set of weighted routes matches the source token of the next set of weighted routes in the path.\\n     * @param _mintPrice gasPrice (in wei) at the time the gas tokens were minted by ParaSwap. 0 means gas token will not be used by ParaSwap\\n     */\\n    function sell(\\n        address _wallet,\\n        address _srcToken,\\n        address _destToken,\\n        uint256 _srcAmount,\\n        uint256 _minDestAmount,\\n        uint256 _expectedDestAmount,\\n        IAugustusSwapper.Path[] calldata _path,\\n        uint256 _mintPrice\\n    )\\n        external\\n        onlyWalletOwnerOrFeature(_wallet)\\n        onlyWhenUnlocked(_wallet)\\n    {\\n        // Verify that the destination token is tradable\\n        verifyTradable(_destToken);\\n        // Verify that the exchange adapters used have been authorised\\n        verifyExchangeAdapters(_path);\\n        // Approve source amount if required\\n        uint previousAllowance = approveToken(_wallet, _srcToken, _srcAmount);\\n        // Perform trade and emit event\\n        doSell(\\n            _wallet,\\n            _srcToken,\\n            _destToken,\\n            _srcAmount,\\n            _minDestAmount,\\n            _expectedDestAmount,\\n            _path,\\n            _mintPrice);\\n        // Restore the previous allowance if needed. This should only be needed when the previous allowance\\n        // was infinite. In other cases, paraswap.multiSwap() should have used exactly the additional allowance\\n        // granted to it and therefore the previous allowance should have been restored.\\n        restoreAllowance(_wallet, _srcToken, previousAllowance);\\n    }\\n\\n    /**\\n     * @notice Lets the owner of the wallet execute a \\\"buy\\\" trade (fixed destination amount, variable source amount).\\n     * @param _wallet The target wallet\\n     * @param _srcToken The address of the source token.\\n     * @param _destToken The address of the destination token.\\n     * @param _maxSrcAmount The maximum amount of source tokens to use for the trade.\\n     * @param _destAmount The exact amount of destination tokens to buy.\\n     * @param _expectedSrcAmount The expected amount of source tokens (used only in ParaSwap's Bought event).\\n     * @param _routes Set of weighted ParaSwap routes. Each route specifies an exchange to use to convert a given (maximum) amount of a given\\n     * source token into a given (exact) amount of a given destination token.\\n     * @param _mintPrice gasPrice (in wei) at the time the gas tokens were minted by ParaSwap. 0 means gas token will not be used by ParaSwap\\n     */\\n    function buy(\\n        address _wallet,\\n        address _srcToken,\\n        address _destToken,\\n        uint256 _maxSrcAmount,\\n        uint256 _destAmount,\\n        uint256 _expectedSrcAmount,\\n        IAugustusSwapper.BuyRoute[] calldata _routes,\\n        uint256 _mintPrice\\n    )\\n        external\\n        onlyWalletOwnerOrFeature(_wallet)\\n        onlyWhenUnlocked(_wallet)\\n    {\\n        // Verify that the destination token is tradable\\n        verifyTradable(_destToken);\\n        // Verify that the exchange adapters used have been authorised\\n        verifyExchangeAdapters(_routes);\\n        // Approve source amount if required\\n        uint previousAllowance = approveToken(_wallet, _srcToken, _maxSrcAmount);\\n        // Perform trade and emit event\\n        doBuy(\\n            _wallet,\\n            _srcToken,\\n            _destToken,\\n            _maxSrcAmount,\\n            _destAmount,\\n            _expectedSrcAmount,\\n            _routes,\\n            _mintPrice);\\n        // Restore the previous allowance if needed (paraswap.buy() may not have used exactly the additional allowance granted to it)\\n        restoreAllowance(_wallet, _srcToken, previousAllowance);\\n    }\\n\\n    // Internal & Private Methods\\n\\n    function verifyTradable(address _token) internal view {\\n        require((_token == ETH_TOKEN_ADDRESS) || tokenPriceRegistry.isTokenTradable(_token), \\\"TE: Token not tradable\\\");\\n    }\\n\\n    function verifyExchangeAdapters(IAugustusSwapper.Path[] calldata _path) internal view {\\n        dexRegistry.verifyExchangeAdapters(_path);\\n    }\\n\\n    function verifyExchangeAdapters(IAugustusSwapper.BuyRoute[] calldata _routes) internal view {\\n        dexRegistry.verifyExchangeAdapters(_routes);\\n    }\\n\\n    function approveToken(address _wallet, address _token, uint _amount) internal returns (uint256 _existingAllowance) {\\n        // TODO: Use a \\\"safe approve\\\" logic similar to the one implemented below in other modules\\n        if (_token != ETH_TOKEN_ADDRESS) {\\n            _existingAllowance = ERC20(_token).allowance(_wallet, paraswapProxy);\\n            if (_existingAllowance < uint256(-1)) {\\n                if (_existingAllowance > 0) {\\n                    // Clear the existing allowance to avoid issues with tokens like USDT that do not allow changing a non-zero allowance\\n                    invokeWallet(_wallet, _token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", paraswapProxy, 0));\\n                }\\n                // Increase the allowance to include the required amount\\n                uint256 newAllowance = SafeMath.add(_existingAllowance, _amount);\\n                invokeWallet(\\n                    _wallet,\\n                    _token,\\n                    0,\\n                    abi.encodeWithSignature(\\\"approve(address,uint256)\\\", paraswapProxy, newAllowance)\\n                );\\n            }\\n        }\\n    }\\n\\n    function restoreAllowance(address _wallet, address _token, uint _previousAllowance) internal {\\n        if (_token != ETH_TOKEN_ADDRESS) {\\n            uint allowance = ERC20(_token).allowance(_wallet, paraswapProxy);\\n            if (allowance != _previousAllowance) {\\n                invokeWallet(\\n                    _wallet,\\n                    _token,\\n                    0,\\n                    abi.encodeWithSignature(\\\"approve(address,uint256)\\\", paraswapProxy, _previousAllowance)\\n                );\\n            }\\n        }\\n    }\\n\\n    function doTradeAndEmitEvent(\\n        address _wallet,\\n        address _srcToken,\\n        address _destToken,\\n        uint256 _srcAmount,\\n        uint256 _destAmount,\\n        bytes memory tradeData\\n    )\\n        internal\\n    {\\n        // Perform the trade\\n        bytes memory swapRes = invokeWallet(\\n            _wallet,\\n            paraswapSwapper,\\n            _srcToken == ETH_TOKEN_ADDRESS ? _srcAmount : 0, tradeData\\n        );\\n\\n        // Emit event with best possible estimate of destination amount\\n        uint256 estimatedDestAmount;\\n        if (swapRes.length > 0) {\\n            (estimatedDestAmount) = abi.decode(swapRes, (uint256));\\n        } else {\\n            estimatedDestAmount = _destAmount;\\n        }\\n        emit TokenExchanged(_wallet, _srcToken, _srcAmount, _destToken, estimatedDestAmount);\\n    }\\n\\n    function doSell(\\n        address _wallet,\\n        address _srcToken,\\n        address _destToken,\\n        uint256 _srcAmount,\\n        uint256 _minDestAmount,\\n        uint256 _expectedDestAmount,\\n        IAugustusSwapper.Path[] calldata _path,\\n        uint256 _mintPrice\\n    )\\n        internal\\n    {\\n        // Build the calldata\\n        string memory ref = referrer;\\n        bytes memory tradeData = abi.encodeWithSelector(MULTISWAP,\\n            _srcToken, _destToken, _srcAmount, _minDestAmount, _expectedDestAmount, _path, _mintPrice, address(0), 0, ref);\\n\\n        // Perform the trade\\n        doTradeAndEmitEvent(_wallet, _srcToken, _destToken, _srcAmount, _minDestAmount, tradeData);\\n    }\\n\\n    function doBuy(\\n        address _wallet,\\n        address _srcToken,\\n        address _destToken,\\n        uint256 _maxSrcAmount,\\n        uint256 _destAmount,\\n        uint256 _expectedSrcAmount,\\n        IAugustusSwapper.BuyRoute[] calldata _routes,\\n        uint256 _mintPrice\\n    )\\n        internal\\n    {\\n        // Build the calldata\\n        string memory ref = referrer;\\n        bytes memory tradeData = abi.encodeWithSelector(BUY,\\n            _srcToken, _destToken, _maxSrcAmount, _destAmount, _expectedSrcAmount, _routes, _mintPrice, address(0), 0, ref);\\n\\n        // Perform the trade\\n        doTradeAndEmitEvent(_wallet, _srcToken, _destToken, _maxSrcAmount, _destAmount, tradeData);\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/modules/common/BaseFeature.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.s\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../wallet/IWallet.sol\\\";\\nimport \\\"../../infrastructure/IModuleRegistry.sol\\\";\\nimport \\\"../../infrastructure/storage/ILockStorage.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"../../../lib/other/ERC20.sol\\\";\\nimport \\\"./IVersionManager.sol\\\";\\n\\n/**\\n * @title BaseFeature\\n * @notice Base Feature contract that contains methods common to all Feature contracts.\\n * @author Julien Niset - <julien@argent.xyz>, Olivier VDB - <olivier@argent.xyz>\\n */\\ncontract BaseFeature is IFeature {\\n\\n    // Empty calldata\\n    bytes constant internal EMPTY_BYTES = \\\"\\\";\\n    // Mock token address for ETH\\n    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // The address of the Lock storage\\n    ILockStorage internal lockStorage;\\n    // The address of the Version Manager\\n    IVersionManager internal versionManager;\\n\\n    event FeatureCreated(bytes32 name);\\n\\n    /**\\n     * @notice Throws if the wallet is locked.\\n     */\\n    modifier onlyWhenUnlocked(address _wallet) {\\n        require(!lockStorage.isLocked(_wallet), \\\"BF: wallet locked\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if the sender is not the VersionManager.\\n     */\\n    modifier onlyVersionManager() {\\n        require(msg.sender == address(versionManager), \\\"BF: caller must be VersionManager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if the sender is not the owner of the target wallet.\\n     */\\n    modifier onlyWalletOwner(address _wallet) {\\n        require(isOwner(_wallet, msg.sender), \\\"BF: must be wallet owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if the sender is not an authorised feature of the target wallet.\\n     */\\n    modifier onlyWalletFeature(address _wallet) {\\n        require(versionManager.isFeatureAuthorised(_wallet, msg.sender), \\\"BF: must be a wallet feature\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if the sender is not the owner of the target wallet or the feature itself.\\n     */\\n    modifier onlyWalletOwnerOrFeature(address _wallet) {\\n        // Wrapping in an internal method reduces deployment cost by avoiding duplication of inlined code\\n        verifyOwnerOrAuthorisedFeature(_wallet, msg.sender);\\n        _;\\n    }\\n\\n    constructor(\\n        ILockStorage _lockStorage,\\n        IVersionManager _versionManager,\\n        bytes32 _name\\n    ) public {\\n        lockStorage = _lockStorage;\\n        versionManager = _versionManager;\\n        emit FeatureCreated(_name);\\n    }\\n\\n    /**\\n    * @inheritdoc IFeature\\n    */\\n    function recoverToken(address _token) external virtual override {\\n        uint total = ERC20(_token).balanceOf(address(this));\\n        _token.call(abi.encodeWithSelector(ERC20(_token).transfer.selector, address(versionManager), total));\\n    }\\n\\n    /**\\n     * @notice Inits the feature for a wallet by doing nothing.\\n     * @dev !! Overriding methods need make sure `init()` can only be called by the VersionManager !!\\n     * @param _wallet The wallet.\\n     */\\n    function init(address _wallet) external virtual override  {}\\n\\n    /**\\n     * @inheritdoc IFeature\\n     */\\n    function getRequiredSignatures(address, bytes calldata) external virtual view override returns (uint256, OwnerSignature) {\\n        revert(\\\"BF: disabled method\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IFeature\\n     */\\n    function getStaticCallSignatures() external virtual override view returns (bytes4[] memory _sigs) {}\\n\\n    /**\\n     * @inheritdoc IFeature\\n     */\\n    function isFeatureAuthorisedInVersionManager(address _wallet, address _feature) public override view returns (bool) {\\n        return versionManager.isFeatureAuthorised(_wallet, _feature);\\n    }\\n\\n    /**\\n    * @notice Checks that the wallet address provided as the first parameter of _data matches _wallet\\n    * @return false if the addresses are different.\\n    */\\n    function verifyData(address _wallet, bytes calldata _data) internal pure returns (bool) {\\n        require(_data.length >= 36, \\\"RM: Invalid dataWallet\\\");\\n        address dataWallet = abi.decode(_data[4:], (address));\\n        return dataWallet == _wallet;\\n    }\\n    \\n     /**\\n     * @notice Helper method to check if an address is the owner of a target wallet.\\n     * @param _wallet The target wallet.\\n     * @param _addr The address.\\n     */\\n    function isOwner(address _wallet, address _addr) internal view returns (bool) {\\n        return IWallet(_wallet).owner() == _addr;\\n    }\\n\\n    /**\\n     * @notice Verify that the caller is an authorised feature or the wallet owner.\\n     * @param _wallet The target wallet.\\n     * @param _sender The caller.\\n     */\\n    function verifyOwnerOrAuthorisedFeature(address _wallet, address _sender) internal view {\\n        require(isFeatureAuthorisedInVersionManager(_wallet, _sender) || isOwner(_wallet, _sender), \\\"BF: must be owner or feature\\\");\\n    }\\n\\n    /**\\n     * @notice Helper method to invoke a wallet.\\n     * @param _wallet The target wallet.\\n     * @param _to The target address for the transaction.\\n     * @param _value The value of the transaction.\\n     * @param _data The data of the transaction.\\n     */\\n    function invokeWallet(address _wallet, address _to, uint256 _value, bytes memory _data)\\n        internal\\n        returns (bytes memory _res) \\n    {\\n        _res = versionManager.checkAuthorisedFeatureAndInvokeWallet(_wallet, _to, _value, _data);\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/modules/common/IFeature.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * @title IFeature\\n * @notice Interface for a Feature.\\n * @author Julien Niset - <julien@argent.xyz>, Olivier VDB - <olivier@argent.xyz>\\n */\\ninterface IFeature {\\n\\n    enum OwnerSignature {\\n        Anyone,             // Anyone\\n        Required,           // Owner required\\n        Optional,           // Owner and/or guardians\\n        Disallowed          // guardians only\\n    }\\n\\n    /**\\n    * @notice Utility method to recover any ERC20 token that was sent to the Feature by mistake.\\n    * @param _token The token to recover.\\n    */\\n    function recoverToken(address _token) external;\\n\\n    /**\\n     * @notice Inits a Feature for a wallet by e.g. setting some wallet specific parameters in storage.\\n     * @param _wallet The wallet.\\n     */\\n    function init(address _wallet) external;\\n\\n    /**\\n     * @notice Helper method to check if an address is an authorised feature of a target wallet.\\n     * @param _wallet The target wallet.\\n     * @param _feature The address.\\n     */\\n    function isFeatureAuthorisedInVersionManager(address _wallet, address _feature) external view returns (bool);\\n\\n    /**\\n    * @notice Gets the number of valid signatures that must be provided to execute a\\n    * specific relayed transaction.\\n    * @param _wallet The target wallet.\\n    * @param _data The data of the relayed transaction.\\n    * @return The number of required signatures and the wallet owner signature requirement.\\n    */\\n    function getRequiredSignatures(address _wallet, bytes calldata _data) external view returns (uint256, OwnerSignature);\\n\\n    /**\\n    * @notice Gets the list of static call signatures that this feature responds to on behalf of wallets\\n    */\\n    function getStaticCallSignatures() external view returns (bytes4[] memory);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/modules/common/IVersionManager.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../infrastructure/storage/ILimitStorage.sol\\\";\\n\\n/**\\n * @title IVersionManager\\n * @notice Interface for the VersionManager module.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ninterface IVersionManager {\\n    /**\\n     * @notice Returns true if the feature is authorised for the wallet\\n     * @param _wallet The target wallet.\\n     * @param _feature The feature.\\n     */\\n    function isFeatureAuthorised(address _wallet, address _feature) external view returns (bool);\\n\\n    /**\\n     * @notice Lets a feature (caller) invoke a wallet.\\n     * @param _wallet The target wallet.\\n     * @param _to The target address for the transaction.\\n     * @param _value The value of the transaction.\\n     * @param _data The data of the transaction.\\n     */\\n    function checkAuthorisedFeatureAndInvokeWallet(\\n        address _wallet,\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _res);\\n\\n    /* ******* Backward Compatibility with old Storages and BaseWallet *************** */\\n\\n    /**\\n     * @notice Sets a new owner for the wallet.\\n     * @param _newOwner The new owner.\\n     */\\n    function setOwner(address _wallet, address _newOwner) external;\\n\\n    /**\\n     * @notice Lets a feature write data to a storage contract.\\n     * @param _wallet The target wallet.\\n     * @param _storage The storage contract.\\n     * @param _data The data of the call\\n     */\\n    function invokeStorage(address _wallet, address _storage, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Upgrade a wallet to a new version.\\n     * @param _wallet the wallet to upgrade\\n     * @param _toVersion the new version\\n     */\\n    function upgradeWallet(address _wallet, uint256 _toVersion) external;\\n \\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/wallet/IWallet.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * @title IWallet\\n * @notice Interface for the BaseWallet\\n */\\ninterface IWallet {\\n    /**\\n     * @notice Returns the wallet owner.\\n     * @return The wallet owner address.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the number of authorised modules.\\n     * @return The number of authorised modules.\\n     */\\n    function modules() external view returns (uint);\\n\\n    /**\\n     * @notice Sets a new owner for the wallet.\\n     * @param _newOwner The new owner.\\n     */\\n    function setOwner(address _newOwner) external;\\n\\n    /**\\n     * @notice Checks if a module is authorised on the wallet.\\n     * @param _module The module address to check.\\n     * @return `true` if the module is authorised, otherwise `false`.\\n     */\\n    function authorised(address _module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the module responsible for a static call redirection.\\n     * @param _sig The signature of the static call.\\n     * @return the module doing the redirection\\n     */\\n    function enabled(bytes4 _sig) external view returns (address);\\n\\n    /**\\n     * @notice Enables/Disables a module.\\n     * @param _module The target module.\\n     * @param _value Set to `true` to authorise the module.\\n     */\\n    function authoriseModule(address _module, bool _value) external;\\n\\n    /**\\n    * @notice Enables a static method by specifying the target module to which the call must be delegated.\\n    * @param _module The target module.\\n    * @param _method The static method signature.\\n    */\\n    function enableStaticCall(address _module, bytes4 _method) external;\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/lib/other/ERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * ERC20 contract interface.\\n */\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function balanceOf(address tokenOwner) external view returns (uint balance);\\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\\n    function transfer(address to, uint tokens) external returns (bool success);\\n    function approve(address spender, uint tokens) external returns (bool success);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/lib/paraswap/IAugustusSwapper.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.4 <0.7.0;\\n\\ninterface IAugustusSwapper {\\n    function getTokenTransferProxy() external view returns (address);\\n\\n    struct Route {\\n        address payable exchange;\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee; // only used for 0xV3\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; // only used for 0xV3\\n        Route[] routes;\\n    }\\n\\n    struct BuyRoute {\\n        address payable exchange;\\n        address targetExchange;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        bytes payload;\\n        uint256 networkFee; // only used for 0xV3\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILockStorage\",\"name\":\"_lockStorage\",\"type\":\"address\"},{\"internalType\":\"contract ITokenPriceRegistry\",\"name\":\"_tokenPriceRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IVersionManager\",\"name\":\"_versionManager\",\"type\":\"address\"},{\"internalType\":\"contract IDexRegistry\",\"name\":\"_dexRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paraswap\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_referrer\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"FeatureCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"TokenExchanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedSrcAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IAugustusSwapper.BuyRoute[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRegistry\",\"outputs\":[{\"internalType\":\"contract IDexRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getRequiredSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IFeature.OwnerSignature\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticCallSignatures\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feature\",\"type\":\"address\"}],\"name\":\"isFeatureAuthorisedInVersionManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paraswapProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paraswapSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedDestAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IAugustusSwapper.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IAugustusSwapper.Path[]\",\"name\":\"_path\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceRegistry\",\"outputs\":[{\"internalType\":\"contract ITokenPriceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenExchanger","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000af5ef23e884fd696c8dfafd1836e0164f13873a0000000000000000000000000f6f211121b07947fba3faae159422af2f93a636c000000000000000000000000dec1c7a7b5930871ddff751a0e07247a67f4a7070000000000000000000000001f8db8b9356f8d5f6203893198521a7ee02df35c0000000000000000000000009509665d015bfe3c77aa5ad6ca20c8afa1d9898900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006617267656e740000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}