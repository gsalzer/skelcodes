{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/controller/Storage.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\ncontract Storage {\r\n    // percent value must be multiple by 1e6\r\n    uint256[] marketingLevels;\r\n\r\n    // array of addresses which have already registered account\r\n    address[] accountList;\r\n\r\n    // bind left with right\r\n    // THE RULE: the child referred by the parent\r\n    mapping(address => address) referrals;\r\n\r\n    // whitelist root tree of marketing level\r\n    mapping(address => bool) whitelistRoots;\r\n\r\n    function getTotalAccount() public view returns(uint256) {\r\n        return accountList.length;\r\n    }\r\n\r\n    function getAccountList() public view returns(address[] memory) {\r\n        return accountList;\r\n    }\r\n\r\n    function getReferenceBy(address _child) public view returns(address) {\r\n        return referrals[_child];\r\n    }\r\n\r\n    function getMarketingMaxLevel() public view returns(uint256) {\r\n        return marketingLevels.length;\r\n    }\r\n\r\n    function getMarketingLevelValue(uint256 _level) public view returns(uint256) {\r\n        return marketingLevels[_level];\r\n    }\r\n\r\n    // get reference parent address matching the level tree\r\n    function getReferenceParent(address _child, uint256 _level) public view returns(address) {\r\n        uint i;\r\n        address pointer = _child;\r\n\r\n        while(i < marketingLevels.length) {\r\n            pointer = referrals[pointer];\r\n\r\n            if (i == _level) {\r\n                return pointer;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    function getWhiteListRoot(address _root) public view returns(bool) {\r\n        return whitelistRoots[_root];\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/controller/Controller.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n// import \"contracts/controller/Storage.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract Controller is Storage, Ownable {\r\n    event LinkCreated(address indexed addr, address indexed refer);\r\n\r\n    constructor() public {\r\n        // init marketing level values\r\n        // level from 1 -> 8\r\n        marketingLevels.push(25e6); // 25%\r\n        marketingLevels.push(20e6);\r\n        marketingLevels.push(15e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(5e6);\r\n        marketingLevels.push(5e6);\r\n    }\r\n\r\n    // user register referral address\r\n    function register(address _refer) public {\r\n        require(msg.sender != _refer, \"ERROR: address cannot refer itself\");\r\n        require(referrals[msg.sender] == address(0), \"ERROR: already set refer address\");\r\n\r\n        // owner address is the root of references tree\r\n        if (_refer != owner() && !getWhiteListRoot(_refer)) {\r\n            require(referrals[_refer] != address(0), \"ERROR: invalid refer address\");\r\n        }\r\n\r\n        // update reference tree\r\n        referrals[msg.sender] = _refer;\r\n\r\n        emit LinkCreated(msg.sender, _refer);\r\n    }\r\n\r\n    // admin update marketing level value\r\n    function updateMarketingLevelValue(uint256 _level, uint256 _value) public onlyOwner {\r\n        // value must be expo with 1e6\r\n        // 25% -> 25e6\r\n        marketingLevels[_level] = _value;\r\n    }\r\n\r\n    // add white list root tree\r\n    function addWhiteListRoot(address _root) public onlyOwner {\r\n        whitelistRoots[_root] = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refer\",\"type\":\"address\"}],\"name\":\"LinkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_root\",\"type\":\"address\"}],\"name\":\"addWhiteListRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMarketingLevelValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"}],\"name\":\"getReferenceBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getReferenceParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_root\",\"type\":\"address\"}],\"name\":\"getWhiteListRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMarketingLevelValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://02fdc7361b546d3965884fb03d81975de376aff3fdd60ed38e6f32d47d266215"}]}