{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./Initializable.sol\\u0027;\\nimport \\u0027./IERC20.sol\\u0027;\\n\\ncontract ERC20Detailed is Initializable, IERC20 {\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  function initialize(string memory name, string memory symbol, uint8 decimals) internal initializer {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n  }\\n\\n  function name() public view returns(string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view returns(string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view returns(uint8) {\\n    return _decimals;\\n  }\\n\\n  uint256[50] private ______gap;\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address who) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external view returns (uint256);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function approve(address spender, uint256 value)\\n    external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    external returns (bool);\\n  event Transfer( address indexed from, address indexed to, uint256 value);\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Initializable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract Initializable {\\n\\n  bool private initialized;\\n  bool private initializing;\\n\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool wasInitializing = initializing;\\n    initializing = true;\\n    initialized = true;\\n\\n    _;\\n\\n    initializing = wasInitializing;\\n  }\\n\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    assembly { cs := extcodesize(address) }\\n    return cs == 0;\\n  }\\n\\n  uint256[50] private ______gap;\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./Initializable.sol\\u0027;\\n\\ncontract Ownable is Initializable {\\n\\n  address private _owner;\\n  uint256 private _ownershipLocked;\\n\\n  event OwnershipLocked(address lockedOwner);\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  function initialize(address sender) internal initializer {\\n    _owner = sender;\\n\\t_ownershipLocked = 0;\\n  }\\n\\n  function owner() public view returns(address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(isOwner());\\n    _;\\n  }\\n\\n  function isOwner() public view returns(bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  function _transferOwnership(address newOwner) internal {\\n    require(_ownershipLocked == 0);\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n\\n  // Set _ownershipLocked flag to lock contract owner forever\\n  function lockOwnership() public onlyOwner {\\n\\trequire(_ownershipLocked == 0);\\n\\temit OwnershipLocked(_owner);\\n    _ownershipLocked = 1;\\n  }\\n\\n  uint256[50] private ______gap;\\n}\"},\"RealEstate.sol\":{\"content\":\"\\npragma solidity ^0.5.17;\\n\\nimport \\u0027./Ownable.sol\\u0027;\\nimport \\u0027./ERC20Detailed.sol\\u0027;\\n\\ncontract RealEstate is Ownable, ERC20Detailed {\\n\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\tusing UInt256Lib for uint256;\\n\\n\\tstruct Transaction {\\n        bool enabled;\\n        address destination;\\n        bytes data;\\n    }\\n\\n\\n    event TransactionFailed(address indexed destination, uint index, bytes data);\\n\\n\\t// Stable ordering is not guaranteed.\\n\\n    Transaction[] public transactions;\\n\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(this));\\n        _;\\n    }\\n\\n    uint256 public constant DECIMALS = 10;\\n    uint256 public constant MAX_UINT256 = ~uint256(0);\\n    uint256 public constant INITIAL_SUPPLY = 20 * 10**4 * 10**DECIMALS;\\n    address public Distributor;\\n    mapping (address =\\u003e bool) public govs;\\n\\n    uint256 public _totalSupply;\\n    uint256 public _currentPrice;\\n    uint256 public _targetPrice;\\n    uint256 public _userLength;\\n    uint public _commission;\\n\\n    mapping(address =\\u003e uint256) public _updatedBalance;\\n\\tmapping(address =\\u003e bool) userStatus;\\n\\tmapping(uint =\\u003e address) public idByAddress;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public _allowance;\\n    event AddGovEmp(address account);\\n    event RemoveGovEmp(address account);\\n    \\n\\tconstructor() public {\\n\\n\\t\\tOwnable.initialize(msg.sender);\\n\\t\\tERC20Detailed.initialize(\\\"Real Estate Host\\\", \\\"REH\\\", uint8(DECIMALS));\\n\\n        _totalSupply = INITIAL_SUPPLY;\\n        _updatedBalance[msg.sender] = _totalSupply;\\n\\n        _userLength++;\\n        idByAddress[_userLength] = msg.sender;\\n        _commission = 8; // initial at 8% fee\\n        addGovEmp(msg.sender);\\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\\n    }\\n\\n    \\n    modifier onlyDistributor() {\\n        require(msg.sender == Distributor, \\\"Only Distributor\\\");\\n        _;\\n    }\\n\\n\\t/**\\n     * @return The total number of fragments.\\n     */\\n\\n    function totalSupply()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n    \\n\\t/**\\n     * @param who The address to query.\\n     * @return The balance of the specified address.\\n     */\\n\\n    function balanceOf(address who)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _updatedBalance[who];\\n    }\\n    \\n    /**\\n     * @param amount The amount to be transferred.\\n     * @return commission base (Government wont apply)\\n     */\\n    function commissionCalculate(uint256 amount) internal view returns(uint256){\\n        if (govs[msg.sender] == true) return 0;\\n        uint256 fee = amount.mul(_commission).div(100);\\n        return fee;\\n    }\\n    /**\\n     * Add and remove a Gov employee\\n     */ \\n    function addGovEmp(address account) public onlyOwner {\\n        govs[account] = true;\\n        emit AddGovEmp(account);\\n    }\\n\\n    function removeGovEmp(address account) public onlyOwner {\\n        govs[account] = false;\\n        emit RemoveGovEmp(account);\\n    }\\n    \\n\\t/**\\n     * @dev Transfer tokens to a specified address.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @return True on success, false otherwise.\\n     */\\n\\n    function transfer(address to, uint256 value)\\n        public\\n        validRecipient(to)\\n        returns (bool)\\n    {\\n        if(!userStatus[to]){\\n            userStatus[to] = true;\\n            _userLength++;\\n            idByAddress[_userLength] = to;\\n        }\\n        uint256 fee = commissionCalculate(value);\\n        uint256 receive = value - fee;\\n        _updatedBalance[msg.sender] = _updatedBalance[msg.sender].sub(value);\\n        _updatedBalance[to] = _updatedBalance[to].add(receive);\\n        updateSupplyDecreaseBy(fee);\\n\\n        emit Transfer(msg.sender, to, receive);\\n        emit Transfer(msg.sender, address(0x0), fee);\\n        return true;\\n    }\\n    \\n    function updateSupplyDecreaseBy(uint256 value) private{\\n        _totalSupply = _totalSupply - value;\\n    }\\n\\t/**\\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\\n     * @param owner_ The address which owns the funds.\\n     * @param spender The address which will spend the funds.\\n     * @return The number of tokens still available for the spender.\\n     */\\n\\n    function allowance(address owner_, address spender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _allowance[owner_][spender];\\n    }\\n\\n\\t/**\\n     * @dev Transfer tokens from one address to another.\\n     * @param from The address you want to send tokens from.\\n     * @param to The address you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        validRecipient(to)\\n        returns (bool)\\n    {\\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\\n\\n        if(!userStatus[to]){\\n            userStatus[to] = true;\\n            _userLength++;\\n             idByAddress[_userLength] = to;\\n        }\\n        uint256 fee = commissionCalculate(value);\\n        uint256 receive = value - fee;\\n        \\n        _updatedBalance[from] = _updatedBalance[from].sub(value);\\n        _updatedBalance[to] = _updatedBalance[to].add(receive);\\n        updateSupplyDecreaseBy(fee);\\n\\n        emit Transfer(from, to, value);\\n        emit Transfer(from, address(0x0), fee);\\n\\n        return true;\\n    }\\n\\n\\n\\t/**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\\n     * msg.sender. This method is included for ERC20 compatibility.\\n     * increaseAllowance and decreaseAllowance should be used instead.\\n     * Changing an allowance with this method brings the risk that someone may transfer both\\n     * the old and the new allowance - if they are both greater than zero - if a transfer\\n     * transaction is mined before the later approve() call is mined.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n\\n    function approve(address spender, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n\\t/**\\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\\n     * This method should be used instead of approve() to avoid the double approval vulnerability\\n     * described above.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n        return true;\\n    }\\n\\n\\t/**\\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowance[msg.sender][spender];\\n        if (subtractedValue \\u003e= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = oldValue.sub(subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function setTotalSupply(uint256 _supply) private onlyDistributor {\\n        _totalSupply = _supply;\\n    }\\n\\n    function setCommission(uint commission) public onlyDistributor{\\n        require(commission \\u003c= 8, \\\"commission cant exceed 8 percent.\\\");\\n        _commission = commission;\\n    }\\n    function setDistributor(address _Distributor) public onlyOwner {\\n        Distributor = _Distributor;\\n    }\\n\\n    function getUserLength() public view returns(uint256) {\\n        return _userLength;\\n    }\\n\\n    function getUserAddress(uint256 id) public view returns(address) {\\n        return idByAddress[id];\\n    }\\n\\n}\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary SafeMathInt {\\n\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\n\\n    function mul(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n        return c;\\n    }\\n\\n    function add(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n        return c;\\n    }\\n\\n    function abs(int256 a)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(a != MIN_INT256);\\n        return a \\u003c 0 ? -a : a;\\n    }\\n}\\n\\nlibrary UInt256Lib {\\n\\n    uint256 private constant MAX_INT256 = ~(uint256(1) \\u003c\\u003c 255);\\n\\n    /**\\n     * @dev Safely converts a uint256 to an int256.\\n     */\\n    function toInt256Safe(uint256 a)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(a \\u003c= MAX_INT256);\\n        return int256(a);\\n    }\\n}\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddGovEmp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveGovEmp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_targetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_userLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addGovEmp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeGovEmp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RealEstate","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bbb92387f5bff8cfd19966e7b199f8bfa5316f03b3d91416ecebb043ab876218"}]}