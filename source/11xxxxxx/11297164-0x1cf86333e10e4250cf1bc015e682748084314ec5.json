{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.10;\r\n// Example Code here\r\n// https://ropsten.etherscan.io/address/0x1578ad1d20bec0b356e2002f218468650b084b05#code\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Dispatcher {\r\n  using SafeMath for uint256;\r\n\r\n  IERC20 public token;\r\n  address payable public wallet;\r\n  uint256 public rate = 1469;\r\n  uint256 public startRate= 1469;\r\n  uint256 public trxnCount;\r\n  uint256 public weiRaised;\r\n  uint256 public minContribution =0.007 ether;\r\n  uint256 public maxContribution =1 ether;\r\n  bool lock;\r\n  event Bought(uint256 amount);\r\n  event Transfer(address _to, uint256 amount);\r\n  event TransferMultiple(address[] _receivers, uint256 amount);\r\n  event TotalBalance(address sender,uint256 vlue,uint256 balance);\r\n\r\n  modifier onlyOwner{\r\n      require(msg.sender==wallet);\r\n      _;\r\n  }\r\n  constructor(IERC20 _token) public {\r\n  \r\n    token =_token;\r\n  \r\n    wallet = msg.sender;\r\n    \r\n  }\r\n\r\n  receive() external payable {\r\n    require(msg.value >= minContribution && msg.value <= maxContribution, \"contribution out of range\");\r\n    (bool success,) = wallet.call{value:msg.value}(abi.encodeWithSignature(\"nonExistingFunction()\"));\r\n    require(success, \"can not transfer funds\");\r\n    weiRaised.add(msg.value);\r\n    buy(msg.sender);\r\n  }\r\n\r\nfunction buy(address _buyer) payable public {\r\n    require(!lock);\r\n    lock = true;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 amountTobuy = weiAmount.mul(rate);\r\n    uint256 dexBalance = token.balanceOf(address(this));\r\n    require(amountTobuy > 0, \"You need to send some ether\");\r\n    require(amountTobuy <= dexBalance, \"Not enough tokens in the reserve\");\r\n    token.transfer(_buyer, amountTobuy);\r\n    emit Bought(amountTobuy);\r\n    trxnCount++;\r\n    increaseRate();\r\n    lock=false;\r\n}\r\n\r\nfunction setRate(uint256 _rate, uint256 _startRate) public onlyOwner returns(uint256, uint256){\r\n    rate =_rate;\r\n    startRate =_startRate;\r\n    return (rate, startRate);\r\n}\r\nfunction setContributionRange(uint256 _min, uint256 _max) public onlyOwner returns(uint256, uint256){\r\n    minContribution =_min;\r\n    maxContribution =_max;\r\n    return (minContribution, maxContribution);\r\n}\r\n  \r\n  function withdrawEth() public onlyOwner{\r\n      uint256 balance = address(this).balance;\r\n    (bool success,)= wallet.call{value: balance}(\"\");\r\n    require(success);\r\n  }\r\n  \r\n   function depositEther(uint _amount) public payable {\r\n     _amount =msg.value;\r\n     address(this).balance+ msg.value;\r\n     emit TotalBalance(msg.sender, msg.value, address(this).balance);\r\n } \r\n  \r\n  \r\n  function getEthTokenBal() public view returns(uint256, uint256) {\r\n      return ( address(this).balance, token.balanceOf(address(this)));\r\n  }\r\n  \r\n  function withdrawToken() public onlyOwner{\r\n      uint256 bal=token.balanceOf(address(this));\r\n      token.transfer(wallet, bal);\r\n      emit Transfer(wallet, bal);\r\n  }\r\n  \r\n  function increaseRate() internal returns(uint256 ){\r\n      uint256 incrs = startRate.div(10);\r\n      trxnCount.mod(250)==0?rate = rate.sub(incrs): rate;\r\n  }\r\n  \r\n  function setToken(address _token)public onlyOwner{\r\n      require(token.balanceOf(address(this))==0, \"withdraw tokens\");\r\n      token= IERC20(_token);\r\n  }\r\n  \r\n  function burn()public onlyOwner{\r\n       uint256 bal=token.balanceOf(address(this));\r\n      token.transfer(address(0), bal);\r\n      emit Transfer(address(0), bal);\r\n  }\r\n  \r\n  function sendTokenToMany(address payable[] memory _receivers, uint256 amounteach) public onlyOwner {\r\n      uint256 len = _receivers.length;\r\n      for(uint256 i = 0; i<len; i++){\r\n          require(_receivers[i] != address(0), \"cannot credit zero acct\");\r\n          uint256 total = amounteach.mul(len);\r\n          uint256 available = token.balanceOf(address(this));\r\n          require(total<=available, \"Not enough tokens in the reserve\" );\r\n          token.transfer(_receivers[i], amounteach);\r\n          \r\n      }\r\n  }\r\n  \r\n  function sendEtherToMany(address payable[] memory _receivers, uint256 amounteach) public onlyOwner {\r\n      uint256 len = _receivers.length;\r\n      for(uint256 i = 0; i<len; i++){\r\n          require(_receivers[i] != address(0), \"cannot credit zero acct\");\r\n          uint256 total = amounteach.mul(len);\r\n          uint256 available = address(this).balance;\r\n          require(total<=available, \"Not enough tokens in the reserve\" );\r\n          _receivers[i].transfer(amounteach);\r\n    \r\n      }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vlue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TotalBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMultiple\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthTokenBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amounteach\",\"type\":\"uint256\"}],\"name\":\"sendEtherToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amounteach\",\"type\":\"uint256\"}],\"name\":\"sendTokenToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setContributionRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trxnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Dispatcher","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fe02a03d787c1e858ac7b2dc137fa9988c3fa192","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ac046b7777742d37d9cfa74ad1332b185ae9a857978572ea1b79e706d00d5d2f"}]}