{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.7.0;\npragma experimental ABIEncoderV2;\n\n\n\n// Part: BoostersStringUtils\n\nlibrary BoostersStringUtils {\n\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\n    /// @return a negative number if `_a` is smaller, zero if they are equal\n    /// and a positive numbe if `_b` is smaller.\n    function compare(string memory _a, string memory _b) internal pure returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    /// @dev Compares two strings and returns true iff they are equal.\n    function equal(string memory _a, string memory _b)  internal pure returns (bool) {\n        return compare(_a, _b) == 0;\n    }\n\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int) {\n    \tbytes memory h = bytes(_haystack);\n    \tbytes memory n = bytes(_needle);\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \n    \t\treturn -1;\n    \telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\n    \t\treturn -1;\t\t\t\t\t\t\t\t\t\n    \telse\n    \t{\n    \t\tuint subindex = 0;\n    \t\tfor (uint i = 0; i < h.length; i ++)\n    \t\t{\n    \t\t\tif (h[i] == n[0]) // found the first char of b\n    \t\t\t{\n    \t\t\t\tsubindex = 1;\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\n    \t\t\t\t{\n    \t\t\t\t\tsubindex++;\n    \t\t\t\t}\t\n    \t\t\t\tif(subindex == n.length)\n    \t\t\t\t\treturn int(i);\n    \t\t\t}\n    \t\t}\n    \t\treturn -1;\n    \t}\t\n    }\n}\n\n// Part: Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: IERC721Receiver\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\n// Part: ISIGHBoosters\n\ninterface ISIGHBoosters {\n\n    // ########################\n    // ######## EVENTS ########\n    // ########################\n\n    event baseURIUpdated(string baseURI);\n    event newCategoryAdded(string _type, uint256 _platformFeeDiscount_, uint256 _sighPayDiscount_, uint256 _maxBoosters);\n    event BoosterMinted(address _owner, string _type,string boosterURI,uint256 newItemId,uint256 totalBoostersOfThisCategory);\n    event boosterURIUpdated(uint256 boosterId, string _boosterURI);\n    event discountMultiplierUpdated(string _type,uint256 _platformFeeDiscount_,uint256 _sighPayDiscount_ );\n\n    event BoosterWhiteListed(uint256 boosterId);\n    event BoosterBlackListed(uint256 boosterId);\n\n    // #################################\n    // ######## ADMIN FUNCTIONS ########\n    // #################################\n    \n    function addNewBoosterType(string memory _type, uint256 _platformFeeDiscount_, uint256 _sighPayDiscount_, uint256 _maxBoosters) external returns (bool) ;\n    function createNewBoosters(address _owner, string[] memory _type,  string[] memory boosterURI) external returns (uint256);\n    function createNewSIGHBooster(address _owner, string memory _type,  string memory boosterURI, bytes memory _data ) external returns (uint256) ;\n    function _updateBaseURI(string memory baseURI )  external ;\n    function updateBoosterURI(uint256 boosterId, string memory boosterURI )  external returns (bool) ;\n    function updateDiscountMultiplier(string memory _type, uint256 _platformFeeDiscount_,uint256 _sighPayDiscount_)  external returns (bool) ;\n\n    function blackListBooster(uint256 boosterId) external;\n    function whiteListBooster(uint256 boosterId) external;\n    // ###########################################\n    // ######## STANDARD ERC721 FUNCTIONS ########\n    // ###########################################\n\n    function name() external view  returns (string memory) ;\n    function symbol() external view  returns (string memory) ;\n    function totalSupply() external view  returns (uint256) ;\n    function baseURI() external view returns (string memory) ;\n\n    function tokenByIndex(uint256 index) external view  returns (uint256) ;\n\n    function balanceOf(address _owner) external view returns (uint256 balance) ;    // Returns total number of Boosters owned by the _owner\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view  returns (uint256) ; //  See {IERC721Enumerable-tokenOfOwnerByIndex}.\n\n    function ownerOfBooster(uint256 boosterId) external view returns (address owner) ; // Returns current owner of the Booster having the ID = boosterId\n    function tokenURI(uint256 boosterId) external view  returns (string memory) ;   // Returns the boostURI for the Booster\n\n    function approve(address to, uint256 boosterId) external ;  // A BOOSTER owner can approve anyone to be able to transfer the underlying booster\n    function setApprovalForAll(address operator, bool _approved) external;\n\n\n    function getApproved(uint256 boosterId) external view  returns (address);   // Returns the Address currently approved for the Booster with ID = boosterId\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    function transferFrom(address from, address to, uint256 boosterId) external;\n    function safeTransferFrom(address from, address to, uint256 boosterId) external;\n    function safeTransferFrom(address from, address to, uint256 boosterId, bytes memory data) external;\n\n    // #############################################################\n    // ######## FUNCTIONS SPECIFIC TO SIGH FINANCE BOOSTERS ########\n    // #############################################################\n\n    function getAllBoosterTypes() external view returns (string[] memory);\n\n    function isCategorySupported(string memory _category) external view returns (bool);\n    function getDiscountRatiosForBoosterCategory(string memory _category) external view returns ( uint platformFeeDiscount, uint sighPayDiscount );\n\n    function totalBoostersAvailable(string memory _category) external view returns (uint256);\n    function maxBoostersAllowed(string memory _category) external view returns (uint256);\n\n    function totalBoostersOwnedOfType(address owner, string memory _category) external view returns (uint256) ;  // Returns the number of Boosters of a particular category owned by the owner address\n\n    function isValidBooster(uint256 boosterId) external view returns (bool);\n    function getBoosterCategory(uint256 boosterId) external view returns ( string memory boosterType );\n    function getDiscountRatiosForBooster(uint256 boosterId) external view returns ( uint platformFeeDiscount, uint sighPayDiscount );\n    function getBoosterInfo(uint256 boosterId) external view returns (address farmer, string memory boosterType,uint platformFeeDiscount, uint sighPayDiscount, uint _maxBoosters );\n\n    function isBlacklisted(uint boosterId) external view returns(bool) ;\n//     function getAllBoosterTypesSupported() external view returns (string[] memory) ;\n\n}\n\n// Part: ISIGHBoostersSale\n\ninterface ISIGHBoostersSale {\n\n    event BoosterAddedForSale(string _type,uint boosterid);\n    event SalePriceUpdated(string _type,uint _price);\n    event PaymentTokenUpdated(address token);\n    event FundsTransferred(uint amount);\n    event TokensTransferred(address token,address to,uint amount);\n    event SaleTimeUpdated(uint initiateTimestamp);\n    event BoosterSold(address _to, string _BoosterType,uint _boosterId, uint salePrice );\n    event BoostersBought(address caller,address receiver,string _BoosterType,uint boostersBought,uint amountToBePaid);\n    event BoosterAdded(address operator,address from,uint tokenId);\n\n    // #################################\n    // ######## ADMIN FUNCTIONS ########\n    // #################################\n\n    // Add a list of Boosters for sale at a particular price\n//    function addBoostersForSale(string calldata _BoosterType, uint[] memory boosterIds) external;\n\n    // Update the sale price for a particular type of Boosters\n    function updateSalePrice(string calldata _BoosterType, uint256 _price ) external;\n\n    // Update the token accepted as payment\n    function updateAcceptedToken(address token) external;\n\n    // Transfer part of the the token collected for payments to the 'to' address\n    function transferBalance(address to, uint amount) external;\n\n    // Updates time when the Booster sale will go live\n    function updateSaleTime(uint timestamp) external;\n\n    function transferTokens(address token, address to, uint amount) external ;\n    // ##########################################\n    // ######## FUNCTION TO BY BOOSTERS  ########\n    // ##########################################\n\n    // Buy the 'boostersToBuy' no. of Boosters for the '_BoosterType' type of boosters\n    function buyBoosters(address receiver, string memory _BoosterType, uint boostersToBuy) external;\n\n    // #########################################\n    // ######## EXTERNAL VIEW FUNCTIONS ########\n    // #########################################\n\n    // Get the current available no. of boosters, its price and total sold for the provided Booster category\n    function getBoosterSaleDetails(string memory _Boostertype) external view returns (uint256 available,uint256 price, uint256 sold);\n\n    // Get the symbol and address of the token accepted for payments\n    function getTokenAccepted() external view returns(string memory symbol, address tokenAddress);\n\n    // Get current balance of the token accepted for payments.\n    function getCurrentFundsBalance() external view returns (uint256);\n\n    function getTokenBalance(address token) external view returns (uint256) ;\n\n}\n\n// Part: SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: ERC20\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// Part: Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: SIGHBoostersSale.sol\n\ncontract SIGHBoostersSale is IERC721Receiver,Ownable,ISIGHBoostersSale {\n\n    using BoostersStringUtils for string;\n    using SafeMath for uint256;\n\n    ISIGHBoosters private _SIGH_NFT_BoostersContract;    // SIGH Finance NFT Boosters Contract\n    uint public initiateTimestamp;\n\n    ERC20 private tokenAcceptedAsPayment;         // Address of token accepted as payment\n\n    struct boosterList {\n        uint256 totalAvailable;             // No. of Boosters of a particular type currently available for sale\n        uint256[] boosterIdsList;          // List of BoosterIds for the boosters of a particular type currently available for sale\n        uint256 salePrice;                  // Sale price for a particular type of Booster\n        uint256 totalBoostersSold;           // Boosters sold\n    }\n\n    mapping (string => boosterList) private listOfBoosters;   // (Booster Type => boosterList struct)\n    mapping (uint256 => bool) private boosterIdsForSale;      // Booster Ids that have been included for sale\n    mapping (string => bool) private boosterTypes;            // Booster Type => Yes/No\n\n    constructor(address _SIGHNFTBoostersContract) {\n        require(_SIGHNFTBoostersContract != address(0),'SIGH Finance : Invalid _SIGHNFTBoostersContract address');\n        _SIGH_NFT_BoostersContract = ISIGHBoosters(_SIGHNFTBoostersContract);\n    }\n\n    // #################################\n    // ######## ADMIN FUNCTIONS ########\n    // #################################\n\n//    function addBoostersForSale(uint256[] memory boosterids) external override onlyOwner {\n//\n//        for (uint i; i < boosterids.length; i++ ) {\n//            addBoosterForSaleInternal(boosterids[i]);\n//        }\n//    }\n\n    // Updates the Sale price for '_BoosterType' type of Boosters. Only owner can call this function\n    function updateSalePrice(string memory _BoosterType, uint256 _price ) external override onlyOwner {\n        require( _SIGH_NFT_BoostersContract.isCategorySupported(_BoosterType),\"Invalid Type\");\n        require( boosterTypes[_BoosterType] ,\"Not yet initialized\");\n        listOfBoosters[_BoosterType].salePrice = _price;\n        emit SalePriceUpdated(_BoosterType,_price);\n    }\n\n    // Update the token accepted as payment\n    function updateAcceptedToken(address token) external override onlyOwner {\n        require( token != address(0) ,\"Invalid address\");\n        tokenAcceptedAsPayment = ERC20(token);\n        emit PaymentTokenUpdated(token);\n    }\n\n    // Transfers part of the collected Funds to the 'to' address . Only owner can call this function\n    function transferBalance(address to, uint amount) external override onlyOwner {\n        require( to != address(0) ,\"Invalid address\");\n        require( amount <= getCurrentFundsBalance() ,\"Invalid amount\");\n        tokenAcceptedAsPayment.transfer(to,amount);\n        emit FundsTransferred(amount);\n    }\n\n    // Updates time when the Booster sale will go live\n    function updateSaleTime(uint timestamp) external override onlyOwner {\n        require( block.timestamp < timestamp,'Invalid stamp');\n        initiateTimestamp = timestamp;\n        emit SaleTimeUpdated(initiateTimestamp);\n    }\n\n    // Transfers part of the collected DAI to the 'to' address . Only owner can call this function\n    function transferTokens(address token, address to, uint amount) external override onlyOwner {\n        require( to != address(0) ,\"Invalid address\");\n        ERC20 token_ = ERC20(token);\n        uint balance = token_.balanceOf(address(this));\n        require( amount <= balance ,\"Invalid amount\");\n        token_.transfer(to,amount);\n        emit TokensTransferred(token,to,amount);\n    }\n\n    // ###########################################\n    // ######## FUNCTION TO BUY A BOOSTER ########\n    // ###########################################\n\n    function buyBoosters(address receiver, string memory _BoosterType, uint boostersToBuy) override external {\n        require( block.timestamp > initiateTimestamp,'Sale not begin');\n        require(listOfBoosters[_BoosterType].salePrice > 0 ,\"Price cannot be Zero\");\n        require(boosterTypes[_BoosterType],\"Invalid Booster Type\");\n        require(boostersToBuy >= 1,\"Invalid number of boosters\");\n        require(listOfBoosters[_BoosterType].totalAvailable >=  boostersToBuy,\"Boosters not available\");\n\n        uint amountToBePaid = boostersToBuy.mul(listOfBoosters[_BoosterType].salePrice);\n\n        require(transferFunds(msg.sender,amountToBePaid),'Funds transfer Failed');\n        require(transferBoosters(receiver, _BoosterType, boostersToBuy),'Boosters transfer Failed');\n\n        emit BoostersBought(msg.sender,receiver,_BoosterType,boostersToBuy,amountToBePaid);\n    }\n\n\n    // #########################################\n    // ######## EXTERNAL VIEW FUNCTIONS ########\n    // #########################################\n\n    function getBoosterSaleDetails(string memory _Boostertype) external view override returns (uint256 available,uint256 price, uint256 sold) {\n        require( _SIGH_NFT_BoostersContract.isCategorySupported(_Boostertype),\"SIGH Finance : Not a valid Booster Type\");\n        available = listOfBoosters[_Boostertype].totalAvailable;\n        price = listOfBoosters[_Boostertype].salePrice;\n        sold = listOfBoosters[_Boostertype].totalBoostersSold;\n    }\n\n    function getTokenAccepted() public view override returns(string memory symbol, address tokenAddress) {\n        require( address(tokenAcceptedAsPayment) != address(0) );\n        symbol = tokenAcceptedAsPayment.symbol();\n        tokenAddress = address(tokenAcceptedAsPayment);\n    }\n\n    function getCurrentFundsBalance() public view override returns (uint256) {\n        require( address(tokenAcceptedAsPayment) != address(0) );\n        return tokenAcceptedAsPayment.balanceOf(address(this));\n    }\n\n    function getTokenBalance(address token) public view override returns (uint256) {\n        require( token != address(0) );\n        ERC20 token_ = ERC20(token);\n        uint balance = token_.balanceOf(address(this));\n        return balance;\n    }\n\n    // ####################################\n    // ######## INTERNAL FUNCTIONS ########\n    // ####################################\n\n    function addBoosterForSaleInternal(uint256 boosterId) internal {\n        require( !boosterIdsForSale[boosterId], \"Already Added\");\n        ( , string memory _BoosterType, , ,) = _SIGH_NFT_BoostersContract.getBoosterInfo(boosterId);\n\n        if (!boosterTypes[_BoosterType]) {\n            boosterTypes[_BoosterType] = true;\n        }\n\n        listOfBoosters[_BoosterType].boosterIdsList.push( boosterId ); // ADDED the boosterID to the list of Boosters available for sale\n        listOfBoosters[_BoosterType].totalAvailable = listOfBoosters[_BoosterType].totalAvailable.add(1); // Incremented total available by 1\n        boosterIdsForSale[boosterId] = true;\n        require( _SIGH_NFT_BoostersContract.ownerOfBooster(boosterId) == address(this) ); // ONLY SIGH BOOSTERS CAN BE SENT TO THIS CONTRACT\n\n        emit BoosterAddedForSale(_BoosterType , boosterId);\n    }\n\n    // Transfers 'totalBoosters' number of BOOSTERS of type '_BoosterType' to the 'to' address\n    function transferBoosters(address to, string memory _BoosterType, uint totalBoosters) internal returns (bool) {\n        uint listLength = listOfBoosters[_BoosterType].boosterIdsList.length;\n\n        for (uint i=0; i < totalBoosters; i++ ) {\n            uint256 _boosterId = listOfBoosters[_BoosterType].boosterIdsList[0];  // current BoosterID\n\n            if (boosterIdsForSale[_boosterId]) {\n                // Transfer the Booster and Verify the same\n                _SIGH_NFT_BoostersContract.safeTransferFrom(address(this),to,_boosterId);\n                require(to == _SIGH_NFT_BoostersContract.ownerOfBooster(_boosterId),\"Booster Transfer failed\");\n\n                // Remove the Booster ID\n                listOfBoosters[_BoosterType].boosterIdsList[0] = listOfBoosters[_BoosterType].boosterIdsList[listLength.sub(1)];\n                listOfBoosters[_BoosterType].boosterIdsList.pop();\n                listLength = listLength.sub(1);\n\n                // Update the number of boosters available & sold\n                listOfBoosters[_BoosterType].totalAvailable = listOfBoosters[_BoosterType].totalAvailable.sub(1);\n                listOfBoosters[_BoosterType].totalBoostersSold = listOfBoosters[_BoosterType].totalBoostersSold.add(1);\n\n                // Mark the BoosterID as sold and update the counter\n                boosterIdsForSale[_boosterId] = false;\n\n                emit BoosterSold(to, _BoosterType, _boosterId, listOfBoosters[_BoosterType].salePrice );\n            }\n        }\n        return true;\n    }\n\n    // Transfers 'amount' of DAI to the contract\n    function transferFunds(address from, uint amount) internal returns (bool) {\n        uint prevBalance = tokenAcceptedAsPayment.balanceOf(address(this));\n        tokenAcceptedAsPayment.transferFrom(from,address(this),amount);\n        uint newBalance = tokenAcceptedAsPayment.balanceOf(address(this));\n        require(newBalance == prevBalance.add(amount),'Funds Transfer failed');\n        return true;\n    }\n\n    // ############################################\n    // ######## onERC721Received FUNCTIONS ########\n    // ############################################\n\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory _data) public virtual override returns (bytes4) {\n        addBoosterForSaleInternal(tokenId);\n        emit BoosterAdded(operator,from,tokenId);\n        return this.onERC721Received.selector;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SIGHNFTBoostersContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BoosterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boosterid\",\"type\":\"uint256\"}],\"name\":\"BoosterAddedForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_BoosterType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_boosterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"BoosterSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_BoosterType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostersBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToBePaid\",\"type\":\"uint256\"}],\"name\":\"BoostersBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SalePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiateTimestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_BoosterType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"boostersToBuy\",\"type\":\"uint256\"}],\"name\":\"buyBoosters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Boostertype\",\"type\":\"string\"}],\"name\":\"getBoosterSaleDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccepted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateAcceptedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_BoosterType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SIGHBoostersSale","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000069c045c325482a28f06e7f2fc1c02a1aab81a68","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}