{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/meta/nk/open-staking/contracts/staking/IFestakeRewardManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Ferrum Staking interface for adding reward\\n */\\ninterface IFestakeRewardManager {\\n    /**\\n     * @dev legacy add reward. To be used by contract support time limitted rewards.\\n     */\\n    function addReward(uint256 rewardAmount) external returns (bool);\\n\\n    /**\\n     * @dev withdraw rewards for the user.\\n     * The only option is to withdraw all rewards is one go.\\n     */\\n    function withdrawRewards() external returns (uint256);\\n\\n    /**\\n     * @dev marginal rewards is to be used by contracts supporting ongoing rewards.\\n     * Send the reward to the contract address first.\\n     */\\n    function addMarginalReward() external returns (bool);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function rewardsTotal() external view returns (uint256);\\n\\n    /**\\n     * @dev returns current rewards for an address\\n     */\\n    function rewardOf(address addr) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/home/meta/nk/open-staking/contracts/staking/RewardDistributor.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IFestakeRewardManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IRewardDistributor {\\n    function rollAndGetDistributionAddress(address addressForRandom) external view returns(address);\\n    function updateRewards(address target) external returns(bool);\\n}\\n\\ncontract RewardDistributor is Ownable, IRewardDistributor {\\n    struct RewardPools {\\n        bytes pools;\\n    }\\n    RewardPools rewardPools;\\n    address[] rewardReceivers;\\n\\n    function addNewPool(address pool)\\n    onlyOwner()\\n    external returns(bool) {\\n        require(pool != address(0), \\\"RewardD: Zero address\\\");\\n        require(rewardReceivers.length < 30, \\\"RewardD: Max no of pools reached\\\");\\n        IFestakeRewardManager manager = IFestakeRewardManager(pool);\\n        require(address(manager.rewardToken()) != address(0), \\\"RewardD: No reward address was provided\\\");\\n        rewardReceivers.push(pool);\\n        IFestakeRewardManager firstManager = IFestakeRewardManager(rewardReceivers[0]);\\n        require(firstManager.rewardToken() == manager.rewardToken(),\\n            \\\"RewardD: Reward token inconsistent with current pools\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * poolRatio is used for a gas efficient round-robbin distribution of rewards.\\n     * Pack a number of uint8s in poolRatios. Maximum number of pools is 14.\\n     * Sum of ratios must add to 100.\\n     */\\n    function updateRewardDistributionForPools(bytes calldata poolRatios)\\n    onlyOwner()\\n    external returns (bool) {\\n        uint sum = 0;\\n        uint len = rewardReceivers.length;\\n        for (uint i = 0; i < len; i++) {\\n            sum = toUint8(poolRatios, i) + sum;\\n        }\\n        require(sum == 100, \\\"ReardD: ratios must add to 100\\\");\\n        rewardPools.pools = poolRatios;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev be carefull. Randomly chooses a pool using round robbin.\\n     * Assuming the transaction sizes are randomly distributed, each pool gets\\n     * the right share of rewards in aggregate.\\n     * Sacrificing accuracy for reduction in gas for each transaction.\\n     */\\n    function rollAndGetDistributionAddress(address addressForRandom)\\n    external override view returns(address) {\\n        require(addressForRandom != address(0) , \\\"RewardD: address cannot be 0\\\");\\n        uint256 rand = block.timestamp * (block.difficulty == 0 ? 1 : block.difficulty) *\\n             (uint256(addressForRandom) >> 128) * 31 % 100;\\n        uint sum = 0;\\n        bytes memory poolRatios = rewardPools.pools;\\n        uint256 len = rewardReceivers.length;\\n        for (uint i = 0; i < len && i < poolRatios.length; i++) {\\n            uint poolRatio = toUint8(poolRatios, i);\\n            sum += poolRatio;\\n            if (sum >= rand && poolRatio != 0 ) {\\n                return rewardReceivers[i];\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    function updateRewards(address target) external override returns(bool) {\\n        IFestakeRewardManager manager = IFestakeRewardManager(target);\\n        return manager.addMarginalReward();\\n    }\\n\\n    function bytes32ToBytes(bytes32 _bytes32) private pure returns (bytes memory) {\\n        bytes memory bytesArray = new bytes(32);\\n        for (uint256 i; i < 32; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return bytesArray;\\n    }\\n\\n    function toByte32(bytes memory _bytes)\\n    private pure returns (bytes32) {\\n        bytes32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), 0))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n    private pure returns (uint8) {\\n        require(_start + 1 >= _start, \\\"toUint8_overflow\\\");\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\"\r\n    },\r\n    \"/home/meta/nk/open-staking/contracts/token/TaxDistributor.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../staking/RewardDistributor.sol\\\";\\n\\ninterface IERC20Burnable {\\n    function burn(uint256 amount) external;\\n}\\n\\ninterface ITaxDistributor {\\n    function distributeTax(address token) external returns(bool);\\n}\\n\\ncontract TaxDistributor is ITaxDistributor, Ownable {\\n    using SafeMath for uint256;\\n    struct Distribution {\\n        uint8 stake;\\n        uint8 burn;\\n        uint8 future;\\n        uint8 dev;\\n    }\\n\\n    Distribution distribution;\\n    IRewardDistributor rewardDistributor;\\n    address devAddress;\\n    address futureAddress;\\n\\n    function setRewardDistributor(address _rewardDistributor)\\n    onlyOwner()\\n    external returns(bool) {\\n        IRewardDistributor rd = IRewardDistributor(_rewardDistributor);\\n        address someAddress = rd.rollAndGetDistributionAddress(msg.sender);\\n        require(someAddress != address(0), \\\"StakeDevBurnTaxable: Bad reward distributor\\\");\\n        rewardDistributor = rd;\\n        return true;\\n    }\\n\\n    function setDevAddress(address _devAddress)\\n    onlyOwner()\\n    external returns(bool) {\\n        devAddress = _devAddress; // Allow 0\\n        return true;\\n    }\\n\\n    function setFutureAddress(address _futureAddress)\\n    onlyOwner()\\n    external returns(bool) {\\n        futureAddress = _futureAddress; // Allow 0\\n        return true;\\n    }\\n\\n    function setDefaultDistribution(uint8 stake, uint8 burn, uint8 dev, uint8 future)\\n    onlyOwner()\\n    external returns(bool) {\\n        require(stake+burn+dev+future == 100, \\\"StakeDevBurnTaxable: taxes must add to 100\\\");\\n        distribution = Distribution({ stake: stake, burn: burn, dev: dev, future: future });\\n    }\\n\\n    /**\\n     * @dev Can be called by anybody, but make this contract is tax exempt.\\n     */\\n    function distributeTax(address token) external override returns(bool) {\\n        IERC20 _token = IERC20(token);\\n        return _distributeTax(_token, _token.balanceOf(address(this)));\\n    }\\n\\n    function _distributeTax(IERC20 token, uint256 amount) internal returns(bool) {\\n        Distribution memory dist = distribution;\\n        uint256 remaining = amount;\\n        if (dist.burn != 0) {\\n            uint256 burnAmount = amount.mul(dist.burn).div(100);\\n            if (burnAmount != 0) {\\n                IERC20Burnable(address(token)).burn(burnAmount);\\n                remaining = remaining.sub(burnAmount);\\n            }\\n        }\\n        if (dist.dev != 0) {\\n            uint256 devAmount = amount.mul(dist.dev).div(100);\\n            if (devAmount != 0) {\\n                token.transfer(devAddress, devAmount);\\n                remaining = remaining.sub(devAmount);\\n            }\\n        }\\n        if (dist.future != 0) {\\n            uint256 futureAmount = amount.mul(dist.future).div(100);\\n            if (futureAmount != 0) {\\n                token.transfer(futureAddress, futureAmount);\\n                remaining = remaining.sub(futureAmount);\\n            }\\n        }\\n        if (dist.stake != 0) {\\n            uint256 stakeAmount = remaining;\\n            address stakeAddress = rewardDistributor.rollAndGetDistributionAddress(msg.sender);\\n            if (stakeAddress != address(0)) {\\n                token.transfer(stakeAddress, stakeAmount);\\n                bool res = rewardDistributor.updateRewards(stakeAddress);\\n                require(res, \\\"StakeDevBurnTaxable: Error staking rewards\\\");\\n            }\\n        }\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"future\",\"type\":\"uint8\"}],\"name\":\"setDefaultDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureAddress\",\"type\":\"address\"}],\"name\":\"setFutureAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"name\":\"setRewardDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TaxDistributor","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}