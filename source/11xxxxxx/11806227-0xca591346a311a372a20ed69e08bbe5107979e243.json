{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/staking/StakingRewardsAdapterRegistry.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/// @notice The stakingRewardsAdapter registry database for Furucombo\r\ncontract StakingRewardsAdapterRegistry is Ownable {\r\n    mapping(address => bytes32) public adapters;\r\n\r\n    bytes32 constant DEPRECATED = bytes10(0x64657072656361746564);\r\n\r\n    /**\r\n     * @notice Transfer ownership to tx.origin since we are\r\n     * using a create2 factory to deploy contract, and the\r\n     * owner will be the factory if we do not transfer.\r\n     * Ref: https://eips.ethereum.org/EIPS/eip-2470\r\n     */\r\n    constructor() public {\r\n        transferOwnership(tx.origin);\r\n    }\r\n\r\n    /**\r\n     * @notice Register an adapter with a bytes32 information.\r\n     * @param registration Adapter address.\r\n     * @param info Info string.\r\n     */\r\n    function register(address registration, bytes32 info) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(adapters[registration] == bytes32(0), \"registered\");\r\n        adapters[registration] = info;\r\n    }\r\n\r\n    /**\r\n     * @notice Unregister an adapter. The adapter will be deprecated.\r\n     * @param registration The adapter to be unregistered.\r\n     */\r\n    function unregister(address registration) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(adapters[registration] != bytes32(0), \"no registration\");\r\n        require(adapters[registration] != DEPRECATED, \"unregistered\");\r\n        adapters[registration] = DEPRECATED;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the info of a valid adapter.\r\n     * @param adapter The adapter to be updating info.\r\n     * @param info New info to be updated.\r\n     */\r\n    function updateInfo(address adapter, bytes32 info) external onlyOwner {\r\n        require(adapter != address(0), \"zero address\");\r\n        require(info != bytes32(0), \"update info to 0 is prohibited\");\r\n        require(adapters[adapter] != bytes32(0), \"no registration\");\r\n        require(adapters[adapter] != DEPRECATED, \"unregistered\");\r\n        adapters[adapter] = info;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the adapter is valid.\r\n     * @param adapter The adapter to be verified.\r\n     */\r\n    function isValid(address adapter) external view returns (bool result) {\r\n        if (adapters[adapter] == 0 || adapters[adapter] == DEPRECATED)\r\n            return false;\r\n        else return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the information of a registration.\r\n     * @param adapter The adapter address to be queried.\r\n     */\r\n    function getInfo(address adapter) external view returns (bytes32 info) {\r\n        return adapters[adapter];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"updateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingRewardsAdapterRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67e5d2790373c6a766abb555ae0601247ffed6fb7d23dc10a331bf50c49eea9d"}]}