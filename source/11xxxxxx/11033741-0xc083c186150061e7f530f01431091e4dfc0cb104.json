{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries2/UniswapV2Library.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\nlibrary UniswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries2/TransferHelper.sol\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Router01.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n// import 'contracts/interfaces/IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IWETH.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// Root file: contracts/UniswapV2AddLiquidityHelperV1_1.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"contracts/libraries2/UniswapV2Library.sol\";\r\n// import \"contracts/libraries2/TransferHelper.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Router02.sol\";\r\n// import \"contracts/interfaces/IWETH.sol\";\r\n\r\n/// @author Roger Wu (Twitter: @rogerwutw, GitHub: Roger-Wu)\r\n// updates from V1:\r\n// * use binary search to find amountAToSwap, which fix ETH-USDT and ETH-USDC tx failure problem and saves gas\r\n// * remove deadline to save gas\r\n// * make _receiveToken inline to save gas\r\n// * make _swapToSyncRatio inline to save gas\r\n// * remove 1 _approveTokenToRouterIfNecessary call to save gas.\r\n// * replace SafeERC20 with TransferHelper to save gas.\r\n// * remove _approveTokenToRouterIfNecessary to save gas.\r\n// * replace some public with external\r\n// total gas saving: ~28852\r\ncontract UniswapV2AddLiquidityHelperV1_1 is Ownable {\r\n    // using SafeMath for uint;\r\n    // using SafeERC20 for IERC20;\r\n\r\n    address public immutable _uniswapV2FactoryAddress; // 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    address public immutable _uniswapV2Router02Address; // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    address public immutable _wethAddress; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\n    constructor(\r\n        address uniswapV2FactoryAddress,\r\n        address uniswapV2Router02Address,\r\n        address wethAddress\r\n    ) public {\r\n        _uniswapV2FactoryAddress = uniswapV2FactoryAddress;\r\n        _uniswapV2Router02Address = uniswapV2Router02Address;\r\n        _wethAddress = wethAddress;\r\n    }\r\n\r\n    // fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    // Add as more tokenA and tokenB as possible to a Uniswap pair.\r\n    // The ratio between tokenA and tokenB can be any.\r\n    // Approve enough amount of tokenA and tokenB to this contract before calling this function.\r\n    // Uniswap pair tokenA-tokenB must exist.\r\n    function swapAndAddLiquidityTokenAndToken(\r\n        address tokenAddressA,\r\n        address tokenAddressB,\r\n        uint112 amountA,\r\n        uint112 amountB,\r\n        uint112 minLiquidityOut,\r\n        address to\r\n    ) external returns(uint liquidity) {\r\n        require(amountA > 0 || amountB > 0, \"amounts can not be both 0\");\r\n\r\n        // transfer user's tokens to this contract\r\n        if (amountA > 0) {\r\n            // _receiveToken(tokenAddressA, amountA);\r\n            TransferHelper.safeTransferFrom(tokenAddressA, msg.sender, address(this), uint(amountA));\r\n        }\r\n        if (amountB > 0) {\r\n            // _receiveToken(tokenAddressB, amountB);\r\n            TransferHelper.safeTransferFrom(tokenAddressB, msg.sender, address(this), uint(amountB));\r\n        }\r\n\r\n        return _swapAndAddLiquidity(\r\n            tokenAddressA,\r\n            tokenAddressB,\r\n            uint(amountA),\r\n            uint(amountB),\r\n            uint(minLiquidityOut),\r\n            to\r\n        );\r\n    }\r\n\r\n    // Add as more ether and tokenB as possible to a Uniswap pair.\r\n    // The ratio between ether and tokenB can be any.\r\n    // Approve enough amount of tokenB to this contract before calling this function.\r\n    // Uniswap pair WETH-tokenB must exist.\r\n    function swapAndAddLiquidityEthAndToken(\r\n        address tokenAddressB,\r\n        uint112 amountB,\r\n        uint112 minLiquidityOut,\r\n        address to\r\n    ) external payable returns(uint liquidity) {\r\n        uint amountA = msg.value;\r\n        address tokenAddressA = _wethAddress;\r\n\r\n        require(amountA > 0 || amountB > 0, \"amounts can not be both 0\");\r\n\r\n        // convert ETH to WETH\r\n        IWETH(_wethAddress).deposit{value: amountA}();\r\n        // transfer user's tokenB to this contract\r\n        if (amountB > 0) {\r\n            // _receiveToken(tokenAddressB, amountB);\r\n            TransferHelper.safeTransferFrom(tokenAddressB, msg.sender, address(this), uint(amountB));\r\n        }\r\n\r\n        return _swapAndAddLiquidity(\r\n            tokenAddressA,\r\n            tokenAddressB,\r\n            amountA,\r\n            uint(amountB),\r\n            uint(minLiquidityOut),\r\n            to\r\n        );\r\n    }\r\n\r\n    // add as more tokens as possible to a Uniswap pair\r\n    function _swapAndAddLiquidity(\r\n        address tokenAddressA,\r\n        address tokenAddressB,\r\n        uint amountA,\r\n        uint amountB,\r\n        uint minLiquidityOut,\r\n        address to\r\n    ) internal returns(uint liquidity) {\r\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(_uniswapV2FactoryAddress, tokenAddressA, tokenAddressB);\r\n\r\n        // Swap tokenA and tokenB s.t. amountA / reserveA >= amountB / reserveB\r\n        // (or amountA * reserveB >= reserveA * amountB)\r\n        // which means we will swap part of tokenA to tokenB before adding liquidity.\r\n        if (amountA * reserveB < reserveA * amountB) {\r\n            (tokenAddressA, tokenAddressB) = (tokenAddressB, tokenAddressA);\r\n            (reserveA, reserveB) = (reserveB, reserveA);\r\n            (amountA, amountB) = (amountB, amountA);\r\n        }\r\n        uint amountAToAdd = amountA;\r\n        uint amountBToAdd = amountB;\r\n        // _approveTokenToRouterIfNecessary(tokenAddressA, amountA);\r\n        if (IERC20(tokenAddressA).allowance(address(this), _uniswapV2Router02Address) < amountA) {\r\n            TransferHelper.safeApprove(tokenAddressA, _uniswapV2Router02Address, 2**256 - 1);\r\n        }\r\n\r\n        uint amountAToSwap = calcAmountAToSwap(reserveA, reserveB, amountA, amountB);\r\n        require(amountAToSwap <= amountA, \"bugs in calcAmountAToSwap cause amountAToSwap > amountA\");\r\n        if (amountAToSwap > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokenAddressA;\r\n            path[1] = tokenAddressB;\r\n\r\n            uint[] memory swapOutAmounts = IUniswapV2Router02(_uniswapV2Router02Address).swapExactTokensForTokens(\r\n                amountAToSwap, // uint amountIn,\r\n                1, // uint amountOutMin,\r\n                path, // address[] calldata path,\r\n                address(this), // address to,\r\n                2**256-1 // uint deadline\r\n            );\r\n\r\n            amountAToAdd -= amountAToSwap;\r\n            amountBToAdd += swapOutAmounts[swapOutAmounts.length - 1];\r\n        }\r\n\r\n        // _approveTokenToRouterIfNecessary(tokenAddressB, amountBToAdd);\r\n        if (IERC20(tokenAddressB).allowance(address(this), _uniswapV2Router02Address) < amountBToAdd) {\r\n            TransferHelper.safeApprove(tokenAddressB, _uniswapV2Router02Address, 2**256 - 1);\r\n        }\r\n        (, , liquidity) = IUniswapV2Router02(_uniswapV2Router02Address).addLiquidity(\r\n            tokenAddressA, // address tokenA,\r\n            tokenAddressB, // address tokenB,\r\n            amountAToAdd, // uint amountADesired,\r\n            amountBToAdd, // uint amountBDesired,\r\n            1, // uint amountAMin,\r\n            1, // uint amountBMin,\r\n            to, // address to,\r\n            2**256-1 // uint deadline\r\n        );\r\n\r\n        require(liquidity >= minLiquidityOut, \"minted liquidity not enough\");\r\n\r\n        // Due to the inaccuracy of integer division,\r\n        // there may be a small amount of tokens left in this contract.\r\n        // Usually it doesn't worth it to spend more gas to transfer them out.\r\n        // These tokens will be considered as a donation to the owner.\r\n        // All ether and tokens directly sent to this contract will be considered as a donation to the contract owner.\r\n    }\r\n\r\n    function calcAmountAToSwap(\r\n        uint reserveA,\r\n        uint reserveB,\r\n        uint amountA,\r\n        uint amountB\r\n    ) public pure returns(\r\n        uint amountAToSwap\r\n    ) {\r\n        // require(reserveA > 0 && reserveB > 0, \"reserves can't be empty\");\r\n        // require(reserveA < 2**112 && reserveB < 2**112, \"reserves must be < 2**112\");\r\n        // require(amountA < 2**112 && amountB < 2**112, \"amounts must be < 2**112\");\r\n        // require(amountA * reserveB >= reserveA * amountB, \"require amountA / amountB >= reserveA / reserveB\");\r\n\r\n        // separating requirements somehow saves gas.\r\n        require(reserveA > 0, \"reserveA can't be empty\");\r\n        require(reserveB > 0, \"reserveB can't be empty\");\r\n        require(reserveA < 2**112, \"reserveA must be < 2**112\");\r\n        require(reserveB < 2**112, \"reserveB must be < 2**112\");\r\n        require(amountA < 2**112, \"amountA must be < 2**112\");\r\n        require(amountB < 2**112, \"amountB must be < 2**112\");\r\n        require(amountA * reserveB >= reserveA * amountB, \"require amountA / amountB >= reserveA / reserveB\");\r\n\r\n        uint l = 0; // minAmountAToSwap\r\n        uint r = amountA; // maxAmountAToSwap\r\n        // avoid binary search going too deep. saving gas\r\n        uint tolerance = amountA / 10000;\r\n        if (tolerance == 0) { tolerance = 1; }\r\n        uint newReserveA;\r\n        uint newReserveB;\r\n        uint newAmountA;\r\n        uint newAmountB;\r\n\r\n        // cache rA_times_1000 and rA_times_rB_times_1000 to save gas\r\n        // Since reserveA, reserveB are both < 2**112,\r\n        // rA_times_rB_times_1000 won't overflow.\r\n        uint rA_times_1000 = reserveA * 1000;\r\n        uint rA_times_rB_times_1000 = rA_times_1000 * reserveB;\r\n\r\n        // goal:\r\n        //   after swap l tokenA,\r\n        //     newAmountA / newAmountB >= newReserveA / newReserveB\r\n        //   after swap r tokenA,\r\n        //     newAmountA / newAmountB < newReserveA / newReserveB\r\n        //   r <= l + tolerance\r\n        while (l + tolerance < r) {\r\n            amountAToSwap = (l + r) / 2;\r\n\r\n            newReserveA = reserveA + amountAToSwap;\r\n            // (1000 * reserveA + 997 * amountAToSwap) * newReserveB = 1000 * reserveA * reserveB\r\n            newReserveB = rA_times_rB_times_1000 / (rA_times_1000 + 997 * amountAToSwap);\r\n            newAmountA = amountA - amountAToSwap; // amountAToSwap <= amountA\r\n            newAmountB = amountB + (reserveB - newReserveB); // newReserveB <= reserveB\r\n            if (newAmountA * newReserveB >= newReserveA * newAmountB) {\r\n                l = amountAToSwap;\r\n            } else {\r\n                r = amountAToSwap;\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n\r\n    // function _receiveToken(address tokenAddress, uint amount) internal {\r\n    //     TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), amount);\r\n    // }\r\n\r\n    // function _approveTokenToRouterIfNecessary(address tokenAddress, uint amount) internal {\r\n    //     if (IERC20(tokenAddress).allowance(address(this), _uniswapV2Router02Address) < amount) {\r\n    //         TransferHelper.safeApprove(tokenAddress, _uniswapV2Router02Address, 2**256 - 1);\r\n    //     }\r\n    // }\r\n\r\n    function emergencyWithdrawEther() external onlyOwner {\r\n        (msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function emergencyWithdrawErc20(address tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2FactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router02Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_uniswapV2FactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router02Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"calcAmountAToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAToSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressB\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountB\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"minLiquidityOut\",\"type\":\"uint112\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapAndAddLiquidityEthAndToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressB\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountA\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountB\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"minLiquidityOut\",\"type\":\"uint112\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapAndAddLiquidityTokenAndToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapV2AddLiquidityHelperV1_1","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://58cef3fcc8b2010043d21e5e556361f0e76e4ad2e636e4efcf77f15df7b4ee37"}]}