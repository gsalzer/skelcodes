{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n    \r\n// \"SPDX-License-Identifier: UNLICENSED\"\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Unsigned math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n        \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n        uint256 c = a - b;\r\n    \r\n    return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n        \r\n    return c; \r\n    }\r\n    \r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n        return a % b;\r\n    }\r\n}\r\n    \r\n// File: contracts/interfaces/IERC1155TokenReceiver.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\n    /**\r\n    * @dev ERC-1155 interface for accepting safe transfers.\r\n    */\r\ninterface IERC1155TokenReceiver {\r\n    \r\n    \r\n    /**\r\n    * @notice Handle the receipt of a single ERC1155 token type\r\n    * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n    * This function MAY throw to revert and reject the transfer\r\n    * Return of other amount than the magic value MUST result in the transaction being reverted\r\n    * Note: The token contract address is always the message sender\r\n    * @param _operator  The address which called the `safeTransferFrom` function\r\n    * @param _from      The address which previously owned the token\r\n    * @param _id        The id of the token being transferred\r\n    * @param _amount    The amount of tokens being transferred\r\n    * @param _data      Additional data with no specified format\r\n    * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n    \r\n    /**\r\n    * @notice Handle the receipt of multiple ERC1155 token types\r\n    * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n    * This function MAY throw to revert and reject the transfer\r\n    * Return of other amount than the magic value WILL result in the transaction being reverted\r\n    * Note: The token contract address is always the message sender\r\n    * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n    * @param _from      The address which previously owned the token\r\n    * @param _ids       An array containing ids of each token being transferred\r\n    * @param _amounts   An array containing amounts of each token being transferred\r\n    * @param _data      Additional data with no specified format\r\n    * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n}\r\n    \r\n    // File: contracts/interfaces/IERC1155.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\n    \r\ninterface IERC1155 {\r\n    \r\n    /****************************************|\r\n    |                 Events                 |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n    *   Operator MUST be msg.sender\r\n    *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n    *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n    *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n    *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n    */\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n    \r\n    /**\r\n    * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n    *   Operator MUST be msg.sender\r\n    *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n    *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n    *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n    *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n    */\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n    \r\n    /**\r\n    * @dev MUST emit when an approval is updated\r\n    */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    /**\r\n    * @dev MUST emit when the URI is updated for a token ID\r\n    *   URIs are defined in RFC 3986\r\n    *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n    */\r\n    event URI(string _amount, uint256 indexed _id);\r\n    \r\n    \r\n    /****************************************|\r\n    |                Functions               |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n    * @dev MUST emit TransferSingle event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    \r\n    /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @dev MUST emit TransferBatch event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    \r\n    /**\r\n    * @notice Get the balance of an account's Tokens\r\n    * @param _owner  The address of the token holder\r\n    * @param _id     ID of the Token\r\n    * @return        The _owner's balance of the Token type requested\r\n    */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    \r\n    /**\r\n    * @notice Get the balance of multiple account/token pairs\r\n    * @param _owners The addresses of the token holders\r\n    * @param _ids    ID of the Tokens\r\n    * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n    */\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n    \r\n    /**\r\n    * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n    * @dev MUST emit the ApprovalForAll event on success\r\n    * @param _operator  Address to add to the set of authorized operators\r\n    * @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    \r\n    /**\r\n    * @notice Queries the approval status of an operator for a given owner\r\n    * @param _owner     The owner of the Tokens\r\n    * @param _operator  Address of authorized operator\r\n    * @return isOperator True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n    \r\n    // File: contracts/utils/Address.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\n    \r\n    /**\r\n    * Utility library of inline functions on addresses\r\n    */\r\nlibrary Address {\r\n    \r\n    // Default hash for EOA accounts returned by extcodehash\r\n    bytes32 constant internal ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    \r\n    /**\r\n    * Returns whether the target address is a contract\r\n    * @dev This function will return false if invoked during the constructor of a contract.\r\n    * @param _address address of the account to check\r\n    * @return Whether the target address is a contract\r\n    */\r\n    function isContract(address _address) internal view returns (bool) {\r\n        bytes32 codehash;\r\n    \r\n        // Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address or if it has a non-zero code hash or account hash\r\n        assembly { codehash := extcodehash(_address) }\r\n        return (codehash != 0x0 && codehash != ACCOUNT_HASH);\r\n    }\r\n}\r\n    \r\n// File: contracts/utils/ERC165.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\nabstract contract ERC165 {\r\n    /**\r\n    * @notice Query if a contract implements an interface\r\n    * @param _interfaceID The interface identifier, as specified in ERC-165\r\n    * @return `true` if the contract implements `_interfaceID`\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) virtual public pure returns (bool) {\r\n        return _interfaceID == this.supportsInterface.selector;\r\n    }\r\n}\r\n    \r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with GSN meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n    \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    \r\n    /**\r\n     *  Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    /**\r\n     *  Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    /**\r\n     *  Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n    \r\ncontract Allowable is Ownable {\r\n    \r\n    // Contains details regarding allowed addresses\r\n    mapping (address => mapping(uint256 => bool) )public permissions;\r\n    // Active status\r\n    bool public isActive = true;\r\n\r\n    /**\r\n    * @dev Reverts if an address is not allowed. Can be used when extending this contract.\r\n    */\r\n    \r\n    modifier whenActive(address _from,address _to,uint256 tokenId){\r\n        require (!permissions[_from][tokenId] && !permissions[_to][tokenId] );          \r\n        _;\r\n    }\r\n    \r\n    modifier active(){\r\n            require(isActive, \"Not Active\");            \r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds single address to the permissions list. Allowed only for contract owner.\r\n    * @param _operator Address to be added to the permissions list\r\n    */\r\n    function allow(address _operator,uint256 _tokenId) external onlyOwner {\r\n        permissions[_operator][_tokenId] = false;\r\n    }\r\n    \r\n    /**\r\n    * @dev Removes single address from an permissions list. Allowed only for contract owner.  \r\n    * @param _operator Address to be removed from the permissions list\r\n    */\r\n    function deny(address _operator,uint256 _tokenId) external onlyOwner {\r\n         permissions[_operator][_tokenId] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Sets active status of the contract. Allowed only for contract owner.  \r\n    * @param _status Status of the contract\r\n    */\r\n    function activate(bool _status) onlyOwner public {\r\n        isActive = _status;\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts/tokens/ERC1155/ERC1155.sol\r\n    \r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n* @dev Implementation of Multi-Token Standard contract\r\n*/\r\ncontract ERC1155 is IERC1155, ERC165 , Allowable{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    /***********************************|\r\n    |        Variables and Events       |\r\n    |__________________________________*/\r\n    \r\n    // Contract name\r\n      string public name;\r\n      // Contract symbol\r\n      string public symbol;\r\n    \r\n    // onReceive function signatures\r\n    bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n    \r\n    // Objects balances\r\n    mapping (address => mapping(uint256 => uint256)) internal balances;\r\n    \r\n    // Operator Functions\r\n    mapping (address => mapping(address => bool)) internal operators;\r\n    \r\n    //  A record of each accounts delegate\r\n    mapping (address => mapping (uint256 => address)) internal _delegates;\r\n    \r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n    \r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => mapping(uint256=> Checkpoint))) public checkpoints;\r\n    \r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => mapping (uint256 => uint32)) public numCheckpoints;\r\n    \r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    \r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n    \r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n    \r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n    \r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    \r\n    \r\n    \r\n    \r\n    /***********************************|\r\n    |     Public Transfer Functions     |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n        public active() whenActive(_from,_to,_id) override \r\n    {\r\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n        // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\r\n        \r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n        _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\r\n    \r\n    }\r\n    \r\n    /**\r\n    \r\n    /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n        public override active() \r\n    {\r\n        // Requirements\r\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n        \r\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\r\n    }\r\n    \r\n    \r\n    /***********************************|\r\n    |    Internal Transfer Functions    |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    */\r\n    function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n        internal\r\n    {\r\n        // Update balances\r\n        balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\r\n        \r\n        _moveDelegates(_delegates[_from][_id], _delegates[_to][_id], _amount,_id);\r\n        \r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n    }\r\n    \r\n    /**\r\n    * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n    */\r\n    function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\r\n        internal\r\n    {\r\n        // Check if recipient is contract\r\n        if (_to.isContract()) {\r\n          bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _id, _amount, _data);\r\n          require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    */\r\n    function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n        internal\r\n    {\r\n        require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n        \r\n        // Number of transfer to execute\r\n        uint256 nTransfer = _ids.length;\r\n        \r\n        // Executing all transfers\r\n        for (uint256 i = 0; i < nTransfer; i++) {\r\n            require (!permissions[_from][_ids[i]] && !permissions[_to][_ids[i]],\"blocked user\");          \r\n          // Update storage balance of previous bin\r\n          balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n          balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n        \r\n        // Emit event\r\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n    }\r\n    \r\n    /**\r\n    * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n    */\r\n    function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\r\n        internal\r\n    {\r\n        // Pass data if recipient is contract\r\n        if (_to.isContract()) {\r\n          bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\r\n          require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n        }\r\n    }\r\n    \r\n    \r\n    /***********************************|\r\n    |         Operator Functions        |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n    * @param _operator  Address to add to the set of authorized operators\r\n    * @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n        external  override\r\n    {\r\n        // Update operator status\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n    * @notice Queries the approval status of an operator for a given owner\r\n    * @param _owner     The owner of the Tokens\r\n    * @param _operator  Address of authorized operator\r\n    * @return isOperator True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public override view returns (bool isOperator)\r\n    {\r\n        return operators[_owner][_operator];\r\n    }\r\n    \r\n    \r\n    /***********************************|\r\n    |         Balance Functions         |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Get the balance of an account's Tokens\r\n    * @param _owner  The address of the token holder\r\n    * @param _id     ID of the Token\r\n    * @return The _owner's balance of the Token type requested\r\n    */\r\n    function balanceOf(address _owner, uint256 _id)\r\n        public override view returns (uint256)\r\n    {\r\n        return balances[_owner][_id];\r\n    }\r\n    \r\n    /**\r\n    * @notice Get the balance of multiple account/token pairs\r\n    * @param _owners The addresses of the token holders\r\n    * @param _ids    ID of the Tokens\r\n    * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n    */\r\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n        public override view returns (uint256[] memory)\r\n    {\r\n        require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n        \r\n        // Variables\r\n        uint256[] memory batchBalances = new uint256[](_owners.length);\r\n        \r\n        // Iterate over each owner and token ID\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n          batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n        }\r\n        \r\n        return batchBalances;\r\n    }\r\n    \r\n    /**\r\n    * @notice Manages the delagates\r\n    * @param delegator  The addresses of delegator\r\n    * @param delegatee  The addresses of delegator\r\n    * @param tokenId    Token type\r\n    */ \r\n    function _delegate(address delegator, address delegatee, uint256 tokenId)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator][tokenId];\r\n        uint256 delegatorBalance = balanceOf(delegator,tokenId); // balance of underlying (not scaled);\r\n        _delegates[delegator][tokenId] = delegatee;\r\n    \r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n    \r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance,tokenId);\r\n    }\r\n    \r\n    /**\r\n    * @notice Move the delegate control to delegatee\r\n    * @param srcRep  The addresses of delegator\r\n    * @param dstRep  The addresses of delegator\r\n    * @param amount  Delegator balance\r\n    * @param tokenId Token type\r\n    */ \r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount, uint256 tokenId) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep][tokenId];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1][tokenId].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew,tokenId);\r\n            }\r\n    \r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep][tokenId];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1][tokenId].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew,tokenId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @notice Internal call to update the votes to delegatee\r\n    */ \r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes,\r\n        uint256 tokenID\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"_writeCheckpoint: block number exceeds 32 bits\");\r\n    \r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1][tokenID].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1][tokenID].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints][tokenID] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee][tokenID] = nCheckpoints + 1;\r\n        }\r\n    \r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n    \r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n    \r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n    \r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator, uint256 tokenID)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator][tokenID];\r\n    }\r\n    \r\n    /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee, uint256 tokenID) external  {\r\n        return _delegate(msg.sender, delegatee, tokenID);\r\n    }\r\n    \r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint tokenID\r\n    )\r\n        external\r\n        \r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    \r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n    \r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n    \r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee, tokenID);\r\n    }\r\n    \r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account, uint256 tokenID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account][tokenID];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1][tokenID].votes : 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber,uint256 tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"getPriorVotes: not yet determined\");\r\n    \r\n        uint32 nCheckpoints = numCheckpoints[account][tokenId];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1][tokenId].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1][tokenId].votes;\r\n        }\r\n    \r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0][tokenId].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n    \r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center][tokenId];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower][tokenId].votes;\r\n    }\r\n    \r\n    \r\n    \r\n    /***********************************|\r\n    |          ERC165 Functions         |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Query if a contract implements an interface\r\n    * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n    * @return `true` if the contract implements `_interfaceID` and\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) public override virtual pure returns (bool) {\r\n        if (_interfaceID == type(IERC1155).interfaceId) {\r\n          return true;\r\n        }\r\n        return super.supportsInterface(_interfaceID);\r\n    }\r\n}\r\n    \r\n    // File: contracts/tokens/ERC1155/ERC1155MintBurn.sol\r\n    \r\npragma solidity ^0.6.8;\r\n\r\n    /**\r\n    * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n    *      a parent contract to be executed as they are `internal` functions\r\n    */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n    \r\n    /****************************************|\r\n    |            Minting Functions           |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @notice Mint _amount of tokens of a given id\r\n    * @param _to      The address to mint tokens to\r\n    * @param _id      Token id to mint\r\n    * @param _amount  The amount to be minted\r\n    * @param _data    Data to pass if receiver is contract\r\n    */\r\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n        internal\r\n    {\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);\r\n        \r\n        _moveDelegates(_delegates[msg.sender][_id], _delegates[_to][_id], _amount,_id);\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n        \r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\r\n    }\r\n    \r\n    /**\r\n    * @notice Mint tokens for each ids in _ids\r\n    * @param _to       The address to mint tokens to\r\n    * @param _ids      Array of ids to mint\r\n    * @param _amounts  Array of amount of tokens to mint per id\r\n    * @param _data    Data to pass if receiver is contract\r\n    */\r\n    function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n        internal\r\n    {\r\n        require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n        \r\n        // Number of mints to execute\r\n        uint256 nMint = _ids.length;\r\n        \r\n         // Executing all minting\r\n        for (uint256 i = 0; i < nMint; i++) {\r\n         _moveDelegates(_delegates[msg.sender][i], _delegates[_to][i], _amounts[i],_ids[i]);\r\n          // Update storage balance\r\n          balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n        \r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n        \r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\r\n    }\r\n    \r\n    \r\n    /****************************************|\r\n    |            Burning Functions           |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @notice Burn _amount of tokens of a given token id\r\n    * @param _from    The address to burn tokens from\r\n    * @param _id      Token id to burn\r\n    * @param _amount  The amount to be burned\r\n    */\r\n    function _burn(address _from, uint256 _id, uint256 _amount)\r\n        internal\r\n    {\r\n        //Substract _amount\r\n        balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n        \r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n    }\r\n    \r\n    /**\r\n    * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n    * @param _from     The address to burn tokens from\r\n    * @param _ids      Array of token ids to burn\r\n    * @param _amounts  Array of the amount to be burned\r\n    */\r\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n        internal\r\n    {\r\n        // Number of mints to execute\r\n        uint256 nBurn = _ids.length;\r\n        require(nBurn == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n        \r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nBurn; i++) {\r\n          // Update storage balance\r\n          balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n        }\r\n        \r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n    }\r\n    \r\n}\r\n    \r\n// File: contracts/interfaces/IERC1155Metadata.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\n    \r\ninterface IERC1155Metadata {\r\n    \r\n    /****************************************|\r\n    |                Functions               |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n    * @dev URIs are defined in RFC 3986.\r\n    *      URIs are assumed to be deterministically generated based on token ID\r\n    *      Token IDs are assumed to be represented in their hex format in URIs\r\n    * @return URI string\r\n    */\r\n    function uri(uint256 _id) external view returns (string memory);\r\n}\r\n    \r\n// File: contracts/tokens/ERC1155/ERC1155Metadata.sol\r\n    \r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n* @notice Contract that handles metadata related methods.\r\n* @dev Methods assume a deterministic generation of URI based on token IDs.\r\n*      Methods also assume that URI uses hex representation of token IDs.\r\n*/\r\ncontract ERC1155Metadata is ERC1155MintBurn {\r\n    // URI's default URI prefix\r\n    string internal baseMetadataURI;\r\n    event URI(string _uri, uint256 indexed _id);\r\n    \r\n    /***********************************|\r\n    |     Metadata Public Function s    |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n    * @dev URIs are defined in RFC 3986.\r\n    *      URIs are assumed to be deterministically generated based on token ID\r\n    * @return URI string\r\n    */\r\n    function uri(uint256 _id) public view returns (string memory) {\r\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\"));\r\n    }\r\n    \r\n    \r\n    /***********************************|\r\n    |    Metadata Internal Functions    |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Will emit default URI log event for corresponding token _id\r\n    * @param _tokenIDs Array of IDs of tokens to log default URI\r\n    */\r\n    function _logURIs(uint256[] memory _tokenIDs) internal {\r\n        string memory baseURL = baseMetadataURI;\r\n        string memory tokenURI;\r\n    \r\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n          tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\r\n          emit URI(tokenURI, _tokenIDs[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @notice Will update the base URL of token's URI\r\n    * @param _newBaseMetadataURI New base URL of token's URI\r\n    */\r\n    function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n        baseMetadataURI = _newBaseMetadataURI;\r\n    }\r\n    \r\n    /**\r\n    * @notice Query if a contract implements an interface\r\n    * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n    * @return `true` if the contract implements `_interfaceID` and\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) public override virtual pure returns (bool) {\r\n        if (_interfaceID == type(IERC1155Metadata).interfaceId) {\r\n          return true;\r\n        }\r\n        return super.supportsInterface(_interfaceID);\r\n    }\r\n    \r\n    \r\n    /***********************************|\r\n    |    Utility Internal Functions     |\r\n    |__________________________________*/\r\n    \r\n    /**\r\n    * @notice Convert uint256 to string\r\n    * @param _i Unsigned integer to convert to string\r\n    */\r\n    function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n          return \"0\";\r\n        }\r\n        \r\n        uint256 j = _i;\r\n        uint256 ii = _i;\r\n        uint256 len;\r\n        \r\n        // Get number of bytes\r\n        while (j != 0) {\r\n          len++;\r\n          j /= 10;\r\n        }\r\n        \r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n        \r\n        // Get each individual ASCII\r\n        while (ii != 0) {\r\n          bstr[k--] = byte(uint8(48 + ii % 10));\r\n          ii /= 10;\r\n        }\r\n        \r\n        // Convert to string\r\n        return string(bstr);\r\n    }\r\n}\r\n    \r\n    \r\n// File: contracts/tokens/ERC1155/ERNE1155.sol\r\n    \r\npragma solidity ^0.6.8;\r\n    \r\n    \r\ncontract ERNEfinance is ERC1155Metadata {\r\n    uint256 private _currentTokenID = 0;\r\n    mapping (uint256 => address) public creators;\r\n    mapping (uint256 => uint256) public tokenSupply;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n      \r\n    address public wrappedContract;\r\n    \r\n    /// @notice A checkpoint for marking number of vest \r\n    struct vest{\r\n        uint256 amount;\r\n        uint256 strTime;\r\n    }\r\n\r\n    /// @notice A record of vest details for  account\r\n    mapping(address => mapping(uint256 => vest)) public vestDetails;\r\n\r\n      \r\n    /**\r\n    * @dev Require msg.sender to be the creator of the token id\r\n    */\r\n    modifier creatorOnly(uint256 _id) {\r\n        require(creators[_id] == msg.sender, \"ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\");\r\n        _;\r\n    }\r\n      \r\n    constructor() public  {\r\n        name = \"ERNE finance\";\r\n        symbol = \"ERNE\";\r\n    }\r\n    \r\n    /**\r\n    * @dev Require msg.sender to own more than 0 of the token id\r\n    */\r\n    modifier ownersOnly(uint256 _id) {\r\n        require(balances[msg.sender][_id] > 0, \"ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED\");\r\n        _;\r\n    }\r\n    \r\n     /**\r\n    * @dev Creates a new token type and assigns _initialSupply to an address\r\n    * NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)\r\n    * @param _initialOwner address of the first owner of the token\r\n    * @param _initialSupply amount to supply the first owner\r\n    * @param _uri Optional URI for this token type\r\n    * @param _data Data to pass if receiver is contract\r\n    * @return The newly created token ID\r\n    */\r\n    function create(\r\n        address _initialOwner,\r\n        uint256 _initialSupply,\r\n        string calldata _uri,\r\n        bytes calldata _data\r\n        ) external onlyOwner returns (uint256) {\r\n    \r\n        uint256 _id = _getNextTokenID();\r\n        _incrementTokenTypeId();\r\n        creators[_id] = msg.sender;\r\n        \r\n        if (bytes(_uri).length > 0) {\r\n          emit URI(_uri, _id);\r\n        }\r\n        \r\n        _mint(_initialOwner, _id, _initialSupply, _data);\r\n        tokenSupply[_id] = _initialSupply;\r\n        return _id;\r\n    }\r\n      \r\n    /**\r\n    * @dev Mints some amount of tokens to an address\r\n    * @param _to          Address of the future owner of the token\r\n    * @param _id          Token ID to mint\r\n    * @param _quantity    Amount of tokens to mint\r\n    * @param _data        Data to pass if receiver is contract\r\n    */\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n        ) public creatorOnly(_id) {\r\n        _mint(_to, _id, _quantity, _data);\r\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\r\n    }\r\n    \r\n    /**\r\n    * @dev Mint tokens for each id in _ids\r\n    * @param _to          The address to mint tokens to\r\n    * @param _ids         Array of ids to mint\r\n    * @param _quantities  Array of amounts of tokens to mint per id\r\n    * @param _data        Data to pass if receiver is contract\r\n    */\r\n    function batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities,\r\n        bytes memory _data\r\n        ) public {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            require(creators[_id] == msg.sender, \"ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED\");\r\n            uint256 quantity = _quantities[i];\r\n            tokenSupply[_id] = tokenSupply[_id].add(quantity);\r\n        }\r\n        _batchMint(_to, _ids, _quantities, _data);\r\n    }\r\n    \r\n    /**\r\n    * @dev Will update the base URL of token's URI\r\n    * @param _newBaseMetadataURI New base URL of token's URI\r\n    */\r\n    function setBaseMetadataURI(\r\n        string memory _newBaseMetadataURI\r\n        ) public onlyOwner {\r\n        _setBaseMetadataURI(_newBaseMetadataURI);\r\n    }\r\n    \r\n    /**\r\n    * @dev Change the creator address for given tokens\r\n    * @param _to   Address of the new creator\r\n    * @param _ids  Array of Token IDs to change creator\r\n    */\r\n    function setCreator(\r\n        address _to,\r\n        uint256[] memory _ids\r\n        ) public {\r\n        require(_to != address(0), \"ERC1155Tradable#setCreator: INVALID_ADDRESS.\");\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n          uint256 id = _ids[i];\r\n          _setCreator(_to, id);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Change the creator address for given token\r\n    * @param _to   Address of the new creator\r\n    * @param _id  Token IDs to change creator of\r\n    */\r\n    function _setCreator(address _to, uint256 _id) internal creatorOnly(_id) {\r\n        creators[_id] = _to;\r\n    }\r\n\r\n      \r\n    /**\r\n    * @dev calculates the next token ID based on value of _currentTokenID\r\n    * @return uint256 for the next token ID\r\n    */\r\n    function _getNextTokenID() private view returns (uint256) {\r\n        return _currentTokenID.add(1);\r\n    }\r\n    \r\n    /**\r\n    * @dev increments the value of _currentTokenID\r\n    */\r\n    function _incrementTokenTypeId() private  {\r\n        _currentTokenID++;\r\n    }\r\n    \r\n    /** @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    */\r\n    function safeTransfer(address _from, address _to, uint256 _id, uint256 _amount, address _spender) \r\n        public active()\r\n        whenActive(_from,_to,_id) \r\n    {\r\n        require(msg.sender == wrappedContract, \"Invalid transfer\");\r\n        require(_allowances[_from][_spender] > 0, \"ERC1155#safeTransfer: INVALID_OPERATOR\");\r\n        require((msg.sender == _from) || _allowances[_from][_spender] >= _amount, \"ERC1155#safeTransfer: INVALID_OPERATOR\");\r\n        require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n        // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\r\n        \r\n        _allowances[_from][_spender] =  _allowances[_from][_spender].sub(_amount);\r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n        // _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\r\n    }\r\n    \r\n    /** @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    */\r\n    function transfer(address _from, address _to, uint256 _id, uint256 _amount)\r\n        public \r\n        whenActive(_from,_to,_id)\r\n    {\r\n        require(msg.sender == wrappedContract, \"Invalid transfer\");\r\n        require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n\r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n    }\r\n    \r\n    /** @notice Set Wrapper ERC20 contarct address\r\n    * @param _wrappedContract  Contract address\r\n    */\r\n    function setWrapedContract(address _wrappedContract) \r\n        public \r\n        onlyOwner \r\n    {\r\n          wrappedContract = _wrappedContract; \r\n    }\r\n    \r\n    /** @notice Approve amount of tokens to spender\r\n    * @param owner   From address\r\n    * @param spender Spender address\r\n    * @param amount  AMount to approve\r\n    */  \r\n    function approve(address owner, address spender, uint256 amount) \r\n        external  \r\n    {\r\n        require(msg.sender == wrappedContract, \"Invalid approve\");\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n    \r\n        _allowances[owner][spender] = amount;\r\n    }\r\n     \r\n    /** @notice Returns Approved amount of tokens for spender\r\n    */  \r\n    function allowance(address owner, address spender) \r\n        public view  \r\n        returns (uint256) \r\n    {\r\n        require(msg.sender == wrappedContract, \"Invalid allowance\");\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    /**\r\n    * @notice Mint Mint tokens to increase supply\r\n    * @param _to      The address to mint tokens to\r\n    * @param _id      Token id to mint\r\n    * @param _amount  The amount to be minted\r\n    */\r\n    function mintERC20(address _to, uint256 _id, uint256 _amount)\r\n        external\r\n    {\r\n        require(msg.sender == wrappedContract, \"Invalid mint\");\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);\r\n        tokenSupply[_id] = tokenSupply[_id].add(_amount);\r\n        \r\n        _moveDelegates(_delegates[msg.sender][_id], _delegates[_to][_id], _amount,_id);\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n        \r\n        // Calling onReceive method if recipient is contract\r\n        //_callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\r\n    }\r\n    \r\n    /**\r\n    * @notice Lock ERNE tokens for 365 days\r\n    * @param _account The address of the account \r\n    * @param _amount The amount of token to lock \r\n    * @param _id The amount of token to lock \r\n    */\r\n    function vestingLock(address[] memory _account,uint256[] memory _amount,uint256 _id) \r\n        public \r\n        onlyOwner \r\n    {\r\n        uint256 total;\r\n        for(uint128 i = 0; i < _account.length; i++){\r\n            vestDetails[_account[i]][_id].amount = _amount[i];\r\n            vestDetails[_account[i]][_id].strTime = now;\r\n            total = total.add(_amount[i]);\r\n        }\r\n       \r\n        _safeTransferFrom(msg.sender,address(this),_id,total);\r\n    }\r\n    \r\n    /**\r\n     * @notice UnLock erne tokens after 365 days\r\n     * @param _id The amount of token to unlock \r\n     */\r\n    function vestingUnLock(uint256 _id)\r\n        public\r\n    {\r\n        require(vestDetails[msg.sender][_id].amount > 0 ,\"Erne::Vest token value is 0\");\r\n        require(now.sub(vestDetails[msg.sender][_id].strTime) >= 365 days ,\"Erne::VestUnlock time Pending\"); \r\n        \r\n        uint256 _amount;\r\n        _amount = vestDetails[msg.sender][_id].amount;\r\n        vestDetails[msg.sender][_id].amount = 0;\r\n        vestDetails[msg.sender][_id].strTime = 0;\r\n        _safeTransferFrom(address(this), msg.sender,_id, _amount);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedContract\",\"type\":\"address\"}],\"name\":\"setWrapedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vestingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vestingUnLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERNEfinance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://42aa9a092c98191affbc56a3c77cc6c96a67594c2695f82b571c2aab36881664"}]}