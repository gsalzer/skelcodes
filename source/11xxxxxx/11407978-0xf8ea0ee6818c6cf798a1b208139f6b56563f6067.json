{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Owned.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// Requried one small change in openzeppelin version of ownable, so imported\r\n// source code here. Notice line 26 for change.\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    /**\r\n     * @dev Changed _owner from 'private' to 'internal'\r\n     */\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module extends Ownable and provide a way for safe transfer ownership.\r\n * New owner has to call acceptOwnership in order to complete ownership trasnfer.\r\n */\r\ncontract Owned is Ownable {\r\n    address private _newOwner;\r\n\r\n    /**\r\n     * @dev Initiate transfer ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner. Current owner will still be owner until\r\n     * new owner accept ownership.\r\n     * @param newOwner new owner address\r\n     */\r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows new owner to accept ownership of the contract.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Caller is not the new owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        _newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IVesperPool.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IVesperPool is IERC20 {\r\n    function approveToken() external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function multiTransfer(uint256[] memory) external returns (bool);\r\n\r\n    function permit(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint8,\r\n        bytes32,\r\n        bytes32\r\n    ) external;\r\n\r\n    function rebalance() external;\r\n\r\n    function resetApproval() external;\r\n\r\n    function sweepErc20(address) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawETH(uint256) external;\r\n\r\n    function withdrawByStrategy(uint256) external;\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function tokensHere() external view returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function withdrawFee() external view returns (uint256);\r\n}\r\n\r\n// File: sol-address-list/contracts/interfaces/IAddressList.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IAddressList {\r\n    event AddressUpdated(address indexed a, address indexed sender);\r\n    event AddressRemoved(address indexed a, address indexed sender);\r\n\r\n    function add(address a) external returns (bool);\r\n    function addValue(address a, uint256 v) external returns (bool);\r\n    function remove(address a) external returns (bool);\r\n\r\n    function get(address a) external view returns (uint256);\r\n    function at(uint256 index) external view returns (address, uint256);\r\n    function length() external view returns (uint256);\r\n}\r\n\r\n// File: sol-address-list/contracts/interfaces/IAddressListFactory.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IAddressListFactory {\r\n    event ListCreated(address indexed _sender, address indexed _newList);\r\n\r\n    function ours(address a) external view returns (bool);\r\n    function listCount() external view returns (uint);\r\n    function listAt(uint idx) external view returns (address);\r\n    function createList() external returns (address listaddr);\r\n}\r\n\r\n// File: contracts/Controller.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IVesperStrategy {\r\n    function isUpgradable() external returns (bool);\r\n}\r\n\r\ncontract Controller is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    // Pool specific params\r\n    mapping(address => uint256) public withdrawFee;\r\n    mapping(address => uint256) public interestFee;\r\n    mapping(address => address) public feeCollector;\r\n    mapping(address => uint256) public rebalanceFriction;\r\n    mapping(address => address) public poolStrategy;\r\n    uint16 public aaveReferralCode;\r\n    address public founderVault;\r\n    uint256 public founderFee = 5e16;\r\n    address public treasuryPool;\r\n    address public constant AAVE_ADDRESSES_PROVIDER = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IAddressList public immutable pools;\r\n\r\n    constructor() public {\r\n        IAddressListFactory addressFactory =\r\n            IAddressListFactory(0x8252B79D85A8F75Ae7e439f71F078AB15a1d2929);\r\n        pools = IAddressList(addressFactory.createList());\r\n    }\r\n\r\n    modifier validPool(address pool) {\r\n        require(pools.get(pool) != 0, \"Not a valid pool\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new pool in vesper system\r\n     * @param _pool Address of new pool\r\n     */\r\n    function addPool(address _pool) external onlyOwner {\r\n        require(_pool != address(0), \"invalid-pool\");\r\n        IERC20 pool = IERC20(_pool);\r\n        require(pool.totalSupply() == 0, \"Zero supply required\");\r\n        pools.add(_pool);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove pool from vesper system\r\n     * @param _pool Address of pool to be removed\r\n     */\r\n    function removePool(address _pool) external onlyOwner {\r\n        IERC20 pool = IERC20(_pool);\r\n        require(pool.totalSupply() == 0, \"Zero supply required\");\r\n        pools.remove(_pool);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute transaction in given target contract\r\n     * @param target Address of target contract\r\n     * @param value Ether amount to transfer\r\n     * @param signature Signature of function in target contract\r\n     * @param data Encoded data for function call\r\n     */\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data\r\n    ) external payable onlyOwner returns (bytes memory) {\r\n        return _executeTransaction(target, value, signature, data);\r\n    }\r\n\r\n    /// @dev Execute multiple transactions.\r\n    function executeTransactions(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas\r\n    ) external payable onlyOwner {\r\n        require(targets.length != 0, \"Must provide actions\");\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == signatures.length &&\r\n                targets.length == calldatas.length,\r\n            \"Transaction data mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            _executeTransaction(targets[i], values[i], signatures[i], calldatas[i]);\r\n        }\r\n    }\r\n\r\n    function updateAaveReferralCode(uint16 referralCode) external onlyOwner {\r\n        aaveReferralCode = referralCode;\r\n    }\r\n\r\n    function updateFeeCollector(address _pool, address _collector)\r\n        external\r\n        onlyOwner\r\n        validPool(_pool)\r\n    {\r\n        require(_collector != address(0), \"invalid-collector\");\r\n        require(feeCollector[_pool] != _collector, \"same-collector\");\r\n        feeCollector[_pool] = _collector;\r\n    }\r\n\r\n    function updateFounderVault(address _founderVault) external onlyOwner {\r\n        founderVault = _founderVault;\r\n    }\r\n\r\n    function updateFounderFee(uint256 _founderFee) external onlyOwner {\r\n        require(founderFee != _founderFee, \"same-founderFee\");\r\n        require(_founderFee <= 1e18, \"founderFee-above-100%\");\r\n        founderFee = _founderFee;\r\n    }\r\n\r\n    function updateInterestFee(address _pool, uint256 _interestFee) external onlyOwner {\r\n        require(_interestFee <= 1e18, \"Fee limit reached\");\r\n        require(feeCollector[_pool] != address(0), \"FeeCollector not set\");\r\n        interestFee[_pool] = _interestFee;\r\n    }\r\n\r\n    function updatePoolStrategy(address _pool, address _newStrategy)\r\n        external\r\n        onlyOwner\r\n        validPool(_pool)\r\n    {\r\n        require(_newStrategy != address(0), \"invalid-strategy-address\");\r\n        address strategy = poolStrategy[_pool];\r\n        require(strategy != _newStrategy, \"same-pool-strategy\");\r\n\r\n        IVesperPool vpool = IVesperPool(_pool);\r\n        if (strategy != address(0)) {\r\n            require(IVesperStrategy(strategy).isUpgradable(), \"strategy-is-not-upgradable\");\r\n            vpool.resetApproval();\r\n        }\r\n        poolStrategy[_pool] = _newStrategy;\r\n        vpool.approveToken();\r\n    }\r\n\r\n    function updateRebalanceFriction(address _pool, uint256 _f)\r\n        external\r\n        onlyOwner\r\n        validPool(_pool)\r\n    {\r\n        require(rebalanceFriction[_pool] != _f, \"same-friction\");\r\n        rebalanceFriction[_pool] = _f;\r\n    }\r\n\r\n    function updateTreasuryPool(address _pool) external onlyOwner validPool(_pool) {\r\n        treasuryPool = _pool;\r\n    }\r\n\r\n    function updateUniswapRouter(address _uniswapRouter) external onlyOwner {\r\n        uniswapRouter = _uniswapRouter;\r\n    }\r\n\r\n    function updateWithdrawFee(address _pool, uint256 _newWithdrawFee)\r\n        external\r\n        onlyOwner\r\n        validPool(_pool)\r\n    {\r\n        require(_newWithdrawFee <= 1e18, \"withdraw-fee-limit-reached\");\r\n        require(withdrawFee[_pool] != _newWithdrawFee, \"same-withdraw-fee\");\r\n        require(feeCollector[_pool] != address(0), \"FeeCollector-not-set\");\r\n        withdrawFee[_pool] = _newWithdrawFee;\r\n    }\r\n\r\n    function isPool(address _pool) external view returns (bool) {\r\n        return pools.get(_pool) != 0;\r\n    }\r\n\r\n    function aaveProvider() external pure returns (address) {\r\n        return AAVE_ADDRESSES_PROVIDER;\r\n    }\r\n\r\n    function _executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data\r\n    ) internal onlyOwner returns (bytes memory) {\r\n        bytes memory callData;\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Transaction execution reverted.\");\r\n        return returnData;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveReferralCode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalanceFriction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"updateAaveReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_founderFee\",\"type\":\"uint256\"}],\"name\":\"updateFounderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founderVault\",\"type\":\"address\"}],\"name\":\"updateFounderVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"}],\"name\":\"updateInterestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"updatePoolStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"updateRebalanceFriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updateTreasuryPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"updateUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21fc5db5dc2bf4a820dec707cf517fc20fcdc77d290cce0837356ce0671eafe7"}]}