{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\fixed-inflation\\FixedInflationData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct FixedInflationEntryConfiguration {\r\n    bool add;\r\n    bool remove;\r\n    FixedInflationEntry data;\r\n}\r\n\r\nstruct FixedInflationEntry {\r\n    uint256 lastBlock;\r\n    bytes32 id;\r\n    string name;\r\n    uint256 blockInterval;\r\n    uint256 callerRewardPercentage;\r\n}\r\n\r\nstruct FixedInflationOperation {\r\n\r\n    address inputTokenAddress;\r\n    uint256 inputTokenAmount;\r\n    bool inputTokenAmountIsPercentage;\r\n    bool inputTokenAmountIsByMint;\r\n\r\n    address ammPlugin;\r\n    address[] liquidityPoolAddresses;\r\n    address[] swapPath;\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n\r\n    address[] receivers;\r\n    uint256[] receiversPercentages;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflationExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflationExtension {\r\n\r\n    function init(address host) external;\r\n\r\n    function setHost(address host) external;\r\n\r\n    function data() external view returns(address fixedInflationContract, address host);\r\n\r\n    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) external;\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\util\\IERC20.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflationFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IFixedInflationFactory {\r\n\r\n    function fixedInflationDefaultExtension() external view returns (address);\r\n\r\n    function feePercentageInfo() external view returns (uint256, address);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflation.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflation {\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\FixedInflation.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FixedInflation is IFixedInflation {\r\n\r\n    event Entry(bytes32 indexed id);\r\n\r\n    uint256 public constant ONE_HUNDRED = 1e18;\r\n\r\n    address public _factory;\r\n\r\n    mapping(address => uint256) private _tokenIndex;\r\n    mapping(address => uint256) private _tokenTotalSupply;\r\n    address[] private _tokensToTransfer;\r\n    uint256[] private _tokenAmounts;\r\n    uint256[] private _tokenMintAmounts;\r\n\r\n    address public extension;\r\n\r\n    mapping(bytes32 => FixedInflationEntry) private _entries;\r\n    mapping(bytes32 => FixedInflationOperation[]) private _operations;\r\n\r\n    function init(address _extension, bytes memory extensionPayload, FixedInflationEntry[] memory newEntries, FixedInflationOperation[][] memory operationSets) public returns(bytes memory extensionInitResult) {\r\n        require(_factory == address(0), \"Already init\");\r\n        require(_extension != address(0), \"Blank extension\");\r\n        _factory = msg.sender;\r\n        extension = _extension;\r\n        if(_extension == address(0)) {\r\n            _extension = _clone(IFixedInflationFactory(_factory).fixedInflationDefaultExtension());\r\n        }\r\n        if(keccak256(extensionPayload) != keccak256(\"\")) {\r\n            extensionInitResult = _call(_extension, extensionPayload);\r\n        }\r\n        require(newEntries.length > 0 && newEntries.length == operationSets.length, \"Same length > 0\");\r\n        (uint256 dfoFeePercentage,) = IFixedInflationFactory(_factory).feePercentageInfo();\r\n        for(uint256 i = 0; i < newEntries.length; i++) {\r\n            _add(newEntries[i], operationSets[i], dfoFeePercentage);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    modifier extensionOnly() {\r\n        require(msg.sender == extension, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function entry(bytes32 key) public view returns(FixedInflationEntry memory entriesArray, FixedInflationOperation[] memory operations) {\r\n        return (_entries[key], _operations[key]);\r\n    }\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) public override extensionOnly {\r\n        require(newEntries.length > 0 && newEntries.length == operationSets.length, \"Same length > 0\");\r\n        (uint256 dfoFeePercentage,) = IFixedInflationFactory(_factory).feePercentageInfo();\r\n        for(uint256 i = 0; i < newEntries.length; i++) {\r\n            FixedInflationEntryConfiguration memory entryConfiguration = newEntries[i];\r\n            if(entryConfiguration.add) {\r\n                _add(entryConfiguration.data, operationSets[i], dfoFeePercentage);\r\n                continue;\r\n            }\r\n            require(_entries[entryConfiguration.data.id].id == entryConfiguration.data.id, \"Invalid id\");\r\n            if(entryConfiguration.remove) {\r\n                _remove(entryConfiguration.data.id);\r\n                continue;\r\n            }\r\n            entryConfiguration.data.lastBlock = _entries[entryConfiguration.data.id].lastBlock;\r\n            _entries[entryConfiguration.data.id] = entryConfiguration.data;\r\n            if(operationSets[i].length > 0) {\r\n                _setOperations(entryConfiguration.data.id, operationSets[i], dfoFeePercentage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function nextBlock(bytes32 id) public view returns(uint256) {\r\n        return _entries[id].lastBlock == 0 ? block.number : (_entries[id].lastBlock + _entries[id].blockInterval);\r\n    }\r\n\r\n    function execute(bytes32[] memory ids, bool[] memory earnByAmounts) public {\r\n        require(ids.length > 0 && ids.length == earnByAmounts.length, \"Invalid input data\");\r\n        for(uint256 i = 0; i < ids.length; i++) {\r\n            require(_entries[ids[i]].id == ids[i], \"Invalid id\");\r\n            require(block.number >= nextBlock(ids[i]), \"Too early to call index\");\r\n            FixedInflationEntry storage fixedInflationEntry = _entries[ids[i]];\r\n            fixedInflationEntry.lastBlock = block.number;\r\n            _collectFixedInflationOperationsTokens(_operations[ids[i]]);\r\n        }\r\n        IFixedInflationExtension(extension).receiveTokens(_tokensToTransfer, _tokenAmounts, _tokenMintAmounts);\r\n        for(uint256 i = 0; i < ids.length; i++) {\r\n            _execute(_entries[ids[i]], _operations[ids[i]], earnByAmounts[i], msg.sender);\r\n        }\r\n        _clearVars();\r\n    }\r\n\r\n    function _collectFixedInflationOperationsTokens(FixedInflationOperation[] memory operations) private {\r\n        for(uint256 i = 0; i < operations.length; i++) {\r\n            FixedInflationOperation memory operation = operations[i];\r\n            _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount, operation.inputTokenAmountIsPercentage, operation.inputTokenAmountIsByMint);\r\n        }\r\n    }\r\n\r\n    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount, bool inputTokenAmountIsPercentage, bool inputTokenAmountIsByMint) private {\r\n        if(inputTokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 position = _tokenIndex[inputTokenAddress];\r\n\r\n        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\r\n            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\r\n            _tokensToTransfer.push(inputTokenAddress);\r\n            _tokenAmounts.push(0);\r\n            _tokenMintAmounts.push(0);\r\n        }\r\n        uint256 amount = _calculateTokenAmount(inputTokenAddress, inputTokenAmount, inputTokenAmountIsPercentage);\r\n        if(inputTokenAmountIsByMint) {\r\n            _tokenMintAmounts[position] = _tokenMintAmounts[position] + amount;\r\n        } else {\r\n            _tokenAmounts[position] = _tokenAmounts[position] + amount;\r\n        }\r\n    }\r\n\r\n    function _calculateTokenAmount(address tokenAddress, uint256 tokenAmount, bool tokenAmountIsPercentage) private returns(uint256) {\r\n        if(!tokenAmountIsPercentage) {\r\n            return tokenAmount;\r\n        }\r\n        _tokenTotalSupply[tokenAddress] = _tokenTotalSupply[tokenAddress] != 0 ? _tokenTotalSupply[tokenAddress] : IERC20(tokenAddress).totalSupply();\r\n        return (_tokenTotalSupply[tokenAddress] * ((tokenAmount * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n\r\n    function _execute(FixedInflationEntry memory fixedInflationEntry, FixedInflationOperation[] memory operations, bool earnByInput, address rewardReceiver) private {\r\n        for(uint256 i = 0 ; i < operations.length; i++) {\r\n            FixedInflationOperation memory operation = operations[i];\r\n            uint256 amountIn = _calculateTokenAmount(operation.inputTokenAddress, operation.inputTokenAmount, operation.inputTokenAmountIsPercentage);\r\n            if(operation.ammPlugin == address(0)) {\r\n                _transferTo(operation.inputTokenAddress, amountIn, rewardReceiver, fixedInflationEntry.callerRewardPercentage, operation.receivers, operation.receiversPercentages);\r\n            } else {\r\n                _swap(operation, amountIn, rewardReceiver, fixedInflationEntry.callerRewardPercentage, earnByInput);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swap(FixedInflationOperation memory operation, uint256 amountIn, address rewardReceiver, uint256 callerRewardPercentage, bool earnByInput) private {\r\n\r\n        uint256 inputReward = earnByInput ? _calculateRewardPercentage(amountIn, callerRewardPercentage) : 0;\r\n\r\n        (address ethereumAddress,,) = IAMM(operation.ammPlugin).data();\r\n\r\n        if(operation.exitInETH) {\r\n            operation.swapPath[operation.swapPath.length - 1] = ethereumAddress;\r\n        }\r\n\r\n        address outputToken = operation.swapPath[operation.swapPath.length - 1];\r\n\r\n        SwapData memory swapData = SwapData(\r\n            operation.enterInETH,\r\n            operation.exitInETH,\r\n            operation.liquidityPoolAddresses,\r\n            operation.swapPath,\r\n            operation.enterInETH ? ethereumAddress : operation.inputTokenAddress,\r\n            amountIn - inputReward,\r\n            address(this)\r\n        );\r\n\r\n        if(swapData.inputToken != address(0) && !swapData.enterInETH) {\r\n            _safeApprove(swapData.inputToken, operation.ammPlugin, swapData.amount);\r\n        }\r\n\r\n        uint256 amountOut;\r\n        if(swapData.enterInETH) {\r\n            amountOut = IAMM(operation.ammPlugin).swapLiquidity{value : amountIn}(swapData);\r\n        } else {\r\n            amountOut = IAMM(operation.ammPlugin).swapLiquidity(swapData);\r\n        }\r\n\r\n        if(earnByInput) {\r\n            _transferTo(operation.enterInETH ? address(0) : operation.inputTokenAddress, rewardReceiver, inputReward);\r\n        }\r\n        _transferTo(operation.exitInETH ? address(0) : outputToken, amountOut, earnByInput ? address(0) : rewardReceiver, earnByInput ? 0 : callerRewardPercentage, operation.receivers, operation.receiversPercentages);\r\n    }\r\n\r\n    function _calculateRewardPercentage(uint256 totalAmount, uint256 rewardPercentage) private pure returns (uint256) {\r\n        return (totalAmount * ((rewardPercentage * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n\r\n    function _transferTo(address erc20TokenAddress, uint256 totalAmount, address rewardReceiver, uint256 callerRewardPercentage, address[] memory receivers, uint256[] memory receiversPercentages) private {\r\n        uint256 availableAmount = totalAmount;\r\n\r\n        uint256 currentPartialAmount = rewardReceiver == address(0) ? 0 : _calculateRewardPercentage(totalAmount, callerRewardPercentage);\r\n        _transferTo(erc20TokenAddress, rewardReceiver, currentPartialAmount);\r\n        availableAmount -= currentPartialAmount;\r\n\r\n        (uint256 dfoFeePercentage, address dfoWallet) = IFixedInflationFactory(_factory).feePercentageInfo();\r\n        currentPartialAmount = dfoFeePercentage == 0 || dfoWallet == address(0) ? 0 : _calculateRewardPercentage(totalAmount, dfoFeePercentage);\r\n        _transferTo(erc20TokenAddress, dfoWallet, currentPartialAmount);\r\n        availableAmount -= currentPartialAmount;\r\n\r\n        for(uint256 i = 0; i < receiversPercentages.length; i++) {\r\n            _transferTo(erc20TokenAddress, receivers[i], currentPartialAmount = _calculateRewardPercentage(totalAmount, receiversPercentages[i]));\r\n            availableAmount -= currentPartialAmount;\r\n        }\r\n\r\n        _transferTo(erc20TokenAddress, receivers[receivers.length - 1], availableAmount);\r\n    }\r\n\r\n    function _transferTo(address erc20TokenAddress, address to, uint256 value) private {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            payable(to).transfer(value);\r\n            return;\r\n        }\r\n        _safeTransfer(erc20TokenAddress, to, value);\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n\r\n    function _clearVars() private {\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            if(_tokensToTransfer[i] == address(0) && _tokenAmounts[i] == 0 && _tokenMintAmounts[i] == 0) {\r\n                break;\r\n            }\r\n            delete _tokenIndex[_tokensToTransfer[i]];\r\n            delete _tokenTotalSupply[_tokensToTransfer[i]];\r\n        }\r\n        delete _tokensToTransfer;\r\n        delete _tokenAmounts;\r\n        delete _tokenMintAmounts;\r\n    }\r\n\r\n    function _add(FixedInflationEntry memory fixedInflationEntry, FixedInflationOperation[] memory operations, uint256 dfoFeePercentage) private {\r\n        emit Entry(fixedInflationEntry.id = keccak256(abi.encode(fixedInflationEntry, operations, dfoFeePercentage, msg.sender, block.number, block.timestamp)));\r\n        _entries[fixedInflationEntry.id] = fixedInflationEntry;\r\n        _setOperations(fixedInflationEntry.id, operations, dfoFeePercentage);\r\n    }\r\n\r\n    function _setOperations(bytes32 id, FixedInflationOperation[] memory operations, uint256 dfoFeePercentage) private {\r\n        require(_entries[id].id == id, \"Invalid id\");\r\n        require(operations.length > 0, \"Length > 0\");\r\n        delete _operations[id];\r\n        for(uint256 i = 0; i < operations.length; i++) {\r\n            FixedInflationOperation memory operation = operations[i];\r\n            require(operation.receivers.length > 0, \"No receivers\");\r\n            require(operation.receiversPercentages.length == (operation.receivers.length - 1), \"Percentages must be less than receivers\");\r\n            uint256 percentage = dfoFeePercentage + _entries[id].callerRewardPercentage;\r\n            for(uint256 j = 0; j < operation.receiversPercentages.length; j++) {\r\n                percentage += operation.receiversPercentages[j];\r\n                require(operation.receivers[j] != address(0), \"Void receiver\");\r\n            }\r\n            require(operation.receivers[operation.receivers.length - 1] != address(0), \"Void receiver\");\r\n            require(percentage < ONE_HUNDRED, \"More than one hundred\");\r\n            _operations[id].push(operations[i]);\r\n        }\r\n    }\r\n\r\n    function _remove(bytes32 id) private {\r\n        require(_entries[id].id == id, \"Invalid id\");\r\n        delete _entries[id];\r\n        delete _operations[id];\r\n    }\r\n\r\n    /** @dev clones the input contract address and returns the copied contract address.\r\n     * @param original address of the original contract.\r\n     * @return copy copied contract address.\r\n     */\r\n    function _clone(address original) private returns (address copy) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(original, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copy := create(0, 0, 32)\r\n            switch extcodesize(copy)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Entry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"entry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedInflationEntry\",\"name\":\"entriesArray\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsByMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedInflationOperation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"earnByAmounts\",\"type\":\"bool[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extensionPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedInflationEntry[]\",\"name\":\"newEntries\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsByMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedInflationOperation[][]\",\"name\":\"operationSets\",\"type\":\"tuple[][]\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extensionInitResult\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"nextBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedInflationEntry\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedInflationEntryConfiguration[]\",\"name\":\"newEntries\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsByMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedInflationOperation[][]\",\"name\":\"operationSets\",\"type\":\"tuple[][]\"}],\"name\":\"setEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FixedInflation","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a884ef6f1bb8f69b75b0fc813f6d97efc84f91d7d3d12ecf9f4622af39e01a83"}]}