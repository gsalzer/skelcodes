{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Corlibri_Libraries.sol\r\n\r\n// SPDX-License-Identifier: WHO GIVES A FUCK ANYWAY??\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Log(string log);\r\n\r\n}\r\n\r\n// File: contracts/Corlibri_Interfaces.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\n//CORLIBRI\r\n    interface ICorlibri {\r\n        function viewGovernanceLevel(address _address) external view returns(uint8);\r\n        function viewVault() external view returns(address);\r\n        function viewUNIv2() external view returns(address);\r\n        function viewWrappedUNIv2()external view returns(address);\r\n        function burnFromUni(uint256 _amount) external;\r\n    }\r\n\r\n//Nectar is wrapping Tokens, generates wrappped UNIv2\r\n    interface INectar {\r\n        function wrapUNIv2(uint256 amount) external;\r\n        function wTransfer(address recipient, uint256 amount) external;\r\n        function setPublicWrappingRatio(uint256 _ratioBase100) external;\r\n    }\r\n    \r\n//VAULT\r\n    interface IVault {\r\n        function updateRewards() external;\r\n    }\r\n\r\n\r\n//UNISWAP\r\n    interface IUniswapV2Factory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    \r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n        function migrator() external view returns (address);\r\n    \r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n    \r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    \r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n        function setMigrator(address) external;\r\n    }\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n    \r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n    \r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountETH);\r\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountETH);\r\n    \r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n    interface IUniswapV2Pair {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n    \r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n    \r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n    \r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n        event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n        );\r\n        event Sync(uint112 reserve0, uint112 reserve1);\r\n    \r\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n        function factory() external view returns (address);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function price0CumulativeLast() external view returns (uint);\r\n        function price1CumulativeLast() external view returns (uint);\r\n        function kLast() external view returns (uint);\r\n    \r\n        function mint(address to) external returns (uint liquidity);\r\n        function burn(address to) external returns (uint amount0, uint amount1);\r\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        function skim(address to) external;\r\n        function sync() external;\r\n    \r\n        function initialize(address, address) external;\r\n    }\r\n    interface IWETH {\r\n        function deposit() external payable;\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function withdraw(uint) external;\r\n    }\r\n\r\n// File: contracts/Corlibri_Vault.sol\r\n\r\n\r\n// but thanks a million Gwei to MIT and Zeppelin. You guys rock!!!\r\n\r\n// MAINNET VERSION.\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n// Vault distributes fees equally amongst staked pools\r\n\r\ncontract Corlibri_Vault {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    address public Corlibri; //token address\r\n    \r\n    /*\r\n    address public Treasury1;\r\n    address public Treasury2;\r\n    address public Treasury3; */\r\n    address public Treasury;\r\n    uint256 public treasuryFee;\r\n    uint256 public pendingTreasuryRewards;\r\n    \r\n\r\n//USERS METRICS\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided.\r\n        uint256 rewardPaid; // Already Paid. See explanation below.\r\n        //  pending reward = (user.amount * pool.CorlibriPerShare) - user.rewardPaid\r\n    }\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    \r\n//POOL METRICS\r\n    struct PoolInfo {\r\n        address stakedToken;                // Address of staked token contract.\r\n        uint256 allocPoint;           // How many allocation points assigned to this pool. Corlibris to distribute per block. (ETH = 2.3M blocks per year)\r\n        uint256 accCorlibriPerShare;   // Accumulated Corlibris per share, times 1e18. See below.\r\n        bool withdrawable;            // Is this pool withdrawable or not\r\n        \r\n        mapping(address => mapping(address => uint256)) allowance;\r\n    }\r\n    PoolInfo[] public poolInfo;\r\n\r\n    uint256 public totalAllocPoint;     // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public pendingRewards;      // pending rewards awaiting anyone to massUpdate\r\n    uint256 public contractStartBlock;\r\n    uint256 public epochCalculationStartBlock;\r\n    uint256 public cumulativeRewardsSinceStart;\r\n    uint256 public rewardsInThisEpoch;\r\n    uint public epoch;\r\n\r\n//EVENTS\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 _pid, uint256 value);\r\n\r\n    \r\n//INITIALIZE \r\n    constructor(address _Corlibri) public {\r\n\r\n        Corlibri = _Corlibri;\r\n\r\n        Treasury = address(msg.sender); // deployer address set as treasury for simplicity. can be set/changed to distribution contract in future\r\n        \r\n        treasuryFee = 1500; // 15%\r\n        \r\n        contractStartBlock = block.number;\r\n    }\r\n    \r\n//==================================================================================================================================\r\n//POOL\r\n    \r\n //view stuff\r\n \r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length; //number of pools (per pid)\r\n    }\r\n    \r\n    // Returns fees generated since start of this contract\r\n    function averageFeesPerBlockSinceStart() external view returns (uint averagePerBlock) {\r\n        averagePerBlock = cumulativeRewardsSinceStart.add(rewardsInThisEpoch).div(block.number.sub(contractStartBlock));\r\n    }\r\n\r\n    // Returns averge fees in this epoch\r\n    function averageFeesPerBlockEpoch() external view returns (uint256 averagePerBlock) {\r\n        averagePerBlock = rewardsInThisEpoch.div(block.number.sub(epochCalculationStartBlock));\r\n    }\r\n\r\n    // For easy graphing historical epoch rewards\r\n    mapping(uint => uint256) public epochRewards;\r\n\r\n //set stuff (govenrors)\r\n\r\n    // Add a new token pool. Can only be called by governors.\r\n    function addPool( uint256 _allocPoint, address _stakedToken, bool _withdrawable) public governanceLevel(2) {\r\n        require(_allocPoint > 0, \"Zero alloc points not allowed\");\r\n        nonWithdrawableByAdmin[_stakedToken] = true; // stakedToken is now non-withdrawable by the admins.\r\n        \r\n        /* @dev Addressing potential issues with zombie pools.\r\n        *  https://medium.com/@DraculaProtocol/sushiswap-smart-contract-bug-and-quality-of-audits-in-community-f50ee0545bc6\r\n        *  Thank you @DraculaProtocol for this interesting post.\r\n        */\r\n        massUpdatePools();\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            require(poolInfo[pid].stakedToken != _stakedToken,\"Error pool already added\");\r\n        }\r\n\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint); //pre-allocation\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                stakedToken: _stakedToken,\r\n                allocPoint: _allocPoint,\r\n                accCorlibriPerShare: 0,\r\n                withdrawable : _withdrawable\r\n            })\r\n        );\r\n    }\r\n\r\n    // Updates the given pool's  allocation points. Can only be called with right governance levels.\r\n    function setPool(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public governanceLevel(2) {\r\n        require(_allocPoint > 0, \"Zero alloc points not allowed\");\r\n        if (_withUpdate) {massUpdatePools();}\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Update the given pool's ability to withdraw tokens\r\n    function setPoolWithdrawable(uint256 _pid, bool _withdrawable) public governanceLevel(2) {\r\n        poolInfo[_pid].withdrawable = _withdrawable;\r\n    }\r\n    \r\n //set stuff (anybody)\r\n  \r\n    //Starts a new calculation epoch; Because average since start will not be accurate\r\n    function startNewEpoch() public {\r\n        require(epochCalculationStartBlock + 50000 < block.number, \"New epoch not ready yet\"); // 50k blocks = About a week\r\n        epochRewards[epoch] = rewardsInThisEpoch;\r\n        cumulativeRewardsSinceStart = cumulativeRewardsSinceStart.add(rewardsInThisEpoch);\r\n        rewardsInThisEpoch = 0;\r\n        epochCalculationStartBlock = block.number;\r\n        ++epoch;\r\n    }\r\n    \r\n    // Updates the reward variables of the given pool\r\n    function updatePool(uint256 _pid) internal returns (uint256 CorlibriRewardWhole) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        uint256 tokenSupply = IERC20(pool.stakedToken).balanceOf(address(this));\r\n        if (tokenSupply == 0) { // avoids division by 0 errors\r\n            return 0;\r\n        }\r\n        CorlibriRewardWhole = pendingRewards     // Multiplies pending rewards by allocation point of this pool and then total allocation\r\n            .mul(pool.allocPoint)               // getting the percent of total pending rewards this pool should get\r\n            .div(totalAllocPoint);              // we can do this because pools are only mass updated\r\n        \r\n        uint256 CorlibriRewardFee = CorlibriRewardWhole.mul(treasuryFee).div(10000);\r\n        uint256 CorlibriRewardToDistribute = CorlibriRewardWhole.sub(CorlibriRewardFee);\r\n\r\n        pendingTreasuryRewards = pendingTreasuryRewards.add(CorlibriRewardFee);\r\n\r\n        pool.accCorlibriPerShare = pool.accCorlibriPerShare.add(CorlibriRewardToDistribute.mul(1e18).div(tokenSupply));\r\n    }\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length; \r\n        uint allRewards;\r\n        \r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            allRewards = allRewards.add(updatePool(pid)); //calls updatePool(pid)\r\n        }\r\n        pendingRewards = pendingRewards.sub(allRewards);\r\n    }\r\n    \r\n    //payout of Corlibri Rewards, uses SafeCorlibriTransfer\r\n    function updateAndPayOutPending(uint256 _pid, address user) internal {\r\n        \r\n        massUpdatePools();\r\n\r\n        uint256 pending = pendingCorlibri(_pid, user);\r\n\r\n        safeCorlibriTransfer(user, pending);\r\n    }\r\n    \r\n    \r\n    // Safe Corlibri transfer function, Manages rounding errors.\r\n    function safeCorlibriTransfer(address _to, uint256 _amount) internal {\r\n        if(_amount == 0) return;\r\n\r\n        uint256 CorlibriBal = IERC20(Corlibri).balanceOf(address(this));\r\n        if (_amount >= CorlibriBal) { IERC20(Corlibri).transfer(_to, CorlibriBal);} \r\n        else { IERC20(Corlibri).transfer(_to, _amount);}\r\n\r\n        transferTreasuryFees(); //adds unecessary gas for users, team can trigger the function manually\r\n        CorlibriBalance = IERC20(Corlibri).balanceOf(address(this));\r\n    }\r\n\r\n//external call from token when rewards are loaded\r\n\r\n    /* @dev called by the token after each fee transfer to the vault.\r\n    *       updates the pendingRewards and the rewardsInThisEpoch variables\r\n    */      \r\n    modifier onlyCorlibri() {\r\n        require(msg.sender == Corlibri);\r\n        _;\r\n    }\r\n    \r\n    uint256 private CorlibriBalance;\r\n    function updateRewards() external onlyCorlibri {  //function addPendingRewards(uint256 _) for CORE\r\n        uint256 newRewards = IERC20(Corlibri).balanceOf(address(this)).sub(CorlibriBalance); //delta vs previous balanceOf\r\n\r\n        if(newRewards > 0) {\r\n            CorlibriBalance =  IERC20(Corlibri).balanceOf(address(this)); //balance snapshot\r\n            pendingRewards = pendingRewards.add(newRewards);\r\n            rewardsInThisEpoch = rewardsInThisEpoch.add(newRewards);\r\n        }\r\n    }\r\n\r\n//==================================================================================================================================\r\n//USERS\r\n\r\n    \r\n    /* protects from a potential reentrancy in Deposits and Withdraws \r\n     * users can only make 1 deposit or 1 wd per block\r\n     */\r\n     \r\n    mapping(address => uint256) private lastTXBlock;\r\n    modifier NoReentrant(address _address) {\r\n        require(block.number > lastTXBlock[_address], \"Wait 1 block between each deposit/withdrawal\");\r\n        _;\r\n    }\r\n    \r\n    // Deposit tokens to Vault to get allocation rewards\r\n    function deposit(uint256 _pid, uint256 _amount) external NoReentrant(msg.sender) {\r\n        lastTXBlock[msg.sender] = block.number;\r\n        \r\n        require(_amount > 0, \"cannot deposit zero tokens\");\r\n        \r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        updateAndPayOutPending(_pid, msg.sender); //Transfer pending tokens, updates the pools \r\n\r\n        //Transfer the amounts from user\r\n        IERC20(pool.stakedToken).transferFrom(msg.sender, address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n\r\n        //Finalize\r\n        user.rewardPaid = user.amount.mul(pool.accCorlibriPerShare).div(1e18);\r\n        \r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens from Vault.\r\n    function withdraw(uint256 _pid, uint256 _amount) external NoReentrant(msg.sender) {\r\n        lastTXBlock[msg.sender] = block.number;\r\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\r\n        transferTreasuryFees(); //incurs a gas penalty -> treasury fees transfer\r\n        ICorlibri(Corlibri).burnFromUni(_amount); //performs the burn on UniSwap pool\r\n    }\r\n    function _withdraw(uint256 _pid, uint256 _amount, address from, address to) internal {\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(pool.withdrawable, \"Withdrawing from this pool is disabled\");\r\n        \r\n        UserInfo storage user = userInfo[_pid][from];\r\n        require(user.amount >= _amount, \"withdraw: user amount insufficient\");\r\n\r\n        updateAndPayOutPending(_pid, from); // //Transfer pending tokens, massupdates the pools \r\n\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            IERC20(pool.stakedToken).transfer(address(to), _amount);\r\n        }\r\n        user.rewardPaid = user.amount.mul(pool.accCorlibriPerShare).div(1e18);\r\n\r\n        emit Withdraw(to, _pid, _amount);\r\n    }\r\n\r\n    // Getter function to see pending Corlibri rewards per user.\r\n    function pendingCorlibri(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCorlibriPerShare = pool.accCorlibriPerShare;\r\n\r\n        return user.amount.mul(accCorlibriPerShare).div(1e18).sub(user.rewardPaid);\r\n    }\r\n\r\n//==================================================================================================================================\r\n//TREASURY \r\n\r\n    function transferTreasuryFees() public {\r\n        if(pendingTreasuryRewards == 0) return;\r\n\r\n        uint256 Corlibribal = IERC20(Corlibri).balanceOf(address(this));\r\n        \r\n        /* //splitRewards\r\n        uint256 rewards3 = pendingTreasuryRewards.mul(19).div(100); //stpd\r\n        uint256 rewards2 = pendingTreasuryRewards.mul(19).div(100); //qtsr\r\n        uint256 rewards1 = pendingTreasuryRewards.sub(rewards3).sub(rewards2); //team -> could */\r\n\r\n        uint256 rewards = pendingTreasuryRewards; // main\r\n        \r\n        \r\n        //manages overflows or bad math\r\n        if (pendingTreasuryRewards > Corlibribal) {\r\n            /* rewards3 = Corlibribal.mul(19).div(100); //stpd\r\n            rewards2 = Corlibribal.mul(19).div(100); //qtsr\r\n            rewards1 = Corlibribal.sub(rewards3).sub(rewards2); //team */\r\n            \r\n            rewards = Corlibribal; // main\r\n        } \r\n\r\n            /*\r\n            IERC20(Corlibri).transfer(Treasury3, rewards3);\r\n            IERC20(Corlibri).transfer(Treasury2, rewards2);\r\n            IERC20(Corlibri).transfer(Treasury1, rewards1); */\r\n\r\n            IERC20(Corlibri).transfer(Treasury, rewards);\r\n\r\n            CorlibriBalance = IERC20(Corlibri).balanceOf(address(this));\r\n        \r\n            pendingTreasuryRewards = 0;\r\n    }\r\n\r\n\r\n//==================================================================================================================================\r\n//GOVERNANCE & UTILS\r\n\r\n//Governance inherited from governance levels of CorlibriVaultAddress\r\n    function viewGovernanceLevel(address _address) public view returns(uint8) {\r\n        return ICorlibri(Corlibri).viewGovernanceLevel(_address);\r\n    }\r\n    \r\n    modifier governanceLevel(uint8 _level){\r\n        require(viewGovernanceLevel(msg.sender) >= _level, \"Grow some mustache kiddo...\");\r\n        _;\r\n    }\r\n    \r\n    function setTreasuryFee(uint256 _newFee) public governanceLevel(2) {\r\n        require(_newFee <= 150, \"treasuryFee capped at 15%\");\r\n        treasuryFee = _newFee;\r\n    }\r\n\r\n    function chgTreasury(address _new) public {\r\n        require(msg.sender == Treasury, \"Treasury holder only\");\r\n        Treasury = _new;\r\n    }\r\n\r\n// utils    \r\n    mapping(address => bool) nonWithdrawableByAdmin;\r\n    function isNonWithdrawbleByAdmins(address _token) public view returns(bool) {\r\n        return nonWithdrawableByAdmin[_token];\r\n    }\r\n    function _withdrawAnyToken(address _recipient, address _ERC20address, uint256 _amount) public governanceLevel(2) returns(bool) {\r\n        require(_ERC20address != Corlibri, \"Cannot withdraw Corlibri from the pools\");\r\n        require(!nonWithdrawableByAdmin[_ERC20address], \"this token is into a pool and cannot we withdrawn\");\r\n        IERC20(_ERC20address).transfer(_recipient, _amount); //use of the _ERC20 traditional transfer\r\n        return true;\r\n    } //get tokens sent by error, except Corlibri and those used for Staking.\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Corlibri\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Corlibri\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawAnyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageFeesPerBlockEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"averagePerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageFeesPerBlockSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"averagePerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"chgTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardsSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCalculationStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isNonWithdrawbleByAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCorlibri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTreasuryRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCorlibriPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInThisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"setPoolWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTreasuryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewGovernanceLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Corlibri_Vault","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a83ff602675beca077093049ddd3b7aa5e42da2a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://011eb2e57036fdd13cee9c3947b1985a0b827412d61afd537545fbd286ce25db"}]}