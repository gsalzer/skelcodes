{"status":"1","message":"OK","result":[{"SourceCode":"{\"CpuOods.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\nimport \\\"MemoryMap.sol\\\";\\nimport \\\"StarkParameters.sol\\\";\\n\\ncontract CpuOods is MemoryMap, StarkParameters {\\n    // For each query point we want to invert (2 + N_ROWS_IN_MASK) items:\\n    //  The query point itself (x).\\n    //  The denominator for the constraint polynomial (x-z^constraintDegree)\\n    //  [(x-(g^rowNumber)z) for rowNumber in mask].\\n    uint256 constant internal BATCH_INVERSE_CHUNK = (2 + N_ROWS_IN_MASK);\\n    uint256 constant internal BATCH_INVERSE_SIZE = MAX_N_QUERIES * BATCH_INVERSE_CHUNK;\\n\\n    /*\\n      Builds and sums boundary constraints that check that the prover provided the proper evaluations\\n      out of domain evaluations for the trace and composition columns.\\n\\n      The inputs to this function are:\\n          The verifier context.\\n\\n      The boundary constraints for the trace enforce claims of the form f(g^k*z) = c by\\n      requiring the quotient (f(x) - c)/(x-g^k*z) to be a low degree polynomial.\\n\\n      The boundary constraints for the composition enforce claims of the form h(z^d) = c by\\n      requiring the quotient (h(x) - c)/(x-z^d) to be a low degree polynomial.\\n      Where:\\n            f is a trace column.\\n            h is a composition column.\\n            z is the out of domain sampling point.\\n            g is the trace generator\\n            k is the offset in the mask.\\n            d is the degree of the composition polynomial.\\n            c is the evaluation sent by the prover.\\n    */\\n    fallback() external {\\n        // This funciton assumes that the calldata contains the context as defined in MemoryMap.sol.\\n        // Note that ctx is a variable size array so the first uint256 cell contrains it\\u0027s length.\\n        uint256[] memory ctx;\\n        assembly {\\n            let ctxSize := mul(add(calldataload(0), 1), 0x20)\\n            ctx := mload(0x40)\\n            mstore(0x40, add(ctx, ctxSize))\\n            calldatacopy(ctx, 0, ctxSize)\\n        }\\n        uint256[] memory batchInverseArray = new uint256[](2 * BATCH_INVERSE_SIZE);\\n\\n        oodsPrepareInverses(ctx, batchInverseArray);\\n\\n        uint256 kMontgomeryRInv_ = PrimeFieldElement0.K_MONTGOMERY_R_INV;\\n\\n        assembly {\\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\\n            let kMontgomeryRInv := kMontgomeryRInv_\\n            let context := ctx\\n            let friQueue := /*friQueue*/ add(context, 0xdc0)\\n            let friQueueEnd := add(friQueue,  mul(/*n_unique_queries*/ mload(add(context, 0x140)), 0x60))\\n            let traceQueryResponses := /*traceQueryQesponses*/ add(context, 0x9140)\\n\\n            let compositionQueryResponses := /*composition_query_responses*/ add(context, 0x11540)\\n\\n            // Set denominatorsPtr to point to the batchInverseOut array.\\n            // The content of batchInverseOut is described in oodsPrepareInverses.\\n            let denominatorsPtr := add(batchInverseArray, 0x20)\\n\\n            for {} lt(friQueue, friQueueEnd) {friQueue := add(friQueue, 0x60)} {\\n                // res accumulates numbers modulo PRIME. Since 31*PRIME \\u003c 2**256, we may add up to\\n                // 31 numbers without fear of overflow, and use addmod modulo PRIME only every\\n                // 31 iterations, and once more at the very end.\\n                let res := 0\\n\\n                // Trace constraints.\\n\\n                // Mask items for column #0.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(traceQueryResponses), kMontgomeryRInv, PRIME)\\n\\n                // res += c_0*(f_0(x) - f_0(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[0]*/ mload(add(context, 0x7760)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[0]*/ mload(add(context, 0x5780)))),\\n                           PRIME))\\n\\n                // res += c_1*(f_0(x) - f_0(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[1]*/ mload(add(context, 0x7780)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[1]*/ mload(add(context, 0x57a0)))),\\n                           PRIME))\\n\\n                // res += c_2*(f_0(x) - f_0(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[2]*/ mload(add(context, 0x77a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[2]*/ mload(add(context, 0x57c0)))),\\n                           PRIME))\\n\\n                // res += c_3*(f_0(x) - f_0(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[3]*/ mload(add(context, 0x77c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[3]*/ mload(add(context, 0x57e0)))),\\n                           PRIME))\\n\\n                // res += c_4*(f_0(x) - f_0(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[4]*/ mload(add(context, 0x77e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[4]*/ mload(add(context, 0x5800)))),\\n                           PRIME))\\n\\n                // res += c_5*(f_0(x) - f_0(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[5]*/ mload(add(context, 0x7800)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[5]*/ mload(add(context, 0x5820)))),\\n                           PRIME))\\n\\n                // res += c_6*(f_0(x) - f_0(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[6]*/ mload(add(context, 0x7820)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[6]*/ mload(add(context, 0x5840)))),\\n                           PRIME))\\n\\n                // res += c_7*(f_0(x) - f_0(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[7]*/ mload(add(context, 0x7840)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[7]*/ mload(add(context, 0x5860)))),\\n                           PRIME))\\n\\n                // res += c_8*(f_0(x) - f_0(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[8]*/ mload(add(context, 0x7860)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[8]*/ mload(add(context, 0x5880)))),\\n                           PRIME))\\n\\n                // res += c_9*(f_0(x) - f_0(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[9]*/ mload(add(context, 0x7880)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[9]*/ mload(add(context, 0x58a0)))),\\n                           PRIME))\\n\\n                // res += c_10*(f_0(x) - f_0(g^10 * z)) / (x - g^10 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^10 * z)^(-1)*/ mload(add(denominatorsPtr, 0x140)),\\n                                  /*oods_coefficients[10]*/ mload(add(context, 0x78a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[10]*/ mload(add(context, 0x58c0)))),\\n                           PRIME))\\n\\n                // res += c_11*(f_0(x) - f_0(g^11 * z)) / (x - g^11 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^11 * z)^(-1)*/ mload(add(denominatorsPtr, 0x160)),\\n                                  /*oods_coefficients[11]*/ mload(add(context, 0x78c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[11]*/ mload(add(context, 0x58e0)))),\\n                           PRIME))\\n\\n                // res += c_12*(f_0(x) - f_0(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[12]*/ mload(add(context, 0x78e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[12]*/ mload(add(context, 0x5900)))),\\n                           PRIME))\\n\\n                // res += c_13*(f_0(x) - f_0(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[13]*/ mload(add(context, 0x7900)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[13]*/ mload(add(context, 0x5920)))),\\n                           PRIME))\\n\\n                // res += c_14*(f_0(x) - f_0(g^14 * z)) / (x - g^14 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^14 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1c0)),\\n                                  /*oods_coefficients[14]*/ mload(add(context, 0x7920)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[14]*/ mload(add(context, 0x5940)))),\\n                           PRIME))\\n\\n                // res += c_15*(f_0(x) - f_0(g^15 * z)) / (x - g^15 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^15 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1e0)),\\n                                  /*oods_coefficients[15]*/ mload(add(context, 0x7940)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[15]*/ mload(add(context, 0x5960)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #1.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x20)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_16*(f_1(x) - f_1(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[16]*/ mload(add(context, 0x7960)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[16]*/ mload(add(context, 0x5980)))),\\n                           PRIME))\\n\\n                // res += c_17*(f_1(x) - f_1(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[17]*/ mload(add(context, 0x7980)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[17]*/ mload(add(context, 0x59a0)))),\\n                           PRIME))\\n\\n                // res += c_18*(f_1(x) - f_1(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[18]*/ mload(add(context, 0x79a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[18]*/ mload(add(context, 0x59c0)))),\\n                           PRIME))\\n\\n                // res += c_19*(f_1(x) - f_1(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[19]*/ mload(add(context, 0x79c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[19]*/ mload(add(context, 0x59e0)))),\\n                           PRIME))\\n\\n                // res += c_20*(f_1(x) - f_1(g^511 * z)) / (x - g^511 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^511 * z)^(-1)*/ mload(add(denominatorsPtr, 0x880)),\\n                                  /*oods_coefficients[20]*/ mload(add(context, 0x79e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[20]*/ mload(add(context, 0x5a00)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #2.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x40)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_21*(f_2(x) - f_2(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[21]*/ mload(add(context, 0x7a00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[21]*/ mload(add(context, 0x5a20)))),\\n                           PRIME))\\n\\n                // res += c_22*(f_2(x) - f_2(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[22]*/ mload(add(context, 0x7a20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[22]*/ mload(add(context, 0x5a40)))),\\n                           PRIME))\\n\\n                // res += c_23*(f_2(x) - f_2(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[23]*/ mload(add(context, 0x7a40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[23]*/ mload(add(context, 0x5a60)))),\\n                           PRIME))\\n\\n                // res += c_24*(f_2(x) - f_2(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[24]*/ mload(add(context, 0x7a60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[24]*/ mload(add(context, 0x5a80)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #3.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x60)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_25*(f_3(x) - f_3(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[25]*/ mload(add(context, 0x7a80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[25]*/ mload(add(context, 0x5aa0)))),\\n                           PRIME))\\n\\n                // res += c_26*(f_3(x) - f_3(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[26]*/ mload(add(context, 0x7aa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[26]*/ mload(add(context, 0x5ac0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #4.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x80)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_27*(f_4(x) - f_4(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[27]*/ mload(add(context, 0x7ac0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[27]*/ mload(add(context, 0x5ae0)))),\\n                           PRIME))\\n\\n                // res += c_28*(f_4(x) - f_4(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[28]*/ mload(add(context, 0x7ae0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[28]*/ mload(add(context, 0x5b00)))),\\n                           PRIME))\\n\\n                // res += c_29*(f_4(x) - f_4(g^192 * z)) / (x - g^192 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x640)),\\n                                  /*oods_coefficients[29]*/ mload(add(context, 0x7b00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[29]*/ mload(add(context, 0x5b20)))),\\n                           PRIME))\\n\\n                // res += c_30*(f_4(x) - f_4(g^193 * z)) / (x - g^193 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^193 * z)^(-1)*/ mload(add(denominatorsPtr, 0x660)),\\n                                  /*oods_coefficients[30]*/ mload(add(context, 0x7b20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[30]*/ mload(add(context, 0x5b40)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_31*(f_4(x) - f_4(g^196 * z)) / (x - g^196 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^196 * z)^(-1)*/ mload(add(denominatorsPtr, 0x680)),\\n                                  /*oods_coefficients[31]*/ mload(add(context, 0x7b40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[31]*/ mload(add(context, 0x5b60)))),\\n                           PRIME))\\n\\n                // res += c_32*(f_4(x) - f_4(g^197 * z)) / (x - g^197 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^197 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6a0)),\\n                                  /*oods_coefficients[32]*/ mload(add(context, 0x7b60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[32]*/ mload(add(context, 0x5b80)))),\\n                           PRIME))\\n\\n                // res += c_33*(f_4(x) - f_4(g^251 * z)) / (x - g^251 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^251 * z)^(-1)*/ mload(add(denominatorsPtr, 0x720)),\\n                                  /*oods_coefficients[33]*/ mload(add(context, 0x7b80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[33]*/ mload(add(context, 0x5ba0)))),\\n                           PRIME))\\n\\n                // res += c_34*(f_4(x) - f_4(g^252 * z)) / (x - g^252 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^252 * z)^(-1)*/ mload(add(denominatorsPtr, 0x740)),\\n                                  /*oods_coefficients[34]*/ mload(add(context, 0x7ba0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[34]*/ mload(add(context, 0x5bc0)))),\\n                           PRIME))\\n\\n                // res += c_35*(f_4(x) - f_4(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[35]*/ mload(add(context, 0x7bc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[35]*/ mload(add(context, 0x5be0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #5.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xa0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_36*(f_5(x) - f_5(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[36]*/ mload(add(context, 0x7be0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[36]*/ mload(add(context, 0x5c00)))),\\n                           PRIME))\\n\\n                // res += c_37*(f_5(x) - f_5(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[37]*/ mload(add(context, 0x7c00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[37]*/ mload(add(context, 0x5c20)))),\\n                           PRIME))\\n\\n                // res += c_38*(f_5(x) - f_5(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[38]*/ mload(add(context, 0x7c20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[38]*/ mload(add(context, 0x5c40)))),\\n                           PRIME))\\n\\n                // res += c_39*(f_5(x) - f_5(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[39]*/ mload(add(context, 0x7c40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[39]*/ mload(add(context, 0x5c60)))),\\n                           PRIME))\\n\\n                // res += c_40*(f_5(x) - f_5(g^511 * z)) / (x - g^511 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^511 * z)^(-1)*/ mload(add(denominatorsPtr, 0x880)),\\n                                  /*oods_coefficients[40]*/ mload(add(context, 0x7c60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[40]*/ mload(add(context, 0x5c80)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #6.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xc0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_41*(f_6(x) - f_6(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[41]*/ mload(add(context, 0x7c80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[41]*/ mload(add(context, 0x5ca0)))),\\n                           PRIME))\\n\\n                // res += c_42*(f_6(x) - f_6(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[42]*/ mload(add(context, 0x7ca0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[42]*/ mload(add(context, 0x5cc0)))),\\n                           PRIME))\\n\\n                // res += c_43*(f_6(x) - f_6(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[43]*/ mload(add(context, 0x7cc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[43]*/ mload(add(context, 0x5ce0)))),\\n                           PRIME))\\n\\n                // res += c_44*(f_6(x) - f_6(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[44]*/ mload(add(context, 0x7ce0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[44]*/ mload(add(context, 0x5d00)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #7.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xe0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_45*(f_7(x) - f_7(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[45]*/ mload(add(context, 0x7d00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[45]*/ mload(add(context, 0x5d20)))),\\n                           PRIME))\\n\\n                // res += c_46*(f_7(x) - f_7(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[46]*/ mload(add(context, 0x7d20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[46]*/ mload(add(context, 0x5d40)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #8.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x100)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_47*(f_8(x) - f_8(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[47]*/ mload(add(context, 0x7d40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[47]*/ mload(add(context, 0x5d60)))),\\n                           PRIME))\\n\\n                // res += c_48*(f_8(x) - f_8(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[48]*/ mload(add(context, 0x7d60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[48]*/ mload(add(context, 0x5d80)))),\\n                           PRIME))\\n\\n                // res += c_49*(f_8(x) - f_8(g^192 * z)) / (x - g^192 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x640)),\\n                                  /*oods_coefficients[49]*/ mload(add(context, 0x7d80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[49]*/ mload(add(context, 0x5da0)))),\\n                           PRIME))\\n\\n                // res += c_50*(f_8(x) - f_8(g^193 * z)) / (x - g^193 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^193 * z)^(-1)*/ mload(add(denominatorsPtr, 0x660)),\\n                                  /*oods_coefficients[50]*/ mload(add(context, 0x7da0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[50]*/ mload(add(context, 0x5dc0)))),\\n                           PRIME))\\n\\n                // res += c_51*(f_8(x) - f_8(g^196 * z)) / (x - g^196 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^196 * z)^(-1)*/ mload(add(denominatorsPtr, 0x680)),\\n                                  /*oods_coefficients[51]*/ mload(add(context, 0x7dc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[51]*/ mload(add(context, 0x5de0)))),\\n                           PRIME))\\n\\n                // res += c_52*(f_8(x) - f_8(g^197 * z)) / (x - g^197 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^197 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6a0)),\\n                                  /*oods_coefficients[52]*/ mload(add(context, 0x7de0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[52]*/ mload(add(context, 0x5e00)))),\\n                           PRIME))\\n\\n                // res += c_53*(f_8(x) - f_8(g^251 * z)) / (x - g^251 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^251 * z)^(-1)*/ mload(add(denominatorsPtr, 0x720)),\\n                                  /*oods_coefficients[53]*/ mload(add(context, 0x7e00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[53]*/ mload(add(context, 0x5e20)))),\\n                           PRIME))\\n\\n                // res += c_54*(f_8(x) - f_8(g^252 * z)) / (x - g^252 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^252 * z)^(-1)*/ mload(add(denominatorsPtr, 0x740)),\\n                                  /*oods_coefficients[54]*/ mload(add(context, 0x7e20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[54]*/ mload(add(context, 0x5e40)))),\\n                           PRIME))\\n\\n                // res += c_55*(f_8(x) - f_8(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[55]*/ mload(add(context, 0x7e40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[55]*/ mload(add(context, 0x5e60)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #9.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x120)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_56*(f_9(x) - f_9(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[56]*/ mload(add(context, 0x7e60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[56]*/ mload(add(context, 0x5e80)))),\\n                           PRIME))\\n\\n                // res += c_57*(f_9(x) - f_9(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[57]*/ mload(add(context, 0x7e80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[57]*/ mload(add(context, 0x5ea0)))),\\n                           PRIME))\\n\\n                // res += c_58*(f_9(x) - f_9(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[58]*/ mload(add(context, 0x7ea0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[58]*/ mload(add(context, 0x5ec0)))),\\n                           PRIME))\\n\\n                // res += c_59*(f_9(x) - f_9(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[59]*/ mload(add(context, 0x7ec0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[59]*/ mload(add(context, 0x5ee0)))),\\n                           PRIME))\\n\\n                // res += c_60*(f_9(x) - f_9(g^511 * z)) / (x - g^511 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^511 * z)^(-1)*/ mload(add(denominatorsPtr, 0x880)),\\n                                  /*oods_coefficients[60]*/ mload(add(context, 0x7ee0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[60]*/ mload(add(context, 0x5f00)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #10.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x140)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_61*(f_10(x) - f_10(z)) / (x - z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[61]*/ mload(add(context, 0x7f00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[61]*/ mload(add(context, 0x5f20)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_62*(f_10(x) - f_10(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[62]*/ mload(add(context, 0x7f20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[62]*/ mload(add(context, 0x5f40)))),\\n                           PRIME))\\n\\n                // res += c_63*(f_10(x) - f_10(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[63]*/ mload(add(context, 0x7f40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[63]*/ mload(add(context, 0x5f60)))),\\n                           PRIME))\\n\\n                // res += c_64*(f_10(x) - f_10(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[64]*/ mload(add(context, 0x7f60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[64]*/ mload(add(context, 0x5f80)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #11.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x160)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_65*(f_11(x) - f_11(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[65]*/ mload(add(context, 0x7f80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[65]*/ mload(add(context, 0x5fa0)))),\\n                           PRIME))\\n\\n                // res += c_66*(f_11(x) - f_11(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[66]*/ mload(add(context, 0x7fa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[66]*/ mload(add(context, 0x5fc0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #12.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x180)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_67*(f_12(x) - f_12(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[67]*/ mload(add(context, 0x7fc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[67]*/ mload(add(context, 0x5fe0)))),\\n                           PRIME))\\n\\n                // res += c_68*(f_12(x) - f_12(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[68]*/ mload(add(context, 0x7fe0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[68]*/ mload(add(context, 0x6000)))),\\n                           PRIME))\\n\\n                // res += c_69*(f_12(x) - f_12(g^192 * z)) / (x - g^192 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x640)),\\n                                  /*oods_coefficients[69]*/ mload(add(context, 0x8000)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[69]*/ mload(add(context, 0x6020)))),\\n                           PRIME))\\n\\n                // res += c_70*(f_12(x) - f_12(g^193 * z)) / (x - g^193 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^193 * z)^(-1)*/ mload(add(denominatorsPtr, 0x660)),\\n                                  /*oods_coefficients[70]*/ mload(add(context, 0x8020)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[70]*/ mload(add(context, 0x6040)))),\\n                           PRIME))\\n\\n                // res += c_71*(f_12(x) - f_12(g^196 * z)) / (x - g^196 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^196 * z)^(-1)*/ mload(add(denominatorsPtr, 0x680)),\\n                                  /*oods_coefficients[71]*/ mload(add(context, 0x8040)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[71]*/ mload(add(context, 0x6060)))),\\n                           PRIME))\\n\\n                // res += c_72*(f_12(x) - f_12(g^197 * z)) / (x - g^197 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^197 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6a0)),\\n                                  /*oods_coefficients[72]*/ mload(add(context, 0x8060)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[72]*/ mload(add(context, 0x6080)))),\\n                           PRIME))\\n\\n                // res += c_73*(f_12(x) - f_12(g^251 * z)) / (x - g^251 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^251 * z)^(-1)*/ mload(add(denominatorsPtr, 0x720)),\\n                                  /*oods_coefficients[73]*/ mload(add(context, 0x8080)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[73]*/ mload(add(context, 0x60a0)))),\\n                           PRIME))\\n\\n                // res += c_74*(f_12(x) - f_12(g^252 * z)) / (x - g^252 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^252 * z)^(-1)*/ mload(add(denominatorsPtr, 0x740)),\\n                                  /*oods_coefficients[74]*/ mload(add(context, 0x80a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[74]*/ mload(add(context, 0x60c0)))),\\n                           PRIME))\\n\\n                // res += c_75*(f_12(x) - f_12(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[75]*/ mload(add(context, 0x80c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[75]*/ mload(add(context, 0x60e0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #13.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x1a0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_76*(f_13(x) - f_13(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[76]*/ mload(add(context, 0x80e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[76]*/ mload(add(context, 0x6100)))),\\n                           PRIME))\\n\\n                // res += c_77*(f_13(x) - f_13(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[77]*/ mload(add(context, 0x8100)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[77]*/ mload(add(context, 0x6120)))),\\n                           PRIME))\\n\\n                // res += c_78*(f_13(x) - f_13(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[78]*/ mload(add(context, 0x8120)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[78]*/ mload(add(context, 0x6140)))),\\n                           PRIME))\\n\\n                // res += c_79*(f_13(x) - f_13(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[79]*/ mload(add(context, 0x8140)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[79]*/ mload(add(context, 0x6160)))),\\n                           PRIME))\\n\\n                // res += c_80*(f_13(x) - f_13(g^511 * z)) / (x - g^511 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^511 * z)^(-1)*/ mload(add(denominatorsPtr, 0x880)),\\n                                  /*oods_coefficients[80]*/ mload(add(context, 0x8160)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[80]*/ mload(add(context, 0x6180)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #14.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x1c0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_81*(f_14(x) - f_14(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[81]*/ mload(add(context, 0x8180)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[81]*/ mload(add(context, 0x61a0)))),\\n                           PRIME))\\n\\n                // res += c_82*(f_14(x) - f_14(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[82]*/ mload(add(context, 0x81a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[82]*/ mload(add(context, 0x61c0)))),\\n                           PRIME))\\n\\n                // res += c_83*(f_14(x) - f_14(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[83]*/ mload(add(context, 0x81c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[83]*/ mload(add(context, 0x61e0)))),\\n                           PRIME))\\n\\n                // res += c_84*(f_14(x) - f_14(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[84]*/ mload(add(context, 0x81e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[84]*/ mload(add(context, 0x6200)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #15.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x1e0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_85*(f_15(x) - f_15(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[85]*/ mload(add(context, 0x8200)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[85]*/ mload(add(context, 0x6220)))),\\n                           PRIME))\\n\\n                // res += c_86*(f_15(x) - f_15(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[86]*/ mload(add(context, 0x8220)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[86]*/ mload(add(context, 0x6240)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #16.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x200)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_87*(f_16(x) - f_16(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[87]*/ mload(add(context, 0x8240)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[87]*/ mload(add(context, 0x6260)))),\\n                           PRIME))\\n\\n                // res += c_88*(f_16(x) - f_16(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[88]*/ mload(add(context, 0x8260)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[88]*/ mload(add(context, 0x6280)))),\\n                           PRIME))\\n\\n                // res += c_89*(f_16(x) - f_16(g^192 * z)) / (x - g^192 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x640)),\\n                                  /*oods_coefficients[89]*/ mload(add(context, 0x8280)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[89]*/ mload(add(context, 0x62a0)))),\\n                           PRIME))\\n\\n                // res += c_90*(f_16(x) - f_16(g^193 * z)) / (x - g^193 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^193 * z)^(-1)*/ mload(add(denominatorsPtr, 0x660)),\\n                                  /*oods_coefficients[90]*/ mload(add(context, 0x82a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[90]*/ mload(add(context, 0x62c0)))),\\n                           PRIME))\\n\\n                // res += c_91*(f_16(x) - f_16(g^196 * z)) / (x - g^196 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^196 * z)^(-1)*/ mload(add(denominatorsPtr, 0x680)),\\n                                  /*oods_coefficients[91]*/ mload(add(context, 0x82c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[91]*/ mload(add(context, 0x62e0)))),\\n                           PRIME))\\n\\n                // res += c_92*(f_16(x) - f_16(g^197 * z)) / (x - g^197 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^197 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6a0)),\\n                                  /*oods_coefficients[92]*/ mload(add(context, 0x82e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[92]*/ mload(add(context, 0x6300)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_93*(f_16(x) - f_16(g^251 * z)) / (x - g^251 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^251 * z)^(-1)*/ mload(add(denominatorsPtr, 0x720)),\\n                                  /*oods_coefficients[93]*/ mload(add(context, 0x8300)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[93]*/ mload(add(context, 0x6320)))),\\n                           PRIME))\\n\\n                // res += c_94*(f_16(x) - f_16(g^252 * z)) / (x - g^252 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^252 * z)^(-1)*/ mload(add(denominatorsPtr, 0x740)),\\n                                  /*oods_coefficients[94]*/ mload(add(context, 0x8320)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[94]*/ mload(add(context, 0x6340)))),\\n                           PRIME))\\n\\n                // res += c_95*(f_16(x) - f_16(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[95]*/ mload(add(context, 0x8340)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[95]*/ mload(add(context, 0x6360)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #17.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x220)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_96*(f_17(x) - f_17(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[96]*/ mload(add(context, 0x8360)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[96]*/ mload(add(context, 0x6380)))),\\n                           PRIME))\\n\\n                // res += c_97*(f_17(x) - f_17(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[97]*/ mload(add(context, 0x8380)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[97]*/ mload(add(context, 0x63a0)))),\\n                           PRIME))\\n\\n                // res += c_98*(f_17(x) - f_17(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[98]*/ mload(add(context, 0x83a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[98]*/ mload(add(context, 0x63c0)))),\\n                           PRIME))\\n\\n                // res += c_99*(f_17(x) - f_17(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[99]*/ mload(add(context, 0x83c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[99]*/ mload(add(context, 0x63e0)))),\\n                           PRIME))\\n\\n                // res += c_100*(f_17(x) - f_17(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[100]*/ mload(add(context, 0x83e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[100]*/ mload(add(context, 0x6400)))),\\n                           PRIME))\\n\\n                // res += c_101*(f_17(x) - f_17(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[101]*/ mload(add(context, 0x8400)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[101]*/ mload(add(context, 0x6420)))),\\n                           PRIME))\\n\\n                // res += c_102*(f_17(x) - f_17(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[102]*/ mload(add(context, 0x8420)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[102]*/ mload(add(context, 0x6440)))),\\n                           PRIME))\\n\\n                // res += c_103*(f_17(x) - f_17(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[103]*/ mload(add(context, 0x8440)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[103]*/ mload(add(context, 0x6460)))),\\n                           PRIME))\\n\\n                // res += c_104*(f_17(x) - f_17(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[104]*/ mload(add(context, 0x8460)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[104]*/ mload(add(context, 0x6480)))),\\n                           PRIME))\\n\\n                // res += c_105*(f_17(x) - f_17(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[105]*/ mload(add(context, 0x8480)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[105]*/ mload(add(context, 0x64a0)))),\\n                           PRIME))\\n\\n                // res += c_106*(f_17(x) - f_17(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[106]*/ mload(add(context, 0x84a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[106]*/ mload(add(context, 0x64c0)))),\\n                           PRIME))\\n\\n                // res += c_107*(f_17(x) - f_17(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[107]*/ mload(add(context, 0x84c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[107]*/ mload(add(context, 0x64e0)))),\\n                           PRIME))\\n\\n                // res += c_108*(f_17(x) - f_17(g^16 * z)) / (x - g^16 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16 * z)^(-1)*/ mload(add(denominatorsPtr, 0x200)),\\n                                  /*oods_coefficients[108]*/ mload(add(context, 0x84e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[108]*/ mload(add(context, 0x6500)))),\\n                           PRIME))\\n\\n                // res += c_109*(f_17(x) - f_17(g^22 * z)) / (x - g^22 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^22 * z)^(-1)*/ mload(add(denominatorsPtr, 0x280)),\\n                                  /*oods_coefficients[109]*/ mload(add(context, 0x8500)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[109]*/ mload(add(context, 0x6520)))),\\n                           PRIME))\\n\\n                // res += c_110*(f_17(x) - f_17(g^23 * z)) / (x - g^23 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^23 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2a0)),\\n                                  /*oods_coefficients[110]*/ mload(add(context, 0x8520)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[110]*/ mload(add(context, 0x6540)))),\\n                           PRIME))\\n\\n                // res += c_111*(f_17(x) - f_17(g^38 * z)) / (x - g^38 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^38 * z)^(-1)*/ mload(add(denominatorsPtr, 0x360)),\\n                                  /*oods_coefficients[111]*/ mload(add(context, 0x8540)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[111]*/ mload(add(context, 0x6560)))),\\n                           PRIME))\\n\\n                // res += c_112*(f_17(x) - f_17(g^39 * z)) / (x - g^39 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^39 * z)^(-1)*/ mload(add(denominatorsPtr, 0x380)),\\n                                  /*oods_coefficients[112]*/ mload(add(context, 0x8560)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[112]*/ mload(add(context, 0x6580)))),\\n                           PRIME))\\n\\n                // res += c_113*(f_17(x) - f_17(g^70 * z)) / (x - g^70 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^70 * z)^(-1)*/ mload(add(denominatorsPtr, 0x420)),\\n                                  /*oods_coefficients[113]*/ mload(add(context, 0x8580)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[113]*/ mload(add(context, 0x65a0)))),\\n                           PRIME))\\n\\n                // res += c_114*(f_17(x) - f_17(g^71 * z)) / (x - g^71 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^71 * z)^(-1)*/ mload(add(denominatorsPtr, 0x440)),\\n                                  /*oods_coefficients[114]*/ mload(add(context, 0x85a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[114]*/ mload(add(context, 0x65c0)))),\\n                           PRIME))\\n\\n                // res += c_115*(f_17(x) - f_17(g^86 * z)) / (x - g^86 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^86 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4a0)),\\n                                  /*oods_coefficients[115]*/ mload(add(context, 0x85c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[115]*/ mload(add(context, 0x65e0)))),\\n                           PRIME))\\n\\n                // res += c_116*(f_17(x) - f_17(g^87 * z)) / (x - g^87 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^87 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4c0)),\\n                                  /*oods_coefficients[116]*/ mload(add(context, 0x85e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[116]*/ mload(add(context, 0x6600)))),\\n                           PRIME))\\n\\n                // res += c_117*(f_17(x) - f_17(g^102 * z)) / (x - g^102 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^102 * z)^(-1)*/ mload(add(denominatorsPtr, 0x500)),\\n                                  /*oods_coefficients[117]*/ mload(add(context, 0x8600)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[117]*/ mload(add(context, 0x6620)))),\\n                           PRIME))\\n\\n                // res += c_118*(f_17(x) - f_17(g^103 * z)) / (x - g^103 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^103 * z)^(-1)*/ mload(add(denominatorsPtr, 0x520)),\\n                                  /*oods_coefficients[118]*/ mload(add(context, 0x8620)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[118]*/ mload(add(context, 0x6640)))),\\n                           PRIME))\\n\\n                // res += c_119*(f_17(x) - f_17(g^134 * z)) / (x - g^134 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^134 * z)^(-1)*/ mload(add(denominatorsPtr, 0x580)),\\n                                  /*oods_coefficients[119]*/ mload(add(context, 0x8640)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[119]*/ mload(add(context, 0x6660)))),\\n                           PRIME))\\n\\n                // res += c_120*(f_17(x) - f_17(g^135 * z)) / (x - g^135 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^135 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5a0)),\\n                                  /*oods_coefficients[120]*/ mload(add(context, 0x8660)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[120]*/ mload(add(context, 0x6680)))),\\n                           PRIME))\\n\\n                // res += c_121*(f_17(x) - f_17(g^150 * z)) / (x - g^150 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^150 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5e0)),\\n                                  /*oods_coefficients[121]*/ mload(add(context, 0x8680)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[121]*/ mload(add(context, 0x66a0)))),\\n                           PRIME))\\n\\n                // res += c_122*(f_17(x) - f_17(g^151 * z)) / (x - g^151 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^151 * z)^(-1)*/ mload(add(denominatorsPtr, 0x600)),\\n                                  /*oods_coefficients[122]*/ mload(add(context, 0x86a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[122]*/ mload(add(context, 0x66c0)))),\\n                           PRIME))\\n\\n                // res += c_123*(f_17(x) - f_17(g^167 * z)) / (x - g^167 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^167 * z)^(-1)*/ mload(add(denominatorsPtr, 0x620)),\\n                                  /*oods_coefficients[123]*/ mload(add(context, 0x86c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[123]*/ mload(add(context, 0x66e0)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_124*(f_17(x) - f_17(g^199 * z)) / (x - g^199 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^199 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6c0)),\\n                                  /*oods_coefficients[124]*/ mload(add(context, 0x86e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[124]*/ mload(add(context, 0x6700)))),\\n                           PRIME))\\n\\n                // res += c_125*(f_17(x) - f_17(g^230 * z)) / (x - g^230 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^230 * z)^(-1)*/ mload(add(denominatorsPtr, 0x700)),\\n                                  /*oods_coefficients[125]*/ mload(add(context, 0x8700)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[125]*/ mload(add(context, 0x6720)))),\\n                           PRIME))\\n\\n                // res += c_126*(f_17(x) - f_17(g^263 * z)) / (x - g^263 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^263 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7a0)),\\n                                  /*oods_coefficients[126]*/ mload(add(context, 0x8720)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[126]*/ mload(add(context, 0x6740)))),\\n                           PRIME))\\n\\n                // res += c_127*(f_17(x) - f_17(g^295 * z)) / (x - g^295 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^295 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7c0)),\\n                                  /*oods_coefficients[127]*/ mload(add(context, 0x8740)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[127]*/ mload(add(context, 0x6760)))),\\n                           PRIME))\\n\\n                // res += c_128*(f_17(x) - f_17(g^327 * z)) / (x - g^327 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^327 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7e0)),\\n                                  /*oods_coefficients[128]*/ mload(add(context, 0x8760)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[128]*/ mload(add(context, 0x6780)))),\\n                           PRIME))\\n\\n                // res += c_129*(f_17(x) - f_17(g^391 * z)) / (x - g^391 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^391 * z)^(-1)*/ mload(add(denominatorsPtr, 0x800)),\\n                                  /*oods_coefficients[129]*/ mload(add(context, 0x8780)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[129]*/ mload(add(context, 0x67a0)))),\\n                           PRIME))\\n\\n                // res += c_130*(f_17(x) - f_17(g^406 * z)) / (x - g^406 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^406 * z)^(-1)*/ mload(add(denominatorsPtr, 0x820)),\\n                                  /*oods_coefficients[130]*/ mload(add(context, 0x87a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[130]*/ mload(add(context, 0x67c0)))),\\n                           PRIME))\\n\\n                // res += c_131*(f_17(x) - f_17(g^423 * z)) / (x - g^423 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^423 * z)^(-1)*/ mload(add(denominatorsPtr, 0x840)),\\n                                  /*oods_coefficients[131]*/ mload(add(context, 0x87c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[131]*/ mload(add(context, 0x67e0)))),\\n                           PRIME))\\n\\n                // res += c_132*(f_17(x) - f_17(g^455 * z)) / (x - g^455 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^455 * z)^(-1)*/ mload(add(denominatorsPtr, 0x860)),\\n                                  /*oods_coefficients[132]*/ mload(add(context, 0x87e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[132]*/ mload(add(context, 0x6800)))),\\n                           PRIME))\\n\\n                // res += c_133*(f_17(x) - f_17(g^4118 * z)) / (x - g^4118 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4118 * z)^(-1)*/ mload(add(denominatorsPtr, 0x980)),\\n                                  /*oods_coefficients[133]*/ mload(add(context, 0x8800)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[133]*/ mload(add(context, 0x6820)))),\\n                           PRIME))\\n\\n                // res += c_134*(f_17(x) - f_17(g^4119 * z)) / (x - g^4119 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4119 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9a0)),\\n                                  /*oods_coefficients[134]*/ mload(add(context, 0x8820)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[134]*/ mload(add(context, 0x6840)))),\\n                           PRIME))\\n\\n                // res += c_135*(f_17(x) - f_17(g^8214 * z)) / (x - g^8214 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8214 * z)^(-1)*/ mload(add(denominatorsPtr, 0xac0)),\\n                                  /*oods_coefficients[135]*/ mload(add(context, 0x8840)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[135]*/ mload(add(context, 0x6860)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #18.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x240)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_136*(f_18(x) - f_18(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[136]*/ mload(add(context, 0x8860)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[136]*/ mload(add(context, 0x6880)))),\\n                           PRIME))\\n\\n                // res += c_137*(f_18(x) - f_18(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[137]*/ mload(add(context, 0x8880)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[137]*/ mload(add(context, 0x68a0)))),\\n                           PRIME))\\n\\n                // res += c_138*(f_18(x) - f_18(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[138]*/ mload(add(context, 0x88a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[138]*/ mload(add(context, 0x68c0)))),\\n                           PRIME))\\n\\n                // res += c_139*(f_18(x) - f_18(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[139]*/ mload(add(context, 0x88c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[139]*/ mload(add(context, 0x68e0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #19.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x260)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_140*(f_19(x) - f_19(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[140]*/ mload(add(context, 0x88e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[140]*/ mload(add(context, 0x6900)))),\\n                           PRIME))\\n\\n                // res += c_141*(f_19(x) - f_19(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[141]*/ mload(add(context, 0x8900)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[141]*/ mload(add(context, 0x6920)))),\\n                           PRIME))\\n\\n                // res += c_142*(f_19(x) - f_19(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[142]*/ mload(add(context, 0x8920)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[142]*/ mload(add(context, 0x6940)))),\\n                           PRIME))\\n\\n                // res += c_143*(f_19(x) - f_19(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[143]*/ mload(add(context, 0x8940)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[143]*/ mload(add(context, 0x6960)))),\\n                           PRIME))\\n\\n                // res += c_144*(f_19(x) - f_19(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[144]*/ mload(add(context, 0x8960)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[144]*/ mload(add(context, 0x6980)))),\\n                           PRIME))\\n\\n                // res += c_145*(f_19(x) - f_19(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[145]*/ mload(add(context, 0x8980)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[145]*/ mload(add(context, 0x69a0)))),\\n                           PRIME))\\n\\n                // res += c_146*(f_19(x) - f_19(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[146]*/ mload(add(context, 0x89a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[146]*/ mload(add(context, 0x69c0)))),\\n                           PRIME))\\n\\n                // res += c_147*(f_19(x) - f_19(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[147]*/ mload(add(context, 0x89c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[147]*/ mload(add(context, 0x69e0)))),\\n                           PRIME))\\n\\n                // res += c_148*(f_19(x) - f_19(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[148]*/ mload(add(context, 0x89e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[148]*/ mload(add(context, 0x6a00)))),\\n                           PRIME))\\n\\n                // res += c_149*(f_19(x) - f_19(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[149]*/ mload(add(context, 0x8a00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[149]*/ mload(add(context, 0x6a20)))),\\n                           PRIME))\\n\\n                // res += c_150*(f_19(x) - f_19(g^11 * z)) / (x - g^11 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^11 * z)^(-1)*/ mload(add(denominatorsPtr, 0x160)),\\n                                  /*oods_coefficients[150]*/ mload(add(context, 0x8a20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[150]*/ mload(add(context, 0x6a40)))),\\n                           PRIME))\\n\\n                // res += c_151*(f_19(x) - f_19(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[151]*/ mload(add(context, 0x8a40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[151]*/ mload(add(context, 0x6a60)))),\\n                           PRIME))\\n\\n                // res += c_152*(f_19(x) - f_19(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[152]*/ mload(add(context, 0x8a60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[152]*/ mload(add(context, 0x6a80)))),\\n                           PRIME))\\n\\n                // res += c_153*(f_19(x) - f_19(g^15 * z)) / (x - g^15 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^15 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1e0)),\\n                                  /*oods_coefficients[153]*/ mload(add(context, 0x8a80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[153]*/ mload(add(context, 0x6aa0)))),\\n                           PRIME))\\n\\n                // res += c_154*(f_19(x) - f_19(g^17 * z)) / (x - g^17 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^17 * z)^(-1)*/ mload(add(denominatorsPtr, 0x220)),\\n                                  /*oods_coefficients[154]*/ mload(add(context, 0x8aa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[154]*/ mload(add(context, 0x6ac0)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_155*(f_19(x) - f_19(g^23 * z)) / (x - g^23 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^23 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2a0)),\\n                                  /*oods_coefficients[155]*/ mload(add(context, 0x8ac0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[155]*/ mload(add(context, 0x6ae0)))),\\n                           PRIME))\\n\\n                // res += c_156*(f_19(x) - f_19(g^25 * z)) / (x - g^25 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^25 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2e0)),\\n                                  /*oods_coefficients[156]*/ mload(add(context, 0x8ae0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[156]*/ mload(add(context, 0x6b00)))),\\n                           PRIME))\\n\\n                // res += c_157*(f_19(x) - f_19(g^28 * z)) / (x - g^28 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^28 * z)^(-1)*/ mload(add(denominatorsPtr, 0x300)),\\n                                  /*oods_coefficients[157]*/ mload(add(context, 0x8b00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[157]*/ mload(add(context, 0x6b20)))),\\n                           PRIME))\\n\\n                // res += c_158*(f_19(x) - f_19(g^31 * z)) / (x - g^31 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^31 * z)^(-1)*/ mload(add(denominatorsPtr, 0x340)),\\n                                  /*oods_coefficients[158]*/ mload(add(context, 0x8b20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[158]*/ mload(add(context, 0x6b40)))),\\n                           PRIME))\\n\\n                // res += c_159*(f_19(x) - f_19(g^44 * z)) / (x - g^44 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^44 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3a0)),\\n                                  /*oods_coefficients[159]*/ mload(add(context, 0x8b40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[159]*/ mload(add(context, 0x6b60)))),\\n                           PRIME))\\n\\n                // res += c_160*(f_19(x) - f_19(g^60 * z)) / (x - g^60 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^60 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3e0)),\\n                                  /*oods_coefficients[160]*/ mload(add(context, 0x8b60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[160]*/ mload(add(context, 0x6b80)))),\\n                           PRIME))\\n\\n                // res += c_161*(f_19(x) - f_19(g^76 * z)) / (x - g^76 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^76 * z)^(-1)*/ mload(add(denominatorsPtr, 0x460)),\\n                                  /*oods_coefficients[161]*/ mload(add(context, 0x8b80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[161]*/ mload(add(context, 0x6ba0)))),\\n                           PRIME))\\n\\n                // res += c_162*(f_19(x) - f_19(g^92 * z)) / (x - g^92 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^92 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4e0)),\\n                                  /*oods_coefficients[162]*/ mload(add(context, 0x8ba0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[162]*/ mload(add(context, 0x6bc0)))),\\n                           PRIME))\\n\\n                // res += c_163*(f_19(x) - f_19(g^108 * z)) / (x - g^108 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^108 * z)^(-1)*/ mload(add(denominatorsPtr, 0x540)),\\n                                  /*oods_coefficients[163]*/ mload(add(context, 0x8bc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[163]*/ mload(add(context, 0x6be0)))),\\n                           PRIME))\\n\\n                // res += c_164*(f_19(x) - f_19(g^124 * z)) / (x - g^124 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^124 * z)^(-1)*/ mload(add(denominatorsPtr, 0x560)),\\n                                  /*oods_coefficients[164]*/ mload(add(context, 0x8be0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[164]*/ mload(add(context, 0x6c00)))),\\n                           PRIME))\\n\\n                // res += c_165*(f_19(x) - f_19(g^4103 * z)) / (x - g^4103 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4103 * z)^(-1)*/ mload(add(denominatorsPtr, 0x940)),\\n                                  /*oods_coefficients[165]*/ mload(add(context, 0x8c00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[165]*/ mload(add(context, 0x6c20)))),\\n                           PRIME))\\n\\n                // res += c_166*(f_19(x) - f_19(g^4111 * z)) / (x - g^4111 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4111 * z)^(-1)*/ mload(add(denominatorsPtr, 0x960)),\\n                                  /*oods_coefficients[166]*/ mload(add(context, 0x8c20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[166]*/ mload(add(context, 0x6c40)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #20.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x280)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_167*(f_20(x) - f_20(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[167]*/ mload(add(context, 0x8c40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[167]*/ mload(add(context, 0x6c60)))),\\n                           PRIME))\\n\\n                // res += c_168*(f_20(x) - f_20(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[168]*/ mload(add(context, 0x8c60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[168]*/ mload(add(context, 0x6c80)))),\\n                           PRIME))\\n\\n                // res += c_169*(f_20(x) - f_20(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[169]*/ mload(add(context, 0x8c80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[169]*/ mload(add(context, 0x6ca0)))),\\n                           PRIME))\\n\\n                // res += c_170*(f_20(x) - f_20(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[170]*/ mload(add(context, 0x8ca0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[170]*/ mload(add(context, 0x6cc0)))),\\n                           PRIME))\\n\\n                // res += c_171*(f_20(x) - f_20(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[171]*/ mload(add(context, 0x8cc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[171]*/ mload(add(context, 0x6ce0)))),\\n                           PRIME))\\n\\n                // res += c_172*(f_20(x) - f_20(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[172]*/ mload(add(context, 0x8ce0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[172]*/ mload(add(context, 0x6d00)))),\\n                           PRIME))\\n\\n                // res += c_173*(f_20(x) - f_20(g^10 * z)) / (x - g^10 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^10 * z)^(-1)*/ mload(add(denominatorsPtr, 0x140)),\\n                                  /*oods_coefficients[173]*/ mload(add(context, 0x8d00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[173]*/ mload(add(context, 0x6d20)))),\\n                           PRIME))\\n\\n                // res += c_174*(f_20(x) - f_20(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[174]*/ mload(add(context, 0x8d20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[174]*/ mload(add(context, 0x6d40)))),\\n                           PRIME))\\n\\n                // res += c_175*(f_20(x) - f_20(g^14 * z)) / (x - g^14 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^14 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1c0)),\\n                                  /*oods_coefficients[175]*/ mload(add(context, 0x8d40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[175]*/ mload(add(context, 0x6d60)))),\\n                           PRIME))\\n\\n                // res += c_176*(f_20(x) - f_20(g^17 * z)) / (x - g^17 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^17 * z)^(-1)*/ mload(add(denominatorsPtr, 0x220)),\\n                                  /*oods_coefficients[176]*/ mload(add(context, 0x8d60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[176]*/ mload(add(context, 0x6d80)))),\\n                           PRIME))\\n\\n                // res += c_177*(f_20(x) - f_20(g^18 * z)) / (x - g^18 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^18 * z)^(-1)*/ mload(add(denominatorsPtr, 0x240)),\\n                                  /*oods_coefficients[177]*/ mload(add(context, 0x8d80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[177]*/ mload(add(context, 0x6da0)))),\\n                           PRIME))\\n\\n                // res += c_178*(f_20(x) - f_20(g^20 * z)) / (x - g^20 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^20 * z)^(-1)*/ mload(add(denominatorsPtr, 0x260)),\\n                                  /*oods_coefficients[178]*/ mload(add(context, 0x8da0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[178]*/ mload(add(context, 0x6dc0)))),\\n                           PRIME))\\n\\n                // res += c_179*(f_20(x) - f_20(g^22 * z)) / (x - g^22 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^22 * z)^(-1)*/ mload(add(denominatorsPtr, 0x280)),\\n                                  /*oods_coefficients[179]*/ mload(add(context, 0x8dc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[179]*/ mload(add(context, 0x6de0)))),\\n                           PRIME))\\n\\n                // res += c_180*(f_20(x) - f_20(g^24 * z)) / (x - g^24 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^24 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2c0)),\\n                                  /*oods_coefficients[180]*/ mload(add(context, 0x8de0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[180]*/ mload(add(context, 0x6e00)))),\\n                           PRIME))\\n\\n                // res += c_181*(f_20(x) - f_20(g^30 * z)) / (x - g^30 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^30 * z)^(-1)*/ mload(add(denominatorsPtr, 0x320)),\\n                                  /*oods_coefficients[181]*/ mload(add(context, 0x8e00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[181]*/ mload(add(context, 0x6e20)))),\\n                           PRIME))\\n\\n                // res += c_182*(f_20(x) - f_20(g^38 * z)) / (x - g^38 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^38 * z)^(-1)*/ mload(add(denominatorsPtr, 0x360)),\\n                                  /*oods_coefficients[182]*/ mload(add(context, 0x8e20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[182]*/ mload(add(context, 0x6e40)))),\\n                           PRIME))\\n\\n                // res += c_183*(f_20(x) - f_20(g^54 * z)) / (x - g^54 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^54 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3c0)),\\n                                  /*oods_coefficients[183]*/ mload(add(context, 0x8e40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[183]*/ mload(add(context, 0x6e60)))),\\n                           PRIME))\\n\\n                // res += c_184*(f_20(x) - f_20(g^62 * z)) / (x - g^62 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^62 * z)^(-1)*/ mload(add(denominatorsPtr, 0x400)),\\n                                  /*oods_coefficients[184]*/ mload(add(context, 0x8e60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[184]*/ mload(add(context, 0x6e80)))),\\n                           PRIME))\\n\\n                // res += c_185*(f_20(x) - f_20(g^81 * z)) / (x - g^81 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^81 * z)^(-1)*/ mload(add(denominatorsPtr, 0x480)),\\n                                  /*oods_coefficients[185]*/ mload(add(context, 0x8e80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[185]*/ mload(add(context, 0x6ea0)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_186*(f_20(x) - f_20(g^145 * z)) / (x - g^145 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^145 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5c0)),\\n                                  /*oods_coefficients[186]*/ mload(add(context, 0x8ea0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[186]*/ mload(add(context, 0x6ec0)))),\\n                           PRIME))\\n\\n                // res += c_187*(f_20(x) - f_20(g^209 * z)) / (x - g^209 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^209 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6e0)),\\n                                  /*oods_coefficients[187]*/ mload(add(context, 0x8ec0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[187]*/ mload(add(context, 0x6ee0)))),\\n                           PRIME))\\n\\n                // res += c_188*(f_20(x) - f_20(g^4080 * z)) / (x - g^4080 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4080 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8a0)),\\n                                  /*oods_coefficients[188]*/ mload(add(context, 0x8ee0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[188]*/ mload(add(context, 0x6f00)))),\\n                           PRIME))\\n\\n                // res += c_189*(f_20(x) - f_20(g^4084 * z)) / (x - g^4084 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4084 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8c0)),\\n                                  /*oods_coefficients[189]*/ mload(add(context, 0x8f00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[189]*/ mload(add(context, 0x6f20)))),\\n                           PRIME))\\n\\n                // res += c_190*(f_20(x) - f_20(g^4088 * z)) / (x - g^4088 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4088 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8e0)),\\n                                  /*oods_coefficients[190]*/ mload(add(context, 0x8f20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[190]*/ mload(add(context, 0x6f40)))),\\n                           PRIME))\\n\\n                // res += c_191*(f_20(x) - f_20(g^4090 * z)) / (x - g^4090 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4090 * z)^(-1)*/ mload(add(denominatorsPtr, 0x900)),\\n                                  /*oods_coefficients[191]*/ mload(add(context, 0x8f40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[191]*/ mload(add(context, 0x6f60)))),\\n                           PRIME))\\n\\n                // res += c_192*(f_20(x) - f_20(g^4092 * z)) / (x - g^4092 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4092 * z)^(-1)*/ mload(add(denominatorsPtr, 0x920)),\\n                                  /*oods_coefficients[192]*/ mload(add(context, 0x8f60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[192]*/ mload(add(context, 0x6f80)))),\\n                           PRIME))\\n\\n                // res += c_193*(f_20(x) - f_20(g^8161 * z)) / (x - g^8161 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8161 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9c0)),\\n                                  /*oods_coefficients[193]*/ mload(add(context, 0x8f80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[193]*/ mload(add(context, 0x6fa0)))),\\n                           PRIME))\\n\\n                // res += c_194*(f_20(x) - f_20(g^8166 * z)) / (x - g^8166 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8166 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9e0)),\\n                                  /*oods_coefficients[194]*/ mload(add(context, 0x8fa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[194]*/ mload(add(context, 0x6fc0)))),\\n                           PRIME))\\n\\n                // res += c_195*(f_20(x) - f_20(g^8174 * z)) / (x - g^8174 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8174 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa00)),\\n                                  /*oods_coefficients[195]*/ mload(add(context, 0x8fc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[195]*/ mload(add(context, 0x6fe0)))),\\n                           PRIME))\\n\\n                // res += c_196*(f_20(x) - f_20(g^8176 * z)) / (x - g^8176 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8176 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa20)),\\n                                  /*oods_coefficients[196]*/ mload(add(context, 0x8fe0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[196]*/ mload(add(context, 0x7000)))),\\n                           PRIME))\\n\\n                // res += c_197*(f_20(x) - f_20(g^8180 * z)) / (x - g^8180 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8180 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa40)),\\n                                  /*oods_coefficients[197]*/ mload(add(context, 0x9000)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[197]*/ mload(add(context, 0x7020)))),\\n                           PRIME))\\n\\n                // res += c_198*(f_20(x) - f_20(g^8182 * z)) / (x - g^8182 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8182 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa60)),\\n                                  /*oods_coefficients[198]*/ mload(add(context, 0x9020)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[198]*/ mload(add(context, 0x7040)))),\\n                           PRIME))\\n\\n                // res += c_199*(f_20(x) - f_20(g^8184 * z)) / (x - g^8184 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8184 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa80)),\\n                                  /*oods_coefficients[199]*/ mload(add(context, 0x9040)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[199]*/ mload(add(context, 0x7060)))),\\n                           PRIME))\\n\\n                // res += c_200*(f_20(x) - f_20(g^8188 * z)) / (x - g^8188 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8188 * z)^(-1)*/ mload(add(denominatorsPtr, 0xaa0)),\\n                                  /*oods_coefficients[200]*/ mload(add(context, 0x9060)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[200]*/ mload(add(context, 0x7080)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #21.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x2a0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_201*(f_21(x) - f_21(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[201]*/ mload(add(context, 0x9080)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[201]*/ mload(add(context, 0x70a0)))),\\n                           PRIME))\\n\\n                // res += c_202*(f_21(x) - f_21(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[202]*/ mload(add(context, 0x90a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[202]*/ mload(add(context, 0x70c0)))),\\n                           PRIME))\\n\\n                // res += c_203*(f_21(x) - f_21(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[203]*/ mload(add(context, 0x90c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[203]*/ mload(add(context, 0x70e0)))),\\n                           PRIME))\\n\\n                // res += c_204*(f_21(x) - f_21(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[204]*/ mload(add(context, 0x90e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[204]*/ mload(add(context, 0x7100)))),\\n                           PRIME))\\n                }\\n\\n                // Advance traceQueryResponses by amount read (0x20 * nTraceColumns).\\n                traceQueryResponses := add(traceQueryResponses, 0x2c0)\\n\\n                // Composition constraints.\\n\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(compositionQueryResponses), kMontgomeryRInv, PRIME)\\n                // res += c_205*(h_0(x) - C_0(z^2)) / (x - z^2).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z^2)^(-1)*/ mload(add(denominatorsPtr, 0xae0)),\\n                                  /*oods_coefficients[205]*/ mload(add(context, 0x9100)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*composition_oods_values[0]*/ mload(add(context, 0x7120)))),\\n                           PRIME))\\n                }\\n\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(compositionQueryResponses, 0x20)), kMontgomeryRInv, PRIME)\\n                // res += c_206*(h_1(x) - C_1(z^2)) / (x - z^2).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z^2)^(-1)*/ mload(add(denominatorsPtr, 0xae0)),\\n                                  /*oods_coefficients[206]*/ mload(add(context, 0x9120)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*composition_oods_values[1]*/ mload(add(context, 0x7140)))),\\n                           PRIME))\\n                }\\n\\n                // Advance compositionQueryResponses by amount read (0x20 * constraintDegree).\\n                compositionQueryResponses := add(compositionQueryResponses, 0x40)\\n\\n                // Append the friValue, which is the sum of the out-of-domain-sampling boundary\\n                // constraints for the trace and composition polynomials, to the friQueue array.\\n                mstore(add(friQueue, 0x20), mod(res, PRIME))\\n\\n                // Append the friInvPoint of the current query to the friQueue array.\\n                mstore(add(friQueue, 0x40), /*friInvPoint*/ mload(add(denominatorsPtr,0xb00)))\\n\\n                // Advance denominatorsPtr by chunk size (0x20 * (2+N_ROWS_IN_MASK)).\\n                denominatorsPtr := add(denominatorsPtr, 0xb20)\\n            }\\n            return(/*friQueue*/ add(context, 0xdc0), 0x1200)\\n        }\\n    }\\n\\n    /*\\n      Computes and performs batch inverse on all the denominators required for the out of domain\\n      sampling boundary constraints.\\n\\n      Since the friEvalPoints are calculated during the computation of the denominators\\n      this function also adds those to the batch inverse in prepartion for the fri that follows.\\n\\n      After this function returns, the batch_inverse_out array holds #queries\\n      chunks of size (2 + N_ROWS_IN_MASK) with the following structure:\\n      0..(N_ROWS_IN_MASK-1):   [(x - g^i * z)^(-1) for i in rowsInMask]\\n      N_ROWS_IN_MASK:          (x - z^constraintDegree)^-1\\n      N_ROWS_IN_MASK+1:        friEvalPointInv.\\n    */\\n    function oodsPrepareInverses(\\n        uint256[] memory context, uint256[] memory batchInverseArray)\\n        internal view {\\n        uint256 evalCosetOffset_ = PrimeFieldElement0.GENERATOR_VAL;\\n        // The array expmodsAndPoints stores subexpressions that are needed\\n        // for the denominators computation.\\n        // The array is segmented as follows:\\n        //    expmodsAndPoints[0:20] (.expmods) expmods used during calculations of the points below.\\n        //    expmodsAndPoints[20:107] (.points) points used during the denominators calculation.\\n        uint256[107] memory expmodsAndPoints;\\n        assembly {\\n            function expmod(base, exponent, modulus) -\\u003e result {\\n              let p := mload(0x40)\\n              mstore(p, 0x20)                 // Length of Base.\\n              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\\n              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\\n              mstore(add(p, 0x60), base)      // Base.\\n              mstore(add(p, 0x80), exponent)  // Exponent.\\n              mstore(add(p, 0xa0), modulus)   // Modulus.\\n              // Call modexp precompile.\\n              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n              }\\n              result := mload(p)\\n            }\\n\\n            let traceGenerator := /*trace_generator*/ mload(add(context, 0x2b60))\\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\\n\\n            // Prepare expmods for computations of trace generator powers.\\n\\n            // expmodsAndPoints.expmods[0] = traceGenerator^2.\\n            mstore(expmodsAndPoints,\\n                   mulmod(traceGenerator, // traceGenerator^1\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[1] = traceGenerator^3.\\n            mstore(add(expmodsAndPoints, 0x20),\\n                   mulmod(mload(expmodsAndPoints), // traceGenerator^2\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[2] = traceGenerator^4.\\n            mstore(add(expmodsAndPoints, 0x40),\\n                   mulmod(mload(add(expmodsAndPoints, 0x20)), // traceGenerator^3\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[3] = traceGenerator^5.\\n            mstore(add(expmodsAndPoints, 0x60),\\n                   mulmod(mload(add(expmodsAndPoints, 0x40)), // traceGenerator^4\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[4] = traceGenerator^6.\\n            mstore(add(expmodsAndPoints, 0x80),\\n                   mulmod(mload(add(expmodsAndPoints, 0x60)), // traceGenerator^5\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[5] = traceGenerator^7.\\n            mstore(add(expmodsAndPoints, 0xa0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x80)), // traceGenerator^6\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[6] = traceGenerator^8.\\n            mstore(add(expmodsAndPoints, 0xc0),\\n                   mulmod(mload(add(expmodsAndPoints, 0xa0)), // traceGenerator^7\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[7] = traceGenerator^10.\\n            mstore(add(expmodsAndPoints, 0xe0),\\n                   mulmod(mload(add(expmodsAndPoints, 0xc0)), // traceGenerator^8\\n                          mload(expmodsAndPoints), // traceGenerator^2\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[8] = traceGenerator^11.\\n            mstore(add(expmodsAndPoints, 0x100),\\n                   mulmod(mload(add(expmodsAndPoints, 0xe0)), // traceGenerator^10\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[9] = traceGenerator^15.\\n            mstore(add(expmodsAndPoints, 0x120),\\n                   mulmod(mload(add(expmodsAndPoints, 0x100)), // traceGenerator^11\\n                          mload(add(expmodsAndPoints, 0x40)), // traceGenerator^4\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[10] = traceGenerator^16.\\n            mstore(add(expmodsAndPoints, 0x140),\\n                   mulmod(mload(add(expmodsAndPoints, 0x120)), // traceGenerator^15\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[11] = traceGenerator^17.\\n            mstore(add(expmodsAndPoints, 0x160),\\n                   mulmod(mload(add(expmodsAndPoints, 0x140)), // traceGenerator^16\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[12] = traceGenerator^21.\\n            mstore(add(expmodsAndPoints, 0x180),\\n                   mulmod(mload(add(expmodsAndPoints, 0x160)), // traceGenerator^17\\n                          mload(add(expmodsAndPoints, 0x40)), // traceGenerator^4\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[13] = traceGenerator^25.\\n            mstore(add(expmodsAndPoints, 0x1a0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x180)), // traceGenerator^21\\n                          mload(add(expmodsAndPoints, 0x40)), // traceGenerator^4\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[14] = traceGenerator^26.\\n            mstore(add(expmodsAndPoints, 0x1c0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1a0)), // traceGenerator^25\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[15] = traceGenerator^32.\\n            mstore(add(expmodsAndPoints, 0x1e0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1c0)), // traceGenerator^26\\n                          mload(add(expmodsAndPoints, 0x80)), // traceGenerator^6\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[16] = traceGenerator^56.\\n            mstore(add(expmodsAndPoints, 0x200),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1e0)), // traceGenerator^32\\n                          mulmod(mload(add(expmodsAndPoints, 0x180)), // traceGenerator^21\\n                                 mload(add(expmodsAndPoints, 0x20)), // traceGenerator^3\\n                                 PRIME),\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[17] = traceGenerator^64.\\n            mstore(add(expmodsAndPoints, 0x220),\\n                   mulmod(mload(add(expmodsAndPoints, 0x200)), // traceGenerator^56\\n                          mload(add(expmodsAndPoints, 0xc0)), // traceGenerator^8\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[18] = traceGenerator^3569.\\n            mstore(add(expmodsAndPoints, 0x240),\\n                   expmod(traceGenerator, 3569, PRIME))\\n\\n            // expmodsAndPoints.expmods[19] = traceGenerator^4042.\\n            mstore(add(expmodsAndPoints, 0x260),\\n                   expmod(traceGenerator, 4042, PRIME))\\n\\n            let oodsPoint := /*oods_point*/ mload(add(context, 0x2b80))\\n            {\\n              // point = -z.\\n              let point := sub(PRIME, oodsPoint)\\n              // Compute denominators for rows with nonconst mask expression.\\n              // We compute those first because for the const rows we modify the point variable.\\n\\n              // Compute denominators for rows with const mask expression.\\n\\n              // expmods_and_points.points[0] = -z.\\n              mstore(add(expmodsAndPoints, 0x280), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[1] = -(g * z).\\n              mstore(add(expmodsAndPoints, 0x2a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[2] = -(g^2 * z).\\n              mstore(add(expmodsAndPoints, 0x2c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[3] = -(g^3 * z).\\n              mstore(add(expmodsAndPoints, 0x2e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[4] = -(g^4 * z).\\n              mstore(add(expmodsAndPoints, 0x300), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[5] = -(g^5 * z).\\n              mstore(add(expmodsAndPoints, 0x320), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[6] = -(g^6 * z).\\n              mstore(add(expmodsAndPoints, 0x340), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[7] = -(g^7 * z).\\n              mstore(add(expmodsAndPoints, 0x360), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[8] = -(g^8 * z).\\n              mstore(add(expmodsAndPoints, 0x380), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[9] = -(g^9 * z).\\n              mstore(add(expmodsAndPoints, 0x3a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[10] = -(g^10 * z).\\n              mstore(add(expmodsAndPoints, 0x3c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[11] = -(g^11 * z).\\n              mstore(add(expmodsAndPoints, 0x3e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[12] = -(g^12 * z).\\n              mstore(add(expmodsAndPoints, 0x400), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[13] = -(g^13 * z).\\n              mstore(add(expmodsAndPoints, 0x420), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[14] = -(g^14 * z).\\n              mstore(add(expmodsAndPoints, 0x440), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[15] = -(g^15 * z).\\n              mstore(add(expmodsAndPoints, 0x460), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[16] = -(g^16 * z).\\n              mstore(add(expmodsAndPoints, 0x480), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[17] = -(g^17 * z).\\n              mstore(add(expmodsAndPoints, 0x4a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[18] = -(g^18 * z).\\n              mstore(add(expmodsAndPoints, 0x4c0), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[19] = -(g^20 * z).\\n              mstore(add(expmodsAndPoints, 0x4e0), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[20] = -(g^22 * z).\\n              mstore(add(expmodsAndPoints, 0x500), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[21] = -(g^23 * z).\\n              mstore(add(expmodsAndPoints, 0x520), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[22] = -(g^24 * z).\\n              mstore(add(expmodsAndPoints, 0x540), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[23] = -(g^25 * z).\\n              mstore(add(expmodsAndPoints, 0x560), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[24] = -(g^28 * z).\\n              mstore(add(expmodsAndPoints, 0x580), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[25] = -(g^30 * z).\\n              mstore(add(expmodsAndPoints, 0x5a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[26] = -(g^31 * z).\\n              mstore(add(expmodsAndPoints, 0x5c0), point)\\n\\n              // point *= g^7.\\n              point := mulmod(point, /*traceGenerator^7*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[27] = -(g^38 * z).\\n              mstore(add(expmodsAndPoints, 0x5e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[28] = -(g^39 * z).\\n              mstore(add(expmodsAndPoints, 0x600), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[29] = -(g^44 * z).\\n              mstore(add(expmodsAndPoints, 0x620), point)\\n\\n              // point *= g^10.\\n              point := mulmod(point, /*traceGenerator^10*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[30] = -(g^54 * z).\\n              mstore(add(expmodsAndPoints, 0x640), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x80)), PRIME)\\n              // expmods_and_points.points[31] = -(g^60 * z).\\n              mstore(add(expmodsAndPoints, 0x660), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[32] = -(g^62 * z).\\n              mstore(add(expmodsAndPoints, 0x680), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xc0)), PRIME)\\n              // expmods_and_points.points[33] = -(g^70 * z).\\n              mstore(add(expmodsAndPoints, 0x6a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[34] = -(g^71 * z).\\n              mstore(add(expmodsAndPoints, 0x6c0), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[35] = -(g^76 * z).\\n              mstore(add(expmodsAndPoints, 0x6e0), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[36] = -(g^81 * z).\\n              mstore(add(expmodsAndPoints, 0x700), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[37] = -(g^86 * z).\\n              mstore(add(expmodsAndPoints, 0x720), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[38] = -(g^87 * z).\\n              mstore(add(expmodsAndPoints, 0x740), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[39] = -(g^92 * z).\\n              mstore(add(expmodsAndPoints, 0x760), point)\\n\\n              // point *= g^10.\\n              point := mulmod(point, /*traceGenerator^10*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[40] = -(g^102 * z).\\n              mstore(add(expmodsAndPoints, 0x780), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[41] = -(g^103 * z).\\n              mstore(add(expmodsAndPoints, 0x7a0), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[42] = -(g^108 * z).\\n              mstore(add(expmodsAndPoints, 0x7c0), point)\\n\\n              // point *= g^16.\\n              point := mulmod(point, /*traceGenerator^16*/ mload(add(expmodsAndPoints, 0x140)), PRIME)\\n              // expmods_and_points.points[43] = -(g^124 * z).\\n              mstore(add(expmodsAndPoints, 0x7e0), point)\\n\\n              // point *= g^10.\\n              point := mulmod(point, /*traceGenerator^10*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[44] = -(g^134 * z).\\n              mstore(add(expmodsAndPoints, 0x800), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[45] = -(g^135 * z).\\n              mstore(add(expmodsAndPoints, 0x820), point)\\n\\n              // point *= g^10.\\n              point := mulmod(point, /*traceGenerator^10*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[46] = -(g^145 * z).\\n              mstore(add(expmodsAndPoints, 0x840), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[47] = -(g^150 * z).\\n              mstore(add(expmodsAndPoints, 0x860), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[48] = -(g^151 * z).\\n              mstore(add(expmodsAndPoints, 0x880), point)\\n\\n              // point *= g^16.\\n              point := mulmod(point, /*traceGenerator^16*/ mload(add(expmodsAndPoints, 0x140)), PRIME)\\n              // expmods_and_points.points[49] = -(g^167 * z).\\n              mstore(add(expmodsAndPoints, 0x8a0), point)\\n\\n              // point *= g^25.\\n              point := mulmod(point, /*traceGenerator^25*/ mload(add(expmodsAndPoints, 0x1a0)), PRIME)\\n              // expmods_and_points.points[50] = -(g^192 * z).\\n              mstore(add(expmodsAndPoints, 0x8c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[51] = -(g^193 * z).\\n              mstore(add(expmodsAndPoints, 0x8e0), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[52] = -(g^196 * z).\\n              mstore(add(expmodsAndPoints, 0x900), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[53] = -(g^197 * z).\\n              mstore(add(expmodsAndPoints, 0x920), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[54] = -(g^199 * z).\\n              mstore(add(expmodsAndPoints, 0x940), point)\\n\\n              // point *= g^10.\\n              point := mulmod(point, /*traceGenerator^10*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[55] = -(g^209 * z).\\n              mstore(add(expmodsAndPoints, 0x960), point)\\n\\n              // point *= g^21.\\n              point := mulmod(point, /*traceGenerator^21*/ mload(add(expmodsAndPoints, 0x180)), PRIME)\\n              // expmods_and_points.points[56] = -(g^230 * z).\\n              mstore(add(expmodsAndPoints, 0x980), point)\\n\\n              // point *= g^21.\\n              point := mulmod(point, /*traceGenerator^21*/ mload(add(expmodsAndPoints, 0x180)), PRIME)\\n              // expmods_and_points.points[57] = -(g^251 * z).\\n              mstore(add(expmodsAndPoints, 0x9a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[58] = -(g^252 * z).\\n              mstore(add(expmodsAndPoints, 0x9c0), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[59] = -(g^255 * z).\\n              mstore(add(expmodsAndPoints, 0x9e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[60] = -(g^256 * z).\\n              mstore(add(expmodsAndPoints, 0xa00), point)\\n\\n              // point *= g^7.\\n              point := mulmod(point, /*traceGenerator^7*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[61] = -(g^263 * z).\\n              mstore(add(expmodsAndPoints, 0xa20), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1e0)), PRIME)\\n              // expmods_and_points.points[62] = -(g^295 * z).\\n              mstore(add(expmodsAndPoints, 0xa40), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1e0)), PRIME)\\n              // expmods_and_points.points[63] = -(g^327 * z).\\n              mstore(add(expmodsAndPoints, 0xa60), point)\\n\\n              // point *= g^64.\\n              point := mulmod(point, /*traceGenerator^64*/ mload(add(expmodsAndPoints, 0x220)), PRIME)\\n              // expmods_and_points.points[64] = -(g^391 * z).\\n              mstore(add(expmodsAndPoints, 0xa80), point)\\n\\n              // point *= g^15.\\n              point := mulmod(point, /*traceGenerator^15*/ mload(add(expmodsAndPoints, 0x120)), PRIME)\\n              // expmods_and_points.points[65] = -(g^406 * z).\\n              mstore(add(expmodsAndPoints, 0xaa0), point)\\n\\n              // point *= g^17.\\n              point := mulmod(point, /*traceGenerator^17*/ mload(add(expmodsAndPoints, 0x160)), PRIME)\\n              // expmods_and_points.points[66] = -(g^423 * z).\\n              mstore(add(expmodsAndPoints, 0xac0), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1e0)), PRIME)\\n              // expmods_and_points.points[67] = -(g^455 * z).\\n              mstore(add(expmodsAndPoints, 0xae0), point)\\n\\n              // point *= g^56.\\n              point := mulmod(point, /*traceGenerator^56*/ mload(add(expmodsAndPoints, 0x200)), PRIME)\\n              // expmods_and_points.points[68] = -(g^511 * z).\\n              mstore(add(expmodsAndPoints, 0xb00), point)\\n\\n              // point *= g^3569.\\n              point := mulmod(point, /*traceGenerator^3569*/ mload(add(expmodsAndPoints, 0x240)), PRIME)\\n              // expmods_and_points.points[69] = -(g^4080 * z).\\n              mstore(add(expmodsAndPoints, 0xb20), point)\\n\\n              // point *= g^4.\\n              point := mulmod(point, /*traceGenerator^4*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[70] = -(g^4084 * z).\\n              mstore(add(expmodsAndPoints, 0xb40), point)\\n\\n              // point *= g^4.\\n              point := mulmod(point, /*traceGenerator^4*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[71] = -(g^4088 * z).\\n              mstore(add(expmodsAndPoints, 0xb60), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[72] = -(g^4090 * z).\\n              mstore(add(expmodsAndPoints, 0xb80), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[73] = -(g^4092 * z).\\n              mstore(add(expmodsAndPoints, 0xba0), point)\\n\\n              // point *= g^11.\\n              point := mulmod(point, /*traceGenerator^11*/ mload(add(expmodsAndPoints, 0x100)), PRIME)\\n              // expmods_and_points.points[74] = -(g^4103 * z).\\n              mstore(add(expmodsAndPoints, 0xbc0), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xc0)), PRIME)\\n              // expmods_and_points.points[75] = -(g^4111 * z).\\n              mstore(add(expmodsAndPoints, 0xbe0), point)\\n\\n              // point *= g^7.\\n              point := mulmod(point, /*traceGenerator^7*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[76] = -(g^4118 * z).\\n              mstore(add(expmodsAndPoints, 0xc00), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[77] = -(g^4119 * z).\\n              mstore(add(expmodsAndPoints, 0xc20), point)\\n\\n              // point *= g^4042.\\n              point := mulmod(point, /*traceGenerator^4042*/ mload(add(expmodsAndPoints, 0x260)), PRIME)\\n              // expmods_and_points.points[78] = -(g^8161 * z).\\n              mstore(add(expmodsAndPoints, 0xc40), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[79] = -(g^8166 * z).\\n              mstore(add(expmodsAndPoints, 0xc60), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xc0)), PRIME)\\n              // expmods_and_points.points[80] = -(g^8174 * z).\\n              mstore(add(expmodsAndPoints, 0xc80), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[81] = -(g^8176 * z).\\n              mstore(add(expmodsAndPoints, 0xca0), point)\\n\\n              // point *= g^4.\\n              point := mulmod(point, /*traceGenerator^4*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[82] = -(g^8180 * z).\\n              mstore(add(expmodsAndPoints, 0xcc0), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[83] = -(g^8182 * z).\\n              mstore(add(expmodsAndPoints, 0xce0), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[84] = -(g^8184 * z).\\n              mstore(add(expmodsAndPoints, 0xd00), point)\\n\\n              // point *= g^4.\\n              point := mulmod(point, /*traceGenerator^4*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[85] = -(g^8188 * z).\\n              mstore(add(expmodsAndPoints, 0xd20), point)\\n\\n              // point *= g^26.\\n              point := mulmod(point, /*traceGenerator^26*/ mload(add(expmodsAndPoints, 0x1c0)), PRIME)\\n              // expmods_and_points.points[86] = -(g^8214 * z).\\n              mstore(add(expmodsAndPoints, 0xd40), point)\\n            }\\n\\n\\n            let evalPointsPtr := /*oodsEvalPoints*/ add(context, 0x7160)\\n            let evalPointsEndPtr := add(evalPointsPtr,\\n                                           mul(/*n_unique_queries*/ mload(add(context, 0x140)), 0x20))\\n            let productsPtr := add(batchInverseArray, 0x20)\\n            let valuesPtr := add(add(batchInverseArray, 0x20), 0x21600)\\n            let partialProduct := 1\\n            let minusPointPow := sub(PRIME, mulmod(oodsPoint, oodsPoint, PRIME))\\n            for {} lt(evalPointsPtr, evalPointsEndPtr)\\n                     {evalPointsPtr := add(evalPointsPtr, 0x20)} {\\n                let evalPoint := mload(evalPointsPtr)\\n\\n                // Shift evalPoint to evaluation domain coset.\\n                let shiftedEvalPoint := mulmod(evalPoint, evalCosetOffset_, PRIME)\\n\\n                {\\n                // Calculate denominator for row 0: x - z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x280)))\\n                mstore(productsPtr, partialProduct)\\n                mstore(valuesPtr, denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 1: x - g * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2a0)))\\n                mstore(add(productsPtr, 0x20), partialProduct)\\n                mstore(add(valuesPtr, 0x20), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 2: x - g^2 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2c0)))\\n                mstore(add(productsPtr, 0x40), partialProduct)\\n                mstore(add(valuesPtr, 0x40), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 3: x - g^3 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2e0)))\\n                mstore(add(productsPtr, 0x60), partialProduct)\\n                mstore(add(valuesPtr, 0x60), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4: x - g^4 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x300)))\\n                mstore(add(productsPtr, 0x80), partialProduct)\\n                mstore(add(valuesPtr, 0x80), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 5: x - g^5 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x320)))\\n                mstore(add(productsPtr, 0xa0), partialProduct)\\n                mstore(add(valuesPtr, 0xa0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 6: x - g^6 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x340)))\\n                mstore(add(productsPtr, 0xc0), partialProduct)\\n                mstore(add(valuesPtr, 0xc0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 7: x - g^7 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x360)))\\n                mstore(add(productsPtr, 0xe0), partialProduct)\\n                mstore(add(valuesPtr, 0xe0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8: x - g^8 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x380)))\\n                mstore(add(productsPtr, 0x100), partialProduct)\\n                mstore(add(valuesPtr, 0x100), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 9: x - g^9 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3a0)))\\n                mstore(add(productsPtr, 0x120), partialProduct)\\n                mstore(add(valuesPtr, 0x120), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 10: x - g^10 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3c0)))\\n                mstore(add(productsPtr, 0x140), partialProduct)\\n                mstore(add(valuesPtr, 0x140), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 11: x - g^11 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3e0)))\\n                mstore(add(productsPtr, 0x160), partialProduct)\\n                mstore(add(valuesPtr, 0x160), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 12: x - g^12 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x400)))\\n                mstore(add(productsPtr, 0x180), partialProduct)\\n                mstore(add(valuesPtr, 0x180), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 13: x - g^13 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x420)))\\n                mstore(add(productsPtr, 0x1a0), partialProduct)\\n                mstore(add(valuesPtr, 0x1a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 14: x - g^14 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x440)))\\n                mstore(add(productsPtr, 0x1c0), partialProduct)\\n                mstore(add(valuesPtr, 0x1c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 15: x - g^15 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x460)))\\n                mstore(add(productsPtr, 0x1e0), partialProduct)\\n                mstore(add(valuesPtr, 0x1e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16: x - g^16 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x480)))\\n                mstore(add(productsPtr, 0x200), partialProduct)\\n                mstore(add(valuesPtr, 0x200), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 17: x - g^17 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4a0)))\\n                mstore(add(productsPtr, 0x220), partialProduct)\\n                mstore(add(valuesPtr, 0x220), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 18: x - g^18 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4c0)))\\n                mstore(add(productsPtr, 0x240), partialProduct)\\n                mstore(add(valuesPtr, 0x240), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 20: x - g^20 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4e0)))\\n                mstore(add(productsPtr, 0x260), partialProduct)\\n                mstore(add(valuesPtr, 0x260), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 22: x - g^22 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x500)))\\n                mstore(add(productsPtr, 0x280), partialProduct)\\n                mstore(add(valuesPtr, 0x280), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 23: x - g^23 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x520)))\\n                mstore(add(productsPtr, 0x2a0), partialProduct)\\n                mstore(add(valuesPtr, 0x2a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 24: x - g^24 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x540)))\\n                mstore(add(productsPtr, 0x2c0), partialProduct)\\n                mstore(add(valuesPtr, 0x2c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 25: x - g^25 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x560)))\\n                mstore(add(productsPtr, 0x2e0), partialProduct)\\n                mstore(add(valuesPtr, 0x2e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 28: x - g^28 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x580)))\\n                mstore(add(productsPtr, 0x300), partialProduct)\\n                mstore(add(valuesPtr, 0x300), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 30: x - g^30 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5a0)))\\n                mstore(add(productsPtr, 0x320), partialProduct)\\n                mstore(add(valuesPtr, 0x320), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 31: x - g^31 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5c0)))\\n                mstore(add(productsPtr, 0x340), partialProduct)\\n                mstore(add(valuesPtr, 0x340), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 38: x - g^38 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5e0)))\\n                mstore(add(productsPtr, 0x360), partialProduct)\\n                mstore(add(valuesPtr, 0x360), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 39: x - g^39 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x600)))\\n                mstore(add(productsPtr, 0x380), partialProduct)\\n                mstore(add(valuesPtr, 0x380), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 44: x - g^44 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x620)))\\n                mstore(add(productsPtr, 0x3a0), partialProduct)\\n                mstore(add(valuesPtr, 0x3a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 54: x - g^54 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x640)))\\n                mstore(add(productsPtr, 0x3c0), partialProduct)\\n                mstore(add(valuesPtr, 0x3c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 60: x - g^60 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x660)))\\n                mstore(add(productsPtr, 0x3e0), partialProduct)\\n                mstore(add(valuesPtr, 0x3e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 62: x - g^62 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x680)))\\n                mstore(add(productsPtr, 0x400), partialProduct)\\n                mstore(add(valuesPtr, 0x400), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 70: x - g^70 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6a0)))\\n                mstore(add(productsPtr, 0x420), partialProduct)\\n                mstore(add(valuesPtr, 0x420), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 71: x - g^71 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6c0)))\\n                mstore(add(productsPtr, 0x440), partialProduct)\\n                mstore(add(valuesPtr, 0x440), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 76: x - g^76 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6e0)))\\n                mstore(add(productsPtr, 0x460), partialProduct)\\n                mstore(add(valuesPtr, 0x460), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 81: x - g^81 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x700)))\\n                mstore(add(productsPtr, 0x480), partialProduct)\\n                mstore(add(valuesPtr, 0x480), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 86: x - g^86 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x720)))\\n                mstore(add(productsPtr, 0x4a0), partialProduct)\\n                mstore(add(valuesPtr, 0x4a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 87: x - g^87 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x740)))\\n                mstore(add(productsPtr, 0x4c0), partialProduct)\\n                mstore(add(valuesPtr, 0x4c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 92: x - g^92 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x760)))\\n                mstore(add(productsPtr, 0x4e0), partialProduct)\\n                mstore(add(valuesPtr, 0x4e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 102: x - g^102 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x780)))\\n                mstore(add(productsPtr, 0x500), partialProduct)\\n                mstore(add(valuesPtr, 0x500), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 103: x - g^103 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7a0)))\\n                mstore(add(productsPtr, 0x520), partialProduct)\\n                mstore(add(valuesPtr, 0x520), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 108: x - g^108 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7c0)))\\n                mstore(add(productsPtr, 0x540), partialProduct)\\n                mstore(add(valuesPtr, 0x540), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 124: x - g^124 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7e0)))\\n                mstore(add(productsPtr, 0x560), partialProduct)\\n                mstore(add(valuesPtr, 0x560), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 134: x - g^134 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x800)))\\n                mstore(add(productsPtr, 0x580), partialProduct)\\n                mstore(add(valuesPtr, 0x580), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 135: x - g^135 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x820)))\\n                mstore(add(productsPtr, 0x5a0), partialProduct)\\n                mstore(add(valuesPtr, 0x5a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 145: x - g^145 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x840)))\\n                mstore(add(productsPtr, 0x5c0), partialProduct)\\n                mstore(add(valuesPtr, 0x5c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 150: x - g^150 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x860)))\\n                mstore(add(productsPtr, 0x5e0), partialProduct)\\n                mstore(add(valuesPtr, 0x5e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 151: x - g^151 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x880)))\\n                mstore(add(productsPtr, 0x600), partialProduct)\\n                mstore(add(valuesPtr, 0x600), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 167: x - g^167 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8a0)))\\n                mstore(add(productsPtr, 0x620), partialProduct)\\n                mstore(add(valuesPtr, 0x620), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 192: x - g^192 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8c0)))\\n                mstore(add(productsPtr, 0x640), partialProduct)\\n                mstore(add(valuesPtr, 0x640), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 193: x - g^193 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8e0)))\\n                mstore(add(productsPtr, 0x660), partialProduct)\\n                mstore(add(valuesPtr, 0x660), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 196: x - g^196 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x900)))\\n                mstore(add(productsPtr, 0x680), partialProduct)\\n                mstore(add(valuesPtr, 0x680), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 197: x - g^197 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x920)))\\n                mstore(add(productsPtr, 0x6a0), partialProduct)\\n                mstore(add(valuesPtr, 0x6a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 199: x - g^199 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x940)))\\n                mstore(add(productsPtr, 0x6c0), partialProduct)\\n                mstore(add(valuesPtr, 0x6c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 209: x - g^209 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x960)))\\n                mstore(add(productsPtr, 0x6e0), partialProduct)\\n                mstore(add(valuesPtr, 0x6e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 230: x - g^230 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x980)))\\n                mstore(add(productsPtr, 0x700), partialProduct)\\n                mstore(add(valuesPtr, 0x700), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 251: x - g^251 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9a0)))\\n                mstore(add(productsPtr, 0x720), partialProduct)\\n                mstore(add(valuesPtr, 0x720), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 252: x - g^252 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9c0)))\\n                mstore(add(productsPtr, 0x740), partialProduct)\\n                mstore(add(valuesPtr, 0x740), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 255: x - g^255 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9e0)))\\n                mstore(add(productsPtr, 0x760), partialProduct)\\n                mstore(add(valuesPtr, 0x760), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 256: x - g^256 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa00)))\\n                mstore(add(productsPtr, 0x780), partialProduct)\\n                mstore(add(valuesPtr, 0x780), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 263: x - g^263 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa20)))\\n                mstore(add(productsPtr, 0x7a0), partialProduct)\\n                mstore(add(valuesPtr, 0x7a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 295: x - g^295 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa40)))\\n                mstore(add(productsPtr, 0x7c0), partialProduct)\\n                mstore(add(valuesPtr, 0x7c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 327: x - g^327 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa60)))\\n                mstore(add(productsPtr, 0x7e0), partialProduct)\\n                mstore(add(valuesPtr, 0x7e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 391: x - g^391 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa80)))\\n                mstore(add(productsPtr, 0x800), partialProduct)\\n                mstore(add(valuesPtr, 0x800), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 406: x - g^406 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xaa0)))\\n                mstore(add(productsPtr, 0x820), partialProduct)\\n                mstore(add(valuesPtr, 0x820), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 423: x - g^423 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xac0)))\\n                mstore(add(productsPtr, 0x840), partialProduct)\\n                mstore(add(valuesPtr, 0x840), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 455: x - g^455 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xae0)))\\n                mstore(add(productsPtr, 0x860), partialProduct)\\n                mstore(add(valuesPtr, 0x860), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 511: x - g^511 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb00)))\\n                mstore(add(productsPtr, 0x880), partialProduct)\\n                mstore(add(valuesPtr, 0x880), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4080: x - g^4080 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb20)))\\n                mstore(add(productsPtr, 0x8a0), partialProduct)\\n                mstore(add(valuesPtr, 0x8a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4084: x - g^4084 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb40)))\\n                mstore(add(productsPtr, 0x8c0), partialProduct)\\n                mstore(add(valuesPtr, 0x8c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4088: x - g^4088 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb60)))\\n                mstore(add(productsPtr, 0x8e0), partialProduct)\\n                mstore(add(valuesPtr, 0x8e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4090: x - g^4090 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb80)))\\n                mstore(add(productsPtr, 0x900), partialProduct)\\n                mstore(add(valuesPtr, 0x900), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4092: x - g^4092 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xba0)))\\n                mstore(add(productsPtr, 0x920), partialProduct)\\n                mstore(add(valuesPtr, 0x920), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4103: x - g^4103 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xbc0)))\\n                mstore(add(productsPtr, 0x940), partialProduct)\\n                mstore(add(valuesPtr, 0x940), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4111: x - g^4111 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xbe0)))\\n                mstore(add(productsPtr, 0x960), partialProduct)\\n                mstore(add(valuesPtr, 0x960), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4118: x - g^4118 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc00)))\\n                mstore(add(productsPtr, 0x980), partialProduct)\\n                mstore(add(valuesPtr, 0x980), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4119: x - g^4119 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc20)))\\n                mstore(add(productsPtr, 0x9a0), partialProduct)\\n                mstore(add(valuesPtr, 0x9a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8161: x - g^8161 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc40)))\\n                mstore(add(productsPtr, 0x9c0), partialProduct)\\n                mstore(add(valuesPtr, 0x9c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8166: x - g^8166 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc60)))\\n                mstore(add(productsPtr, 0x9e0), partialProduct)\\n                mstore(add(valuesPtr, 0x9e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8174: x - g^8174 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc80)))\\n                mstore(add(productsPtr, 0xa00), partialProduct)\\n                mstore(add(valuesPtr, 0xa00), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8176: x - g^8176 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xca0)))\\n                mstore(add(productsPtr, 0xa20), partialProduct)\\n                mstore(add(valuesPtr, 0xa20), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8180: x - g^8180 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xcc0)))\\n                mstore(add(productsPtr, 0xa40), partialProduct)\\n                mstore(add(valuesPtr, 0xa40), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8182: x - g^8182 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xce0)))\\n                mstore(add(productsPtr, 0xa60), partialProduct)\\n                mstore(add(valuesPtr, 0xa60), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8184: x - g^8184 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xd00)))\\n                mstore(add(productsPtr, 0xa80), partialProduct)\\n                mstore(add(valuesPtr, 0xa80), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8188: x - g^8188 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xd20)))\\n                mstore(add(productsPtr, 0xaa0), partialProduct)\\n                mstore(add(valuesPtr, 0xaa0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8214: x - g^8214 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xd40)))\\n                mstore(add(productsPtr, 0xac0), partialProduct)\\n                mstore(add(valuesPtr, 0xac0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate the denominator for the composition polynomial columns: x - z^2.\\n                let denominator := add(shiftedEvalPoint, minusPointPow)\\n                mstore(add(productsPtr, 0xae0), partialProduct)\\n                mstore(add(valuesPtr, 0xae0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                // Add evalPoint to batch inverse inputs.\\n                // inverse(evalPoint) is going to be used by FRI.\\n                mstore(add(productsPtr, 0xb00), partialProduct)\\n                mstore(add(valuesPtr, 0xb00), evalPoint)\\n                partialProduct := mulmod(partialProduct, evalPoint, PRIME)\\n\\n                // Advance pointers.\\n                productsPtr := add(productsPtr, 0xb20)\\n                valuesPtr := add(valuesPtr, 0xb20)\\n            }\\n\\n            let productsToValuesOffset := 0x21600\\n            let firstPartialProductPtr := add(batchInverseArray, 0x20)\\n            // Compute the inverse of the product.\\n            let prodInv := expmod(partialProduct, sub(PRIME, 2), PRIME)\\n\\n            if eq(prodInv, 0) {\\n                // Solidity generates reverts with reason that look as follows:\\n                // 1. 4 bytes with the constant 0x08c379a0 (== Keccak256(b\\u0027Error(string)\\u0027)[:4]).\\n                // 2. 32 bytes offset bytes (always 0x20 as far as i can tell).\\n                // 3. 32 bytes with the length of the revert reason.\\n                // 4. Revert reason string.\\n\\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                mstore(0x4, 0x20)\\n                mstore(0x24, 0x1e)\\n                mstore(0x44, \\\"Batch inverse product is zero.\\\")\\n                revert(0, 0x62)\\n            }\\n\\n            // Compute the inverses.\\n            // Loop over denominator_invs in reverse order.\\n            // currentPartialProductPtr is initialized to one past the end.\\n            let currentPartialProductPtr := productsPtr\\n            // Loop in blocks of size 8 as much as possible: we can loop over a full block as long as\\n            // currentPartialProductPtr \\u003e= firstPartialProductPtr + 8*0x20, or equivalently,\\n            // currentPartialProductPtr \\u003e firstPartialProductPtr + 7*0x20.\\n            // We use the latter comparison since there is no \\u003e= evm opcode.\\n            let midPartialProductPtr := add(firstPartialProductPtr, 0xe0)\\n            for { } gt(currentPartialProductPtr, midPartialProductPtr) { } {\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n            }\\n\\n            // Loop over the remainder.\\n            for { } gt(currentPartialProductPtr, firstPartialProductPtr) { } {\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n            }\\n        }\\n    }\\n}\\n// ---------- End of auto-generated code. ----------\\n\"},\"MemoryMap.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\ncontract MemoryMap {\\n    /*\\n      We store the state of the verifer in a contiguous chunk of memory.\\n      The offsets of the different fields are listed below.\\n      E.g. The offset of the i\\u0027th hash is [mm_hashes + i].\\n    */\\n    uint256 constant internal CHANNEL_STATE_SIZE = 3;\\n    uint256 constant internal MAX_N_QUERIES =  48;\\n    uint256 constant internal FRI_QUEUE_SIZE = MAX_N_QUERIES;\\n\\n    uint256 constant internal MAX_SUPPORTED_MAX_FRI_STEP = 4;\\n\\n    uint256 constant internal MM_EVAL_DOMAIN_SIZE =                          0x0;\\n    uint256 constant internal MM_BLOW_UP_FACTOR =                            0x1;\\n    uint256 constant internal MM_LOG_EVAL_DOMAIN_SIZE =                      0x2;\\n    uint256 constant internal MM_PROOF_OF_WORK_BITS =                        0x3;\\n    uint256 constant internal MM_EVAL_DOMAIN_GENERATOR =                     0x4;\\n    uint256 constant internal MM_PUBLIC_INPUT_PTR =                          0x5;\\n    uint256 constant internal MM_TRACE_COMMITMENT =                          0x6; // uint256[2]\\n    uint256 constant internal MM_OODS_COMMITMENT =                           0x8;\\n    uint256 constant internal MM_N_UNIQUE_QUERIES =                          0x9;\\n    uint256 constant internal MM_CHANNEL =                                   0xa; // uint256[3]\\n    uint256 constant internal MM_MERKLE_QUEUE =                              0xd; // uint256[96]\\n    uint256 constant internal MM_FRI_QUEUE =                                0x6d; // uint256[144]\\n    uint256 constant internal MM_FRI_QUERIES_DELIMITER =                    0xfd;\\n    uint256 constant internal MM_FRI_CTX =                                  0xfe; // uint256[40]\\n    uint256 constant internal MM_FRI_STEPS_PTR =                           0x126;\\n    uint256 constant internal MM_FRI_EVAL_POINTS =                         0x127; // uint256[10]\\n    uint256 constant internal MM_FRI_COMMITMENTS =                         0x131; // uint256[10]\\n    uint256 constant internal MM_FRI_LAST_LAYER_DEG_BOUND =                0x13b;\\n    uint256 constant internal MM_FRI_LAST_LAYER_PTR =                      0x13c;\\n    uint256 constant internal MM_CONSTRAINT_POLY_ARGS_START =              0x13d;\\n    uint256 constant internal MM_PERIODIC_COLUMN__PEDERSEN__POINTS__X =    0x13d;\\n    uint256 constant internal MM_PERIODIC_COLUMN__PEDERSEN__POINTS__Y =    0x13e;\\n    uint256 constant internal MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__X = 0x13f;\\n    uint256 constant internal MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__Y = 0x140;\\n    uint256 constant internal MM_TRACE_LENGTH =                            0x141;\\n    uint256 constant internal MM_OFFSET_SIZE =                             0x142;\\n    uint256 constant internal MM_HALF_OFFSET_SIZE =                        0x143;\\n    uint256 constant internal MM_INITIAL_AP =                              0x144;\\n    uint256 constant internal MM_INITIAL_PC =                              0x145;\\n    uint256 constant internal MM_FINAL_AP =                                0x146;\\n    uint256 constant internal MM_FINAL_PC =                                0x147;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__PERM__INTERACTION_ELM = 0x148;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__HASH_INTERACTION_ELM0 = 0x149;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__PERM__PUBLIC_MEMORY_PROD = 0x14a;\\n    uint256 constant internal MM_RC16__PERM__INTERACTION_ELM =             0x14b;\\n    uint256 constant internal MM_RC16__PERM__PUBLIC_MEMORY_PROD =          0x14c;\\n    uint256 constant internal MM_RC_MIN =                                  0x14d;\\n    uint256 constant internal MM_RC_MAX =                                  0x14e;\\n    uint256 constant internal MM_PEDERSEN__SHIFT_POINT_X =                 0x14f;\\n    uint256 constant internal MM_PEDERSEN__SHIFT_POINT_Y =                 0x150;\\n    uint256 constant internal MM_INITIAL_PEDERSEN_ADDR =                   0x151;\\n    uint256 constant internal MM_INITIAL_RC_ADDR =                         0x152;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_ALPHA =                 0x153;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_SHIFT_POINT_X =         0x154;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_SHIFT_POINT_Y =         0x155;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_BETA =                  0x156;\\n    uint256 constant internal MM_INITIAL_ECDSA_ADDR =                      0x157;\\n    uint256 constant internal MM_INITIAL_CHECKPOINTS_ADDR =                0x158;\\n    uint256 constant internal MM_FINAL_CHECKPOINTS_ADDR =                  0x159;\\n    uint256 constant internal MM_TRACE_GENERATOR =                         0x15a;\\n    uint256 constant internal MM_OODS_POINT =                              0x15b;\\n    uint256 constant internal MM_INTERACTION_ELEMENTS =                    0x15c; // uint256[3]\\n    uint256 constant internal MM_COEFFICIENTS =                            0x15f; // uint256[348]\\n    uint256 constant internal MM_OODS_VALUES =                             0x2bb; // uint256[205]\\n    uint256 constant internal MM_CONSTRAINT_POLY_ARGS_END =                0x388;\\n    uint256 constant internal MM_COMPOSITION_OODS_VALUES =                 0x388; // uint256[2]\\n    uint256 constant internal MM_OODS_EVAL_POINTS =                        0x38a; // uint256[48]\\n    uint256 constant internal MM_OODS_COEFFICIENTS =                       0x3ba; // uint256[207]\\n    uint256 constant internal MM_TRACE_QUERY_RESPONSES =                   0x489; // uint256[1056]\\n    uint256 constant internal MM_COMPOSITION_QUERY_RESPONSES =             0x8a9; // uint256[96]\\n    uint256 constant internal MM_LOG_N_STEPS =                             0x909;\\n    uint256 constant internal MM_N_PUBLIC_MEM_ENTRIES =                    0x90a;\\n    uint256 constant internal MM_N_PUBLIC_MEM_PAGES =                      0x90b;\\n    uint256 constant internal MM_CONTEXT_SIZE =                            0x90c;\\n}\\n\"},\"PrimeFieldElement0.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\n\\ncontract PrimeFieldElement0 {\\n    uint256 constant internal K_MODULUS =\\n    0x800000000000011000000000000000000000000000000000000000000000001;\\n    uint256 constant internal K_MODULUS_MASK =\\n    0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant internal K_MONTGOMERY_R =\\n    0x7fffffffffffdf0ffffffffffffffffffffffffffffffffffffffffffffffe1;\\n    uint256 constant internal K_MONTGOMERY_R_INV =\\n    0x40000000000001100000000000012100000000000000000000000000000000;\\n    uint256 constant internal GENERATOR_VAL = 3;\\n    uint256 constant internal ONE_VAL = 1;\\n    uint256 constant internal GEN1024_VAL =\\n    0x659d83946a03edd72406af6711825f5653d9e35dc125289a206c054ec89c4f1;\\n\\n    function fromMontgomery(uint256 val) internal pure returns (uint256 res) {\\n        // uint256 res = fmul(val, kMontgomeryRInv);\\n        assembly {\\n            res := mulmod(val,\\n                          0x40000000000001100000000000012100000000000000000000000000000000,\\n                          0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fromMontgomeryBytes(bytes32 bs) internal pure returns (uint256) {\\n        // Assuming bs is a 256bit bytes object, in Montgomery form, it is read into a field\\n        // element.\\n        uint256 res = uint256(bs);\\n        return fromMontgomery(res);\\n    }\\n\\n    function toMontgomeryInt(uint256 val) internal pure returns (uint256 res) {\\n        //uint256 res = fmul(val, kMontgomeryR);\\n        assembly {\\n            res := mulmod(val,\\n                          0x7fffffffffffdf0ffffffffffffffffffffffffffffffffffffffffffffffe1,\\n                          0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fmul(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        //uint256 res = mulmod(a, b, kModulus);\\n        assembly {\\n            res := mulmod(a, b,\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fadd(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        // uint256 res = addmod(a, b, kModulus);\\n        assembly {\\n            res := addmod(a, b,\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fsub(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        // uint256 res = addmod(a, kModulus - b, kModulus);\\n        assembly {\\n            res := addmod(\\n                a,\\n                sub(0x800000000000011000000000000000000000000000000000000000000000001, b),\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fpow(uint256 val, uint256 exp) internal view returns (uint256) {\\n        return expmod(val, exp, K_MODULUS);\\n    }\\n\\n    function expmod(uint256 base, uint256 exponent, uint256 modulus)\\n        internal view returns (uint256 res)\\n    {\\n        assembly {\\n            let p := mload(0x40)\\n            mstore(p, 0x20)                  // Length of Base.\\n            mstore(add(p, 0x20), 0x20)       // Length of Exponent.\\n            mstore(add(p, 0x40), 0x20)       // Length of Modulus.\\n            mstore(add(p, 0x60), base)       // Base.\\n            mstore(add(p, 0x80), exponent)   // Exponent.\\n            mstore(add(p, 0xa0), modulus)    // Modulus.\\n            // Call modexp precompile.\\n            if iszero(staticcall(gas(), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n            }\\n            res := mload(p)\\n        }\\n    }\\n\\n    function inverse(uint256 val) internal view returns (uint256) {\\n        return expmod(val, K_MODULUS - 2, K_MODULUS);\\n    }\\n}\\n\"},\"StarkParameters.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\nimport \\\"PrimeFieldElement0.sol\\\";\\n\\ncontract StarkParameters is PrimeFieldElement0 {\\n    uint256 constant internal N_COEFFICIENTS = 348;\\n    uint256 constant internal N_INTERACTION_ELEMENTS = 3;\\n    uint256 constant internal MASK_SIZE = 205;\\n    uint256 constant internal N_ROWS_IN_MASK = 87;\\n    uint256 constant internal N_COLUMNS_IN_MASK = 22;\\n    uint256 constant internal N_COLUMNS_IN_TRACE0 = 21;\\n    uint256 constant internal N_COLUMNS_IN_TRACE1 = 1;\\n    uint256 constant internal CONSTRAINTS_DEGREE_BOUND = 2;\\n    uint256 constant internal N_OODS_VALUES = MASK_SIZE + CONSTRAINTS_DEGREE_BOUND;\\n    uint256 constant internal N_OODS_COEFFICIENTS = N_OODS_VALUES;\\n    uint256 constant internal MAX_FRI_STEP = 3;\\n\\n    // ---------- // Air specific constants. ----------\\n    uint256 constant internal PUBLIC_MEMORY_STEP = 8;\\n    uint256 constant internal PEDERSEN_BUILTIN_RATIO = 8;\\n    uint256 constant internal PEDERSEN_BUILTIN_REPETITIONS = 4;\\n    uint256 constant internal RC_BUILTIN_RATIO = 8;\\n    uint256 constant internal RC_N_PARTS = 8;\\n    uint256 constant internal ECDSA_BUILTIN_RATIO = 512;\\n    uint256 constant internal ECDSA_BUILTIN_REPETITIONS = 1;\\n    uint256 constant internal LAYOUT_CODE = 6579576;\\n    uint256 constant internal LOG_CPU_COMPONENT_HEIGHT = 4;\\n}\\n// ---------- End of auto-generated code. ----------\\n\"}}","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"CpuOods","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a8260b951e630c711cdb5f529beef4365c391467c4ebd9d8b3e8c4775cb7d0a"}]}