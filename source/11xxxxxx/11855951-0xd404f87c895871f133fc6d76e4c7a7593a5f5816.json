{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.10 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITimelockManager.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface ITimelockManager {\r\n    event Api3PoolUpdated(address api3PoolAddress);\r\n\r\n    event RevertedTimelock(\r\n        address indexed recipient,\r\n        address destination,\r\n        uint256 amount\r\n        );\r\n\r\n    event PermittedTimelockToBeReverted(address recipient);\r\n\r\n    event TransferredAndLocked(\r\n        address source,\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        uint256 releaseStart,\r\n        uint256 releaseEnd\r\n        );\r\n\r\n    event Withdrawn(\r\n        address indexed recipient,\r\n        uint256 amount\r\n        );\r\n\r\n    event WithdrawnToPool(\r\n        address indexed recipient,\r\n        address api3PoolAddress,\r\n        address beneficiary\r\n        );\r\n\r\n    function updateApi3Pool(address api3PoolAddress)\r\n        external;\r\n\r\n    function revertTimelock(\r\n        address recipient,\r\n        address destination\r\n        )\r\n        external;\r\n\r\n    function permitTimelockToBeReverted()\r\n        external;\r\n\r\n    function transferAndLock(\r\n        address source,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 releaseStart,\r\n        uint256 releaseEnd\r\n        )\r\n        external;\r\n\r\n    function transferAndLockMultiple(\r\n        address source,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata releaseStarts,\r\n        uint256[] calldata releaseEnds\r\n        )\r\n        external;\r\n\r\n    function withdraw()\r\n        external;\r\n\r\n    function withdrawToPool(\r\n        address api3PoolAddress,\r\n        address beneficiary\r\n        )\r\n        external;\r\n\r\n    function getWithdrawable(address recipient)\r\n        external\r\n        view\r\n        returns(uint256 withdrawable);\r\n\r\n    function getTimelock(address recipient)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalAmount,\r\n            uint256 remainingAmount,\r\n            uint256 releaseStart,\r\n            uint256 releaseEnd\r\n            );\r\n\r\n    function getRemainingAmount(address recipient)\r\n        external\r\n        view\r\n        returns (uint256 remainingAmount);\r\n\r\n    function getIfTimelockIsRevertible(address recipient)\r\n        external\r\n        view\r\n        returns (bool revertStatus);\r\n}\r\n\r\n\r\n// File contracts/TimelockAgent.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract TimelockAgent is Ownable {\r\n    struct Timelock{\r\n        address timelockContractAddress;\r\n        address recipient;\r\n        uint256 amount;\r\n        uint256 releaseStart;\r\n        uint256 releaseEnd;\r\n        }\r\n\r\n    IERC20 public api3Token;\r\n    address public api3Dao;\r\n    Timelock[] public timelocks;\r\n\r\n    constructor (\r\n        address _api3Token,\r\n        address _api3Dao\r\n        )\r\n        public\r\n    {\r\n        api3Token = IERC20(_api3Token);\r\n        api3Dao = _api3Dao;\r\n    }\r\n\r\n    function setTimelocks(\r\n        address[] calldata timelockContractAddresses,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata releaseStarts,\r\n        uint256[] calldata releaseEnds\r\n        )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            timelockContractAddresses.length == recipients.length\r\n                && timelockContractAddresses.length == amounts.length\r\n                && timelockContractAddresses.length == releaseStarts.length\r\n                && timelockContractAddresses.length == releaseEnds.length,\r\n            \"Parameters are of unequal length\"\r\n            );\r\n        require(\r\n            timelockContractAddresses.length <= 30,\r\n            \"Parameters are longer than 30\"\r\n            );\r\n        require(\r\n            timelocks.length == 0,\r\n            \"Timelocks already set\"\r\n            );\r\n        for (uint256 ind = 0; ind < timelockContractAddresses.length; ind++)\r\n        {\r\n            timelocks.push(Timelock(\r\n                timelockContractAddresses[ind],\r\n                recipients[ind],\r\n                amounts[ind],\r\n                releaseStarts[ind],\r\n                releaseEnds[ind]\r\n                ));\r\n        }\r\n    }\r\n\r\n    function getLengthOfTimelocks()\r\n        external\r\n        view\r\n        returns (uint256 lengthOfTimelocks)\r\n    {\r\n        lengthOfTimelocks = timelocks.length;\r\n    }\r\n\r\n    function executeTimelocks()\r\n        external\r\n    {\r\n        require(\r\n            timelocks.length != 0,\r\n            \"Timelocks not set\"\r\n            );\r\n        for (uint256 ind = 0; ind < timelocks.length; ind++)\r\n        {\r\n            Timelock storage timelock = timelocks[ind];\r\n            api3Token.approve(timelock.timelockContractAddress, timelock.amount);\r\n            ITimelockManager timelockManager = ITimelockManager(timelock.timelockContractAddress);\r\n            timelockManager.transferAndLock(\r\n                address(this),\r\n                timelock.recipient,\r\n                timelock.amount,\r\n                timelock.releaseStart,\r\n                timelock.releaseEnd\r\n                );\r\n        }\r\n        delete timelocks;\r\n    }\r\n\r\n    function refund()\r\n        external\r\n        onlyOwner\r\n    {\r\n        api3Token.transfer(api3Dao, api3Token.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_api3Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_api3Dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTimelocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLengthOfTimelocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lengthOfTimelocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"timelockContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseEnds\",\"type\":\"uint256[]\"}],\"name\":\"setTimelocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"timelockContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimelockAgent","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000b38210ea11411557c13457d4da7dc6ea731b88a000000000000000000000000e7af7c5982e073ac6525a34821fe1b3e8e432099","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d0e2e8f413f069f2eb7183d190bec93285b16bb36d46c26305ed9ad5e2c2dff"}]}