{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract SwapAdmin {\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin address cannot be 0\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit candidateChanged( old, candidate);\r\n    }\r\n\r\n    function becomeAdmin( ) external {\r\n        require( msg.sender == candidate, \"Only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged( old, admin ); \r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require( (msg.sender == admin), \"Only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event candidateChanged(address oldCandidate, address newCandidate );\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SwapTokenLocker is SwapAdmin {\r\n    using SafeMath for uint;\r\n    struct LockInfo {\r\n        uint128 amount;\r\n        uint128 claimedAmount;\r\n        uint64 lockTimestamp; \r\n        uint64 lastUpdated;\r\n        uint32 lockHours;\r\n    }\r\n    address immutable token;\r\n    mapping (address => LockInfo) public lockData;\r\n    constructor(address _admin, address _token) public SwapAdmin(_admin) {\r\n        token = _token;\r\n    }\r\n    function getToken() external view returns(address) {\r\n        return token;\r\n    }\r\n    function emergencyWithdraw(address _tokenAddress) external onlyAdmin {\r\n        require(_tokenAddress != address(0), \"Token address is invalid\");\r\n        IERC20(_tokenAddress).transfer(msg.sender, IERC20(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n\tfunction getLockData(address _user) external view returns(uint128, uint128, uint64, uint64, uint32) {\r\n        require(_user != address(0), \"User address is invalid\");\r\n        LockInfo storage _lockInfo = lockData[_user];\r\n\t\treturn (\r\n\t\t    _lockInfo.amount, \r\n\t\t    _lockInfo.claimedAmount, \r\n\t\t    _lockInfo.lockTimestamp, \r\n\t\t    _lockInfo.lastUpdated, \r\n\t\t    _lockInfo.lockHours);\r\n\t}\r\n    function sendLockTokenMany(\r\n        address[] calldata _users, \r\n        uint128[] calldata _amounts, \r\n        uint32[] calldata _lockHours,\r\n        uint256 _sendAmount\r\n    ) external onlyAdmin {\r\n        require(_users.length == _amounts.length, \"array length not eq\");\r\n        require(_users.length == _lockHours.length, \"array length not eq\");\r\n        require(_sendAmount > 0 , \"Amount is invalid\");\r\n        IERC20(token).transferFrom(msg.sender, address(this), _sendAmount);\r\n        for (uint256 j = 0; j < _users.length; j++) {\r\n            sendLockToken(_users[j], _amounts[j], uint64(block.timestamp), _lockHours[j]);\r\n        }\r\n    }\r\n    function sendLockToken(\r\n        address _user, \r\n        uint128 _amount, \r\n        uint64 _lockTimestamp, \r\n        uint32 _lockHours\r\n    ) internal {\r\n        require(_amount > 0, \"amount can not zero\");\r\n        require(_lockHours > 0, \"lock hours need more than zero\");\r\n        require(_lockTimestamp > 0, \"lock timestamp need more than zero\");\r\n        require(lockData[_user].amount == 0, \"this address has already locked\");\r\n        LockInfo memory lockinfo = LockInfo({\r\n            amount: _amount,\r\n            lockTimestamp: _lockTimestamp,\r\n            lockHours: _lockHours,\r\n            lastUpdated: uint64(block.timestamp),\r\n            claimedAmount: 0\r\n        });\r\n        lockData[_user] = lockinfo;\r\n    }\r\n    function claimToken(uint128 _amount) external returns (uint256) {\r\n        require(_amount > 0, \"Invalid parameter amount\");\r\n        address _user = msg.sender;\r\n        LockInfo storage _lockInfo = lockData[_user];\r\n        require(_lockInfo.lockTimestamp <= block.timestamp, \"Vesting time is not started\");\r\n        require(_lockInfo.amount > 0, \"No lock token to claim\");\r\n        uint256 passhours = block.timestamp.sub(_lockInfo.lockTimestamp).div(1 hours);\r\n        require(passhours > 0, \"need wait for one hour at least\");\r\n        require((block.timestamp - _lockInfo.lastUpdated) > 1 hours, \"You have to wait at least an hour to claim\");\r\n        uint256 available = 0;\r\n        if (passhours >= _lockInfo.lockHours) {\r\n            available = _lockInfo.amount;\r\n        } else {\r\n            available = uint256(_lockInfo.amount).div(_lockInfo.lockHours).mul(passhours);\r\n        }\r\n        available = available.sub(_lockInfo.claimedAmount);\r\n        require(available > 0, \"not available claim\");\r\n        uint256 claim = _amount;\r\n        if (_amount > available) { // claim as much as possible\r\n            claim = available;\r\n        }\r\n        _lockInfo.claimedAmount = uint128(uint256(_lockInfo.claimedAmount).add(claim));\r\n        IERC20(token).transfer(_user, claim);\r\n        _lockInfo.lastUpdated = uint64(block.timestamp);\r\n        return claim;\r\n    }\r\n}\r\n\r\ncontract SwapTokenLockerFactory {\r\n    event SwapTokenLockerCreated(address admin, address locker);\r\n    mapping(address => address[]) private deployedContracts;\r\n    address[] private allLockers;\r\n\r\n    function getLastDeployed(address owner) external view returns(address locker) {\r\n        uint256 length = deployedContracts[owner].length;\r\n        return deployedContracts[owner][length - 1];\r\n    }\r\n\r\n    function getAllContracts() external view returns (address[] memory) {\r\n        return allLockers;\r\n    }\r\n\r\n    function getDeployed(address owner) external view returns(address[] memory) {\r\n        return deployedContracts[owner];\r\n    }\r\n\r\n    function createTokenLocker(address token) external returns (address locker) {\r\n        SwapTokenLocker lockerContract = new SwapTokenLocker(msg.sender, token);\r\n        locker = address(lockerContract);\r\n        deployedContracts[msg.sender].push(locker);\r\n        allLockers.push(locker);\r\n        emit SwapTokenLockerCreated(msg.sender, locker);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"SwapTokenLockerCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDeployed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLastDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapTokenLockerFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae770558b4580299a158c8831b2238e7262327088aa124fb84864e47918bdae9"}]}