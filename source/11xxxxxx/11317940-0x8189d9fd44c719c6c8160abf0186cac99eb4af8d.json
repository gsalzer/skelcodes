{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/GToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal interface for gTokens, implemented by the GTokenBase contract.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\ninterface GToken is IERC20\r\n{\r\n\t// pure functions\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _netShares, uint256 _feeShares);\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _grossShares, uint256 _feeShares);\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\r\n\t// view functions\r\n\tfunction reserveToken() external view returns (address _reserveToken);\r\n\tfunction totalReserve() external view returns (uint256 _totalReserve);\r\n\tfunction depositFee() external view returns (uint256 _depositFee);\r\n\tfunction withdrawalFee() external view returns (uint256 _withdrawalFee);\r\n\r\n\t// open functions\r\n\tfunction deposit(uint256 _cost) external;\r\n\tfunction withdraw(uint256 _grossShares) external;\r\n}\r\n\r\n// File: contracts/GVoting.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev An interface to extend gTokens with voting delegation capabilities.\r\n *      See GTokenType3.sol for further documentation.\r\n */\r\ninterface GVoting\r\n{\r\n\t// view functions\r\n\tfunction votes(address _candidate) external view returns (uint256 _votes);\r\n\tfunction candidate(address _voter) external view returns (address _candidate);\r\n\r\n\t// open functions\r\n\tfunction setCandidate(address _newCandidate) external;\r\n\r\n\t// emitted events\r\n\tevent ChangeCandidate(address indexed _voter, address indexed _oldCandidate, address indexed _newCandidate);\r\n\tevent ChangeVotes(address indexed _candidate, uint256 _oldVotes, uint256 _newVotes);\r\n}\r\n\r\n// File: contracts/GFormulae.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\r\n *      for gTokens.\r\n *      All operations assume that, if total supply is 0, then the total\r\n *      reserve is also 0, and vice-versa.\r\n *      Fees are calculated percentually based on the gross amount.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\nlibrary GFormulae\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* deposit(cost):\r\n\t *   price = reserve / supply\r\n\t *   gross = cost / price\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return net, fee\r\n\t */\r\n\tfunction _calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _totalSupply == _totalReserve ? _cost : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_netShares = _grossShares.mul(uint256(1e18).sub(_depositFee)).div(1e18);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_netShares, _feeShares);\r\n\t}\r\n\r\n\t/* deposit_reverse(net):\r\n\t *   price = reserve / supply\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = gross * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_depositFee));\r\n\t\t_cost = _totalReserve == _totalSupply ? _grossShares : _grossShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal_reverse(cost):\r\n\t *   price = reserve / supply\r\n\t *   net = cost / price\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return gross, fee\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _cost == _totalReserve ? _totalSupply : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_withdrawalFee));\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_grossShares, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal(gross):\r\n\t *   price = reserve / supply\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = net * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _grossShares.mul(uint256(1e18).sub(_withdrawalFee)).div(1e18);\r\n\t\t_cost = _netShares == _totalSupply ? _totalReserve : _netShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/WrappedEther.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for WETH interoperability.\r\n */\r\ninterface WETH is IERC20\r\n{\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for conveniece. It is the single source for\r\n *      the current network and all related hardcoded contract addresses. It\r\n *      also provide useful definitions for debuging faultless code via events.\r\n */\r\nlibrary $\r\n{\r\n\tenum Network { Mainnet, Ropsten, Rinkeby, Kovan, Goerli }\r\n\r\n\tNetwork constant NETWORK = Network.Mainnet;\r\n\r\n\tbool constant DEBUG = NETWORK != Network.Mainnet;\r\n\r\n\tfunction debug(string memory _message) internal\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tif (DEBUG) emit Debug(_from, _message);\r\n\t}\r\n\r\n\tfunction debug(string memory _message, uint256 _value) internal\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tif (DEBUG) emit Debug(_from, _message, _value);\r\n\t}\r\n\r\n\tfunction debug(string memory _message, address _address) internal\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tif (DEBUG) emit Debug(_from, _message, _address);\r\n\t}\r\n\r\n\tevent Debug(address indexed _from, string _message);\r\n\tevent Debug(address indexed _from, string _message, uint256 _value);\r\n\tevent Debug(address indexed _from, string _message, address _address);\r\n\r\n\taddress constant GRO =\r\n\t\tNETWORK == Network.Mainnet ? 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0 :\r\n\t\tNETWORK == Network.Ropsten ? 0x5BaF82B5Eddd5d64E03509F0a7dBa4Cbf88CF455 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x020e317e70B406E23dF059F3656F6fc419411401 :\r\n\t\tNETWORK == Network.Kovan ? 0xFcB74f30d8949650AA524d8bF496218a20ce2db4 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant DAI =\r\n\t\tNETWORK == Network.Mainnet ? 0x6B175474E89094C44Da98b954EedeAC495271d0F :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant USDC =\r\n\t\tNETWORK == Network.Mainnet ? 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant USDT =\r\n\t\tNETWORK == Network.Mainnet ? 0xdAC17F958D2ee523a2206206994597C13D831ec7 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant SUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant TUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x0000000000085d4780B73119b644AE5ecd22b376 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant BUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x4Fabb145d64652a948d72533023f6E7A623C7C53 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant WBTC =\r\n\t\tNETWORK == Network.Mainnet ? 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant WETH =\r\n\t\tNETWORK == Network.Mainnet ? 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 :\r\n\t\tNETWORK == Network.Ropsten ? 0xc778417E063141139Fce010982780140Aa0cD5Ab :\r\n\t\tNETWORK == Network.Rinkeby ? 0xc778417E063141139Fce010982780140Aa0cD5Ab :\r\n\t\tNETWORK == Network.Kovan ? 0xd0A1E359811322d97991E03f863a0C30C2cF029C :\r\n\t\tNETWORK == Network.Goerli ? 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant BAT =\r\n\t\tNETWORK == Network.Mainnet ? 0x0D8775F648430679A709E98d2b0Cb6250d2887EF :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant ENJ =\r\n\t\tNETWORK == Network.Mainnet ? 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant KNC =\r\n\t\tNETWORK == Network.Mainnet ? 0xdd974D5C2e2928deA5F71b9825b8b646686BD200 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant AAVE =\r\n\t\tNETWORK == Network.Mainnet ? 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant LEND =\r\n\t\tNETWORK == Network.Mainnet ? 0x80fB784B7eD66730e8b1DBd9820aFD29931aab03 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant LINK =\r\n\t\tNETWORK == Network.Mainnet ? 0x514910771AF9Ca656af840dff83E8264EcF986CA :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant MANA =\r\n\t\tNETWORK == Network.Mainnet ? 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant MKR =\r\n\t\tNETWORK == Network.Mainnet ? 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant REN =\r\n\t\tNETWORK == Network.Mainnet ? 0x408e41876cCCDC0F92210600ef50372656052a38 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant REP =\r\n\t\tNETWORK == Network.Mainnet ? 0x1985365e9f78359a9B6AD760e32412f4a445E862 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant SNX =\r\n\t\tNETWORK == Network.Mainnet ? 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant ZRX =\r\n\t\tNETWORK == Network.Mainnet ? 0xE41d2489571d322189246DaFA5ebDe1F4699F498 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant UNI =\r\n\t\tNETWORK == Network.Mainnet ? 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant YFI =\r\n\t\tNETWORK == Network.Mainnet ? 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aETH =\r\n\t\tNETWORK == Network.Mainnet ? 0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04 :\r\n\t\tNETWORK == Network.Ropsten ? 0x2433A1b6FcF156956599280C3Eb1863247CFE675 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xD483B49F2d55D2c53D32bE6efF735cB001880F79 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aDAI =\r\n\t\tNETWORK == Network.Mainnet ? 0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d :\r\n\t\tNETWORK == Network.Ropsten ? 0xcB1Fe6F440c49E9290c3eb7f158534c2dC374201 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x58AD4cB396411B691A9AAb6F74545b2C5217FE6a :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aUSDC =\r\n\t\tNETWORK == Network.Mainnet ? 0x9bA00D6856a4eDF4665BcA2C2309936572473B7E :\r\n\t\tNETWORK == Network.Ropsten ? 0x2dB6a31f973Ec26F5e17895f0741BB5965d5Ae15 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x02F626c6ccb6D2ebC071c068DC1f02Bf5693416a :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aSUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x625aE63000f46200499120B906716420bd059240 :\r\n\t\tNETWORK == Network.Ropsten ? 0x5D17e0ea2d886F865E40176D71dbc0b59a54d8c1 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xb9c1434aB6d5811D1D0E92E8266A37Ae8328e901 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aTUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x4DA9b813057D04BAef4e5800E36083717b4a0341 :\r\n\t\tNETWORK == Network.Ropsten ? 0x9265d51F5ABf1E23bE64418827859bc83ae70a57 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x4c76f1b48316489E8a3304Db21cdAeC271cF6eC3 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aUSDT =\r\n\t\tNETWORK == Network.Mainnet ? 0x71fc860F7D3A592A4a98740e39dB31d25db65ae8 :\r\n\t\tNETWORK == Network.Ropsten ? 0x790744bC4257B4a0519a3C5649Ac1d16DDaFAE0D :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xA01bA9fB493b851F4Ac5093A324CB081A909C34B :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aBUSD =\r\n\t\tNETWORK == Network.Mainnet ? 0x6Ee0f7BB50a54AB5253dA0667B0Dc2ee526C30a8 :\r\n\t\tNETWORK == Network.Ropsten ? 0x81E065164bAC7203c3bFEB1a749F48a64383c6eE :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aBAT =\r\n\t\tNETWORK == Network.Mainnet ? 0xE1BA0FB44CCb0D11b80F92f4f8Ed94CA3fF51D00 :\r\n\t\tNETWORK == Network.Ropsten ? 0x0D0Ff1C81F2Fbc8cbafA8Df4bF668f5ba963Dab4 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x5ad67de6Fb697e92a7dE99d991F7CdB77EdF5F74 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aENJ =\r\n\t\tNETWORK == Network.Mainnet ? 0x712DB54daA836B53Ef1EcBb9c6ba3b9Efb073F40 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aKNC =\r\n\t\tNETWORK == Network.Mainnet ? 0x9D91BE44C06d373a8a226E1f3b146956083803eB :\r\n\t\tNETWORK == Network.Ropsten ? 0xCf6efd4528d27Df440fdd585a116D3c1fC5aDdEe :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xB08EC9EdB6BD7971220FEa04644174f3EbfbDe96 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aAAVE =\r\n\t\tNETWORK == Network.Mainnet ? 0xba3D9687Cf50fE253cd2e1cFeEdE1d6787344Ed5 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aLEND =\r\n\t\t// NETWORK == Network.Mainnet ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Ropsten ? 0x383261d0e287f0A641322AEB15E3da50147Dd36b :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xcBa131C7FB05fe3c9720375cD86C99773faAbF23 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aLINK =\r\n\t\tNETWORK == Network.Mainnet ? 0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84 :\r\n\t\tNETWORK == Network.Ropsten ? 0x52fd99c15e6FFf8D4CF1B83b2263a501FDd78973 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xEC23855Ff01012E1823807CE19a790CeBc4A64dA :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aMANA =\r\n\t\tNETWORK == Network.Mainnet ? 0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f :\r\n\t\tNETWORK == Network.Ropsten ? 0x8e96a4068da80F66ef1CFc7987f0F834c26106fa :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xe68204D69Cbfaf6124190EFa65ad9C591C0D48e4 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aMKR =\r\n\t\tNETWORK == Network.Mainnet ? 0x7deB5e830be29F91E298ba5FF1356BB7f8146998 :\r\n\t\tNETWORK == Network.Ropsten ? 0xEd6A5d671f7c55aa029cbAEa2e5E9A18E9d6a1CE :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xfB762B5BAb463f7F35610Ba65e2534993a1c09C6 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aREN =\r\n\t\tNETWORK == Network.Mainnet ? 0x69948cC03f478B95283F7dbf1CE764d0fc7EC54C :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aREP =\r\n\t\tNETWORK == Network.Mainnet ? 0x71010A9D003445aC60C4e6A7017c1E89A477B438 :\r\n\t\tNETWORK == Network.Ropsten ? 0xE4B92BcDB2f972e1ccc069D4dB33d5f6363738dE :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x0578469469Db1129271f4eb3EB9D97426506c44c :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aSNX =\r\n\t\tNETWORK == Network.Mainnet ? 0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xb4D480f963f4F685F1D51d2B6159D126658B1dA8 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aUNI =\r\n\t\tNETWORK == Network.Mainnet ? 0xB124541127A0A657f056D9Dd06188c4F1b0e5aab :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aWBTC =\r\n\t\tNETWORK == Network.Mainnet ? 0xFC4B8ED459e00e5400be803A9BB3954234FD50e3 :\r\n\t\tNETWORK == Network.Ropsten ? 0xA1c4dB01F8344eCb11219714706C82f0c0c64841 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0xCD5C52C7B30468D16771193C47eAFF43EFc47f5C :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aYFI =\r\n\t\tNETWORK == Network.Mainnet ? 0x12e51E77DAAA58aA0E9247db7510Ea4B46F9bEAd :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant aZRX =\r\n\t\tNETWORK == Network.Mainnet ? 0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f :\r\n\t\tNETWORK == Network.Ropsten ? 0x5BDC773c9D3515a5e3Dd415428F92a90E8e63Ae4 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x0F456900c6bdFddfA27E1E4E4c84EB823a2eE13c :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cDAI =\r\n\t\tNETWORK == Network.Mainnet ? 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 :\r\n\t\tNETWORK == Network.Ropsten ? 0xdb5Ed4605C11822811a39F94314fDb8F0fb59A2C :\r\n\t\tNETWORK == Network.Rinkeby ? 0x6D7F0754FFeb405d23C51CE938289d4835bE3b14 :\r\n\t\tNETWORK == Network.Kovan ? 0xF0d0EB522cfa50B716B3b1604C4F0fA6f04376AD :\r\n\t\tNETWORK == Network.Goerli ? 0x822397d9a55d0fefd20F5c4bCaB33C5F65bd28Eb :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cUSDC =\r\n\t\tNETWORK == Network.Mainnet ? 0x39AA39c021dfbaE8faC545936693aC917d5E7563 :\r\n\t\tNETWORK == Network.Ropsten ? 0x8aF93cae804cC220D1A608d4FA54D1b6ca5EB361 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x5B281A6DdA0B271e91ae35DE655Ad301C976edb1 :\r\n\t\tNETWORK == Network.Kovan ? 0x4a92E71227D294F041BD82dd8f78591B75140d63 :\r\n\t\tNETWORK == Network.Goerli ? 0xCEC4a43eBB02f9B80916F1c718338169d6d5C1F0 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cUSDT =\r\n\t\tNETWORK == Network.Mainnet ? 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9 :\r\n\t\tNETWORK == Network.Ropsten ? 0x135669c2dcBd63F639582b313883F101a4497F76 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x2fB298BDbeF468638AD6653FF8376575ea41e768 :\r\n\t\tNETWORK == Network.Kovan ? 0x3f0A0EA2f86baE6362CF9799B523BA06647Da018 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cETH =\r\n\t\tNETWORK == Network.Mainnet ? 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5 :\r\n\t\tNETWORK == Network.Ropsten ? 0xBe839b6D93E3eA47eFFcCA1F27841C917a8794f3 :\r\n\t\tNETWORK == Network.Rinkeby ? 0xd6801a1DfFCd0a410336Ef88DeF4320D6DF1883e :\r\n\t\tNETWORK == Network.Kovan ? 0x41B5844f4680a8C38fBb695b7F9CFd1F64474a72 :\r\n\t\tNETWORK == Network.Goerli ? 0x20572e4c090f15667cF7378e16FaD2eA0e2f3EfF :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cWBTC =\r\n\t\tNETWORK == Network.Mainnet ? 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4 :\r\n\t\tNETWORK == Network.Ropsten ? 0x58145Bc5407D63dAF226e4870beeb744C588f149 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x0014F450B8Ae7708593F4A46F8fa6E5D50620F96 :\r\n\t\tNETWORK == Network.Kovan ? 0xa1fAA15655B0e7b6B6470ED3d096390e6aD93Abb :\r\n\t\tNETWORK == Network.Goerli ? 0x6CE27497A64fFFb5517AA4aeE908b1E7EB63B9fF :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cBAT =\r\n\t\tNETWORK == Network.Mainnet ? 0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E :\r\n\t\tNETWORK == Network.Ropsten ? 0x9E95c0b2412cE50C37a121622308e7a6177F819D :\r\n\t\tNETWORK == Network.Rinkeby ? 0xEBf1A11532b93a529b5bC942B4bAA98647913002 :\r\n\t\tNETWORK == Network.Kovan ? 0x4a77fAeE9650b09849Ff459eA1476eaB01606C7a :\r\n\t\tNETWORK == Network.Goerli ? 0xCCaF265E7492c0d9b7C2f0018bf6382Ba7f0148D :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cZRX =\r\n\t\tNETWORK == Network.Mainnet ? 0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407 :\r\n\t\tNETWORK == Network.Ropsten ? 0x00e02a5200CE3D5b5743F5369Deb897946C88121 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x52201ff1720134bBbBB2f6BC97Bf3715490EC19B :\r\n\t\tNETWORK == Network.Kovan ? 0xAf45ae737514C8427D373D50Cd979a242eC59e5a :\r\n\t\tNETWORK == Network.Goerli ? 0xA253295eC2157B8b69C44b2cb35360016DAa25b1 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cUNI =\r\n\t\tNETWORK == Network.Mainnet ? 0x35A18000230DA775CAc24873d00Ff85BccdeD550 :\r\n\t\tNETWORK == Network.Ropsten ? 0x22531F0f3a9c36Bfc3b04c4c60df5168A1cFCec3 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant cCOMP =\r\n\t\tNETWORK == Network.Mainnet ? 0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4 :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant COMP =\r\n\t\tNETWORK == Network.Mainnet ? 0xc00e94Cb662C3520282E6f5717214004A7f26888 :\r\n\t\tNETWORK == Network.Ropsten ? 0x1Fe16De955718CFAb7A44605458AB023838C2793 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x61460874a7196d6a22D1eE4922473664b3E95270 :\r\n\t\tNETWORK == Network.Goerli ? 0xe16C7165C8FeA64069802aE4c4c9C320783f2b6e :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Aave_AAVE_LENDING_POOL_ADDRESSES_PROVIDER =\r\n\t\tNETWORK == Network.Mainnet ? 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8 :\r\n\t\tNETWORK == Network.Ropsten ? 0x1c8756FD2B28e9426CDBDcC7E3c4d64fa9A54728 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Aave_AAVE_LENDING_POOL =\r\n\t\tNETWORK == Network.Mainnet ? 0x398eC7346DcD622eDc5ae82352F02bE94C62d119 :\r\n\t\tNETWORK == Network.Ropsten ? 0x9E5C7835E4b13368fd628196C4f1c6cEc89673Fa :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x580D4Fdc4BF8f9b5ae2fb9225D584fED4AD5375c :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Aave_AAVE_LENDING_POOL_CORE =\r\n\t\tNETWORK == Network.Mainnet ? 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3 :\r\n\t\tNETWORK == Network.Ropsten ? 0x4295Ee704716950A4dE7438086d6f0FBC0BA9472 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x95D1189Ed88B380E319dF73fF00E479fcc4CFa45 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Balancer_FACTORY =\r\n\t\tNETWORK == Network.Mainnet ? 0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x9C84391B443ea3a48788079a5f98e2EaD55c9309 :\r\n\t\tNETWORK == Network.Kovan ? 0x8f7F78080219d4066A8036ccD30D588B416a40DB :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Compound_COMPTROLLER =\r\n\t\tNETWORK == Network.Mainnet ? 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B :\r\n\t\tNETWORK == Network.Ropsten ? 0x54188bBeDD7b68228fa89CbDDa5e3e930459C6c6 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x2EAa9D77AE4D8f9cdD9FAAcd44016E746485bddb :\r\n\t\tNETWORK == Network.Kovan ? 0x5eAe89DC1C671724A672ff0630122ee834098657 :\r\n\t\tNETWORK == Network.Goerli ? 0x627EA49279FD0dE89186A58b8758aD02B6Be2867 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Dydx_SOLO_MARGIN =\r\n\t\tNETWORK == Network.Mainnet ? 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\tNETWORK == Network.Kovan ? 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant Sushiswap_ROUTER02 =\r\n\t\tNETWORK == Network.Mainnet ? 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F :\r\n\t\t// NETWORK == Network.Ropsten ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Rinkeby ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Kovan ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Goerli ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant UniswapV2_ROUTER02 =\r\n\t\tNETWORK == Network.Mainnet ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Ropsten ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Rinkeby ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Kovan ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Goerli ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n}\r\n\r\n// File: contracts/modules/Wrapping.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts Wrapped Ether operations.\r\n */\r\nlibrary Wrapping\r\n{\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _wrap(uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\ttry WETH($.WETH).deposit{value: _amount}() {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      Note that the contract using this library function must declare a\r\n\t *      payable receive/fallback function.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _unwrap(uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\ttry WETH($.WETH).withdraw(_amount) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t *      This operation will revert if it does not succeed.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t */\r\n\tfunction _safeWrap(uint256 _amount) internal\r\n\t{\r\n\t\trequire(_wrap(_amount), \"wrap failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      This operation will revert if it does not succeed. Note that\r\n\t *      the contract using this library function must declare a payable\r\n\t *      receive/fallback function.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t */\r\n\tfunction _safeUnwrap(uint256 _amount) internal\r\n\t{\r\n\t\trequire(_unwrap(_amount), \"unwrap failed\");\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/UniswapV2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Minimal set of declarations for Uniswap V2 interoperability.\r\n */\r\ninterface Router01\r\n{\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\tfunction getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n}\r\n\r\n// File: contracts/modules/UniswapV2ExchangeAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Uniswap V2 token conversion functionality.\r\n */\r\nlibrary UniswapV2ExchangeAbstraction\r\n{\r\n\t/**\r\n\t * @dev Calculates how much output to be received from the given input\r\n\t *      when converting between two assets.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _inputAmount The input asset amount to be provided.\r\n\t * @return _outputAmount The output asset amount to be received.\r\n\t */\r\n\tfunction _calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) internal view returns (uint256 _outputAmount)\r\n\t{\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _WETH = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\r\n\t\treturn Router02(_router).getAmountsOut(_inputAmount, _path)[_path.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how much input to be received the given the output\r\n\t *      when converting between two assets.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _outputAmount The output asset amount to be received.\r\n\t * @return _inputAmount The input asset amount to be provided.\r\n\t */\r\n\tfunction _calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) internal view returns (uint256 _inputAmount)\r\n\t{\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _WETH = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\r\n\t\treturn Router02(_router).getAmountsIn(_outputAmount, _path)[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Convert funds between two assets.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _inputAmount The input asset amount to be provided.\r\n\t * @param _minOutputAmount The output asset minimum amount to be received.\r\n\t * @return _outputAmount The output asset amount received.\r\n\t */\r\n\tfunction _convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\r\n\t{\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _WETH = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WETH, _to);\r\n\t\tTransfers._approveFunds(_from, _router, _inputAmount);\r\n\t\treturn Router02(_router).swapExactTokensForTokens(_inputAmount, _minOutputAmount, _path, address(this), uint256(-1))[_path.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Builds a routing path for conversion using WETH as intermediate.\r\n\t *      Deals with the special case where WETH is also the input or the\r\n\t *      output asset.\r\n\t * @param _from The input asset address.\r\n\t * @param _WETH The Wrapped Ether address.\r\n\t * @param _to The output asset address.\r\n\t * @return _path The route to perform conversion.\r\n\t */\r\n\tfunction _buildPath(address _from, address _WETH, address _to) internal pure returns (address[] memory _path)\r\n\t{\r\n\t\tif (_from == _WETH || _to == _WETH) {\r\n\t\t\t_path = new address[](2);\r\n\t\t\t_path[0] = _from;\r\n\t\t\t_path[1] = _to;\r\n\t\t\treturn _path;\r\n\t\t} else {\r\n\t\t\t_path = new address[](3);\r\n\t\t\t_path[0] = _from;\r\n\t\t\t_path[1] = _WETH;\r\n\t\t\t_path[2] = _to;\r\n\t\t\treturn _path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/GExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Custom and uniform interface to a decentralized exchange. It is used\r\n *      to estimate and convert funds whenever necessary. This furnishes\r\n *      client contracts with the flexibility to replace conversion strategy\r\n *      and routing, dynamically, by delegating these operations to different\r\n *      external contracts that share this common interface. See\r\n *      GUniswapV2Exchange.sol for further documentation.\r\n */\r\ninterface GExchange\r\n{\r\n\t// view functions\r\n\tfunction calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\r\n\t// open functions\r\n\tfunction convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\r\n}\r\n\r\n// File: contracts/modules/Conversions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary Conversions\r\n{\r\n\tfunction _calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) internal view returns (uint256 _outputAmount)\r\n\t{\r\n\t\tif (_inputAmount == 0) return 0;\r\n\t\treturn UniswapV2ExchangeAbstraction._calcConversionOutputFromInput(_from, _to, _inputAmount);\r\n\t}\r\n\r\n\tfunction _calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) internal view returns (uint256 _inputAmount)\r\n\t{\r\n\t\tif (_outputAmount == 0) return 0;\r\n\t\treturn UniswapV2ExchangeAbstraction._calcConversionInputFromOutput(_from, _to, _outputAmount);\r\n\t}\r\n\r\n\tfunction _convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\r\n\t{\r\n\t\tif (_inputAmount == 0) {\r\n\t\t\trequire(_minOutputAmount == 0, \"insufficient output amount\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn UniswapV2ExchangeAbstraction._convertFunds(_from, _to, _inputAmount, _minOutputAmount);\r\n\t}\r\n\r\n\tfunction _dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\r\n\t{\r\n\t\tTransfers._approveFunds(_from, _exchange, _inputAmount);\r\n\t\ttry GExchange(_exchange).convertFunds(_from, _to, _inputAmount, _minOutputAmount) returns (uint256 _outAmount) {\r\n\t\t\treturn _outAmount;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\tTransfers._approveFunds(_from, _exchange, 0);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Aave.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Aave interoperability.\r\n */\r\ninterface LendingPoolAddressesProvider\r\n{\r\n\tfunction getLendingPool() external view returns (address _pool);\r\n\tfunction getLendingPoolCore() external view returns (address payable _lendingPoolCore);\r\n\tfunction getPriceOracle() external view returns (address _priceOracle);\r\n}\r\n\r\ninterface LendingPool\r\n{\r\n\tfunction getReserveConfigurationData(address _reserve) external view returns (uint256 _ltv, uint256 _liquidationThreshold, uint256 _liquidationBonus, address _interestRateStrategyAddress, bool _usageAsCollateralEnabled, bool _borrowingEnabled, bool _stableBorrowRateEnabled, bool _isActive);\r\n\tfunction getUserAccountData(address _user) external view returns (uint256 _totalLiquidityETH, uint256 _totalCollateralETH, uint256 _totalBorrowsETH, uint256 _totalFeesETH, uint256 _availableBorrowsETH, uint256 _currentLiquidationThreshold, uint256 _ltv, uint256 _healthFactor);\r\n\tfunction getUserReserveData(address _reserve, address _user) external view returns (uint256 _currentATokenBalance, uint256 _currentBorrowBalance, uint256 _principalBorrowBalance, uint256 _borrowRateMode, uint256 _borrowRate, uint256 _liquidityRate, uint256 _originationFee, uint256 _variableBorrowIndex, uint256 _lastUpdateTimestamp, bool _usageAsCollateralEnabled);\r\n\tfunction deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n\tfunction repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n\tfunction flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n}\r\n\r\ninterface LendingPoolCore\r\n{\r\n\tfunction getReserveDecimals(address _reserve) external view returns (uint256 _decimals);\r\n\tfunction getReserveAvailableLiquidity(address _reserve) external view returns (uint256 _availableLiquidity);\r\n}\r\n\r\ninterface AToken is IERC20\r\n{\r\n\tfunction underlyingAssetAddress() external view returns (address _underlyingAssetAddress);\r\n\tfunction redeem(uint256 _amount) external;\r\n}\r\n\r\ninterface APriceOracle\r\n{\r\n\tfunction getAssetPrice(address _asset) external view returns (uint256 _assetPrice);\r\n}\r\n\r\ninterface FlashLoanReceiver\r\n{\r\n\tfunction executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/modules/AaveFlashLoanAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Aave flash loan functionality. It has a\r\n *      standardized flash loan interface. See GFlashBorrower.sol,\r\n *      FlashLoans.sol, and DydxFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary AaveFlashLoanAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant FLASH_LOAN_FEE_RATIO = 9e14; // 0.09%\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\t_token; // silences warnings\r\n\t\treturn _netAmount.mul(FLASH_LOAN_FEE_RATIO).div(1e18);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current market liquidity for a given reserve.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\taddress _core = $.Aave_AAVE_LENDING_POOL_CORE;\r\n\t\treturn LendingPoolCore(_core).getReserveAvailableLiquidity(_token);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan. The current contract will receive a call\r\n\t *      back with the loan amount and should repay it, including fees,\r\n\t *      before returning. See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\r\n\t\ttry LendingPool(_pool).flashLoan(address(this), _token, _netAmount, _context) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\taddress _poolCore = $.Aave_AAVE_LENDING_POOL_CORE;\r\n\t\tTransfers._pushFunds(_token, _poolCore, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Dydx.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Minimal set of declarations for Dydx interoperability.\r\n */\r\ninterface SoloMargin\r\n{\r\n\tfunction getMarketTokenAddress(uint256 _marketId) external view returns (address _token);\r\n\tfunction getNumMarkets() external view returns (uint256 _numMarkets);\r\n\tfunction operate(Account.Info[] memory _accounts, Actions.ActionArgs[] memory _actions) external;\r\n}\r\n\r\ninterface ICallee\r\n{\r\n\tfunction callFunction(address _sender, Account.Info memory _accountInfo, bytes memory _data) external;\r\n}\r\n\r\nlibrary Account\r\n{\r\n\tstruct Info {\r\n\t\taddress owner;\r\n\t\tuint256 number;\r\n\t}\r\n}\r\n\r\nlibrary Actions\r\n{\r\n\tenum ActionType { Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call }\r\n\r\n\tstruct ActionArgs {\r\n\t\tActionType actionType;\r\n\t\tuint256 accountId;\r\n\t\tTypes.AssetAmount amount;\r\n\t\tuint256 primaryMarketId;\r\n\t\tuint256 secondaryMarketId;\r\n\t\taddress otherAddress;\r\n\t\tuint256 otherAccountId;\r\n\t\tbytes data;\r\n\t}\r\n}\r\n\r\nlibrary Types\r\n{\r\n\tenum AssetDenomination { Wei, Par }\r\n\tenum AssetReference { Delta, Target }\r\n\r\n\tstruct AssetAmount {\r\n\t\tbool sign;\r\n\t\tAssetDenomination denomination;\r\n\t\tAssetReference ref;\r\n\t\tuint256 value;\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/DydxFlashLoanAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Dydx flash loan functionality. It has a\r\n *      standardized flash loan interface. See GFlashBorrower.sol,\r\n *      FlashLoans.sol, and AaveFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary DydxFlashLoanAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\t_token; _netAmount; // silences warnings\r\n\t\treturn 2; // dydx has no fees, 2 wei is just a recommendation\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current market liquidity for a given reserve.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\treturn IERC20(_token).balanceOf(_solo);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan. The current contract will receive a call\r\n\t *      back with the loan amount and should repay it, including fees,\r\n\t *      before returning. See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\tuint256 _feeAmount = 2;\r\n\t\tuint256 _grossAmount = _netAmount.add(_feeAmount);\r\n\t\t// attempts to find the market id given a reserve token\r\n\t\tuint256 _marketId = uint256(-1);\r\n\t\tuint256 _numMarkets = SoloMargin(_solo).getNumMarkets();\r\n\t\tfor (uint256 _i = 0; _i < _numMarkets; _i++) {\r\n\t\t\taddress _address = SoloMargin(_solo).getMarketTokenAddress(_i);\r\n\t\t\tif (_address == _token) {\r\n\t\t\t\t_marketId = _i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_marketId == uint256(-1)) return false;\r\n\t\t// a flash loan on Dydx is achieved by the following sequence of\r\n\t\t// actions: withdrawal, user call back, and finally a deposit;\r\n\t\t// which is configured below\r\n\t\tAccount.Info[] memory _accounts = new Account.Info[](1);\r\n\t\t_accounts[0] = Account.Info({ owner: address(this), number: 1 });\r\n\t\tActions.ActionArgs[] memory _actions = new Actions.ActionArgs[](3);\r\n\t\t_actions[0] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Withdraw,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: false,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: _netAmount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: _marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t\t_actions[1] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Call,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: false,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: 0\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: 0,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: abi.encode(_token, _netAmount, _feeAmount, _context)\r\n\t\t});\r\n\t\t_actions[2] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Deposit,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: true,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: _grossAmount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: _marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t\ttry SoloMargin(_solo).operate(_accounts, _actions) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\tTransfers._approveFunds(_token, _solo, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/FlashLoans.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the flash loan request combining both Aave/Dydx.\r\n *      See GFlashBorrower.sol, AaveFlashLoanAbstraction.sol, and\r\n *      DydxFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary FlashLoans\r\n{\r\n\tenum Provider { Aave, Dydx }\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _provider The flash loan provider, either Aave or Dydx.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(Provider _provider, address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\r\n\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the maximum market liquidity for a given reserve on\r\n\t *      both Aave and Dydx.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\tuint256 _liquidityAmountDydx = 0;\r\n\t\tif ($.NETWORK == $.Network.Mainnet || $.NETWORK == $.Network.Kovan) {\r\n\t\t\t_liquidityAmountDydx = DydxFlashLoanAbstraction._getFlashLoanLiquidity(_token);\r\n\t\t}\r\n\t\tuint256 _liquidityAmountAave = 0;\r\n\t\tif ($.NETWORK == $.Network.Mainnet || $.NETWORK == $.Network.Ropsten || $.NETWORK == $.Network.Kovan) {\r\n\t\t\t_liquidityAmountAave = AaveFlashLoanAbstraction._getFlashLoanLiquidity(_token);\r\n\t\t}\r\n\t\treturn Math._max(_liquidityAmountDydx, _liquidityAmountAave);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan on Dydx and, if unsuccessful, on Aave.\r\n\t *      The current contract will receive a call back with the loan\r\n\t *      amount and should repay it, including fees, before returning.\r\n\t *      See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\tif ($.NETWORK == $.Network.Mainnet || $.NETWORK == $.Network.Kovan) {\r\n\t\t\t_success = DydxFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\r\n\t\t\tif (_success) return true;\r\n\t\t}\r\n\t\tif ($.NETWORK == $.Network.Mainnet || $.NETWORK == $.Network.Ropsten || $.NETWORK == $.Network.Kovan) {\r\n\t\t\t_success = AaveFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\r\n\t\t\tif (_success) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _provider The flash loan provider, either Aave or Dydx.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(Provider _provider, address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\r\n\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Balancer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Balancer interoperability.\r\n */\r\ninterface BFactory\r\n{\r\n\tfunction newBPool() external returns (address _pool);\r\n}\r\n\r\ninterface BPool is IERC20\r\n{\r\n\tfunction getFinalTokens() external view returns (address[] memory _tokens);\r\n\tfunction getBalance(address _token) external view returns (uint256 _balance);\r\n\tfunction setSwapFee(uint256 _swapFee) external;\r\n\tfunction finalize() external;\r\n\tfunction bind(address _token, uint256 _balance, uint256 _denorm) external;\r\n\tfunction exitPool(uint256 _poolAmountIn, uint256[] calldata _minAmountsOut) external;\r\n\tfunction joinswapExternAmountIn(address _tokenIn, uint256 _tokenAmountIn, uint256 _minPoolAmountOut) external returns (uint256 _poolAmountOut);\r\n}\r\n\r\n// File: contracts/modules/BalancerLiquidityPoolAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Balancer liquidity pool operations.\r\n */\r\nlibrary BalancerLiquidityPoolAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant MIN_AMOUNT = 1e6; // transported from Balancer\r\n\tuint256 constant TOKEN0_WEIGHT = 25e18; // 25/50 = 50%\r\n\tuint256 constant TOKEN1_WEIGHT = 25e18; // 25/50 = 50%\r\n\tuint256 constant SWAP_FEE = 10e16; // 10%\r\n\r\n\t/**\r\n\t * @dev Creates a two-asset liquidity pool and funds it by depositing\r\n\t *      both assets. The create pool is public with a 50%/50%\r\n\t *      distribution and 10% swap fee.\r\n\t * @param _token0 The ERC-20 token for the first asset of the pair.\r\n\t * @param _amount0 The amount of the first asset of the pair to be deposited.\r\n\t * @param _token1 The ERC-20 token for the second asset of the pair.\r\n\t * @param _amount1 The amount of the second asset of the pair to be deposited.\r\n\t * @return _pool The address of the newly created pool.\r\n\t */\r\n\tfunction _createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) internal returns (address _pool)\r\n\t{\r\n\t\trequire(_amount0 >= MIN_AMOUNT && _amount1 >= MIN_AMOUNT, \"amount below the minimum\");\r\n\t\t_pool = BFactory($.Balancer_FACTORY).newBPool();\r\n\t\tTransfers._approveFunds(_token0, _pool, _amount0);\r\n\t\tTransfers._approveFunds(_token1, _pool, _amount1);\r\n\t\tBPool(_pool).bind(_token0, _amount0, TOKEN0_WEIGHT);\r\n\t\tBPool(_pool).bind(_token1, _amount1, TOKEN1_WEIGHT);\r\n\t\tBPool(_pool).setSwapFee(SWAP_FEE);\r\n\t\tBPool(_pool).finalize();\r\n\t\treturn _pool;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deposits a single asset into the liquidity pool.\r\n\t * @param _pool The liquidity pool address.\r\n\t * @param _token The ERC-20 token for the asset being deposited.\r\n\t * @param _maxAmount The maximum amount to be deposited.\r\n\t * @return _amount The actual amount deposited.\r\n\t */\r\n\tfunction _joinPool(address _pool, address _token, uint256 _maxAmount) internal returns (uint256 _amount)\r\n\t{\r\n\t\tif (_maxAmount == 0) return 0;\r\n\t\tuint256 _balanceAmount = BPool(_pool).getBalance(_token);\r\n\t\tif (_balanceAmount == 0) return 0;\r\n\t\t// caps the deposit amount to half the liquidity to mitigate error\r\n\t\tuint256 _limitAmount = _balanceAmount.div(2);\r\n\t\t_amount = Math._min(_maxAmount, _limitAmount);\r\n\t\tTransfers._approveFunds(_token, _pool, _amount);\r\n\t\tBPool(_pool).joinswapExternAmountIn(_token, _amount, 0);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Withdraws a percentage of the pool shares.\r\n\t * @param _pool The liquidity pool address.\r\n\t * @param _percent The percent amount normalized to 1e18 (100%).\r\n\t * @return _amount0 The amount received of the first asset of the pair.\r\n\t * @return _amount1 The amount received of the second asset of the pair.\r\n\t */\r\n\tfunction _exitPool(address _pool, uint256 _percent) internal returns (uint256 _amount0, uint256 _amount1)\r\n\t{\r\n\t\tif (_percent == 0) return (0, 0);\r\n\t\taddress[] memory _tokens = BPool(_pool).getFinalTokens();\r\n\t\t_amount0 = Transfers._getBalance(_tokens[0]);\r\n\t\t_amount1 = Transfers._getBalance(_tokens[1]);\r\n\t\tuint256 _poolAmount = Transfers._getBalance(_pool);\r\n\t\tuint256 _poolExitAmount = _poolAmount.mul(_percent).div(1e18);\r\n\t\tuint256[] memory _minAmountsOut = new uint256[](2);\r\n\t\t_minAmountsOut[0] = 0;\r\n\t\t_minAmountsOut[1] = 0;\r\n\t\tBPool(_pool).exitPool(_poolExitAmount, _minAmountsOut);\r\n\t\t_amount0 = Transfers._getBalance(_tokens[0]).sub(_amount0);\r\n\t\t_amount1 = Transfers._getBalance(_tokens[1]).sub(_amount1);\r\n\t\treturn (_amount0, _amount1);\r\n\t}\r\n}\r\n\r\n// File: contracts/G.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This public library provides a single entrypoint to most of the relevant\r\n *      internal libraries available in the modules folder. It exists to\r\n *      circunvent the contract size limitation imposed by the EVM. All function\r\n *      calls are directly delegated to the target library function preserving\r\n *      argument and return values exactly as they are. This library is shared\r\n *      by many contracts and even other public libraries from this repository,\r\n *      therefore it needs to be published alongside them.\r\n */\r\nlibrary G\r\n{\r\n\tfunction min(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _minAmount) { return Math._min(_amount1, _amount2); }\r\n//\tfunction max(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _maxAmount) { return Math._max(_amount1, _amount2); }\r\n\r\n//\tfunction wrap(uint256 _amount) public returns (bool _success) { return Wrapping._wrap(_amount); }\r\n//\tfunction unwrap(uint256 _amount) public returns (bool _success) { return Wrapping._unwrap(_amount); }\r\n\tfunction safeWrap(uint256 _amount) public { Wrapping._safeWrap(_amount); }\r\n\tfunction safeUnwrap(uint256 _amount) public { Wrapping._safeUnwrap(_amount); }\r\n\r\n\tfunction getBalance(address _token) public view returns (uint256 _balance) { return Transfers._getBalance(_token); }\r\n\tfunction pullFunds(address _token, address _from, uint256 _amount) public { Transfers._pullFunds(_token, _from, _amount); }\r\n\tfunction pushFunds(address _token, address _to, uint256 _amount) public { Transfers._pushFunds(_token, _to, _amount); }\r\n\tfunction approveFunds(address _token, address _to, uint256 _amount) public { Transfers._approveFunds(_token, _to, _amount); }\r\n\r\n//\tfunction calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) public view returns (uint256 _outputAmount) { return Conversions._calcConversionOutputFromInput(_from, _to, _inputAmount); }\r\n//\tfunction calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) public view returns (uint256 _inputAmount) { return Conversions._calcConversionInputFromOutput(_from, _to, _outputAmount); }\r\n//\tfunction convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) public returns (uint256 _outputAmount) { return Conversions._convertFunds(_from, _to, _inputAmount, _minOutputAmount); }\r\n\tfunction dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) public returns (uint256 _outputAmount) { return Conversions._dynamicConvertFunds(_exchange, _from, _to, _inputAmount, _minOutputAmount); }\r\n\r\n//\tfunction estimateFlashLoanFee(FlashLoans.Provider _provider, address _token, uint256 _netAmount) public pure returns (uint256 _feeAmount) { return FlashLoans._estimateFlashLoanFee(_provider, _token, _netAmount); }\r\n\tfunction getFlashLoanLiquidity(address _token) public view returns (uint256 _liquidityAmount) { return FlashLoans._getFlashLoanLiquidity(_token); }\r\n\tfunction requestFlashLoan(address _token, uint256 _amount, bytes memory _context) public returns (bool _success) { return FlashLoans._requestFlashLoan(_token, _amount, _context); }\r\n\tfunction paybackFlashLoan(FlashLoans.Provider _provider, address _token, uint256 _grossAmount) public { FlashLoans._paybackFlashLoan(_provider, _token, _grossAmount); }\r\n\r\n\tfunction createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) public returns (address _pool) { return BalancerLiquidityPoolAbstraction._createPool(_token0, _amount0, _token1, _amount1); }\r\n\tfunction joinPool(address _pool, address _token, uint256 _maxAmount) public returns (uint256 _amount) { return BalancerLiquidityPoolAbstraction._joinPool(_pool, _token, _maxAmount); }\r\n\tfunction exitPool(address _pool, uint256 _percent) public returns (uint256 _amount0, uint256 _amount1) { return BalancerLiquidityPoolAbstraction._exitPool(_pool, _percent); }\r\n}\r\n\r\n// File: contracts/GTokenType3.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the functionality for the gToken Type 3.\r\n *         It has a higher deposit/withdrawal fee when compared to other\r\n *         gTokens (10%). Half of the collected fee used to reward token\r\n *         holders while the other half is burned along with the same proportion\r\n *         of the reserve. It is used in the implementation of stkGRO.\r\n */\r\nabstract contract GTokenType3 is ERC20, ReentrancyGuard, GToken, GVoting\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant DEPOSIT_FEE = 10e16; // 10%\r\n\tuint256 constant WITHDRAWAL_FEE = 10e16; // 10%\r\n\r\n\tuint256 constant VOTING_ROUND_INTERVAL = 1 days;\r\n\r\n\taddress public immutable override reserveToken;\r\n\r\n\tmapping (address => address) public override candidate;\r\n\r\n\tmapping (address => uint256) private votingRound;\r\n\tmapping (address => uint256[2]) private voting;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gToken contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. GRO for sktGRO).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _reserveToken)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t\treserveToken = _reserveToken;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         received/minted upon depositing to the contract.\r\n\t * @param _cost The amount of reserve token being deposited.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _netShares The net amount of shares being received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be deposited in order to receive the desired\r\n\t *         amount of shares.\r\n\t * @param _netShares The amount of this gToken shares to receive.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _cost The cost, in the reserve token, to be paid.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         given/burned upon withdrawing from the contract.\r\n\t * @param _cost The amount of reserve token being withdrawn.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve()\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply()\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee()\r\n\t * @return _grossShares The total amount of shares being deducted,\r\n\t *                      including fees.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be withdrawn given the desired amount of\r\n\t *         shares.\r\n\t * @param _grossShares The amount of this gToken shares to provide.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\r\n\t * @return _cost The cost, in the reserve token, to be received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the amount of reserve tokens currently being help by\r\n\t *         this contract.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's balance.\r\n\t */\r\n\tfunction totalReserve() public view virtual override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn G.getBalance(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current minting/deposit fee. This fee is\r\n\t *         applied to the amount of this gToken shares being created\r\n\t *         upon deposit. The fee defaults to 10%.\r\n\t * @return _depositFee A percent value that accounts for the percentage\r\n\t *                     of shares being minted at each deposit that be\r\n\t *                     collected as fee.\r\n\t */\r\n\tfunction depositFee() public view override returns (uint256 _depositFee) {\r\n\t\treturn DEPOSIT_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current burning/withdrawal fee. This fee is\r\n\t *         applied to the amount of this gToken shares being redeemed\r\n\t *         upon withdrawal. The fee defaults to 10%.\r\n\t * @return _withdrawalFee A percent value that accounts for the\r\n\t *                        percentage of shares being burned at each\r\n\t *                        withdrawal that be collected as fee.\r\n\t */\r\n\tfunction withdrawalFee() public view override returns (uint256 _withdrawalFee) {\r\n\t\treturn WITHDRAWAL_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the number of votes a given candidate has at the end\r\n\t *         of the previous voting interval. The interval is 24 hours\r\n\t *         and resets at 12AM UTC. See _transferVotes().\r\n\t * @param _candidate The candidate for which we want to know the number\r\n\t *                   of delegated votes.\r\n\t * @return _votes The candidate number of votes. It is the sum of the\r\n\t *                balances of the voters that have him as cadidate at\r\n\t *                the end of the previous voting interval.\r\n\t */\r\n\tfunction votes(address _candidate) public view override returns (uint256 _votes)\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\t// if the candidate balance was last updated the current round\r\n\t\t// uses the backup instead (position 1), otherwise uses the most\r\n\t\t// up-to-date balance (position 0)\r\n\t\treturn voting[_candidate][votingRound[_candidate] < _votingRound ? 0 : 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the minting of gToken shares upon the deposit of the\r\n\t *         reserve token. The actual number of shares being minted can\r\n\t *         be calculated using the calcDepositSharesFromCost function.\r\n\t *         In every deposit, 10% of the shares is retained in terms of\r\n\t *         deposit fee. The fee amount and half of its equivalent\r\n\t *         reserve amount are immediately burned. The funds will be\r\n\t *         pulled in by this contract, therefore they must be previously\r\n\t *         approved.\r\n\t * @param _cost The amount of reserve token being deposited in the\r\n\t *              operation.\r\n\t */\r\n\tfunction deposit(uint256 _cost) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\r\n\t\trequire(_netShares > 0, \"shares must be greater than 0\");\r\n\t\tG.pullFunds(reserveToken, _from, _cost);\r\n\t\t_mint(_from, _netShares);\r\n\t\t_burnReserveFromShares(_feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the burning of gToken shares upon the withdrawal of\r\n\t *         the reserve token. The actual amount of the reserve token to\r\n\t *         be received can be calculated using the\r\n\t *         calcWithdrawalCostFromShares function. In every withdrawal,\r\n\t *         10% of the shares is retained in terms of withdrawal fee.\r\n\t *         The fee amount and half of its equivalent reserve amount are\r\n\t *         immediately burned.\r\n\t * @param _grossShares The gross amount of this gToken shares being\r\n\t *                     redeemed in the operation.\r\n\t */\r\n\tfunction withdraw(uint256 _grossShares) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_grossShares > 0, \"shares must be greater than 0\");\r\n\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\r\n\t\tG.pushFunds(reserveToken, _from, _cost);\r\n\t\t_burn(_from, _grossShares);\r\n\t\t_burnReserveFromShares(_feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Changes the voter's choice for candidate and vote delegation.\r\n\t *         It is only going to be reflected in the voting by the next\r\n\t *         interval. The interval is 24 hours and resets at 12AM UTC.\r\n\t *         This function will emit a ChangeCandidate event.\r\n\t * @param _newCandidate The new candidate chosen.\r\n\t */\r\n\tfunction setCandidate(address _newCandidate) public override nonReentrant\r\n\t{\r\n\t\taddress _voter = msg.sender;\r\n\t\tuint256 _votes = balanceOf(_voter);\r\n\t\taddress _oldCandidate = candidate[_voter];\r\n\t\tcandidate[_voter] = _newCandidate;\r\n\t\t_transferVotes(_oldCandidate, _newCandidate, _votes);\r\n\t\temit ChangeCandidate(_voter, _oldCandidate, _newCandidate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a given amount of shares worth of the reserve token.\r\n\t *      See burnReserve().\r\n\t * @param _grossShares The amount of shares for which the equivalent,\r\n\t *                     in the reserve token, will be burned.\r\n\t */\r\n\tfunction _burnReserveFromShares(uint256 _grossShares) internal virtual\r\n\t{\r\n\t\t// we use the withdrawal formula to calculated how much is burned (withdrawn) from the contract\r\n\t\t// since the fee is 0 using the deposit formula would yield the same amount\r\n\t\t(uint256 _cost,) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), 0);\r\n\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\r\n\t\t_burnReserve(_cost);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns the given amount of the reserve token. The default behavior\r\n\t *      of the function for general ERC-20 is to send the funds to\r\n\t *      address(0), but that can be overriden by a subcontract.\r\n\t * @param _reserveAmount The amount of the reserve token being burned.\r\n\t */\r\n\tfunction _burnReserve(uint256 _reserveAmount) internal virtual\r\n\t{\r\n\t\tG.pushFunds(reserveToken, address(0), _reserveAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This hook is called whenever tokens are minted, burned and\r\n\t *      transferred. This contract forbids token transfers by design.\r\n\t *      Token minting and burning will be reflected in the additional\r\n\t *      votes being credited or debited to the chosen candidate.\r\n\t *      See _transferVotes().\r\n\t * @param _from The provider of funds. Address 0 for minting.\r\n\t * @param _to The receiver of funds. Address 0 for burning.\r\n\t * @param _amount The amount being transfered.\r\n\t */\r\n\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override\r\n\t{\r\n\t\trequire(_from == address(0) || _to == address(0), \"transfer prohibited\");\r\n\t\taddress _oldCandidate = candidate[_from];\r\n\t\taddress _newCandidate = candidate[_to];\r\n\t\tuint256 _votes = _amount;\r\n\t\t_transferVotes(_oldCandidate, _newCandidate, _votes);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Implements the vote transfer logic. It will deduct the votes\r\n\t *      from one candidate and credit it to another candidate. If\r\n\t *      either of candidates is the 0 address, the the voter is either\r\n\t *      setting its initial candidate or abstaining himself from voting.\r\n\t *      The change is only reflected after the voting interval resets.\r\n\t *      We use a 2 element array to keep track of votes. The amount on\r\n\t *      position 0 is always the current vote count for the candidate.\r\n\t *      The amount on position 1 is a backup that reflect the vote count\r\n\t *      prior to the current round only if it has been updated for the\r\n\t *      current round. We also record the last voting round where the\r\n\t *      candidate balance was updated. If the last round is the current\r\n\t *      then we use the backup value on position 1, otherwise we use\r\n\t *      the most up to date value on position 0. This function will\r\n\t *      emit a ChangeVotes event upon candidate vote balance change.\r\n\t *      See _updateVotes().\r\n\t * @param _oldCandidate The candidate to deduct votes from.\r\n\t * @param _newCandidate The candidate to credit voter for.\r\n\t * @param _votes the number of votes being transfered.\r\n\t */\r\n\tfunction _transferVotes(address _oldCandidate, address _newCandidate, uint256 _votes) internal\r\n\t{\r\n\t\tif (_votes == 0) return;\r\n\t\tif (_oldCandidate == _newCandidate) return;\r\n\t\tif (_oldCandidate != address(0)) {\r\n\t\t\t// position 0 always has the most up-to-date balance\r\n\t\t\tuint256 _oldVotes = voting[_oldCandidate][0];\r\n\t\t\tuint256 _newVotes = _oldVotes.sub(_votes);\r\n\t\t\t// updates position 0 backing up the previous amount\r\n\t\t\t_updateVotes(_oldCandidate, _newVotes);\r\n\t\t\temit ChangeVotes(_oldCandidate, _oldVotes, _newVotes);\r\n\t\t}\r\n\t\tif (_newCandidate != address(0)) {\r\n\t\t\t// position 0 always has the most up-to-date balance\r\n\t\t\tuint256 _oldVotes = voting[_newCandidate][0];\r\n\t\t\tuint256 _newVotes = _oldVotes.add(_votes);\r\n\t\t\t// updates position 0 backing up the previous amount\r\n\t\t\t_updateVotes(_newCandidate, _newVotes);\r\n\t\t\temit ChangeVotes(_newCandidate, _oldVotes, _newVotes);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Updates the candidate's current vote balance (position 0) and\r\n\t *      backs up the vote balance for the previous interval (position 1).\r\n\t *      The routine makes sure we do not overwrite and corrupt the\r\n\t *      backup if multiple vote updates happen within a single roung.\r\n\t *      See _transferVotes().\r\n\t * @param _candidate The candidate for which we are updating the votes.\r\n\t * @param _votes The candidate's new vote balance.\r\n\t */\r\n\tfunction _updateVotes(address _candidate, uint256 _votes) internal\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\t// if the candidates voting round is not the current it means\r\n\t\t// we are updating the voting balance for the first time in\r\n\t\t// the current round, that is the only time we want to make a\r\n\t\t// backup of the vote balance for the previous roung\r\n\t\tif (votingRound[_candidate] < _votingRound) {\r\n\t\t\tvotingRound[_candidate] = _votingRound;\r\n\t\t\t// position 1 is the backup if there are updates in\r\n\t\t\t// the current round\r\n\t\t\tvoting[_candidate][1] = voting[_candidate][0];\r\n\t\t}\r\n\t\t// position 0 always hold the up-to-date vote balance\r\n\t\tvoting[_candidate][0] = _votes;\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @notice Definition of stkGRO. As a gToken Type 3, it uses GRO as reserve and\r\n * burns both reserve and supply with each operation.\r\n */\r\ncontract TEST is GTokenType3\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType3(\"TEST2\", \"TEST2\", 18, $.GRO) public\r\n\t{\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldCandidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newCandidate\",\"type\":\"address\"}],\"name\":\"ChangeCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVotes\",\"type\":\"uint256\"}],\"name\":\"ChangeVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_netShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"calcDepositCostFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"calcDepositSharesFromCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_netShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grossShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawalCostFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawalSharesFromCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_grossShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCandidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grossShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TEST","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"G:46758d832097f61f729217c5ea30f332c34fc063","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ff354d40f2b1816277d573f22404688217726dd02c374b3e8f47ebebca0f60cd"}]}