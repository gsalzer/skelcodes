{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-01-30\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\n    // SPDX-License-Identifier: No License\r\n\r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    }\r\n\r\n    /**\r\n    * @dev Library for managing\r\n    * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n    * types.\r\n    *\r\n    * Sets have the following properties:\r\n    *\r\n    * - Elements are added, removed, and checked for existence in constant time\r\n    * (O(1)).\r\n    * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n    *\r\n    * ```\r\n    * contract Example {\r\n    *     // Add the library methods\r\n    *     using EnumerableSet for EnumerableSet.AddressSet;\r\n    *\r\n    *     // Declare a set state variable\r\n    *     EnumerableSet.AddressSet private mySet;\r\n    * }\r\n    * ```\r\n    *\r\n    * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n    * (`UintSet`) are supported.\r\n    */\r\n    library EnumerableSet {\r\n        \r\n\r\n        struct Set {\r\n        \r\n            bytes32[] _values;\r\n    \r\n            mapping (bytes32 => uint256) _indexes;\r\n        }\r\n    \r\n        function _add(Set storage set, bytes32 value) private returns (bool) {\r\n            if (!_contains(set, value)) {\r\n                set._values.push(value);\r\n                \r\n                set._indexes[value] = set._values.length;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Removes a value from a set. O(1).\r\n        *\r\n        * Returns true if the value was removed from the set, that is if it was\r\n        * present.\r\n        */\r\n        function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n            // We read and store the value's index to prevent multiple reads from the same storage slot\r\n            uint256 valueIndex = set._indexes[value];\r\n\r\n            if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n                \r\n\r\n                uint256 toDeleteIndex = valueIndex - 1;\r\n                uint256 lastIndex = set._values.length - 1;\r\n\r\n            \r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n                set._values.pop();\r\n\r\n                delete set._indexes[value];\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        \r\n        function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n            return set._indexes[value] != 0;\r\n        }\r\n\r\n        \r\n        function _length(Set storage set) private view returns (uint256) {\r\n            return set._values.length;\r\n        }\r\n\r\n    \r\n        function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n            require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n            return set._values[index];\r\n        }\r\n\r\n        \r\n\r\n        struct AddressSet {\r\n            Set _inner;\r\n        }\r\n    \r\n        function add(AddressSet storage set, address value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n    \r\n        function remove(AddressSet storage set, address value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n        \r\n        function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n    \r\n        function length(AddressSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n    \r\n        function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n            return address(uint256(_at(set._inner, index)));\r\n        }\r\n\r\n\r\n    \r\n        struct UintSet {\r\n            Set _inner;\r\n        }\r\n\r\n        \r\n        function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(value));\r\n        }\r\n\r\n    \r\n        function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(value));\r\n        }\r\n\r\n        \r\n        function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(value));\r\n        }\r\n\r\n        \r\n        function length(UintSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n\r\n    \r\n        function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n            return uint256(_at(set._inner, index));\r\n        }\r\n    }\r\n    \r\n    contract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    }\r\n\r\n\r\n    interface Token {\r\n        function transferFrom(address, address, uint) external returns (bool);\r\n        function transfer(address, uint) external returns (bool);\r\n        function balanceOf(address) external view returns (uint256);\r\n    }\r\n\r\n    contract GasCashbackClaim is Ownable {\r\n        using SafeMath for uint;\r\n        using EnumerableSet for EnumerableSet.AddressSet;\r\n        \r\n    \r\n        /*\r\n        claim[i] = [\r\n            0 => user claimed,\r\n            1 => amount claimed,          \r\n            2 => status , 0 => Pending , 1 => Settled, 2 => Rejected\r\n            3 => exists , true  , false\r\n        ]\r\n        */\r\n\r\n        // GCB token contract address\r\n        address public constant tokenAddress = 0x3539a4F4C0dFfC813B75944821e380C9209D3446;\r\n    \r\n        \r\n    \r\n        \r\n        // mapping(address => uint[]) internal claim;\r\n        \r\n        struct Claim {\r\n            address user;\r\n            uint amount;\r\n            uint status;       \r\n            bool exists;\r\n        }\r\n        \r\n\r\n        mapping(uint => Claim)  claims;\r\n        \r\n        mapping (address => uint) public totalSettleClaimedTokens;\r\n        mapping (address => uint) public totalClaimedTokens;\r\n        \r\n        event ClaimRequested(address indexed user,uint amount, uint claimid);\r\n        \r\n         event ClaimSettled(address indexed user, uint amount, uint indexed claimid);\r\n         event ClaimRejected(address indexed user, uint indexed claimid); \r\n         \r\n        \r\n        uint public maxPercentage = 400 ;\r\n        uint public totalClaimedRewards = 0;\r\n        \r\n        uint[] public claimrequests;\r\n\r\n    \r\n    function getallclaims() view public  returns (uint[] memory){\r\n        return claimrequests;\r\n    }\r\n\r\n     function getMax(address user) view public  returns (uint amount){\r\n        uint balance = Token(tokenAddress).balanceOf(user);\r\n        uint max = maxPercentage.mul(balance).div(1e4);\r\n        return max;\r\n    }\r\n\r\n        \r\n        function claim(uint claimid , uint amount ) public returns (uint)  {\r\n            require(amount <= getMax(msg.sender), \"Cannot claim more than balance\");\r\n            require(claims[claimid].exists !=  true  , \"Claim already Exists\" );\r\n            \r\n\r\n            Claim storage newclaim = claims[claimid];\r\n            newclaim.user =  msg.sender;\r\n            newclaim.amount =  amount; \r\n            newclaim.status =  0 ;\r\n            newclaim.exists =  true ;\r\n            claimrequests.push(claimid) ;\r\n\r\n            \r\n            totalClaimedTokens[msg.sender] =  totalClaimedTokens[msg.sender].add(amount) ;\r\n            emit ClaimRequested(msg.sender,amount, claimid);\r\n\r\n        }\r\n        \r\n        function settleClaim(uint claimid ) public  onlyOwner returns (bool)   {\r\n\r\n                    require(claims[claimid].exists ==  true  , \"Claim doesn't Exists\" );\r\n\r\n                    Claim storage eachClaim = claims[claimid];\r\n                    \r\n                    eachClaim.status  = 1 ;\r\n        \r\n                    totalSettleClaimedTokens[eachClaim.user] =  totalSettleClaimedTokens[eachClaim.user].add(eachClaim.amount) ;\r\n                    totalClaimedRewards = totalClaimedRewards.add(eachClaim.amount) ;\r\n                    Token(tokenAddress).transfer(eachClaim.user, eachClaim.amount);\r\n \r\n                    emit ClaimSettled(eachClaim.user,eachClaim.amount , claimid);\r\n                               \r\n            \r\n                return true ;\r\n\r\n            }\r\n            \r\n              function rejectClaim(uint claimid) public  onlyOwner returns (bool)   {\r\n\r\n                    require(claims[claimid].exists ==  true  , \"Claim doesn't Exists\" );\r\n\r\n                    Claim storage eachClaim = claims[claimid];\r\n                    \r\n                    eachClaim.status  = 2 ;\r\n        \r\n                    emit ClaimRejected(eachClaim.user , claimid);\r\n                               \r\n            \r\n                return true ;\r\n\r\n            }\r\n\r\n\r\n            function gteclaim(uint  claimid ) view public returns (address , uint , uint , bool  ) {\r\n                        return (claims[claimid].user , claims[claimid].amount , claims[claimid].status , claims[claimid].exists );\r\n            }\r\n\r\n          \r\n            \r\n    \r\n \r\n    function addContractBalance(uint amount) public {\r\n            require(Token(tokenAddress).transferFrom(msg.sender, address(this), amount), \"Cannot add balance!\");\r\n            \r\n        }\r\n \r\n    \r\n\r\n  \r\n        \r\n        \r\n        \r\n    \r\n\r\n    }","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"ClaimRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"ClaimRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"ClaimSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimrequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getallclaims\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"gteclaim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"rejectClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimid\",\"type\":\"uint256\"}],\"name\":\"settleClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSettleClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GasCashbackClaim","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a70038ca8c65028d1e681392970593e3d84f0dc480f061c31592b5ccf97932be"}]}