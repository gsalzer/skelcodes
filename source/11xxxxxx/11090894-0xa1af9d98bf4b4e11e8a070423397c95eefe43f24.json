{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n}\r\n\r\ncontract MultiAirdropINJ {\r\n    IERC20 public inj;\r\n    address public  owner;\r\n    mapping(address => uint256) public claimableAmounts;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        inj = IERC20(0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30);\r\n    }\r\n\r\n    function safeAddAmountsToAirdrop(\r\n        address[] memory to,\r\n        uint256[] memory amounts\r\n    )\r\n    public\r\n    {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        require(to.length == amounts.length);\r\n        uint256 totalAmount;\r\n        for(uint256 i = 0; i < to.length; i++) {\r\n            claimableAmounts[to[i]] = amounts[i];\r\n            totalAmount += amounts[i];\r\n        }\r\n        require(inj.allowance(msg.sender, address(this)) >= totalAmount, \"not enough allowance\");\r\n        inj.transferFrom(msg.sender, address(this), totalAmount);\r\n    }\r\n\r\n    function returnINJ() external {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        require(inj.transfer(msg.sender, inj.balanceOf(address(this))), \"Transfer failed\");\r\n    }\r\n    \r\n    function returnAnyToken(IERC20 token) external {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        require(token.transfer(msg.sender, token.balanceOf(address(this))), \"Transfer failed\");\r\n    }\r\n\r\n    function claim() external {\r\n        require(claimableAmounts[msg.sender] > 0, \"Cannot claim 0 tokens\");\r\n        uint256 amount = claimableAmounts[msg.sender];\r\n        claimableAmounts[msg.sender] = 0;\r\n        require(inj.transfer(msg.sender, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function claimFor(address _for) external {\r\n        require(claimableAmounts[_for] > 0, \"Cannot claim 0 tokens\");\r\n        uint256 amount = claimableAmounts[_for];\r\n        claimableAmounts[_for] = 0;\r\n        require(inj.transfer(_for, amount), \"Transfer failed\");\r\n    }\r\n    \r\n    function transferOwnerShip(address newOwner) external {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        owner = newOwner;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inj\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnINJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"safeAddAmountsToAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiAirdropINJ","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ecc52e2914954767d6b0a58b63f036708e95edff193d6fb37f6898caba33402"}]}