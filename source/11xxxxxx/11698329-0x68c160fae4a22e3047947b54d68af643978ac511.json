{"status":"1","message":"OK","result":[{"SourceCode":"{\"CoinDBSDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface Token{\\n    function transferOwnership(address newOwner) external;\\n    function stop() external;\\n    function start() external;\\n    function close() external;\\n    function decimals() external view returns(uint256);\\n    function symbol() external view returns(string memory);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function mint( address to, uint256 value ) external returns (bool);\\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\\n    function burn(uint256 _value) external;\\n    function burnTokens(address who,uint256 _value) external;\\n}\\ncontract CoinDBSDistribution  is Ownable{\\n    \\n    using SafeMath for uint256;\\n    \\n    uint256 internalTeamContribution = 2000; // 20%, multiplication factor 100\\n    uint256 internalSoftwareDevTeams = 2000; // 20%, multiplication factor 100\\n    uint256 bugBountyTeam = 1000; // 10%, multiplication factor 100\\n    uint256 advisoryBoard = 2000; // 20%, multiplication factor 100\\n    uint256 marketingAndSales = 3000; // 30%, multiplication factor 100\\n    \\n    uint256 public internalDistributionLeftCounter = 4; // a total of 4 times \\n    uint256 periodicInternalDistributonDays = 90 days; // quaterly\\n    uint256 public lastTimeStampOfAttempt; //when last time tokens were distributed\\n    \\n    uint256 totalTokenAmount;\\n    uint256 decimalFactor;\\n    \\n    mapping(uint256=\\u003eaddress[]) public internalTokenReceiverAddresses;\\n    address[] tempArray;\\n    //0-\\u003einternalTeamContribution\\n    //1=\\u003einternalSoftwareDevTeams\\n    //2=\\u003ebugBountyTeam\\n    //3=\\u003eadvisoryBoard\\n    //4=\\u003emarketingAndSales\\n    mapping(address=\\u003euint256) public bondTokensHolded;\\n    \\n    address public tokenContractAddress=0x0666BC06Fc0c4a1eFc27557E7effC7bd91a1E671;\\n    \\n    constructor(){\\n        decimalFactor=10**Token(tokenContractAddress).decimals();\\n        totalTokenAmount=5000000*decimalFactor;\\n    }\\n    \\n    function saveInternalDistributions() public onlyOwner{\\n        require(block.timestamp.sub(lastTimeStampOfAttempt) \\u003e periodicInternalDistributonDays, \\\"Please wait for 90 days to complete\\\");\\n        require(internalDistributionLeftCounter!=0, \\\"All tokens distributed\\\");\\n        require((getInternalTeamContributionAddress().length\\u003e0 \\u0026\\u0026 getInternalTeamContributionAddress()[0]!=address(0)) ,\\\"Please enter internal team distribution address all the arrays\\\");\\n        require((getInternalSoftwareDevTeamsAddress().length\\u003e0 \\u0026\\u0026 getInternalSoftwareDevTeamsAddress()[0]!=address(0)),\\\"Please enter software development team distribution address all the arrays\\\");\\n        require((getBugBountyTeamAddress().length\\u003e0 \\u0026\\u0026 getBugBountyTeamAddress()[0]!=address(0)),\\\"Please enter Bug bounty team distribution address all the arrays\\\");\\n        require((getAdvisoryBoardAddress().length\\u003e0 \\u0026\\u0026 getAdvisoryBoardAddress()[0]!=address(0)),\\\"Please enter advisory board distribution address all the arrays\\\");\\n        require((getMarketingAndSalesAddress().length\\u003e0 \\u0026\\u0026 getMarketingAndSalesAddress()[0]!=address(0)),\\\"Please enter marketing and sales distribution address all the arrays\\\");\\n        \\n        //internal team distribution\\n        uint256 amountTobeDistributed = (internalTeamContribution\\n                                        .mul(totalTokenAmount))\\n                                        .div(10**4*4);\\n        //get internal team distribution address\\n        distributeTokens(0,amountTobeDistributed);\\n        \\n        //internalSoftwareDevTeams distribution\\n         uint256 amountTobeDistributedForDevTeam = (internalSoftwareDevTeams\\n                                                    .mul(totalTokenAmount))\\n                                                    .div(10**4*4);\\n        //get internalSoftwareDevTeams address\\n        distributeTokens(1,amountTobeDistributedForDevTeam);\\n        \\n        //bugBountyTeam distribution\\n         uint256 amountTobeDistributedForbugBountyTeam =( bugBountyTeam\\n                                                        .mul(totalTokenAmount))\\n                                                         .div(10**4*4);\\n        //get bugBountyTeam address\\n        distributeTokens(2,amountTobeDistributedForbugBountyTeam);\\n        \\n        //advisoryBoard distribution\\n         uint256 amountTobeDistributedForadvisoryBoardTeam = (advisoryBoard\\n                                                            .mul(totalTokenAmount))\\n                                                            .div(10**4*4);\\n        //get advisoryBoard address\\n        distributeTokens(3,amountTobeDistributedForadvisoryBoardTeam);\\n        \\n        //marketingAndSales distribution\\n         uint256 amountTobeDistributedFormarketingAndSalesTeam =( marketingAndSales\\n                                                                .mul(totalTokenAmount))\\n                                                                .div(10**4*4);\\n        //get marketingAndSales address\\n        distributeTokens(4,amountTobeDistributedFormarketingAndSalesTeam);\\n        \\n        internalDistributionLeftCounter = internalDistributionLeftCounter.sub(1);\\n        lastTimeStampOfAttempt = block.timestamp;\\n        // releaseTokenByAdmin();\\n    }\\n    \\n    \\n    function distributeTokens(uint256 index, uint256 amount) internal{\\n         address[] memory distributionAddresses = internalTokenReceiverAddresses[index];\\n        for(uint256 l=0;l\\u003cdistributionAddresses.length;l++){\\n            //saves the amount of tokens will be distributed\\n              uint256 distributionAmount=(amount.div(distributionAddresses.length));\\n              bondTokensHolded[distributionAddresses[l]] += distributionAmount;\\n        }\\n    }\\n    \\n    function releaseTokenByAdmin() internal{\\n        releaseTokenToParticularTeam(getInternalTeamContributionAddress());\\n        releaseTokenToParticularTeam(getInternalSoftwareDevTeamsAddress());\\n        releaseTokenToParticularTeam(getBugBountyTeamAddress());\\n        releaseTokenToParticularTeam(getAdvisoryBoardAddress());\\n        releaseTokenToParticularTeam(getMarketingAndSalesAddress());\\n       \\n    }\\n    function releaseTokenToParticularTeam(address[] memory addressArray) internal{\\n        Token obj = Token(tokenContractAddress);\\n        for(uint256 i=0;i\\u003caddressArray.length;i++){\\n            require(bondTokensHolded[addressArray[i]]\\u003e0,\\\"No token given\\\");\\n            obj.transfer(addressArray[i],bondTokensHolded[addressArray[i]]);\\n            bondTokensHolded[addressArray[i]] = 0;\\n        }\\n    }\\n    function releaseMyTokens() public{\\n        require(bondTokensHolded[msg.sender]\\u003e0,\\\"No token given\\\");\\n        Token obj = Token(tokenContractAddress);\\n        obj.transfer(msg.sender,bondTokensHolded[msg.sender]);\\n        bondTokensHolded[msg.sender] = 0;\\n    }\\n    \\n    function getInternalTeamContributionAddress() public view returns(address[] memory){\\n        return internalTokenReceiverAddresses[0];\\n    }\\n    function getInternalSoftwareDevTeamsAddress() public view returns(address[] memory){\\n        return internalTokenReceiverAddresses[1];\\n    }\\n    function getBugBountyTeamAddress() public view returns(address[] memory){\\n        return internalTokenReceiverAddresses[2];\\n    }\\n    function getAdvisoryBoardAddress() public view returns(address[] memory){\\n        return internalTokenReceiverAddresses[3];\\n    }\\n    function getMarketingAndSalesAddress() public view returns(address[] memory){\\n        return internalTokenReceiverAddresses[4];\\n    }\\n    function addInternalTeamContributionAddress(address userAddress) public onlyOwner{\\n        require(!(addressAvailable(userAddress,0)),\\\"Address already exists\\\");\\n        internalTokenReceiverAddresses[0].push(userAddress);\\n    }\\n    function addInternalSoftwareDevTeamsAddress(address userAddress) public onlyOwner{\\n        require(!(addressAvailable(userAddress,1)),\\\"Address already exists\\\");\\n         internalTokenReceiverAddresses[1].push(userAddress);\\n    }\\n    function addBugBountyTeamAddress(address userAddress) public onlyOwner{\\n        require(!(addressAvailable(userAddress,2)),\\\"Address already exists\\\");\\n         internalTokenReceiverAddresses[2].push(userAddress);\\n    }\\n    function addAdvisoryBoardAddress(address userAddress) public onlyOwner{\\n        require(!(addressAvailable(userAddress,3)),\\\"Address already exists\\\");\\n         internalTokenReceiverAddresses[3].push(userAddress);\\n    }\\n    function addmarketingAndSalesAddress(address userAddress) public onlyOwner{\\n        require(!(addressAvailable(userAddress,4)),\\\"Address already exists\\\");\\n         internalTokenReceiverAddresses[4].push(userAddress);\\n    }\\n    \\n    function addressAvailable(address userAddress, uint256 index) internal view returns(bool){\\n         bool isAvailable=false;\\n        for(uint256 i=0;i\\u003cinternalTokenReceiverAddresses[index].length;i++){\\n            if(internalTokenReceiverAddresses[index][i]==userAddress){\\n                isAvailable=true;\\n            }\\n        }\\n        return isAvailable;\\n    }\\n    \\n    function deleteInternalTeamContributionAddress(uint256 index) public onlyOwner{\\n         internalTokenReceiverAddresses[0]=removeIndex(index,internalTokenReceiverAddresses[0]);\\n    }\\n    function deleteInternalSoftwareDevTeamsAddress(uint256 index) public onlyOwner{\\n         internalTokenReceiverAddresses[1]=removeIndex(index,internalTokenReceiverAddresses[1]);\\n    }\\n    function deleteBugBountyTeamAddress(uint256 index) public onlyOwner{\\n         internalTokenReceiverAddresses[2]=removeIndex(index,internalTokenReceiverAddresses[2]);\\n    }\\n    function deleteAdvisoryBoardAddress(uint256 index) public onlyOwner{\\n         internalTokenReceiverAddresses[3]=removeIndex(index,internalTokenReceiverAddresses[3]);\\n    }\\n    function deleteMarketingAndSalesAddress(uint256 index) public onlyOwner{\\n         internalTokenReceiverAddresses[4]=removeIndex(index,internalTokenReceiverAddresses[4]);\\n    }\\n    \\n    function removeIndex(uint256 index, address[] memory addressArray) internal returns(address[] memory){\\n        tempArray=new address[](0);\\n        for(uint256 i=0;i\\u003caddressArray.length;i++){\\n            if(i!=index){\\n                tempArray.push(addressArray[i]);\\n            }\\n        }\\n        return tempArray;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\npragma abicoder v2;\\n\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor(){\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addAdvisoryBoardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addBugBountyTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addInternalSoftwareDevTeamsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addInternalTeamContributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addmarketingAndSalesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondTokensHolded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteAdvisoryBoardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteBugBountyTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteInternalSoftwareDevTeamsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteInternalTeamContributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteMarketingAndSalesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdvisoryBoardAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBugBountyTeamAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInternalSoftwareDevTeamsAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInternalTeamContributionAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingAndSalesAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalDistributionLeftCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"internalTokenReceiverAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStampOfAttempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveInternalDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoinDBSDistribution","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3cc7560e375296fe11bfac50dd7ada5cc51e27ed35c9030e6c389013a68a1287"}]}