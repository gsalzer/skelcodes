{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor() internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            isMinter(_msgSender()),\r\n            \"MinterRole: caller does not have the Minter role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract CanTransferRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CanTransferAdded(address indexed account);\r\n    event CanTransferRemoved(address indexed account);\r\n\r\n    Roles.Role private _canTransfer;\r\n\r\n    constructor() internal {\r\n        _addCanTransfer(_msgSender());\r\n    }\r\n\r\n    modifier onlyCanTransfer() {\r\n        require(\r\n            canTransfer(_msgSender()),\r\n            \"CanTransferRole: caller does not have the CanTransfer role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function canTransfer(address account) public view returns (bool) {\r\n        return _canTransfer.has(account);\r\n    }\r\n\r\n    function addCanTransfer(address account) public onlyCanTransfer {\r\n        _addCanTransfer(account);\r\n    }\r\n\r\n    function renounceCanTransfer() public {\r\n        _removeCanTransfer(_msgSender());\r\n    }\r\n\r\n    function _addCanTransfer(address account) internal {\r\n        _canTransfer.add(account);\r\n        emit CanTransferAdded(account);\r\n    }\r\n\r\n    function _removeCanTransfer(address account) internal {\r\n        _canTransfer.remove(account);\r\n        emit CanTransferRemoved(account);\r\n    }\r\n}\r\n\r\ncontract ToshiCoinNonTradable is Ownable, MinterRole, CanTransferRole {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    string public name = \"ToshiCoin - Non Tradable\";\r\n    string public symbol = \"ToshiCoin\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public totalClaimed;\r\n    uint256 public totalMinted;\r\n\r\n    uint256 public remainingToshiCoinForSale = 4000 * (1e18);\r\n    uint256 public priceInTOSHI = 3;\r\n\r\n    IERC20 public toshi;\r\n    address public toshiTreasury;\r\n\r\n    constructor(IERC20 _toshi, address _toshiTreasury) public {\r\n        toshi = _toshi;\r\n        toshiTreasury = _toshiTreasury;\r\n    }\r\n\r\n    function addClaimed(uint256 amount) internal {\r\n        totalClaimed = totalClaimed.add(amount);\r\n    }\r\n\r\n    function addMinted(uint256 amount) internal {\r\n        totalMinted = totalMinted.add(amount);\r\n    }\r\n\r\n    function setRemainingToshiCoinForSale(uint256 _remainingToshiCoinForSale)\r\n        external\r\n        onlyMinter\r\n    {\r\n        remainingToshiCoinForSale = _remainingToshiCoinForSale;\r\n    }\r\n\r\n    function setPriceInToshi(uint256 _priceInTOSHI) external onlyMinter {\r\n        priceInTOSHI = _priceInTOSHI;\r\n    }\r\n\r\n    function setToshiTreasury(address _toshiTreasury) external onlyMinter {\r\n        toshiTreasury = _toshiTreasury;\r\n    }\r\n\r\n    /**\r\n     * @dev Anyone can purchase ToshiCoin for TOSHI until it is sold out.\r\n     */\r\n    function purchase(uint256 amount) external {\r\n        uint256 price = priceInTOSHI.mul(amount);\r\n        uint256 balance = toshi.balanceOf(msg.sender);\r\n\r\n        require(balance >= price, \"ToshiCoin: Not enough TOSHI in wallet.\");\r\n        require(\r\n            remainingToshiCoinForSale >= amount,\r\n            \"ToshiCoin: Not enough ToshiCoin for sale.\"\r\n        );\r\n\r\n        safeToshiTransferFrom(msg.sender, toshiTreasury, price);\r\n\r\n        remainingToshiCoinForSale = remainingToshiCoinForSale.sub(amount);\r\n\r\n        _mint(msg.sender, amount);\r\n        addMinted(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claiming is white-listed to specific minter addresses for now to limit transfers.\r\n     */\r\n    function claim(address to, uint256 amount) public onlyCanTransfer {\r\n        transfer(to, amount);\r\n        addClaimed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        onlyCanTransfer\r\n        returns (bool)\r\n    {\r\n        require(\r\n            amount <= _balances[msg.sender],\r\n            \"ToshiCoin: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyCanTransfer returns (bool) {\r\n        require(\r\n            amount <= _balances[from],\r\n            \"ToshiCoin: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Minting is white-listed to specific minter addresses for now.\r\n     */\r\n    function mint(address to, uint256 amount) public onlyMinter {\r\n        _mint(to, amount);\r\n        addMinted(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burning is white-listed to specific minter addresses for now.\r\n     */\r\n    function burn(address from, uint256 value) public onlyCanTransfer {\r\n        require(\r\n            _balances[from] >= value,\r\n            \"ToshiCoin: Cannot burn more than the address balance\"\r\n        );\r\n\r\n        _burn(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that creates an amount of the token and assigns it to an account.\r\n     * This encapsulates the modification of balances such that the proper events are emitted.\r\n     * @param to The account that will receive the created tokens.\r\n     * @param amount The amount that will be created.\r\n     */\r\n    function _mint(address to, uint256 amount) internal {\r\n        require(to != address(0), \"ToshiCoin: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that destroys an amount of the token of a given address.\r\n     * @param from The account whose tokens will be destroyed.\r\n     * @param amount The amount that will be destroyed.\r\n     */\r\n    function _burn(address from, uint256 amount) internal {\r\n        require(from != address(0), \"ToshiCoin: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(amount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe token transfer from to prevent over-transfers.\r\n     */\r\n    function safeToshiTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 tokenBalance = toshi.balanceOf(address(from));\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        toshi.transferFrom(from, to, transferAmount);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\ncontract ToshiCoinFarm is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 amountInPool;\r\n        uint256 coinsReceivedToDate;\r\n        /*\r\n         *  At any point in time, the amount of ToshiCoin earned by a user waiting to be claimed is:\r\n         *\r\n         *    Pending claim = (user.amountInPool * pool.coinsEarnedPerToken) - user.coinsReceivedToDate\r\n         *\r\n         *  Whenever a user deposits or withdraws tokens to a pool, the following occurs:\r\n         *   1. The pool's `coinsEarnedPerToken` is rebalanced to account for the new shares in the pool.\r\n         *   2. The `lastRewardBlock` is updated to the latest block.\r\n         *   3. The user receives the pending claim sent to their address.\r\n         *   4. The user's `amountInPool` and `coinsReceivedToDate` get updated for this pool.\r\n         */\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 token;\r\n        uint256 lastUpdateTime;\r\n        uint256 coinsPerDay;\r\n        uint256 coinsEarnedPerToken;\r\n    }\r\n\r\n    PoolInfo[] public poolInfo;\r\n\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(address => uint256) public tokenPoolIds;\r\n\r\n    ToshiCoinNonTradable public ToshiCoin;\r\n\r\n    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(ToshiCoinNonTradable toshiCoinAddress) public {\r\n        ToshiCoin = toshiCoinAddress;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function pendingCoins(uint256 poolId, address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][user];\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        uint256 coinsEarnedPerToken = pool.coinsEarnedPerToken;\r\n\r\n        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {\r\n            uint256 pendingCoins = block\r\n                .timestamp\r\n                .sub(pool.lastUpdateTime)\r\n                .mul(pool.coinsPerDay)\r\n                .div(86400);\r\n\r\n            coinsEarnedPerToken = coinsEarnedPerToken.add(\r\n                pendingCoins.mul(1e18).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return\r\n            user.amountInPool.mul(coinsEarnedPerToken).div(1e18).sub(\r\n                user.coinsReceivedToDate\r\n            );\r\n    }\r\n\r\n    function totalPendingCoins(address user) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; ++poolId) {\r\n            total = total.add(pendingCoins(poolId, user));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new pool to the farm. Cannot add the same token more than once.\r\n     */\r\n    function addPool(IERC20 token, uint256 _coinsPerDay) public onlyOwner {\r\n        require(\r\n            tokenPoolIds[address(token)] == 0,\r\n            \"ToshiCoinFarm: Added duplicate token pool\"\r\n        );\r\n        require(\r\n            address(token) != address(ToshiCoin),\r\n            \"ToshiCoinFarm: Cannot add ToshiCoin pool\"\r\n        );\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: token,\r\n                coinsPerDay: _coinsPerDay,\r\n                lastUpdateTime: block.timestamp,\r\n                coinsEarnedPerToken: 0\r\n            })\r\n        );\r\n\r\n        tokenPoolIds[address(token)] = poolInfo.length;\r\n    }\r\n\r\n    function setCoinsPerDay(uint256 poolId, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"ToshiCoinFarm: Coins per day cannot be negative\");\r\n\r\n        updatePool(poolId);\r\n\r\n        poolInfo[poolId].coinsPerDay = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim all pending rewards in all pools.\r\n     */\r\n    function claimAll(uint256[] memory poolIds) public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; poolId++) {\r\n            withdraw(poolIds[poolId], 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards in all pools.\r\n     */\r\n    function updateAllPools() public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; poolId++) {\r\n            updatePool(poolId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards for a pool.\r\n     */\r\n    function updatePool(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n\r\n        if (block.timestamp <= pool.lastUpdateTime) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n\r\n        if (pool.coinsPerDay == 0 || tokenSupply == 0) {\r\n            pool.lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 pendingCoins = block\r\n            .timestamp\r\n            .sub(pool.lastUpdateTime)\r\n            .mul(pool.coinsPerDay)\r\n            .div(86400);\r\n\r\n        ToshiCoin.mint(address(this), pendingCoins);\r\n\r\n        pool.lastUpdateTime = block.timestamp;\r\n        pool.coinsEarnedPerToken = pool.coinsEarnedPerToken.add(\r\n            pendingCoins.mul(1e18).div(tokenSupply)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit tokens into a pool and claim pending reward.\r\n     */\r\n    function deposit(uint256 poolId, uint256 amount) public {\r\n        require(\r\n            amount > 0,\r\n            \"ToshiCoinFarm: Cannot deposit non-positive amount into pool\"\r\n        );\r\n\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCoinClaim(msg.sender, pending);\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.add(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        safePoolTransferFrom(msg.sender, address(this), amount, pool);\r\n\r\n        emit Deposit(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens from a pool and claim pending reward.\r\n     */\r\n    function withdraw(uint256 poolId, uint256 amount) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool >= amount,\r\n            \"ToshiCoinFarm: User does not have enough funds to withdraw from this pool\"\r\n        );\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCoinClaim(msg.sender, pending);\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.sub(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        if (amount > 0) {\r\n            safePoolTransfer(msg.sender, amount, pool);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw withdraws funds without claiming rewards.\r\n     *      This should only be used in emergencies.\r\n     */\r\n    function emergencyWithdraw(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool > 0,\r\n            \"ToshiCoinFarm: User has no funds to withdraw from this pool\"\r\n        );\r\n\r\n        uint256 amount = user.amountInPool;\r\n\r\n        user.amountInPool = 0;\r\n        user.coinsReceivedToDate = 0;\r\n\r\n        safePoolTransfer(msg.sender, amount, pool);\r\n\r\n        emit EmergencyWithdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe ToshiCoin transfer to prevent over-transfers.\r\n     */\r\n    function safeToshiCoinClaim(address to, uint256 amount) internal {\r\n        uint256 coinsBalance = ToshiCoin.balanceOf(address(this));\r\n        uint256 claimAmount = amount > coinsBalance ? coinsBalance : amount;\r\n\r\n        ToshiCoin.claim(to, claimAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe pool token transfer to prevent over-transfers.\r\n     */\r\n    function safePoolTransfer(\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(address(this));\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transfer(to, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe pool token transfer from to prevent over-transfers.\r\n     */\r\n    function safePoolTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(from);\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transferFrom(from, to, transferAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ToshiCoinNonTradable\",\"name\":\"toshiCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ToshiCoin\",\"outputs\":[{\"internalType\":\"contract ToshiCoinNonTradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coinsPerDay\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsEarnedPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCoinsPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalPendingCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsReceivedToDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ToshiCoinFarm","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003eeff4487f64bf73cd9d99e83d837b0ef1f58247","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7eb2e88f023c21e03b0f3389e45c2ed5d9b89c88958337b48ae9f8a5b7f7c23d"}]}