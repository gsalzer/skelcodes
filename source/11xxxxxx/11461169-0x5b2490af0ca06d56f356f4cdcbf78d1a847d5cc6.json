{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    Developed by TimeusLab\r\n    https://timeus.org\r\n*/\r\n\r\n/*\r\n    Developed by TimeusLab\r\n    https://timeus.org\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\ncontract PiranhasToken is ERC20(\"Piranhas\", \"$PIR\"), Ownable {\r\n\r\n    bool public isTransferable = false;\r\n    uint256 public minTotalSupply = 10000;\r\n\r\n    // lists of addresses\r\n    address[] public canTransfer;\r\n    address[] public WithoutBurn;\r\n    address[] public UniswapPairs;\r\n\r\n\r\n    constructor (uint256 total) public {\r\n        // mint new\r\n        _mint(msg.sender, total.mul(10 ** 18));\r\n        WithoutBurn.push(msg.sender);\r\n    }\r\n\r\n    function burn(uint256 _amount) public {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    // override of default function\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // check address\r\n        bool isBurnable = IsBurnable(_msgSender(), recipient);\r\n\r\n        // check if transfer is enabled\r\n        require(isTransferable || !isBurnable, \"PiranhasToken: Transfer disabled\");\r\n\r\n        if (isTransferable) {\r\n            if (isBurnable && !isUniswapPair(_msgSender())) {\r\n                _transferWithBurn(_msgSender(), recipient, amount, false);\r\n                return true;\r\n            } else {\r\n                _transfer(_msgSender(), recipient, amount);\r\n                return true;\r\n            }\r\n        } else if (!isBurnable) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // override of default function\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // check address\r\n        bool isBurnable = IsBurnable(sender, recipient);\r\n\r\n        // check if transfer is enabled\r\n        require(isTransferable || !isBurnable, \"PiranhasToken: Transfer disabled\");\r\n        \r\n        if(isUniswapPair(recipient) && isBurnable){\r\n            _transferWithBurn(sender, recipient, amount, true);\r\n            _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        } else {\r\n            // default implementation\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n    }\r\n    \r\n     // function for transfer with burn\r\n    function _transferWithBurn(address sender, address recipient, uint256 amount, bool isTransferFrom) private returns (bool) {\r\n        // divide amount in different parts\r\n        uint256 burnPart = amount.div(100).mul(5);\r\n        uint256 rewardPart = amount.div(100).mul(5);\r\n        uint256 newAmount = amount.sub(burnPart).sub(rewardPart);\r\n\r\n        // if it last burn than change it\r\n        if (totalSupply().sub(burnPart) < minTotalSupply.mul(10 ** 18)) {\r\n            burnPart = totalSupply().sub(minTotalSupply.mul(10 ** 18));\r\n            newAmount = amount.sub(burnPart).sub(rewardPart);\r\n        }\r\n\r\n        _transfer(sender, address(this), rewardPart);\r\n        \r\n        \r\n        if(isTransferFrom){\r\n            _transfer(sender, recipient, amount);\r\n        } else {\r\n            _transfer(sender, recipient, newAmount);\r\n        }\r\n\r\n        if (burnPart != 0) {\r\n            _burn(sender, burnPart);\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    // function for PiranhasGame which canWithdrawMoney\r\n    function withdrawMoney(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        bool isInList = false;\r\n        for (uint i = 0; i < canTransfer.length; i++) {\r\n            if (canTransfer[i] == _msgSender()) {\r\n                isInList = true;\r\n            }\r\n        }\r\n        require(isInList, \"PiranhasToken: Forbid action for this address\");\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // read function which return if addres is in WithoutBurnList\r\n    function IsBurnable(address sender, address recipient) public view returns (bool) {\r\n        bool isBurnable = true;\r\n        for (uint i = 0; i < WithoutBurn.length; i++) {\r\n            if (WithoutBurn[i] == sender || WithoutBurn[i] == recipient) {\r\n                isBurnable = false;\r\n            }\r\n        }\r\n        return isBurnable;\r\n    }\r\n    \r\n    // read function which return if addres is in WithoutBurnList\r\n    function isUniswapPair(address sender) public view returns (bool) {\r\n        bool isUniswap = false;\r\n        for (uint i = 0; i < UniswapPairs.length; i++) {\r\n            if (UniswapPairs[i] == sender) {\r\n                isUniswap = true;\r\n            }\r\n        }\r\n        return isUniswap;\r\n    }\r\n\r\n\r\n    /*\r\n        Under all methods to control token, game\r\n    */\r\n\r\n    // add address to CanTransferList which can call withdrawMoney\r\n    function addCanTransfer(address account) public onlyOwner {\r\n        canTransfer.push(account);\r\n    }\r\n\r\n    // remover address from CanTransferList which can call withdrawMoney\r\n    function removeCanTransfer(address account) public onlyOwner {\r\n        address[] memory OldcanTransfer = canTransfer;\r\n        delete canTransfer;\r\n        for (uint256 i = 0; i < OldcanTransfer.length; i++) {\r\n            if (OldcanTransfer[i] != account) {\r\n                canTransfer.push(OldcanTransfer[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // add address to WithoutBurn list\r\n    function addWithoutBurn(address account) public onlyOwner {\r\n        WithoutBurn.push(account);\r\n    }\r\n\r\n    // remove address to WithoutBurn list\r\n    function removeWithoutBurn(address account) public onlyOwner {\r\n        address[] memory OldWithoutBurn = WithoutBurn;\r\n        delete WithoutBurn;\r\n        for (uint256 i = 0; i < OldWithoutBurn.length; i++) {\r\n            if (OldWithoutBurn[i] != account) {\r\n                WithoutBurn.push(OldWithoutBurn[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //enable/disable transfer\r\n    function enableTransfer(bool state) public onlyOwner {\r\n        isTransferable = state;\r\n    }\r\n\r\n    \r\n    // add address to UniswapPairs list\r\n    function addPair(address account) public onlyOwner {\r\n        UniswapPairs.push(account);\r\n    }\r\n\r\n    // remove address to UniswapPairs list\r\n    function removePair(address account) public onlyOwner {\r\n        address[] memory OldUniswapPairs = UniswapPairs;\r\n        delete UniswapPairs;\r\n        for (uint256 i = 0; i < OldUniswapPairs.length; i++) {\r\n            if (OldUniswapPairs[i] != account) {\r\n                UniswapPairs.push(OldUniswapPairs[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract PiranhasGame is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    PiranhasToken public pir;\r\n    address public pirAddress;\r\n\r\n    // white list of addresses\r\n    address[] public WhiteList;\r\n    address[] public AttacksContracts;\r\n\r\n    // Game Stats\r\n    uint256 public totalAttacks;\r\n    uint256 public totalAttacksAmount;\r\n\r\n    struct UserInfo {\r\n        uint256 totalLocked;\r\n        uint256[] amount;\r\n        uint256[] unlockDate;\r\n    }\r\n\r\n    struct UserStats {\r\n        uint256 totalAttacked;\r\n        uint256 totalAttackedAmount;\r\n        uint256 totalKilled;\r\n        uint256 totalKilledAmount;\r\n    }\r\n\r\n    mapping(address => UserInfo) public usersInfo;\r\n    mapping(address => UserStats) public usersStats;\r\n\r\n    constructor (address _pir) public {\r\n        pir = PiranhasToken(_pir);\r\n        pirAddress = _pir;\r\n        WhiteList.push(msg.sender);\r\n        WhiteList.push(address(this));\r\n    }\r\n    \r\n    /*\r\n        All read functions \r\n    */\r\n\r\n    function IsInWhiteList(address recipient) public view returns (bool) {\r\n        bool isInWhiteList = false;\r\n        for (uint i = 0; i < WhiteList.length; i++) {\r\n            if (WhiteList[i] == recipient) {\r\n                isInWhiteList = true;\r\n                i = WhiteList.length;\r\n            }\r\n        }\r\n        return isInWhiteList;\r\n    }\r\n\r\n    function IsAttackContract(address recipient) public view returns (bool) {\r\n        bool isInAttackContract = false;\r\n        for (uint i = 0; i < AttacksContracts.length; i++) {\r\n            if (AttacksContracts[i] == recipient) {\r\n                isInAttackContract = true;\r\n                i = AttacksContracts.length;\r\n            }\r\n        }\r\n        return isInAttackContract;\r\n    }\r\n\r\n    function userUnlocks(address player, uint number) public view returns (uint){\r\n        UserInfo storage user = usersInfo[player];\r\n        return user.unlockDate[number];\r\n    }\r\n    \r\n    function userUnlocksAmount(address player, uint number) public view returns (uint){\r\n        UserInfo storage user = usersInfo[player];\r\n        return user.amount[number];\r\n    }\r\n    \r\n    function totalUserLocks(address player) public view returns (uint){\r\n        UserInfo storage user = usersInfo[player];\r\n        return user.unlockDate.length;\r\n    }\r\n\r\n    function unlockedPir(address player) public view returns (uint){\r\n        UserInfo storage user = usersInfo[player];\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 freeTokens = 0;\r\n        for (uint i = 0; i < user.unlockDate.length; i++) {\r\n            if (user.unlockDate[i] <= currentTime) {\r\n                freeTokens = freeTokens + user.amount[i];\r\n            }\r\n        }\r\n        return freeTokens;\r\n    }\r\n    \r\n    /*\r\n        Attack function which save info from different AttacksContracts\r\n    */\r\n\r\n    function AddNewAttack(address user, uint256 amount, uint256 reward, uint256 timeLock, bool isKiller) public {\r\n        require(!IsInWhiteList(msg.sender), \"PiranhasGame: Not in WhiteList\");\r\n        UserInfo storage userInfo = usersInfo[user];\r\n        UserStats storage userStats = usersStats[user];\r\n        userInfo.totalLocked = userInfo.totalLocked.add(amount);\r\n        userInfo.amount.push(amount);\r\n        userInfo.unlockDate.push(timeLock);\r\n\r\n        if (isKiller) {\r\n            userStats.totalAttacked = userStats.totalAttacked.add(1);\r\n            userStats.totalAttackedAmount = userStats.totalAttackedAmount.add(amount);\r\n            totalAttacks = totalAttacks + 1;\r\n            totalAttacksAmount = totalAttacksAmount.add(amount);\r\n            if(pir.balanceOf(pirAddress) >= reward && reward != 0) {\r\n                pir.withdrawMoney(pirAddress,user, reward);\r\n            }\r\n        } else {\r\n            userStats.totalKilled = userStats.totalKilled.add(1);\r\n            userStats.totalKilledAmount = userStats.totalKilledAmount.add(amount);\r\n        }\r\n        pir.withdrawMoney(user,address(this), amount);\r\n    }\r\n\r\n     /*\r\n        Claim function that returned unlockedPir\r\n    */\r\n    function claimPir() public {\r\n        uint unlockedAmount = unlockedPir(msg.sender);\r\n        require(unlockedAmount > 0, \"PiranhasGame: Amount must be bigger than zero\");\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n\r\n        uint256[] memory OldAmount = user.amount;\r\n        uint256[] memory OldUnlockDate = user.unlockDate;\r\n\r\n        delete user.amount;\r\n        delete user.unlockDate;\r\n\r\n        for (uint256 i = 0; i < OldUnlockDate.length; i++) {\r\n            if (OldUnlockDate[i] > block.timestamp) {\r\n                user.amount.push(OldAmount[i]);\r\n                user.unlockDate.push(OldUnlockDate[i]);\r\n            }\r\n        }\r\n\r\n        user.totalLocked = user.totalLocked.sub(unlockedAmount);\r\n        pir.transfer(msg.sender, unlockedAmount);\r\n    }\r\n    \r\n    /*\r\n        Owner function for managing game\r\n    */\r\n\r\n    function addWhiteList(address account) public onlyOwner {\r\n        WhiteList.push(account);\r\n    }\r\n\r\n    function addAttackContract(address account) public onlyOwner {\r\n        AttacksContracts.push(account);\r\n    }\r\n\r\n    function removeWhiteList(address account) public onlyOwner {\r\n        address[] memory OldWhiteList = WhiteList;\r\n        delete WhiteList;\r\n        for (uint256 i = 0; i < OldWhiteList.length; i++) {\r\n            if (OldWhiteList[i] != account) {\r\n                WhiteList.push(OldWhiteList[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeAttackContract(address account) public onlyOwner {\r\n        address[] memory OldAttacksContracts = AttacksContracts;\r\n        delete AttacksContracts;\r\n        for (uint256 i = 0; i < OldAttacksContracts.length; i++) {\r\n            if (OldAttacksContracts[i] != account) {\r\n                AttacksContracts.push(OldAttacksContracts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Dynamite is ERC20(\"Dynamite\", \"DYN\"), Ownable {\r\n\r\n    address[] public canTransfer;\r\n\r\n    constructor() public {\r\n        canTransfer.push(msg.sender);\r\n    }\r\n\r\n    modifier Transferable {\r\n        require(IsTransferable(msg.sender), \"Dynamite: is not allowed\");\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public Transferable {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _amount) public Transferable {\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public Transferable virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n        Read functions\r\n    */\r\n    function IsTransferable(address recipient) public view returns (bool) {\r\n        bool IsTransferable = false;\r\n        for (uint i = 0; i < canTransfer.length; i++) {\r\n            if (canTransfer[i] == recipient) {\r\n                IsTransferable = true;\r\n                i = canTransfer.length;\r\n            }\r\n        }\r\n        return IsTransferable;\r\n    }\r\n\r\n    /*\r\n        Owner methods\r\n    */\r\n\r\n    function addCanTransfer(address account) public onlyOwner {\r\n        canTransfer.push(account);\r\n    }\r\n\r\n    function removeCanTransfer(address account) public onlyOwner {\r\n        address[] memory OldcanTransfer = canTransfer;\r\n        delete canTransfer;\r\n        for (uint256 i = 0; i < OldcanTransfer.length; i++) {\r\n            if (OldcanTransfer[i] != account) {\r\n                canTransfer.push(OldcanTransfer[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract DynamiteAttack is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    PiranhasToken public pir;\r\n    PiranhasGame public gameContract;\r\n    Dynamite public dyn;\r\n\r\n    uint256 public OneDay = 86400;\r\n\r\n    // game parameters\r\n    uint256 public KilledLockDays = 14;\r\n    uint256 public killPerAttack = 150;\r\n\r\n    uint minAmount = 1;\r\n\r\n    struct UserInfo {\r\n        uint256 totalLocked;\r\n        uint256[] amount;\r\n        uint256[] unlockDate;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n\r\n    constructor (PiranhasToken _pir, PiranhasGame _gameContract, Dynamite _dyn) public {\r\n        pir = _pir;\r\n        gameContract = _gameContract;\r\n        dyn = _dyn;\r\n    }\r\n\r\n\r\n    function AttackPir(address killed,uint256 amountDNMT) public {\r\n        address killer = msg.sender;\r\n        require(!gameContract.IsInWhiteList(killed), \"DynamiteAttack: Attack on this address forbidden\");\r\n        require(pir.balanceOf(killed)>0, \"DynamiteAttack: Killed balance is empty\");\r\n        require(dyn.balanceOf(msg.sender)>minAmount, \"DynamiteAttack: Smaller Than min\");\r\n        require(dyn.balanceOf(msg.sender)>= amountDNMT, \"DynamiteAttack: Not enough balance\");\r\n        require(killer != killed, \"DynamiteAttack: Can't attack yourself\");\r\n\r\n        uint256 killedBalance = pir.balanceOf(killed);\r\n        uint256 amount = killPerAttack.mul(10**18).mul(amountDNMT);\r\n\r\n        if(amount > killedBalance){\r\n            amount = killedBalance;\r\n        }\r\n\r\n        uint256 killedUnlockDate = block.timestamp.add(OneDay.mul(KilledLockDays));\r\n        dyn.burnFrom(msg.sender,amountDNMT.mul(10**18));\r\n        gameContract.AddNewAttack(killed, amount, 0, killedUnlockDate, false);\r\n    }\r\n\r\n\r\n    function changeRules(uint _killedDays, uint _killPerAttack, uint _minAmount) public onlyOwner {\r\n        KilledLockDays = _killedDays;\r\n        killPerAttack = _killPerAttack;\r\n        minAmount = _minAmount;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PiranhasToken\",\"name\":\"_pir\",\"type\":\"address\"},{\"internalType\":\"contract PiranhasGame\",\"name\":\"_gameContract\",\"type\":\"address\"},{\"internalType\":\"contract Dynamite\",\"name\":\"_dyn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"killed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDNMT\",\"type\":\"uint256\"}],\"name\":\"AttackPir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KilledLockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OneDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_killedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killPerAttack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"changeRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dyn\",\"outputs\":[{\"internalType\":\"contract Dynamite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameContract\",\"outputs\":[{\"internalType\":\"contract PiranhasGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killPerAttack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pir\",\"outputs\":[{\"internalType\":\"contract PiranhasToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DynamiteAttack","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000e3c91ed7d966ff1f7b58ab739a55e3c4473cd270000000000000000000000002cf44288f96532bed4a08b37e079165c9abaffb2000000000000000000000000e8c54bad6e1ff1860f734eb34df50d5fcc1457c5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ba28a34d2f32f7f2de97dc633a79d5f6d1b6fd22920b5fb44224041b6e2b8c4"}]}