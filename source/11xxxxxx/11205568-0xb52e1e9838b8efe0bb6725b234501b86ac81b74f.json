{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * KP2R.NETWORK\r\n * A standard implementation of kp3rv1 protocol\r\n * Optimized Dapp\r\n * Scalability\r\n * Clean & tested code\r\n */\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add: +\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"sub: -\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n          if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul: *\");\r\n\r\n        return c;\r\n    }\r\n  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n       if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"div: /\");\r\n    }\r\n  function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n  function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"mod: %\");\r\n    }\r\n function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n  interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: reverted\");\r\n    }\r\n}\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: < 0\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: !contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: !succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n   function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface IKeep2r {\r\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\r\n    function worked(address keeper) external;\r\n}\r\n\r\n\r\ninterface ICERC20 {\r\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n    function underlying() external view returns (address);\r\n    function symbol() external view returns (string memory);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ninterface ICEther {\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n}\r\n\r\ninterface IComptroller {\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\r\n    function closeFactorMantissa() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function getReserves() external view returns (uint reserve0, uint reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IWETH9 {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract CompoundFlashLiquidationsKeep2r {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IComptroller constant public Comptroller = IComptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    IUniswapV2Factory constant public FACTORY = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUniswapV2Router constant public ROUTER = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public cETH = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n\r\n    modifier upkeep() {\r\n        require(KP2R.isMinKeeper(tx.origin, 100e18, 0, 0), \"::isKeeper: keeper is not registered\");\r\n        _;\r\n        KP2R.worked(msg.sender);\r\n    }\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n    }\r\n\r\n    IKeep2r public constant KP2R = IKeep2r(0x9BdE098Be22658d057C3F1F185e3Fd4653E2fbD1);\r\n\r\n    function pairFor(address borrowed) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(borrowed, WETH);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                FACTORY,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    function calcRepayAmount(IUniswapV2Pair pair, uint amount0, uint amount1) public view returns (uint) {\r\n        (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n        uint val = 0;\r\n        if (amount0 == 0) {\r\n            val = amount1.mul(reserve0).div(reserve1);\r\n        } else {\r\n            val = amount0.mul(reserve1).div(reserve0);\r\n        }\r\n\r\n        return (val\r\n                .add(val.mul(301).div(100000)))\r\n                .mul(reserve0.mul(reserve1))\r\n                .div(IERC20(pair.token0()).balanceOf(address(pair))\r\n                .mul(IERC20(pair.token1()).balanceOf(address(pair))));\r\n    }\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        return amountInWithFee.mul(reserveOut) / reserveIn.mul(1000).add(amountInWithFee);\r\n    }\r\n\r\n    function _swap(address suppliedUnderlying, address supplied, IUniswapV2Pair toPair) internal {\r\n        address _underlying = suppliedUnderlying;\r\n        if (supplied == cETH) {\r\n            _underlying = WETH;\r\n            IWETH9(WETH).deposit.value(address(this).balance)();\r\n        } else {\r\n            (uint reserve0, uint reserve1,) = toPair.getReserves();\r\n            uint amountIn = IERC20(_underlying).balanceOf(address(this));\r\n            IERC20(_underlying).transfer(address(toPair), amountIn);\r\n            if (_underlying == toPair.token0()) {\r\n                toPair.swap(0, getAmountOut(amountIn, reserve0, reserve1), address(this), new bytes(0));\r\n            } else {\r\n                toPair.swap(getAmountOut(amountIn, reserve1, reserve0), 0, address(this), new bytes(0));\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        uint liquidatableAmount = (amount0 == 0 ? amount1 : amount0);\r\n        (address borrower, address borrowed, address supplied, address fromPair, address toPair, address suppliedUnderlying) = decode(data);\r\n\r\n        ICERC20(borrowed).liquidateBorrow(borrower, liquidatableAmount, supplied);\r\n        ICERC20(supplied).redeem(ICERC20(supplied).balanceOf(address(this)));\r\n\r\n        _swap(suppliedUnderlying, supplied, IUniswapV2Pair(toPair));\r\n\r\n        IERC20(WETH).transfer(fromPair, calcRepayAmount(IUniswapV2Pair(fromPair), amount0, amount1));\r\n        IERC20(WETH).transfer(tx.origin, IERC20(WETH).balanceOf(address(this)));\r\n    }\r\n\r\n    function underlying(address token) external view returns (address) {\r\n        return ICERC20(token).underlying();\r\n    }\r\n\r\n    function underlyingPair(address token) external view returns (address) {\r\n        return pairFor(ICERC20(token).underlying());\r\n    }\r\n\r\n    function () external payable { }\r\n\r\n    function liquidatable(address borrower, address borrowed) external view returns (uint) {\r\n        (,,uint256 shortFall) = Comptroller.getAccountLiquidity(borrower);\r\n        require(shortFall > 0, \"liquidate:shortFall == 0\");\r\n\r\n        uint256 liquidatableAmount = ICERC20(borrowed).borrowBalanceStored(borrower);\r\n\r\n        require(liquidatableAmount > 0, \"liquidate:borrowBalanceStored == 0\");\r\n\r\n        return liquidatableAmount.mul(Comptroller.closeFactorMantissa()).div(1e18);\r\n    }\r\n\r\n    function calculate(address borrower, address borrowed, address supplied) external view returns (address fromPair, address toPair, address borrowedUnderlying, address suppliedUnderlying, uint amount) {\r\n        amount = ICERC20(borrowed).borrowBalanceStored(borrower);\r\n        amount = amount.mul(Comptroller.closeFactorMantissa()).div(1e18);\r\n        borrowedUnderlying = ICERC20(borrowed).underlying();\r\n\r\n        fromPair = pairFor(borrowedUnderlying);\r\n        suppliedUnderlying = ICERC20(supplied).underlying();\r\n        toPair = pairFor(suppliedUnderlying);\r\n    }\r\n\r\n    function liquidate(address borrower, address borrowed, address supplied) external {\r\n        (,,uint256 shortFall) = Comptroller.getAccountLiquidity(borrower);\r\n        require(shortFall > 0, \"liquidate:shortFall == 0\");\r\n\r\n        uint256 amount = ICERC20(borrowed).borrowBalanceStored(borrower);\r\n        require(amount > 0, \"liquidate:borrowBalanceStored == 0\");\r\n        amount = amount.mul(Comptroller.closeFactorMantissa()).div(1e18);\r\n        require(amount > 0, \"liquidate:liquidatableAmount == 0\");\r\n\r\n        address borrowedUnderlying = ICERC20(borrowed).underlying();\r\n\r\n        address fromPair = pairFor(borrowedUnderlying);\r\n        address suppliedUnderlying = ICERC20(supplied).underlying();\r\n        address toPair = pairFor(suppliedUnderlying);\r\n\r\n        liquidateCalculated(borrower, borrowed, supplied, fromPair, toPair, borrowedUnderlying, suppliedUnderlying, amount);\r\n    }\r\n\r\n    function encode(address borrower, address borrowed, address supplied, address fromPair, address toPair, address suppliedUnderlying) internal pure returns (bytes memory) {\r\n        return abi.encode(borrower, borrowed, supplied, fromPair, toPair, suppliedUnderlying);\r\n    }\r\n\r\n    function decode(bytes memory b) internal pure returns (address, address, address, address, address, address) {\r\n        return abi.decode(b, (address, address, address, address, address, address));\r\n    }\r\n\r\n    function liquidateCalculated(\r\n        address borrower,\r\n        address borrowed,\r\n        address supplied,\r\n        address fromPair,\r\n        address toPair,\r\n        address borrowedUnderlying,\r\n        address suppliedUnderlying,\r\n        uint amount\r\n    ) public upkeep {\r\n        IERC20(borrowedUnderlying).safeIncreaseAllowance(borrowed, amount);\r\n        (uint _amount0, uint _amount1) = (borrowedUnderlying == IUniswapV2Pair(fromPair).token0() ? (amount, uint(0)) : (uint(0), amount));\r\n        IUniswapV2Pair(fromPair).swap(_amount0, _amount1, address(this), encode(borrower, borrowed, supplied, fromPair, toPair, suppliedUnderlying));\r\n    }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KP2R\",\"outputs\":[{\"internalType\":\"contract IKeep2r\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"calcRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplied\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fromPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowedUnderlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"suppliedUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowed\",\"type\":\"address\"}],\"name\":\"liquidatable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplied\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplied\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowedUnderlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"suppliedUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"underlyingPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundFlashLiquidationsKeep2r","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://982bfc09fcc3b65f28757920ef43f0ebc2ed4cbb8413fef34d9c4da11ff66592"}]}