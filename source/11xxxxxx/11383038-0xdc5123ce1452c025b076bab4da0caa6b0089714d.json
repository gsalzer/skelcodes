{"status":"1","message":"OK","result":[{"SourceCode":"//v3\r\npragma solidity 0.5.16;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: BSD-4-Clause\r\n/*\r\n * ABDK Math Quad Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with IEEE 754\r\n * quadruple-precision binary floating-point numbers (quadruple precision\r\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\r\n * represented by bytes16 type.\r\n */\r\nlibrary ABDKMathQuad {\r\n  /*\r\n   * 0.\r\n   */\r\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\r\n\r\n  /*\r\n   * -0.\r\n   */\r\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * +Infinity.\r\n   */\r\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * -Infinity.\r\n   */\r\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * Canonical NaN value.\r\n   */\r\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 256-bit integer number\r\n   * rounding towards zero.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function toInt (bytes16 x) internal pure returns (int256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16638); // Overflow\r\n    if (exponent < 16383) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16495) result >>= 16495 - exponent;\r\n    else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n      return -int256 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int256 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      uint256 result = x;\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into unsigned 256-bit integer number\r\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\r\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\r\n   * without error, because they are rounded to zero.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function toUInt (bytes16 x) internal pure returns (uint256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    if (exponent < 16383) return 0; // Underflow\r\n\r\n    require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\r\n\r\n    require (exponent <= 16638); // Overflow\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16495) result >>= 16495 - exponent;\r\n    else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 128.128 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 128.128 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 128.128 bit fixed point number\r\n   */\r\n  function to128x128 (bytes16 x) internal pure returns (int256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16510); // Overflow\r\n    if (exponent < 16255) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16367) result >>= 16367 - exponent;\r\n    else if (exponent > 16367) result <<= exponent - 16367;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n      return -int256 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int256 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 64.64 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from64x64 (int128 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint128 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 64.64 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 64.64 bit fixed point number\r\n   */\r\n  function to64x64 (bytes16 x) internal pure returns (int128) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16446); // Overflow\r\n    if (exponent < 16319) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16431) result >>= 16431 - exponent;\r\n    else if (exponent > 16431) result <<= exponent - 16431;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x80000000000000000000000000000000);\r\n      return -int128 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert octuple precision number into quadruple precision number.\r\n   *\r\n   * @param x octuple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\r\n    bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\r\n\r\n    uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\r\n    uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFFF) {\r\n      if (significand > 0) return NaN;\r\n      else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n    }\r\n\r\n    if (exponent > 278526)\r\n      return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n    else if (exponent < 245649)\r\n      return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n    else if (exponent < 245761) {\r\n      significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\r\n      exponent = 0;\r\n    } else {\r\n      significand >>= 124;\r\n      exponent -= 245760;\r\n    }\r\n\r\n    uint128 result = uint128 (significand | exponent << 112);\r\n    if (negative) result |= 0x80000000000000000000000000000000;\r\n\r\n    return bytes16 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into octuple precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return octuple precision number\r\n   */\r\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\r\n    else if (exponent == 0) {\r\n      if (result > 0) {\r\n        uint256 msb = msb (result);\r\n        result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        exponent = 245649 + msb;\r\n      }\r\n    } else {\r\n      result <<= 124;\r\n      exponent += 245760;\r\n    }\r\n\r\n    result |= exponent << 236;\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000)\r\n      result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    return bytes32 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert double precision number into quadruple precision number.\r\n   *\r\n   * @param x double precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\r\n    uint256 exponent = uint64 (x) >> 52 & 0x7FF;\r\n\r\n    uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\r\n    else if (exponent == 0) {\r\n      if (result > 0) {\r\n        uint256 msb = msb (result);\r\n        result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        exponent = 15309 + msb;\r\n      }\r\n    } else {\r\n      result <<= 60;\r\n      exponent += 15360;\r\n    }\r\n\r\n    result |= exponent << 112;\r\n    if (x & 0x8000000000000000 > 0)\r\n      result |= 0x80000000000000000000000000000000;\r\n\r\n    return bytes16 (uint128 (result));\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into double precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return double precision number\r\n   */\r\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\r\n    bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\r\n\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFF) {\r\n      if (significand > 0) return 0x7FF8000000000000; // NaN\r\n      else return negative ?\r\n          bytes8 (0xFFF0000000000000) : // -Infinity\r\n          bytes8 (0x7FF0000000000000); // Infinity\r\n    }\r\n\r\n    if (exponent > 17406)\r\n      return negative ?\r\n          bytes8 (0xFFF0000000000000) : // -Infinity\r\n          bytes8 (0x7FF0000000000000); // Infinity\r\n    else if (exponent < 15309)\r\n      return negative ?\r\n          bytes8 (0x8000000000000000) : // -0\r\n          bytes8 (0x0000000000000000); // 0\r\n    else if (exponent < 15361) {\r\n      significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\r\n      exponent = 0;\r\n    } else {\r\n      significand >>= 60;\r\n      exponent -= 15360;\r\n    }\r\n\r\n    uint64 result = uint64 (significand | exponent << 52);\r\n    if (negative) result |= 0x8000000000000000;\r\n\r\n    return bytes8 (result);\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is NaN, false otherwise\r\n   */\r\n  function isNaN (bytes16 x) internal pure returns (bool) {\r\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\r\n      0x7FFF0000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is positive or negative\r\n   * infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is positive or negative infinity, false otherwise\r\n   */\r\n  function isInfinity (bytes16 x) internal pure returns (bool) {\r\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\r\n      0x7FFF0000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\r\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @return sign of x\r\n   */\r\n  function sign (bytes16 x) internal pure returns (int8) {\r\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    if (absoluteX == 0) return 0;\r\n    else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\r\n    else return 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\r\n   * arguments are infinities of the same sign. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return sign (x - y)\r\n   */\r\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\r\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    // Not infinities of the same sign\r\n    require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\r\n\r\n    if (x == y) return 0;\r\n    else {\r\n      bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\r\n      bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\r\n\r\n      if (negativeX) {\r\n        if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\r\n        else return -1; \r\n      } else {\r\n        if (negativeY) return 1;\r\n        else return absoluteX > absoluteY ? int8 (1) : -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\r\n   * anything. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return true if x equals to y, false otherwise\r\n   */\r\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\r\n    if (x == y) {\r\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\r\n        0x7FFF0000000000000000000000000000;\r\n    } else return false;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Special values behave in the following way:\r\n   *\r\n   * NaN + x = NaN for any x.\r\n   * Infinity + x = Infinity for any finite x.\r\n   * -Infinity + x = -Infinity for any finite x.\r\n   * Infinity + Infinity = Infinity.\r\n   * -Infinity + -Infinity = -Infinity.\r\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) { \r\n        if (x == y) return x;\r\n        else return NaN;\r\n      } else return x; \r\n    } else if (yExponent == 0x7FFF) return y;\r\n    else {\r\n      bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\r\n      else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\r\n      else {\r\n        int256 delta = int256 (xExponent) - int256 (yExponent);\r\n  \r\n        if (xSign == ySign) {\r\n          if (delta > 112) return x;\r\n          else if (delta > 0) ySignifier >>= uint256 (delta);\r\n          else if (delta < -112) return y;\r\n          else if (delta < 0) {\r\n            xSignifier >>= uint256 (-delta);\r\n            xExponent = yExponent;\r\n          }\r\n  \r\n          xSignifier += ySignifier;\r\n  \r\n          if (xSignifier >= 0x20000000000000000000000000000) {\r\n            xSignifier >>= 1;\r\n            xExponent += 1;\r\n          }\r\n  \r\n          if (xExponent == 0x7FFF)\r\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n          else {\r\n            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\r\n            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  \r\n            return bytes16 (uint128 (\r\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                (xExponent << 112) |\r\n                xSignifier)); \r\n          }\r\n        } else {\r\n          if (delta > 0) {\r\n            xSignifier <<= 1;\r\n            xExponent -= 1;\r\n          } else if (delta < 0) {\r\n            ySignifier <<= 1;\r\n            xExponent = yExponent - 1;\r\n          }\r\n\r\n          if (delta > 112) ySignifier = 1;\r\n          else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\r\n          else if (delta < -112) xSignifier = 1;\r\n          else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\r\n\r\n          if (xSignifier >= ySignifier) xSignifier -= ySignifier;\r\n          else {\r\n            xSignifier = ySignifier - xSignifier;\r\n            xSign = ySign;\r\n          }\r\n\r\n          if (xSignifier == 0)\r\n            return POSITIVE_ZERO;\r\n\r\n          uint256 msb = msb (xSignifier);\r\n\r\n          if (msb == 113) {\r\n            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            xExponent += 1;\r\n          } else if (msb < 112) {\r\n            uint256 shift = 112 - msb;\r\n            if (xExponent > shift) {\r\n              xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n              xExponent -= shift;\r\n            } else {\r\n              xSignifier <<= xExponent - 1;\r\n              xExponent = 0;\r\n            }\r\n          } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          if (xExponent == 0x7FFF)\r\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n          else return bytes16 (uint128 (\r\n              (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n              (xExponent << 112) |\r\n              xSignifier));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Special values behave in the following way:\r\n   *\r\n   * NaN - x = NaN for any x.\r\n   * Infinity - x = Infinity for any finite x.\r\n   * -Infinity - x = -Infinity for any finite x.\r\n   * Infinity - -Infinity = Infinity.\r\n   * -Infinity - Infinity = -Infinity.\r\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    return add (x, y ^ 0x80000000000000000000000000000000);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y.  Special values behave in the following way:\r\n   *\r\n   * NaN * x = NaN for any x.\r\n   * Infinity * x = Infinity for any finite positive x.\r\n   * Infinity * x = -Infinity for any finite negative x.\r\n   * -Infinity * x = -Infinity for any finite positive x.\r\n   * -Infinity * x = Infinity for any finite negative x.\r\n   * Infinity * 0 = NaN.\r\n   * -Infinity * 0 = NaN.\r\n   * Infinity * Infinity = Infinity.\r\n   * Infinity * -Infinity = -Infinity.\r\n   * -Infinity * Infinity = -Infinity.\r\n   * -Infinity * -Infinity = Infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) {\r\n        if (x == y) return x ^ y & 0x80000000000000000000000000000000;\r\n        else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\r\n        else return NaN;\r\n      } else {\r\n        if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return x ^ y & 0x80000000000000000000000000000000;\r\n      }\r\n    } else if (yExponent == 0x7FFF) {\r\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return y ^ x & 0x80000000000000000000000000000000;\r\n    } else {\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      xSignifier *= ySignifier;\r\n      if (xSignifier == 0)\r\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n            NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n      xExponent += yExponent;\r\n\r\n      uint256 msb =\r\n        xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\r\n        xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\r\n        msb (xSignifier);\r\n\r\n      if (xExponent + msb < 16496) { // Underflow\r\n        xExponent = 0;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb < 16608) { // Subnormal\r\n        if (xExponent < 16496)\r\n          xSignifier >>= 16496 - xExponent;\r\n        else if (xExponent > 16496)\r\n          xSignifier <<= xExponent - 16496;\r\n        xExponent = 0;\r\n      } else if (xExponent + msb > 49373) {\r\n        xExponent = 0x7FFF;\r\n        xSignifier = 0;\r\n      } else {\r\n        if (msb > 112)\r\n          xSignifier >>= msb - 112;\r\n        else if (msb < 112)\r\n          xSignifier <<= 112 - msb;\r\n\r\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        xExponent = xExponent + msb - 16607;\r\n      }\r\n\r\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n          xExponent << 112 | xSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y.  Special values behave in the following way:\r\n   *\r\n   * NaN / x = NaN for any x.\r\n   * x / NaN = NaN for any x.\r\n   * Infinity / x = Infinity for any finite non-negative x.\r\n   * Infinity / x = -Infinity for any finite negative x including -0.\r\n   * -Infinity / x = -Infinity for any finite non-negative x.\r\n   * -Infinity / x = Infinity for any finite negative x including -0.\r\n   * x / Infinity = 0 for any finite non-negative x.\r\n   * x / -Infinity = -0 for any finite non-negative x.\r\n   * x / Infinity = -0 for any finite non-negative x including -0.\r\n   * x / -Infinity = 0 for any finite non-negative x including -0.\r\n   * \r\n   * Infinity / Infinity = NaN.\r\n   * Infinity / -Infinity = -NaN.\r\n   * -Infinity / Infinity = -NaN.\r\n   * -Infinity / -Infinity = NaN.\r\n   *\r\n   * Division by zero behaves in the following way:\r\n   *\r\n   * x / 0 = Infinity for any finite positive x.\r\n   * x / -0 = -Infinity for any finite positive x.\r\n   * x / 0 = -Infinity for any finite negative x.\r\n   * x / -0 = Infinity for any finite negative x.\r\n   * 0 / 0 = NaN.\r\n   * 0 / -0 = NaN.\r\n   * -0 / 0 = NaN.\r\n   * -0 / -0 = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) return NaN;\r\n      else return x ^ y & 0x80000000000000000000000000000000;\r\n    } else if (yExponent == 0x7FFF) {\r\n      if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\r\n      else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\r\n    } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\r\n      if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n      else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\r\n    } else {\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) {\r\n        if (xSignifier != 0) {\r\n          uint shift = 226 - msb (xSignifier);\r\n\r\n          xSignifier <<= shift;\r\n\r\n          xExponent = 1;\r\n          yExponent += shift - 114;\r\n        }\r\n      }\r\n      else {\r\n        xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\r\n      }\r\n\r\n      xSignifier = xSignifier / ySignifier;\r\n      if (xSignifier == 0)\r\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n            NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n      assert (xSignifier >= 0x1000000000000000000000000000);\r\n\r\n      uint256 msb =\r\n        xSignifier >= 0x80000000000000000000000000000 ? msb (xSignifier) :\r\n        xSignifier >= 0x40000000000000000000000000000 ? 114 :\r\n        xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\r\n\r\n      if (xExponent + msb > yExponent + 16497) { // Overflow\r\n        xExponent = 0x7FFF;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb + 16380  < yExponent) { // Underflow\r\n        xExponent = 0;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\r\n        if (xExponent + 16380 > yExponent)\r\n          xSignifier <<= xExponent + 16380 - yExponent;\r\n        else if (xExponent + 16380 < yExponent)\r\n          xSignifier >>= yExponent - xExponent - 16380;\r\n\r\n        xExponent = 0;\r\n      } else { // Normal\r\n        if (msb > 112)\r\n          xSignifier >>= msb - 112;\r\n\r\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        xExponent = xExponent + msb + 16269 - yExponent;\r\n      }\r\n\r\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n          xExponent << 112 | xSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function neg (bytes16 x) internal pure returns (bytes16) {\r\n    return x ^ 0x80000000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function abs (bytes16 x) internal pure returns (bytes16) {\r\n    return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  }\r\n\r\n  /**\r\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\r\n    if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\r\n    else {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      if (xExponent == 0x7FFF) return x;\r\n      else {\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n        bool oddExponent = xExponent & 0x1 == 0;\r\n        xExponent = xExponent + 16383 >> 1;\r\n\r\n        if (oddExponent) {\r\n          if (xSignifier >= 0x10000000000000000000000000000)\r\n            xSignifier <<= 113;\r\n          else {\r\n            uint256 msb = msb (xSignifier);\r\n            uint256 shift = (226 - msb) & 0xFE;\r\n            xSignifier <<= shift;\r\n            xExponent -= shift - 112 >> 1;\r\n          }\r\n        } else {\r\n          if (xSignifier >= 0x10000000000000000000000000000)\r\n            xSignifier <<= 112;\r\n          else {\r\n            uint256 msb = msb (xSignifier);\r\n            uint256 shift = (225 - msb) & 0xFE;\r\n            xSignifier <<= shift;\r\n            xExponent -= shift - 112 >> 1;\r\n          }\r\n        }\r\n\r\n        uint256 r = 0x10000000000000000000000000000;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = xSignifier / r;\r\n        if (r1 < r) r = r1;\r\n\r\n        return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\r\n    if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\r\n    else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \r\n    else {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      if (xExponent == 0x7FFF) return x;\r\n      else {\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return NEGATIVE_INFINITY;\r\n\r\n        bool resultNegative;\r\n        uint256 resultExponent = 16495;\r\n        uint256 resultSignifier;\r\n\r\n        if (xExponent >= 0x3FFF) {\r\n          resultNegative = false;\r\n          resultSignifier = xExponent - 0x3FFF;\r\n          xSignifier <<= 15;\r\n        } else {\r\n          resultNegative = true;\r\n          if (xSignifier >= 0x10000000000000000000000000000) {\r\n            resultSignifier = 0x3FFE - xExponent;\r\n            xSignifier <<= 15;\r\n          } else {\r\n            uint256 msb = msb (xSignifier);\r\n            resultSignifier = 16493 - msb;\r\n            xSignifier <<= 127 - msb;\r\n          }\r\n        }\r\n\r\n        if (xSignifier == 0x80000000000000000000000000000000) {\r\n          if (resultNegative) resultSignifier += 1;\r\n          uint256 shift = 112 - msb (resultSignifier);\r\n          resultSignifier <<= shift;\r\n          resultExponent -= shift;\r\n        } else {\r\n          uint256 bb = resultNegative ? 1 : 0;\r\n          while (resultSignifier < 0x10000000000000000000000000000) {\r\n            resultSignifier <<= 1;\r\n            resultExponent -= 1;\r\n  \r\n            xSignifier *= xSignifier;\r\n            uint256 b = xSignifier >> 255;\r\n            resultSignifier += b ^ bb;\r\n            xSignifier >>= 127 + b;\r\n          }\r\n        }\r\n\r\n        return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\r\n            resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function ln (bytes16 x) internal pure returns (bytes16) {\r\n    return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\r\n  }\r\n\r\n  /**\r\n   * Calculate 2^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\r\n    bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\r\n    else if (xExponent > 16397)\r\n      return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\r\n    else if (xExponent < 16255)\r\n      return 0x3FFF0000000000000000000000000000;\r\n    else {\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      if (xExponent > 16367)\r\n        xSignifier <<= xExponent - 16367;\r\n      else if (xExponent < 16367)\r\n        xSignifier >>= 16367 - xExponent;\r\n\r\n      if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\r\n        return POSITIVE_ZERO;\r\n\r\n      if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        return POSITIVE_INFINITY;\r\n\r\n      uint256 resultExponent = xSignifier >> 128;\r\n      xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xNegative && xSignifier != 0) {\r\n        xSignifier = ~xSignifier;\r\n        resultExponent += 1;\r\n      }\r\n\r\n      uint256 resultSignifier = 0x80000000000000000000000000000000;\r\n      if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n      if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\r\n      if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\r\n      if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\r\n      if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\r\n      if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\r\n      if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\r\n      if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\r\n      if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\r\n      if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\r\n      if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\r\n      if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\r\n      if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\r\n      if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\r\n      if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\r\n      if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\r\n      if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\r\n      if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\r\n      if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\r\n      if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\r\n      if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\r\n      if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\r\n      if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\r\n      if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\r\n      if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\r\n      if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\r\n      if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\r\n      if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\r\n      if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\r\n      if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\r\n      if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\r\n      if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\r\n      if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\r\n      if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\r\n      if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\r\n      if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\r\n      if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\r\n      if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\r\n      if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\r\n      if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\r\n      if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\r\n      if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\r\n      if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\r\n      if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\r\n      if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\r\n      if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\r\n      if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\r\n      if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\r\n      if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\r\n      if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\r\n      if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\r\n      if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\r\n      if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\r\n      if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\r\n      if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\r\n      if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\r\n      if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\r\n      if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\r\n      if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\r\n      if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\r\n      if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\r\n      if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\r\n      if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\r\n\r\n      if (!xNegative) {\r\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        resultExponent += 0x3FFF;\r\n      } else if (resultExponent <= 0x3FFE) {\r\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        resultExponent = 0x3FFF - resultExponent;\r\n      } else {\r\n        resultSignifier = resultSignifier >> resultExponent - 16367;\r\n        resultExponent = 0;\r\n      }\r\n\r\n      return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate e^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function exp (bytes16 x) internal pure returns (bytes16) {\r\n    return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\r\n  }\r\n\r\n  /**\r\n   * Get index of the most significant non-zero bit in binary representation of\r\n   * x.  Reverts if x is zero.\r\n   *\r\n   * @return index of the most significant non-zero bit in binary representation\r\n   *         of x\r\n   */\r\n  function msb (uint256 x) private pure returns (uint256) {\r\n    require (x > 0);\r\n\r\n    uint256 result = 0;\r\n\r\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\r\n    if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\r\n    if (x >= 0x100000000) { x >>= 32; result += 32; }\r\n    if (x >= 0x10000) { x >>= 16; result += 16; }\r\n    if (x >= 0x100) { x >>= 8; result += 8; }\r\n    if (x >= 0x10) { x >>= 4; result += 4; }\r\n    if (x >= 0x4) { x >>= 2; result += 2; }\r\n    if (x >= 0x2) result += 1; // No need to shift x anymore\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n   \r\n\r\n \r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 public _totalSupply; \r\n\r\n    constructor() public {\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n \r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n    \r\n    \r\n    \r\n \r\n  \r\n  \r\n  \r\n   \r\n  \r\n\r\n  \r\n}\r\n\r\ncontract Ownable {\r\n   address internal admin;\r\n   address internal owner;\r\n\r\n  constructor() internal {\r\n    owner = msg.sender;\r\n    admin = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Ownable: msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: owner is zero address\");      \r\n    owner = newOwner;\r\n  }\r\n\r\n  function transferAdmin(address newAdmin) external onlyOwner {\r\n    require(newAdmin != address(0), \"Ownable: admin is zero address\");      \r\n    admin = newAdmin;\r\n  }\r\n \r\n}\r\n\r\n\r\ncontract PositiveToken is ERC20,Ownable  {\r\n  /* ERC20 constants */\r\n  string internal _name; \r\n  string internal _symbol;\r\n  uint8 internal _decimals;\r\n\r\n  bytes16 internal _price;\r\n  uint256 private _bank = 0; \r\n  uint256 private _tokens;\r\n\r\n  bytes16 internal PRICE_DECIMALS; \r\n\r\n \r\n  bool private Initialize = false; \r\n\r\n\r\n    // max mint  100k\r\n  uint256 public _maxMintable=15000;\r\n\r\n  mapping (address=>address) private registred;\r\n  mapping (address=>address) private reff;\r\n  uint256 private _userInContract;\r\n\r\n\r\n\r\n  event Price(uint256 totalSupply,uint256 value);\r\n  event Diff(uint256 diff);\r\n\r\n  function name() external view returns(string memory){\r\n    return _name;\r\n  }\r\n  function symbol() external view returns(string memory){\r\n    return _symbol;\r\n  }\r\n  function decimals() external view returns(uint8){\r\n    return _decimals;\r\n  }\r\n\r\n  function bank() external view returns(uint256){\r\n    return _bank;\r\n  }\r\n\r\n  function price() external view returns(uint256) {\r\n    bytes16 uint_price = ABDKMathQuad.mul(_price,PRICE_DECIMALS); // float price * 10**18\r\n    return(ABDKMathQuad.toUInt(uint_price)); // return uint price \r\n  }\r\n\r\n  \r\n  \r\n\r\n  \r\n  \r\n  \r\n\r\n  \r\n  \r\n\r\n  \r\n\r\n  function isRegisterd(address addr) external view returns(bool) {\r\n    if(registred[addr] == address(0)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }    \r\n\r\n  function isInitialize() external view returns(bool){\r\n    return Initialize;\r\n  }\r\n\r\n \r\n  function getUserInContract() external view returns(uint256) {\r\n    return _userInContract;\r\n  }\r\n\r\n  function init() external payable onlyOwner returns(bool) {\r\n    require(Initialize == false, \"Bronwyn: Initialize is true\");\r\n    require(msg.value > 10**15, \"Bronwyn: eth value < 10^15 Wei\"); // init price 0.002 Eth = 10**15 Wei\r\n    bytes16 _adm_add_tmp = ABDKMathQuad.div( ABDKMathQuad.fromUInt(msg.value), _price);\r\n    \r\n    uint256 _adm_add = ABDKMathQuad.toUInt(_adm_add_tmp);\r\n    \r\n    _mint(msg.sender, _adm_add);\r\n    _tokens = _tokens.add(_adm_add);\r\n\r\n    _bank = _bank.add(msg.value);\r\n\r\n    _price = ABDKMathQuad.div( ABDKMathQuad.fromUInt(_bank),ABDKMathQuad.fromUInt(_tokens));\r\n    bytes16 uint_price = ABDKMathQuad.mul(_price,PRICE_DECIMALS); // float price * 10**18\r\n\r\n    emit Price(_tokens,ABDKMathQuad.toUInt(uint_price));\r\n\r\n    Initialize = true;\r\n    registred[address(0)] = admin;\r\n    registred[msg.sender] = admin;\r\n    reff[msg.sender] = admin;\r\n    return Initialize;\r\n  }\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function buytoken() external payable {\r\n    require(Initialize == true, \"Bronwyn: Initialize is false\");\r\n    require(msg.value > 10**15, \"Bronwyn: eth value < 10^15 Wei\"); // init price 0.001\r\n\r\n\r\n\r\n    bytes16 _pre_virtual_tokens = ABDKMathQuad.div( ABDKMathQuad.fromUInt(msg.value), _price);\r\n   \r\n\r\n  \r\n    uint256 _us_add = ABDKMathQuad.toUInt(_pre_virtual_tokens); \r\n    require((_totalSupply.add(_us_add)).div(10**18) <_maxMintable, \"Bronwyn: Max mint limit has reached\");\r\n\r\n\r\n\r\n    _mint(msg.sender,_us_add);\r\n    _tokens = _tokens.add(_us_add);\r\n\r\n\r\n    _bank = _bank.add(msg.value);\r\n\r\n    _price = ABDKMathQuad.div( ABDKMathQuad.fromUInt(_bank),ABDKMathQuad.fromUInt(_tokens));\r\n    bytes16 uint_price = ABDKMathQuad.mul(_price,PRICE_DECIMALS); \r\n    \r\n\r\n    emit Price(_tokens,ABDKMathQuad.toUInt(uint_price));\r\n\r\n    if(registred[msg.sender] == address(0)) {\r\n      registred[msg.sender] = msg.sender;\r\n      _userInContract = _userInContract.add(1);\r\n    }\r\n\r\n  }\r\n\r\n \r\n  \r\n  \r\n  \r\n   function transferBank() external payable onlyOwner {\r\n    require(Initialize == true, \"BRONWYN: Initialize is false\");\r\n\r\n   \r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n  \r\n    \r\n    msg.sender.transfer(_bank);\r\n    \r\n    _bank =0;\r\n    _tokens=0;\r\n    _price =ABDKMathQuad.div ( ABDKMathQuad.fromUInt(34), ABDKMathQuad.fromUInt(10000) );\r\n    bytes16 uint_price = ABDKMathQuad.mul(_price,PRICE_DECIMALS); // float price * 10**18  \r\n    \r\n\r\n    emit Price(_tokens,ABDKMathQuad.toUInt(uint_price));\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract BRONWYN is PositiveToken {\r\n  constructor()\r\n    public {\r\n      _name = \"Bronsale\";\r\n      _symbol = \"BROS\";\r\n      _decimals = 18;\r\n      _price = ABDKMathQuad.div ( ABDKMathQuad.fromUInt(33), ABDKMathQuad.fromUInt(10000) ); // 0.0033\r\n      uint256 t = 10**18;\r\n      PRICE_DECIMALS = ABDKMathQuad.fromUInt(t);\r\n\r\n  }\r\n\r\n  function() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diff\",\"type\":\"uint256\"}],\"name\":\"Diff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buytoken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegisterd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferBank\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BRONWYN","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5c5ec70cb0ad7b84e4c12a60bb106ce3687d41360e3dbc77fca6d5eb660ad8a3"}]}