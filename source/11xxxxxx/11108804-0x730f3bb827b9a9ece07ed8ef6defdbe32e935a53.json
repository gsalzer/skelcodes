{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^ 0.6.7;\r\n\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes memory) {\r\n\t\tthis;\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction subs(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn subs(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction subs(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n\tusing SafeMath\r\n\tfor uint256;\r\n\tusing SafeERC20 for IERC20;\r\n    \r\n    event SetAllowSellEvent(bool _sellstate);\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n    bool private allowsell;\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\taddress governace;\r\n\tuint256 maxSupply;\r\n\r\n\tconstructor(string memory name, string memory symbol) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = 18;\r\n\t\tallowsell = true;\r\n\t}\r\n\r\n\tfunction name() public view returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns(uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns(uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns(uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns(bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].subs(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].subs(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\tfunction SetAllowSell(bool sellstate) public {\r\n\t\trequire(msg.sender == governace, \"Only for owner\");\r\n\t\tallowsell = sellstate;\r\n\t\temit SetAllowSellEvent(sellstate);\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n        if(sender==governace || recipient == governace) {\r\n\t\t_balances[sender] = _balances[sender].subs(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\r\n\t\temit Transfer(sender, recipient, amount);\r\n        }\r\n\t\telse {\r\n\t\trequire(allowsell == true, \"ERC20: balance exceded\");\r\n\t\t_balances[sender] = _balances[sender].subs(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\tfunction _initMint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: create to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) public virtual {\r\n\t\trequire(account == governace, \"ERC20: Burner is not allowed\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_balances[account] = _balances[account].sub(amount);\r\n\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _setupDecimals(uint8 decimals_) internal {\r\n\t\t_decimals = decimals_;\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\ncontract uSwapFX is ERC20 {\r\n\tconstructor()\r\n\tERC20('uSwapFX', 'UFX')\r\n\tpublic {\r\n\t\tgovernace = msg.sender;\r\n\t\tmaxSupply = 5000000 * 10 ** uint(decimals());\r\n\t\t_initMint(governace, maxSupply);\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract Crowdsale is Context, ReentrancyGuard, Owned {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n\r\n    uSwapFX public _token;\r\n\r\n    address payable private _wallet;\r\n\r\n    uint256 private _rate;\r\n\r\n    uint256 private _weiRaised;\r\n    \r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event LockSellEvent(bool state,bool success, bytes data);\r\n\r\n    constructor (uint256 rate, address payable wallet) public {\r\n        require(rate > 0, \"Crowdsale: rate is 0\");\r\n        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = new uSwapFX();\r\n    }\r\n\r\n    receive () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n    function LockSell(address c, bool state) public {\r\n        require(msg.sender == owner);\r\n        (bool success, bytes memory data) = c.call(abi.encodeWithSignature(\"SetAllowSell(bool)\", state));\r\n        emit LockSellEvent(state,success,data);\r\n        \r\n    }\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        uint256 weiAmount = msg.value;\r\n        \r\n        require(msg.value >= 0.1 ether);\r\n        \r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        \r\n        uint airdrop = 800000000000000000000;\r\n\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        tokens = tokens.add(airdrop);\r\n        \r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\r\n        _forwardFunds();\r\n    }\r\n\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n        this;\r\n    }\r\n\r\n\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.transfer(beneficiary, tokenAmount);\r\n    }\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n\r\n    function withdrawAllToken(uint256 tokenAmount) public nonReentrant{\r\n    require(msg.sender == owner);\r\n    _deliverTokens(owner, tokenAmount);\r\n    }\r\n    \r\n}\r\n\r\ncontract uswapFXsale is Crowdsale {\r\n    constructor (\r\n        uint256 rate,\r\n        address payable wallet\r\n    )\r\n        public\r\n        Crowdsale(rate, wallet)\r\n    {\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_sellstate\",\"type\":\"bool\"}],\"name\":\"SetAllowSellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sellstate\",\"type\":\"bool\"}],\"name\":\"SetAllowSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"uSwapFX","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee913a63e69f48047b7d52cddc1a4432ec5b43401f2ff780d2ff815119439396"}]}