{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.4;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract CryptillionClub {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    struct User {\r\n        address sponsor;\r\n        bool[21] relations;\r\n        uint[21] levels;\r\n    }\r\n    \r\n    \r\n    mapping (address => User) private users;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    \r\n    address private owner;\r\n    address private founder;\r\n\r\n    uint private usersCounter;\r\n    uint private normalLevelPrice;\r\n    uint private levelTime;\r\n    \r\n    uint private discountCounter;\r\n    uint private discountTimer;\r\n    uint private discountFactor;\r\n    bool private discountFirst;\r\n\r\n    uint private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n    event GotPartner(address indexed user, address indexed sponsor, uint indexed level, uint regDate);\r\n    event LostPartner(address indexed user, address indexed sponsor, uint indexed level, uint regDate);\r\n    event GotProfit(address indexed sponsor, address indexed user, uint etherAmount, uint tokenAmount, uint rate, uint level, uint date);\r\n    event LostProfit(address indexed sponsor, address indexed user, uint etherAmount, uint tokenAmount, uint rate, uint level, uint date);\r\n    \r\n    event TokenRateChanged(uint indexed tokenRate, uint indexed date);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Sell(address indexed seller, uint256 tokenAmount, uint256 rate, uint256 etherAmount, uint256 date);\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        founder = msg.sender;\r\n\r\n        usersCounter = 0;\r\n\r\n        normalLevelPrice = 100000000000000000;\r\n        levelTime = 8640000;\r\n        \r\n        _name = \"Cryptillion Club Token\";\r\n        _symbol = \"CRION\";\r\n        _decimals = 18;\r\n        \r\n        emit TokenRateChanged(10000000000000000, block.timestamp);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require (_msgSender() == owner, 'Only for owner');\r\n        _;\r\n    }\r\n    \r\n    modifier maxLevel(uint _level) {\r\n        require (_level >= 1 && _level <= 20, 'Min and max levels are 1-20');\r\n        _;\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    function changeOwnerAddress(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n        assert(owner == _newOwner);\r\n    }\r\n    \r\n    function changeFounderAddress(address _newFounder) external onlyOwner {\r\n        founder = _newFounder;\r\n        assert(founder == _newFounder);\r\n    }\r\n    \r\n    function changeNormalLevelPrice(uint _newPrice) external onlyOwner {\r\n        normalLevelPrice = _newPrice;\r\n        assert(normalLevelPrice == _newPrice);\r\n    }\r\n    \r\n    function changeLevelTime(uint _newTime) external onlyOwner {\r\n        levelTime = _newTime;\r\n        assert(levelTime == _newTime);\r\n    }\r\n    \r\n    function createDiscount(uint _counter, uint _timer, uint _factor, bool _first) external onlyOwner {\r\n        discountCounter = _counter;\r\n        discountTimer = _timer;\r\n        discountFactor = _factor;\r\n        discountFirst = _first;\r\n    }\r\n    \r\n    function registerUser(address _sponsor) external payable {\r\n        \r\n        require (msg.value == levelPrice(1), 'Wrong registration payment amount.');\r\n        require (_sponsor != address(0) && users[_sponsor].levels[0] > 0, 'Please provide registered sponsor.');\r\n        require (_sponsor != _msgSender(), 'You can\\'t be your own sponsor.');\r\n        require (users[_msgSender()].levels[0] == 0, 'You are already registered');\r\n        \r\n        address temp_sponsor = _sponsor;\r\n        uint[21] memory tempLevels;\r\n        bool[21] memory tempRelations;\r\n        \r\n        tempLevels[0] = 1;\r\n        tempRelations[0] = true;\r\n        \r\n        uint date = block.timestamp;\r\n        \r\n        for (uint i = 1; i <= 20 && temp_sponsor != address(0); ++i) {\r\n            \r\n            if(users[temp_sponsor].levels[i] >= date) {\r\n                \r\n                tempRelations[i] = true;\r\n                emit GotPartner(_msgSender(), temp_sponsor, i, date);\r\n                \r\n            } else {\r\n                \r\n                emit LostPartner(_msgSender(), temp_sponsor, i, date);\r\n            }\r\n            temp_sponsor = users[temp_sponsor].sponsor;\r\n        }\r\n        \r\n        users[_msgSender()] = User(_sponsor, tempRelations, tempLevels);\r\n        \r\n        buyLevel(1);\r\n        \r\n        ++usersCounter;\r\n    }\r\n    \r\n    function createSuperUser(address _superUser, address _sponsor) external onlyOwner {\r\n        \r\n        bool[21] memory tempRelations;\r\n        uint[21] memory tempLevels;\r\n        \r\n        tempLevels[0] = 1;\r\n        tempRelations[0] = true;\r\n\r\n        for (uint i = 1; i < 21; ++i) {\r\n            tempLevels[i] = 11044857601;\r\n        }\r\n        \r\n        users[_superUser] = User(_sponsor, tempRelations, tempLevels);\r\n        ++usersCounter;\r\n        \r\n        emit GotPartner(_superUser, _sponsor, 1, block.timestamp);\r\n    }\r\n    \r\n    function buyLevel (uint _level) public payable maxLevel(_level) {\r\n        \r\n        require(msg.value == levelPrice(_level), 'Wrong amount.');\r\n        require(users[_msgSender()].levels[0] == 1, 'Please register.');\r\n\r\n        uint nowStamp = block.timestamp;\r\n        \r\n        require(users[_msgSender()].levels[_level] < nowStamp.add(_levelTime()), 'No more than +200 days.');\r\n        \r\n        for (uint i = 1; i < _level; ++i) {\r\n            require(users[_msgSender()].levels[i] >= nowStamp, 'Please, activate the previous levels first.');\r\n        }\r\n        \r\n        if(users[_msgSender()].levels[_level] <= nowStamp) {\r\n            users[_msgSender()].levels[_level] = nowStamp.add(_levelTime());\r\n        } else {\r\n            users[_msgSender()].levels[_level] = users[_msgSender()].levels[_level].add(_levelTime());\r\n        }\r\n        \r\n        address sponsor = getSponsor(_msgSender(), _level);\r\n        \r\n        if (sponsor != address(0)) {\r\n            \r\n            uint etherAmount = msg.value;\r\n            (uint tokenAmount, uint rate) = tokenAmountForEther(etherAmount);\r\n            \r\n            if(_level == 1) {\r\n                etherAmount = etherAmount.div(2);\r\n                tokenAmount = tokenAmount.div(2);\r\n                _mint(founder, tokenAmount);\r\n            }\r\n            \r\n            if (users[sponsor].levels[_level] >= nowStamp) {\r\n            \r\n                _mint(sponsor, tokenAmount);\r\n                emit GotProfit(sponsor, _msgSender(), etherAmount, tokenAmount, rate, _level, nowStamp);\r\n                assert(balanceOf(sponsor) >= tokenAmount);\r\n                \r\n            } else {\r\n                \r\n                emit LostProfit(sponsor, _msgSender(), etherAmount, tokenAmount, rate, _level, nowStamp);\r\n                emit TokenRateChanged(_tokenRate(0), nowStamp);\r\n            }\r\n        } else {\r\n            emit TokenRateChanged(_tokenRate(0), nowStamp);\r\n        }\r\n    }\r\n    \r\n    function getSponsor(address _user, uint _level) public view maxLevel(_level) returns (address) {\r\n        \r\n        address temp_sponsor = users[_user].sponsor;\r\n        \r\n        if (!users[_user].relations[_level]) {\r\n            return address(0);\r\n        } else {\r\n            for (uint i = 2; i <= _level; ++i) {\r\n                temp_sponsor = users[temp_sponsor].sponsor;\r\n            }\r\n            return temp_sponsor;\r\n        }\r\n        \r\n    }\r\n    \r\n    function getRelations(address _user) external view returns (bool[21] memory relations) {\r\n        return users[_user].relations;\r\n    }\r\n    \r\n    function levelPrice(uint _level) public view maxLevel(_level) returns (uint) {\r\n        if((_usersCounter() > _discountCounter() && block.timestamp > _discountTimer()) || users[_msgSender()].levels[_level] != 0) {\r\n            return _normalLevelPrice();\r\n        } else if (_discountFirst() == false || _level == 1) {\r\n            return _normalLevelPrice().div(_discountFactor());\r\n        } else {\r\n            return _normalLevelPrice();\r\n        }\r\n    }\r\n    \r\n    function userInfo(address _user) public view returns (address[21] memory _sponsors, uint[21] memory _levels) {\r\n        \r\n        address[21] memory sponsors;\r\n        bool[21] memory temp_relations = users[_user].relations;\r\n        \r\n        address temp_sponsor = users[_user].sponsor;\r\n        sponsors[0] = temp_sponsor;\r\n        \r\n        for (uint i = 1; i < 21 && temp_sponsor != address(0); ++i) {\r\n            if(temp_relations[i]) {\r\n                sponsors[i] = temp_sponsor;\r\n            }\r\n            temp_sponsor = users[temp_sponsor].sponsor;\r\n        }\r\n        \r\n        return (sponsors, users[_user].levels);\r\n    }\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function _usersCounter() public view returns (uint) {\r\n        return usersCounter;\r\n    }\r\n    \r\n    function _normalLevelPrice() public view returns (uint) {\r\n        return normalLevelPrice;\r\n    }\r\n    \r\n    function _levelTime() public view returns (uint) {\r\n        return levelTime;\r\n    }\r\n    \r\n    function _discountCounter() public view returns (uint) {\r\n        return discountCounter;\r\n    }\r\n    \r\n    function _discountTimer() public view returns (uint) {\r\n        return discountTimer;\r\n    }\r\n    \r\n    function _discountFactor() public view returns (uint) {\r\n        return discountFactor;\r\n    }\r\n    \r\n    function _discountFirst() public view returns (bool) {\r\n        return discountFirst;\r\n    }\r\n\t\r\n\tfunction _userSponsor(address _user) public view returns (address) {\r\n        return users[_user].sponsor;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _tokenAmount) public virtual returns (bool) {\r\n\r\n        if (_recipient == address(this)) {\r\n\r\n            uint date = block.timestamp;\r\n            uint rate = _tokenRate(0);\r\n            uint etherAmount = _tokenAmount.mul(rate).div(10**18);\r\n            \r\n            _burn(_msgSender(), _tokenAmount);\r\n\r\n            sendValue(_msgSender(), etherAmount);\r\n            \r\n            emit Sell(_msgSender(), _tokenAmount, rate, etherAmount, date);\r\n\r\n        } else {\r\n            _transfer(_msgSender(), _recipient, _tokenAmount);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal virtual {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[_sender] = _balances[_sender].sub(_amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[_recipient] = _balances[_recipient].add(_amount);\r\n        emit Transfer(_sender, _recipient, _amount);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public virtual returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), _allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address _account, uint256 _amount) internal virtual {\r\n        require(_account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[_account] = _balances[_account].add(_amount);\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n    \r\n    function _burn(address _account, uint256 _amount) internal virtual {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[_account] = _balances[_account].sub(_amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n    \r\n    function _approve(address _owner, address _spender, uint256 _amount) internal virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n    \r\n    function sendValue(address payable _recipient, uint256 _amount) internal {\r\n        require(address(this).balance >= _amount, \"Address: insufficient balance\");\r\n        (bool success, ) = _recipient.call{ value: _amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        return _balances[_account];\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n    \r\n    function _tokenRate(uint _sum) private view returns (uint) {\r\n        \r\n        uint ttlspl = _totalSupply;\r\n        uint oldContractBalance = address(this).balance.sub(_sum);\r\n        \r\n        if (oldContractBalance == 0 || ttlspl == 0) {\r\n            return 10**16;\r\n        }\r\n        \r\n        return oldContractBalance.mul(10**18).div(ttlspl);\r\n    }\r\n    \r\n    function tokenAmountForEther(uint _sum) private view returns (uint, uint) {\r\n        uint rate = _tokenRate(_sum);\r\n        uint result = _sum.mul(10**18).div(rate);\r\n        return (result, rate);\r\n    }\r\n    \r\n    function calcTokenRate() public view returns (uint) {\r\n        uint ttlspl = _totalSupply;\r\n        uint actualContractBalance = address(this).balance;\r\n        if (actualContractBalance == 0 || ttlspl == 0) {\r\n            return 10**16;\r\n        }\r\n        return actualContractBalance.mul(10**18).div(ttlspl);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regDate\",\"type\":\"uint256\"}],\"name\":\"GotPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"GotProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regDate\",\"type\":\"uint256\"}],\"name\":\"LostPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"LostProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"TokenRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_discountCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_discountFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_discountFirst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_discountTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_normalLevelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_userSponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usersCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"changeFounderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTime\",\"type\":\"uint256\"}],\"name\":\"changeLevelTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeNormalLevelPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_first\",\"type\":\"bool\"}],\"name\":\"createDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"createSuperUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRelations\",\"outputs\":[{\"internalType\":\"bool[21]\",\"name\":\"relations\",\"type\":\"bool[21]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address[21]\",\"name\":\"_sponsors\",\"type\":\"address[21]\"},{\"internalType\":\"uint256[21]\",\"name\":\"_levels\",\"type\":\"uint256[21]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CryptillionClub","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://580dcf8b4491b2ad1381a6967bd396d000f33a5fabcda38741ed4e5bed1471ba"}]}