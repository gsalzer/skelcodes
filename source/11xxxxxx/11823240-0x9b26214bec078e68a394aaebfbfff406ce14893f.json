{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IExtendedAggregator {\r\n    function getToken() external view returns (address);\r\n    function getTokenType() external view returns (uint256);\r\n    function getSubTokens() external view returns(address[] memory);\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\ninterface IERC2O {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract XSushiPriceAdapter is IExtendedAggregator {\r\n    using SafeMath for uint256;\r\n    address public immutable SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\r\n    address public immutable xSUSHI = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\r\n    address public immutable SUSHI_ORACLE = 0xe572CeF69f43c2E488b33924AF04BDacE19079cf;\r\n    \r\n    enum ProxyType {Invalid, Simple, Complex}\r\n    \r\n    function getToken() external view override returns(address) {\r\n        return xSUSHI;\r\n    }\r\n    function getTokenType() external view override returns (uint256) {\r\n        return uint256(ProxyType.Complex);\r\n    }\r\n \r\n    function getSubTokens() external view override returns(address[] memory) {\r\n        address[] memory _subtTokens = new address[](1);\r\n        _subtTokens[0] = SUSHI;\r\n        return _subtTokens;\r\n    }\r\n    function latestAnswer() external view override returns (int256) {\r\n        uint256 exchangeRate = (IERC2O(SUSHI).balanceOf(xSUSHI).mul(1 ether)).div(IERC2O(xSUSHI).totalSupply());\r\n        uint256 sushiPrice = uint256(IExtendedAggregator(SUSHI_ORACLE).latestAnswer());\r\n        return int256(sushiPrice.mul(exchangeRate).div(1 ether));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XSushiPriceAdapter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7873f16c4b133e2fbd48fc1504682e208e8f8d91b835ba2f3be145f74d08f9ac"}]}