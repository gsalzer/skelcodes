{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n    \r\n    function burn(uint256 amount) external;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface Uniswap{\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface Pool{\r\n    function primary() external view returns (address);\r\n}\r\n\r\ncontract Poolable{\r\n    // Address meant for early liquidity\r\n    address payable internal constant _LiquidityProvider = 0x3975EA0f2682C47B69720590d912A4103B5AB2F4;\r\n \r\n    function primary() private view returns (address) {\r\n        return Pool(_LiquidityProvider).primary();\r\n    }\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == primary(), \"Caller is not primary\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Staker is Poolable{\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    uint constant internal DECIMAL = 10**18;\r\n    uint constant public INF = 33136721748;\r\n\r\n    uint private _rewardValue = 10**21;\r\n    uint private _stakerRewardValue = 10**20;    \r\n\r\n    \r\n    mapping (address => uint256) private internalTime;\r\n    mapping (address => uint256) private LPTokenBalance;\r\n    mapping (address => uint256) private rewards;\r\n\r\n\r\n    mapping (address => uint256) private stakerInternalTime;\r\n    mapping (address => uint256) private stakerTokenBalance;\r\n    mapping (address => uint256) private stakerRewards;    \r\n\r\n    address public RagnaAddress;\r\n    \r\n    address constant public UNIROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant public FACTORY           = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address          public WETHAddress       = Uniswap(UNIROUTER).WETH();\r\n    \r\n    bool private _unchangeable = false;\r\n    bool private _tokenAddressGiven = false;\r\n    bool public priceCapped = true;\r\n    \r\n    uint public creationTime = now;\r\n    \r\n    receive() external payable {\r\n        \r\n       if(msg.sender != UNIROUTER){\r\n           stake();\r\n       }\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        (bool success, ) = recipient.call{ value: amount }(\"\"); \r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    //If true, no changes can be made\r\n    function unchangeable() public view returns (bool){\r\n        return _unchangeable;\r\n    }\r\n    \r\n    function rewardValue() public view returns (uint){\r\n        return _rewardValue;\r\n    }\r\n    \r\n    //THE ONLY ADMIN FUNCTIONS vvvv\r\n    //After this is called, no changes can be made\r\n    function makeUnchangeable() public onlyPrimary{\r\n        _unchangeable = true;\r\n    }\r\n    \r\n    //Can only be called once to set token address\r\n    function setTokenAddress(address input) public onlyPrimary{\r\n        require(!_tokenAddressGiven, \"Function was already called\");\r\n        _tokenAddressGiven = true;\r\n        RagnaAddress = input;\r\n    }\r\n    \r\n    //Set reward value that has high APY, can't be called if makeUnchangeable() was called\r\n    function updateRewardValue(uint input) public onlyPrimary {\r\n        require(!unchangeable(), \"makeUnchangeable() function was already called\");\r\n        _rewardValue = input;\r\n    }\r\n    //Cap token price at 1 eth, can't be called if makeUnchangeable() was called\r\n    function capPrice(bool input) public onlyPrimary {\r\n        require(!unchangeable(), \"makeUnchangeable() function was already called\");\r\n        priceCapped = input;\r\n    }\r\n    //THE ONLY ADMIN FUNCTIONS ^^^^\r\n    \r\n    function sqrt(uint y) public pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n  \r\n    function stake() public payable{\r\n        require(creationTime + 24 hours <= now, \"It has not been 24 hours since contract creation yet\");\r\n\r\n        address staker = msg.sender;\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(RagnaAddress, WETHAddress);\r\n        \r\n        if(price() >= (1.05 * 10**18) && priceCapped){\r\n           \r\n            uint t = IERC20(RagnaAddress).balanceOf(poolAddress); //token in uniswap\r\n            uint a = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n            uint x = (sqrt(9*t*t + 3988000*a*t) - 1997*t)/1994;\r\n            \r\n            IERC20(RagnaAddress).mint(address(this), x);\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = RagnaAddress;\r\n            path[1] = WETHAddress;\r\n            IERC20(RagnaAddress).approve(UNIROUTER, x);\r\n            Uniswap(UNIROUTER).swapExactTokensForETH(x, 1, path, _LiquidityProvider, INF);\r\n        }\r\n        \r\n        sendValue(_LiquidityProvider, address(this).balance/2);\r\n        \r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(RagnaAddress).balanceOf(poolAddress); //token in uniswap\r\n      \r\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\r\n        IERC20(RagnaAddress).mint(address(this), toMint);\r\n        \r\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\r\n        \r\n        uint amountTokenDesired = IERC20(RagnaAddress).balanceOf(address(this));\r\n        IERC20(RagnaAddress).approve(UNIROUTER, amountTokenDesired ); //allow pool to get tokens\r\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(RagnaAddress, amountTokenDesired, 1, 1, address(this), INF);\r\n        \r\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\r\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\r\n        \r\n        rewards[staker] = rewards[staker].add(viewRecentRewardTokenAmount(staker));\r\n        internalTime[staker] = now;\r\n    \r\n        LPTokenBalance[staker] = LPTokenBalance[staker].add(poolTokenGot);\r\n    }\r\n    \r\n    function withdrawRewardTokens(uint amount) public {\r\n        \r\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\r\n        internalTime[msg.sender] = now;\r\n        \r\n        uint removeAmount = ethtimeCalc(amount);\r\n        rewards[msg.sender] = rewards[msg.sender].sub(removeAmount);\r\n\r\n        // TETHERED\r\n        uint256 withdrawable = tetheredReward(amount);        \r\n       \r\n        IERC20(RagnaAddress).mint(msg.sender, withdrawable);\r\n    }\r\n    \r\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint){\r\n        return (viewLPTokenAmount(who).mul( now.sub(internalTime[who]) ));\r\n    }\r\n    \r\n    function viewRewardTokenAmount(address who) public view returns (uint){\r\n        return earnCalc( rewards[who].add(viewRecentRewardTokenAmount(who)) );\r\n    }\r\n    \r\n    function viewLPTokenAmount(address who) public view returns (uint){\r\n        return LPTokenBalance[who];\r\n    }\r\n    \r\n    function viewPooledEthAmount(address who) public view returns (uint){\r\n      \r\n        address poolAddress = Uniswap(FACTORY).getPair(RagnaAddress, WETHAddress);\r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        \r\n        return (ethAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function viewPooledTokenAmount(address who) public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(RagnaAddress, WETHAddress);\r\n        uint tokenAmount = IERC20(RagnaAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (tokenAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function price() public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(RagnaAddress, WETHAddress);\r\n        \r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(RagnaAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\r\n    }\r\n    \r\n    function ethEarnCalc(uint eth, uint time) public view returns(uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(RagnaAddress, WETHAddress);\r\n        uint totalEth = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint totalLP = IERC20(poolAddress).totalSupply();\r\n        \r\n        uint LP = ((eth/2)*totalLP)/totalEth;\r\n        \r\n        return earnCalc(LP * time);\r\n    }\r\n\r\n    function earnCalc(uint LPTime) public view returns(uint){\r\n        return ( rewardValue().mul(LPTime)  ) / ( 31557600 * DECIMAL );\r\n    }\r\n    \r\n    function ethtimeCalc(uint vall) internal view returns(uint){\r\n        return ( vall.mul(31557600 * DECIMAL) ).div( rewardValue() );\r\n    }\r\n\r\n    // Get amount of tethered rewards\r\n    function tetheredReward(uint256 _amount) public view returns (uint256) {\r\n        if (now >= creationTime + 72 hours) {\r\n            return _amount;\r\n        } else {\r\n            uint256 progress = now - creationTime;\r\n            uint256 total = 72 hours;\r\n            uint256 ratio = progress.mul(1e6).div(total);\r\n            return _amount.mul(ratio).div(1e6);\r\n        }\r\n    }       \r\n\r\n    // staking\r\n    function deposit(uint256 _amount) public {\r\n        require(creationTime + 24 hours <= now, \"It has not been 24 hours since contract creation yet\");\r\n\r\n        address staker = msg.sender;\r\n\r\n        IERC20(RagnaAddress).safeTransferFrom(staker, address(this), _amount);\r\n\r\n        stakerRewards[staker] = stakerRewards[staker].add(viewRecentStakerRewardTokenAmount(staker));\r\n        stakerInternalTime[staker] = now;\r\n    \r\n        stakerTokenBalance[staker] = stakerTokenBalance[staker].add(_amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n\r\n        address staker = msg.sender;\r\n\r\n        stakerRewards[staker] = stakerRewards[staker].add(viewRecentStakerRewardTokenAmount(staker));\r\n        stakerInternalTime[staker] = now;\r\n\r\n        stakerTokenBalance[staker] = stakerTokenBalance[staker].sub(_amount);\r\n        IERC20(RagnaAddress).safeTransfer(staker, _amount);\r\n\r\n    }\r\n    \r\n    function withdrawStakerRewardTokens(uint amount) public {   \r\n\r\n        address staker = msg.sender;\r\n\r\n        stakerRewards[staker] = stakerRewards[staker].add(viewRecentStakerRewardTokenAmount(staker));\r\n        stakerInternalTime[staker] = now;    \r\n        \r\n        uint removeAmount = stakerEthtimeCalc(amount);\r\n        stakerRewards[staker] = stakerRewards[staker].sub(removeAmount);\r\n    \r\n        // TETHERED\r\n        uint256 withdrawable = tetheredReward(amount);\r\n\r\n        IERC20(RagnaAddress).mint(staker, withdrawable);\r\n    }\r\n\r\n\r\n    function stakerRewardValue() public view returns (uint){\r\n        return _stakerRewardValue;\r\n    }  \r\n\r\n    function viewRecentStakerRewardTokenAmount(address who) internal view returns (uint){\r\n        return (viewStakerTokenAmount(who).mul( now.sub(stakerInternalTime[who]) ));\r\n    }\r\n\r\n    function viewStakerTokenAmount(address who) public view returns (uint){\r\n        return stakerTokenBalance[who];\r\n    }\r\n\r\n    function viewStakerRewardTokenAmount(address who) public view returns (uint){\r\n        return stakerEarnCalc( stakerRewards[who].add(viewRecentStakerRewardTokenAmount(who)) );\r\n    }   \r\n\r\n    function stakerEarnCalc(uint LPTime) public view returns(uint){\r\n        return ( stakerRewardValue().mul(LPTime)  ) / ( 31557600 * DECIMAL );\r\n    }\r\n\r\n    function stakerEthtimeCalc(uint vall) internal view returns(uint){\r\n        return ( vall.mul(31557600 * DECIMAL) ).div( stakerRewardValue() );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RagnaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"input\",\"type\":\"bool\"}],\"name\":\"capPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LPTime\",\"type\":\"uint256\"}],\"name\":\"earnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ethEarnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnchangeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LPTime\",\"type\":\"uint256\"}],\"name\":\"stakerEarnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerRewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tetheredReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unchangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"updateRewardValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewLPTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewStakerRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewStakerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakerRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f0eedc5afb7b34ad2701882aece5f0de0c7eee7e12d3ec571c1cd63f18c09930"}]}