{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/YieldFarming.sol\r\n\r\n// contracts/TokenExchange.sol\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//Import access control\r\n\r\n\r\n// Import base Initializable contract\r\n\r\n\r\n// Import the IERC20 interface and and SafeMath library\r\n\r\n\r\n\r\n\r\ncontract YieldFarming is OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    \r\n\r\n    // List of usable variables & structs\r\n    IERC20 public sqrl;\r\n    address public sqrlAddress;\r\n\r\n    \r\n    struct Plan {\r\n        address sourceToken;\r\n        uint256 tokenMultiplier; // actual multipler = tokenMultiplier / tokenMultiplierDivisor\r\n        uint256 tokenMultiplierDivisor; // actual multipler = tokenMultiplier / tokenMultiplierDivisor\r\n        uint256 multiplierCyclePeriod; // in seconds\r\n        uint256 multiplierMaxCycle; // maximum number of times\r\n        uint256 minimumTokensRequired;\r\n        address planAuthor;\r\n        bool planEnabled;\r\n    }\r\n\r\n    Plan[] public plans;\r\n\r\n    struct UserInfo {\r\n        uint256 _amount;\r\n        address _tokenType;\r\n        uint256 _timestamp;\r\n    }\r\n\r\n    uint256 lastRewardBalance;\r\n\r\n    mapping (address => mapping(uint256 => UserInfo)) public userInfo;\r\n    \r\n\r\n    //Emitters to log the events & actions\r\n    event ChangeByAddPlan(address planAuthor, uint256 planId);\r\n\r\n    event ChangeByUpdatePlan(address planAuthor, uint256 planId);\r\n\r\n    event StakeEvent(address indexed user, uint256 planId, uint256 amount);\r\n    \r\n    event UnstakeEvent(address indexed user, uint256 planId, uint256 amount);\r\n\r\n    event UnstakeRewardEvent(address indexed user, uint256 planId, uint256 rewardAmount);\r\n\r\n    event EmergencyWithdrawal(address user, uint256 amount);\r\n\r\n    event OverallRewardBalanceEvent(uint256 rewardBalance);\r\n\r\n    event RewardBalanceNow(uint256 rewardBalance);\r\n    \r\n\r\n    // Initializer function (replaces constructor)\r\n    function initialize(address _sqrlAddress, uint256 _lastRewardBalance) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        sqrl = IERC20(_sqrlAddress);\r\n        sqrlAddress = _sqrlAddress;\r\n        lastRewardBalance = _lastRewardBalance;\r\n    }\r\n\r\n    //\r\n    // 1. Plan creation: this section covers the creation of yield farming plans\r\n    // only the owner is allow to create and modify plans\r\n    //\r\n\r\n    //Add yield farming plans\r\n    function addPlan(address _sourceToken, uint256 _tokenMultiplier, uint256 _tokenMultiplierDivisor, uint256 _multiplierCyclePeriod, uint256 _multiplierMaxCycle, uint256 _minimumTokensRequired, bool _planEnabled) public onlyOwner returns(Plan[] memory) {\r\n        Plan storage _newPlan = plans.push();\r\n        _newPlan.sourceToken = _sourceToken;\r\n        _newPlan.tokenMultiplier = _tokenMultiplier;\r\n        _newPlan.tokenMultiplierDivisor = _tokenMultiplierDivisor;\r\n        _newPlan.multiplierCyclePeriod = _multiplierCyclePeriod;\r\n        _newPlan.multiplierMaxCycle = _multiplierMaxCycle;\r\n        _newPlan.minimumTokensRequired = _minimumTokensRequired;\r\n        _newPlan.planAuthor = msg.sender;\r\n        _newPlan.planEnabled = _planEnabled;\r\n\r\n        emit ChangeByAddPlan(msg.sender, plans.length - 1);\r\n        return plans;\r\n    }\r\n\r\n    //Yield farm add plan storage\r\n    function storageDisablePlan(uint256 _planId, Plan[] storage plansArray, bool _planEnableDisable) internal {\r\n        plansArray[_planId].planEnabled = _planEnableDisable;\r\n    }\r\n\r\n    //Disable yield farming plans\r\n    function switchPlan(uint256 _planId) public onlyOwner returns(Plan[] memory) {\r\n        \r\n        bool _planEnableDisable;\r\n\r\n        if (plans[_planId].planEnabled == true){\r\n            _planEnableDisable = false;\r\n        }else{\r\n            _planEnableDisable = true;\r\n        }\r\n\r\n        storageDisablePlan(_planId, plans, _planEnableDisable);\r\n\r\n        emit ChangeByUpdatePlan(msg.sender, _planId);\r\n\r\n        return plans;\r\n    }\r\n\r\n    //List yield farming plans\r\n    function getPlans() public view returns(Plan[] memory) {\r\n        return plans;\r\n    }\r\n\r\n    //\r\n    // 2. Staking mechanism: this section covers the staking mechanism that is open to the public.\r\n    // Contains stake() and unstake()\r\n    //\r\n    function stake(uint256 _planId, uint256 _stakeAmount) public {\r\n\r\n        address _tokenType = plans[_planId].sourceToken;\r\n\r\n        require(IERC20(_tokenType).balanceOf(msg.sender) > 0, \"Insufficient token balance.\");\r\n        require(_stakeAmount <= IERC20(_tokenType).balanceOf(msg.sender), \"You cannot stake more than what you own.\");\r\n        require(plans[_planId].planEnabled, \"This reward plan is disabled.\");\r\n        require(userInfo[msg.sender][_planId]._amount == 0, \"You have already staked in this reward plan.\");\r\n        require(plans[_planId].minimumTokensRequired <= IERC20(_tokenType).balanceOf(msg.sender), \"You do not have sufficient balance to stake.\");\r\n        require(plans[_planId].minimumTokensRequired <= _stakeAmount, \"You are not allowed to stake below the minimum token amount required to participate in this reward plan.\");\r\n\r\n        IERC20(_tokenType).transferFrom(msg.sender, address(this), _stakeAmount);\r\n        UserInfo storage user = userInfo[msg.sender][_planId];\r\n        user._amount = _stakeAmount;\r\n        user._tokenType = _tokenType;\r\n        user._timestamp = now;\r\n        \r\n\r\n        emit StakeEvent(msg.sender, _planId, _stakeAmount);\r\n    }\r\n\r\n    function unstake(uint256 _planId) public {\r\n\r\n        require(userInfo[msg.sender][_planId]._amount > 0, \"You have not yet staked for this plan.\");\r\n\r\n        uint256 _rewardAmount = calculateReward(_planId, userInfo[msg.sender][_planId]._amount, userInfo[msg.sender][_planId]._timestamp);\r\n        uint _stakedAmount = userInfo[msg.sender][_planId]._amount;\r\n\r\n        //Scenario 1: transfer reward & stake in one transaction if both are the same token\r\n        if(plans[_planId].sourceToken == sqrlAddress){\r\n            //Transfer SQRL reward\r\n            sqrl.transfer(msg.sender, _rewardAmount.add(_stakedAmount));\r\n            //Update overall reward balance\r\n            lastRewardBalance = lastRewardBalance.sub(_rewardAmount);\r\n        }\r\n        //Scenario 2: transfer reward & stake in 2 transactions if both are different tokens\r\n        else{\r\n            //Transfer SQRL reward\r\n            sqrl.transfer(msg.sender, _rewardAmount);\r\n            //Update overall reward balance\r\n            lastRewardBalance = lastRewardBalance.sub(_rewardAmount);\r\n\r\n            //Transfer original stake\r\n            IERC20(plans[_planId].sourceToken).transfer(msg.sender, _stakedAmount); \r\n        }\r\n\r\n        //Reset user's stake\r\n        userInfo[msg.sender][_planId]._amount = 0;\r\n        userInfo[msg.sender][_planId]._tokenType = 0x0000000000000000000000000000000000000000;        \r\n        userInfo[msg.sender][_planId]._timestamp = 0;\r\n\r\n        emit UnstakeEvent(msg.sender, _planId, _stakedAmount);\r\n        emit UnstakeRewardEvent(msg.sender, _planId, _rewardAmount);\r\n\r\n        emit OverallRewardBalanceEvent(lastRewardBalance);\r\n    }\r\n\r\n    function safeUnstakingTransfer(uint256 _intendedRewardAmount) internal view returns (uint256) {\r\n\r\n        uint256 _sqrlBalance = lastRewardBalance;\r\n\r\n        if(_intendedRewardAmount > _sqrlBalance){\r\n            return _sqrlBalance;\r\n        }else{\r\n            return _intendedRewardAmount;\r\n        }\r\n\r\n    }\r\n\r\n    function calculateReward(uint256 _planId, uint256 _stakeAmount, uint256 _stakedTime) internal view returns (uint256 ){\r\n\r\n        // IF( (time.now - stakedTime) / theMultiplierCyclePeriod < theMultiplierMaxCycle, (time.now - stakedTime) / theMultiplierCyclePeriod, theMultiplierMaxCycle) * theTokenMultiplier / 100 * stakeAmount\r\n        uint256 _TimeDifference = now.sub(_stakedTime);\r\n        uint256 _FinalCycle;\r\n        \r\n        if(_TimeDifference.div(plans[_planId].multiplierCyclePeriod) < plans[_planId].multiplierMaxCycle){\r\n            _FinalCycle = _TimeDifference.div(plans[_planId].multiplierCyclePeriod);\r\n        }else{\r\n            _FinalCycle = plans[_planId].multiplierMaxCycle;\r\n        }\r\n\r\n        // Compounding interest\r\n        uint256 _intendedRewardAmount = _stakeAmount;\r\n\r\n        for(uint i=0; i<_FinalCycle; i++){\r\n            _intendedRewardAmount = _intendedRewardAmount.mul(plans[_planId].tokenMultiplier).div(plans[_planId].tokenMultiplierDivisor);\r\n        }\r\n        //Return only reward component without the stake\r\n        _intendedRewardAmount = _intendedRewardAmount.sub(_stakeAmount);\r\n\r\n        return safeUnstakingTransfer(_intendedRewardAmount);\r\n    }\r\n\r\n    function getUserReward(uint256 _planId) public view returns (uint256) {\r\n        uint256 _rewardAmount = calculateReward(_planId, userInfo[msg.sender][_planId]._amount, userInfo[msg.sender][_planId]._timestamp);\r\n\r\n        return _rewardAmount;\r\n    }\r\n\r\n    function getUserStake(uint256 _planId) public view returns (uint256) {\r\n\r\n        return userInfo[msg.sender][_planId]._amount;\r\n    }\r\n\r\n    function getLastRewardBalance() public view returns (uint256) {\r\n\r\n        return lastRewardBalance;\r\n    }\r\n\r\n    //\r\n    // 3. Emergency withdrawal of SQRL should there be any issues with the contract code\r\n    //\r\n    //\r\n    function emergencyWithdrawal() public onlyOwner {\r\n        \r\n        uint256 sqrlBalance = lastRewardBalance;\r\n\r\n        sqrl.transfer(msg.sender, sqrlBalance);\r\n\r\n        lastRewardBalance = 0;\r\n\r\n        emit EmergencyWithdrawal(msg.sender, sqrlBalance);\r\n        emit RewardBalanceNow(lastRewardBalance);\r\n    }\r\n\r\n    //\r\n    // 4. Add to the reward balance\r\n    //\r\n    //\r\n    function addToRewardBalance(uint256 _additionalRewardAmount) public onlyOwner {\r\n\r\n        lastRewardBalance = lastRewardBalance + _additionalRewardAmount;\r\n\r\n        emit RewardBalanceNow(lastRewardBalance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"ChangeByAddPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"ChangeByUpdatePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"}],\"name\":\"OverallRewardBalanceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"}],\"name\":\"RewardBalanceNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeRewardEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMultiplierDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierCyclePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierMaxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_planEnabled\",\"type\":\"bool\"}],\"name\":\"addPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplierDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierCyclePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierMaxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"planEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct YieldFarming.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalRewardAmount\",\"type\":\"uint256\"}],\"name\":\"addToRewardBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplierDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierCyclePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierMaxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"planEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct YieldFarming.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sqrlAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardBalance\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplierDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierCyclePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierMaxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"planEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrl\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"switchPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplierDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierCyclePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierMaxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"planAuthor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"planEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct YieldFarming.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YieldFarming","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://98acd0ae4b162ac9631b7f4f7ee7272414b77516e6e32bf1df9d008b380d3a14"}]}