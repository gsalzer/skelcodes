{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n// ------------------------------------------------------------------------\r\n// Interface that the crowdsale uses (taken from token)\r\n// ------------------------------------------------------------------------\r\ncontract IERC20 {\r\n  function balanceOf(address who) view public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Math library\r\n// ------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract Ownable {\r\n  address payable internal _owner;\r\n  address payable internal _potentialNewOwner;\r\n \r\n  event OwnershipTransferred(address payable indexed from, address payable indexed to, uint date);\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    _potentialNewOwner = newOwner;\r\n  }\r\n  function acceptOwnership() external {\r\n    require(msg.sender == _potentialNewOwner);\r\n    emit OwnershipTransferred(_owner, _potentialNewOwner, now);\r\n    _owner = _potentialNewOwner;\r\n  }\r\n  function getOwner() view external returns(address){\r\n      return _owner;\r\n  }\r\n  function getPotentialNewOwner() view external returns(address){\r\n      return _potentialNewOwner;\r\n  }\r\n}\r\n\r\ncontract TimeAccessible {\r\n  uint256 internal _releaseTime;\r\n  \r\n  event AccessGranted(address by, uint date);\r\n\r\n  constructor(uint256 releaseTime) internal {\r\n      require(releaseTime > now, \"Release time needs to be greater than now\");\r\n      _releaseTime = releaseTime;\r\n  }\r\n  \r\n  function getReleaseTime() public view returns(uint256){\r\n      return _releaseTime;\r\n  }\r\n  \r\n  modifier timeDependantAccess() {\r\n      require(block.timestamp >= _releaseTime, \"Current time is before release time\");\r\n      emit AccessGranted(msg.sender, now);\r\n      _;\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Create recoverable tokens\r\n// ------------------------------------------------------------------------\r\ncontract RecoverableToken {\r\n  event RecoveredTokens(address token, address owner, uint256 tokens, uint time);\r\n  \r\n  function recoverAllTokens(IERC20 token, address recoverAddress) internal {\r\n    uint256 tokens = tokensToBeReturned(token);\r\n    require(token.transfer(recoverAddress, tokens) == true);\r\n    emit RecoveredTokens(address(token), recoverAddress,  tokens, now);\r\n  }\r\n  \r\n  function recoverTokens(IERC20 token, uint256 amount, address recoverAddress) internal {\r\n    require(token.transfer(recoverAddress, amount) == true);\r\n    emit RecoveredTokens(address(token), recoverAddress,  amount, now);\r\n  }\r\n  \r\n  function tokensToBeReturned(IERC20 token) public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Time-locked funds contract\r\n// ------------------------------------------------------------------------\r\ncontract TimelockedFunds is Ownable, TimeAccessible, RecoverableToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Withdraw(address indexed purchaser, address indexed beneficiary, uint256 amount, uint date);\r\n    \r\n    constructor (uint256 releaseTime) TimeAccessible(releaseTime) public {\r\n    }\r\n    \r\n    function withdraw(IERC20 tokenToWithdrawAmountFrom, uint256 amount, address recoverAddress) public onlyOwner timeDependantAccess{\r\n        require(block.timestamp >= _releaseTime, \"Current time is before release time\");\r\n        recoverTokens(tokenToWithdrawAmountFrom, amount, recoverAddress);\r\n    }\r\n    \r\n    function withdrawAll(IERC20 tokenToWithdrawAllFrom, address recoverAddress) public onlyOwner timeDependantAccess{\r\n        require(block.timestamp >= _releaseTime, \"Current time is before release time\");\r\n        recoverAllTokens(tokenToWithdrawAllFrom, recoverAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecoveredTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPotentialNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokensToBeReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToWithdrawAmountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recoverAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenToWithdrawAllFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoverAddress\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimelockedFunds","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000626dcd80","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d4d38f370227f587d5386690ec5f3d9697cb805a9307b26a97178eff20573ccf"}]}