{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// 13 February 2021\r\npragma solidity ^0.7.0;\r\n\r\n/// @notice An upgradable proxy that delegate calls to the underlying `implementation`\r\ncontract UpgradableProxy \r\n{\r\n    /// @notice The implementation to delegate call to\r\n    address public implementation;\r\n\r\n    constructor(address _implementation) {\r\n        implementation = _implementation;\r\n    }\r\n\r\n    /// @notice For any call to the contract (except for querying the `implementation` address) do a delegate\r\n    /// call.\r\n    fallback() external payable {\r\n        // CG: using this assembly instead of the delegate call of solidity allows us to return values in this \r\n        // fallback function.\r\n        assembly\r\n        {\r\n            let _target := sload(0)\r\n            calldatacopy(0x0, 0x0, calldatasize())\r\n            let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\r\n            returndatacopy(0x0, 0x0, returndatasize())\r\n            switch result case 0 {revert(0, returndatasize())} default {return (0, returndatasize())}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UpgradableProxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000c7b4cc2e99d621f2c477213f07128a9585c7d9c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61b192f583f94f30438d944e3c96f29f74e76ecc1fbbc161ea64ddc916cf734e"}]}