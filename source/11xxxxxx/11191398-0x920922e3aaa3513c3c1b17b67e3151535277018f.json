{"status":"1","message":"OK","result":[{"SourceCode":"// --------------------------------\r\n// Smart Contract for TwoXFinance\r\n// Developed by: Degen Giversâ„¢\r\n// \r\n// Twitter: https://twitter.com/TwoXFinance\r\n// Telegram: https://t.me/twox_finance\r\n// Website: https://twox.finance\r\n// Email: info@twox.finance\r\n// Medium: https://twoxfinance.medium.com/\r\n// \r\n// To be updated on our next projects, \r\n// join our telegram channel / group\r\n// Telegram Announcement Channel: https://t.me/degengiversann\r\n// Telegram Group: https://t.me/degengivers\r\n// --------------------------------\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract Context\r\n{\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) \r\n\t{\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) \r\n\t{\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context \r\n{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal \r\n\t{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) \r\n\t{\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() \r\n\t{\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) \r\n\t{\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner \r\n\t{\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner \r\n\t{\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal \r\n\t{\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// --------------------------------\r\n// Safe Math Library\r\n// Added ceiling function\r\n// --------------------------------\r\nlibrary SafeMath \r\n{\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\t\t\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\t\t\r\n        return c;\r\n    }\r\n\r\n\t// Gas Optimization\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        if (a == 0) \r\n\t\t{\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n\t{\r\n\t\tuint256 c = add(a,m);\r\n\t\tuint256 d = sub(c,1);\r\n\t\treturn mul(div(d,m),m);\r\n\t}\r\n}\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\t\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(string memory name, string memory symbol, uint8 decimals) public \r\n\t{\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) \r\n\t{\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) \r\n\t{\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) \r\n\t{\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// --------------------------------\r\n// Ensure enough gas\r\n// --------------------------------\r\ncontract GasPump \r\n{\r\n    bytes32 private stub;\r\n    uint256 private constant target = 10000;\r\n\r\n    modifier requestGas() \r\n\t{\r\n        if (tx.gasprice == 0 || gasleft() > block.gaslimit) \r\n\t\t{\r\n            _;\r\n            uint256 startgas = gasleft();\r\n            while (startgas - gasleft() < target) \r\n\t\t\t{\r\n                // Burn gas\r\n                stub = keccak256(abi.encodePacked(stub));\r\n            }\r\n        } \r\n\t\t\r\n\t\telse \r\n\t\t{\r\n            _;\r\n        }\r\n    }\r\n}\r\n\r\n// --------------------------------\r\n// TwoXFinance\r\n// --------------------------------\r\ncontract TwoXFinance is Context, Ownable, ERC20Detailed, GasPump \r\n{\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public whitelistFrom;\r\n    mapping(address => bool) public whitelistTo;\r\n\t\r\n\taddress devFeeWallet = 0x2473ca33581e24ec1232A7D77584aae0352AFc3C;\r\n\taddress deployerWallet = 0xed8e10b77a1a5C47BD19CC1Ecf27957D58A25E93;\r\n\taddress uniswapWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\t\r\n\t// Token Details\r\n\tstring constant tokenName = \"TwoXFinance\";\r\n\tstring constant tokenSymbol = \"TWOX\";\r\n\tuint8  constant tokenDecimals = 18;\r\n    uint256 private _totalSupply = 10000 * (10 ** 18);\r\n\tuint256 public basePercent = 100;\r\n\t\r\n    bytes32 private lastHash;\r\n\t\r\n\t// Events\r\n\tevent Normal(address indexed sender, address indexed recipient, uint256 value);\r\n    event User2x(address indexed sender, address indexed recipient, uint256 value);\r\n    event UserNo2x(address indexed sender, address indexed recipient, uint256 value);\r\n\t\r\n\tconstructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n\t{\r\n\t\t_mint(msg.sender, _totalSupply);\r\n\t}\r\n\r\n    function totalSupply() public view returns (uint256) \r\n\t{\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) \r\n\t{\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) \r\n\t{\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) \r\n\t{\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient,uint256 amount) public returns (bool) \r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender,\r\n\t\t_allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public \r\n\t{\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public \r\n\t{\r\n        _burnFrom(account, amount);\r\n    }\r\n\t\r\n\t// --------------------------------\r\n\t// 5% Burn Fee\r\n\t// --------------------------------\r\n\tfunction findBurnFee(uint256 value) public view returns (uint256)  \r\n\t{\r\n\t\tuint256 roundValue = value.ceil(basePercent);\r\n\t\tuint256 onePercent = roundValue.mul(basePercent).div(2000);\r\n\t\treturn onePercent;\r\n\t}\r\n\t\r\n\t// --------------------------------\r\n\t// 2% Dev Fee\r\n\t// -------------------------------- \r\n    function findDevFee(uint256 value) public view returns (uint256)  \r\n    {\r\n        uint256 roundValue = value.ceil(basePercent);\r\n        uint256 onePercent = roundValue.mul(basePercent).div(5000);\r\n        return onePercent;\r\n    }\r\n\t\r\n\t// --------------------------------\r\n\t// Win or Lose\r\n\t// 5% chance of 2x\r\n\t// --------------------------------\r\n\tfunction _winorlose() internal returns (uint256) \r\n\t{\r\n\t\tbytes32 result = keccak256(\r\n\t\tabi.encodePacked(block.number, lastHash, gasleft()));\r\n\t\tlastHash = result;\r\n\t\treturn uint256(result) % 20 == 0 ? 1 : 0;\r\n\t}\r\n\t\r\n    function _transfer(address sender, address recipient, uint256 amount) internal requestGas \r\n\t{\r\n\t\t// Checks that it's not the burn address\r\n        \r\n        require(amount <= _balances[sender]);\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t// Deployer Transaction (So that transactions made my deployer don't get affected)\r\n\t\tif (msg.sender == deployerWallet)\r\n        {\r\n            // Subtract from sender balance\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            \r\n            // Add to recipient balance\r\n\t\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\t\r\n\t\t\temit Normal(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\t\t\r\n\t\t// 2x Transaction\r\n\t\telse if (sender != uniswapWallet && _winorlose() == 1)\r\n\t\t{\t\r\n\t\t    // Subtract from sender balance\r\n\t\t\t_balances[sender] = _balances[sender].sub(amount);\r\n\t\t\t\r\n\t\t\t// Get 5% of transacted tokens\r\n\t\t\tuint256 tokensToBurn = findBurnFee(amount);\r\n\t\t    \r\n\t\t\t// Get 2% of transacted tokens\r\n\t\t\tuint256 tokensToDev = findDevFee(amount);\r\n\t\t\t\r\n\t\t\t// Get amount of transacted tokens\r\n\t\t\tuint256 tokens2x = (amount);\r\n\t\t\t\r\n\t\t\t// Mint transacted tokens to lucky user (so now user has 2x tokens)\r\n\t\t\t_mint(sender, tokens2x);\r\n\t\t\t\r\n\t\t\t// Transfer same amount - (burn tokens) - (dev tokens) but user now has 100% extra transacted tokens in their wallet\r\n\t\t\tuint256 tokensToTransfer = amount.sub(tokensToBurn).sub(tokensToDev);\r\n\t\t\t\r\n\t\t\t// Add to fee wallet\r\n\t\t\t_balances[devFeeWallet] = _balances[devFeeWallet].add(tokensToDev);\r\n\t\t\t\r\n\t\t\t// Add to recipient balance\r\n\t\t\t_balances[recipient] = _balances[recipient].add(tokensToTransfer);\r\n\r\n            // Subtract burned amount from supply\r\n\t\t\t_totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t\r\n\t\t\t// Add user's winning token amount to supply\r\n\t\t\t_totalSupply = _totalSupply.add(tokens2x);\r\n\t\t\t\r\n\t\t\t// Transaction Documentation Log\r\n\t\t\temit User2x(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, tokensToTransfer);\r\n\t\t\temit Transfer(address(0), recipient, tokens2x);\r\n\t\t\temit Transfer(sender, devFeeWallet, tokensToDev);\r\n\t\t\temit Transfer(sender, address(0), tokensToBurn);\r\n        }\r\n\r\n        // No 2x Transaction or Uniswap Wallet\r\n\t\telse\r\n\t\t{\r\n\t\t   \t// Subtract from sender balance\r\n\t\t\t_balances[sender] = _balances[sender].sub(amount);\r\n\t\t\t\r\n\t\t\t// Get 5% of transacted tokens\r\n\t\t\tuint256 tokensToBurn = findBurnFee(amount);\r\n\t\t    \r\n\t\t\t// Get 2% of transacted tokens\r\n\t\t\tuint256 tokensToDev = findDevFee(amount);\r\n\t\t\t\r\n\t\t\t// Transfer amount - 5% of transacted tokens(burn) - 2% of transacted tokens(dev fee)\r\n\t\t\tuint256 tokensToTransfer = amount.sub(tokensToBurn).sub(tokensToDev);\r\n\t\t\t\r\n\t\t\t// Add to fee wallet\r\n\t\t\t_balances[devFeeWallet] = _balances[devFeeWallet].add(tokensToDev);\r\n\t\t\t\r\n\t\t\t// Add to recipient balance\r\n\t\t\t_balances[recipient] = _balances[recipient].add(tokensToTransfer);\r\n\r\n            // Subtract burned amount from supply\r\n\t\t\t_totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t\r\n\t\t\t// Transaction Documentation Log\r\n\t\t\temit UserNo2x(sender, recipient, amount);\r\n\t\t\temit Transfer(sender, recipient, tokensToTransfer);\r\n\t\t\temit Transfer(sender, devFeeWallet, tokensToDev);\r\n\t\t\temit Transfer(sender, address(0), tokensToBurn);\r\n\t\t}\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal \r\n\t{\t\r\n\t\trequire(amount != 0);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal \r\n\t{\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal \r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal \r\n\t{\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Normal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"User2x\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UserNo2x\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TwoXFinance","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fbfb09b9d9be2b090150f4222cf04e0f7671a7b534ddb9f3ee548046205cc7ef"}]}