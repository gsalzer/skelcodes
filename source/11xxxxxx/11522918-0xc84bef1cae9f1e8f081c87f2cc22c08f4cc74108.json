{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/5/TokenPermissionConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./interfaces/ITokenPermission.sol\\\";\\n\\ncontract TokenPermissionConfig is ITokenPermission, Ownable {\\n    address refuelTokenPermission;\\n    address terminateTokenPermission;\\n    uint256 refuelTokenAmount;\\n    uint256 terminateTokenAmount;\\n    constructor(\\n        address _refuelTokenPermission,\\n        address _terminateTokenPermission,\\n        uint256 _refuelTokenAmount,\\n        uint256 _terminateTokenAmount\\n    ) public {\\n        setParams(_refuelTokenPermission, _terminateTokenPermission, _refuelTokenAmount, _terminateTokenAmount);\\n    }\\n\\n    function setParams(\\n        address _refuelTokenPermission,\\n        address _terminateTokenPermission,\\n        uint256 _refuelTokenAmount,\\n        uint256 _terminateTokenAmount\\n    ) public onlyOwner {\\n        refuelTokenPermission = _refuelTokenPermission;\\n        terminateTokenPermission = _terminateTokenPermission;\\n        refuelTokenAmount = _refuelTokenAmount;\\n        terminateTokenAmount = _terminateTokenAmount;\\n    }\\n\\n    function getRefuelTokenPermission() external view returns (address) {\\n        return refuelTokenPermission;\\n    }\\n\\n    function getRefuelTokenAmount() external view returns (uint256) {\\n        return refuelTokenAmount;\\n    }\\n\\n    function getTerminateTokenPermission() external view returns (address) {\\n        return terminateTokenPermission;\\n    }\\n\\n    function getTerminateTokenAmount() external view returns (uint256) {\\n        return terminateTokenAmount;\\n    }\\n}\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/5/interfaces/ITokenPermission.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface ITokenPermission {\\n    function getRefuelTokenPermission() external view returns (address);\\n    function getRefuelTokenAmount() external view returns (uint256);\\n    function getTerminateTokenPermission() external view returns (address);\\n    function getTerminateTokenAmount() external view returns (uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refuelTokenPermission\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_terminateTokenPermission\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refuelTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefuelTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefuelTokenPermission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTerminateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTerminateTokenPermission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refuelTokenPermission\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_terminateTokenPermission\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refuelTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenPermissionConfig","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ec7b95ba343224a9ed1eee230912055dcd7081ca000000000000000000000000ec7b95ba343224a9ed1eee230912055dcd7081ca0000000000000000000000000000000000000000000000042c96f4095914000000000000000000000000000000000000000000000000002a1f0a87470e840000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}