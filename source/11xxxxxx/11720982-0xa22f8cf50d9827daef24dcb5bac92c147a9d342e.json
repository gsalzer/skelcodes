{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.16;\n\n\ninterface IFlashLoanV1Factory {\n    event PoolCreated(address indexed token, address pool, uint);\n\n    function feeInBips() external view returns (uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPool(address token) external view returns (address pool);\n    function allPools(uint) external view returns (address pool);\n    function allPoolsLength() external view returns (uint);\n\n    function createPool(address token) external returns (address pool);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IFlashLoanV1Pool {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount);\n    event Burn(address indexed sender, uint amount, address indexed to);\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint amount,\n        uint premium\n    );\n    event Sync(uint reserve);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token() external view returns (address);\n    function reserve() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount);\n    function flashLoan(address target, uint amount, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address) external;\n}\n\ninterface IFlashLoanV1ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\ncontract FlashLoanV1ERC20 is IFlashLoanV1ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = 'Deer FlashLoan V1';\n    string public constant symbol = 'DEER-V1';\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, 'FlashLoanV1: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'FlashLoanV1: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IFlashLoanReceiver {\n  function executeOperation(\n    address asset,\n    uint amount,\n    uint premium,\n    address initiator,\n    bytes calldata params\n  ) external returns (bool);\n}\n\ncontract FlashLoanV1Pool is IFlashLoanV1Pool, FlashLoanV1ERC20 {\n    using SafeMath  for uint;\n\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public factory;\n    address public token;\n\n    uint public reserve; // uses single storage slot, accessible via getReserves\n\n    uint public kLast; // reserve, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'FlashLoanV1: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function _safeTransfer(address _token, address to, uint value) private {\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FlashLoanV1: TRANSFER_FAILED');\n    }\n\n    event Mint(address indexed sender, uint amount);\n    event Burn(address indexed sender, uint amount, address indexed to);\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint amount,\n        uint premium\n    );\n    event Sync(uint reserve);\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token) external {\n        require(msg.sender == factory, 'FlashLoanV1: FORBIDDEN'); // sufficient check\n        token = _token;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance) private {\n        require(balance <= uint112(-1), 'FlashLoanV1: OVERFLOW');\n        reserve = balance;\n        emit Sync(reserve);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth\n    function _mintFee(uint k) private returns (bool feeOn) {\n        address feeTo = IFlashLoanV1Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                if (k > _kLast) {\n                    uint numerator = totalSupply.mul(k.sub(_kLast));\n                    uint denominator = k.mul(5).add(_kLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        uint _reserve = reserve; // gas savings\n        uint balance = IERC20(token).balanceOf(address(this));\n        uint amount = balance.sub(_reserve);\n\n        bool feeOn = _mintFee(_reserve);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = amount.sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = amount.mul(_totalSupply) / reserve;\n        }\n        require(liquidity > 0, 'FlashLoanV1: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance);\n        if (feeOn) kLast = reserve; // reserve is up-to-date\n        emit Mint(msg.sender, amount);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint amount) {\n        uint _reserve = reserve; // gas savings\n        address _token = token; // gas savings\n        uint balance = IERC20(_token).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount = liquidity.mul(balance) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount > 0, 'FlashLoanV1: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token, to, amount);\n        balance = IERC20(_token).balanceOf(address(this));\n\n        _update(balance);\n        if (feeOn) kLast = reserve; // reserve is up-to-date\n        emit Burn(msg.sender, amount, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function flashLoan(address target, uint amount, bytes calldata data) external lock {\n        address _token = token; // gas savings\n        require(amount > 0, 'FlashLoanV1: INSUFFICIENT_LIQUIDITY_TO_BORROW');\n\n        uint balanceBefore = IERC20(_token).balanceOf(address(this));\n        require(balanceBefore >= amount, 'FlashLoanV1: INSUFFICIENT_LIQUIDITY_TO_BORROW');\n\n        uint feeInBips = IFlashLoanV1Factory(factory).feeInBips();\n        uint amountFee = amount.mul(feeInBips) / 10000;\n        require(amountFee > 0, 'FlashLoanV1: AMOUNT_TOO_SMALL');\n\n        _safeTransfer(_token, target, amount);\n\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(target);\n        receiver.executeOperation(_token, amount, amountFee, msg.sender, data);\n\n        uint balanceAfter = IERC20(_token).balanceOf(address(this));\n        require(balanceAfter == balanceBefore.add(amountFee), 'FlashLoanV1: AMOUNT_INCONSISTENT');\n\n        _update(balanceAfter);\n        emit FlashLoan(target, msg.sender, _token, amount, amountFee);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token = token; // gas savings\n        _safeTransfer(_token, to, IERC20(_token).balanceOf(address(this)).sub(reserve));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token).balanceOf(address(this)));\n    }\n}\n\ncontract FlashLoanV1Factory is IFlashLoanV1Factory {\n    uint public feeInBips = 5;\n    address public feeTo;\n    address public feeToSetter;\n\n    mapping(address => address) public getPool;\n    address[] public allPools;\n\n    event PoolCreated(address indexed token, address pool, uint);\n\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPoolsLength() external view returns (uint) {\n        return allPools.length;\n    }\n\n    function createPool(address token) external returns (address pool) {\n        require(token != address(0), 'FlashLoanV1: ZERO_ADDRESS');\n        require(getPool[token] == address(0), 'FlashLoanV1: POOL_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(FlashLoanV1Pool).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token));\n        assembly {\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IFlashLoanV1Pool(pool).initialize(token);\n        getPool[token] = pool;\n        allPools.push(pool);\n        emit PoolCreated(token, pool, allPools.length);\n    }\n\n    function setFeeInBips(uint _feeInBips) external {\n        require(msg.sender == feeToSetter, 'FlashLoanV1: FORBIDDEN');\n        require(_feeInBips > 0 && _feeInBips < 100, 'FlashLoanV1: INVALID_VALUE');\n        feeInBips = _feeInBips;\n    }\n\n    function setFeeTo(address _feeTo) external {\n        require(msg.sender == feeToSetter, 'FlashLoanV1: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external {\n        require(msg.sender == feeToSetter, 'FlashLoanV1: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInBips\",\"type\":\"uint256\"}],\"name\":\"setFeeInBips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlashLoanV1Factory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000fbf3f9067b602126db5879ff7e6a66d391c69dfd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}