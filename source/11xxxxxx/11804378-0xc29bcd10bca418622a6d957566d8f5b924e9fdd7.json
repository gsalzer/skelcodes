{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n\r\n    modifier onlyOneBlock() {\r\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\r\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\r\n\r\n        _;\r\n\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n\r\ninterface IBondMarket {\r\n    function bondSupply() external view returns (uint256);\r\n\r\n    function isDebtPhase() external view returns (bool);\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function nextEpochLength() external view returns (uint256);\r\n\r\n    function issueNewBond(uint256 _issuedBond) external;\r\n\r\n    function buyCoupons(uint256 _amount, uint256 _targetPrice) external;\r\n\r\n    function redeemCoupons(\r\n        uint256 _epoch,\r\n        uint256 _amount,\r\n        uint256 _targetPrice\r\n    ) external;\r\n}\r\n\r\ninterface IEpochController {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function nextEpochLength() external view returns (uint256);\r\n\r\n    function nextEpochAllocatedReward(address _pool) external view returns (uint256);\r\n}\r\n\r\ninterface ITreasury is IEpochController {\r\n    function dollarPriceOne() external view returns (uint256);\r\n\r\n    function dollarPriceCeiling() external view returns (uint256);\r\n}\r\n\r\ninterface IDollar {\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IOracle {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function updateCumulative() external;\r\n\r\n    function update() external;\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function consultDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _dollarPrice);\r\n\r\n    function twap(uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function twapDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _amountOut);\r\n}\r\n\r\ncontract BondMarket is ContractGuard, IBondMarket {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n\r\n    // core components\r\n    address public dollar = address(0x3479B0ACF875405D7853f44142FE06470a40f6CC);\r\n    address public treasury = address(0x71535ad4C7C5925382CdEadC806371cc89A5085D);\r\n\r\n    // oracle\r\n    address public dollarOracle = address(0xa2D385185Bbd96f4794AE3504aeaa7825827A297);\r\n    uint256 public constant dollarPriceOne = 1e18;\r\n    address public sideToken = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH\r\n\r\n    // coupon info\r\n    uint256 public couponSupply;\r\n    uint256 public couponIssued;\r\n    uint256 public couponClaimed;\r\n\r\n    // coupon purchase & redeem\r\n    uint256 public discountPercent; // when purchasing coupon\r\n    uint256 public maxDiscountRate;\r\n    uint256 public premiumPercent; // when redeeming coupon\r\n    uint256 public maxPremiumRate;\r\n    uint256 public maxRedeemableCouponPercentPerEpoch;\r\n    mapping(address => mapping(uint256 => uint256)) public purchasedCoupons; // user -> epoch -> purchased coupons\r\n    mapping(address => uint256[]) public purchasedEpochs; // user -> array of purchasing epochs\r\n    mapping(uint256 => uint256) public redemptedCoupons; // epoch -> redempted coupons\r\n\r\n    /* =================== Added variables (need to keep orders for proxy to work) =================== */\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    uint256 public lpPoolIncentiveRate;\r\n    uint256 public expiredCouponEpochs;\r\n\r\n    /* =================== Events =================== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event IssueNewCoupon(uint256 timestamp, uint256 amount);\r\n    event BoughtCoupons(address indexed from, uint256 epoch, uint256 dollarAmount, uint256 bondAmount);\r\n    event RedeemedCoupons(address indexed from, uint256 epoch, uint256 redeemedEpoch, uint256 dollarAmount, uint256 bondAmount);\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"CouponMarket: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTreasury() {\r\n        require(treasury == msg.sender || operator == msg.sender, \"CouponMarket: caller is not a treasury nor operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized {\r\n        require(!initialized, \"CouponMarket: already initialized\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // flags\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // epoch\r\n    function epoch() public view override returns (uint256) {\r\n        return ITreasury(treasury).epoch();\r\n    }\r\n\r\n    function nextEpochPoint() public view override returns (uint256) {\r\n        return ITreasury(treasury).nextEpochPoint();\r\n    }\r\n\r\n    function nextEpochLength() public view override returns (uint256) {\r\n        return ITreasury(treasury).nextEpochLength();\r\n    }\r\n\r\n    // oracle\r\n    function getDollarPrice() public view returns (uint256 _dollarPrice) {\r\n        try IOracle(dollarOracle).consultDollarPrice(sideToken, 1e18) returns (uint256 price) {\r\n            return price;\r\n        } catch {\r\n            revert(\"CouponMarket: failed to consult dollar price from the oracle\");\r\n        }\r\n    }\r\n\r\n    function getDollarUpdatedPrice() public view returns (uint256 _dollarPrice) {\r\n        try IOracle(dollarOracle).twapDollarPrice(sideToken, 1e18) returns (uint256 price) {\r\n            return price;\r\n        } catch {\r\n            revert(\"CouponMarket: failed to get TWAP dollar price from the oracle\");\r\n        }\r\n    }\r\n\r\n    function isDebtPhase() public view override returns (bool) {\r\n        return getDollarUpdatedPrice() < dollarPriceOne;\r\n    }\r\n\r\n    function bondSupply() public view override returns (uint256) {\r\n        return couponSupply;\r\n    }\r\n\r\n    function getCouponDiscountRate() public view returns (uint256 _rate) {\r\n        uint256 _dollarPrice = getDollarUpdatedPrice();\r\n        if (_dollarPrice < dollarPriceOne) {\r\n            if (discountPercent == 0) {\r\n                // no discount\r\n                _rate = dollarPriceOne;\r\n            } else {\r\n                uint256 _couponAmount = dollarPriceOne.mul(1e18).div(_dollarPrice); // to burn 1 dollar\r\n                uint256 _discountAmount = _couponAmount.sub(dollarPriceOne).mul(discountPercent).div(10000);\r\n                _rate = dollarPriceOne.add(_discountAmount);\r\n                uint256 _maxDiscountRate = maxDiscountRate;\r\n                if (_maxDiscountRate > 0 && _rate > _maxDiscountRate) {\r\n                    _rate = _maxDiscountRate;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCouponPremiumRate() public view returns (uint256 _rate) {\r\n        uint256 _dollarPrice = getDollarUpdatedPrice();\r\n        if (_dollarPrice >= dollarPriceOne) {\r\n            if (premiumPercent == 0) {\r\n                // no premium bonus\r\n                _rate = dollarPriceOne;\r\n            } else {\r\n                uint256 _premiumAmount = _dollarPrice.sub(dollarPriceOne).mul(premiumPercent).div(10000);\r\n                _rate = dollarPriceOne.add(_premiumAmount);\r\n                uint256 _maxPremiumRate = maxPremiumRate;\r\n                if (_maxPremiumRate > 0 && _rate > _maxPremiumRate) {\r\n                    _rate = _maxPremiumRate;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBurnableDollarLeft() public view returns (uint256 _burnableDollarLeft) {\r\n        uint256 _dollarPrice = getDollarPrice();\r\n        if (_dollarPrice < dollarPriceOne) {\r\n            _burnableDollarLeft = couponSupply.mul(1e18).div(getCouponDiscountRate());\r\n        }\r\n    }\r\n\r\n    function getRedeemableCoupons() public view returns (uint256 _redeemableCoupons) {\r\n        uint256 _dollarPrice = getDollarPrice();\r\n        if (_dollarPrice >= dollarPriceOne) {\r\n            uint256 _epoch = epoch();\r\n            uint256 _maxRedeemableCoupons = IERC20(dollar).totalSupply().mul(maxRedeemableCouponPercentPerEpoch).div(10000);\r\n            uint256 _redemptedCoupons = redemptedCoupons[_epoch];\r\n            _redeemableCoupons = (_maxRedeemableCoupons <= _redemptedCoupons) ? 0 : _maxRedeemableCoupons.sub(_redemptedCoupons);\r\n        }\r\n    }\r\n\r\n    function getPurchasedCouponHistory(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _length,\r\n            uint256[] memory _epochs,\r\n            uint256[] memory _amounts\r\n        )\r\n    {\r\n        uint256 _purchasedEpochLength = purchasedEpochs[_account].length;\r\n        _epochs = new uint256[](_purchasedEpochLength);\r\n        _amounts = new uint256[](_purchasedEpochLength);\r\n        for (uint256 _index = 0; _index < _purchasedEpochLength; _index++) {\r\n            uint256 _ep = purchasedEpochs[_account][_index];\r\n            uint256 _amt = purchasedCoupons[_account][_ep];\r\n            if (_amt > 0) {\r\n                _epochs[_length] = _ep;\r\n                _amounts[_length] = _amt;\r\n                ++_length;\r\n            }\r\n        }\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _account) external view returns (uint256) {\r\n        return _balances[_account];\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        address _dollar,\r\n        address _treasury,\r\n        address _dollarOracle\r\n    ) public notInitialized {\r\n        dollar = _dollar;\r\n        treasury = _treasury;\r\n        dollarOracle = _dollarOracle;\r\n\r\n        sideToken = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n        couponSupply = 0;\r\n        couponIssued = 0;\r\n        couponClaimed = 0;\r\n\r\n        maxDiscountRate = 130e16; // upto 130%\r\n        maxPremiumRate = 130e16; // upto 130%\r\n\r\n        discountPercent = 3000; // 30%\r\n        premiumPercent = 3000; // 30%\r\n\r\n        maxRedeemableCouponPercentPerEpoch = 300; // 3% redeemable each epoch\r\n\r\n        initialized = true;\r\n        operator = msg.sender;\r\n\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setDollarOracle(address _dollarOracle) external onlyOperator {\r\n        dollarOracle = _dollarOracle;\r\n    }\r\n\r\n    function setSideToken(address _sideToken) external onlyOperator {\r\n        sideToken = _sideToken;\r\n    }\r\n\r\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\r\n        maxDiscountRate = _maxDiscountRate;\r\n    }\r\n\r\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\r\n        maxPremiumRate = _maxPremiumRate;\r\n    }\r\n\r\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\r\n        require(_discountPercent <= 20000, \"over 200%\");\r\n        discountPercent = _discountPercent;\r\n    }\r\n\r\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\r\n        require(_premiumPercent <= 20000, \"over 200%\");\r\n        premiumPercent = _premiumPercent;\r\n    }\r\n\r\n    function setMaxRedeemableCouponPercentPerEpoch(uint256 _maxRedeemableCouponPercentPerEpoch) external onlyOperator {\r\n        require(_maxRedeemableCouponPercentPerEpoch <= 10000, \"over 100%\");\r\n        maxRedeemableCouponPercentPerEpoch = _maxRedeemableCouponPercentPerEpoch;\r\n    }\r\n\r\n    function setLpPoolIncentiveRate(uint256 _lpPoolIncentiveRate) external onlyOperator {\r\n        require(_lpPoolIncentiveRate <= 2000, \"over 20%\");\r\n        lpPoolIncentiveRate = _lpPoolIncentiveRate;\r\n    }\r\n\r\n    function setExpiredCouponEpochs(uint256 _expiredCouponEpochs) external onlyOperator {\r\n        require(_expiredCouponEpochs >= 180, \"too short\"); // >= 180 epochs\r\n        expiredCouponEpochs = _expiredCouponEpochs;\r\n    }\r\n\r\n    // Manual add balances for display only\r\n    function manuallyBalanceAdd(address _account, uint256 _amount) external onlyOperator {\r\n        _balances[_account] = _balances[_account].add(_amount);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n\r\n    function _updateDollarPrice() internal {\r\n        try IOracle(dollarOracle).update() {} catch {}\r\n    }\r\n\r\n    function _updateDollarPriceCumulative() internal {\r\n        try IOracle(dollarOracle).updateCumulative() {} catch {}\r\n    }\r\n\r\n    function issueNewBond(uint256 _issuedBond) external override onlyTreasury {\r\n        couponSupply = couponSupply.add(_issuedBond);\r\n    }\r\n\r\n    function buyCoupons(uint256 _dollarAmount, uint256 _targetPrice) external override onlyOneBlock {\r\n        require(_dollarAmount > 0, \"BondMarket: cannot purchase coupons with zero amount\");\r\n\r\n        uint256 _dollarPrice = getDollarUpdatedPrice();\r\n        require(_dollarPrice == _targetPrice, \"BondMarket: dollar price moved\");\r\n        require(\r\n            _dollarPrice < dollarPriceOne, // price < $1\r\n            \"BondMarket: dollarPrice not eligible for coupon purchase\"\r\n        );\r\n\r\n        uint256 _burnableDollarLeft = getBurnableDollarLeft();\r\n        require(_dollarAmount <= _burnableDollarLeft, \"BondMarket: not enough coupon left to purchase\");\r\n\r\n        uint256 _rate = getCouponDiscountRate();\r\n        require(_rate > 0, \"BondMarket: invalid coupon rate\");\r\n\r\n        uint256 _couponAmount = _dollarAmount.mul(_rate).div(1e18);\r\n        couponSupply = couponSupply.sub(_couponAmount);\r\n        couponIssued = couponIssued.add(_couponAmount);\r\n\r\n        uint256 _epoch = epoch();\r\n        address _dollar = dollar;\r\n        IDollar(_dollar).burnFrom(msg.sender, _dollarAmount);\r\n        purchasedCoupons[msg.sender][_epoch] = purchasedCoupons[msg.sender][_epoch].add(_couponAmount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(_couponAmount);\r\n        _totalSupply = _totalSupply.add(_couponAmount);\r\n\r\n        if (lpPoolIncentiveRate > 0) {\r\n            uint256 _lpPoolIncentive = (_dollarAmount * lpPoolIncentiveRate) / 10000;\r\n            IDollar(_dollar).mint(treasury, _lpPoolIncentive);\r\n        }\r\n\r\n        uint256 _purchasedEpochLength = purchasedEpochs[msg.sender].length;\r\n        if (_purchasedEpochLength == 0 || purchasedEpochs[msg.sender][_purchasedEpochLength - 1] < _epoch) {\r\n            purchasedEpochs[msg.sender].push(_epoch);\r\n        }\r\n\r\n        _updateDollarPriceCumulative();\r\n\r\n        emit BoughtCoupons(msg.sender, _epoch, _dollarAmount, purchasedCoupons[msg.sender][_epoch]);\r\n    }\r\n\r\n    function redeemCoupons(\r\n        uint256 _epoch,\r\n        uint256 _couponAmount,\r\n        uint256 _targetPrice\r\n    ) external override onlyOneBlock {\r\n        require(_couponAmount > 0, \"BondMarket: cannot redeem coupons with zero amount\");\r\n\r\n        uint256 _currentEpoch = epoch();\r\n        uint256 _expiredCouponEpochs = expiredCouponEpochs;\r\n        if (_expiredCouponEpochs > 0) {\r\n            require(_epoch.add(_expiredCouponEpochs) >= _currentEpoch, \"BondMarket: coupons expired\");\r\n        }\r\n\r\n        uint256 _dollarPrice = getDollarUpdatedPrice();\r\n        require(_dollarPrice == _targetPrice, \"BondMarket: dollar price moved\");\r\n        require(\r\n            _dollarPrice >= dollarPriceOne, // price >= $1\r\n            \"BondMarket: dollarPrice not eligible for coupon purchase\"\r\n        );\r\n\r\n        uint256 _redeemableCoupons = getRedeemableCoupons();\r\n        require(_couponAmount <= _redeemableCoupons, \"BondMarket: not enough coupon available to redeem\");\r\n\r\n        uint256 _rate = getCouponPremiumRate();\r\n        require(_rate > 0, \"BondMarket: invalid coupon rate\");\r\n\r\n        uint256 _dollarAmount = _couponAmount.mul(_rate).div(1e18);\r\n        IDollar(dollar).mint(msg.sender, _dollarAmount);\r\n        purchasedCoupons[msg.sender][_epoch] = purchasedCoupons[msg.sender][_epoch].sub(_couponAmount, \"over redeem\");\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_couponAmount);\r\n        _totalSupply = _totalSupply.sub(_couponAmount);\r\n        couponClaimed = couponClaimed.add(_couponAmount);\r\n\r\n        redemptedCoupons[_currentEpoch] = redemptedCoupons[_currentEpoch].add(_couponAmount);\r\n\r\n        _updateDollarPriceCumulative();\r\n\r\n        emit RedeemedCoupons(msg.sender, _currentEpoch, _epoch, _dollarAmount, _couponAmount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtCoupons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssueNewCoupon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedCoupons\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredCouponEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableDollarLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableDollarLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCouponDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCouponPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDollarUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPurchasedCouponHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableCoupons\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dollarOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebtPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuedBond\",\"type\":\"uint256\"}],\"name\":\"issueNewBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolIncentiveRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manuallyBalanceAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeemableCouponPercentPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasedCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasedEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_couponAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redemptedCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollarOracle\",\"type\":\"address\"}],\"name\":\"setDollarOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiredCouponEpochs\",\"type\":\"uint256\"}],\"name\":\"setExpiredCouponEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpPoolIncentiveRate\",\"type\":\"uint256\"}],\"name\":\"setLpPoolIncentiveRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRedeemableCouponPercentPerEpoch\",\"type\":\"uint256\"}],\"name\":\"setMaxRedeemableCouponPercentPerEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"}],\"name\":\"setSideToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BondMarket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b6cc88c27302bd82186b860bccbe922dd7d7eb9a7fce4ca361bd794a4ec23961"}]}