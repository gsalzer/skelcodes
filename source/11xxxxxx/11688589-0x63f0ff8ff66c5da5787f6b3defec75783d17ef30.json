{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity <=0.6.2;\r\n\r\ninterface ILeviathan {\r\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n}\r\n\r\ninterface IRelease {\r\n    function release(uint ID) external;\r\n}\r\n\r\ninterface IWLEV {\r\n    function checkClaim(uint ID) external view returns (uint256);\r\n    function wrap(uint256[] calldata _leviathansToWrap) external;\r\n    function unwrap(uint256 _amount) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n}\r\ncontract WLEVClaimTask {\r\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\r\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\r\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\r\n\r\n    // index of the next index, if equal or greater than the length of the total number of NFTs held by the WLEV contract, reset back to 0\r\n    uint public NFTIndex;\r\n\r\n    function check(uint _requirement)\r\n    external view returns (uint256) {\r\n        uint index = NFTIndex;\r\n\r\n        // array of NFT IDs owned by the WLEV contract\r\n        uint[] memory tokensOwned = ILeviathan(_leviathan).tokensOfOwner(_wlev);\r\n    \r\n        // if the index is greater than or equal the length of the array of NFT IDs returned, reset the index back to 0\r\n        if(index >= tokensOwned.length)\r\n            index = 0;\r\n        \r\n        // the ID of the NFT we want to check\r\n        uint NFTID = tokensOwned[index];\r\n\r\n        uint totalClaim = IWLEV(_wlev).checkClaim(NFTID);\r\n\r\n        if(totalClaim >= _requirement)\r\n            return 0;\r\n        else\r\n            return _requirement - totalClaim;\r\n    }\r\n\r\n    function execute()\r\n    external {\r\n        // array of NFT IDs owned by the WLEV contract\r\n        uint[] memory tokensOwned = ILeviathan(_leviathan).tokensOfOwner(_wlev);\r\n\r\n        // if the index is greater than or equal the length of the array of NFT IDs returned, reset the index back to 0\r\n        if(NFTIndex >= tokensOwned.length)\r\n            NFTIndex = 0;\r\n\r\n        // the ID of the NFT we want to check\r\n        uint NFTID = tokensOwned[NFTIndex];\r\n\r\n        IRelease(_claim).release(NFTID);\r\n\r\n        NFTIndex++;\r\n    }\r\n}\r\n\r\ncontract WLEVForwarderTask {\r\n    address private constant _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\r\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\r\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\r\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\r\n\r\n    constructor()\r\n    public {\r\n        ILeviathan(_leviathan).setApprovalForAll(_wlev, true);\r\n    }\r\n\r\n    function check(uint _requirement)\r\n    external view returns (uint256) {\r\n        uint balance = IERC20(_surf).balanceOf(_wlev);\r\n\r\n        if(balance >= _requirement)\r\n            return 0;\r\n        else\r\n            return _requirement - balance;\r\n    }\r\n\r\n    function execute()\r\n    external {\r\n        // wrap the sole NFT held by this task contract, triggering the 'SURF forwarding' functionality in the WLEV contract\r\n        IWLEV(_wlev).wrap(ILeviathan(_leviathan).tokensOfOwner(address(this)));\r\n\r\n        // unwrap the NFT back\r\n        IWLEV(_wlev).unwrap(1);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WLEVClaimTask","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://daa57bb07a623fac2df31ba411eda5503eee168476d1caace5a90a91ba1827ca"}]}