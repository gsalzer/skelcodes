{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/seedpool/State.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\ncontract State {\r\n    // admin address\r\n    address payable admin;\r\n\r\n    // reward token\r\n    address token;\r\n\r\n    // controller\r\n    address controller;\r\n\r\n    struct Pool {\r\n        // token address of this pool\r\n        // use address(0) for ETH\r\n        address token;\r\n\r\n        uint256 stakingBalance;\r\n        uint256 stakedBalance;\r\n    }\r\n\r\n    struct User {\r\n        // amount of token or ETH users deposited\r\n        // but has not traded yet\r\n        // this balance will not receive profit\r\n        uint256 stakingBalance;\r\n\r\n        // amount of token or ETH users deposited\r\n        // this balance will receive profit\r\n        uint256 stakedBalance;\r\n\r\n        // amount of pending reward, users can harvest this\r\n        // this value calculated when admin update the pool\r\n        uint256 pendingReward;\r\n    }\r\n\r\n    struct UnstakeRequest {\r\n        // user address\r\n        address user;\r\n\r\n        // unstake amount requested by user\r\n        uint256 amount;\r\n\r\n        // if true, request processed, just ignore it\r\n        bool processed;\r\n    }\r\n\r\n    Pool[] pools;\r\n    mapping(uint256 => address[]) usersList;\r\n    mapping(uint256 => mapping(address => User)) users;\r\n    mapping(uint256 => UnstakeRequest[]) unstakeRequests;\r\n\r\n    // pool\r\n    function getPoolsLength() public view returns(uint256) {\r\n        return pools.length;\r\n    }\r\n\r\n    function getPool(uint256 _pool) public view returns(address) {\r\n        return pools[_pool].token;\r\n    }\r\n\r\n    // users list\r\n    function getUsersListLength(uint256 _pool) public view returns(uint256) {\r\n        return usersList[_pool].length;\r\n    }\r\n\r\n    function getUsersList(uint256 _pool) public view returns(address[] memory) {\r\n        return usersList[_pool];\r\n    }\r\n\r\n    // user\r\n    function getUser(uint256 _pool, address _user) public view returns(uint256 userStakingBalance, uint256 userStakedBalance, uint256 userPendingReward) {\r\n        return (users[_pool][_user].stakingBalance, users[_pool][_user].stakedBalance, users[_pool][_user].pendingReward);\r\n    }\r\n\r\n    // unstake requests\r\n    function getUnstakeRequestsLength(uint256 _pool) public view returns(uint256) {\r\n        return unstakeRequests[_pool].length;\r\n    }\r\n\r\n    function getUnstakeRequest(uint256 _pool, uint256 _request) public view returns(address user, uint256 amount, bool processed) {\r\n        return (unstakeRequests[_pool][_request].user, unstakeRequests[_pool][_request].amount, unstakeRequests[_pool][_request].processed);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/controller/Storage.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\ncontract Storage {\r\n    // percent value must be multiple by 1e6\r\n    uint256[] marketingLevels;\r\n\r\n    // array of addresses which have already registered account\r\n    address[] accountList;\r\n\r\n    // bind left with right\r\n    // THE RULE: the child referred by the parent\r\n    mapping(address => address) referrals;\r\n\r\n    // whitelist root tree of marketing level\r\n    mapping(address => bool) whitelistRoots;\r\n\r\n    function getTotalAccount() public view returns(uint256) {\r\n        return accountList.length;\r\n    }\r\n\r\n    function getAccountList() public view returns(address[] memory) {\r\n        return accountList;\r\n    }\r\n\r\n    function getReferenceBy(address _child) public view returns(address) {\r\n        return referrals[_child];\r\n    }\r\n\r\n    function getMarketingMaxLevel() public view returns(uint256) {\r\n        return marketingLevels.length;\r\n    }\r\n\r\n    function getMarketingLevelValue(uint256 _level) public view returns(uint256) {\r\n        return marketingLevels[_level];\r\n    }\r\n\r\n    // get reference parent address matching the level tree\r\n    function getReferenceParent(address _child, uint256 _level) public view returns(address) {\r\n        uint i;\r\n        address pointer = _child;\r\n\r\n        while(i < marketingLevels.length) {\r\n            pointer = referrals[pointer];\r\n\r\n            if (i == _level) {\r\n                return pointer;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    function getWhiteListRoot(address _root) public view returns(bool) {\r\n        return whitelistRoots[_root];\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/controller/Controller.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"contracts/controller/Storage.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract Controller is Storage, Ownable {\r\n    event LinkCreated(address indexed addr, address indexed refer);\r\n\r\n    constructor() public {\r\n        // init marketing level values\r\n        // level from 1 -> 8\r\n        marketingLevels.push(25e6); // 25%\r\n        marketingLevels.push(20e6);\r\n        marketingLevels.push(15e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(10e6);\r\n        marketingLevels.push(5e6);\r\n        marketingLevels.push(5e6);\r\n    }\r\n\r\n    // user register referral address\r\n    function register(address _refer) public {\r\n        require(msg.sender != _refer, \"ERROR: address cannot refer itself\");\r\n        require(referrals[msg.sender] == address(0), \"ERROR: already set refer address\");\r\n\r\n        // owner address is the root of references tree\r\n        if (_refer != owner() && !getWhiteListRoot(_refer)) {\r\n            require(referrals[_refer] != address(0), \"ERROR: invalid refer address\");\r\n        }\r\n\r\n        // update reference tree\r\n        referrals[msg.sender] = _refer;\r\n\r\n        emit LinkCreated(msg.sender, _refer);\r\n    }\r\n\r\n    // admin update marketing level value\r\n    function updateMarketingLevelValue(uint256 _level, uint256 _value) public onlyOwner {\r\n        // value must be expo with 1e6\r\n        // 25% -> 25e6\r\n        marketingLevels[_level] = _value;\r\n    }\r\n\r\n    // add white list root tree\r\n    function addWhiteListRoot(address _root) public onlyOwner {\r\n        whitelistRoots[_root] = true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/ERC20Helper.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\nlibrary ERC20Helper {\r\n    function getDecimals(address addr) internal view returns(uint256) {\r\n        ERC20 token = ERC20(addr);\r\n        return token.decimals();\r\n    }\r\n\r\n    function getBalance(address addr, address user) internal view returns(uint256) {\r\n        if (addr == address(0)) {\r\n            return address(addr).balance;\r\n        }\r\n\r\n        ERC20 token = ERC20(addr);\r\n        return token.balanceOf(user);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/seedpool/Getters.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\n// import \"contracts/seedpool/State.sol\";\r\n// import \"contracts/controller/Controller.sol\";\r\n// import \"contracts/libraries/ERC20Helper.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Getters is State {\r\n    using SafeMath for uint256;\r\n\r\n    // get reward token address\r\n    function getToken() public view returns(address) {\r\n        return token;\r\n    }\r\n\r\n    // get admin address\r\n    function getAdmin() public view returns(address) {\r\n        return admin;\r\n    }\r\n\r\n    // get controller address\r\n    function getController() public view returns(address) {\r\n        return controller;\r\n    }\r\n\r\n    /*\r\n    *   pool\r\n    */\r\n\r\n    // get total value locked in pool: included staking + staked balance\r\n    function getPoolBalance(uint256 _pool) public view returns(uint256) {\r\n        return pools[_pool].stakingBalance + pools[_pool].stakedBalance;\r\n    }\r\n\r\n    // get total pool staking balance\r\n    function getPoolStakingBalance(uint256 _pool) public view returns(uint256) {\r\n        return pools[_pool].stakingBalance;\r\n    }\r\n\r\n    // get total pool staked balance\r\n    function getPoolStakedBalance(uint256 _pool) public view returns(uint256) {\r\n        return pools[_pool].stakedBalance;\r\n    }\r\n\r\n    function getPoolPendingReward(uint256 _pool) public view returns(uint256) {\r\n        uint256 amount;\r\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\r\n            address user = usersList[_pool][i];\r\n            amount = amount.add(users[_pool][user].pendingReward);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getPoolPendingUnstake(uint256 _pool) public view returns(uint256) {\r\n        uint256 amount;\r\n        for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\r\n            if (!unstakeRequests[_pool][i].processed) {\r\n                amount = amount.add(unstakeRequests[_pool][i].amount);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n\r\n    /*\r\n    *   user\r\n    */\r\n\r\n    // get total balance of user\r\n    function getUserBalance(uint256 _pool, address _user) public view returns(uint256) {\r\n        return users[_pool][_user].stakingBalance + users[_pool][_user].stakedBalance;\r\n    }\r\n\r\n    // get user staking balance\r\n    function getUserStakingBalance(uint256 _pool, address _user) public view returns(uint256) {\r\n        return users[_pool][_user].stakingBalance;\r\n    }\r\n\r\n    // get user staked balance\r\n    function getUserStakedBalance(uint256 _pool, address _user) public view returns(uint256) {\r\n        return users[_pool][_user].stakedBalance;\r\n    }\r\n\r\n    // get pending reward of user\r\n    function getUserPendingReward(uint256 _pool, address _user) public view returns(uint256) {\r\n        return users[_pool][_user].pendingReward;\r\n    }\r\n\r\n    // get total user unstake requested amount\r\n    function getUserPendingUnstake(uint256 _pool, address _user) public view returns(uint256) {\r\n        uint256 amount;\r\n        for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\r\n            if (unstakeRequests[_pool][i].user == _user && !unstakeRequests[_pool][i].processed) {\r\n                amount = amount.add(unstakeRequests[_pool][i].amount);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    // estimate amount of reward token for harvest\r\n    function estimatePayout(uint256 _pool, uint256 _percent, uint256 _rate) public view returns(uint256) {\r\n        uint256 estimateAmount;\r\n        uint256 decimals = 18;\r\n        if (_pool != 0) {\r\n            decimals = ERC20Helper.getDecimals(pools[_pool].token);\r\n        }\r\n\r\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\r\n            address user = usersList[_pool][i];\r\n\r\n            // calculate profit\r\n            uint256 profitAmount = getUserStakedBalance(_pool, user)\r\n                .mul(_percent)\r\n                .mul(_rate)\r\n                .div(100);\r\n            profitAmount = profitAmount.mul(10**(18 - decimals)).div(1e12);\r\n\r\n            estimateAmount = estimateAmount.add(profitAmount);\r\n\r\n            // estimate payout amount for references\r\n            Controller iController = Controller(controller);\r\n            uint256 maxLevel = iController.getMarketingMaxLevel();\r\n            uint256 level;\r\n            while(level < maxLevel) {\r\n                address parent = iController.getReferenceParent(user, level);\r\n                if (parent == address(0)) break;\r\n\r\n                if (getUserStakedBalance(_pool, parent) > 0) {\r\n                    uint256 percent = iController.getMarketingLevelValue(level);\r\n                    uint256 referProfitAmount = profitAmount.mul(percent).div(100).div(1e6);\r\n                    estimateAmount = estimateAmount.add(referProfitAmount);\r\n                }\r\n\r\n                level++;\r\n            }\r\n        }\r\n\r\n        return estimateAmount;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/seedpool/Setters.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\n// import \"contracts/seedpool/Getters.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Setters is Getters {\r\n    using SafeMath for uint256;\r\n\r\n    function setAdmin(address payable _admin) internal {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setController(address _controller) internal {\r\n        controller = _controller;\r\n    }\r\n\r\n    function setToken(address _token) internal {\r\n        token = _token;\r\n    }\r\n\r\n    /*\r\n    *   user\r\n    */\r\n    function increaseUserStakingBalance(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].stakingBalance = users[_pool][_user].stakingBalance.add(_amount);\r\n\r\n        // increase pool staking balance\r\n        increasePoolStakingBalance(_pool, _amount);\r\n    }\r\n\r\n    function decreaseUserStakingBalance(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].stakingBalance = users[_pool][_user].stakingBalance.sub(_amount);\r\n\r\n        // decrease pool staking balance\r\n        decreasePoolStakingBalance(_pool, _amount);\r\n    }\r\n\r\n    function increaseUserStakedBalance(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].stakedBalance = users[_pool][_user].stakedBalance.add(_amount);\r\n\r\n        increasePoolStakedBalance(_pool, _amount);\r\n    }\r\n\r\n    function decreaseUserStakedBalance(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].stakedBalance = users[_pool][_user].stakedBalance.sub(_amount);\r\n\r\n        decreasePoolStakedBalance(_pool, _amount);\r\n    }\r\n\r\n    function increaseUserPendingReward(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].pendingReward = users[_pool][_user].pendingReward.add(_amount);\r\n    }\r\n\r\n    function decreaseUserPendingReward(uint256 _pool, address _user, uint256 _amount) internal {\r\n        users[_pool][_user].pendingReward = users[_pool][_user].pendingReward.sub(_amount);\r\n    }\r\n\r\n    function emptyUserPendingReward(uint256 _pool, address _user) internal {\r\n        users[_pool][_user].pendingReward = 0;\r\n    }\r\n\r\n    /*\r\n    *   pool\r\n    */\r\n    function appendNewPool(address _token) internal {\r\n            pools.push(Pool({\r\n            token: _token,\r\n            stakingBalance: 0,\r\n            stakedBalance: 0\r\n        }));\r\n    }\r\n\r\n    function increasePoolStakingBalance(uint256 _pool, uint256 _amount) internal {\r\n        pools[_pool].stakingBalance = pools[_pool].stakingBalance.add(_amount);\r\n    }\r\n\r\n    function decreasePoolStakedBalance(uint256 _pool, uint256 _amount) internal {\r\n        pools[_pool].stakedBalance = pools[_pool].stakedBalance.sub(_amount);\r\n    }\r\n\r\n    function increasePoolStakedBalance(uint256 _pool, uint256 _amount) internal {\r\n        pools[_pool].stakedBalance = pools[_pool].stakedBalance.add(_amount);\r\n    }\r\n\r\n    function decreasePoolStakingBalance(uint256 _pool, uint256 _amount) internal {\r\n        pools[_pool].stakingBalance = pools[_pool].stakingBalance.sub(_amount);\r\n    }\r\n\r\n    /*\r\n    *   unstake requests\r\n    */\r\n    function setProcessedUnstakeRequest(uint256 _pool, uint256 _req) internal {\r\n        unstakeRequests[_pool][_req].processed = true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/Constants.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\nlibrary Constants {\r\n    address constant BVA = address(0x10d88D7495cA381df1391229Bdb82D015b9Ad17D);\r\n    address constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// Root file: contracts/seedpool/SeedPool.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// import \"contracts/seedpool/Setters.sol\";\r\n// import \"contracts/Constants.sol\";\r\n// import \"contracts/controller/Controller.sol\";\r\n// import \"contracts/libraries/TransferHelper.sol\";\r\n// import \"contracts/libraries/ERC20Helper.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract SeedPool is Setters, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Stake(address indexed user, uint256 indexed pool, uint256 indexed amount);\r\n    event Unstake(address indexed user, uint256 indexed pool, uint256 indexed amount);\r\n    event Harvest(address indexed user, uint256 indexed pool, uint256 indexed amount);\r\n    event Payout(address admin, uint256 indexed pool, uint256 indexed percent, uint256 indexed rate);\r\n\r\n    // emit when admin process the pool unstake request\r\n    event UnstakeProcessed(address admin, uint256 indexed pool, uint256 indexed amount);\r\n\r\n    constructor(address payable _admin, address _controller) public {\r\n        setAdmin(_admin);\r\n        setToken(Constants.BVA);\r\n        setController(_controller);\r\n\r\n        // setup default pools\r\n        appendNewPool(address(0));\r\n        appendNewPool(Constants.USDT);\r\n    }\r\n\r\n    // fallback function will help contract receive eth sent only by admin\r\n    receive() external payable {\r\n        require(msg.sender == admin, \"ERROR: send ETH to contract is not allowed\");\r\n    }\r\n\r\n    // check msg.sender is admin\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"ERROR: only admin\");\r\n        _;\r\n    }\r\n\r\n    // update profit for reference parents\r\n    function payoutReference(uint256 _pool, address _child, uint256 _amount) internal returns(uint256) {\r\n        uint256 totalPayout;\r\n        Controller iController = Controller(controller);\r\n        uint256 maxLevel = iController.getMarketingMaxLevel();\r\n        uint256 level;\r\n        while(level < maxLevel) {\r\n            address parent = iController.getReferenceParent(_child, level);\r\n            if (parent == address(0)) break;\r\n\r\n            if (getUserStakedBalance(_pool, parent) > 0) {\r\n                uint256 percent = iController.getMarketingLevelValue(level);\r\n                uint256 referProfitAmount = _amount.mul(percent).div(100).div(1e6);\r\n\r\n                increaseUserPendingReward(_pool, parent, referProfitAmount);\r\n                totalPayout = totalPayout.add(referProfitAmount);\r\n            }\r\n\r\n            level++;\r\n        }\r\n\r\n        return totalPayout;\r\n    }\r\n\r\n    // deposit amount of ETH or tokens to contract\r\n    // user MUST call approve function in Token contract to approve _value for this contract\r\n    //\r\n    // after deposit, _value added to staking balance\r\n    // after one payout action, staking balance will be moved to staked balance\r\n    function stake(uint256 _pool, uint256 _value) public payable {\r\n        if (_pool == 0) {\r\n            increaseUserStakingBalance(_pool, msg.sender, msg.value);\r\n\r\n            TransferHelper.safeTransferETH(admin, msg.value);\r\n\r\n            emit Stake(msg.sender, _pool, msg.value);\r\n        } else {\r\n            TransferHelper.safeTransferFrom(pools[_pool].token, msg.sender, address(this), _value);\r\n            TransferHelper.safeTransfer(pools[_pool].token, admin, _value);\r\n\r\n            increaseUserStakingBalance(_pool, msg.sender, _value);\r\n\r\n            emit Stake(msg.sender, _pool, _value);\r\n        }\r\n\r\n        bool isListed;\r\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\r\n            if (usersList[_pool][i] == msg.sender) isListed = true;\r\n        }\r\n\r\n        if (!isListed) {\r\n            usersList[_pool].push(msg.sender);\r\n        }\r\n    }\r\n\r\n    // request unstake amount of ETH or tokens\r\n    // user can only request unstake in staked balance\r\n    function unstake(uint256 _pool, uint256 _value) public {\r\n        uint256 stakedBalance = getUserStakedBalance(_pool, msg.sender);\r\n        uint256 requestedAmount = getUserPendingUnstake(_pool, msg.sender);\r\n        require(_value + requestedAmount <= stakedBalance, \"ERROR: insufficient balance\");\r\n\r\n        unstakeRequests[_pool].push(UnstakeRequest({\r\n            user: msg.sender,\r\n            amount: _value,\r\n            processed: false\r\n        }));\r\n\r\n        emit Unstake(msg.sender, _pool, _value);\r\n    }\r\n\r\n    // harvest pending reward token\r\n    // simple transfer pendingReward to uer wallet\r\n    function harvest(uint256 _pool) public {\r\n        uint256 receiveAmount = getUserPendingReward(_pool, msg.sender);\r\n        if (receiveAmount > 0) {\r\n            TransferHelper.safeTransfer(token, msg.sender, receiveAmount);\r\n            emptyUserPendingReward(_pool, msg.sender);\r\n        }\r\n\r\n        emit Harvest(msg.sender, _pool, receiveAmount);\r\n    }\r\n\r\n    // payout function\r\n    // called only by admin\r\n    // param @_percent: present amount of reward based on stakedBalance of user\r\n    // param @_rate: how many reward token for each deposit token\r\n    //  ex: ? BVA = 1 ETH\r\n    // _percent & _rate must be multiple by 1e6\r\n    //\r\n    // 1. process user staked balance\r\n    // 2. move user staking balance to staked balance\r\n    function payout(uint256 _pool, uint256 _percent, uint256 _rate) public onlyAdmin {\r\n        uint256 totalPayoutReward;\r\n        uint256 decimals = 18;\r\n        if (_pool != 0) {\r\n            decimals = ERC20Helper.getDecimals(pools[_pool].token);\r\n        }\r\n\r\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\r\n            address user = usersList[_pool][i];\r\n\r\n            // calculate profit\r\n            uint256 profitAmount = getUserStakedBalance(_pool, user)\r\n                .mul(_percent)\r\n                .mul(_rate)\r\n                .div(100);\r\n            profitAmount = profitAmount.mul(10**(18 - decimals)).div(1e12);\r\n            totalPayoutReward = totalPayoutReward.add(profitAmount);\r\n\r\n            // add profit to pending reward\r\n            increaseUserPendingReward(_pool, user, profitAmount);\r\n\r\n            // move user staking balance to staked balance\r\n            increaseUserStakedBalance(_pool, user, getUserStakingBalance(_pool, user));\r\n            decreaseUserStakingBalance(_pool, user, getUserStakingBalance(_pool, user));\r\n\r\n            // calculate profit for reference users\r\n            // double check vs controller\r\n            uint256 totalReferencePayout = payoutReference(_pool, user, profitAmount);\r\n            totalPayoutReward = totalPayoutReward.add(totalReferencePayout);\r\n        }\r\n\r\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), totalPayoutReward);\r\n\r\n        emit Payout(msg.sender, _pool, _percent, _rate);\r\n    }\r\n\r\n    // process unstake requests\r\n    // admin call this function and send ETH or tokens to process\r\n    // this function check requests all auto process each request\r\n    function processUnstake(uint256 _pool, uint256 _amount) public payable onlyAdmin {\r\n        if (_pool == 0) {\r\n            uint256 tokenBalance = address(this).balance;\r\n\r\n            // process until tokenBalance = 0\r\n            for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\r\n                if (unstakeRequests[_pool][i].amount <= tokenBalance && !unstakeRequests[_pool][i].processed) {\r\n                    address user = unstakeRequests[_pool][i].user;\r\n                    TransferHelper.safeTransferETH(user, unstakeRequests[_pool][i].amount);\r\n                    tokenBalance = tokenBalance.sub(unstakeRequests[_pool][i].amount);\r\n                    decreaseUserStakedBalance(_pool, user, unstakeRequests[_pool][i].amount);\r\n                    setProcessedUnstakeRequest(_pool, i);\r\n                }\r\n            }\r\n\r\n            emit UnstakeProcessed(msg.sender, _pool, msg.value);\r\n        } else {\r\n            TransferHelper.safeTransferFrom(pools[_pool].token, getAdmin(), address(this), _amount);\r\n            uint256 tokenBalance = ERC20Helper.getBalance(pools[_pool].token, address(this));\r\n\r\n            for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\r\n                if (unstakeRequests[_pool][i].amount <= tokenBalance && !unstakeRequests[_pool][i].processed) {\r\n                    address user = unstakeRequests[_pool][i].user;\r\n                    // transfer token from contract -> user\r\n                    TransferHelper.safeTransfer(pools[_pool].token, user, unstakeRequests[_pool][i].amount);\r\n                    tokenBalance = tokenBalance.sub(unstakeRequests[_pool][i].amount);\r\n\r\n                    decreaseUserStakedBalance(_pool, user, unstakeRequests[_pool][i].amount);\r\n                    setProcessedUnstakeRequest(_pool, i);\r\n                }\r\n            }\r\n\r\n            emit UnstakeProcessed(msg.sender, _pool, _amount);\r\n        }\r\n    }\r\n\r\n    // function emergency get all coin from contract to admin\r\n    function emergencyGetToken(uint256 _pool) public onlyAdmin {\r\n        if (_pool == 0) {\r\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\r\n        } else {\r\n            IERC20 token = IERC20(pools[_pool].token);\r\n            TransferHelper.safeTransfer(pools[_pool].token, msg.sender, token.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    // transfer admin\r\n    function changeAdmin(address payable _admin) public onlyOwner {\r\n        setAdmin(_admin);\r\n    }\r\n\r\n    // transfer token\r\n    function changeToken(address _token) public onlyOwner {\r\n        setToken(_token);\r\n    }\r\n\r\n    // transfer controller\r\n    function changeController(address _controller) public onlyOwner {\r\n        setController(_controller);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"emergencyGetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"estimatePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolPendingUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_request\",\"type\":\"uint256\"}],\"name\":\"getUnstakeRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUnstakeRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userStakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPendingUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUsersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUsersListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"processUnstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SeedPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000095d01d8c92abdad574ad01f6a82fe20fe80826ce00000000000000000000000060e0c096209d628fb7d7149f67e3ec7a922c49d4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2aef8c548b650e0207632cf23bde088a3c6b8fcf785476c46967b00608e7b1ff"}]}