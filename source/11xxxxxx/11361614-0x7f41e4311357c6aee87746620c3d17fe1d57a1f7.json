{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.4;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'Hype.Bet' Staking smart contract. \r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath library\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    function calculateAmountsAfterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external view returns (uint256 transferToAmount, uint256 transferToFeeDistributorAmount, uint256 transferToOwnerFeeDistributorAmount);\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract HypeBet_Stake is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    address public Hype_Bet = 0xc9Dfcd0A1dD2D7BB6Fd2EF91A16a6a1c4E9846Dd;\r\n    \r\n    uint256 public totalStakes = 0;\r\n    uint256 public totalDividends = 0;\r\n    uint256 private scaledRemainder = 0;\r\n    uint256 private scaling = uint256(10) ** 12;\r\n    uint public round = 1;\r\n    uint256 public maxAllowed = 100000000000000000000000; //100000 tokens total allowed to be staked\r\n    \r\n    /* Fees breaker, to protect withdraws if anything ever goes wrong */\r\n    bool public breaker = false; // withdraw can be lock,, default unlocked\r\n    mapping(address => uint) public farmLock; // period that your sake it locked to keep it for farming\r\n    //uint public lock = 0; // farm lock in blocks ~ 0 days for 15s/block\r\n    //address public admin;\r\n    \r\n    struct USER{\r\n        uint256 stakedTokens;\r\n        uint256 lastDividends;\r\n        uint256 fromTotalDividend;\r\n        uint round;\r\n        uint256 remainder;\r\n    }\r\n    \r\n        address[] internal stakeholders;\r\n    mapping(address => USER) stakers;\r\n    mapping (uint => uint256) public payouts;                   // keeps record of each payout\r\n    \r\n    event STAKED(address staker, uint256 tokens);\r\n    event EARNED(address staker, uint256 tokens);\r\n    event UNSTAKED(address staker, uint256 tokens);\r\n    event PAYOUT(uint256 round, uint256 tokens, address sender);\r\n    event CLAIMEDREWARD(address staker, uint256 reward);\r\n    event WithdrawalLockDurationSet(uint256 value, address sender);\r\n    \r\n    function setBreaker(bool _breaker) external onlyOwner {\r\n        breaker = _breaker;\r\n    }\r\n    \r\n    \r\n    function isStakeholder(address _address)\r\n       public\r\n       view\r\n       returns(bool)\r\n   {\r\n       for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n           if (_address == stakeholders[s]) return (true);\r\n       }\r\n       return (false);\r\n   }\r\n   \r\n   function addStakeholder(address _stakeholder)\r\n       public\r\n   {\r\n       (bool _isStakeholder) = isStakeholder(_stakeholder);\r\n       if(!_isStakeholder) stakeholders.push(_stakeholder);\r\n   }\r\n   \r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token holders can stake their tokens using this function\r\n    // @param tokens number of tokens to stake\r\n    // ------------------------------------------------------------------------\r\n    function STAKE(uint256 tokens) external {\r\n        require(totalStakes <= maxAllowed, \"Max Stake amount exceed\");\r\n        require(IERC20(Hype_Bet).transferFrom(msg.sender, address(this), tokens), \"Tokens cannot be transferred from user account\");\r\n        \r\n        (uint256 transferToAmount,,) = IERC20(Hype_Bet).calculateAmountsAfterFee(msg.sender, address(this), tokens);\r\n        \r\n            \r\n            // add pending rewards to remainder to be claimed by user later, if there is any existing stake\r\n            uint256 owing = pendingReward(msg.sender);\r\n            stakers[msg.sender].remainder += owing;\r\n            \r\n            stakers[msg.sender].stakedTokens = transferToAmount.add(stakers[msg.sender].stakedTokens);\r\n            stakers[msg.sender].lastDividends = owing;\r\n            stakers[msg.sender].fromTotalDividend= totalDividends;\r\n            stakers[msg.sender].round =  round;\r\n            \r\n            (bool _isStakeholder) = isStakeholder(msg.sender);\r\n             if(!_isStakeholder) farmLock[msg.sender] =  block.timestamp;\r\n            \r\n            \r\n            totalStakes = totalStakes.add(transferToAmount);\r\n            \r\n            addStakeholder(msg.sender);\r\n            \r\n            emit STAKED(msg.sender, transferToAmount);\r\n        \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owners can send the funds to be distributed to stakers using this function\r\n    // @param tokens number of tokens to distribute\r\n    // ------------------------------------------------------------------------\r\n    function ADDFUNDS(uint256 tokens) external {\r\n        \r\n        require(IERC20(Hype_Bet).transferFrom(msg.sender, address(this), tokens), \"Tokens cannot be transferred from funder account\");\r\n        (uint256 transferToAmount,,) = IERC20(Hype_Bet).calculateAmountsAfterFee(msg.sender, address(this), tokens);\r\n        _addPayout(transferToAmount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Private function to register payouts\r\n    // ------------------------------------------------------------------------\r\n    function _addPayout(uint256 tokens) private{\r\n        // divide the funds among the currently staked tokens\r\n        // scale the deposit and add the previous remainder\r\n        uint256 available = (tokens.mul(scaling)).add(scaledRemainder); \r\n        uint256 dividendPerToken = available.div(totalStakes);\r\n        scaledRemainder = available.mod(totalStakes);\r\n        \r\n        totalDividends = totalDividends.add(dividendPerToken);\r\n        payouts[round] = payouts[round - 1].add(dividendPerToken);\r\n        \r\n        emit PAYOUT(round, tokens, msg.sender);\r\n        round++;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Stakers can claim their pending rewards using this function\r\n    // ------------------------------------------------------------------------\r\n    function CLAIMREWARD() public {\r\n        \r\n        if(totalDividends > stakers[msg.sender].fromTotalDividend){\r\n            uint256 owing = pendingReward(msg.sender);\r\n        \r\n            owing = owing.add(stakers[msg.sender].remainder);\r\n            stakers[msg.sender].remainder = 0;\r\n        \r\n            require(IERC20(Hype_Bet).transfer(msg.sender,owing), \"ERROR: error in sending reward from contract\");\r\n        \r\n            emit CLAIMEDREWARD(msg.sender, owing);\r\n        \r\n            stakers[msg.sender].lastDividends = owing; // unscaled\r\n            stakers[msg.sender].round = round; // update the round\r\n            stakers[msg.sender].fromTotalDividend = totalDividends; // scaled\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the pending rewards of the staker\r\n    // @param _staker the address of the staker\r\n    // ------------------------------------------------------------------------    \r\n    function pendingReward(address staker) private returns (uint256) {\r\n        require(staker != address(0), \"ERC20: sending to the zero address\");\r\n        \r\n        uint stakersRound = stakers[staker].round;\r\n        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\r\n        stakers[staker].remainder += ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\r\n        return amount;\r\n    }\r\n    \r\n    function getPendingReward(address staker) public view returns(uint256 _pendingReward) {\r\n        require(staker != address(0), \"ERC20: sending to the zero address\");\r\n         uint stakersRound = stakers[staker].round;\r\n         \r\n        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\r\n        amount += ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\r\n        return (amount.add(stakers[staker].remainder));\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Stakers can un stake the staked tokens using this function\r\n    // @param tokens the number of tokens to withdraw\r\n    // ------------------------------------------------------------------------\r\n    function WITHDRAW(uint256 tokens) external {\r\n        require(breaker == false, \"Admin Restricted WITHDRAW\");\r\n        require(stakers[msg.sender].stakedTokens >= tokens && tokens > 0, \"Invalid token amount to withdraw\");\r\n        \r\n        totalStakes = totalStakes.sub(tokens);\r\n        \r\n        // add pending rewards to remainder to be claimed by user later, if there is any existing stake\r\n        uint256 owing = pendingReward(msg.sender);\r\n        stakers[msg.sender].remainder += owing;\r\n                \r\n        stakers[msg.sender].stakedTokens = stakers[msg.sender].stakedTokens.sub(tokens);\r\n        stakers[msg.sender].lastDividends = owing;\r\n        stakers[msg.sender].fromTotalDividend= totalDividends;\r\n        stakers[msg.sender].round =  round;\r\n        \r\n        \r\n        require(IERC20(Hype_Bet).transfer(msg.sender, tokens), \"Error in un-staking tokens\");\r\n        emit UNSTAKED(msg.sender, tokens);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Private function to calculate 1% percentage\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the number of tokens staked by a staker\r\n    // @param _staker the address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function yourStakedHype_Bet(address staker) public view returns(uint256 stakedHype_Bet){\r\n        require(staker != address(0), \"ERC20: sending to the zero address\");\r\n        \r\n        return stakers[staker].stakedTokens;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the Hype_Bet balance of the token holder\r\n    // @param user the address of the token holder\r\n    // ------------------------------------------------------------------------\r\n    function yourHype_BetBalance(address user) external view returns(uint256 Hype_BetBalance){\r\n        require(user != address(0), \"ERC20: sending to the zero address\");\r\n        return IERC20(Hype_Bet).balanceOf(user);\r\n    }\r\n    \r\n   \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CLAIMEDREWARD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"EARNED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PAYOUT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"STAKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"UNSTAKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawalLockDurationSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ADDFUNDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIMREWARD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Hype_Bet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"addStakeholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"yourHype_BetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Hype_BetBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"yourStakedHype_Bet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedHype_Bet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HypeBet_Stake","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1300027d1ef1d012d91bf3f02a560c88fa7b41edce68adadef64ad1542976f29"}]}