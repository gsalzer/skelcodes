{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Corlibri_Libraries.sol\r\n\r\n// SPDX-License-Identifier: WHO GIVES A FUCK ANYWAY??\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Log(string log);\r\n\r\n}\r\n\r\n// File: contracts/Corlibri_Interfaces.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\n//CORLIBRI\r\n    interface ICorlibri {\r\n        function viewGovernanceLevel(address _address) external view returns(uint8);\r\n        function viewVault() external view returns(address);\r\n        function viewUNIv2() external view returns(address);\r\n        function viewWrappedUNIv2()external view returns(address);\r\n        function burnFromUni(uint256 _amount) external;\r\n    }\r\n\r\n//Nectar is wrapping Tokens, generates wrappped UNIv2\r\n    interface INectar {\r\n        function wrapUNIv2(uint256 amount) external;\r\n        function wTransfer(address recipient, uint256 amount) external;\r\n        function setPublicWrappingRatio(uint256 _ratioBase100) external;\r\n    }\r\n    \r\n//VAULT\r\n    interface IVault {\r\n        function updateRewards() external;\r\n    }\r\n\r\n\r\n//UNISWAP\r\n    interface IUniswapV2Factory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    \r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n        function migrator() external view returns (address);\r\n    \r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n    \r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    \r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n        function setMigrator(address) external;\r\n    }\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n    \r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n    \r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountETH);\r\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountETH);\r\n    \r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n    interface IUniswapV2Pair {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n    \r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n    \r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n    \r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n        event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n        );\r\n        event Sync(uint112 reserve0, uint112 reserve1);\r\n    \r\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n        function factory() external view returns (address);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function price0CumulativeLast() external view returns (uint);\r\n        function price1CumulativeLast() external view returns (uint);\r\n        function kLast() external view returns (uint);\r\n    \r\n        function mint(address to) external returns (uint liquidity);\r\n        function burn(address to) external returns (uint amount0, uint amount1);\r\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        function skim(address to) external;\r\n        function sync() external;\r\n    \r\n        function initialize(address, address) external;\r\n    }\r\n    interface IWETH {\r\n        function deposit() external payable;\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function withdraw(uint) external;\r\n    }\r\n\r\n// File: contracts/Corlibri_ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20 { \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n//Public Functions\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function setBalance(address account, uint256 amount) internal returns(uint256) {\r\n         _balances[account] = amount;\r\n         return amount;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n//Internal Functions\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }  //overriden in Defiat_Token\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/Corlibri_Token.sol\r\n\r\n\r\n// but thanks a million Gwei to MIT and Zeppelin. You guys rock!!!\r\n\r\n// MAINNET VERSION.\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\ncontract Corlibri_Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    event LiquidityAddition(address indexed dst, uint value);\r\n    event LPTokenClaimed(address dst, uint value);\r\n\r\n    //ERC20\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 public constant initialSupply = 25000*1e18; // 25k\r\n    \r\n    //timeStamps\r\n    uint256 public contractInitialized;\r\n    uint256 public contractStart_Timestamp;\r\n    uint256 public LGECompleted_Timestamp;\r\n    uint256 public constant contributionPhase =  7 days;\r\n    uint256 public constant stackingPhase = 1 hours;\r\n    uint256 public constant emergencyPeriod = 4 days;\r\n    \r\n    //Tokenomics\r\n    uint256 public totalLPTokensMinted;\r\n    uint256 public totalETHContributed;\r\n    uint256 public LPperETHUnit;\r\n    mapping (address => uint)  public ethContributed;\r\n    uint256 public constant individualCap = 10*1e18; // 10 ETH cap per address for LGE\r\n    uint256 public constant totalCap = 750*1e18; // 750 ETH cap total for LGE\r\n    \r\n    \r\n    //Ecosystem\r\n    address public UniswapPair;\r\n    address public wUNIv2;\r\n    address public Vault;\r\n    IUniswapV2Router02 public uniswapRouterV2;\r\n    IUniswapV2Factory public uniswapFactory;\r\n    \r\n//=========================================================================================================================================\r\n\r\n    constructor() ERC20(\"Corlibri\", \"CORLIBRI\") public {\r\n        _mint(address(this), initialSupply - 1000*1e18); // initial token supply minus tokens for marketing/bonuses\r\n        _mint(address(msg.sender), 1000*1e18); // 1000 tokens minted for marketing/bonus purposes\r\n        governanceLevels[msg.sender] = 2;\r\n    }\r\n    \r\n    function initialSetup() public governanceLevel(2) {\r\n        contractInitialized = block.timestamp;\r\n        setBuySellFees(25, 100); //2.5% on buy, 10% on sell.\r\n        \r\n        POOL_CreateUniswapPair(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n        //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D = UniswapV2Router02\r\n        //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f = UniswapV2Factory\r\n    }\r\n    \r\n    //Pool UniSwap pair creation method (called by  initialSetup() )\r\n    function POOL_CreateUniswapPair(address router, address factory) internal returns (address) {\r\n        require(contractInitialized > 0, \"Requires intialization 1st\");\r\n        \r\n        uniswapRouterV2 = IUniswapV2Router02(router != address(0) ? router : 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapFactory = IUniswapV2Factory(factory != address(0) ? factory : 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); \r\n        require(UniswapPair == address(0), \"Token: pool already created\");\r\n        \r\n        UniswapPair = uniswapFactory.createPair(address(uniswapRouterV2.WETH()),address(this));\r\n        \r\n        return UniswapPair;\r\n    }\r\n    \r\n    /* Once initialSetup has been invoked\r\n    * Team will create the Vault and the LP wrapper token\r\n    *  \r\n    * Only AFTER these 2 addresses have been created the users\r\n    * can start contributing in ETH\r\n    */\r\n    function secondarySetup(address _Vault, address _wUNIv2) public governanceLevel(2) {\r\n        require(contractInitialized > 0 && contractStart_Timestamp == 0, \"Requires Initialization and Start\");\r\n        setVault(_Vault); //also adds the Vault to noFeeList\r\n        wUNIv2 = _wUNIv2;\r\n        \r\n        require(Vault != address(0) && wUNIv2 != address(0), \"Wrapper Token and Vault not Setup\");\r\n        contractStart_Timestamp = block.timestamp;\r\n    }\r\n    \r\n\r\n//=========================================================================================================================================\r\n    /* Liquidity generation logic\r\n    * Steps - All tokens that will ever exist go to this contract\r\n    *  \r\n    * This contract accepts ETH as payable\r\n    * ETH is mapped to people\r\n    *    \r\n    * When liquidity generation event is over \r\n    * everyone can call the mint LP function.\r\n    *    \r\n    * which will put all the ETH and tokens inside the uniswap contract\r\n    * without any involvement\r\n    *    \r\n    * This LP will go into this contract\r\n    * And will be able to proportionally be withdrawn based on ETH put in\r\n    *\r\n    * emergency drain function allows the contract owner to drain all ETH and tokens from this contract\r\n    * After the liquidity generation event happened. In case something goes wrong, to send ETH back\r\n    */\r\n\r\n    string public liquidityGenerationParticipationAgreement = \"I agree that the developers and affiliated parties of the Corlibri team are not responsible for my funds\";\r\n\r\n    \r\n    /* @dev List of modifiers used to differentiate the project phases\r\n     *      ETH_ContributionPhase lets users send ETH to the token contract\r\n     *      LGP_possible triggers after the contributionPhase duration\r\n     *      Trading_Possible: this modifiers prevent Corlibri _transfer right\r\n     *      after the LGE. It gives time for contributors to stake their \r\n     *      tokens before fees are generated.\r\n     */\r\n    \r\n    modifier ETH_ContributionPhase() {\r\n        require(contractStart_Timestamp > 0, \"Requires contractTimestamp > 0\");\r\n        require(block.timestamp <= contractStart_Timestamp.add(contributionPhase), \"Requires contributionPhase ongoing\");\r\n        _;\r\n    }\r\n    \r\n    /* if totalETHContributed is bigger than 99% of the cap\r\n     * the LGE can happen (allows the LGE to happen sooner if needed)\r\n     * otherwise (ETHcontributed < 99% totalCap), time contraint applies\r\n     */\r\n    modifier LGE_Possible() {\r\n         \r\n        if(totalETHContributed < totalCap.mul(99).div(100)){ \r\n        require(contractStart_Timestamp > 0 , \"Requires contractTimestamp > 0\");\r\n        require(block.timestamp > contractStart_Timestamp.add(contributionPhase), \"Requies contributionPhase ended\");\r\n        }\r\n       _; \r\n    }\r\n    \r\n    modifier LGE_happened() {\r\n        require(LGECompleted_Timestamp > 0, \"Requires LGE initialized\");\r\n        require(block.timestamp > LGECompleted_Timestamp, \"Requires LGE ongoing\");\r\n        _;\r\n    }\r\n    \r\n    //UniSwap Cuck Machine: Blocks Uniswap Trades for a certain period, allowing users to claim and stake NECTAR\r\n    modifier Trading_Possible() {\r\n         require(LGECompleted_Timestamp > 0, \"Requires LGE initialized\");\r\n         require(block.timestamp > LGECompleted_Timestamp.add(stackingPhase), \"Requires StackingPhase ended\");\r\n        _;\r\n    }\r\n    \r\n\r\n//=========================================================================================================================================\r\n  \r\n    // Emergency drain in case of a bug\r\n    function emergencyDrain24hAfterLiquidityGenerationEventIsDone() public governanceLevel(2) {\r\n        require(contractStart_Timestamp > 0, \"Requires contractTimestamp > 0\");\r\n        require(contractStart_Timestamp.add(emergencyPeriod) < block.timestamp, \"Liquidity generation grace period still ongoing\"); // About 24h after liquidity generation happens\r\n        \r\n        (bool success, ) = msg.sender.call{value:(address(this).balance)}(\"\");\r\n        require(success, \"ETH Transfer failed... we are cucked\");\r\n       \r\n        ERC20._transfer(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n//During ETH_ContributionPhase: Users deposit funds\r\n\r\n    //funds sent to TOKEN contract.\r\n    function USER_PledgeLiquidity(bool agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement) public payable ETH_ContributionPhase {\r\n        require(ethContributed[msg.sender].add(msg.value) <= individualCap, \"max 10ETH contribution per address\");\r\n        require(totalETHContributed.add(msg.value) <= totalCap, \"750 ETH Hard cap\"); \r\n        \r\n        require(agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement, \"No agreement provided\");\r\n        \r\n        ethContributed[msg.sender] = ethContributed[msg.sender].add(msg.value);\r\n        totalETHContributed = totalETHContributed.add(msg.value); // for front end display during LGE\r\n        emit LiquidityAddition(msg.sender, msg.value);\r\n    }\r\n    \r\n    function USER_UNPledgeLiquidity() public ETH_ContributionPhase {\r\n        uint256 _amount = ethContributed[msg.sender];\r\n        ethContributed[msg.sender] = 0;\r\n        msg.sender.transfer(_amount); //MUST CALL THE ETHERUM TRANSFER, not the TOKEN one!!!\r\n        totalETHContributed = totalETHContributed.sub(_amount);\r\n    }\r\n\r\n\r\n// After ETH_ContributionPhase: Pool can create liquidity.\r\n// Vault and wrapped UNIv2 contracts need to be setup in advance.\r\n\r\n    function POOL_CreateLiquidity() public LGE_Possible {\r\n\r\n        totalETHContributed = address(this).balance;\r\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapPair);\r\n        \r\n        //Wrap eth\r\n        address WETH = uniswapRouterV2.WETH();\r\n        \r\n        //Send to UniSwap\r\n        IWETH(WETH).deposit{value : totalETHContributed}();\r\n        require(address(this).balance == 0 , \"Transfer Failed\");\r\n        IWETH(WETH).transfer(address(pair),totalETHContributed);\r\n        \r\n        emit Transfer(address(this), address(pair), balanceOf(address(this)));\r\n        \r\n        //Corlibri balances transfer\r\n        ERC20._transfer(address(this), address(pair), balanceOf(address(this)));\r\n        pair.mint(address(this));       //mint LP tokens. lock method in UniSwapPairV2 PREVENTS FROM DOING IT TWICE\r\n        \r\n        totalLPTokensMinted = pair.balanceOf(address(this));\r\n        \r\n        require(totalLPTokensMinted != 0 , \"LP creation failed\");\r\n        LPperETHUnit = totalLPTokensMinted.mul(1e18).div(totalETHContributed); // 1e18x for  change\r\n        require(LPperETHUnit != 0 , \"LP creation failed\");\r\n        \r\n        LGECompleted_Timestamp = block.timestamp;\r\n    }\r\n    \r\n \r\n//After ETH_ContributionPhase: Pool can create liquidity.\r\n    function USER_ClaimWrappedLiquidity() public LGE_happened {\r\n        require(ethContributed[msg.sender] > 0 , \"Nothing to claim, move along\");\r\n        \r\n        uint256 amountLPToTransfer = ethContributed[msg.sender].mul(LPperETHUnit).div(1e18);\r\n        INectar(wUNIv2).wTransfer(msg.sender, amountLPToTransfer); // stored as 1e18x value for change\r\n        ethContributed[msg.sender] = 0;\r\n        \r\n        emit LPTokenClaimed(msg.sender, amountLPToTransfer);\r\n    }\r\n\r\n\r\n//=========================================================================================================================================\r\n    //overriden _transfer to take Fees\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override Trading_Possible {\r\n        \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    \r\n        //updates _balances\r\n        setBalance(sender, balanceOf(sender).sub(amount, \"ERC20: transfer amount exceeds balance\"));\r\n\r\n        //calculate net amounts and fee\r\n        (uint256 toAmount, uint256 toFee) = calculateAmountAndFee(sender, amount);\r\n        \r\n        //Send Reward to Vault 1st\r\n        if(toFee > 0 && Vault != address(0)){\r\n            setBalance(Vault, balanceOf(Vault).add(toFee));\r\n            IVault(Vault).updateRewards(); //updating the vault with rewards sent.\r\n            emit Transfer(sender, Vault, toFee);\r\n        }\r\n        \r\n        //transfer to recipient\r\n        setBalance(recipient, balanceOf(recipient).add(toAmount));\r\n        emit Transfer(sender, recipient, toAmount);\r\n\r\n    }\r\n    \r\n//=========================================================================================================================================\r\n//FEE_APPROVER (now included into the token code)\r\n\r\n    mapping (address => bool) public noFeeList;\r\n    \r\n    function calculateAmountAndFee(address sender, uint256 amount) public view returns (uint256 netAmount, uint256 fee){\r\n\r\n        if(noFeeList[sender]) { fee = 0;} // Don't have a fee when Vault is sending, or infinite loop\r\n        else if(sender == UniswapPair){ fee = amount.mul(buyFee).div(1000);}\r\n        else { fee = amount.mul(sellFee).div(1000);}\r\n        \r\n        netAmount = amount.sub(fee);\r\n    }\r\n    \r\n//=========================================================================================================================================\r\n//Governance\r\n    /**\r\n     * @dev multi tiered governance logic\r\n     * \r\n     * 0: plebs\r\n     * 1: voting contracts (setup later in DAO)\r\n     * 2: governors\r\n     * \r\n    */\r\n    mapping(address => uint8) public governanceLevels;\r\n    \r\n    modifier governanceLevel(uint8 _level){\r\n        require(governanceLevels[msg.sender] >= _level, \"Grow some mustache kiddo...\");\r\n        _;\r\n    }\r\n    function setGovernanceLevel(address _address, uint8 _level) public governanceLevel(_level) {\r\n        governanceLevels[_address] = _level; //_level in Modifier ensures that lvl1 can only add lvl1 govs.\r\n    }\r\n    \r\n    function viewGovernanceLevel(address _address) public view returns(uint8) {\r\n        return governanceLevels[_address];\r\n    }\r\n\r\n//== Governable Functions\r\n    \r\n    //External variables\r\n        function setUniswapPair(address _UniswapPair) public governanceLevel(2) {\r\n            UniswapPair = _UniswapPair;\r\n            noFeeList[_UniswapPair] =  false; //making sure we take rewards\r\n        }\r\n        \r\n        function setVault(address _Vault) public governanceLevel(2) {\r\n            Vault = _Vault;\r\n            noFeeList[_Vault] =  true;\r\n        }\r\n        \r\n        \r\n        /* @dev :allows to upgrade the wrapper\r\n         * future devs will allow the wrapper to read live prices\r\n         * of liquidity tokens and to mint an Universal wrapper\r\n         * wrapping ANY UNIv2 LP token into their equivalent in \r\n         * wrappedLP tokens, based on the wrapped asset price.\r\n         */\r\n        function setwUNIv2(address _wrapper) public governanceLevel(2) {\r\n            wUNIv2 = _wrapper;\r\n            noFeeList[_wrapper] =  true; //manages the wrapping of Corlibris\r\n        }\r\n       \r\n        //burns tokens from the contract (holding them)\r\n        function burnToken(uint256 amount) public governanceLevel(1) {\r\n            _burn(address(this), amount); //only Works if tokens are on the token contract. They need to be sent here 1st. (by the team Treasury)\r\n        }\r\n    \r\n    //Fees\r\n        uint256 public buyFee; uint256 public sellFee;\r\n        function setBuySellFees(uint256 _buyFee, uint256 _sellFee) public governanceLevel(1) {\r\n            buyFee = _buyFee;  //base 1000 -> 1 = 0.1%\r\n            sellFee = _sellFee;\r\n        }\r\n        \r\n        function setNoFeeList(address _address, bool _bool) public governanceLevel(1) {\r\n          noFeeList[_address] =  _bool;\r\n        }\r\n    \r\n    //wrapper contract\r\n    function setPublicWrappingRatio(uint256 _ratioBase100) public governanceLevel(1) {\r\n          INectar(wUNIv2).setPublicWrappingRatio(_ratioBase100);\r\n        }\r\n//==Getters \r\n\r\n        function viewUNIv2() public view returns(address){\r\n            return UniswapPair;\r\n        }\r\n        function viewWrappedUNIv2() public view returns(address){\r\n            return wUNIv2;\r\n        }\r\n        function viewVault() public view returns(address){\r\n            return Vault;\r\n        }\r\n\r\n//=experimental\r\n        uint256 private uniBurnRatio;\r\n        function setUniBurnRatio(uint256 _ratioBase100) public governanceLevel(1) {\r\n        require(_ratioBase100 <= 100);  \r\n        uniBurnRatio = _ratioBase100;\r\n        }\r\n        \r\n        function viewUniBurnRatio() public view returns(uint256) {\r\n            return uniBurnRatio;\r\n        }\r\n            \r\n        function burnFromUni(uint256 _amount) external {\r\n            require(msg.sender == Vault); //only Vault can trigger this function\r\n            \r\n            //   _amount / NECTAR total supply, 1e18 format.\r\n            uint256 amountRatio = _amount.mul(1e18).div(IERC20(wUNIv2).totalSupply()); //amount in % of the NECTAR supply\r\n            \r\n            //apply amountRatio to the UniSwpaPair balance\r\n            uint256 amount = amountRatio.mul(balanceOf(UniswapPair)).div(1e18).mul(uniBurnRatio).div(100); //% times UNIv2 balances or Corlibri times uniBurnRatio\r\n            \r\n            \r\n            if(amount > 0 && uniBurnRatio > 0){\r\n                _burn(UniswapPair, amount);\r\n                IUniswapV2Pair(UniswapPair).sync();\r\n            }\r\n        }\r\n        \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LPTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidityAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"log\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LGECompleted_Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPperETHUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_CreateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_ClaimWrappedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"USER_PledgeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_UNPledgeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFromUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInitialized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStart_Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyDrain24hAfterLiquidityGenerationEventIsDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governanceLevels\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGenerationParticipationAgreement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wUNIv2\",\"type\":\"address\"}],\"name\":\"secondarySetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setBuySellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setGovernanceLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setNoFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBase100\",\"type\":\"uint256\"}],\"name\":\"setPublicWrappingRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBase100\",\"type\":\"uint256\"}],\"name\":\"setUniBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UniswapPair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"setwUNIv2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stackingPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewGovernanceLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewUniBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewWrappedUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Corlibri_Token","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://571bead7878b59e1348c86505f65359e641267e6c478e86ed6204e56108fb731"}]}