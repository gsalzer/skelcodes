{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n\r\n    function decimals() external view returns (uint digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/kyber/KyberNetworkProxyInterface.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns (uint);\r\n\r\n    function getUserCapInWei(address user) external view returns (uint);\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns (uint);\r\n\r\n    function enabled() external view returns (bool);\r\n\r\n    function info(bytes32 id) external view returns (uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n    returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns (uint);\r\n}\r\n\r\n// File: contracts/community/IDonationCommunity.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface IDonationCommunity {\r\n\r\n    function donateDelegated(address payable _donator) external payable;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function charityVault() external view returns (address);\r\n}\r\n\r\n// File: contracts/kyber/KyberConverter.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract KyberConverter is Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    KyberNetworkProxyInterface public kyberNetworkProxyContract;\r\n    address public walletId;\r\n\r\n    // Events\r\n    event Swap(address indexed sender, ERC20 srcToken, ERC20 destToken);\r\n\r\n    /**\r\n     * @dev Payable fallback to receive ETH while converting\r\n     **/\r\n    function() external payable {\r\n    }\r\n\r\n    constructor (KyberNetworkProxyInterface _kyberNetworkProxyContract, address _walletId) public {\r\n        kyberNetworkProxyContract = _kyberNetworkProxyContract;\r\n        walletId = _walletId;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the conversion rate for the destToken given the srcQty.\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param destToken destination token contract address\r\n     */\r\n    function getConversionRates(\r\n        ERC20 srcToken,\r\n        uint srcQty,\r\n        ERC20 destToken\r\n    ) public\r\n    view\r\n    returns (uint, uint)\r\n    {\r\n        return kyberNetworkProxyContract.getExpectedRate(srcToken, destToken, srcQty);\r\n    }\r\n\r\n    /**\r\n     * @dev Swap the user's ERC20 token to ETH\r\n     * Note: requires 'approve' srcToken first!\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     */\r\n    function executeSwapMyERCToETH(ERC20 srcToken, uint srcQty) public {\r\n        swapERCToETH(srcToken, srcQty, msg.sender);\r\n        emit Swap(msg.sender, srcToken, ETH_TOKEN_ADDRESS);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Swap the user's ERC20 token to ETH and donates to the community.\r\n     * Note: requires 'approve' srcToken first!\r\n     * @param srcToken source token contract address\r\n     * @param srcQty amount of source tokens\r\n     * @param community address of the donation community\r\n     */\r\n    function executeSwapAndDonate(ERC20 srcToken, uint srcQty, IDonationCommunity community) public {\r\n        swapERCToETH(srcToken, srcQty, address(this));\r\n        // donate ETH to the community\r\n        community.donateDelegated.value(address(this).balance)(msg.sender);\r\n        emit Swap(msg.sender, srcToken, ETH_TOKEN_ADDRESS);\r\n    }\r\n\r\n    function swapERCToETH(ERC20 srcToken, uint srcQty, address destAddress) internal {\r\n        uint minConversionRate;\r\n\r\n        // Check that the token transferFrom has succeeded\r\n        require(srcToken.transferFrom(msg.sender, address(this), srcQty));\r\n\r\n        // Set the spender's token allowance to tokenQty\r\n        require(srcToken.approve(address(kyberNetworkProxyContract), srcQty));\r\n\r\n        // Get the minimum conversion rate\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(srcToken, ETH_TOKEN_ADDRESS, srcQty);\r\n        // -5% max\r\n        minConversionRate = minConversionRate.mul(95).div(100);\r\n        // +5% max\r\n        uint maxDestAmount = srcQty.mul(minConversionRate).mul(105).div(100);\r\n\r\n        // Swap the ERC20 token and send to 'this' contract address\r\n        bytes memory hint;\r\n        uint256 amount = kyberNetworkProxyContract.tradeWithHint(\r\n            srcToken,\r\n            srcQty,\r\n            ETH_TOKEN_ADDRESS,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n\r\n        // Return the change of src token\r\n        uint256 change = srcToken.balanceOf(address(this));\r\n\r\n        if (change > 0) {\r\n            require(\r\n                srcToken.transfer(msg.sender, change),\r\n                \"Could not transfer change to sender\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function executeSwapMyETHToERC(address _ercAddress) public payable returns (uint256) {\r\n        uint minConversionRate;\r\n        uint srcQty = msg.value;\r\n        address destAddress = msg.sender;\r\n        ERC20 ercToken = ERC20(_ercAddress);\r\n\r\n        // Get the minimum conversion rate\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(ETH_TOKEN_ADDRESS, ercToken, srcQty);\r\n\r\n        uint maxDestAmount = srcQty.mul(minConversionRate).mul(105).div(100);\r\n        // 5%\r\n\r\n        // Swap the ERC20 token and send to destAddress\r\n        bytes memory hint;\r\n        uint256 amount = kyberNetworkProxyContract.tradeWithHint.value(srcQty)(\r\n            ETH_TOKEN_ADDRESS,\r\n            srcQty,\r\n            ercToken,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n        // Return the change of ETH if any\r\n        uint256 change = address(this).balance;\r\n        if (change > 0) {\r\n            address(msg.sender).transfer(change);\r\n        }\r\n        // Log the event\r\n        emit Swap(msg.sender, ETH_TOKEN_ADDRESS, ercToken);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Recovery for the remaining change\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        require(address(this).balance > 0, \"Insufficient funds to withdraw\");\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"getConversionRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ercAddress\",\"type\":\"address\"}],\"name\":\"executeSwapMyETHToERC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"},{\"name\":\"community\",\"type\":\"address\"}],\"name\":\"executeSwapAndDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcToken\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"executeSwapMyERCToETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyberNetworkProxyContract\",\"type\":\"address\"},{\"name\":\"_walletId\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KyberConverter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000ddc0e4931936d9f590ccb29f7f4758751479d0a8","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e621c70882d0ca556c61cd5371e37372c3f5b466b35618510ef985c5b1e29447"}]}