{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n// \n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\n// \ncontract Pausable is Ownable {\r\n    bool pause;\r\n    \r\n    constructor() public {\r\n        pause = false;\r\n    }\r\n    \r\n    function setPauseStatus(bool _pauseStatus) public onlyOwner {\r\n        pause = _pauseStatus;\r\n    }\r\n    \r\n    function getPauseStatus() view public returns(bool)  {\r\n        return pause;\r\n    }\r\n    \r\n    modifier isPaused() {\r\n        require(pause==false, \"The system is paused\");\r\n        _;\r\n    }\r\n}\n\n// \nabstract contract AtomicProxyInterface {\r\n    function checkAddresses(address _dappAddressOne, address _dappAddressTwo) public virtual;\r\n    function safeTransferFrom(address _dapp, address _from, address _to, uint256 _tokenId) public virtual;\r\n    function safeTransferFrom(uint256 _amount, address _dapp, address _from, address _to, uint256 _tokenId) public virtual; // Axie safeTransferFrom\r\n}\n\nabstract contract ERC721Interface {\r\n  function approve(address to, uint256 tokenId) public virtual;\r\n}\n\ncontract AtomicSwap is IERC721Receiver, Ownable, Pausable {\r\n    // Importo i contatori\r\n    using Counters for Counters.Counter;\r\n    // Costanti per gestire il tempo in formato unix timestamp\r\n    uint256 constant secs = 86400;\r\n\r\n    // Axie's Infinity Address\r\n    address axieAddress;\r\n\r\n    // CryptoKitties Address\r\n    address cryptoKittiesAddress;\r\n\r\n    // Dichiaro contatori\r\n    Counters.Counter private _swapIds;\r\n\r\n    // Flag per gestire la create swap\r\n    bool private swapFlag;\r\n    \r\n    // Stato dello swap\r\n    enum swapStatus { Opened, Closed, Cancelled }\r\n    \r\n    // Rappresentazione dello swap\r\n    struct swapIntent {\r\n        Counters.Counter id;\r\n        address nftOwnerOne;\r\n        address dappAddressOne;\r\n        uint256 nftTokenIdOne;\r\n        address nftOwnerTwo;\r\n        address dappAddressTwo;\r\n        uint256 nftTokenIdTwo;\r\n        uint256 swapStart;\r\n        uint256 swapEnd;\r\n        swapStatus status;\r\n    }\r\n    \r\n    struct paymentStruct {\r\n        bool status;\r\n        uint256 value;\r\n    }\r\n    \r\n    // Mapping chiave/valore per ottenere le informazioni sullo swap\r\n    mapping (address => swapIntent[]) swapList;\r\n    mapping (address => Counters.Counter) swapCount;\r\n    \r\n    address public proxyAddress;\r\n    AtomicProxyInterface proxyInterface;\r\n    ERC721Interface erc721Interface;\r\n    paymentStruct payment;\r\n    \r\n    \r\n    // Events\r\n    event swapEvent(address indexed _creator, uint256 indexed time, swapStatus indexed _status, uint256 _swapId, address _swapCounterPart);\r\n    event paymentReceived(address indexed _payer, uint256 _value);\r\n    \r\n    constructor() public {\r\n        axieAddress=address(0);\r\n        cryptoKittiesAddress=address(0);\r\n        payment.status=false;\r\n        payment.value=0;\r\n    }\r\n\r\n    // Questa chiamata ogni qual volta vengono inviati degli ethereum con il calldata empty\r\n    receive() external payable { \r\n        emit paymentReceived(msg.sender, msg.value);\r\n    }\r\n    \r\n    // Creo lo swap\r\n    function createSwapIntent(address _dappAddressOne, uint256 _tokenIdOne, address _dappAddressTwo, uint256 _tokenIdTwo) payable public isPaused {\r\n        swapFlag = false;\r\n        if((_dappAddressOne == _dappAddressTwo) && (_tokenIdOne == _tokenIdTwo))\r\n            swapFlag = true;\r\n            require(swapFlag==false, \"Impossible to swap the same item\");\r\n        if(payment.status)\r\n            require(msg.value>=payment.value, \"Not enought WEI for handle the transaction\");\r\n        proxyInterface.checkAddresses(_dappAddressOne, _dappAddressTwo);\r\n        _swapIds = swapCount[msg.sender];\r\n        swapList[msg.sender].push(swapIntent(_swapIds, msg.sender, _dappAddressOne, _tokenIdOne, address(0), _dappAddressTwo, _tokenIdTwo, block.timestamp, 0, swapStatus.Opened));\r\n        \r\n        // Controllo se l'address è quello di Axie Infinity o CryptoKitties\r\n        if(_dappAddressOne != axieAddress && _dappAddressOne != cryptoKittiesAddress)\r\n            proxyInterface.safeTransferFrom(_dappAddressOne, msg.sender, address(this), _tokenIdOne);\r\n        else\r\n            proxyInterface.safeTransferFrom(0, _dappAddressOne, msg.sender, address(this), _tokenIdOne);\r\n\r\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Opened, _swapIds.current(), address(0));\r\n        emit paymentReceived(msg.sender, msg.value);\r\n        _swapIds.increment();\r\n        swapCount[msg.sender] = _swapIds;\r\n    }\r\n    \r\n    // Concludo lo swap\r\n    function closeSwapIntent(address _swapCreator, uint256 _swapId) payable public isPaused {\r\n        require(swapList[_swapCreator][_swapId].status == swapStatus.Opened, \"Swap Status is not opened\");\r\n        if(payment.status)\r\n            require(msg.value>=payment.value, \"Not enought WEI for handle the transaction\");\r\n        swapList[_swapCreator][_swapId].nftOwnerTwo = msg.sender;\r\n        swapList[_swapCreator][_swapId].swapEnd = block.timestamp;\r\n        swapList[_swapCreator][_swapId].status = swapStatus.Closed;\r\n\r\n        // Controllo se l'address è quello di Axie Infinity o CryptoKitties\r\n        if(swapList[_swapCreator][_swapId].dappAddressTwo != axieAddress && swapList[_swapCreator][_swapId].dappAddressTwo != cryptoKittiesAddress)\r\n            proxyInterface.safeTransferFrom(swapList[_swapCreator][_swapId].dappAddressTwo, msg.sender, swapList[_swapCreator][_swapId].nftOwnerOne, swapList[_swapCreator][_swapId].nftTokenIdTwo);\r\n        else\r\n            proxyInterface.safeTransferFrom(0, swapList[_swapCreator][_swapId].dappAddressTwo, msg.sender, swapList[_swapCreator][_swapId].nftOwnerOne, swapList[_swapCreator][_swapId].nftTokenIdTwo);\r\n        \r\n        \r\n        erc721Interface = ERC721Interface(swapList[_swapCreator][_swapId].dappAddressOne);\r\n\r\n        // Controllo se l'address è quello di Axie Infinity o CryptoKitties\r\n        if(swapList[_swapCreator][_swapId].dappAddressOne != axieAddress && swapList[_swapCreator][_swapId].dappAddressOne != cryptoKittiesAddress) {\r\n            erc721Interface.approve(proxyAddress, swapList[_swapCreator][_swapId].nftTokenIdOne);\r\n            proxyInterface.safeTransferFrom(swapList[_swapCreator][_swapId].dappAddressOne, address(this), swapList[_swapCreator][_swapId].nftOwnerTwo, swapList[_swapCreator][_swapId].nftTokenIdOne);\r\n        }\r\n        else {\r\n            if(swapList[_swapCreator][_swapId].dappAddressOne == axieAddress) {\r\n                (bool success,  ) = axieAddress.call{value: 0}(abi.encodeWithSignature(\"approve(address,uint256)\",proxyAddress, swapList[_swapCreator][_swapId].nftTokenIdOne));\r\n                require(success, \"Contract execution Failed\");\r\n            }\r\n            if(swapList[_swapCreator][_swapId].dappAddressOne == cryptoKittiesAddress) {\r\n                (bool success,  ) = cryptoKittiesAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\",proxyAddress, swapList[_swapCreator][_swapId].nftTokenIdOne));\r\n                require(success, \"Contract execution Failed\");\r\n            }\r\n            proxyInterface.safeTransferFrom(0, swapList[_swapCreator][_swapId].dappAddressOne, address(this), swapList[_swapCreator][_swapId].nftOwnerTwo, swapList[_swapCreator][_swapId].nftTokenIdOne);\r\n        }\r\n        \r\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Closed, _swapId, _swapCreator);\r\n        emit paymentReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    // Cancello lo swap\r\n    function cancelSwapIntent(uint256 _swapId) public {\r\n        require(swapList[msg.sender][_swapId].status == swapStatus.Opened, \"Swap Status is not opened\");\r\n        erc721Interface = ERC721Interface(swapList[msg.sender][_swapId].dappAddressOne);\r\n        \r\n        // Controllo se l'address è quello di Axie Infinity o CryptoKitties\r\n        if(swapList[msg.sender][_swapId].dappAddressOne != axieAddress && swapList[msg.sender][_swapId].dappAddressOne != cryptoKittiesAddress) {\r\n            erc721Interface.approve(proxyAddress, swapList[msg.sender][_swapId].nftTokenIdOne);\r\n            proxyInterface.safeTransferFrom(swapList[msg.sender][_swapId].dappAddressOne, address(this), msg.sender, swapList[msg.sender][_swapId].nftTokenIdOne);\r\n        }\r\n        else {\r\n            if(swapList[msg.sender][_swapId].dappAddressOne == axieAddress) {\r\n                (bool success,  ) = axieAddress.call{value: 0}(abi.encodeWithSignature(\"approve(address,uint256)\",proxyAddress, swapList[msg.sender][_swapId].nftTokenIdOne));\r\n                require(success, \"Contract execution Failed\");\r\n            }\r\n            if(swapList[msg.sender][_swapId].dappAddressOne == cryptoKittiesAddress) {\r\n                (bool success,  ) = cryptoKittiesAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\",proxyAddress, swapList[msg.sender][_swapId].nftTokenIdOne));\r\n                require(success, \"Contract execution Failed\");\r\n            }\r\n            proxyInterface.safeTransferFrom(0, swapList[msg.sender][_swapId].dappAddressOne, address(this), msg.sender, swapList[msg.sender][_swapId].nftTokenIdOne);\r\n        }      \r\n\r\n        swapList[msg.sender][_swapId].swapEnd = block.timestamp;\r\n        swapList[msg.sender][_swapId].status = swapStatus.Cancelled;\r\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Cancelled, _swapId, address(0));\r\n    }\r\n    \r\n    //FIXME: SERVE? Si attiva quando viene utilizzata la SafeTransfer\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external override returns (bytes4) {\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n    \r\n    // Abbino l'indirizzo all'interfaccia del proxy\r\n    function setProxyAddress(address _proxyAddress) public onlyOwner isPaused {\r\n        proxyAddress = _proxyAddress;\r\n        proxyInterface = AtomicProxyInterface(_proxyAddress);\r\n    }\r\n    \r\n    // Setto il pagamento\r\n    function setPayment(bool _status, uint256 _value) public onlyOwner isPaused {\r\n        payment.status = _status;\r\n        payment.value = _value * (1 wei);\r\n    }\r\n\r\n    // Setto l'address di Axie Infinity\r\n    function setAxieAddress(address _axieAddress) public onlyOwner isPaused {\r\n        axieAddress = _axieAddress;\r\n    }\r\n\r\n    // Setto l'address di Crypto Kitties\r\n    function setKittieAddress(address _cryptoKittiesAddress) public onlyOwner isPaused {\r\n        cryptoKittiesAddress = _cryptoKittiesAddress;\r\n    }\r\n    \r\n    // Ottengo l'importo di WEI settato\r\n    function getWeiPayValueAmount() public view returns(uint256) {\r\n        return payment.value;\r\n    }\r\n    \r\n    // Ottengo il numero di swap legati a questo indirizzo\r\n    function getSwapCount() public view returns(uint256) {\r\n        return swapCount[msg.sender].current();\r\n    }\r\n    \r\n    // Ottengo lo swap indicato\r\n    function getSwapIntentByAddress(address _creator, uint256 _index) public view returns(swapIntent memory) {\r\n        return swapList[_creator][_index];\r\n    }\r\n\r\n    // Ottengo gli swap dell'owner passando l'id\r\n    function getSwapIntentByOwner(uint256 _index) public view returns(swapIntent memory) {\r\n        return swapList[msg.sender][_index];\r\n    }\r\n\r\n    // Ottengo il balance dello smart contract\r\n    function getVaultBalance() public view onlyOwner isPaused returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Sposto il balance dello smart contract\r\n    function sendVaultBalance(uint256 _amount, address payable _receiver) public onlyOwner isPaused {\r\n        require(address(this).balance>= _amount, \"Not enought WEI in the balance\");\r\n        _receiver.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"paymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AtomicSwap.swapStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapCounterPart\",\"type\":\"address\"}],\"name\":\"swapEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"cancelSwapIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"closeSwapIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappAddressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdOne\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dappAddressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdTwo\",\"type\":\"uint256\"}],\"name\":\"createSwapIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSwapIntentByAddress\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"nftOwnerOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dappAddressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenIdOne\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftOwnerTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dappAddressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenIdTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapEnd\",\"type\":\"uint256\"},{\"internalType\":\"enum AtomicSwap.swapStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct AtomicSwap.swapIntent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSwapIntentByOwner\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"nftOwnerOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dappAddressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenIdOne\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftOwnerTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dappAddressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenIdTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapEnd\",\"type\":\"uint256\"},{\"internalType\":\"enum AtomicSwap.swapStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct AtomicSwap.swapIntent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeiPayValueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"sendVaultBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axieAddress\",\"type\":\"address\"}],\"name\":\"setAxieAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoKittiesAddress\",\"type\":\"address\"}],\"name\":\"setKittieAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pauseStatus\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"setProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AtomicSwap","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}