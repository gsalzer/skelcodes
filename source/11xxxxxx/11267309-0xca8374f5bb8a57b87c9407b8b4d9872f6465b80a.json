{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.4;\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a < b) {\r\n            return b - a;\r\n        }\r\n        return a - b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface Executor {\r\n    function execute(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface IMintable {\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\ncontract KunWrapper {\r\n    using SafeMath for uint256;\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice 总锁仓量\r\n    uint256 private _totalSupply;\r\n\r\n    /// @notice 用户锁仓量\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /// @notice kun 代币的地址\r\n    address public kun;\r\n\r\n    /// @notice 总锁仓量\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @notice 用户锁仓量\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /// @notice 质押\r\n    function stake(uint256 amount) public virtual {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        IERC20(kun).safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /// @notice 退出质押\r\n    function withdraw(uint256 amount) public virtual {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        IERC20(kun).safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract KunStakePool is KunWrapper, Initializable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice 管理员\r\n    address public owner;\r\n\r\n    /// @notice 活动开始时间\r\n    uint256 public startTime;\r\n\r\n    /// @notice 活动结束事件\r\n    uint256 public periodFinish;\r\n\r\n    /// @notice 上次更新时间\r\n    uint256 public lastUpdateTime;\r\n\r\n    /// @notice 每单位的 token 获得的奖励值\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    /// @notice 双周时间\r\n    uint256 public DW_TIME;\r\n\r\n    /// @notice 持续时间\r\n    uint256 public DURATION;\r\n\r\n    /// @notice 用户每单位的 token 已获得的奖励值\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n\r\n    /// @notice 用户获得的奖励\r\n    mapping(address => uint256) public rewards;\r\n\r\n    /// @notice 索引 => 提案\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice 用户地址 => 可投票数量\r\n    mapping(address => uint256) public votes;\r\n\r\n    /// @notice 用户地址 => 是否注册投票\r\n    mapping(address => bool) public voters;\r\n\r\n    /// @notice 用户地址 => 用户持仓锁定时间\r\n    mapping(address => uint256) public voteLock;\r\n\r\n    /// @notice 票仓总量\r\n    uint256 public totalVotes;\r\n\r\n    /// @notice 提案数量\r\n    uint256 public proposalCount;\r\n\r\n    /// @notice 合约控制\r\n    bool public breaker;\r\n\r\n    /// @notice 投票锁定期限\r\n    uint256 public lock;\r\n\r\n    /// @notice 投票人数占比\r\n    uint256 public quorum;\r\n\r\n    /// @notice 发起提案所需的锁仓最小数量\r\n    uint256 public minimum;\r\n\r\n    /// @notice 提案开放时长\r\n    uint256 public period; // voting period in blocks\r\n\r\n    /// @notice 双周信息\r\n    /// @param startTime 开始时间\r\n    /// @param totalStake 总质押量\r\n    /// @param stakeTarget 质押目标\r\n    /// @param totalReward 总奖励\r\n    /// @param rewardRate 奖励分发速率\r\n    struct DWInfo {\r\n        uint256 startTime;\r\n        uint256 totalStake;\r\n        uint256 stakeTarget;\r\n        uint256 totalReward;\r\n        uint256 rewardRate;\r\n    }\r\n\r\n    /// @notice 提案信息\r\n    /// @param id 提案id\r\n    /// @param proposer 发起人\r\n    /// @param forVotes 赞成票：用户地址 => 投票数量\r\n    /// @param againstVotes 反对票：用户地址 => 投票数量\r\n    /// @param totalForVotes 赞成票总数\r\n    /// @param totalAgainstVotes 反对票总数\r\n    /// @param start 提案开始区块\r\n    /// @param end 提案结束区块\r\n    /// @param executor 执行合约\r\n    /// @param hash 提案内容信息\r\n    /// @param totalVotesAvailable 票仓总量\r\n    /// @param quorum 投票人数占比\r\n    /// @param quorumRequired 提案通过所需的人数占比\r\n    /// @param open 提案是否开启\r\n    struct Proposal {\r\n        uint256 id;\r\n        address proposer;\r\n        mapping(address => uint256) forVotes;\r\n        mapping(address => uint256) againstVotes;\r\n        uint256 totalForVotes;\r\n        uint256 totalAgainstVotes;\r\n        uint256 start; // block start;\r\n        uint256 end; // start + period\r\n        address executor;\r\n        string hash;\r\n        uint256 totalVotesAvailable;\r\n        uint256 quorum;\r\n        uint256 quorumRequired;\r\n        bool open;\r\n    }\r\n\r\n    /// @notice 双周数 => 双周信息\r\n    mapping(uint256 => DWInfo) public dwInfo;\r\n\r\n    /// @dev 防止重入\r\n    bool internal _notEntered;\r\n\r\n    /// @notice 事件：管理员取回合约中的所有余额\r\n    /// @param kun kun 代币地址\r\n    /// @param balance 余额\r\n    event ClaimTokens(address kun, uint256 balance);\r\n\r\n    /// @notice 事件：用户质押\r\n    /// @param user 用户地址\r\n    /// @param amount 质押数量\r\n    event Staked(address indexed user, uint256 amount);\r\n\r\n    /// @notice 事件：用户取回一定数量的质押\r\n    /// @param user 用户地址\r\n    /// @param amount 质押数量\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    /// @notice 事件：奖励分发\r\n    /// @param user 用户地址\r\n    /// @param reward 奖励分发数量\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    /// @notice 事件：新提案\r\n    /// @param id 提案id\r\n    /// @param creator 创建人\r\n    /// @param start 开始区块\r\n    /// @param duration 时长\r\n    /// @param executor 执行合约\r\n    event NewProposal(\r\n        uint256 id,\r\n        address creator,\r\n        uint256 start,\r\n        uint256 duration,\r\n        address executor\r\n    );\r\n\r\n    /// @notice 事件：新提案\r\n    /// @param voter 投票人\r\n    /// @param votes 用户可投票数量\r\n    /// @param totalVotes 总票仓\r\n    event RegisterVoter(address voter, uint256 votes, uint256 totalVotes);\r\n\r\n    /// @notice 事件：撤销投票权限\r\n    /// @param voter 投票人\r\n    /// @param votes 用户可投票数量\r\n    /// @param totalVotes 总票仓\r\n    event RevokeVoter(address voter, uint256 votes, uint256 totalVotes);\r\n\r\n    /// @notice 事件：投票\r\n    /// @param id 提案id\r\n    /// @param voter 投票人\r\n    /// @param vote 是否赞成\r\n    /// @param weight 投票权重\r\n    event Vote(\r\n        uint256 indexed id,\r\n        address indexed voter,\r\n        bool vote,\r\n        uint256 weight\r\n    );\r\n\r\n    /// @notice 事件：提案结束\r\n    /// @param id 提案id\r\n    /// @param _for 同意数量占比\r\n    /// @param _against 反对数量占比\r\n    /// @param quorumReached 是否通过\r\n    event ProposalFinished(\r\n        uint256 indexed id,\r\n        uint256 _for,\r\n        uint256 _against,\r\n        bool quorumReached\r\n    );\r\n\r\n    /// @notice 初始化函数\r\n    /// @param _owner 管理员地址\r\n    /// @param _kun kun 代币地址\r\n    /// @param _startTime 活动开始时间\r\n    function initialize(\r\n        address _owner,\r\n        address _kun,\r\n        uint256 _startTime\r\n    ) public initializer {\r\n        owner = _owner;\r\n        kun = _kun;\r\n        startTime = _startTime;\r\n        periodFinish = startTime.add(DURATION);\r\n        period = 17280; // voting period in blocks\r\n        lock = 17280; // vote lock in block\r\n        minimum = 1000000000000000000;\r\n        quorum = 2000;\r\n        breaker = false;\r\n        _notEntered = true;\r\n        DW_TIME = 14 days;\r\n        DURATION = 672 days;\r\n    }\r\n\r\n    modifier checkStart() {\r\n        require(block.timestamp > startTime, \"not start\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        if (block.timestamp >= startTime) {\r\n            rewardPerTokenStored = rewardPerToken();\r\n            lastUpdateTime = lastTimeRewardApplicable();\r\n            if (account != address(0)) {\r\n                rewards[account] = earned(account);\r\n                userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"re-entered\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice 设置管理员\r\n    /// @param _owner 新管理员\r\n    function setOwner(address _owner) public onlyOwner {\r\n        require(msg.sender == owner, \"!owner\");\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice 获取时间\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /// @notice 计算每个 token 可以获得奖励数量（涉及到更新数据）\r\n    function rewardPerToken() internal returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        uint256 res = rewardPerTokenStored;\r\n        uint256 currentDWNumber = getDoubleWeekNumber(\r\n            lastTimeRewardApplicable()\r\n        );\r\n        if (currentDWNumber == 1) {\r\n            // 第一个双周\r\n            res = res.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(dwInfo[1].rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply()) //\r\n            );\r\n        } else {\r\n            // 获取上次操作的双周数\r\n            uint256 lastOpDWNumber = getDoubleWeekNumber(lastUpdateTime);\r\n            if (lastOpDWNumber < currentDWNumber) {\r\n                // 如果上次操作时间与本次操作时间不在同一 +双周+ 内，那么会有两种情况\r\n                // 1、上次操作的 +双周+ 与 本次操作的 +双周+ 相连\r\n                // 即上次操作是在第 n 个双周，本次是在第 n + 1 个双周\r\n\r\n                // 这里是更新第 n 的双周时，操作时间与 n 的结束时间的 rewardPerToken\r\n                res = res.add(\r\n                    dwInfo[lastOpDWNumber + 1]\r\n                        .startTime\r\n                        .sub(lastUpdateTime)\r\n                        .mul(dwInfo[lastOpDWNumber].rewardRate)\r\n                        .mul(1e18)\r\n                        .div(totalSupply())\r\n                );\r\n                dwInfo[lastOpDWNumber].totalStake = totalSupply();\r\n                // 2、上次操作的 +双周+ 与 本次操作的 +双周+ 中间相隔 m 个 +双周+\r\n                // 即上次操作是在第 n 个双周，本次是在第 n + m 个双周（m > 1）\r\n\r\n                // 这里是更新第 n 的双周后，m 个双周的 rewardPerToken\r\n                for (uint256 i = lastOpDWNumber + 1; i < currentDWNumber; ++i) {\r\n                    DWInfo memory lastOpDWInfo = dwInfo[i - 1];\r\n                    // DWInfo memory lastDWInfo = dwInfo[i];\r\n\r\n                    uint256 lastRewardRate = (\r\n                        lastOpDWInfo.totalStake >= lastOpDWInfo.stakeTarget\r\n                            ? dwInfo[i].totalReward\r\n                            : lastOpDWInfo\r\n                                .totalStake\r\n                                .mul(dwInfo[i].totalReward)\r\n                                .div(lastOpDWInfo.stakeTarget)\r\n                    ) / DW_TIME;\r\n\r\n                    dwInfo[i].rewardRate = lastRewardRate;\r\n                    dwInfo[i].totalStake = totalSupply();\r\n\r\n                    res = res.add(\r\n                        DW_TIME.mul(dwInfo[i].rewardRate).mul(1e18).div(\r\n                            totalSupply()\r\n                        )\r\n                    );\r\n                }\r\n                lastUpdateTime = dwInfo[currentDWNumber].startTime;\r\n                // 这里是根据上个 +双周+ 的数据计算本次 +双周+ 的 rewardRate\r\n                DWInfo memory prevDWInfo = dwInfo[currentDWNumber - 1];\r\n                uint256 currentRewardRate = (\r\n                    prevDWInfo.totalStake >= prevDWInfo.stakeTarget\r\n                        ? dwInfo[currentDWNumber].totalReward\r\n                        : prevDWInfo\r\n                            .totalStake\r\n                            .mul(dwInfo[currentDWNumber].totalReward)\r\n                            .div(prevDWInfo.stakeTarget)\r\n                ) / DW_TIME;\r\n                dwInfo[currentDWNumber].rewardRate = currentRewardRate;\r\n            }\r\n            // 更新本个双周内，上次更新时间到本次时间的 rewardPerToken\r\n            res = res.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(dwInfo[currentDWNumber].rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /// @notice 计算每个 token 可以获得奖励数量（不更新数据，用于显示）\r\n    function readRewardPerToken() public view returns (uint256) {\r\n        if (block.timestamp < startTime) {\r\n            return 0;\r\n        }\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        uint256 res = rewardPerTokenStored;\r\n        uint256 currentDWNumber = getDoubleWeekNumber(\r\n            lastTimeRewardApplicable()\r\n        );\r\n\r\n        DWInfo[] memory infos = new DWInfo[](currentDWNumber + 1);\r\n        uint256 tmpLastUpdateTime = lastUpdateTime;\r\n\r\n        if (currentDWNumber == 1) {\r\n            // 第一个双周\r\n            res = res.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(tmpLastUpdateTime)\r\n                    .mul(dwInfo[1].rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply()) //\r\n            );\r\n        } else {\r\n            for (uint256 i = 1; i <= currentDWNumber; ++i) {\r\n                infos[i] = dwInfo[i];\r\n            }\r\n\r\n            // 获取上次操作的双周数\r\n            uint256 lastOpDWNumber = getDoubleWeekNumber(tmpLastUpdateTime);\r\n            if (lastOpDWNumber < currentDWNumber) {\r\n                // 如果上次操作时间与本次操作时间不在同一 +双周+ 内，那么会有两种情况\r\n                // 1、上次操作的 +双周+ 与 本次操作的 +双周+ 相连\r\n                // 即上次操作是在第 n 个双周，本次是在第 n + 1 个双周\r\n\r\n                // 这里是更新第 n 的双周时，操作时间与 n 的结束时间的 rewardPerToken\r\n                res = res.add(\r\n                    infos[lastOpDWNumber + 1]\r\n                        .startTime\r\n                        .sub(tmpLastUpdateTime)\r\n                        .mul(infos[lastOpDWNumber].rewardRate)\r\n                        .mul(1e18)\r\n                        .div(totalSupply())\r\n                );\r\n                infos[lastOpDWNumber].totalStake = totalSupply();\r\n                // 2、上次操作的 +双周+ 与 本次操作的 +双周+ 中间相隔 m 个 +双周+\r\n                // 即上次操作是在第 n 个双周，本次是在第 n + m 个双周（m > 1）\r\n\r\n                // 这里是更新第 n 的双周后，m 个双周的 rewardPerToken\r\n                for (uint256 i = lastOpDWNumber + 1; i < currentDWNumber; ++i) {\r\n                    DWInfo memory lastOpDWInfo = infos[i - 1];\r\n                    // DWInfo memory lastDWInfo = infos[i];\r\n\r\n                    uint256 lastRewardRate = (\r\n                        lastOpDWInfo.totalStake >= lastOpDWInfo.stakeTarget\r\n                            ? infos[i].totalReward\r\n                            : lastOpDWInfo\r\n                                .totalStake\r\n                                .mul(infos[i].totalReward)\r\n                                .div(lastOpDWInfo.stakeTarget)\r\n                    ) / DW_TIME;\r\n\r\n                    infos[i].rewardRate = lastRewardRate;\r\n                    infos[i].totalStake = totalSupply();\r\n\r\n                    res = res.add(\r\n                        DW_TIME.mul(infos[i].rewardRate).mul(1e18).div(\r\n                            totalSupply()\r\n                        )\r\n                    );\r\n                }\r\n                tmpLastUpdateTime = infos[currentDWNumber].startTime;\r\n                // 这里是根据上个 +双周+ 的数据计算本次 +双周+ 的 rewardRate\r\n                DWInfo memory prevDWInfo = infos[currentDWNumber - 1];\r\n                uint256 currentRewardRate = (\r\n                    prevDWInfo.totalStake >= prevDWInfo.stakeTarget\r\n                        ? dwInfo[currentDWNumber].totalReward\r\n                        : prevDWInfo\r\n                            .totalStake\r\n                            .mul(dwInfo[currentDWNumber].totalReward)\r\n                            .div(prevDWInfo.stakeTarget)\r\n                ) / DW_TIME;\r\n                infos[currentDWNumber].rewardRate = currentRewardRate;\r\n            }\r\n            // 更新本个双周内，上次更新时间到本次时间的 rewardPerToken\r\n            res = res.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(tmpLastUpdateTime)\r\n                    .mul(infos[currentDWNumber].rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /// @notice 计算用户可以获得的奖励数量\r\n    function earned(address account) internal returns (uint256) {\r\n        return\r\n            balanceOf(account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    /// @notice 计算用户可以获得的奖励数量（用于页面显示）\r\n    function readEarned(address account) public view returns (uint256) {\r\n        if (block.timestamp < startTime) {\r\n            return 0;\r\n        }\r\n        return\r\n            balanceOf(account)\r\n                .mul(readRewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    /// @notice 设置合约控制\r\n    /// @param _breaker 合约控制\r\n    function setBreaker(bool _breaker) external onlyOwner {\r\n        breaker = _breaker;\r\n    }\r\n\r\n    /// @notice 设置投票人数占比\r\n    /// @param _quorum 合约控制\r\n    function setQuorum(uint256 _quorum) public onlyOwner {\r\n        quorum = _quorum;\r\n    }\r\n\r\n    /// @notice 设置提案最小锁仓限制\r\n    /// @param _minimum 最小锁仓限制\r\n    function setMinimum(uint256 _minimum) public onlyOwner {\r\n        minimum = _minimum;\r\n    }\r\n\r\n    /// @notice 设置提案开放时长\r\n    /// @param _period 提案开放时长\r\n    function setPeriod(uint256 _period) public onlyOwner {\r\n        period = _period;\r\n    }\r\n\r\n    /// @notice 设置投票锁定期限\r\n    /// @param _lock 投票锁定期限\r\n    function setLock(uint256 _lock) public onlyOwner {\r\n        lock = _lock;\r\n    }\r\n\r\n    /// @notice 用户注册投票权限\r\n    function register() public {\r\n        require(voters[msg.sender] == false, \"voter\");\r\n        voters[msg.sender] = true;\r\n        votes[msg.sender] = balanceOf(msg.sender);\r\n        totalVotes = totalVotes.add(votes[msg.sender]);\r\n        emit RegisterVoter(msg.sender, votes[msg.sender], totalVotes);\r\n    }\r\n\r\n    /// @notice 用户撤销投票权限\r\n    function revoke() public {\r\n        require(voters[msg.sender] == true, \"!voter\");\r\n        voters[msg.sender] = false;\r\n        if (totalVotes < votes[msg.sender]) {\r\n            //edge case, should be impossible, but this is defi\r\n            totalVotes = 0;\r\n        } else {\r\n            totalVotes = totalVotes.sub(votes[msg.sender]);\r\n        }\r\n        emit RevokeVoter(msg.sender, votes[msg.sender], totalVotes);\r\n        votes[msg.sender] = 0;\r\n    }\r\n\r\n    /// @notice 发起提案\r\n    /// @param executor 执行合约\r\n    /// @param hash 提案内容信息\r\n    function propose(address executor, string memory hash) public {\r\n        require(votesOf(msg.sender) > minimum, \"<minimum\");\r\n        proposals[proposalCount++] = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            totalForVotes: 0,\r\n            totalAgainstVotes: 0,\r\n            start: block.number,\r\n            end: period.add(block.number),\r\n            executor: executor,\r\n            hash: hash,\r\n            totalVotesAvailable: totalVotes,\r\n            quorum: 0,\r\n            quorumRequired: quorum,\r\n            open: true\r\n        });\r\n\r\n        emit NewProposal(\r\n            proposalCount,\r\n            msg.sender,\r\n            block.number,\r\n            period,\r\n            executor\r\n        );\r\n        voteLock[msg.sender] = lock.add(block.number);\r\n    }\r\n\r\n    /// @notice 执行提案\r\n    /// @param id 提案id\r\n    function execute(uint256 id) public {\r\n        (uint256 _for, uint256 _against, uint256 _quorum) = getStats(id);\r\n        require(proposals[id].quorumRequired < _quorum, \"!quorum\");\r\n        require(proposals[id].end < block.number, \"!end\");\r\n        if (proposals[id].open == true) {\r\n            tallyVotes(id);\r\n        }\r\n        Executor(proposals[id].executor).execute(id, _for, _against, _quorum);\r\n    }\r\n\r\n    /// @notice 用户可投票数量\r\n    /// @param voter 用户地址\r\n    function votesOf(address voter) public view returns (uint256) {\r\n        return votes[voter];\r\n    }\r\n\r\n    /// @notice 获取提案的投票信息\r\n    /// @param id 提案id\r\n    function getStats(uint256 id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _for,\r\n            uint256 _against,\r\n            uint256 _quorum\r\n        )\r\n    {\r\n        _for = proposals[id].totalForVotes;\r\n        _against = proposals[id].totalAgainstVotes;\r\n\r\n        uint256 _total = _for.add(_against);\r\n        _for = _for.mul(10000).div(_total);\r\n        _against = _against.mul(10000).div(_total);\r\n\r\n        _quorum = _total.mul(10000).div(proposals[id].totalVotesAvailable);\r\n    }\r\n\r\n    /// @notice 获取用户对提案的投票信息\r\n    /// @param id 提案id\r\n    /// @param voter 投票人\r\n    function getVoterStats(uint256 id, address voter)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (\r\n            proposals[id].forVotes[voter],\r\n            proposals[id].againstVotes[voter]\r\n        );\r\n    }\r\n\r\n    /// @notice 提案完成，设置信息\r\n    /// @param id 提案id\r\n    function tallyVotes(uint256 id) public {\r\n        require(proposals[id].open == true, \"!open\");\r\n        require(proposals[id].end < block.number, \"!end\");\r\n\r\n        (uint256 _for, uint256 _against, ) = getStats(id);\r\n        bool _quorum = false;\r\n        if (proposals[id].quorum >= proposals[id].quorumRequired) {\r\n            _quorum = true;\r\n        }\r\n        proposals[id].open = false;\r\n        emit ProposalFinished(id, _for, _against, _quorum);\r\n    }\r\n\r\n    /// @notice 计算用户可以获得的奖励数量（用于页面显示）\r\n    /// @param _startTime 设置开始时间\r\n    function setStartTime(uint256 _startTime) external onlyOwner {\r\n        startTime = _startTime;\r\n        periodFinish = startTime.add(DURATION);\r\n    }\r\n\r\n    /// @notice 投赞成票\r\n    /// @param id 提案id\r\n    function voteFor(uint256 id) public {\r\n        require(proposals[id].start < block.number, \"<start\");\r\n        require(proposals[id].end > block.number, \">end\");\r\n\r\n        uint256 _against = proposals[id].againstVotes[msg.sender];\r\n        if (_against > 0) {\r\n            proposals[id].totalAgainstVotes = proposals[id]\r\n                .totalAgainstVotes\r\n                .sub(_against);\r\n            proposals[id].againstVotes[msg.sender] = 0;\r\n        }\r\n\r\n        uint256 vote = votesOf(msg.sender).sub(\r\n            proposals[id].forVotes[msg.sender]\r\n        );\r\n        proposals[id].totalForVotes = proposals[id].totalForVotes.add(vote);\r\n        proposals[id].forVotes[msg.sender] = votesOf(msg.sender);\r\n\r\n        proposals[id].totalVotesAvailable = totalVotes;\r\n        uint256 _votes = proposals[id].totalForVotes.add(\r\n            proposals[id].totalAgainstVotes\r\n        );\r\n        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\r\n\r\n        voteLock[msg.sender] = lock.add(block.number);\r\n\r\n        emit Vote(id, msg.sender, true, vote);\r\n    }\r\n\r\n    /// @notice 投反对票\r\n    /// @param id 提案id\r\n    function voteAgainst(uint256 id) public {\r\n        require(proposals[id].start < block.number, \"<start\");\r\n        require(proposals[id].end > block.number, \">end\");\r\n\r\n        uint256 _for = proposals[id].forVotes[msg.sender];\r\n        if (_for > 0) {\r\n            proposals[id].totalForVotes = proposals[id].totalForVotes.sub(_for);\r\n            proposals[id].forVotes[msg.sender] = 0;\r\n        }\r\n\r\n        uint256 vote = votesOf(msg.sender).sub(\r\n            proposals[id].againstVotes[msg.sender]\r\n        );\r\n        proposals[id].totalAgainstVotes = proposals[id].totalAgainstVotes.add(\r\n            vote\r\n        );\r\n        proposals[id].againstVotes[msg.sender] = votesOf(msg.sender);\r\n\r\n        proposals[id].totalVotesAvailable = totalVotes;\r\n        uint256 _votes = proposals[id].totalForVotes.add(\r\n            proposals[id].totalAgainstVotes\r\n        );\r\n        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\r\n\r\n        voteLock[msg.sender] = lock.add(block.number);\r\n\r\n        emit Vote(id, msg.sender, false, vote);\r\n    }\r\n\r\n    /// @notice 用户质押\r\n    /// @param amount 质押数量\r\n    function stake(uint256 amount)\r\n        public\r\n        override\r\n        updateReward(msg.sender)\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        if (voters[msg.sender] == true) {\r\n            votes[msg.sender] = votes[msg.sender].add(amount);\r\n            totalVotes = totalVotes.add(amount);\r\n        }\r\n        super.stake(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice 用户取回一定数量的质押代币\r\n    /// @param amount 取回数量\r\n    function withdraw(uint256 amount)\r\n        public\r\n        override\r\n        updateReward(msg.sender)\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        if (voters[msg.sender] == true) {\r\n            votes[msg.sender] = votes[msg.sender].sub(amount);\r\n            totalVotes = totalVotes.sub(amount);\r\n        }\r\n        if (!breaker) {\r\n            require(voteLock[msg.sender] < block.number, \"!locked\");\r\n        }\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice 用户退出活动，取出所有质押代币与奖励\r\n    function exit() external checkStart nonReentrant {\r\n        if (voters[msg.sender] == true) {\r\n            votes[msg.sender] = votes[msg.sender].sub(balanceOf(msg.sender));\r\n            totalVotes = totalVotes.sub(balanceOf(msg.sender));\r\n        }\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    /// @notice 用户获取奖励代币\r\n    function getReward()\r\n        public\r\n        updateReward(msg.sender)\r\n        checkStart\r\n        nonReentrant\r\n    {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            IMintable(kun).mint(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    /// @notice 根据时间戳获取双周数\r\n    /// @param timestamp 时间戳\r\n    function getDoubleWeekNumber(uint256 timestamp)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (timestamp - startTime) / DW_TIME + 1;\r\n    }\r\n\r\n    /// @notice 设置活动信息\r\n    /// @param dw 每个双周的序号\r\n    /// @param _startTime 每个双周的开始时间\r\n    /// @param _stakeTarget 每个双周的质押目标\r\n    /// @param _totalReward 每个双周的奖励总数\r\n    function setDWInfo(\r\n        uint256[] calldata dw,\r\n        uint256[] calldata _startTime,\r\n        uint256[] calldata _stakeTarget,\r\n        uint256[] calldata _totalReward\r\n    ) external onlyOwner {\r\n        uint256 length = dw.length;\r\n        require(\r\n            length == _startTime.length &&\r\n                length == _stakeTarget.length &&\r\n                length == _totalReward.length,\r\n            \"Invalid input\"\r\n        );\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            dwInfo[dw[i]].startTime = _startTime[i];\r\n            dwInfo[dw[i]].stakeTarget = _stakeTarget[i];\r\n            dwInfo[dw[i]].totalReward = _totalReward[i];\r\n        }\r\n    }\r\n\r\n    /// @notice 设置第一周的分发速率\r\n    function setFirstDWRewardRate() external onlyOwner {\r\n        dwInfo[1].rewardRate = dwInfo[1].totalReward / DW_TIME;\r\n        lastUpdateTime = dwInfo[1].startTime;\r\n    }\r\n\r\n    /// @notice 设置 kun 代币地址\r\n    /// @param _kun kun 代币地址\r\n    function setKun(address _kun) external onlyOwner {\r\n        kun = _kun;\r\n    }\r\n\r\n    function setDWTime(uint256 _dwTime) public onlyOwner {\r\n        DW_TIME = _dwTime;\r\n    }\r\n\r\n    function setDuration(uint256 _duration) public onlyOwner {\r\n        DURATION = _duration;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kun\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"quorumReached\",\"type\":\"bool\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"RegisterVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"RevokeVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DW_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dwInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDoubleWeekNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kun\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kun\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"readEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakeTarget\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalReward\",\"type\":\"uint256[]\"}],\"name\":\"setDWInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dwTime\",\"type\":\"uint256\"}],\"name\":\"setDWTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFirstDWRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kun\",\"type\":\"address\"}],\"name\":\"setKun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"votesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KunStakePool","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4b99371e295c0617af95606cd9be481e4de6c7dcfe46e300149acaabcd14793"}]}