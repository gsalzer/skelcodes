{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/EvmUtil.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\nlibrary EvmUtil {\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/SafeBitMath.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeBitMath {\r\n\r\n    function safe64(uint n, string memory errorMessage) internal pure returns (uint64) {\r\n        require(n < 2 ** 64, errorMessage);\r\n        return uint64(n);\r\n    }\r\n\r\n    function safe128(uint n, string memory errorMessage) internal pure returns (uint128) {\r\n        require(n < 2 ** 128, errorMessage);\r\n        return uint128(n);\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return add128(a, b, \"\");\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return sub128(a, b, \"\");\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUnderlyingTokenValuator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUnderlyingTokenValuator {\r\n\r\n    /**\r\n      * @dev Gets the tokens value in terms of USD.\r\n      *\r\n      * @return The value of the `amount` of `token`, as a number with the same number of decimals as `amount` passed\r\n      *         in to this function.\r\n      */\r\n    function getTokenValue(address token, uint amount) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/InterestRateInterface.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface InterestRateInterface {\r\n\r\n    /**\r\n      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\r\n      *\r\n      * @param dmmTokenId The DMMA whose interest should be retrieved\r\n      * @param totalSupply The total supply fot he DMM token\r\n      * @param activeSupply The supply that's currently being lent by users\r\n      * @return The interest rate in APY, which is a number with 18 decimals\r\n      */\r\n    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Blacklistable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Allows accounts to be blacklisted by the owner of the contract.\r\n *\r\n *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\r\n */\r\ncontract Blacklistable is Ownable {\r\n\r\n    string public constant BLACKLISTED = \"BLACKLISTED\";\r\n\r\n    mapping(address => bool) internal blacklisted;\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator of this contract\r\n    */\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == owner(), \"MUST_BE_BLACKLISTER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(blacklisted[account] == false, BLACKLISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\r\n    */\r\n    function checkNotBlacklisted(address account) public view {\r\n        require(!blacklisted[account], BLACKLISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds `account` to blacklist\r\n     *\r\n     * @param account The address to blacklist\r\n    */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     *\r\n     * @param account The address to remove from the blacklist\r\n    */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface IDmmController {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the new address that will serve as the guardian for this controller.\r\n     *\r\n     * @param newGuardian   The new address that will serve as the guardian for this controller.\r\n     */\r\n    function setGuardian(address newGuardian) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\r\n     *\r\n     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\r\n     */\r\n    function setDmmTokenFactory(address newDmmTokenFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\r\n     *\r\n     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\r\n     */\r\n    function setDmmEtherFactory(address newDmmEtherFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRate` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\r\n     */\r\n    function getDmmTokenIds() external view returns (uint[] memory);\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\r\n     *      contract address for that token ID.\r\n     */\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    function underlyingTokenValuator() external view returns (IUnderlyingTokenValuator);\r\n\r\n}\r\n\r\n// File: contracts/utils/IERC20WithDecimals.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20WithDecimals {\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev ERC-721 non-fungible token standard. See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721 {\r\n\r\n    /**\r\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n     * transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n     * address indicates there is no approved address. When a Transfer event emits, this also\r\n     * indicates that the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n     * all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `_to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice This works identically to the other function with an extra data parameter, except this\r\n     * function just sets data to \"\"\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n     * address. Throws if `_tokenId` is not a valid NFT.\r\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n     * they mayb be permanently lost.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param _approved The new approved NFT controller.\r\n     * @param _tokenId The NFT to approve.\r\n     */\r\n    function approve(\r\n        address _approved,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice The contract MUST allow multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(\r\n        address _operator,\r\n        bool _approved\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param _owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n     * invalid, and queries about them do throw.\r\n     * @param _tokenId The identifier for an NFT.\r\n     * @return Address of _tokenId owner.\r\n     */\r\n    function ownerOf(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for.\r\n     * @return Address that _tokenId is approved for.\r\n     */\r\n    function getApproved(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n     * @param _owner The address that owns the NFTs.\r\n     * @param _operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721Enumerable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721Enumerable {\r\n\r\n    /**\r\n     * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\r\n     * assigned and queryable owner not equal to the zero address.\r\n     * @return Total supply of NFTs.\r\n     */\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\r\n     * @param _index A counter less than `totalSupply()`.\r\n     * @return Token id.\r\n     */\r\n    function tokenByIndex(\r\n        uint256 _index\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\r\n     * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\r\n     * representing invalid NFTs.\r\n     * @param _owner An address where we are interested in NFTs owned by them.\r\n     * @param _index A counter less than `balanceOf(_owner)`.\r\n     * @return Token id.\r\n     */\r\n    function tokenOfOwnerByIndex(\r\n        address _owner,\r\n        uint256 _index\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721Metadata.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721Metadata {\r\n\r\n    /**\r\n     * @dev Returns a descriptive name for a collection of NFTs in this contract.\r\n     * @return _name Representing name.\r\n     */\r\n    function name()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns a abbreviated name for a collection of NFTs in this contract.\r\n     * @return _symbol Representing symbol.\r\n     */\r\n    function symbol()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\r\n     * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\r\n     * that conforms to the \"ERC721 Metadata JSON Schema\".\r\n     * @return URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721TokenReceiver.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC721TokenReceiver {\r\n\r\n    /**\r\n     * @notice  Handles the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw\r\n     *      to revert and reject the transfer. Return of other than the magic value MUST result in the transaction\r\n     *      being reverted. Note: the contract address is always the message sender.\r\n     *\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from     The address which previously owned the token\r\n     * @param _tokenId  The NFT identifier which is being transferred\r\n     * @param _data     Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless a reversion\r\n     *                  occurs.\r\n     */\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/external/asset_introducers/impl/AssetIntroducerVotingLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\nlibrary AssetIntroducerVotingLib {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getCurrentVotes(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner\r\n    ) public view returns (uint) {\r\n        uint64 checkpointCount = __state.ownerToCheckpointCountMap[__owner];\r\n        return checkpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].votes : 0;\r\n    }\r\n\r\n    function getPriorVotes(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner,\r\n        uint __blockNumber\r\n    ) public view returns (uint128) {\r\n        require(\r\n            __blockNumber < block.number,\r\n            \"AssetIntroducerVotingLib::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint64 checkpointCount = __state.ownerToCheckpointCountMap[__owner];\r\n        if (checkpointCount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (__state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].fromBlock <= __blockNumber) {\r\n            return __state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (__state.ownerToCheckpointIndexToCheckpointMap[__owner][0].fromBlock > __blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 lower = 0;\r\n        uint64 upper = checkpointCount - 1;\r\n        while (upper > lower) {\r\n            // ceil, avoiding overflow\r\n            uint64 center = upper - (upper - lower) / 2;\r\n            AssetIntroducerData.Checkpoint memory checkpoint = __state.ownerToCheckpointIndexToCheckpointMap[__owner][center];\r\n            if (checkpoint.fromBlock == __blockNumber) {\r\n                return checkpoint.votes;\r\n            } else if (checkpoint.fromBlock < __blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return __state.ownerToCheckpointIndexToCheckpointMap[__owner][lower].votes;\r\n    }\r\n\r\n    function moveDelegates(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __fromOwner,\r\n        address __toOwner,\r\n        uint128 __amount\r\n    ) public {\r\n        if (__fromOwner != __toOwner && __amount > 0) {\r\n            if (__fromOwner != address(0)) {\r\n                uint64 fromCheckpointCount = __state.ownerToCheckpointCountMap[__fromOwner];\r\n                uint128 fromVotesOld = fromCheckpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__fromOwner][fromCheckpointCount - 1].votes : 0;\r\n                uint128 fromVotesNew = SafeBitMath.sub128(\r\n                    fromVotesOld,\r\n                    __amount,\r\n                    \"AssetIntroducerVotingLib::moveDelegates: VOTE_UNDERFLOW\"\r\n                );\r\n                _writeCheckpoint(__state, __fromOwner, fromCheckpointCount, fromVotesOld, fromVotesNew);\r\n            }\r\n\r\n            if (__toOwner != address(0)) {\r\n                uint64 toCheckpointCount = __state.ownerToCheckpointCountMap[__toOwner];\r\n                uint128 toVotesOld = toCheckpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__toOwner][toCheckpointCount - 1].votes : 0;\r\n                uint128 toVotesNew = SafeBitMath.add128(\r\n                    toVotesOld,\r\n                    __amount,\r\n                    \"AssetIntroducerVotingLib::moveDelegates: VOTE_OVERFLOW\"\r\n                );\r\n                _writeCheckpoint(__state, __toOwner, toCheckpointCount, toVotesOld, toVotesNew);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _writeCheckpoint(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner,\r\n        uint64 __checkpointCount,\r\n        uint128 __oldVotes,\r\n        uint128 __newVotes\r\n    ) internal {\r\n        uint64 blockNumber = SafeBitMath.safe64(\r\n            block.number,\r\n            \"AssetIntroducerVotingLib::_writeCheckpoint: INVALID_BLOCK_NUMBER\"\r\n        );\r\n\r\n        if (__checkpointCount > 0 && __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount - 1].fromBlock == blockNumber) {\r\n            __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount - 1].votes = __newVotes;\r\n        } else {\r\n            __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount] = AssetIntroducerData.Checkpoint(blockNumber, __newVotes);\r\n            __state.ownerToCheckpointCountMap[__owner] = __checkpointCount + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(__owner, __oldVotes, __newVotes);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IOpenSeaProxyRegistry.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOpenSeaProxyRegistry {\r\n\r\n    function proxies(address user) external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/impl/ERC721TokenLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of ERC-721 non-fungible token standard.\r\n */\r\nlibrary ERC721TokenLib {\r\n\r\n    using SafeMath for uint;\r\n    using OpenZeppelinUpgradesAddress for address;\r\n    using AssetIntroducerVotingLib for AssetIntroducerData.VoteStateV1;\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    event BaseURIChanged(string newBaseURI);\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Magic value of a smart contract that can receive NFT.\r\n     * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n     */\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\r\n\r\n    /// The entry-point into the linked list\r\n    uint internal constant LINKED_LIST_GUARD = uint(1);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function linkedListGuard() public pure returns (uint) {\r\n        return LINKED_LIST_GUARD;\r\n    }\r\n\r\n    function initialize(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        string memory __baseURI,\r\n        address __openSeaProxyRegistry\r\n    )\r\n    public {\r\n        __state.baseURI = __baseURI;\r\n        __state.openSeaProxyRegistry = __openSeaProxyRegistry;\r\n        __state.interfaceIdToIsSupportedMap[ERC721_INTERFACE_ID] = true;\r\n        __state.lastTokenId = LINKED_LIST_GUARD;\r\n    }\r\n\r\n    function setBaseURI(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        string calldata __baseURI\r\n    ) external {\r\n        __state.baseURI = __baseURI;\r\n        emit BaseURIChanged(__baseURI);\r\n    }\r\n\r\n    function tokenURI(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __tokenId\r\n    ) public view returns (string memory) {\r\n        bytes memory reversedNumber = new bytes(96);\r\n        uint stringLength = 0;\r\n        while (__tokenId != 0) {\r\n            uint remainder = __tokenId % 10;\r\n            __tokenId = __tokenId / 10;\r\n            reversedNumber[stringLength++] = byte(uint8(48 + remainder));\r\n        }\r\n        bytes memory tokenIdBytes = new bytes(stringLength);\r\n        for (uint j = 0; j < stringLength; j++) {\r\n            tokenIdBytes[j] = reversedNumber[stringLength - 1 - j];\r\n        }\r\n        return string(abi.encodePacked(__state.baseURI, tokenIdBytes));\r\n    }\r\n\r\n    function supportsInterface(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        bytes4 __interfaceId\r\n    )\r\n    public view returns (bool) {\r\n        return __interfaceId != 0xffffffff && __state.interfaceIdToIsSupportedMap[__interfaceId];\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        bytes memory __data,\r\n        AssetIntroducerData.AssetIntroducer memory __assetIntroducer\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            tokenOwner == __from,\r\n            \"ERC721TokenLib::_safeTransferFrom NOT_OWNER\"\r\n        );\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::_safeTransferFrom INVALID_RECIPIENT\"\r\n        );\r\n\r\n        _transfer(__state, __voteState, __to, __tokenId, __assetIntroducer);\r\n\r\n        _verifyCanReceiveTokens(__from, __to, __tokenId, __data);\r\n    }\r\n\r\n    function transferFrom(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        AssetIntroducerData.AssetIntroducer memory __assetIntroducer\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n\r\n        require(\r\n            tokenOwner == __from,\r\n            \"ERC721TokenLib::transferFrom: NOT_OWNER\"\r\n        );\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::transferFrom: INVALID_RECIPIENT\"\r\n        );\r\n\r\n        _transfer(__state, __voteState, __to, __tokenId, __assetIntroducer);\r\n\r\n        _verifyCanReceiveTokens(__from, __to, __tokenId, \"\");\r\n    }\r\n\r\n    function mint(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __to,\r\n        uint __tokenId,\r\n        uint128 __dmgLocked\r\n    )\r\n    public {\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::mint INVALID_RECIPIENT\"\r\n        );\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == address(0),\r\n            \"ERC721TokenLib::mint TOKEN_ALREADY_EXISTS\"\r\n        );\r\n\r\n        _addTokenToNewOwner(__state, __to, __tokenId);\r\n\r\n        __state.allTokens[__state.lastTokenId] = __tokenId;\r\n        __state.lastTokenId = __tokenId;\r\n\r\n        __state.totalSupply += 1;\r\n\r\n        AssetIntroducerVotingLib.moveDelegates(__voteState, address(0), __to, __dmgLocked);\r\n\r\n        emit Transfer(address(0), __to, __tokenId);\r\n    }\r\n\r\n    function burn(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        uint __tokenId,\r\n        uint128 __dmgLocked\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        _clearApproval(__state, __tokenId);\r\n        _removeToken(__state, tokenOwner, __tokenId);\r\n\r\n        uint totalSupply = __state.totalSupply;\r\n        uint previousTokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i < totalSupply; i++) {\r\n            if (__state.allTokens[previousTokenId] == __tokenId) {\r\n                __state.allTokens[previousTokenId] = __state.allTokens[__tokenId];\r\n                break;\r\n            }\r\n            previousTokenId = __state.allTokens[previousTokenId];\r\n        }\r\n\r\n        if (__tokenId == __state.lastTokenId) {\r\n            __state.lastTokenId = __state.allTokens[previousTokenId];\r\n        }\r\n\r\n        __state.totalSupply -= 1;\r\n\r\n        AssetIntroducerVotingLib.moveDelegates(__voteState, tokenOwner, address(0), __dmgLocked);\r\n\r\n        emit Transfer(tokenOwner, address(0), __tokenId);\r\n    }\r\n\r\n    function approve(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __spender,\r\n        uint256 __tokenId\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            __spender != tokenOwner,\r\n            \"ERC721TokenLib::approve: SPENDER_MUST_NOT_BE_OWNER\"\r\n        );\r\n\r\n        __state.idToSpenderMap[__tokenId] = __spender;\r\n        emit Approval(tokenOwner, __spender, __tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __operator,\r\n        bool _isApproved\r\n    )\r\n    public {\r\n        __state.ownerToOperatorToIsApprovedMap[msg.sender][__operator] = _isApproved;\r\n        emit ApprovalForAll(msg.sender, __operator, _isApproved);\r\n    }\r\n\r\n    function balanceOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __owner != address(0),\r\n            \"ERC721TokenLib::balanceOf: INVALID_OWNER\"\r\n        );\r\n        return __state.ownerToTokenCount[__owner];\r\n    }\r\n\r\n    function tokenByIndex(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __index\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __index < __state.totalSupply,\r\n            \"ERC721TokenLib::tokenByIndex: INVALID_INDEX\"\r\n        );\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i <= __index; i++) {\r\n            tokenId = __state.allTokens[tokenId];\r\n        }\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner,\r\n        uint __index\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __index < balanceOf(__state, __owner),\r\n            \"ERC721TokenLib::tokenOfOwnerByIndex: INVALID_INDEX\"\r\n        );\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i <= __index; i++) {\r\n            tokenId = __state.ownerToTokenIds[__owner][tokenId];\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function ownerOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __tokenId\r\n    )\r\n    public view returns (address) {\r\n        address owner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721TokenLib::ownerOf INVALID_TOKEN\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    function getApproved(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint256 __tokenId\r\n    )\r\n    public view returns (address) {\r\n        return __state.idToSpenderMap[__tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner,\r\n        address __operator\r\n    )\r\n    public view returns (bool) {\r\n        if (IOpenSeaProxyRegistry(__state.openSeaProxyRegistry).proxies(__owner) == __operator) {\r\n            return true;\r\n        }\r\n\r\n        return __state.ownerToOperatorToIsApprovedMap[__owner][__operator];\r\n    }\r\n\r\n    function getAllTokensOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner\r\n    )\r\n    public view returns (uint[] memory) {\r\n        uint tokenCount = __state.ownerToTokenCount[__owner];\r\n        uint[] memory tokens = new uint[](tokenCount);\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i < tokenCount; i++) {\r\n            tokenId = __state.ownerToTokenIds[__owner][tokenId];\r\n            tokens[i] = tokenId;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    /**\r\n     * @dev Actually preforms the transfer. Checks that \"__to\" is not this contract\r\n     * @param __to Address of a new owner.\r\n     * @param __tokenId The NFT that is being transferred.\r\n     */\r\n    function _transfer(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        AssetIntroducerData.AssetIntroducer memory assetIntroducer\r\n    )\r\n    internal {\r\n        // The token must be unactivated in order to withdraw funds\r\n        require(\r\n            !assetIntroducer.isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerV1::_transfer: TRANSFER_DISABLED\"\r\n        );\r\n\r\n        // Get the \"from\" address (the owner) before effectuating the transfer via the call to \"super\"\r\n        address from = __state.idToOwnerMap[__tokenId];\r\n        __voteState.moveDelegates(from, __to, assetIntroducer.dmgLocked);\r\n\r\n        _clearApproval(__state, __tokenId);\r\n\r\n        _removeToken(__state, from, __tokenId);\r\n        _addTokenToNewOwner(__state, __to, __tokenId);\r\n\r\n        emit Transfer(from, __to, __tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a NFT from owner.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param __from Address from which we want to remove the NFT.\r\n     * @param __tokenId Which NFT we want to remove.\r\n     */\r\n    function _removeToken(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __from,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == __from,\r\n            \"ERC721TokenLib::_removeToken: NOT_OWNER\"\r\n        );\r\n\r\n        __state.ownerToTokenCount[__from] = __state.ownerToTokenCount[__from] - 1;\r\n        uint previousTokenId = LINKED_LIST_GUARD;\r\n        uint indexedTokenId = __state.ownerToTokenIds[__from][previousTokenId];\r\n\r\n        while (indexedTokenId != uint(0)) {\r\n            if (indexedTokenId == __tokenId) {\r\n                uint nextTokenId = __state.ownerToTokenIds[__from][__tokenId];\r\n                __state.ownerToTokenIds[__from][previousTokenId] = nextTokenId;\r\n                delete __state.ownerToTokenIds[__from][__tokenId];\r\n                break;\r\n            }\r\n            // Proceed to the next element in the linked list\r\n            previousTokenId = indexedTokenId;\r\n            indexedTokenId = __state.ownerToTokenIds[__from][indexedTokenId];\r\n        }\r\n\r\n        delete __state.idToOwnerMap[__tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Assigns a new NFT to owner.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param __to Address to which we want to add the NFT.\r\n     * @param __tokenId Which NFT we want to add.\r\n     */\r\n    function _addTokenToNewOwner(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __to,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == address(0),\r\n            \"ERC721TokenLib::_addTokenToNewOwner TOKEN_ALREADY_EXISTS\"\r\n        );\r\n\r\n        __state.idToOwnerMap[__tokenId] = __to;\r\n        __state.ownerToTokenCount[__to] = __state.ownerToTokenCount[__to] + 1;\r\n\r\n        /// Append the token to the end of the linked list of the owner.\r\n        uint previousIndex = LINKED_LIST_GUARD;\r\n        uint indexedTokenId = __state.ownerToTokenIds[__to][previousIndex];\r\n\r\n        while (indexedTokenId != uint(0)) {\r\n            previousIndex = indexedTokenId;\r\n            indexedTokenId = __state.ownerToTokenIds[__to][indexedTokenId];\r\n        }\r\n        __state.ownerToTokenIds[__to][previousIndex] = __tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Clears the current approval of a given NFT ID.\r\n     * @param __tokenId ID of the NFT to be transferred.\r\n     */\r\n    function _clearApproval(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        if (__state.idToSpenderMap[__tokenId] != address(0)) {\r\n            delete __state.idToSpenderMap[__tokenId];\r\n        }\r\n    }\r\n\r\n    function _verifyCanReceiveTokens(\r\n        address __from,\r\n        address __to,\r\n        uint __tokenId,\r\n        bytes memory __data\r\n    ) internal {\r\n        if (__to.isContract()) {\r\n            bytes memory callData = abi.encodeWithSelector(IERC721TokenReceiver(__to).onERC721Received.selector, msg.sender, __from, __tokenId, __data);\r\n            (bool success, bytes memory returnData) = address(__to).call(callData);\r\n            require(\r\n                success && abi.decode(returnData, (bytes4)) == MAGIC_ON_ERC721_RECEIVED,\r\n                \"ERC721TokenLib::_verifyCanReceiveTokens: UNABLE_TO_RECEIVE_TOKEN\"\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/impl/ERC721Token.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of ERC-721 non-fungible token standard.\r\n */\r\ncontract ERC721Token is IERC721, IERC721Metadata, IERC721Enumerable, IERC721TokenReceiver, AssetIntroducerData {\r\n\r\n    using ERC721TokenLib for ERC721StateV1;\r\n    using SafeMath for uint256;\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\r\n     * @param __tokenId ID of the NFT to validate.\r\n     */\r\n    modifier requireSenderIsOwner(uint256 __tokenId) {\r\n        address tokenOwner = _erc721StateV1.idToOwnerMap[__tokenId];\r\n        require(\r\n            tokenOwner == msg.sender,\r\n            \"ERC721Token: NOT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\r\n     * @param __tokenId ID of the NFT to transfer.\r\n     */\r\n    modifier requireCanTransfer(uint256 __tokenId) {\r\n        address tokenOwner = _erc721StateV1.idToOwnerMap[__tokenId];\r\n        require(\r\n            tokenOwner == msg.sender ||\r\n            isApprovedForAll(tokenOwner, msg.sender) ||\r\n            _erc721StateV1.getApproved(__tokenId) == msg.sender,\r\n            \"ERC721Token: NOT_OWNER_OR_NOT_APPROVED_OR_NOT_OPERATOR\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     */\r\n    function initialize(\r\n        string memory __baseURI,\r\n        address __openSeaProxyRegistry\r\n    )\r\n    public\r\n    initializer {\r\n        _guardCounter = 1;\r\n        _erc721StateV1.initialize(__baseURI, __openSeaProxyRegistry);\r\n    }\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param __interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(\r\n        bytes4 __interfaceId\r\n    ) external view returns (bool) {\r\n        return _erc721StateV1.supportsInterface(__interfaceId);\r\n    }\r\n\r\n    function baseURI() external view returns (string memory) {\r\n        return _erc721StateV1.baseURI;\r\n    }\r\n\r\n    function setBaseURI(\r\n        string calldata __baseURI\r\n    )\r\n    onlyOwnerOrGuardian\r\n    nonReentrant\r\n    external {\r\n        _erc721StateV1.setBaseURI(__baseURI);\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 __tokenId\r\n    )\r\n    requireIsValidNft(__tokenId)\r\n    external view returns (string memory) {\r\n        return _erc721StateV1.tokenURI(__tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\r\n     * be changed to payable.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `__from` is not the current owner. Throws if `__to` is\r\n     * the zero address. Throws if `__tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `__to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `__to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param __from The current owner of the NFT.\r\n     * @param __to The new owner.\r\n     * @param __tokenId The NFT to transfer.\r\n     * @param __data Additional data with no specified format, sent in call to `__to`.\r\n     */\r\n    function safeTransferFrom(\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        bytes calldata __data\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireCanTransfer(__tokenId)\r\n    requireIsValidNft(__tokenId) {\r\n        AssetIntroducer memory assetIntroducer = _assetIntroducerStateV1.idToAssetIntroducer[__tokenId];\r\n        _erc721StateV1.safeTransferFrom(\r\n            _voteStateV1,\r\n            __from,\r\n            __to,\r\n            __tokenId,\r\n            __data,\r\n            assetIntroducer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\r\n     * be changed to payable.\r\n     * @notice This works identically to the other function with an extra data parameter, except this\r\n     * function just sets data to \"\"\r\n     * @param __from The current owner of the NFT.\r\n     * @param __to The new owner.\r\n     * @param __tokenId The NFT to transfer.\r\n     */\r\n    function safeTransferFrom(\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireCanTransfer(__tokenId)\r\n    requireIsValidNft(__tokenId) {\r\n        _erc721StateV1.safeTransferFrom(\r\n            _voteStateV1,\r\n            __from,\r\n            __to,\r\n            __tokenId,\r\n            \"\",\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId]\r\n        );\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    )\r\n    public\r\n    nonReentrant\r\n    returns (bytes4) {\r\n        // Do not accept transfers into the contract for now\r\n        return bytes4(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `__from` is not the current owner. Throws if `__to` is the zero\r\n     * address. Throws if `__tokenId` is not a valid NFT. This function can be changed to payable.\r\n     * @notice The caller is responsible to confirm that `__to` is capable of receiving NFTs or else\r\n     * they maybe be permanently lost.\r\n     * @param __from The current owner of the NFT.\r\n     * @param __to The new owner.\r\n     * @param __tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireCanTransfer(__tokenId)\r\n    requireIsValidNft(__tokenId) {\r\n        _erc721StateV1.transferFrom(\r\n            _voteStateV1,\r\n            __from,\r\n            __to,\r\n            __tokenId,\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param __spender  Address to be approved for the given NFT ID.\r\n     * @param __tokenId  ID of the token to be approved.\r\n     */\r\n    function approve(\r\n        address __spender,\r\n        uint256 __tokenId\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireSenderIsOwner(__tokenId)\r\n    requireIsValidNft(__tokenId) {\r\n        _erc721StateV1.approve(__spender, __tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice This works even if sender doesn't own any tokens at the time.\r\n     * @param __operator    The address to add to the set of authorized operators.\r\n     * @param __isApproved  True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(\r\n        address __operator,\r\n        bool __isApproved\r\n    )\r\n    external\r\n    nonReentrant {\r\n        _erc721StateV1.setApprovalForAll(__operator, __isApproved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `__owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param __owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(\r\n        address __owner\r\n    )\r\n    public view returns (uint) {\r\n        return _erc721StateV1.balanceOf(__owner);\r\n    }\r\n\r\n    function totalSupply() external view returns (uint) {\r\n        return _erc721StateV1.totalSupply;\r\n    }\r\n\r\n    function tokenByIndex(\r\n        uint __index\r\n    )\r\n    external\r\n    view returns (uint) {\r\n        return _erc721StateV1.tokenByIndex(__index);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address __owner,\r\n        uint __index\r\n    )\r\n    external view returns (uint) {\r\n        return _erc721StateV1.tokenOfOwnerByIndex(__owner, __index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n     * invalid, and queries about them do throw.\r\n     * @param __tokenId The identifier for an NFT.\r\n     * @return _owner Address of __tokenId owner.\r\n     */\r\n    function ownerOf(\r\n        uint256 __tokenId\r\n    )\r\n    external view returns (address) {\r\n        return _erc721StateV1.ownerOf(__tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `__tokenId` is not a valid NFT.\r\n     * @param __tokenId ID of the NFT to query the approval of.\r\n     * @return Address that __tokenId is approved for.\r\n     */\r\n    function getApproved(\r\n        uint256 __tokenId\r\n    )\r\n    requireIsValidNft(__tokenId)\r\n    public view returns (address) {\r\n        return _erc721StateV1.getApproved(__tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `__operator` is an approved operator for `_owner`.\r\n     * @param __owner The address that owns the NFTs.\r\n     * @param __operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(\r\n        address __owner,\r\n        address __operator\r\n    )\r\n    public view returns (bool) {\r\n        return _erc721StateV1.isApprovedForAll(__owner, __operator);\r\n    }\r\n\r\n    function getAllTokensOf(\r\n        address __owner\r\n    )\r\n    external view returns (uint[] memory) {\r\n        return _erc721StateV1.getAllTokensOf(__owner);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IAssetIntroducerDiscount.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAssetIntroducerDiscount {\r\n\r\n    function getAssetIntroducerDiscount(\r\n        AssetIntroducerData.DiscountStruct calldata data\r\n    ) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAssetIntroducerV1 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetIntroducerBought(uint indexed tokenId, address indexed buyer, address indexed recipient, uint dmgAmount);\r\n    event AssetIntroducerActivationChanged(uint indexed tokenId, bool isActivated);\r\n    event AssetIntroducerCreated(uint indexed tokenId, string countryCode, AssetIntroducerData.AssetIntroducerType introducerType, uint serialNumber);\r\n    event AssetIntroducerDiscountChanged(address indexed oldAssetIntroducerDiscount, address indexed newAssetIntroducerDiscount);\r\n    event AssetIntroducerDollarAmountToManageChange(uint indexed tokenId, uint oldDollarAmountToManage, uint newDollarAmountToManage);\r\n    event AssetIntroducerPriceChanged(string indexed countryCode, AssetIntroducerData.AssetIntroducerType indexed introducerType, uint oldPriceUsd, uint newPriceUsd);\r\n    event BaseURIChanged(string newBaseURI);\r\n    event CapitalDeposited(uint indexed tokenId, address indexed token, uint amount);\r\n    event CapitalWithdrawn(uint indexed tokenId, address indexed token, uint amount);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    event InterestPaid(uint indexed tokenId, address indexed token, uint amount);\r\n    event SignatureValidated(address indexed signer, uint nonce);\r\n    event StakingPurchaserChanged(address indexed oldStakingPurchaser, address indexed newStakingPurchaser);\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function createAssetIntroducersForPrimaryMarket(\r\n        string[] calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType[] calldata introducerType\r\n    ) external returns (uint[] memory);\r\n\r\n    function setDollarAmountToManageByTokenId(\r\n        uint tokenId,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setAssetIntroducerDiscount(\r\n        address assetIntroducerDiscount\r\n    ) external;\r\n\r\n    function setAssetIntroducerPrice(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint priceUsd\r\n    ) external;\r\n\r\n    function activateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function setStakingPurchaser(\r\n        address stakingPurchaser\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @return  The timestamp at which this contract was created\r\n     */\r\n    function initTimestamp() external view returns (uint64);\r\n\r\n    function stakingPurchaser() external view returns (address);\r\n\r\n    function openSeaProxyRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @return  The domain separator used in off-chain signatures. See EIP 712 for more:\r\n     *          https://eips.ethereum.org/EIPS/eip-712\r\n     */\r\n    function domainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @return  The address of the DMG token\r\n     */\r\n    function dmg() external view returns (address);\r\n\r\n    function dmmController() external view returns (address);\r\n\r\n    function underlyingTokenValuator() external view returns (address);\r\n\r\n    function assetIntroducerDiscount() external view returns (address);\r\n\r\n    /**\r\n     * @return  The discount applied to the price of the asset introducer for being an early purchaser. Represented as\r\n     *          a number with 18 decimals, such that 0.1 * 1e18 == 10%\r\n     */\r\n    function getAssetIntroducerDiscount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in USD\r\n     */\r\n    function getAssetIntroducerPriceUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in DMG. DMG is the needed currency to purchase an asset\r\n     *          introducer NFT.\r\n     */\r\n    function getAssetIntroducerPriceDmgByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    /**\r\n     * @return  The total amount of DMG locked in the asset introducer reserves\r\n     */\r\n    function getTotalDmgLocked() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount that this asset introducer can manager, represented in wei format (a number with 18\r\n     *          decimals). Meaning, 10,000.25 * 1e18 == $10,000.25\r\n     */\r\n    function getDollarAmountToManageByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of DMG that this asset introducer has locked in order to maintain a valid status as an asset\r\n     *          introducer.\r\n     */\r\n    function getDmgLockedByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer memory);\r\n\r\n    function getAssetIntroducersByCountryCode(\r\n        string calldata countryCode\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getAllAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getPrimaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getSecondaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function getNonceByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getNextAssetIntroducerTokenId(\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract\r\n     */\r\n    function buyAssetIntroducerSlot(\r\n        uint tokenId\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract. The additional discount is added to the existing one\r\n     */\r\n    function buyAssetIntroducerSlotViaStaking(\r\n        uint tokenId,\r\n        uint additionalDiscount\r\n    ) external returns (bool);\r\n\r\n    function nonceOf(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function buyAssetIntroducerSlotBySig(\r\n        uint tokenId,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool);\r\n\r\n    function buyAssetIntroducerSlotBySigWithDmgPermit(\r\n        uint __tokenId,\r\n        address __recipient,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s,\r\n        AssetIntroducerData.DmgApprovalStruct calldata dmgApprovalStruct\r\n    ) external returns (bool);\r\n\r\n    function getPriorVotes(\r\n        address user,\r\n        uint blockNumber\r\n    ) external view returns (uint128);\r\n\r\n    function getCurrentVotes(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getDmgLockedByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of capital that has been withdrawn by this asset introducer, denominated in USD with 18\r\n     *          decimals\r\n     */\r\n    function getDeployedCapitalUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getWithdrawnAmountByTokenIdAndUnderlyingToken(\r\n        uint tokenId,\r\n        address underlyingToken\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Deactivates the specified asset introducer from being able to withdraw funds. Doing so enables it to\r\n     *      be transferred. NOTE: NFTs can only be deactivated once all deployed capital is returned.\r\n     */\r\n    function deactivateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function withdrawCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function depositCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function payInterestByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Other Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Used by the DMMF to buy its token and initialize it based upon its usage of the protocol prior to the NFT\r\n     *      system having been created. We are passing through the USDC token specifically, because it was drawn down\r\n     *      by 300,000 early in the system's maturity to run a full cycle of the system and do a small allocation to\r\n     *      the bootstrapped asset pool.\r\n     */\r\n    function buyDmmFoundationToken(\r\n        uint tokenId,\r\n        address usdcToken\r\n    ) external returns (bool);\r\n\r\n    function isDmmFoundationSetup() external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerV1Initializable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IAssetIntroducerV1Initializable {\r\n\r\n    function initialize(\r\n        string calldata baseURI,\r\n        address openSeaProxyRegistry,\r\n        address owner,\r\n        address guardian,\r\n        address dmgToken,\r\n        address dmmController,\r\n        address underlyingTokenValuator,\r\n        address assetIntroducerDiscount\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/AssetIntroducerV1UserLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AssetIntroducerV1UserLib {\r\n\r\n    using ERC721TokenLib for AssetIntroducerData.ERC721StateV1;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    uint internal constant ONE_ETH = 1e18;\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetIntroducerActivationChanged(uint indexed tokenId, bool isActivated);\r\n    event AssetIntroducerBought(uint indexed tokenId, address indexed buyer, address indexed recipient, uint dmgAmount);\r\n    event CapitalDeposited(uint indexed tokenId, address indexed token, uint amount);\r\n    event CapitalWithdrawn(uint indexed tokenId, address indexed token, uint amount);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    event InterestPaid(uint indexed tokenId, address indexed token, uint amount);\r\n    event SignatureValidated(address indexed signer, uint nonce);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function buyAssetIntroducer(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        address __recipient,\r\n        address __buyer,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        uint __additionalDiscount\r\n    ) public {\r\n        uint dmgPurchasePrice = getAssetIntroducerPriceDmgByTokenId(__state, __tokenId, __additionalDiscount);\r\n        IERC20(__state.dmg).safeTransferFrom(__buyer, address(this), dmgPurchasePrice);\r\n        __state.totalDmgLocked = uint128(uint(__state.totalDmgLocked).add(dmgPurchasePrice));\r\n\r\n        AssetIntroducerData.AssetIntroducer storage introducer = __state.idToAssetIntroducer[__tokenId];\r\n        introducer.isOnSecondaryMarket = true;\r\n        introducer.dmgLocked = uint96(dmgPurchasePrice);\r\n\r\n        // Initialize the DMG voting balance to this contract. The call to _transfer moves it to __recipient then.\r\n        AssetIntroducerVotingLib.moveDelegates(__voteState, address(0), address(this), uint128(dmgPurchasePrice));\r\n\r\n        ERC721TokenLib._transfer(__erc721State, __voteState, __recipient, __tokenId, introducer);\r\n\r\n        emit AssetIntroducerBought(__tokenId, __buyer, __recipient, dmgPurchasePrice);\r\n    }\r\n\r\n    function validateOfflineSignature(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        bytes32 __structHash,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s\r\n    )\r\n    public\r\n    returns (address signer) {\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", __state.domainSeparator, __structHash));\r\n        signer = ecrecover(digest, __v, __r, __s);\r\n\r\n        require(\r\n            signer != address(0),\r\n            \"AssetIntroducerV1UserLib::_validateOfflineSignature: INVALID_SIGNATURE\"\r\n        );\r\n        require(\r\n            __nonce == __state.ownerToNonceMap[signer]++,\r\n            \"AssetIntroducerV1UserLib::_validateOfflineSignature: INVALID_NONCE\"\r\n        );\r\n        require(\r\n            block.timestamp <= __expiry,\r\n            \"AssetIntroducerV1UserLib::_validateOfflineSignature: EXPIRED\"\r\n        );\r\n\r\n        emit SignatureValidated(signer, __nonce);\r\n    }\r\n\r\n    function getDeployedCapitalUsdByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId\r\n    ) public view returns (uint) {\r\n        IDmmController dmmController = IDmmController(__state.dmmController);\r\n        IUnderlyingTokenValuator underlyingTokenValuator = IUnderlyingTokenValuator(__state.underlyingTokenValuator);\r\n        uint[] memory tokenIds = dmmController.getDmmTokenIds();\r\n\r\n        uint totalDeployedCapital = 0;\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            address token = dmmController.getUnderlyingTokenForDmm(dmmController.getDmmTokenAddressByDmmTokenId(tokenIds[i]));\r\n            uint rawDeployedAmount = __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][token];\r\n            rawDeployedAmount = _standardizeTokenAmountForUsdDecimals(\r\n                rawDeployedAmount,\r\n                IERC20WithDecimals(token).decimals()\r\n            );\r\n\r\n            totalDeployedCapital = totalDeployedCapital.add(underlyingTokenValuator.getTokenValue(token, rawDeployedAmount));\r\n        }\r\n\r\n        return totalDeployedCapital;\r\n    }\r\n\r\n    function getDmgLockedByUser(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State,\r\n        address __user\r\n    ) public view returns (uint) {\r\n        uint[] memory tokenIds = ERC721TokenLib.getAllTokensOf(__erc721State, __user);\r\n        uint dmgLocked = 0;\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            dmgLocked = dmgLocked.add(__state.idToAssetIntroducer[tokenIds[i]].dmgLocked);\r\n        }\r\n        return dmgLocked;\r\n    }\r\n\r\n    function getAssetIntroducerDiscount(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state\r\n    ) public view returns (uint) {\r\n        AssetIntroducerData.DiscountStruct memory discountStruct = AssetIntroducerData.DiscountStruct({\r\n        initTimestamp : __state.initTimestamp\r\n        });\r\n        return IAssetIntroducerDiscount(__state.assetIntroducerDiscount).getAssetIntroducerDiscount(discountStruct);\r\n    }\r\n\r\n    function getAssetIntroducerPriceUsdByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        uint __additionalDiscount\r\n    )\r\n    public view returns (uint) {\r\n        AssetIntroducerData.AssetIntroducer memory assetIntroducer = __state.idToAssetIntroducer[__tokenId];\r\n        return getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n            __state,\r\n            string(abi.encodePacked(assetIntroducer.countryCode)),\r\n            assetIntroducer.introducerType,\r\n            __additionalDiscount\r\n        );\r\n    }\r\n\r\n    function getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        string memory __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __additionalDiscount\r\n    )\r\n    public view returns (uint) {\r\n        bytes3 countryCode = _verifyAndConvertCountryCodeToBytes(__countryCode);\r\n        uint priceUsd = __state.countryCodeToAssetIntroducerTypeToPriceUsd[countryCode][uint8(__introducerType)];\r\n        uint discount = getAssetIntroducerDiscount(__state).add(__additionalDiscount);\r\n        require(\r\n            discount < ONE_ETH,\r\n            \"AssetIntroducerV1UserLib::getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType: INVALID_DISCOUNT\"\r\n        );\r\n        return priceUsd.mul(ONE_ETH.sub(discount)).div(ONE_ETH);\r\n    }\r\n\r\n    function getAssetIntroducerPriceDmgByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        uint __additionalDiscount\r\n    )\r\n    public view returns (uint) {\r\n        uint dmgPriceUsd = IUnderlyingTokenValuator(__state.underlyingTokenValuator).getTokenValue(__state.dmg, 1e18);\r\n        return getAssetIntroducerPriceUsdByTokenId(__state, __tokenId, __additionalDiscount).mul(1e18).div(dmgPriceUsd);\r\n    }\r\n\r\n    function getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        string memory __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __additionalDiscount\r\n    )\r\n    public view returns (uint) {\r\n        uint dmgPriceUsd = IUnderlyingTokenValuator(__state.underlyingTokenValuator).getTokenValue(__state.dmg, 1e18);\r\n        return getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(__state, __countryCode, __introducerType, __additionalDiscount).mul(1e18).div(dmgPriceUsd);\r\n    }\r\n\r\n    function getAssetIntroducersByCountryCode(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        string calldata __countryCode\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory) {\r\n        bytes3 countryCode = _verifyAndConvertCountryCodeToBytes(__countryCode);\r\n        uint[] memory affiliates = __state.countryCodeToAssetIntroducerTypeToTokenIdsMap[countryCode][uint8(AssetIntroducerData.AssetIntroducerType.AFFILIATE)];\r\n        uint[] memory principals = __state.countryCodeToAssetIntroducerTypeToTokenIdsMap[countryCode][uint8(AssetIntroducerData.AssetIntroducerType.PRINCIPAL)];\r\n\r\n        AssetIntroducerData.AssetIntroducer[] memory assetIntroducers = new AssetIntroducerData.AssetIntroducer[](affiliates.length + principals.length);\r\n        for (uint i = 0; i < affiliates.length + principals.length; i++) {\r\n            if (i < affiliates.length) {\r\n                assetIntroducers[i] = __state.idToAssetIntroducer[affiliates[i]];\r\n            } else {\r\n                assetIntroducers[i] = __state.idToAssetIntroducer[principals[i - affiliates.length]];\r\n            }\r\n        }\r\n        return assetIntroducers;\r\n    }\r\n\r\n    function getAllAssetIntroducers(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State\r\n    ) public view returns (AssetIntroducerData.AssetIntroducer[] memory) {\r\n        uint nextTokenId = ERC721TokenLib.linkedListGuard();\r\n        AssetIntroducerData.AssetIntroducer[] memory assetIntroducers = new AssetIntroducerData.AssetIntroducer[](__erc721State.totalSupply);\r\n        for (uint i = 0; i < assetIntroducers.length; i++) {\r\n            assetIntroducers[i] = __state.idToAssetIntroducer[__erc721State.allTokens[nextTokenId]];\r\n            nextTokenId = __erc721State.allTokens[nextTokenId];\r\n        }\r\n        return assetIntroducers;\r\n    }\r\n\r\n    function getPrimaryMarketAssetIntroducers(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory) {\r\n        AssetIntroducerData.AssetIntroducer[] memory allAssetIntroducers = getAllAssetIntroducers(__state, __erc721State);\r\n        uint primaryMarketCount = 0;\r\n        for (uint i = 0; i < allAssetIntroducers.length; i++) {\r\n            if (!allAssetIntroducers[i].isOnSecondaryMarket) {\r\n                primaryMarketCount += 1;\r\n            }\r\n        }\r\n\r\n        AssetIntroducerData.AssetIntroducer[] memory primaryMarketAssetIntroducers = new AssetIntroducerData.AssetIntroducer[](primaryMarketCount);\r\n        uint j = 0;\r\n        for (uint i = 0; i < allAssetIntroducers.length; i++) {\r\n            if (!allAssetIntroducers[i].isOnSecondaryMarket) {\r\n                primaryMarketAssetIntroducers[j++] = allAssetIntroducers[i];\r\n            }\r\n        }\r\n        return primaryMarketAssetIntroducers;\r\n    }\r\n\r\n    function getSecondaryMarketAssetIntroducers(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory) {\r\n        AssetIntroducerData.AssetIntroducer[] memory allAssetIntroducers = getAllAssetIntroducers(__state, __erc721State);\r\n        uint secondaryMarketCount = 0;\r\n        for (uint i = 0; i < allAssetIntroducers.length; i++) {\r\n            if (allAssetIntroducers[i].isOnSecondaryMarket) {\r\n                secondaryMarketCount += 1;\r\n            }\r\n        }\r\n\r\n        AssetIntroducerData.AssetIntroducer[] memory secondaryMarketAssetIntroducers = new AssetIntroducerData.AssetIntroducer[](secondaryMarketCount);\r\n        uint j = 0;\r\n        for (uint i = 0; i < allAssetIntroducers.length; i++) {\r\n            if (allAssetIntroducers[i].isOnSecondaryMarket) {\r\n                secondaryMarketAssetIntroducers[j++] = allAssetIntroducers[i];\r\n            }\r\n        }\r\n        return secondaryMarketAssetIntroducers;\r\n    }\r\n\r\n    function deactivateAssetIntroducerByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId\r\n    )\r\n    public {\r\n        require(\r\n            getDeployedCapitalUsdByTokenId(__state, __tokenId) == 0,\r\n            \"AssetIntroducerV1UserLib::deactivateAssetIntroducerByTokenId: MUST_DEPOSIT_REMAINING_CAPITAL\"\r\n        );\r\n        require(\r\n            __state.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerV1UserLib::deactivateAssetIntroducerByTokenId: ALREADY_DEACTIVATED\"\r\n        );\r\n        __state.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds = false;\r\n        emit AssetIntroducerActivationChanged(__tokenId, false);\r\n    }\r\n\r\n    function withdrawCapitalByTokenIdAndToken(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    public {\r\n        uint standardizedAmount = _standardizeTokenAmountForUsdDecimals(\r\n            __amount,\r\n            IERC20WithDecimals(__token).decimals()\r\n        );\r\n        uint deployedCapital = getDeployedCapitalUsdByTokenId(__state, __tokenId);\r\n        uint usdAmountToWithdraw = IUnderlyingTokenValuator(__state.underlyingTokenValuator).getTokenValue(__token, standardizedAmount);\r\n\r\n        require(\r\n            deployedCapital.add(usdAmountToWithdraw) <= __state.idToAssetIntroducer[__tokenId].dollarAmountToManage,\r\n            \"AssetIntroducerV1UserLib::withdrawCapitalByTokenId: AUM_OVERFLOW\"\r\n        );\r\n\r\n        __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__token] = __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__token].add(__amount);\r\n\r\n        IDmmController dmmController = IDmmController(__state.dmmController);\r\n        uint dmmTokenId = dmmController.getTokenIdFromDmmTokenAddress(dmmController.getDmmTokenForUnderlying(__token));\r\n        dmmController.adminWithdrawFunds(dmmTokenId, __amount);\r\n        IERC20(__token).safeTransfer(msg.sender, __amount);\r\n        emit CapitalWithdrawn(__tokenId, __token, __amount);\r\n    }\r\n\r\n    function depositCapitalByTokenIdAndToken(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    public {\r\n        require(\r\n            __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__token] >= __amount,\r\n            \"AssetIntroducerV1UserLib::depositCapitalByTokenId: AUM_UNDERFLOW\"\r\n        );\r\n        __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__token] = __state.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__token].sub(__amount);\r\n\r\n        IERC20(__token).safeTransferFrom(msg.sender, address(this), __amount);\r\n\r\n        IDmmController dmmController = IDmmController(__state.dmmController);\r\n        uint dmmTokenId = dmmController.getTokenIdFromDmmTokenAddress(dmmController.getDmmTokenForUnderlying(__token));\r\n\r\n        IERC20(__token).safeApprove(address(dmmController), __amount);\r\n        dmmController.adminDepositFunds(dmmTokenId, __amount);\r\n\r\n        emit CapitalDeposited(__tokenId, __token, __amount);\r\n    }\r\n\r\n    function payInterestByTokenIdAndToken(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    public {\r\n        IERC20(__token).safeTransferFrom(msg.sender, address(this), __amount);\r\n\r\n        IDmmController dmmController = IDmmController(__state.dmmController);\r\n        uint dmmTokenId = dmmController.getTokenIdFromDmmTokenAddress(dmmController.getDmmTokenForUnderlying(__token));\r\n\r\n        IERC20(__token).safeApprove(address(dmmController), __amount);\r\n        dmmController.adminDepositFunds(dmmTokenId, __amount);\r\n\r\n        emit InterestPaid(__tokenId, __token, __amount);\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _getAssetIntroducerTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        bytes3 __countryCode,\r\n        uint8 __introducerType\r\n    ) internal view returns (uint) {\r\n        uint nonce = __state.countryCodeToAssetIntroducerTypeToTokenIdsMap[__countryCode][__introducerType].length;\r\n        return uint(keccak256(abi.encodePacked(__countryCode, __introducerType, nonce)));\r\n    }\r\n\r\n    function _verifyAndConvertCountryCodeToBytes(\r\n        string memory __countryCode\r\n    ) internal pure returns (bytes3) {\r\n        require(\r\n            bytes(__countryCode).length == 3,\r\n            \"AssetIntroducerV1UserLib::_verifyAndConvertCountryCodeToBytes: INVALID_COUNTRY_CODE\"\r\n        );\r\n        bytes32 result;\r\n        assembly {\r\n            result := mload(add(__countryCode, 32))\r\n        }\r\n        return bytes3(result);\r\n    }\r\n\r\n    function _standardizeTokenAmountForUsdDecimals(\r\n        uint __amount,\r\n        uint8 __decimals\r\n    ) internal pure returns (uint) {\r\n        if (__decimals > 18) {\r\n            return __amount.div(10 ** uint(__decimals - 18));\r\n        } else if (__decimals < 18) {\r\n            return __amount.mul(10 ** uint(18 - __decimals));\r\n        } else {\r\n            return __amount;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/AssetIntroducerV1AdminLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AssetIntroducerV1AdminLib {\r\n\r\n    using Address for address;\r\n    using AssetIntroducerV1UserLib for *;\r\n    using ERC721TokenLib for AssetIntroducerData.ERC721StateV1;\r\n    using SafeMath for uint;\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetIntroducerActivationChanged(uint indexed tokenId, bool isActivated);\r\n    event AssetIntroducerCreated(uint indexed tokenId, string countryCode, AssetIntroducerData.AssetIntroducerType introducerType, uint serialNumber);\r\n    event AssetIntroducerDiscountChanged(address indexed oldAssetIntroducerDiscount, address indexed newAssetIntroducerDiscount);\r\n    event AssetIntroducerDollarAmountToManageChange(uint indexed tokenId, uint oldDollarAmountToManage, uint newDollarAmountToManage);\r\n    event AssetIntroducerPriceChanged(string indexed countryCode, AssetIntroducerData.AssetIntroducerType indexed introducerType, uint oldPriceUsd, uint newPriceUsd);\r\n    event StakingPurchaserChanged(address indexed oldStakingPurchaser, address indexed newStakingPurchaser);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function createAssetIntroducersForPrimaryMarket(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        AssetIntroducerData.ERC721StateV1 storage __erc721State,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        string[] calldata __countryCodes,\r\n        AssetIntroducerData.AssetIntroducerType[] calldata __introducerTypes\r\n    )\r\n    external\r\n    returns (uint[] memory) {\r\n        require(\r\n            __countryCodes.length == __introducerTypes.length,\r\n            \"AssetIntroducerV1Lib::createAssetIntroducersForPrimaryMarket: INVALID_LENGTH\"\r\n        );\r\n\r\n        uint[] memory tokenIds = new uint[](__countryCodes.length);\r\n\r\n        uint totalSupply = __erc721State.totalSupply;\r\n\r\n        for (uint i = 0; i < __countryCodes.length; i++) {\r\n            bytes3 countryCode = AssetIntroducerV1UserLib._verifyAndConvertCountryCodeToBytes(__countryCodes[i]);\r\n            uint8 introducerType = uint8(__introducerTypes[i]);\r\n            tokenIds[i] = AssetIntroducerV1UserLib._getAssetIntroducerTokenId(__state, countryCode, introducerType);\r\n\r\n            require(\r\n                __state.countryCodeToAssetIntroducerTypeToPriceUsd[countryCode][introducerType] > 0,\r\n                \"AssetIntroducerV1Lib::createAssetIntroducersForPrimaryMarket: PRICE_NOT_SET\"\r\n            );\r\n\r\n            uint16 serialNumber = uint16(totalSupply + i + 1);\r\n\r\n            __state.idToAssetIntroducer[tokenIds[i]] = AssetIntroducerData.AssetIntroducer({\r\n            countryCode : countryCode,\r\n            introducerType : __introducerTypes[i],\r\n            isOnSecondaryMarket : false,\r\n            isAllowedToWithdrawFunds : false,\r\n            serialNumber : serialNumber, /// serial number is 1-based indexed\r\n            dmgLocked : 0,\r\n            dollarAmountToManage : 0,\r\n            tokenId : tokenIds[i]\r\n            });\r\n\r\n            __state.countryCodeToAssetIntroducerTypeToTokenIdsMap[countryCode][uint8(__introducerTypes[i])].push(tokenIds[i]);\r\n\r\n            __erc721State.mint(__voteState, address(this), tokenIds[i], 0);\r\n\r\n            emit AssetIntroducerCreated(tokenIds[i], __countryCodes[i], __introducerTypes[i], serialNumber);\r\n        }\r\n\r\n        return tokenIds;\r\n    }\r\n\r\n    function setDollarAmountToManageByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId,\r\n        uint __dollarAmountToManage\r\n    )\r\n    external {\r\n        require(\r\n            __dollarAmountToManage == uint96(__dollarAmountToManage),\r\n            \"AssetIntroducerV1AdminLib::setDollarAmountToManageByTokenId: INVALID_DOLLAR_AMOUNT\"\r\n        );\r\n\r\n        AssetIntroducerData.AssetIntroducer storage assetIntroducer = __state.idToAssetIntroducer[__tokenId];\r\n        uint oldDollarAmountToManage = assetIntroducer.dollarAmountToManage;\r\n        assetIntroducer.dollarAmountToManage = uint96(__dollarAmountToManage);\r\n        emit AssetIntroducerDollarAmountToManageChange(__tokenId, oldDollarAmountToManage, __dollarAmountToManage);\r\n    }\r\n\r\n    function setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __dollarAmountToManage\r\n    )\r\n    external {\r\n        require(\r\n            __dollarAmountToManage == uint96(__dollarAmountToManage),\r\n            \"AssetIntroducerV1AdminLib::setDollarAmountToManageByTokenId: INVALID_DOLLAR_AMOUNT\"\r\n        );\r\n\r\n        bytes3 rawCountryCode = AssetIntroducerV1UserLib._verifyAndConvertCountryCodeToBytes(__countryCode);\r\n        uint[] memory tokenIds = __state.countryCodeToAssetIntroducerTypeToTokenIdsMap[rawCountryCode][uint8(__introducerType)];\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            AssetIntroducerData.AssetIntroducer storage assetIntroducer = __state.idToAssetIntroducer[tokenIds[i]];\r\n            uint oldDollarAmountToManage = assetIntroducer.dollarAmountToManage;\r\n            assetIntroducer.dollarAmountToManage = uint96(__dollarAmountToManage);\r\n            emit AssetIntroducerDollarAmountToManageChange(tokenIds[i], oldDollarAmountToManage, __dollarAmountToManage);\r\n        }\r\n    }\r\n\r\n    function setAssetIntroducerDiscount(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        address __assetIntroducerDiscount\r\n    )\r\n    public {\r\n        require(\r\n            __assetIntroducerDiscount != address(0) && __assetIntroducerDiscount.isContract(),\r\n            \"AssetIntroducerV1AdminLib::setAssetIntroducerDiscount: INVALID_INTRODUCER_DISCOUNT\"\r\n        );\r\n\r\n        address oldAssetIntroducerDiscount = __state.assetIntroducerDiscount;\r\n        __state.assetIntroducerDiscount = __assetIntroducerDiscount;\r\n        emit AssetIntroducerDiscountChanged(oldAssetIntroducerDiscount, __assetIntroducerDiscount);\r\n    }\r\n\r\n    function setAssetIntroducerPrice(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __priceUsd\r\n    )\r\n    external {\r\n        require(\r\n            __priceUsd == uint96(__priceUsd),\r\n            \"AssetIntroducerV1AdminLib::setAssetIntroducerPrice: INVALID_DOLLAR_AMOUNT\"\r\n        );\r\n\r\n        bytes3 countryCode = AssetIntroducerV1UserLib._verifyAndConvertCountryCodeToBytes(__countryCode);\r\n        uint oldPriceUsd = __state.countryCodeToAssetIntroducerTypeToPriceUsd[countryCode][uint8(__introducerType)];\r\n        __state.countryCodeToAssetIntroducerTypeToPriceUsd[countryCode][uint8(__introducerType)] = uint96(__priceUsd);\r\n        emit AssetIntroducerPriceChanged(__countryCode, __introducerType, oldPriceUsd, __priceUsd);\r\n    }\r\n\r\n    function activateAssetIntroducerByTokenId(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        uint __tokenId\r\n    )\r\n    public {\r\n        require(\r\n            !__state.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerV1AdminLib::activateAssetIntroducerByTokenId ALREADY_ACTIVATED\"\r\n        );\r\n\r\n        __state.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds = true;\r\n        emit AssetIntroducerActivationChanged(__tokenId, true);\r\n    }\r\n\r\n    function setStakingPurchaser(\r\n        AssetIntroducerData.AssetIntroducerStateV1 storage __state,\r\n        address __stakingPurchaser\r\n    )\r\n    public {\r\n        require(\r\n            __stakingPurchaser != address(0),\r\n            \"AssetIntroducerV1AdminLib::setStakingPurchaser INVALID_STAKING_PURCHASER\"\r\n        );\r\n        address oldStakingPurchaser = __state.stakingPurchaser;\r\n        __state.stakingPurchaser = __stakingPurchaser;\r\n        emit StakingPurchaserChanged(oldStakingPurchaser, __stakingPurchaser);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/AssetIntroducerV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerV1 is ERC721Token, IAssetIntroducerV1, IAssetIntroducerV1Initializable {\r\n\r\n    using AssetIntroducerV1UserLib for *;\r\n    using AssetIntroducerV1AdminLib for *;\r\n    using AssetIntroducerVotingLib for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeBitMath for uint128;\r\n    using SafeMath for uint;\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the purchase struct used by the contract\r\n    bytes32 public constant BUY_ASSET_INTRODUCER_TYPE_HASH = keccak256(\"BuyAssetIntroducer(uint256 tokenId,uint256 nonce,uint256 expiry)\");\r\n\r\n    string internal constant NAME = \"DMM: Asset Introducer\";\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    function name() external view returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return \"aDMM\";\r\n    }\r\n\r\n    function dmg() external view returns (address) {\r\n        return _assetIntroducerStateV1.dmg;\r\n    }\r\n\r\n    function dmmController() external view returns (address) {\r\n        return _assetIntroducerStateV1.dmmController;\r\n    }\r\n\r\n    function initTimestamp() external view returns (uint64) {\r\n        return _assetIntroducerStateV1.initTimestamp;\r\n    }\r\n\r\n    function stakingPurchaser() external view returns (address) {\r\n        return _assetIntroducerStateV1.stakingPurchaser;\r\n    }\r\n\r\n    function openSeaProxyRegistry() external view returns (address) {\r\n        return _erc721StateV1.openSeaProxyRegistry;\r\n    }\r\n\r\n    function domainSeparator() external view returns (bytes32) {\r\n        return _assetIntroducerStateV1.domainSeparator;\r\n    }\r\n\r\n    function underlyingTokenValuator() external view returns (address) {\r\n        return _assetIntroducerStateV1.underlyingTokenValuator;\r\n    }\r\n\r\n    function assetIntroducerDiscount() external view returns (address) {\r\n        return _assetIntroducerStateV1.assetIntroducerDiscount;\r\n    }\r\n\r\n    function getTotalDmgLocked() external view returns (uint) {\r\n        return _assetIntroducerStateV1.totalDmgLocked;\r\n    }\r\n\r\n    function getAssetIntroducerDiscount() public view returns (uint) {\r\n        return _assetIntroducerStateV1.getAssetIntroducerDiscount();\r\n    }\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function initialize(\r\n        string calldata __baseURI,\r\n        address __openSeaProxyRegistry,\r\n        address __owner,\r\n        address __guardian,\r\n        address __dmg,\r\n        address __dmmController,\r\n        address __underlyingTokenValuator,\r\n        address __assetIntroducerDiscount\r\n    )\r\n    external\r\n    initializer {\r\n        ERC721Token.initialize(__baseURI, __openSeaProxyRegistry);\r\n        IOwnableOrGuardian.initialize(__owner, __guardian);\r\n\r\n        _assetIntroducerStateV1.dmg = __dmg;\r\n        _assetIntroducerStateV1.dmmController = __dmmController;\r\n        _assetIntroducerStateV1.underlyingTokenValuator = __underlyingTokenValuator;\r\n        _assetIntroducerStateV1.assetIntroducerDiscount = __assetIntroducerDiscount;\r\n\r\n        _assetIntroducerStateV1.initTimestamp = uint64(block.timestamp);\r\n        _assetIntroducerStateV1.domainSeparator = keccak256(\r\n            abi.encode(DOMAIN_TYPE_HASH, keccak256(bytes(NAME)), EvmUtil.getChainId(), address(this))\r\n        );\r\n    }\r\n\r\n    function createAssetIntroducersForPrimaryMarket(\r\n        string[] calldata __countryCodes,\r\n        AssetIntroducerType[] calldata __introducerTypes\r\n    )\r\n    external\r\n    nonReentrant\r\n    onlyOwnerOrGuardian\r\n    returns (uint[] memory) {\r\n        return _assetIntroducerStateV1.createAssetIntroducersForPrimaryMarket(\r\n            _erc721StateV1,\r\n            _voteStateV1,\r\n            __countryCodes,\r\n            __introducerTypes\r\n        );\r\n    }\r\n\r\n    function setDollarAmountToManageByTokenId(\r\n        uint __tokenId,\r\n        uint __dollarAmountToManage\r\n    )\r\n    public\r\n    requireIsValidNft(__tokenId)\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.setDollarAmountToManageByTokenId(__tokenId, __dollarAmountToManage);\r\n    }\r\n\r\n    function setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n        string calldata __countryCode,\r\n        AssetIntroducerType __introducerType,\r\n        uint __dollarAmountToManage\r\n    )\r\n    external\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n            __countryCode,\r\n            __introducerType,\r\n            __dollarAmountToManage\r\n        );\r\n    }\r\n\r\n    function setAssetIntroducerDiscount(\r\n        address __assetIntroducerDiscount\r\n    )\r\n    external\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.setAssetIntroducerDiscount(__assetIntroducerDiscount);\r\n    }\r\n\r\n    function setAssetIntroducerPrice(\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __priceUsd\r\n    )\r\n    external\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.setAssetIntroducerPrice(__countryCode, __introducerType, __priceUsd);\r\n    }\r\n\r\n    function activateAssetIntroducerByTokenId(\r\n        uint __tokenId\r\n    )\r\n    public\r\n    requireIsValidNft(__tokenId)\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.activateAssetIntroducerByTokenId(__tokenId);\r\n    }\r\n\r\n    function setStakingPurchaser(\r\n        address __stakingPurchaser\r\n    )\r\n    public\r\n    onlyOwnerOrGuardian {\r\n        _assetIntroducerStateV1.setStakingPurchaser(__stakingPurchaser);\r\n    }\r\n\r\n    // *************************\r\n    // ***** User Voting Functions\r\n    // *************************\r\n\r\n    function getCurrentVotes(\r\n        address __owner\r\n    ) external view returns (uint) {\r\n        return _voteStateV1.getCurrentVotes(__owner);\r\n    }\r\n\r\n    function getPriorVotes(\r\n        address __owner,\r\n        uint __blockNumber\r\n    )\r\n    external\r\n    view returns (uint128) {\r\n        return _voteStateV1.getPriorVotes(__owner, __blockNumber);\r\n    }\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function buyAssetIntroducerSlot(\r\n        uint __tokenId\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsPrimaryMarketNft(__tokenId)\r\n    returns (bool) {\r\n        _assetIntroducerStateV1.buyAssetIntroducer(__tokenId, msg.sender, msg.sender, _erc721StateV1, _voteStateV1, 0);\r\n        return true;\r\n    }\r\n\r\n    function buyAssetIntroducerSlotViaStaking(\r\n        uint __tokenId,\r\n        uint __additionalDiscount\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsPrimaryMarketNft(__tokenId)\r\n    requireIsStakingPurchaser\r\n    returns (bool) {\r\n        _assetIntroducerStateV1.buyAssetIntroducer(__tokenId, msg.sender, msg.sender, _erc721StateV1, _voteStateV1, __additionalDiscount);\r\n        return true;\r\n    }\r\n\r\n    function buyAssetIntroducerSlotBySig(\r\n        uint __tokenId,\r\n        address __recipient,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsPrimaryMarketNft(__tokenId)\r\n    returns (bool) {\r\n        address signer;\r\n        {\r\n            bytes32 structHash = keccak256(abi.encode(BUY_ASSET_INTRODUCER_TYPE_HASH, __tokenId, __nonce, __expiry));\r\n            signer = _assetIntroducerStateV1.validateOfflineSignature(structHash, __nonce, __expiry, __v, __r, __s);\r\n        }\r\n        _assetIntroducerStateV1.buyAssetIntroducer(__tokenId, __recipient, signer, _erc721StateV1, _voteStateV1, 0);\r\n        return true;\r\n    }\r\n\r\n    function buyAssetIntroducerSlotBySigWithDmgPermit(\r\n        uint __tokenId,\r\n        address __recipient,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s,\r\n        DmgApprovalStruct memory dmgApprovalStruct\r\n    )\r\n    public\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsPrimaryMarketNft(__tokenId)\r\n    returns (bool) {\r\n        IDMGToken(_assetIntroducerStateV1.dmg).approveBySig(\r\n            dmgApprovalStruct.spender,\r\n            dmgApprovalStruct.rawAmount,\r\n            dmgApprovalStruct.nonce,\r\n            dmgApprovalStruct.expiry,\r\n            dmgApprovalStruct.v,\r\n            dmgApprovalStruct.r,\r\n            dmgApprovalStruct.s\r\n        );\r\n\r\n        address signer;\r\n        {\r\n            bytes32 structHash = keccak256(abi.encode(BUY_ASSET_INTRODUCER_TYPE_HASH, __tokenId, __nonce, __expiry));\r\n            signer = _assetIntroducerStateV1.validateOfflineSignature(structHash, __nonce, __expiry, __v, __r, __s);\r\n        }\r\n\r\n        _assetIntroducerStateV1.buyAssetIntroducer(__tokenId, __recipient, signer, _erc721StateV1, _voteStateV1, 0);\r\n        return true;\r\n    }\r\n\r\n    function nonceOf(\r\n        address user\r\n    ) external view returns (uint) {\r\n        return _assetIntroducerStateV1.ownerToNonceMap[user];\r\n    }\r\n\r\n    function getDmgLockedByUser(\r\n        address __user\r\n    ) external view returns (uint) {\r\n        return _assetIntroducerStateV1.getDmgLockedByUser(_erc721StateV1, __user);\r\n    }\r\n\r\n    function getDollarAmountToManageByTokenId(\r\n        uint __tokenId\r\n    )\r\n    external\r\n    requireIsValidNft(__tokenId)\r\n    view returns (uint) {\r\n        return _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].dollarAmountToManage;\r\n    }\r\n\r\n    function getDmgLockedByTokenId(\r\n        uint __tokenId\r\n    )\r\n    external\r\n    requireIsValidNft(__tokenId)\r\n    view returns (uint) {\r\n        return _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].dmgLocked;\r\n    }\r\n\r\n    function getAssetIntroducerByTokenId(\r\n        uint __tokenId\r\n    )\r\n    requireIsValidNft(__tokenId)\r\n    external view returns (AssetIntroducerData.AssetIntroducer memory) {\r\n        return _assetIntroducerStateV1.idToAssetIntroducer[__tokenId];\r\n    }\r\n\r\n    function getAssetIntroducerPriceUsdByTokenId(\r\n        uint __tokenId\r\n    )\r\n    requireIsValidNft(__tokenId)\r\n    public view returns (uint) {\r\n        return _assetIntroducerStateV1.getAssetIntroducerPriceUsdByTokenId(__tokenId, 0);\r\n    }\r\n\r\n    function getAssetIntroducerPriceDmgByTokenId(\r\n        uint __tokenId\r\n    )\r\n    requireIsValidNft(__tokenId)\r\n    public view returns (uint) {\r\n        return _assetIntroducerStateV1.getAssetIntroducerPriceDmgByTokenId(__tokenId, 0);\r\n    }\r\n\r\n    function getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n        string calldata __countryCode,\r\n        AssetIntroducerType __introducerType\r\n    )\r\n    external view returns (uint) {\r\n        return _assetIntroducerStateV1.getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(__countryCode, __introducerType, 0);\r\n    }\r\n\r\n    function getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(\r\n        string calldata __countryCode,\r\n        AssetIntroducerType __introducerType\r\n    )\r\n    external view returns (uint) {\r\n        return _assetIntroducerStateV1.getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(__countryCode, __introducerType, 0);\r\n    }\r\n\r\n    function getAssetIntroducersByCountryCode(\r\n        string calldata __countryCode\r\n    ) external view returns (AssetIntroducer[] memory) {\r\n        return _assetIntroducerStateV1.getAssetIntroducersByCountryCode(__countryCode);\r\n    }\r\n\r\n    function getNextAssetIntroducerTokenId(\r\n        string calldata __countryCode,\r\n        AssetIntroducerType __introducerType\r\n    ) external view returns (uint) {\r\n        bytes3 countryCode = AssetIntroducerV1UserLib._verifyAndConvertCountryCodeToBytes(__countryCode);\r\n        uint8 introducerType = uint8(__introducerType);\r\n        return _assetIntroducerStateV1._getAssetIntroducerTokenId(countryCode, introducerType);\r\n    }\r\n\r\n\r\n    function getAllAssetIntroducers() public view returns (AssetIntroducer[] memory) {\r\n        return _assetIntroducerStateV1.getAllAssetIntroducers(_erc721StateV1);\r\n    }\r\n\r\n    function getPrimaryMarketAssetIntroducers() external view returns (AssetIntroducer[] memory) {\r\n        return _assetIntroducerStateV1.getPrimaryMarketAssetIntroducers(_erc721StateV1);\r\n    }\r\n\r\n    function getSecondaryMarketAssetIntroducers() external view returns (AssetIntroducer[] memory) {\r\n        return _assetIntroducerStateV1.getSecondaryMarketAssetIntroducers(_erc721StateV1);\r\n    }\r\n\r\n    function getNonceByUser(\r\n        address __user\r\n    ) external view returns (uint) {\r\n        return _assetIntroducerStateV1.ownerToNonceMap[__user];\r\n    }\r\n\r\n    function getDeployedCapitalUsdByTokenId(\r\n        uint __tokenId\r\n    ) public view returns (uint) {\r\n        return _assetIntroducerStateV1.getDeployedCapitalUsdByTokenId(__tokenId);\r\n    }\r\n\r\n    function getWithdrawnAmountByTokenIdAndUnderlyingToken(\r\n        uint __tokenId,\r\n        address __underlyingToken\r\n    ) external view returns (uint) {\r\n        return _assetIntroducerStateV1.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__underlyingToken];\r\n    }\r\n\r\n    function deactivateAssetIntroducerByTokenId(\r\n        uint __tokenId\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsSecondaryMarketNft(__tokenId)\r\n    requireIsNftOwner(__tokenId) {\r\n        _assetIntroducerStateV1.deactivateAssetIntroducerByTokenId(__tokenId);\r\n    }\r\n\r\n    function withdrawCapitalByTokenIdAndToken(\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsSecondaryMarketNft(__tokenId)\r\n    requireIsNftOwner(__tokenId)\r\n    requireCanWithdrawFunds(__tokenId) {\r\n        _assetIntroducerStateV1.withdrawCapitalByTokenIdAndToken(__tokenId, __token, __amount);\r\n    }\r\n\r\n    function depositCapitalByTokenIdAndToken(\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsSecondaryMarketNft(__tokenId)\r\n    requireCanWithdrawFunds(__tokenId)\r\n    requireIsNftOwner(__tokenId) {\r\n        _assetIntroducerStateV1.depositCapitalByTokenIdAndToken(__tokenId, __token, __amount);\r\n    }\r\n\r\n    function payInterestByTokenIdAndToken(\r\n        uint __tokenId,\r\n        address __token,\r\n        uint __amount\r\n    )\r\n    external\r\n    nonReentrant\r\n    requireIsValidNft(__tokenId)\r\n    requireIsSecondaryMarketNft(__tokenId)\r\n    requireCanWithdrawFunds(__tokenId)\r\n    requireIsNftOwner(__tokenId) {\r\n        _assetIntroducerStateV1.payInterestByTokenIdAndToken(__tokenId, __token, __amount);\r\n    }\r\n\r\n    // *************************\r\n    // ***** Other Functions\r\n    // *************************\r\n\r\n    function buyDmmFoundationToken(\r\n        uint __tokenId,\r\n        address __usdcToken\r\n    )\r\n    external\r\n    nonReentrant\r\n    onlyOwnerOrGuardian\r\n    requireIsPrimaryMarketNft(__tokenId)\r\n    returns (bool) {\r\n        require(\r\n            !_assetIntroducerStateV1.isDmmFoundationSetup,\r\n            \"AssetIntroducerV1::buyDmmFoundationToken: ALREADY_SETUP\"\r\n        );\r\n\r\n        _assetIntroducerStateV1.buyAssetIntroducer(__tokenId, msg.sender, msg.sender, _erc721StateV1, _voteStateV1, 0);\r\n\r\n        // $315,000; apply a 5% buffer to make sure we don't exceed the maximum\r\n        _assetIntroducerStateV1.setDollarAmountToManageByTokenId(__tokenId, 315000e18);\r\n        _assetIntroducerStateV1.activateAssetIntroducerByTokenId(__tokenId);\r\n\r\n        // $300,000\r\n        uint withdrawnAmount = 300000e18;\r\n        _assetIntroducerStateV1.tokenIdToUnderlyingTokenToWithdrawnAmount[__tokenId][__usdcToken] = withdrawnAmount;\r\n        emit CapitalWithdrawn(__tokenId, __usdcToken, withdrawnAmount);\r\n\r\n        _assetIntroducerStateV1.isDmmFoundationSetup = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function isDmmFoundationSetup() external view returns (bool) {\r\n        return _assetIntroducerStateV1.isDmmFoundationSetup;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"name\":\"AssetIntroducerActivationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dmgAmount\",\"type\":\"uint256\"}],\"name\":\"AssetIntroducerBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"name\":\"AssetIntroducerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAssetIntroducerDiscount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetIntroducerDiscount\",\"type\":\"address\"}],\"name\":\"AssetIntroducerDiscountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDollarAmountToManage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDollarAmountToManage\",\"type\":\"uint256\"}],\"name\":\"AssetIntroducerDollarAmountToManageChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceUsd\",\"type\":\"uint256\"}],\"name\":\"AssetIntroducerPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CapitalDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CapitalWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SignatureValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStakingPurchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStakingPurchaser\",\"type\":\"address\"}],\"name\":\"StakingPurchaserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUY_ASSET_INTRODUCER_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"activateAssetIntroducerByTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetIntroducerDiscount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAssetIntroducerSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"__v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"__r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"__s\",\"type\":\"bytes32\"}],\"name\":\"buyAssetIntroducerSlotBySig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"__v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"__r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"__s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AssetIntroducerData.DmgApprovalStruct\",\"name\":\"dmgApprovalStruct\",\"type\":\"tuple\"}],\"name\":\"buyAssetIntroducerSlotBySigWithDmgPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__additionalDiscount\",\"type\":\"uint256\"}],\"name\":\"buyAssetIntroducerSlotViaStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__usdcToken\",\"type\":\"address\"}],\"name\":\"buyDmmFoundationToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"__countryCodes\",\"type\":\"string[]\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType[]\",\"name\":\"__introducerTypes\",\"type\":\"uint8[]\"}],\"name\":\"createAssetIntroducersForPrimaryMarket\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"deactivateAssetIntroducerByTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"depositCapitalByTokenIdAndToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmmController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAssetIntroducers\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"countryCode\",\"type\":\"bytes3\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOnSecondaryMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAllowedToWithdrawFunds\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"serialNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"dmgLocked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"dollarAmountToManage\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerData.AssetIntroducer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"getAllTokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetIntroducerByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"countryCode\",\"type\":\"bytes3\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOnSecondaryMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAllowedToWithdrawFunds\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"serialNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"dmgLocked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"dollarAmountToManage\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerData.AssetIntroducer\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIntroducerDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"}],\"name\":\"getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetIntroducerPriceDmgByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"}],\"name\":\"getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetIntroducerPriceUsdByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"}],\"name\":\"getAssetIntroducersByCountryCode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"countryCode\",\"type\":\"bytes3\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOnSecondaryMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAllowedToWithdrawFunds\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"serialNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"dmgLocked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"dollarAmountToManage\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerData.AssetIntroducer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getDeployedCapitalUsdByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getDmgLockedByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__user\",\"type\":\"address\"}],\"name\":\"getDmgLockedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getDollarAmountToManageByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"}],\"name\":\"getNextAssetIntroducerTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__user\",\"type\":\"address\"}],\"name\":\"getNonceByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrimaryMarketAssetIntroducers\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"countryCode\",\"type\":\"bytes3\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOnSecondaryMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAllowedToWithdrawFunds\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"serialNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"dmgLocked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"dollarAmountToManage\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerData.AssetIntroducer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecondaryMarketAssetIntroducers\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"countryCode\",\"type\":\"bytes3\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"introducerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOnSecondaryMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAllowedToWithdrawFunds\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"serialNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"dmgLocked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"dollarAmountToManage\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerData.AssetIntroducer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDmgLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__underlyingToken\",\"type\":\"address\"}],\"name\":\"getWithdrawnAmountByTokenIdAndUnderlyingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"__openSeaProxyRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"__openSeaProxyRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__dmg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__dmmController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__underlyingTokenValuator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__assetIntroducerDiscount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDmmFoundationSetup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSeaProxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"payInterestByTokenIdAndToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"__data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"__isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__assetIntroducerDiscount\",\"type\":\"address\"}],\"name\":\"setAssetIntroducerDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__priceUsd\",\"type\":\"uint256\"}],\"name\":\"setAssetIntroducerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__dollarAmountToManage\",\"type\":\"uint256\"}],\"name\":\"setDollarAmountToManageByCountryCodeAndIntroducerType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__dollarAmountToManage\",\"type\":\"uint256\"}],\"name\":\"setDollarAmountToManageByTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__stakingPurchaser\",\"type\":\"address\"}],\"name\":\"setStakingPurchaser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingPurchaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"__interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingTokenValuator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCapitalByTokenIdAndToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AssetIntroducerV1","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"AssetIntroducerVotingLib:eb9f5a6a9a124f12c33234e37cd99dca83e90b7a;ERC721TokenLib:7d385bc79b638330d0f135cd90e11635caf4c26d;AssetIntroducerV1AdminLib:4e67c7c36e85a379c6e7ba1afd57bf1839a53397;AssetIntroducerV1UserLib:48955e6175c139693499f1f94bc646570ca7338b","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ed346104ff27b46c079f9d03fe9c82463ae3774321d40d9b5fabe153201599c9"}]}