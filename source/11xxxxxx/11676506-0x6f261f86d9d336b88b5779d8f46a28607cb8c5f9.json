{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\ncontract StrongWalletPresale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public presaleAmount = 3000000 ether;\r\n    ERC20 public STRONG;\r\n    ERC20 public USDT_TOKEN_ADDRESS;\r\n    mapping(address => uint) public sellers;\r\n\r\n    address[] public lengthSeller;\r\n    // event\r\n    event DepositETH();\r\n    event DepositUSDT();\r\n    event DepositETHWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\r\n    event DepositUSDTWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n    constructor() public {\r\n        priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n        STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);\r\n        USDT_TOKEN_ADDRESS = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    }\r\n    function getRate(uint _usdtAmount) public pure returns(uint) {\r\n        if(_usdtAmount <= 100 ether) return 160;\r\n        else if(_usdtAmount <= 1000 ether) return 150;\r\n        else if(_usdtAmount <= 5000 ether) return 135;\r\n        else if(_usdtAmount <= 10000 ether) return 125;\r\n        else if(_usdtAmount <= 50000 ether) return 115;\r\n        return 100;\r\n    }\r\n    function USDT2Strong(uint _usdtAmount) public pure returns(uint) {\r\n        return _usdtAmount.mul(1000).div(getRate(_usdtAmount));\r\n    }\r\n    function ETH2USDT() public view returns (uint){\r\n        int price;\r\n        (,price,,,) = priceFeed.latestRoundData();\r\n        return uint(price);\r\n    }\r\n    function ETH2STRONG(uint _amountETH) public view returns(uint) {\r\n        uint256 usdtAmount = ETH2USDT().mul(_amountETH).div(1 ether);\r\n        return USDT2Strong(usdtAmount);\r\n    }\r\n    function depositEth() public payable {\r\n        owner.transfer(msg.value);\r\n        STRONG.transfer(msg.sender, ETH2STRONG(msg.value));\r\n        emit DepositETH();\r\n    }\r\n    function depositUSDT(uint256 _amountUsdt) public {\r\n        require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));\r\n        STRONG.transfer(msg.sender, USDT2Strong(_amountUsdt));\r\n        emit DepositUSDT();\r\n    }\r\n\r\n    function depositEthWithSeller(address _seller) public payable {\r\n        require(msg.sender != _seller);\r\n        uint amountStrong = ETH2STRONG(msg.value);\r\n        owner.transfer(msg.value);\r\n        STRONG.transfer(msg.sender, amountStrong);\r\n        uint bonusPercent = 2;\r\n        if(sellers[_seller] == 0) {\r\n            bonusPercent = 5;\r\n            sellers[_seller] = amountStrong;\r\n        }\r\n        STRONG.transfer(_seller, amountStrong.mul(bonusPercent).div(100));\r\n        \r\n        emit DepositETHWithSeller(msg.sender, msg.value, amountStrong, _seller);\r\n    }\r\n    function depositUSDTWithSeller(uint256 _amountUsdt, address _seller) public {\r\n        require(msg.sender != _seller);\r\n        require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));\r\n        STRONG.transfer(msg.sender, USDT2Strong(_amountUsdt));\r\n        uint amountStrong = USDT2Strong(_amountUsdt);\r\n        uint bonusPercent = 2;\r\n        if(sellers[_seller] == 0) {\r\n            bonusPercent = 5;\r\n            sellers[_seller] = amountStrong;\r\n        }\r\n        STRONG.transfer(_seller, amountStrong.mul(bonusPercent).div(100));\r\n        emit DepositUSDTWithSeller(msg.sender, _amountUsdt, amountStrong, _seller);\r\n    }\r\n    /**\r\n    * @dev Withdraw the amount of token that is remaining in this contract.\r\n    * @param _address The address of EOA that can receive token from this contract.\r\n    */\r\n    function withdraw(address _address) public onlyOwner {\r\n        STRONG.transfer(_address, STRONG.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStrong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"DepositETHWithSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStrong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"DepositUSDTWithSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"ETH2STRONG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH2USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRONG\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"USDT2Strong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"depositEthWithSeller\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUsdt\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUsdt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"depositUSDTWithSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lengthSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrongWalletPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c5f762578d6243a250ca08bc703307731ef9068adac09fd43966a6060297d1c5"}]}