{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RewardsandVesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract VestingAndRewardDistribution {\\r\\n  string public constant name = \\\"CRT.finance vesting & pool reward distribution contract\\\"; // team tokens (2.5%) vested over 6 months.\\r\\n\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  address public immutable crt;\\r\\n\\r\\n  uint256 public immutable vestingAmount;\\r\\n  uint256 public immutable vestingBegin;\\r\\n  uint256 public immutable vestingEnd;\\r\\n  address public liquidity;\\r\\n  address public randomizedpool;\\r\\n  address public governancepool;\\r\\n  uint256 public timestamped;\\r\\n  uint256 public timestamped2;\\r\\n  uint256 public timestamped3;\\r\\n  address public pooleth;\\r\\n  uint256 public deployment = 1612987709;\\r\\n  uint256 public endchange = 1612404000;\\r\\n\\r\\n\\r\\n  address public recipient;\\r\\n  uint256 public lastUpdate;\\r\\n  \\r\\n  constructor(\\r\\n    address crt_,\\r\\n    address recipient_,\\r\\n    uint256 vestingAmount_,\\r\\n    uint256 vestingBegin_,\\r\\n    uint256 vestingEnd_\\r\\n  ) public {\\r\\n    require(\\r\\n      vestingBegin_ >= block.timestamp,\\r\\n      \\\"VestingAndRewardDistribution::constructor: vesting begin too early\\\"\\r\\n    );\\r\\n    require(\\r\\n      vestingEnd_ > vestingBegin_,\\r\\n      \\\"VestingAndRewardDistribution::constructor: vesting end too early\\\"\\r\\n    );\\r\\n\\r\\n    crt = crt_;\\r\\n    recipient = recipient_;\\r\\n\\r\\n    vestingAmount = vestingAmount_;\\r\\n    vestingBegin = vestingBegin_;\\r\\n    vestingEnd = vestingEnd_;\\r\\n\\r\\n    lastUpdate = vestingBegin_;\\r\\n  }\\r\\n\\r\\n  function delegate(address delegatee) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::delegate: unauthorized\\\"\\r\\n    );\\r\\n    ICrt(crt).delegate(delegatee);\\r\\n  }\\r\\n\\r\\n  function setRecipient(address recipient_) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::setRecipient: unauthorized\\\"\\r\\n    );\\r\\n    recipient = recipient_;\\r\\n  }\\r\\n  \\r\\n  function setGovernancePool(address governancepool_) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::setGovernancePool: unauthorized\\\"\\r\\n    );\\r\\n    require(deployment < block.timestamp);\\r\\n    governancepool = governancepool_;\\r\\n  }\\r\\n  \\r\\n  function setLP(address liquidity_) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::setRecipient: unauthorized\\\"\\r\\n    );\\r\\n    require(endchange < block.timestamp);\\r\\n    liquidity = liquidity_;\\r\\n  }\\r\\n  \\r\\n  function setRandomizedPool(address randomizedpool_) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::setRandomizedPool: unauthorized\\\"\\r\\n    );\\r\\n    require(deployment < block.timestamp);\\r\\n    randomizedpool = randomizedpool_;\\r\\n  }\\r\\n\\r\\n  function setETHPool(address pooleth_) external {\\r\\n    require(\\r\\n      msg.sender == recipient,\\r\\n      \\\"VestingAndRewardDistribution::setRandomizedPool: unauthorized\\\"\\r\\n    );\\r\\n    require(endchange < block.timestamp);\\r\\n    pooleth = pooleth_;\\r\\n  }\\r\\n\\r\\n  function claim() external {\\r\\n    uint256 amount;\\r\\n    if (block.timestamp >= vestingEnd) {\\r\\n      amount = ICrt(crt).balanceOf(address(this));\\r\\n    } else {\\r\\n      amount = vestingAmount.mul(block.timestamp - lastUpdate).div(\\r\\n        vestingEnd - vestingBegin\\r\\n      );\\r\\n      lastUpdate = block.timestamp;\\r\\n    }\\r\\n    ICrt(crt).transfer(recipient, amount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  function rewardLPandPools() external {\\r\\n    require(block.timestamp > timestamped);\\r\\n    timestamped = block.timestamp + 86400;\\r\\n    ICrt(crt).transfer(pooleth, 150 ether);\\r\\n    ICrt(crt).transfer(liquidity, 25 ether);\\r\\n    ICrt(crt).transfer(msg.sender, 2 ether);\\r\\n  }\\r\\n  \\r\\n    function rewardPoolGovernance() external {\\r\\n    require(block.timestamp > deployment); // can be used in 7 days when pool goes live\\r\\n    require(block.timestamp > timestamped2);\\r\\n    timestamped2 = block.timestamp + 86400;\\r\\n    ICrt(crt).transfer(governancepool, 50 ether);\\r\\n    ICrt(crt).transfer(msg.sender, 2 ether);\\r\\n  }\\r\\n  \\r\\n    function rewardPoolRandomized() external {\\r\\n    require(block.timestamp > deployment); // can be used in 7 days when pool goes live\\r\\n    require(block.timestamp > timestamped3);\\r\\n    timestamped3 = block.timestamp + 86400;\\r\\n    ICrt(crt).transfer(randomizedpool, 50 ether);\\r\\n    ICrt(crt).transfer(msg.sender, 2 ether);\\r\\n  }\\r\\n  \\r\\n  \\r\\n}\\r\\n\\r\\ninterface ICrt {\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function transfer(address dst, uint256 rawAmount) external returns (bool);\\r\\n  function delegate(address delegatee) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governancepool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pooleth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizedpool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLPandPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolRandomized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pooleth_\",\"type\":\"address\"}],\"name\":\"setETHPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governancepool_\",\"type\":\"address\"}],\"name\":\"setGovernancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomizedpool_\",\"type\":\"address\"}],\"name\":\"setRandomizedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamped2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamped3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VestingAndRewardDistribution","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ba0ef82a023de4223fd44b97f497ba2a89f28ac30000000000000000000000006af3e2bc271030904709013cf228c3bc81bb136100000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000000000000601bf65b00000000000000000000000000000000000000000000000000000000610a95db","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}