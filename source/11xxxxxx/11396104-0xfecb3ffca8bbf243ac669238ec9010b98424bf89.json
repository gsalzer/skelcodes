{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CoverRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.7.5;\\n\\nimport \\\"./interfaces/IBFactory.sol\\\";\\nimport \\\"./interfaces/IBPool.sol\\\";\\nimport \\\"./interfaces/ICover.sol\\\";\\nimport \\\"./interfaces/ICoverERC20.sol\\\";\\nimport \\\"./interfaces/ICoverRouter.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IProtocol.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/SafeERC20.sol\\\";\\nimport \\\"./utils/SafeMath.sol\\\";\\nimport \\\"./Rollover.sol\\\";\\n\\n/**\\n * @title CoverRouter for Cover Protocol, handles balancer activities\\n * @author crypto-pumpkin@github\\n */\\ncontract CoverRouter is ICoverRouter, Ownable, Rollover {\\n  using SafeERC20 for IBPool;\\n  using SafeERC20 for ICoverERC20;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  address public protocolFactory;\\n  IBFactory public bFactory;\\n  uint256 public constant TOTAL_WEIGHT = 50 ether;\\n  uint256 public claimCovTokenWeight = 40 ether;\\n  uint256 public noclaimCovTokenWeight = 49 ether;\\n  uint256 public claimSwapFee = 0.02 ether;\\n  uint256 public noclaimSwapFee = 0.01 ether;\\n  mapping(bytes32 => address) private pools;\\n\\n  constructor(address _protocolFactory, IBFactory _bFactory) {\\n    protocolFactory = _protocolFactory;\\n    bFactory = _bFactory;\\n  }\\n\\n  function poolForPair(address _covToken, address _pairedToken) external override view returns (address) {\\n    bytes32 pairKey = _pairKeyForPair(_covToken, _pairedToken);\\n    return pools[pairKey];\\n  }\\n\\n  function addCoverAndAddLiquidity(\\n    IProtocol _protocol,\\n    IERC20 _collateral,\\n    uint48 _timestamp,\\n    uint256 _amount,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt,\\n    bool _addBuffer\\n  ) external override {\\n    require(_amount > 0 && _claimPTAmt > 0 && _noclaimPTAmt > 0, \\\"CoverRouter: amount is 0\\\");\\n    _collateral.safeTransferFrom(msg.sender, address(this), _amount);\\n    _addCover(_protocol, address(_collateral), _timestamp, _collateral.balanceOf(address(this)));\\n\\n    ICover cover = ICover(_protocol.coverMap(address(_collateral), _timestamp));\\n    _addLiquidityForCover(msg.sender, cover, _pairedToken, _claimPTAmt, _noclaimPTAmt, _addBuffer);\\n  }\\n\\n  /// @notice rollover for a different account (from sender)\\n  function rolloverAndAddLiquidityForAccount(\\n    address _account,\\n    ICover _cover,\\n    uint48 _newTimestamp,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt,\\n    bool _addBuffer\\n  ) public override {\\n    _rolloverAccount(_account, address(_cover), _newTimestamp, false);\\n\\n    IProtocol protocol = IProtocol(_cover.owner());\\n    ICover newCover = ICover(protocol.coverMap(_cover.collateral(), _newTimestamp));\\n    _addLiquidityForCover(_account, newCover, _pairedToken, _claimPTAmt, _noclaimPTAmt, _addBuffer);\\n  }\\n\\n  /// @notice rollover for self\\n  function rolloverAndAddLiquidity(\\n    ICover _cover,\\n    uint48 _newTimestamp,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt,\\n    bool _addBuffer\\n  ) external override {\\n    rolloverAndAddLiquidityForAccount(msg.sender, _cover, _newTimestamp, _pairedToken, _claimPTAmt, _noclaimPTAmt, _addBuffer);\\n  }\\n\\n  /// @notice rollover for self\\n  function removeLiquidity(ICoverERC20 _covToken, IERC20 _pairedToken, uint256 _bptAmount) external override {\\n    require(_bptAmount > 0, \\\"CoverRouter: insufficient covToken\\\");\\n    bytes32 pairKey = _pairKeyForPair(address(_covToken), address(_pairedToken));\\n    IBPool pool = IBPool(pools[pairKey]);\\n    require(pool.balanceOf(msg.sender) >= _bptAmount, \\\"CoverRouter: insufficient BPT\\\");\\n\\n    uint256[] memory minAmountsOut = new uint256[](2);\\n    minAmountsOut[0] = 0;\\n    minAmountsOut[1] = 0;\\n\\n    pool.safeTransferFrom(msg.sender, address(this), _bptAmount);\\n    pool.exitPool(pool.balanceOf(address(this)), minAmountsOut);\\n\\n    _covToken.safeTransfer(msg.sender, _covToken.balanceOf(address(this)));\\n    _pairedToken.safeTransfer(msg.sender, _pairedToken.balanceOf(address(this)));\\n    emit RemoveLiquidity(msg.sender, address(pool));\\n  }\\n\\n  /// @notice add double sided liquidity, there maybe tokens left after for SELF\\n  function addLiquidity(\\n    ICoverERC20 _covToken,\\n    uint256 _covTokenAmount,\\n    IERC20 _pairedToken,\\n    uint256 _pairedTokenAmount,\\n    bool _addBuffer\\n  ) external override {\\n    require(_covToken.balanceOf(msg.sender) >= _covTokenAmount, \\\"CoverRouter: insufficient covToken\\\");\\n    require(_pairedToken.balanceOf(msg.sender) >= _pairedTokenAmount, \\\"CoverRouter: insufficient pairedToken\\\");\\n\\n    _covToken.safeTransferFrom(msg.sender, address(this), _covTokenAmount);\\n    _pairedToken.safeTransferFrom(msg.sender, address(this), _pairedTokenAmount);\\n    _joinPool(msg.sender, _covToken, _pairedToken, _pairedToken.balanceOf(address(this)), _addBuffer);\\n    _transferRem(msg.sender, _pairedToken);\\n  }\\n\\n  function addCoverAndCreatePools(\\n    IProtocol _protocol,\\n    IERC20 _collateral,\\n    uint48 _timestamp,\\n    uint256 _amount,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt\\n  ) external override {\\n    require(_amount > 0 && _claimPTAmt > 0 && _noclaimPTAmt > 0, \\\"CoverRouter: amount is 0\\\");\\n    require(_collateral.balanceOf(msg.sender) > _amount, \\\"CoverRouter: insufficient amount\\\");\\n    _collateral.safeTransferFrom(msg.sender, address(this), _amount);\\n    _addCover(_protocol, address(_collateral), _timestamp, _collateral.balanceOf(address(this)));\\n\\n    ICover cover = ICover(_protocol.coverMap(address(_collateral), _timestamp));\\n    ICoverERC20 claimCovToken = cover.claimCovToken();\\n    ICoverERC20 noclaimCovToken = cover.noclaimCovToken();\\n\\n    (uint256 claimPTAmt, uint256 noclaimPTAmt) =  _receivePairdTokens(msg.sender, _pairedToken, _claimPTAmt, _noclaimPTAmt);\\n    bytes32 claimPairKey = _pairKeyForPair(address(claimCovToken), address(_pairedToken));\\n    if (pools[claimPairKey] == address(0)) {\\n      pools[claimPairKey] = _createBalPoolAndTransferBpt(msg.sender, claimCovToken, _pairedToken, claimPTAmt, true);\\n    }\\n    bytes32 noclaimPairKey = _pairKeyForPair(address(noclaimCovToken), address(_pairedToken));\\n    if (pools[noclaimPairKey] == address(0)) {\\n      pools[noclaimPairKey] = _createBalPoolAndTransferBpt(msg.sender, noclaimCovToken, _pairedToken, noclaimPTAmt, false);\\n    }\\n    _transferRem(msg.sender, _pairedToken);\\n  }\\n\\n  function createNewPool(\\n    ICoverERC20 _covToken,\\n    uint256 _covTokenAmount,\\n    IERC20 _pairedToken,\\n    uint256 _pairedTokenAmount\\n  ) external override returns (address pool) {\\n    require(address(_pairedToken) != address(_covToken), \\\"CoverRouter: same token\\\");\\n    bytes32 pairKey = _pairKeyForPair(address(_covToken), address(_pairedToken));\\n    require(pools[pairKey] == address(0), \\\"CoverRouter: pool already exists\\\");\\n    _validCovToken(address(_covToken));\\n\\n    // Get the Cover contract from the token to check if its the claim or noclaim.\\n    ICover cover = ICover(ICoverERC20(_covToken).owner());\\n    bool isClaimPair = cover.claimCovToken() == _covToken;\\n\\n    _covToken.safeTransferFrom(msg.sender, address(this), _covTokenAmount);\\n    _pairedToken.safeTransferFrom(msg.sender, address(this), _pairedTokenAmount);\\n    pool = _createBalPoolAndTransferBpt(msg.sender, _covToken, _pairedToken, _pairedToken.balanceOf(address(this)), isClaimPair);\\n    pools[pairKey] = pool;\\n  }\\n\\n  function setSwapFee(uint256 _claimSwapFees, uint256 _noclaimSwapFees) external override onlyOwner {\\n    require(_claimSwapFees > 0 && _noclaimSwapFees > 0, \\\"CoverRouter: invalid fees\\\");\\n    claimSwapFee = _claimSwapFees;\\n    noclaimSwapFee = _noclaimSwapFees;\\n  }\\n\\n  function setCovTokenWeights(uint256 _claimCovTokenWeight, uint256 _noclaimCovTokenWeight) external override onlyOwner {\\n    require(_claimCovTokenWeight < TOTAL_WEIGHT, \\\"CoverRouter: invalid claim weight\\\");\\n    require(_noclaimCovTokenWeight < TOTAL_WEIGHT, \\\"CoverRouter: invalid noclaim weight\\\");\\n    claimCovTokenWeight = _claimCovTokenWeight;\\n    noclaimCovTokenWeight = _noclaimCovTokenWeight;\\n  }\\n\\n  function setPoolForPair(address _covToken, address _pairedToken, address _newPool) public override onlyOwner {\\n    _validCovToken(_covToken);\\n    _validBalPoolTokens(_covToken, _pairedToken, IBPool(_newPool));\\n\\n    bytes32 pairKey = _pairKeyForPair(_covToken, _pairedToken);\\n    pools[pairKey] = _newPool;\\n    emit PoolUpdate(_covToken, _pairedToken, _newPool);\\n  }\\n\\n  function setPoolsForPairs(address[] memory _covTokens, address[] memory _pairedTokens, address[] memory _newPools) external override onlyOwner {\\n    require(_covTokens.length == _pairedTokens.length, \\\"CoverRouter: Paired tokens length not equal\\\");\\n    require(_covTokens.length == _newPools.length, \\\"CoverRouter: Pools length not equal\\\");\\n\\n    for (uint256 i = 0; i < _covTokens.length; i++) {\\n      setPoolForPair(_covTokens[i], _pairedTokens[i], _newPools[i]);\\n    }\\n  }\\n\\n  function _pairKeyForPair(address _covToken, address _pairedToken) internal view returns (bytes32 pairKey) {\\n    (address token0, address token1) = _covToken < _pairedToken ? (_covToken, _pairedToken) : (_pairedToken, _covToken);\\n    pairKey = keccak256(abi.encodePacked(\\n      protocolFactory,\\n      token0,\\n      token1\\n    ));\\n  }\\n\\n  function _getBptAmountOut(\\n    IBPool pool,\\n    address _covToken,\\n    uint256 _covTokenAmount,\\n    address _pairedToken,\\n    uint256 _pairedTokenAmount,\\n    bool _addBuffer\\n  ) internal view returns (uint256 bptAmountOut, uint256[] memory maxAmountsIn) {\\n    uint256 poolAmountOutInCov = _covTokenAmount.mul(pool.totalSupply()).div(pool.getBalance(_covToken));\\n    uint256 poolAmountOutInPaired = _pairedTokenAmount.mul(pool.totalSupply()).div(pool.getBalance(_pairedToken));\\n    bptAmountOut = poolAmountOutInCov > poolAmountOutInPaired ? poolAmountOutInPaired : poolAmountOutInCov;\\n    bptAmountOut = _addBuffer ? bptAmountOut.mul(99).div(100) : bptAmountOut;\\n\\n    address[] memory tokens = pool.getFinalTokens();\\n    maxAmountsIn = new uint256[](2);\\n    maxAmountsIn[0] =  _covTokenAmount;\\n    maxAmountsIn[1] = _pairedTokenAmount;\\n    if (tokens[1] == _covToken) {\\n      maxAmountsIn[0] =  _pairedTokenAmount;\\n      maxAmountsIn[1] = _covTokenAmount;\\n    }\\n  }\\n\\n  /// @notice make covToken is from Cover Protocol Factory\\n  function _validCovToken(address _covToken) private view {\\n    require(_covToken != address(0), \\\"CoverRouter: covToken is 0 address\\\");\\n\\n    ICover cover = ICover(ICoverERC20(_covToken).owner());\\n    address tokenProtocolFactory = IProtocol(cover.owner()).owner();\\n    require(tokenProtocolFactory == protocolFactory, \\\"CoverRouter: wrong factory\\\");\\n  }\\n\\n  function _validBalPoolTokens(address _covToken, address _pairedToken, IBPool _pool) private view {\\n    require(_pairedToken != _covToken, \\\"CoverRouter: same token\\\");\\n    address[] memory tokens = _pool.getFinalTokens();\\n    require(tokens.length == 2, \\\"CoverRouter: Too many tokens in pool\\\");\\n    require((_covToken == tokens[0] && _pairedToken == tokens[1]) || (_pairedToken == tokens[0] && _covToken == tokens[1]), \\\"CoverRouter: tokens don't match\\\");\\n  }\\n\\n  /// @dev add buffer support (1%) as suggested by balancer doc to help get tx through. https://docs.balancer.finance/smart-contracts/core-contracts/api#joinpool\\n  function _joinPool(\\n    address _account,\\n    IERC20 _covToken,\\n    IERC20 _pairedToken,\\n    uint256 _pairedTokenAmount,\\n    bool _addBuffer\\n  ) internal {\\n    address poolAddr = pools[_pairKeyForPair(address(_covToken), address(_pairedToken))];\\n    require(poolAddr != address(0), \\\"CoverRouter: pool not found\\\");\\n\\n    IBPool pool = IBPool(poolAddr);\\n    uint256 covTokenAmount = _covToken.balanceOf(address(this));\\n    (uint256 bptAmountOut, uint256[] memory maxAmountsIn) = _getBptAmountOut(pool, address(_covToken), covTokenAmount, address(_pairedToken), _pairedTokenAmount, _addBuffer);\\n    _approve(_covToken, poolAddr, covTokenAmount);\\n    _approve(_pairedToken, poolAddr, _pairedTokenAmount);\\n    pool.joinPool(bptAmountOut, maxAmountsIn);\\n\\n    pool.safeTransfer(_account, pool.balanceOf(address(this)));\\n    _transferRem(_account, _covToken);\\n    emit AddLiquidity(_account, poolAddr);\\n  }\\n\\n  function _transferRem(address _account, IERC20 token) internal {\\n    uint256 rem = token.balanceOf(address(this));\\n    if (rem > 0) {\\n      token.safeTransfer(_account, rem);\\n    }\\n  }\\n\\n  function _receivePairdTokens(\\n    address _account,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt\\n  ) internal returns (uint256 receivedClaimPTAmt, uint256 receivedNoclaimPTAmt) {\\n    uint256 total = _claimPTAmt.add(_noclaimPTAmt);\\n    _pairedToken.safeTransferFrom(_account, address(this), total);\\n    uint256 bal = _pairedToken.balanceOf(address(this));\\n    receivedClaimPTAmt = bal.mul(_claimPTAmt).div(total);\\n    receivedNoclaimPTAmt = bal.mul(_noclaimPTAmt).div(total);\\n  }\\n\\n  function _addLiquidityForCover(\\n    address _account,\\n    ICover _cover,\\n    IERC20 _pairedToken,\\n    uint256 _claimPTAmt,\\n    uint256 _noclaimPTAmt,\\n    bool _addBuffer\\n  ) private {\\n    IERC20 claimCovToken = _cover.claimCovToken();\\n    IERC20 noclaimCovToken = _cover.noclaimCovToken();\\n    (uint256 claimPTAmt, uint256 noclaimPTAmt) =  _receivePairdTokens(_account, _pairedToken, _claimPTAmt, _noclaimPTAmt);\\n\\n    _joinPool(_account, claimCovToken, _pairedToken, claimPTAmt, _addBuffer);\\n    _joinPool(_account, noclaimCovToken, _pairedToken, noclaimPTAmt, _addBuffer);\\n    _transferRem(_account, _pairedToken);\\n  }\\n\\n  function _createBalPoolAndTransferBpt(\\n    address _account,\\n    IERC20 _covToken,\\n    IERC20 _pairedToken,\\n    uint256 _pairedTokenAmount,\\n    bool _isClaimPair\\n  ) private returns (address poolAddr) {\\n    IBPool pool = bFactory.newBPool();\\n    poolAddr = address(pool);\\n\\n    uint256 _covTokenSwapFee = claimSwapFee;\\n    uint256 _covTokenWeight = claimCovTokenWeight;\\n    if (!_isClaimPair) {\\n      _covTokenSwapFee = noclaimSwapFee;\\n      _covTokenWeight = noclaimCovTokenWeight;\\n    }\\n    pool.setSwapFee(_covTokenSwapFee);\\n    uint256 covTokenAmount = _covToken.balanceOf(address(this));\\n    _approve(_covToken, poolAddr, covTokenAmount);\\n    pool.bind(address(_covToken), covTokenAmount, _covTokenWeight);\\n    _approve(_pairedToken, poolAddr, _pairedTokenAmount);\\n    pool.bind(address(_pairedToken), _pairedTokenAmount, TOTAL_WEIGHT.sub(_covTokenWeight));\\n\\n    pool.finalize();\\n    emit PoolUpdate(address(_covToken), address(_pairedToken), poolAddr);\\n    pool.safeTransfer(_account, pool.balanceOf(address(this)));\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./IBPool.sol\\\";\\n\\ninterface IBFactory {\\n  function newBPool() external returns (IBPool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBPool is IERC20 {\\n    function getFinalTokens() external view returns(address[] memory);\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n    function setSwapFee(uint256 swapFee) external;\\n    function setController(address controller) external;\\n    function finalize() external;\\n    function bind(address token, uint256 balance, uint256 denorm) external;\\n    function getBalance(address token) external view returns (uint);\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./ICoverERC20.sol\\\";\\n\\n/**\\n * @title Cover contract interface. See {Cover}.\\n * @author crypto-pumpkin@github\\n */\\ninterface ICover {\\n  function owner() external view returns (address);\\n  function expirationTimestamp() external view returns (uint48);\\n  function collateral() external view returns (address);\\n  function claimCovToken() external view returns (ICoverERC20);\\n  function noclaimCovToken() external view returns (ICoverERC20);\\n  function claimNonce() external view returns (uint256);\\n\\n  function redeemClaim() external;\\n  function redeemNoclaim() external;\\n  function redeemCollateral(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ICoverERC20 is IERC20 {\\n  function owner() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.7.5;\\n\\nimport \\\"./ICover.sol\\\";\\nimport \\\"./ICoverERC20.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IProtocol.sol\\\";\\n\\n/**\\n * @title CoverRouter interface\\n * @author crypto-pumpkin@github\\n */\\ninterface ICoverRouter {\\n  event PoolUpdate(address indexed covtoken, address indexed pairedToken, address indexed poolAddr);\\n  event AddLiquidity(address indexed account, address indexed poolAddr);\\n  event RemoveLiquidity(address indexed account, address indexed poolAddr);\\n\\n  function poolForPair(address _covToken, address _pairedToken) external view returns (address);\\n\\n  /// @notice _covTokenAmount + _pairedTokenAmount + XCovTokenWeight will set the initial price for the covToken\\n  function createNewPool(ICoverERC20 _covToken, uint256 _covAmount, IERC20 _pairedToken, uint256 _pairedAmount) external returns (address);\\n  /// @notice add double sided liquidity, there maybe token left after add liquidity\\n  function addLiquidity(ICoverERC20 _covToken,uint256 _covTokenAmount, IERC20 _pairedToken, uint256 _pairedTokenAmount, bool _addBuffer) external;\\n  function removeLiquidity(ICoverERC20 _covToken, IERC20 _pairedToken, uint256 _btpAmount) external;\\n\\n  function addCoverAndAddLiquidity(\\n    IProtocol _protocol,\\n    IERC20 _collateral,\\n    uint48 _timestamp,\\n    uint256 _amount,\\n    IERC20 _pairedToken,\\n    uint256 _claimPairedTokenAmount,\\n    uint256 _noclaimPairedTokenAmount,\\n    bool _addBuffer\\n  ) external;\\n  function rolloverAndAddLiquidity(\\n    ICover _cover,\\n    uint48 _newTimestamp,\\n    IERC20 _pairedToken,\\n    uint256 _claimPairedTokenAmount,\\n    uint256 _noclaimPairedTokenAmount,\\n    bool _addBuffer\\n  ) external;\\n  function rolloverAndAddLiquidityForAccount(\\n    address _account,\\n    ICover _cover,\\n    uint48 _newTimestamp,\\n    IERC20 _pairedToken,\\n    uint256 _claimPairedTokenAmount,\\n    uint256 _noclaimPairedTokenAmount,\\n    bool _addBuffer\\n  ) external;\\n  function addCoverAndCreatePools(\\n    IProtocol _protocol,\\n    IERC20 _collateral,\\n    uint48 _timestamp,\\n    uint256 _amount,\\n    IERC20 _pairedToken,\\n    uint256 _claimPairedTokenAmount,\\n    uint256 _noclaimPairedTokenAmount\\n  ) external;\\n\\n  // owner only\\n  function setPoolForPair(address _covToken, address _pairedToken, address _newPool) external;\\n  function setPoolsForPairs(address[] memory _covTokens, address[] memory _pairedTokens, address[] memory _newPools) external;\\n  function setCovTokenWeights(uint256 _claimCovTokenWeight, uint256 _noclaimCovTokenWeight) external;\\n  function setSwapFee(uint256 _claimSwapFees, uint256 _noclaimSwapFees) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.4;\\n\\n/**\\n * @title Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.7.3;\\n\\n/**\\n * @dev Protocol contract interface. See {Protocol}.\\n * @author crypto-pumpkin@github\\n */\\ninterface IProtocol {\\n  function owner() external view returns (address);\\n  function active() external view returns (bool);\\n  function name() external view returns (bytes32);\\n  function claimNonce() external view returns (uint256);\\n  /// @notice delay # of seconds for redeem with accepted claim, redeemCollateral is not affected\\n  function claimRedeemDelay() external view returns (uint256);\\n  /// @notice delay # of seconds for redeem without accepted claim, redeemCollateral is not affected\\n  function noclaimRedeemDelay() external view returns (uint256);\\n  function activeCovers(uint256 _index) external view returns (address);\\n  function claimDetails(uint256 _claimNonce) external view returns (uint16 _payoutNumerator, uint16 _payoutDenominator, uint48 _incidentTimestamp, uint48 _timestamp);\\n  function collateralStatusMap(address _collateral) external view returns (uint8 _status);\\n  function expirationTimestampMap(uint48 _expirationTimestamp) external view returns (bytes32 _name, uint8 _status);\\n  function coverMap(address _collateral, uint48 _expirationTimestamp) external view returns (address);\\n\\n  function collaterals(uint256 _index) external view returns (address);\\n  function collateralsLength() external view returns (uint256);\\n  function expirationTimestamps(uint256 _index) external view returns (uint48);\\n  function expirationTimestampsLength() external view returns (uint256);\\n  function activeCoversLength() external view returns (uint256);\\n  function claimsLength() external view returns (uint256);\\n  function addCover(address _collateral, uint48 _timestamp, uint256 _amount)\\n    external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.4;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n * @author crypto-pumpkin@github\\n *\\n * By initialization, the owner account will be the one that called initializeOwner. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev COVER: Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.7.4;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Rollover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.7.5;\\n\\nimport \\\"./interfaces/ICover.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IProtocol.sol\\\";\\nimport \\\"./interfaces/IRollover.sol\\\";\\nimport \\\"./utils/SafeERC20.sol\\\";\\nimport \\\"./utils/SafeMath.sol\\\";\\n\\n/**\\n * @title Rollover zap for Cover Protocol that auto redeems and rollover the coverage to the next cover, it does not sell or buy tokens for sender\\n * @author crypto-pumpkin@github\\n */\\ncontract Rollover is IRollover {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  /// @notice rollover for sender\\n  function rollover(address _cover, uint48 _newTimestamp) external override {\\n    _rolloverAccount(msg.sender, _cover, _newTimestamp, true);\\n  }\\n\\n  /// @notice rollover for a different account (from sender)\\n  function rolloverAccount(address _account, address _cover, uint48 _newTimestamp) public override {\\n    _rolloverAccount(_account, _cover, _newTimestamp, true);\\n  }\\n\\n  function _rolloverAccount(\\n    address _account,\\n    address _cover,\\n    uint48 _newTimestamp,\\n    bool _isLastStep\\n  ) internal {\\n    ICover cover = ICover(_cover);\\n    uint48 expirationTimestamp = cover.expirationTimestamp();\\n    require(expirationTimestamp != _newTimestamp && block.timestamp < _newTimestamp, \\\"Rollover: invalid expiry\\\");\\n\\n    IProtocol protocol = IProtocol(cover.owner());\\n    bool acceptedClaim = cover.claimNonce() != protocol.claimNonce();\\n    require(!acceptedClaim, \\\"Rollover: there is an accepted claim\\\");\\n\\n    (, uint8 expirationStatus) = protocol.expirationTimestampMap(_newTimestamp);\\n    require(expirationStatus == 1, \\\"Rollover: new timestamp is not active\\\");\\n\\n    if (block.timestamp < expirationTimestamp) {\\n      _redeemCollateral(cover, _account);\\n    } else {\\n      require(block.timestamp >= uint256(expirationTimestamp).add(protocol.noclaimRedeemDelay()), \\\"Rollover: not ready\\\");\\n      _redeemNoclaim(cover, _account);\\n    }\\n    IERC20 collateral = IERC20(cover.collateral());\\n    uint256 redeemedAmount = collateral.balanceOf(address(this));\\n\\n    _addCover(protocol, address(collateral), _newTimestamp, redeemedAmount);\\n    emit RolloverCover(_account, address(protocol));\\n    if (_isLastStep) {\\n      _sendCovTokensToAccount(protocol, address(collateral), _newTimestamp, _account);\\n    }\\n  }\\n\\n  function _approve(IERC20 _token, address _spender, uint256 _amount) internal {\\n    if (_token.allowance(address(this), _spender) < _amount) {\\n      _token.approve(_spender, uint256(-1));\\n    }\\n  }\\n\\n  function _addCover(\\n    IProtocol _protocol,\\n    address _collateral,\\n    uint48 _timestamp,\\n    uint256 _amount\\n  ) internal {\\n    _approve(IERC20(_collateral), address(_protocol), _amount);\\n    _protocol.addCover(address(_collateral), _timestamp, _amount);\\n  }\\n\\n  function _sendCovTokensToAccount(\\n    IProtocol protocol,\\n    address _collateral,\\n    uint48 _timestamp,\\n    address _account\\n  ) private {\\n    ICover newCover = ICover(protocol.coverMap(_collateral, _timestamp));\\n\\n    IERC20 newClaimCovToken = newCover.claimCovToken();\\n    IERC20 newNoclaimCovToken = newCover.noclaimCovToken();\\n\\n    newClaimCovToken.safeTransfer(_account, newClaimCovToken.balanceOf(address(this)));\\n    newNoclaimCovToken.safeTransfer(_account, newNoclaimCovToken.balanceOf(address(this)));\\n  }\\n\\n  function _redeemCollateral(ICover cover, address _account) private {\\n    // transfer CLAIM and NOCLAIM to contract\\n    IERC20 claimCovToken = cover.claimCovToken();\\n    IERC20 noclaimCovToken = cover.noclaimCovToken();\\n    uint256 claimCovTokenBal = claimCovToken.balanceOf(_account);\\n    uint256 noclaimCovTokenBal = noclaimCovToken.balanceOf(_account);\\n    uint256 amount = (claimCovTokenBal > noclaimCovTokenBal) ? noclaimCovTokenBal : claimCovTokenBal;\\n    require(amount > 0, \\\"Rollover: insufficient covTokens\\\");\\n\\n    claimCovToken.safeTransferFrom(_account, address(this), amount);\\n    noclaimCovToken.safeTransferFrom(_account, address(this), amount);\\n\\n    // redeem collateral back to contract with CLAIM and NOCLAIM tokens\\n    cover.redeemCollateral(amount);\\n  }\\n\\n  function _redeemNoclaim(ICover cover, address _account) private {\\n    // transfer CLAIM and NOCLAIM to contract\\n    IERC20 noclaimCovToken = cover.noclaimCovToken();\\n    uint256 amount = noclaimCovToken.balanceOf(_account);\\n    require(amount > 0, \\\"Rollover: insufficient NOCLAIM covTokens\\\");\\n    noclaimCovToken.safeTransferFrom(_account, address(this), amount);\\n\\n    // redeem collateral back to contract with NOCLAIM tokens\\n    cover.redeemNoclaim();\\n  }\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRollover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.7.5;\\n\\ninterface IRollover {\\n  event RolloverCover(address indexed _account, address _protocol);\\n\\n  function rollover(address _cover, uint48 _newTimestamp) external;\\n  function rolloverAccount(address _account, address _cover, uint48 _newTimestamp) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFactory\",\"type\":\"address\"},{\"internalType\":\"contract IBFactory\",\"name\":\"_bFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"covtoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"PoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"RolloverCover\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addBuffer\",\"type\":\"bool\"}],\"name\":\"addCoverAndAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimPTAmt\",\"type\":\"uint256\"}],\"name\":\"addCoverAndCreatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"_covToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_covTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addBuffer\",\"type\":\"bool\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCovTokenWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"_covToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_covTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"createNewPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noclaimCovTokenWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noclaimSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_covToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"}],\"name\":\"poolForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"_covToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bptAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cover\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_newTimestamp\",\"type\":\"uint48\"}],\"name\":\"rollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cover\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_newTimestamp\",\"type\":\"uint48\"}],\"name\":\"rolloverAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICover\",\"name\":\"_cover\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_newTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addBuffer\",\"type\":\"bool\"}],\"name\":\"rolloverAndAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract ICover\",\"name\":\"_cover\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_newTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimPTAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addBuffer\",\"type\":\"bool\"}],\"name\":\"rolloverAndAddLiquidityForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimCovTokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimCovTokenWeight\",\"type\":\"uint256\"}],\"name\":\"setCovTokenWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_covToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"setPoolForPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_covTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pairedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newPools\",\"type\":\"address[]\"}],\"name\":\"setPoolsForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimSwapFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noclaimSwapFees\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoverRouter","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000edfc81bf63527337cd2193925f9c0cf2d537acca0000000000000000000000009424b1412450d0f8fc2255faf6046b98213b76bd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}