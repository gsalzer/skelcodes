{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IPlatformIntegration {\r\n\r\n    /**\r\n     * @dev Deposit the given bAsset to Lending platform\r\n     * @param _bAsset bAsset address\r\n     * @param _amount Amount to deposit\r\n     */\r\n    function deposit(address _bAsset, uint256 _amount, bool isTokenFeeCharged)\r\n        external returns (uint256 quantityDeposited);\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(address _receiver, address _bAsset, uint256 _amount, bool _hasTxFee) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(address _receiver, address _bAsset, uint256 _amount, uint256 _totalAmount, bool _hasTxFee) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from the cache\r\n     */\r\n    function withdrawRaw(address _receiver, address _bAsset, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Returns the current balance of the given bAsset\r\n     */\r\n    function checkBalance(address _bAsset) external returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the pToken\r\n     */\r\n    function bAssetToPToken(address _bAsset) external returns (address pToken);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract InitializableModuleKeys {\r\n\r\n    // Governance                             // Phases\r\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\r\n    bytes32 internal KEY_STAKING;             // 1.2\r\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\r\n\r\n    // mStable\r\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\r\n    bytes32 internal KEY_MANAGER;             // 1.2\r\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\r\n    bytes32 internal KEY_META_TOKEN;          // 1.1\r\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\r\n\r\n    /**\r\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\r\n     *      via Proxy to initialize constants in the Proxy contract.\r\n     */\r\n    function _initialize() internal {\r\n        // keccak256() values are evaluated only once at the time of this function call.\r\n        // Hence, no need to assign hard-coded values to these variables.\r\n        KEY_GOVERNANCE = keccak256(\"Governance\");\r\n        KEY_STAKING = keccak256(\"Staking\");\r\n        KEY_PROXY_ADMIN = keccak256(\"ProxyAdmin\");\r\n\r\n        KEY_ORACLE_HUB = keccak256(\"OracleHub\");\r\n        KEY_MANAGER = keccak256(\"Manager\");\r\n        KEY_RECOLLATERALISER = keccak256(\"Recollateraliser\");\r\n        KEY_META_TOKEN = keccak256(\"MetaToken\");\r\n        KEY_SAVINGS_MANAGER = keccak256(\"SavingsManager\");\r\n    }\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract InitializableModule is InitializableModuleKeys {\r\n\r\n    INexus public nexus;\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    function _initialize(address _nexus) internal {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n        InitializableModuleKeys._initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\ncontract InitializablePausableModule is InitializableModule {\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by Governor\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by Governor\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     * Hooks into the Module to give the Governor ability to pause\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    function _initialize(address _nexus) internal {\r\n        InitializableModule._initialize(_nexus);\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     * @return Returns `true` when paused, otherwise `false`\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the Governor to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyGovernor whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by Governor to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyGovernor whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ninterface MassetStructs {\r\n\r\n    /** @dev Stores high level basket info */\r\n    struct Basket {\r\n\r\n        /** @dev Array of Bassets currently active */\r\n        Basset[] bassets;\r\n\r\n        /** @dev Max number of bAssets that can be present in any Basket */\r\n        uint8 maxBassets;\r\n\r\n        /** @dev Some bAsset is undergoing re-collateralisation */\r\n        bool undergoingRecol;\r\n\r\n        /**\r\n         * @dev In the event that we do not raise enough funds from the auctioning of a failed Basset,\r\n         * The Basket is deemed as failed, and is undercollateralised to a certain degree.\r\n         * The collateralisation ratio is used to calc Masset burn rate.\r\n         */\r\n        bool failed;\r\n        uint256 collateralisationRatio;\r\n\r\n    }\r\n\r\n    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\r\n    struct Basset {\r\n\r\n        /** @dev Address of the bAsset */\r\n        address addr;\r\n\r\n        /** @dev Status of the basset,  */\r\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\r\n\r\n        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\r\n        bool isTransferFeeCharged; // takes a byte in storage\r\n\r\n        /**\r\n         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n         */\r\n        uint256 ratio;\r\n\r\n        /** @dev Target weights of the Basset (100% == 1e18) */\r\n        uint256 maxWeight;\r\n\r\n        /** @dev Amount of the Basset that is held in Collateral */\r\n        uint256 vaultBalance;\r\n\r\n    }\r\n\r\n    /** @dev Status of the Basset - has it broken its peg? */\r\n    enum BassetStatus {\r\n        Default,\r\n        Normal,\r\n        BrokenBelowPeg,\r\n        BrokenAbovePeg,\r\n        Blacklisted,\r\n        Liquidating,\r\n        Liquidated,\r\n        Failed\r\n    }\r\n\r\n    /** @dev Internal details on Basset */\r\n    struct BassetDetails {\r\n        Basset bAsset;\r\n        address integrator;\r\n        uint8 index;\r\n    }\r\n\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct ForgePropsMulti {\r\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct RedeemProps {\r\n        bool isValid;\r\n        Basset[] allBassets;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n\r\n    /** @dev All details needed for proportionate Redemption */\r\n    struct RedeemPropsMulti {\r\n        uint256 colRatio;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n}\r\n\r\ncontract IBasketManager is MassetStructs {\r\n\r\n    /** @dev Setters for mAsset to update balances */\r\n    function increaseVaultBalance(\r\n        uint8 _bAsset,\r\n        address _integrator,\r\n        uint256 _increaseAmount) external;\r\n    function increaseVaultBalances(\r\n        uint8[] calldata _bAsset,\r\n        address[] calldata _integrator,\r\n        uint256[] calldata _increaseAmount) external;\r\n    function decreaseVaultBalance(\r\n        uint8 _bAsset,\r\n        address _integrator,\r\n        uint256 _decreaseAmount) external;\r\n    function decreaseVaultBalances(\r\n        uint8[] calldata _bAsset,\r\n        address[] calldata _integrator,\r\n        uint256[] calldata _decreaseAmount) external;\r\n    function collectInterest() external\r\n        returns (uint256 interestCollected, uint256[] memory gains);\r\n\r\n    /** @dev Setters for Gov to update Basket composition */\r\n    function addBasset(\r\n        address _basset,\r\n        address _integration,\r\n        bool _isTransferFeeCharged) external returns (uint8 index);\r\n    function setBasketWeights(address[] calldata _bassets, uint256[] calldata _weights) external;\r\n    function setTransferFeesFlag(address _bAsset, bool _flag) external;\r\n\r\n    /** @dev Getters to retrieve Basket information */\r\n    function getBasket() external view returns (Basket memory b);\r\n    function prepareForgeBasset(address _token, uint256 _amt, bool _mint) external\r\n        returns (bool isValid, BassetDetails memory bInfo);\r\n    function prepareSwapBassets(address _input, address _output, bool _isMint) external view\r\n        returns (bool, string memory, BassetDetails memory, BassetDetails memory);\r\n    function prepareForgeBassets(address[] calldata _bAssets, uint256[] calldata _amts, bool _mint) external\r\n        returns (ForgePropsMulti memory props);\r\n    function prepareRedeemBassets(address[] calldata _bAssets) external view\r\n        returns (RedeemProps memory props);\r\n    function prepareRedeemMulti() external view\r\n        returns (RedeemPropsMulti memory props);\r\n    function getBasset(address _token) external view\r\n        returns (Basset memory bAsset);\r\n    function getBassets() external view\r\n        returns (Basset[] memory bAssets, uint256 len);\r\n    function paused() external view returns (bool);\r\n\r\n    /** @dev Recollateralisation */\r\n    function handlePegLoss(address _basset, bool _belowPeg) external returns (bool actioned);\r\n    function negateIsolation(address _basset) external;\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface IBasicToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary CommonHelpers {\r\n\r\n    /**\r\n     * @notice Fetch the `decimals()` from an ERC20 token\r\n     * @dev Grabs the `decimals()` from a contract and fails if\r\n     *      the decimal value does not live within a certain range\r\n     * @param _token Address of the ERC20 token\r\n     * @return uint256 Decimals of the ERC20 token\r\n     */\r\n    function getDecimals(address _token)\r\n    internal\r\n    view\r\n    returns (uint256) {\r\n        uint256 decimals = IBasicToken(_token).decimals();\r\n        require(decimals >= 4 && decimals <= 18, \"Token must have sufficient decimal places\");\r\n\r\n        return decimals;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\ncontract InitializableReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    function _initialize() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// External\r\n// Internal\r\n// Libs\r\n/**\r\n * @title   BasketManager\r\n * @notice  Manages the Basket composition for a particular mAsset. Feeds all required\r\n *          basket data to the mAsset and is responsible for keeping accurate records.\r\n *          BasketManager can also optimise lending pool integrations and perform\r\n *          re-collateralisation on failed bAssets.\r\n * @dev     VERSION: 2.0\r\n *          DATE:    2020-11-14\r\n */\r\ncontract BasketManager is\r\n    Initializable,\r\n    IBasketManager,\r\n    InitializablePausableModule,\r\n    InitializableReentrancyGuard\r\n{\r\n    using SafeMath for uint256;\r\n    using StableMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Events for Basket composition changes\r\n    event BassetAdded(address indexed bAsset, address integrator);\r\n    event BassetRemoved(address indexed bAsset);\r\n    event BassetsMigrated(address[] bAssets, address newIntegrator);\r\n    event BasketWeightsUpdated(address[] bAssets, uint256[] maxWeights);\r\n    event BassetStatusChanged(address indexed bAsset, BassetStatus status);\r\n    event BasketStatusChanged();\r\n    event TransferFeeEnabled(address indexed bAsset, bool enabled);\r\n\r\n    // mAsset linked to the manager (const)\r\n    address public mAsset;\r\n\r\n    // Struct holding Basket details\r\n    Basket public basket;\r\n    // Mapping holds bAsset token address => array index\r\n    mapping(address => uint8) private bAssetsMap;\r\n    // Holds relative addresses of the integration platforms\r\n    address[] public integrations;\r\n\r\n\r\n    /**\r\n     * @dev Requires the overall basket composition to be healthy\r\n     */\r\n    modifier whenBasketIsHealthy() {\r\n        require(!basket.failed, \"Basket must be alive\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Requires the overall basket composition to be healthy\r\n     */\r\n    modifier whenNotRecolling() {\r\n        require(!basket.undergoingRecol, \"No bAssets can be undergoing recol\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies that the caller either Manager or Gov\r\n     */\r\n    modifier managerOrGovernor() {\r\n        require(\r\n            _manager() == msg.sender || _governor() == msg.sender,\r\n            \"Must be manager or governor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies that the caller is governed mAsset\r\n     */\r\n    modifier onlyMasset() {\r\n        require(mAsset == msg.sender, \"Must be called by mAsset\");\r\n        _;\r\n    }\r\n\r\n    /***************************************\r\n                VAULT BALANCE\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Called by only mAsset, and only when the basket is healthy, to add units to\r\n     *      storage after they have been deposited into the vault\r\n     * @param _bAssetIndex      Index of the bAsset\r\n     * @param _increaseAmount   Units deposited\r\n     */\r\n    function increaseVaultBalance(\r\n        uint8 _bAssetIndex,\r\n        address /* _integrator */,\r\n        uint256 _increaseAmount\r\n    )\r\n        external\r\n        onlyMasset\r\n        whenBasketIsHealthy\r\n        nonReentrant\r\n    {\r\n        basket.bassets[_bAssetIndex].vaultBalance =\r\n            basket.bassets[_bAssetIndex].vaultBalance.add(_increaseAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by only mAsset, and only when the basket is healthy, to add units to\r\n     *      storage after they have been deposited into the vault\r\n     * @param _bAssetIndices    Array of bAsset indexes\r\n     * @param _increaseAmount   Units deposited\r\n     */\r\n    function increaseVaultBalances(\r\n        uint8[] calldata _bAssetIndices,\r\n        address[] calldata /* _integrator */,\r\n        uint256[] calldata _increaseAmount\r\n    )\r\n        external\r\n        onlyMasset\r\n        whenBasketIsHealthy\r\n        nonReentrant\r\n    {\r\n        uint256 len = _bAssetIndices.length;\r\n        for(uint i = 0; i < len; i++) {\r\n            basket.bassets[_bAssetIndices[i]].vaultBalance =\r\n                basket.bassets[_bAssetIndices[i]].vaultBalance.add(_increaseAmount[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Called by mAsset after redeeming tokens. Simply reduce the balance in the vault\r\n     * @param _bAssetIndex      Index of the bAsset\r\n     * @param _decreaseAmount   Units withdrawn\r\n     */\r\n    function decreaseVaultBalance(\r\n        uint8 _bAssetIndex,\r\n        address /* _integrator */,\r\n        uint256 _decreaseAmount\r\n    )\r\n        external\r\n        onlyMasset\r\n        nonReentrant\r\n    {\r\n        basket.bassets[_bAssetIndex].vaultBalance =\r\n            basket.bassets[_bAssetIndex].vaultBalance.sub(_decreaseAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by mAsset after redeeming tokens. Simply reduce the balance in the vault\r\n     * @param _bAssetIndices    Array of bAsset indexes\r\n     * @param _decreaseAmount   Units withdrawn\r\n     */\r\n    function decreaseVaultBalances(\r\n        uint8[] calldata _bAssetIndices,\r\n        address[] calldata /* _integrator */,\r\n        uint256[] calldata _decreaseAmount\r\n    )\r\n        external\r\n        onlyMasset\r\n        nonReentrant\r\n    {\r\n        uint256 len = _bAssetIndices.length;\r\n        for(uint i = 0; i < len; i++) {\r\n            basket.bassets[_bAssetIndices[i]].vaultBalance =\r\n                basket.bassets[_bAssetIndices[i]].vaultBalance.sub(_decreaseAmount[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Called by mAsset to calculate how much interest has been generated in the basket\r\n     *      and withdraw it. Cycles through the connected platforms to check the balances.\r\n     * @return interestCollected   Total amount of interest collected, in mAsset terms\r\n     * @return gains               Array of bAsset units gained\r\n     */\r\n    function collectInterest()\r\n        external\r\n        onlyMasset\r\n        whenNotPaused\r\n        whenBasketIsHealthy\r\n        nonReentrant\r\n        returns (uint256 interestCollected, uint256[] memory gains)\r\n    {\r\n        // Get basket details\r\n        (Basset[] memory allBassets, uint256 count) = _getBassets();\r\n        gains = new uint256[](count);\r\n        interestCollected = 0;\r\n\r\n        // foreach bAsset\r\n        for(uint8 i = 0; i < count; i++) {\r\n            Basset memory b = allBassets[i];\r\n            address bAsset = b.addr;\r\n\r\n            // call each integration to `checkBalance` and sum with the cache balance\r\n            address integration = integrations[i];\r\n            uint256 lending = IPlatformIntegration(integration).checkBalance(bAsset);\r\n            uint256 cache = 0;\r\n            if (!b.isTransferFeeCharged) {\r\n                cache = IERC20(bAsset).balanceOf(integration);\r\n            }\r\n            uint256 balance = lending.add(cache);\r\n\r\n            uint256 oldVaultBalance = b.vaultBalance;\r\n\r\n            // accumulate interest (ratioed bAsset)\r\n            if(balance > oldVaultBalance && b.status == BassetStatus.Normal) {\r\n                // Update balance\r\n                basket.bassets[i].vaultBalance = balance;\r\n\r\n                uint256 interestDelta = balance.sub(oldVaultBalance);\r\n                gains[i] = interestDelta;\r\n\r\n                // Calc MassetQ\r\n                uint256 ratioedDelta = interestDelta.mulRatioTruncate(b.ratio);\r\n                interestCollected = interestCollected.add(ratioedDelta);\r\n            } else {\r\n                gains[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n                BASKET MANAGEMENT\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev External func to allow the Governor to conduct add operations on the Basket\r\n     * @param _bAsset               Address of the ERC20 token to add to the Basket\r\n     * @param _integration          Address of the vault integration to deposit and withdraw\r\n     * @param _isTransferFeeCharged Bool - are transfer fees charged on this bAsset\r\n     * @return index                Position of the bAsset in the Basket\r\n     */\r\n    function addBasset(address _bAsset, address _integration, bool _isTransferFeeCharged)\r\n        external\r\n        onlyGovernor\r\n        whenBasketIsHealthy\r\n        whenNotRecolling\r\n        returns (uint8 index)\r\n    {\r\n        index = _addBasset(\r\n            _bAsset,\r\n            _integration,\r\n            StableMath.getRatioScale(),\r\n            _isTransferFeeCharged\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a bAsset to the Basket, fetching its decimals and calculating the Ratios\r\n     * @param _bAsset               Address of the ERC20 token to add to the Basket\r\n     * @param _integration          Address of the Platform Integration\r\n     * @param _measurementMultiple  Base 1e8 var to determine measurement ratio\r\n     *                              between bAsset:mAsset\r\n     * @param _isTransferFeeCharged Bool - are transfer fees charged on this bAsset\r\n     * @return index                Position of the bAsset in the Basket\r\n     */\r\n    function _addBasset(\r\n        address _bAsset,\r\n        address _integration,\r\n        uint256 _measurementMultiple,\r\n        bool _isTransferFeeCharged\r\n    )\r\n        internal\r\n        returns (uint8 index)\r\n    {\r\n        require(_bAsset != address(0), \"bAsset address must be valid\");\r\n        require(_integration != address(0), \"Integration address must be valid\");\r\n        require(_measurementMultiple >= 1e6 && _measurementMultiple <= 1e10, \"MM out of range\");\r\n\r\n        (bool alreadyInBasket, ) = _isAssetInBasket(_bAsset);\r\n        require(!alreadyInBasket, \"bAsset already exists in Basket\");\r\n\r\n        // Should fail if bAsset is not added to integration\r\n        // Programmatic enforcement of bAsset validity should service through decentralised feed\r\n        IPlatformIntegration(_integration).checkBalance(_bAsset);\r\n\r\n        uint256 bAsset_decimals = CommonHelpers.getDecimals(_bAsset);\r\n        uint256 delta = uint256(18).sub(bAsset_decimals);\r\n\r\n        uint256 ratio = _measurementMultiple.mul(10 ** delta);\r\n\r\n        uint8 numberOfBassetsInBasket = uint8(basket.bassets.length);\r\n        require(numberOfBassetsInBasket < basket.maxBassets, \"Max bAssets in Basket\");\r\n\r\n        bAssetsMap[_bAsset] = numberOfBassetsInBasket;\r\n\r\n        integrations.push(_integration);\r\n        basket.bassets.push(Basset({\r\n            addr: _bAsset,\r\n            ratio: ratio,\r\n            maxWeight: 0,\r\n            vaultBalance: 0,\r\n            status: BassetStatus.Normal,\r\n            isTransferFeeCharged: _isTransferFeeCharged\r\n        }));\r\n\r\n        emit BassetAdded(_bAsset, _integration);\r\n\r\n        index = numberOfBassetsInBasket;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev External call for the governor to set weightings of all bAssets\r\n     * @param _bAssets Array of bAsset addresses\r\n     * @param _weights Array of bAsset weights - summing 100% where 100% == 1e18\r\n     */\r\n    function setBasketWeights(\r\n        address[] calldata _bAssets,\r\n        uint256[] calldata _weights\r\n    )\r\n        external\r\n        onlyGovernor\r\n        whenBasketIsHealthy\r\n    {\r\n        _setBasketWeights(_bAssets, _weights, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets new Basket weightings\r\n     * @dev Requires the modified bAssets to be in a Normal state\r\n     * @param _bAssets Array of bAsset addresses\r\n     * @param _weights Array of bAsset weights - summing 100% where 100% == 1e18\r\n     * @param _isBootstrap True only on the first occurence of weight setting\r\n     */\r\n    function _setBasketWeights(\r\n        address[] memory _bAssets,\r\n        uint256[] memory _weights,\r\n        bool _isBootstrap\r\n    )\r\n        internal\r\n    {\r\n        uint256 bAssetCount = _bAssets.length;\r\n        require(bAssetCount > 0, \"Empty bAssets array passed\");\r\n        require(bAssetCount == _weights.length, \"Must be matching bAsset arrays\");\r\n\r\n        for (uint256 i = 0; i < bAssetCount; i++) {\r\n            (bool exists, uint8 index) = _isAssetInBasket(_bAssets[i]);\r\n            require(exists, \"bAsset must exist\");\r\n\r\n            Basset memory bAsset = _getBasset(index);\r\n\r\n            uint256 bAssetWeight = _weights[i];\r\n\r\n            if(bAsset.status == BassetStatus.Normal) {\r\n                require(\r\n                    bAssetWeight <= 1e18,\r\n                    \"Asset weight must be <= 100%\"\r\n                );\r\n                basket.bassets[index].maxWeight = bAssetWeight;\r\n            } else {\r\n                require(\r\n                    bAssetWeight == basket.bassets[index].maxWeight,\r\n                    \"Affected bAssets must be static\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if(!_isBootstrap){\r\n            _validateBasketWeight();\r\n        }\r\n\r\n        emit BasketWeightsUpdated(_bAssets, _weights);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sum of all bAsset maxWeights is not in range 100-400%\r\n     */\r\n    function _validateBasketWeight() internal view {\r\n        uint256 len = basket.bassets.length;\r\n        uint256 weightSum = 0;\r\n        for(uint256 i = 0; i < len; i++) {\r\n            weightSum = weightSum.add(basket.bassets[i].maxWeight);\r\n        }\r\n        require(weightSum >= 1e18 && weightSum <= 4e18, \"Basket weight must be >= 100 && <= 400%\");\r\n    }\r\n\r\n    /**\r\n     * @dev Update transfer fee flag for a given bAsset, should it change its fee practice\r\n     * @param _bAsset   bAsset address\r\n     * @param _flag         Charge transfer fee when its set to 'true', otherwise 'false'\r\n     */\r\n    function setTransferFeesFlag(address _bAsset, bool _flag)\r\n        external\r\n        managerOrGovernor\r\n    {\r\n        (bool exist, uint8 index) = _isAssetInBasket(_bAsset);\r\n        require(exist, \"bAsset does not exist\");\r\n        basket.bassets[index].isTransferFeeCharged = _flag;\r\n\r\n        if(_flag){\r\n            // if token has tx fees, it can no longer operate with a cache\r\n            uint256 bal = IERC20(_bAsset).balanceOf(integrations[index]);\r\n            if(bal > 0){\r\n                IPlatformIntegration(integrations[index]).deposit(_bAsset, bal, true);\r\n            }\r\n        }\r\n\r\n        emit TransferFeeEnabled(_bAsset, _flag);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Removes a specific Asset from the Basket, given that its target/collateral\r\n     *      level is already 0, throws if invalid.\r\n     * @param _assetToRemove The asset to remove from the basket\r\n     */\r\n    function removeBasset(address _assetToRemove)\r\n        external\r\n        whenBasketIsHealthy\r\n        whenNotRecolling\r\n        managerOrGovernor\r\n    {\r\n        _removeBasset(_assetToRemove);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a specific Asset from the Basket, given that its target/collateral\r\n     *      level is already 0, throws if invalid.\r\n     * @param _assetToRemove The asset to remove from the basket\r\n     */\r\n    function _removeBasset(address _assetToRemove) internal {\r\n        (bool exists, uint8 index) = _isAssetInBasket(_assetToRemove);\r\n        require(exists, \"bAsset does not exist\");\r\n\r\n        uint256 len = basket.bassets.length;\r\n        Basset memory bAsset = basket.bassets[index];\r\n\r\n        require(bAsset.maxWeight == 0, \"bAsset must have a target weight of 0\");\r\n        require(bAsset.vaultBalance == 0, \"bAsset vault must be empty\");\r\n        require(bAsset.status != BassetStatus.Liquidating, \"bAsset must be active\");\r\n\r\n        uint8 lastIndex = uint8(len.sub(1));\r\n        if(index == lastIndex) {\r\n            basket.bassets.pop();\r\n            bAssetsMap[_assetToRemove] = 0;\r\n            integrations.pop();\r\n        } else {\r\n            // Swap the bassets\r\n            basket.bassets[index] = basket.bassets[lastIndex];\r\n            basket.bassets.pop();\r\n            Basset memory swappedBasset = basket.bassets[index];\r\n            // Update bassetsMap\r\n            bAssetsMap[_assetToRemove] = 0;\r\n            bAssetsMap[swappedBasset.addr] = index;\r\n            // Update integrations\r\n            integrations[index] = integrations[lastIndex];\r\n            integrations.pop();\r\n        }\r\n\r\n        emit BassetRemoved(bAsset.addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers all collateral from one lending market to another - used initially\r\n     *      to handle the migration between Aave V1 and Aave V2. Note - only supports non\r\n     *      tx fee enabled assets\r\n     * @param _bAssets Array of basket assets to migrate\r\n     * @param _newIntegration Address of the new platform integration\r\n     */\r\n    function migrateBassets(\r\n        address[] calldata _bAssets,\r\n        address _newIntegration\r\n    )\r\n        external\r\n        onlyGovernor\r\n    {\r\n        uint256 len = _bAssets.length;\r\n        require(len > 0, \"Must migrate some bAssets\");\r\n\r\n        for(uint i = 0; i < len; i++){\r\n            // 1. Check that the bAsset is in the basket\r\n            address bAsset = _bAssets[i];\r\n            (bool inBasket, uint8 index) = _isAssetInBasket(bAsset);\r\n            require(inBasket, \"bAsset does not exist\");\r\n            require(!basket.bassets[index].isTransferFeeCharged, \"Cannot migrate bAssets with xfer fee\");\r\n\r\n            // 2. Withdraw everything from the old platform integration\r\n            IPlatformIntegration oldIntegration = IPlatformIntegration(integrations[index]);\r\n            require(address(oldIntegration) != _newIntegration, \"Must transfer to new integrator\");\r\n            uint256 cache = IERC20(bAsset).balanceOf(address(oldIntegration));\r\n            // 2.1. Withdraw from the lending market\r\n            uint256 lendingBal = oldIntegration.checkBalance(bAsset);\r\n            oldIntegration.withdraw(address(this), bAsset, lendingBal, false);\r\n            // 2.2. Withdraw from the cache, if any\r\n            oldIntegration.withdrawRaw(address(this), bAsset, cache);\r\n            uint256 total = lendingBal.add(cache);\r\n\r\n            // 3. Update the integration address for this bAsset\r\n            integrations[index] = _newIntegration;\r\n\r\n            // 4. Deposit everything into the new\r\n            //    This should fail if we did not receive the full amount from the platform withdrawal\r\n            // 4.1. Deposit all bAsset\r\n            IERC20(bAsset).safeTransfer(_newIntegration, total);\r\n            IPlatformIntegration newIntegration = IPlatformIntegration(_newIntegration);\r\n            newIntegration.deposit(bAsset, lendingBal, false);\r\n            // 4.2. Check balances\r\n            uint256 newLendingBal = newIntegration.checkBalance(bAsset);\r\n            uint256 newCache = IERC20(bAsset).balanceOf(address(newIntegration));\r\n            uint256 upperMargin = 10001e14;\r\n            uint256 lowerMargin =  9999e14;\r\n\r\n            require(\r\n                newLendingBal >= lendingBal.mulTruncate(lowerMargin) &&\r\n                newLendingBal <= lendingBal.mulTruncate(upperMargin),\r\n                \"Must transfer full amount\");\r\n            require(\r\n                newCache >= cache.mulTruncate(lowerMargin) &&\r\n                newCache <= cache.mulTruncate(upperMargin),\r\n                \"Must transfer full amount\");\r\n        }\r\n\r\n        emit BassetsMigrated(_bAssets, _newIntegration);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Get basket details for `MassetStructs.Basket`\r\n     * @return b   Basket struct\r\n     */\r\n    function getBasket()\r\n        external\r\n        view\r\n        returns (Basket memory b)\r\n    {\r\n        b = basket;\r\n    }\r\n\r\n    /**\r\n     * @dev Prepare given bAsset for Forging. Currently returns integrator\r\n     *      and essential minting info.\r\n     * @param _bAsset    Address of the bAsset\r\n     * @return props     Struct of all relevant Forge information\r\n     */\r\n    function prepareForgeBasset(address _bAsset, uint256 /*_amt*/, bool /*_mint*/)\r\n        external\r\n        whenNotPaused\r\n        whenNotRecolling\r\n        returns (bool isValid, BassetDetails memory bInfo)\r\n    {\r\n        (bool exists, uint8 idx) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset does not exist\");\r\n        isValid = true;\r\n        bInfo = BassetDetails({\r\n            bAsset: basket.bassets[idx],\r\n            integrator: integrations[idx],\r\n            index: idx\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Prepare given bAssets for swapping\r\n     * @param _input     Address of the input bAsset\r\n     * @param _output    Address of the output bAsset\r\n     * @param _isMint    Is this swap actually a mint? i.e. output == address(mAsset)\r\n     * @return props     Struct of all relevant Forge information\r\n     */\r\n    function prepareSwapBassets(address _input, address _output, bool _isMint)\r\n        external\r\n        view\r\n        whenNotPaused\r\n        returns (bool, string memory, BassetDetails memory, BassetDetails memory)\r\n    {\r\n        BassetDetails memory input;\r\n        BassetDetails memory output;\r\n        // Check that basket state is healthy\r\n        if(basket.failed || basket.undergoingRecol){\r\n            return (false, \"Basket is undergoing change\", input, output);\r\n        }\r\n\r\n        // Fetch input bAsset\r\n        (bool inputExists, uint8 inputIdx) = _isAssetInBasket(_input);\r\n        if(!inputExists) {\r\n            return (false, \"Input asset does not exist\", input, output);\r\n        }\r\n        input = BassetDetails({\r\n            bAsset: basket.bassets[inputIdx],\r\n            integrator: integrations[inputIdx],\r\n            index: inputIdx\r\n        });\r\n\r\n        // If this is a mint, we don't need output bAsset\r\n        if(_isMint) {\r\n            return (true, \"\", input, output);\r\n        }\r\n\r\n        // Fetch output bAsset\r\n        (bool outputExists, uint8 outputIdx) = _isAssetInBasket(_output);\r\n        if(!outputExists) {\r\n            return (false, \"Output asset does not exist\", input, output);\r\n        }\r\n        output = BassetDetails({\r\n            bAsset: basket.bassets[outputIdx],\r\n            integrator: integrations[outputIdx],\r\n            index: outputIdx\r\n        });\r\n        return (true, \"\", input, output);\r\n    }\r\n\r\n    /**\r\n     * @dev Prepare given bAsset addresses for Forging. Currently returns integrator\r\n     *      and essential minting info for each bAsset\r\n     * @param _bAssets   Array of bAsset addresses with which to forge\r\n     * @return props     Struct of all relevant Forge information\r\n     */\r\n    function prepareForgeBassets(\r\n        address[] calldata _bAssets,\r\n        uint256[] calldata /*_amts*/,\r\n        bool /* _isMint */\r\n    )\r\n        external\r\n        whenNotPaused\r\n        whenNotRecolling\r\n        returns (ForgePropsMulti memory props)\r\n    {\r\n        // Pass the fetching logic to the internal view func to reduce SLOAD cost\r\n        (Basset[] memory bAssets, uint8[] memory indexes, address[] memory integrators) = _fetchForgeBassets(_bAssets);\r\n        props = ForgePropsMulti({\r\n            isValid: true,\r\n            bAssets: bAssets,\r\n            integrators: integrators,\r\n            indexes: indexes\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Fetch the array of bAssets for redemption, and pass back all basket info.\r\n     * @param _bAssets   Array of bAsset addresses to redeem\r\n     */\r\n    function prepareRedeemBassets(\r\n        address[] calldata _bAssets\r\n    )\r\n        external\r\n        view\r\n        whenNotPaused\r\n        whenNotRecolling\r\n        whenBasketIsHealthy\r\n        returns (RedeemProps memory props)\r\n    {\r\n        // Pass the fetching logic to the internal view func to reduce SLOAD cost\r\n        (Basset[] memory bAssets, uint8[] memory indexes, address[] memory integrators) = _fetchForgeBassets(_bAssets);\r\n        props = RedeemProps({\r\n            isValid: true,\r\n            allBassets: basket.bassets,\r\n            bAssets: bAssets,\r\n            integrators: integrators,\r\n            indexes: indexes\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Prepare given bAsset addresses for RedeemMulti. Currently returns integrator\r\n     *      and essential minting info for each bAsset\r\n     * @return props     Struct of all relevant Forge information\r\n     */\r\n    function prepareRedeemMulti()\r\n        external\r\n        view\r\n        whenNotPaused\r\n        whenNotRecolling\r\n        returns (RedeemPropsMulti memory props)\r\n    {\r\n        (Basset[] memory bAssets, uint256 len) = _getBassets();\r\n        address[] memory orderedIntegrators = new address[](len);\r\n        uint8[] memory indexes = new uint8[](len);\r\n        for(uint8 i = 0; i < len; i++){\r\n            orderedIntegrators[i] = integrations[i];\r\n            indexes[i] = i;\r\n        }\r\n        props = RedeemPropsMulti({\r\n            colRatio: basket.collateralisationRatio,\r\n            bAssets: bAssets,\r\n            integrators: orderedIntegrators,\r\n            indexes: indexes\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Internal func to fetch an array of bAssets and their integrators from storage\r\n     * @param _bAssets       Array of non-duplicate bAsset addresses with which to forge\r\n     * @return bAssets       Array of bAsset structs for the given addresses\r\n     * @return indexes       Array of indexes for the given addresses\r\n     * @return integrators   Array of integrators for the given addresses\r\n     */\r\n    function _fetchForgeBassets(address[] memory _bAssets)\r\n        internal\r\n        view\r\n        returns (\r\n            Basset[] memory bAssets,\r\n            uint8[] memory indexes,\r\n            address[] memory integrators\r\n        )\r\n    {\r\n        uint8 len = uint8(_bAssets.length);\r\n\r\n        bAssets = new Basset[](len);\r\n        integrators = new address[](len);\r\n        indexes = new uint8[](len);\r\n\r\n        // Iterate through the input\r\n        for(uint8 i = 0; i < len; i++) {\r\n            address current = _bAssets[i];\r\n\r\n            // If there is a duplicate here, throw\r\n            // Gas costs do not incur SLOAD\r\n            for(uint8 j = i+1; j < len; j++){\r\n                require(current != _bAssets[j], \"Must have no duplicates\");\r\n            }\r\n\r\n            // Fetch and log all the relevant data\r\n            (bool exists, uint8 index) = _isAssetInBasket(current);\r\n            require(exists, \"bAsset must exist\");\r\n            indexes[i] = index;\r\n            bAssets[i] = basket.bassets[index];\r\n            integrators[i] = integrations[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get data for a all bAssets in basket\r\n     * @return bAssets  Struct[] with full bAsset data\r\n     * @return len      Number of bAssets in the Basket\r\n     */\r\n    function getBassets()\r\n        external\r\n        view\r\n        returns (\r\n            Basset[] memory bAssets,\r\n            uint256 len\r\n        )\r\n    {\r\n        return _getBassets();\r\n    }\r\n\r\n    /**\r\n     * @dev Get data for a specific bAsset, if it exists\r\n     * @param _bAsset   Address of bAsset\r\n     * @return bAsset  Struct with full bAsset data\r\n     */\r\n    function getBasset(address _bAsset)\r\n        external\r\n        view\r\n        returns (Basset memory bAsset)\r\n    {\r\n        (bool exists, uint8 index) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset must exist\");\r\n        bAsset = _getBasset(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Get current integrator for a specific bAsset, if it exists\r\n     * @param _bAsset      Address of bAsset\r\n     * @return integrator  Address of current integrator\r\n     */\r\n    function getBassetIntegrator(address _bAsset)\r\n        external\r\n        view\r\n        returns (address integrator)\r\n    {\r\n        (bool exists, uint8 index) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset must exist\");\r\n        integrator = integrations[index];\r\n    }\r\n\r\n    function _getBassets()\r\n        internal\r\n        view\r\n        returns (\r\n            Basset[] memory bAssets,\r\n            uint256 len\r\n        )\r\n    {\r\n        bAssets = basket.bassets;\r\n        len = basket.bassets.length;\r\n    }\r\n\r\n    function _getBasset(uint8 _bAssetIndex)\r\n        internal\r\n        view\r\n        returns (Basset memory bAsset)\r\n    {\r\n        bAsset = basket.bassets[_bAssetIndex];\r\n    }\r\n\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Checks if a particular asset is in the basket\r\n     * @param _asset   Address of bAsset to look for\r\n     * @return exists  bool to signal that the asset is in basket\r\n     * @return index   uint256 Index of the bAsset\r\n     */\r\n    function _isAssetInBasket(address _asset)\r\n        internal\r\n        view\r\n        returns (bool exists, uint8 index)\r\n    {\r\n        index = bAssetsMap[_asset];\r\n        if(index == 0) {\r\n            if(basket.bassets.length == 0) {\r\n                return (false, 0);\r\n            }\r\n            return (basket.bassets[0].addr == _asset, 0);\r\n        }\r\n        return (true, index);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine whether or not a bAsset has already undergone re-collateralisation\r\n     * @param _status   Status of the bAsset\r\n     * @return          Bool to determine if undergone re-collateralisation\r\n     */\r\n    function _bAssetHasRecolled(BassetStatus _status)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if(_status == BassetStatus.Liquidating ||\r\n            _status == BassetStatus.Liquidated ||\r\n            _status == BassetStatus.Failed) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /***************************************\r\n                RE-COLLATERALISATION\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Executes the Auto Redistribution event by isolating the bAsset from the Basket\r\n     * @param _bAsset          Address of the ERC20 token to isolate\r\n     * @param _belowPeg        Bool to describe whether the bAsset deviated below peg (t)\r\n     *                         or above (f)\r\n     * @return alreadyActioned Bool to show whether a bAsset had already been actioned\r\n     */\r\n    function handlePegLoss(address _bAsset, bool _belowPeg)\r\n        external\r\n        managerOrGovernor\r\n        whenBasketIsHealthy\r\n        returns (bool alreadyActioned)\r\n    {\r\n        (bool exists, uint256 i) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset must exist in Basket\");\r\n\r\n        BassetStatus oldStatus = basket.bassets[i].status;\r\n        BassetStatus newStatus =\r\n            _belowPeg ? BassetStatus.BrokenBelowPeg : BassetStatus.BrokenAbovePeg;\r\n\r\n        if(oldStatus == newStatus || _bAssetHasRecolled(oldStatus)) {\r\n            return true;\r\n        }\r\n\r\n        // If we need to update the status.. then do it\r\n        basket.bassets[i].status = newStatus;\r\n        emit BassetStatusChanged(_bAsset, newStatus);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Negates the isolation of a given bAsset\r\n     * @param _bAsset Address of the bAsset\r\n     */\r\n    function negateIsolation(address _bAsset)\r\n        external\r\n        managerOrGovernor\r\n    {\r\n        (bool exists, uint256 i) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset must exist\");\r\n\r\n        BassetStatus currentStatus = basket.bassets[i].status;\r\n        if(currentStatus == BassetStatus.BrokenBelowPeg ||\r\n            currentStatus == BassetStatus.BrokenAbovePeg ||\r\n            currentStatus == BassetStatus.Blacklisted) {\r\n            basket.bassets[i].status = BassetStatus.Normal;\r\n            emit BassetStatusChanged(_bAsset, BassetStatus.Normal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Marks a bAsset as permanently deviated from peg\r\n     * @param _bAsset Address of the bAsset\r\n     */\r\n    function failBasset(address _bAsset)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        (bool exists, uint256 i) = _isAssetInBasket(_bAsset);\r\n        require(exists, \"bAsset must exist\");\r\n\r\n        BassetStatus currentStatus = basket.bassets[i].status;\r\n        require(\r\n            currentStatus == BassetStatus.BrokenBelowPeg ||\r\n            currentStatus == BassetStatus.BrokenAbovePeg,\r\n            \"bAsset must be affected\"\r\n        );\r\n        basket.failed = true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"BasketStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"maxWeights\",\"type\":\"uint256[]\"}],\"name\":\"BasketWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"}],\"name\":\"BassetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"}],\"name\":\"BassetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"BassetStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIntegrator\",\"type\":\"address\"}],\"name\":\"BassetsMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TransferFeeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTransferFeeCharged\",\"type\":\"bool\"}],\"name\":\"addBasset\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basket\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"maxBassets\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"undergoingRecol\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralisationRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"gains\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_bAssetIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseVaultBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_bAssetIndices\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseAmount\",\"type\":\"uint256[]\"}],\"name\":\"decreaseVaultBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"}],\"name\":\"failBasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasket\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"bassets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"maxBassets\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"undergoingRecol\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralisationRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basket\",\"name\":\"b\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"}],\"name\":\"getBasset\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset\",\"name\":\"bAsset\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"}],\"name\":\"getBassetIntegrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBassets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"bAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_belowPeg\",\"type\":\"bool\"}],\"name\":\"handlePegLoss\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"alreadyActioned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_bAssetIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseVaultBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_bAssetIndices\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_increaseAmount\",\"type\":\"uint256[]\"}],\"name\":\"increaseVaultBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"integrations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_newIntegration\",\"type\":\"address\"}],\"name\":\"migrateBassets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"}],\"name\":\"negateIsolation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"prepareForgeBasset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset\",\"name\":\"bAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"internalType\":\"struct MassetStructs.BassetDetails\",\"name\":\"bInfo\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"prepareForgeBassets\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"bAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"integrators\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indexes\",\"type\":\"uint8[]\"}],\"internalType\":\"struct MassetStructs.ForgePropsMulti\",\"name\":\"props\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"}],\"name\":\"prepareRedeemBassets\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"allBassets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"bAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"integrators\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indexes\",\"type\":\"uint8[]\"}],\"internalType\":\"struct MassetStructs.RedeemProps\",\"name\":\"props\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prepareRedeemMulti\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"colRatio\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset[]\",\"name\":\"bAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"integrators\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indexes\",\"type\":\"uint8[]\"}],\"internalType\":\"struct MassetStructs.RedeemPropsMulti\",\"name\":\"props\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMint\",\"type\":\"bool\"}],\"name\":\"prepareSwapBassets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset\",\"name\":\"bAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"internalType\":\"struct MassetStructs.BassetDetails\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum MassetStructs.BassetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeCharged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MassetStructs.Basset\",\"name\":\"bAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"internalType\":\"struct MassetStructs.BassetDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToRemove\",\"type\":\"address\"}],\"name\":\"removeBasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setBasketWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setTransferFeesFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BasketManager","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8ce3e48d4f08ff55a55728f4aafb207213b2ae7de8e7b844d5111f32a64d3be8"}]}