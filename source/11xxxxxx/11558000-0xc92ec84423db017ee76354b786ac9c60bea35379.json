{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.15;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface WETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract SafeCast {\r\n    function safe128(uint256 n)\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        require(n < 2**128, \"safe128\");\r\n        return uint128(n);\r\n    }\r\n\r\n    function safe32(uint256 n)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, \"safe32\");\r\n        return uint32(n);\r\n    }\r\n}\r\n/**\r\n * @title CoverRate\r\n * @author Yam Finance\r\n *\r\n * Interest setter that sets interest based on a polynomial of the usage percentage of the market.\r\n * Interest = C_0 + C_1 * U^(2^0) + C_2 * U^(2^1) + C_3 * U^(2^2) ... C_8 * U^(2^7)\r\n * i.e.: coefs = [0, 20, 10, 60, 0, 10] = 0 + 20 * util^0 + 10 * util^2 +\r\n */\r\ncontract CoverRate is SafeCast {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint128 constant PERCENT = 100;\r\n\r\n    uint128 constant BASE = 10 ** 18;\r\n\r\n    uint128 constant SECONDS_IN_A_YEAR = 60 * 60 * 24 * 365;\r\n\r\n    uint128 constant BYTE = 8;\r\n\r\n    // ============ Storage ============\r\n\r\n    uint64 rate_storage;\r\n\r\n    // ============ Constructor ============\r\n\r\n    function intialize_rate(\r\n        uint64 coefficients\r\n    )\r\n        internal\r\n    {\r\n        // verify that all coefficients add up to 100%\r\n        uint256 sumOfCoefficients = 0;\r\n        for (\r\n            uint256 actual_coefficients = coefficients;\r\n            actual_coefficients != 0;\r\n            actual_coefficients >>= BYTE\r\n        ) {\r\n            sumOfCoefficients += actual_coefficients % 256;\r\n        }\r\n        require(\r\n            sumOfCoefficients == PERCENT,\r\n            \"must sum to 100\"\r\n        );\r\n\r\n        // store the params\r\n        rate_storage = coefficients;\r\n    }\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Get the interest rate given some utilized and total amounts. The interest function is a\r\n     * polynomial function of the utilization (utilized / total) of the market.\r\n     *\r\n     *   - If both are zero, then the utilization is considered to be equal to 0.\r\n     *\r\n     * @return The interest rate per second (times 10 ** 18)\r\n     */\r\n    function getInterestRate(\r\n        uint128 utilized,\r\n        uint128 total\r\n    )\r\n        public\r\n        view\r\n        returns (uint128)\r\n    {\r\n        if (utilized == 0) {\r\n            return 0;\r\n        }\r\n        if (utilized > total) {\r\n            return BASE;\r\n        }\r\n\r\n        // process the first coefficient\r\n        uint256 coefficients = rate_storage;\r\n        uint256 result = uint8(coefficients) * BASE;\r\n        coefficients >>= BYTE;\r\n\r\n        // initialize polynomial as the utilization\r\n        // no safeDiv since total must be non-zero at this point\r\n        uint256 polynomial = uint256(BASE).mul(utilized) / total;\r\n\r\n        // for each non-zero coefficient...\r\n        while (true) {\r\n            // gets the lowest-order byte\r\n            uint256 coefficient = uint256(uint8(coefficients));\r\n\r\n            // if non-zero, add to result\r\n            if (coefficient != 0) {\r\n                // no safeAdd since there are at most 16 coefficients\r\n                // no safeMul since (coefficient < 256 && polynomial <= 10**18)\r\n                result += coefficient * polynomial;\r\n\r\n                // break if this is the last non-zero coefficient\r\n                if (coefficient == coefficients) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // double the order of the polynomial term\r\n            // no safeMul since polynomial <= 10^18\r\n            // no safeDiv since the divisor is a non-zero constant\r\n            polynomial = polynomial * polynomial / BASE;\r\n\r\n            // move to next coefficient\r\n            coefficients >>= BYTE;\r\n        }\r\n\r\n        // normalize the result\r\n        // no safeDiv since the divisor is a non-zero constant\r\n        return uint128(result / (SECONDS_IN_A_YEAR * PERCENT));\r\n    }\r\n\r\n    /**\r\n     * Get all of the coefficients of the interest calculation, starting from the coefficient for\r\n     * the first-order utilization variable.\r\n     *\r\n     * @return The coefficients\r\n     */\r\n    function getCoefficients()\r\n        public\r\n        view\r\n        returns (uint128[] memory)\r\n    {\r\n        // allocate new array with maximum of 16 coefficients\r\n        uint128[] memory result = new uint128[](8);\r\n\r\n        // add the coefficients to the array\r\n        uint128 numCoefficients = 0;\r\n        for (\r\n            uint128 coefficients = rate_storage;\r\n            coefficients != 0;\r\n            coefficients >>= BYTE\r\n        ) {\r\n            result[numCoefficients] = coefficients % 256;\r\n            numCoefficients++;\r\n        }\r\n\r\n        // modify result.length to match numCoefficients\r\n        assembly {\r\n            mstore(result, numCoefficients)\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\ncontract CoverPricing is CoverRate {\r\n\r\n    // ============ Functions ============\r\n\r\n    /// @notice Price a given\r\n    function price(uint128 coverageAmount, uint128 duration, uint128 utilized, uint128 reserves)\r\n        public\r\n        view\r\n        returns (uint128)\r\n    {\r\n        return _price(coverageAmount, duration, utilized, reserves);\r\n    }\r\n\r\n\r\n    function _price(uint128 coverageAmount, uint128 duration, uint128 utilized, uint128 reserves)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        require(duration <= 86400*14, \"duration > max duration\");\r\n        uint128 new_util = safe128(uint256(utilized).add(coverageAmount));\r\n        uint128 rate = getInterestRate(new_util, reserves);\r\n\r\n        // price = amount * rate_per_second * duration / 10**18\r\n        uint128 coverage_price = uint128(uint256(coverageAmount).mul(rate).mul(duration).div(BASE));\r\n\r\n        return coverage_price;\r\n    }\r\n}\r\n\r\ncontract UmbrellaMetaPool is CoverPricing {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev Emitted when creating a new protection\r\n    event NewProtection(string indexed concept, uint128 amount, uint32 duration, uint128 coverage_price);\r\n    /// @dev Emitted when adding to reserves\r\n    event ProvideCoverage(address indexed provider, uint128 amount);\r\n    /// @dev Emitted when Arbiter is paid\r\n    event ArbiterPaid(uint256 amount);\r\n    /// @dev Emitted when Creator is paid\r\n    event CreatorPaid(uint256 amount);\r\n    /// @dev Emitted when withdrawing provided payTokens\r\n    event Withdraw(address indexed provider, uint256 amount);\r\n    /// @dev Emitted after claiming a protection payout\r\n    event Claim(address indexed holder, uint256 indexed pid, uint256 payout);\r\n    /// @dev Emitted after claiming premiums\r\n    event ClaimPremiums(address indexed claimer, uint256 premiums_claimed);\r\n    /// @dev Emitted after a protection's premiums are swept to premium pool\r\n    event Swept(uint256 indexed pid, uint128 premiums_paid);\r\n    /// @dev Emitted when transfering a protection\r\n    /* event Transfer(address indexed from, address indexed to, uint256 indexed pid); */\r\n    // ============ Modifiers ============\r\n\r\n    modifier hasArbiter() {\r\n        require(arbSet, \"!arbSet\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyArbiter() {\r\n        require(msg.sender == arbiter, \"!arbiter\");\r\n        _;\r\n    }\r\n\r\n    function updateGlobalTPS() internal {\r\n      uint256 timestamp = block.timestamp;\r\n\r\n      // increase total protection seconds\r\n      uint256 newGlobalTokenSecondsProvided = (timestamp - lastUpdatedTPS).mul(reserves);\r\n      totalProtectionSeconds = totalProtectionSeconds.add(newGlobalTokenSecondsProvided);\r\n      lastUpdatedTPS = safe32(timestamp);\r\n    }\r\n\r\n    function updateTokenSecondsProvided(address account) internal {\r\n      uint256 timestamp = block.timestamp;\r\n      uint256 newTokenSecondsProvided = (timestamp - providers[account].lastUpdate).mul(providers[account].shares);\r\n\r\n      // update user protection seconds, and last updated\r\n      providers[account].totalTokenSecondsProvided = providers[account].totalTokenSecondsProvided.add(newTokenSecondsProvided);\r\n      providers[account].lastUpdate = safe32(timestamp);\r\n\r\n      // increase total protection seconds\r\n      uint256 newGlobalTokenSecondsProvided = (timestamp - lastUpdatedTPS).mul(reserves);\r\n      totalProtectionSeconds = totalProtectionSeconds.add(newGlobalTokenSecondsProvided);\r\n      lastUpdatedTPS = safe32(timestamp);\r\n    }\r\n\r\n\r\n    // ============ Constants ============\r\n\r\n    // TODO: Move to factory\r\n    /* /// @notice Max arbiter fee, 10%.\r\n    uint128 public constant MAX_ARB_FEE = 10**17;\r\n    /// @notice Max creator fee, 5%.\r\n    uint128 public constant MAX_CREATE_FEE = 5*10**16; */\r\n    /// @notice ALPHA USE ONLY, PLACES CAP ON TVL\r\n    uint128 public constant MAX_RESERVES = 1000 * 10**18;\r\n    // :TODO\r\n\r\n    /// @notice How long liquidity is locked up (7 days)\r\n    uint128 public constant LOCKUP_PERIOD = 60 * 60 * 24 * 7;\r\n    /// @notice How long a withdrawl request is valid for (2 weeks)\r\n    uint128 public constant WITHDRAW_GRACE_PERIOD = 60 * 60 * 24 * 14;\r\n\r\n    /// @notice WETH address\r\n    WETH9 public constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    // ============ Storage ============\r\n    /// @notice Whether the pool has been initialized\r\n    bool private initialized;\r\n    /// @notice Whether the pool has an arbiter\r\n    bool public arbSet;\r\n    bool private accepted;\r\n\r\n    // === Pool storage ===\r\n    /// @notice List of protected concepts, i.e. [\"Dydx\", \"Compound\", \"Aave\"]\r\n    string[] public coveredConcepts;\r\n    /// @notice Description of the pool; i.e. yEarn yVaults\r\n    string public description;\r\n    /// @notice Token used for protection payment and payout\r\n    address public payToken;\r\n    /// @notice utilized payToken\r\n    uint128 public utilized;\r\n    /// @notice total payToken\r\n    uint128 public reserves;\r\n    ///@notice Total shares of reserves\r\n    uint128 public totalShares;\r\n    /// @notice Minimum number of payTokens to open a position\r\n    uint128 public minPay;\r\n    /// @notice Last global update to protection seconds\r\n    uint32 public lastUpdatedTPS;\r\n    /// @notice Total global protection seconds\r\n    uint256 public totalProtectionSeconds;\r\n    ///@notice Total premiums accumulated\r\n    uint256 public premiumsAccum;\r\n\r\n    // === Creator storage ===\r\n    /// @notice Creator fee\r\n    uint128 public creatorFee;\r\n    /// @notice Accumulated Creator Fee\r\n    uint128 public creatorFees;\r\n    /// @notice Address that is the creator of the pool\r\n    address public creator;\r\n\r\n    // === Arbiter storage ===\r\n    /// @notice Arbiter Fee\r\n    uint128 public arbiterFee;\r\n    /// @notice Accumulated Arbiter Fee\r\n    uint128 public arbiterFees;\r\n    /// @notice Address that is the arbiter over the pool\r\n    address public arbiter;\r\n\r\n    // === Rollover storage ===\r\n    /// @notice % of premiums rolled into provided coverage\r\n    uint128 public rollover;\r\n\r\n    // === Concept status storage ===\r\n    /// @notice Array of protections\r\n    Protection[] public protections;\r\n\r\n    /// @notice Claim times for concepts\r\n    uint32[][] public claimTimes;\r\n\r\n    // === Token storage ===\r\n\r\n    ///@notice Provider mapping\r\n    mapping ( address => ProtectionProvider ) public providers;\r\n\r\n    ///@notice Provider mapping\r\n    mapping ( address => uint256[] ) public protectionsForAddress;\r\n\r\n    // ============ Structs & Enums ============\r\n    enum Status { Active, Swept, Claimed }\r\n\r\n    struct ProtectionProvider {\r\n      uint256 totalTokenSecondsProvided;\r\n      uint256 premiumIndex;\r\n      uint128 shares;\r\n      uint32 lastUpdate;\r\n      uint32 lastProvide;\r\n      uint32 withdrawInitiated;\r\n    }\r\n\r\n    struct Protection {\r\n        // slot 1\r\n        uint128 coverageAmount;\r\n        uint128 paid;\r\n        // slot 2\r\n        address holder;\r\n        uint32 start;\r\n        uint32 expiry;\r\n        uint8 conceptIndex;\r\n        Status status;\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    function initialize(\r\n        address payToken_,\r\n        uint64 coefficients,\r\n        uint128 creatorFee_,\r\n        uint128 arbiterFee_,\r\n        uint128 rollover_,\r\n        uint128 minPay_,\r\n        string[] memory coveredConcepts_,\r\n        string memory description_,\r\n        address creator_,\r\n        address arbiter_\r\n    )\r\n        public\r\n    {\r\n        require(!initialized, \"initialized\");\r\n        initialized = true;\r\n        require(coveredConcepts_.length < 16, \"too many concepts\");\r\n\r\n        // TODO: Move to factory\r\n        /* require(arbiterFee_ <= MAX_ARB_FEE, \"!arb fee\");\r\n        require(creatorFee_ <= MAX_CREATE_FEE, \"!create fee\"); */\r\n        // :TODO\r\n\r\n        intialize_rate(coefficients);\r\n\r\n        payToken         = payToken_;\r\n        arbiterFee       = arbiterFee_;\r\n        creatorFee       = creatorFee_;\r\n        rollover         = rollover_;\r\n        coveredConcepts  = coveredConcepts_;\r\n        description      = description_;\r\n        creator          = creator_;\r\n        arbiter          = arbiter_;\r\n        minPay           = minPay_;\r\n        claimTimes       = new uint32[][](coveredConcepts_.length);\r\n\r\n        if (creator_ == arbiter_) {\r\n            // auto accept if creator is arbiter\r\n            arbSet = true;\r\n            accepted = true;\r\n        }\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getConcepts()\r\n        public\r\n        view\r\n        returns (string[] memory)\r\n    {\r\n        string[] memory concepts = coveredConcepts;\r\n        return concepts;\r\n    }\r\n\r\n    function getPids(address who)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory pids = protectionsForAddress[who];\r\n        return pids;\r\n    }\r\n\r\n    function getProtectionInfo(uint256 pid)\r\n        public\r\n        view\r\n        returns (Protection memory)\r\n    {\r\n        return protections[pid];\r\n    }\r\n\r\n    /// @notice Current coverage provider total protection seconds\r\n    function currentProviderTPS(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 timestamp = block.timestamp;\r\n        uint256 newTokenSecondsProvided = (timestamp - providers[who].lastUpdate).mul(providers[who].shares);\r\n        return providers[who].totalTokenSecondsProvided.add(newTokenSecondsProvided);\r\n    }\r\n\r\n    /// @notice Current coverage provider total protection seconds\r\n    function currentTotalTPS()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 timestamp = block.timestamp;\r\n        uint256 newGlobalTokenSecondsProvided = (timestamp - lastUpdatedTPS).mul(reserves);\r\n        return totalProtectionSeconds.add(newGlobalTokenSecondsProvided);\r\n    }\r\n\r\n    /// @notice Current coverage provider total protection seconds\r\n    function currentPrice(uint128 coverageAmount, uint128 duration)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _price(coverageAmount, duration, utilized, reserves);\r\n    }\r\n\r\n\r\n    // ============ Modifying Protection Buyer Functions ============\r\n\r\n    /// @notice Purchase protection\r\n    /// @dev accepts ETH payment if payToken is WETH\r\n    function buyProtection(\r\n        uint8 conceptIndex,\r\n        uint128 coverageAmount,\r\n        uint128 duration,\r\n        uint128 maxPay,\r\n        uint256 deadline\r\n    )\r\n        public\r\n        payable\r\n        hasArbiter\r\n    {\r\n        // check deadline\r\n        require(block.timestamp <= deadline,               \"buy:!deadline\");\r\n        require(   conceptIndex <  coveredConcepts.length, \"buy:!conceptIndex\");\r\n\r\n        // price coverage\r\n        uint128 coverage_price = _price(coverageAmount, duration, utilized, reserves);\r\n\r\n        // check payment\r\n        require(uint256(utilized).add(coverageAmount) <= reserves, \"buy: overutilized\");\r\n        require(coverage_price >= minPay && coverage_price <= maxPay, \"buy:!pay\");\r\n\r\n        // push protection onto array\r\n        // protection buying stops in year 2106 due to safe cast\r\n        protections.push(\r\n          Protection({\r\n              coverageAmount: coverageAmount,\r\n              paid: coverage_price,\r\n              holder: msg.sender,\r\n              start: safe32(block.timestamp),\r\n              expiry: safe32(block.timestamp + duration),\r\n              conceptIndex: conceptIndex,\r\n              status: Status.Active\r\n          })\r\n        );\r\n\r\n        protectionsForAddress[msg.sender].push(protections.length - 1);\r\n\r\n        // increase utilized\r\n        utilized = safe128(uint256(utilized).add(coverageAmount));\r\n\r\n        if (payToken == address(WETH) && msg.value > 0) {\r\n            // wrap eth => WETH if necessary\r\n            uint256 remainder = msg.value.sub(coverage_price, \"buy:underpayment\");\r\n            WETH.deposit.value(coverage_price)();\r\n\r\n            // send back excess, 2300 gas\r\n            if (remainder > 0) {\r\n                msg.sender.transfer(remainder);\r\n            }\r\n        } else {\r\n            require(msg.value == 0, \"buy:payToken !WETH\");\r\n            IERC20(payToken).safeTransferFrom(msg.sender, address(this), coverage_price);\r\n        }\r\n\r\n        // events\r\n        emit NewProtection(coveredConcepts[conceptIndex], coverageAmount, safe32(duration), coverage_price);\r\n    }\r\n\r\n    function isSettlable(uint256 pid)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        Protection memory protection = protections[pid];\r\n        if (protection.status != Status.Active) {\r\n            return false;\r\n        }\r\n        return _hasSettlement(protection.conceptIndex, protection.start, protection.expiry);\r\n    }\r\n\r\n    function _hasSettlement(uint32 index, uint32 start, uint32 expiry)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint32[] memory claimTimesForIndex = claimTimes[index];\r\n        // early return if no claimtimes\r\n        if (claimTimesForIndex.length == 0) {\r\n            return false;\r\n        }\r\n        // early return if start > all claimtimes\r\n        if (start > claimTimesForIndex[claimTimesForIndex.length - 1]) {\r\n            return false;\r\n        }\r\n        // early return if expiry before first claimtime\r\n        if (expiry < claimTimesForIndex[0]) {\r\n            return false;\r\n        }\r\n        for (uint32 i = 0; i < claimTimesForIndex.length; i++) {\r\n            // continue until start < claimtime\r\n            if (start > claimTimesForIndex[i]) {\r\n                continue;\r\n            }\r\n\r\n            // check if expiry > claimtime\r\n            if (expiry >= claimTimesForIndex[i]) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function claim(uint256 pid)\r\n        public\r\n    {\r\n        updateGlobalTPS();\r\n        Protection storage protection = protections[pid];\r\n        require(\r\n            protection.holder == msg.sender,\r\n            \"claim:!owner\"\r\n        );\r\n\r\n        // ensure: settling, active, and !expiry\r\n        require(protection.status == Status.Active, \"claim:!active\");\r\n        require(_hasSettlement(protection.conceptIndex, protection.start, protection.expiry), \"claim:!settlement\");\r\n\r\n        protection.status = Status.Claimed;\r\n\r\n        // decrease utilized and reserves\r\n        utilized = uint128(uint256(utilized).sub(protection.coverageAmount));\r\n        reserves = uint128(uint256(reserves).sub(protection.coverageAmount));\r\n\r\n        // transfer coverage + payment back to coverage holder\r\n        uint256 payout = uint256(protection.coverageAmount).add(protection.paid);\r\n        IERC20(payToken).safeTransfer(protection.holder, payout);\r\n        emit Claim(protection.holder, pid, payout);\r\n    }\r\n\r\n    /// @notice Nonstandard transfer method because erc721 is a dumb standard\r\n    /* function transfer(address who, uint256 pid)\r\n        public\r\n    {\r\n        Protection storage protection = protections[pid];\r\n        require(protection.holder == msg.sender,      \"transfer: !protection owner\");\r\n        require(protection.expiry >= block.timestamp, \"transfer: expired\");\r\n        require(protection.status == Status.Active,   \"transfer: !active\");\r\n        require(              who != address(0),      \"transfer: cannot burn protection\");\r\n        protection.holder = who;\r\n        emit Transfer(msg.sender, who, pid);\r\n    } */\r\n\r\n    // ============ Provider Functions ===========\r\n\r\n    /// @notice Balance of provider in terms of shares\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return providers[who].shares;\r\n    }\r\n\r\n    /// @notice Balance of a provider in terms of payToken\r\n    function balanceOfUnderlying(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 shares = providers[who].shares;\r\n        return shares.mul(reserves).div(totalShares);\r\n    }\r\n\r\n    ///@notice Provide coverage - liquidity is locked for at minimum 1 week\r\n    function provideCoverage(\r\n        uint128 amount\r\n    )\r\n        public\r\n        hasArbiter\r\n    {\r\n        updateTokenSecondsProvided(msg.sender);\r\n        require(amount > 0, \"provide:amount 0\");\r\n        _claimPremiums();\r\n        enter(amount);\r\n        // TODO delete before mainnet\r\n        require(reserves <= MAX_RESERVES, \"provide:max reserves\");\r\n        IERC20(payToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        emit ProvideCoverage(msg.sender, amount);\r\n    }\r\n\r\n    ///@notice initiates a withdraw request\r\n    function initiateWithdraw()\r\n        public\r\n    {\r\n        // update withdraw time iff end of grace period or have a superseding lock that ends after grace period\r\n        if (\r\n          block.timestamp > providers[msg.sender].withdrawInitiated + WITHDRAW_GRACE_PERIOD\r\n          || providers[msg.sender].lastProvide + LOCKUP_PERIOD > providers[msg.sender].withdrawInitiated + WITHDRAW_GRACE_PERIOD\r\n        ) {\r\n            providers[msg.sender].withdrawInitiated = safe32(block.timestamp);\r\n        }\r\n    }\r\n\r\n    ///@notice Withdraw a specified number of payTokens\r\n    function withdrawUnderlying(uint128 amount)\r\n        public\r\n    {\r\n        updateTokenSecondsProvided(msg.sender);\r\n        uint128 asShares = uint128(uint256(amount).mul(totalShares).div(reserves));\r\n        _withdraw(asShares);\r\n    }\r\n\r\n    ///@notice Withdraw a specified number of shares\r\n    function withdraw(uint128 amount)\r\n        public\r\n    {\r\n        updateTokenSecondsProvided(msg.sender);\r\n        _withdraw(amount);\r\n    }\r\n\r\n    function _withdraw(uint128 asShares)\r\n        internal\r\n    {\r\n        require(        providers[msg.sender].withdrawInitiated + LOCKUP_PERIOD <  block.timestamp, \"withdraw:locked\");\r\n        require(              providers[msg.sender].lastProvide + LOCKUP_PERIOD <  block.timestamp, \"withdraw:locked2\");\r\n        require(providers[msg.sender].withdrawInitiated + WITHDRAW_GRACE_PERIOD >= block.timestamp, \"withdraw:expired\");\r\n\r\n        // get premiums\r\n        _claimPremiums();\r\n\r\n        // update reserves & balance\r\n        uint128 underlying = exit(asShares);\r\n        require(reserves >= utilized, \"withdraw:!liquidity\");\r\n        if (providers[msg.sender].shares == 0) {\r\n            providers[msg.sender].totalTokenSecondsProvided = 0;\r\n        }\r\n        // payout\r\n        IERC20(payToken).safeTransfer(msg.sender, underlying);\r\n        emit Withdraw(msg.sender, underlying);\r\n    }\r\n\r\n    ///@notice Given an amount of payTokens, update balance, shares, and reserves\r\n    function enter(uint128 underlying)\r\n        internal\r\n    {\r\n        providers[msg.sender].lastProvide = safe32(block.timestamp);\r\n        uint128 res = reserves;\r\n        uint128 ts = totalShares;\r\n        if (ts == 0 || res == 0) {\r\n            providers[msg.sender].shares = safe128(uint256(providers[msg.sender].shares).add(underlying));\r\n            totalShares = safe128(uint256(totalShares).add(underlying));\r\n        }  else {\r\n            uint128 asShares = safe128(uint256(underlying).mul(ts).div(res));\r\n            providers[msg.sender].shares = safe128(uint256(providers[msg.sender].shares).add(asShares));\r\n            totalShares = safe128(uint256(ts).add(asShares));\r\n        }\r\n        reserves = safe128(uint256(res).add(underlying));\r\n    }\r\n\r\n    ///@notice Given an amount of shares, update balance, shares, and reserves\r\n    function exit(uint128 asShares)\r\n        internal\r\n        returns (uint128)\r\n    {\r\n        uint128 res = reserves;\r\n        uint128 ts = totalShares;\r\n        providers[msg.sender].shares = uint128(uint256(providers[msg.sender].shares).sub(asShares));\r\n        totalShares = uint128(uint256(ts).sub(asShares));\r\n        uint128 underlying = uint128(uint256(asShares).mul(res).div(ts));\r\n        reserves = uint128(uint256(res).sub(underlying));\r\n        return underlying;\r\n    }\r\n\r\n    /// @notice Claim premiums\r\n    function claimPremiums()\r\n        public\r\n    {\r\n        updateTokenSecondsProvided(msg.sender);\r\n        _claimPremiums();\r\n    }\r\n\r\n    function _claimPremiums()\r\n        internal\r\n    {\r\n        uint256 ttsp = providers[msg.sender].totalTokenSecondsProvided;\r\n        if (ttsp > 0) {\r\n            uint256 claimable = _claimablePremiums(providers[msg.sender].premiumIndex, ttsp, totalProtectionSeconds);\r\n\r\n            if (claimable == 0) {\r\n                return;\r\n            }\r\n\r\n            providers[msg.sender].premiumIndex = premiumsAccum;\r\n\r\n            // payout\r\n            IERC20(payToken).safeTransfer(msg.sender, claimable);\r\n            emit ClaimPremiums(msg.sender, claimable);\r\n        } else {\r\n            providers[msg.sender].premiumIndex = premiumsAccum;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculate claimable premiums for a provider\r\n    function claimablePremiums(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 timestamp = block.timestamp;\r\n        uint256 newTokenSecondsProvided = (timestamp - providers[who].lastUpdate).mul(providers[who].shares);\r\n        uint256 whoTPS = providers[who].totalTokenSecondsProvided.add(newTokenSecondsProvided);\r\n        uint256 newTTPS = (timestamp - lastUpdatedTPS).mul(reserves);\r\n        uint256 globalTPS = totalProtectionSeconds.add(newTTPS);\r\n        return _claimablePremiums(providers[who].premiumIndex, whoTPS, globalTPS);\r\n    }\r\n\r\n    function _claimablePremiums(uint256 index, uint256 providerTPS, uint256 globalTPS)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return premiumsAccum\r\n                  .sub(index)\r\n                  .mul(providerTPS)\r\n                  .div(totalProtectionSeconds);\r\n    }\r\n\r\n    /// @notice Sweep multiple sets of premiums into reserves\r\n    function sweepPremiums(uint256[] memory pids)\r\n        public\r\n    {\r\n        updateGlobalTPS();\r\n        uint pidsLength = pids.length;\r\n        uint128 totalSweptCoverage;\r\n        uint128 totalPaid;\r\n        for (uint256 i = 0; i < pidsLength; i++) {\r\n            (uint128 coverageAmount, uint128 paid) = _sweep(pids[i]);\r\n            totalSweptCoverage = safe128(uint256(totalSweptCoverage).add(coverageAmount));\r\n            totalPaid          = safe128(uint256(totalPaid).add(paid));\r\n        }\r\n        _update(totalSweptCoverage, totalPaid);\r\n    }\r\n\r\n    /// @notice Sweep premium of a protection into reserves\r\n    function sweep(uint256 pid)\r\n        public\r\n    {\r\n        updateGlobalTPS();\r\n        (uint128 coverageAmount, uint128 paid) = _sweep(pid);\r\n        _update(coverageAmount, paid);\r\n    }\r\n\r\n    /// @dev sweeps a protection plan over to swept status\r\n    function _sweep(uint256 pid)\r\n        internal\r\n        returns (uint128, uint128)\r\n    {\r\n        Protection storage protection = protections[pid];\r\n\r\n        // we keep a protection unswept until 7 days after expiry to allow arbiter to act\r\n        require(                       protection.status == Status.Active,                \"Sweep:!active\");\r\n        require(                   protection.expiry + 86400*7 <  block.timestamp,        \"Sweep:!expired\");\r\n        require(!_hasSettlement(protection.conceptIndex, protection.start, protection.expiry), \"Sweep:!settlment\");\r\n\r\n        // set status to swept\r\n        protection.status = Status.Swept;\r\n        emit Swept(pid, protection.paid);\r\n        return (protection.coverageAmount, protection.paid);\r\n    }\r\n\r\n    /// @dev updates various vars relating to premiums and fees\r\n    function _update(uint128 coverageRemoved, uint128 premiumsPaid)\r\n        internal\r\n    {\r\n        utilized = uint128(uint256(utilized).sub(coverageRemoved));\r\n        uint256 arbFees;\r\n        uint256 createFees;\r\n        uint256 rollovers;\r\n        if (arbiterFee > 0) {\r\n            arbFees = uint256(premiumsPaid).mul(arbiterFee).div(BASE);\r\n            arbiterFees = safe128(uint256(arbiterFees).add(arbFees)); // pay arbiter\r\n        }\r\n        if (creatorFee > 0) {\r\n            createFees = uint256(premiumsPaid).mul(creatorFee).div(BASE);\r\n            creatorFees = safe128(uint256(creatorFees).add(createFees)); // pay creator\r\n        }\r\n        if (rollover > 0) {\r\n            rollovers = uint256(premiumsPaid).mul(rollover).div(BASE);\r\n            reserves = safe128(uint256(reserves).add(rollovers)); // rollover some % of premiums into reserves\r\n        }\r\n\r\n        // push remaining premiums to premium pool\r\n        premiumsAccum = premiumsAccum.add(premiumsPaid - arbFees - createFees - rollovers);\r\n    }\r\n\r\n    // ============ Arbiter Functions ============\r\n\r\n    ///@notice Sets a concept as settling (allowing claims)\r\n    function _setSettling(uint8 conceptIndex, uint32 settleTime, bool needs_sort)\r\n        public\r\n        onlyArbiter\r\n    {\r\n        require(conceptIndex < coveredConcepts.length, \"setSettling:!index\");\r\n        require(  settleTime < block.timestamp,        \"setSettling:!settleTime\");\r\n        if (!needs_sort && claimTimes[conceptIndex].length > 0) {\r\n            // allow out of order if we sort, otherwise revert\r\n            uint32 last = claimTimes[conceptIndex][claimTimes[conceptIndex].length - 1];\r\n            require(settleTime > last, \"setSettling:!settleTime\");\r\n        }\r\n        // add a claim time\r\n        claimTimes[conceptIndex].push(settleTime);\r\n        if (needs_sort) {\r\n            uint256 lastIndex = claimTimes[conceptIndex].length - 1;\r\n            quickSort(claimTimes[conceptIndex], int(0), int(lastIndex));\r\n        }\r\n    }\r\n\r\n    ///@notice Arbiter accept arbiter role\r\n    function _acceptArbiter()\r\n        public\r\n        onlyArbiter\r\n    {\r\n        require(!accepted, \"acceptArb:accepted\");\r\n        arbSet = true;\r\n        accepted = true;\r\n    }\r\n\r\n    ///@notice Arbiter get fees\r\n    function _getArbiterFees()\r\n        public\r\n        onlyArbiter\r\n    {\r\n        uint128 a_fees = arbiterFees;\r\n        arbiterFees = 0;\r\n        IERC20(payToken).safeTransfer(arbiter, a_fees);\r\n        emit ArbiterPaid(a_fees);\r\n    }\r\n\r\n    ///@notice Abdicates arbiter role, effectively shutting down the pool\r\n    function _abdicate()\r\n        public\r\n        onlyArbiter\r\n    {\r\n        arbSet = false;\r\n    }\r\n\r\n    // ============ Creator Functions ============\r\n    function _getCreatorFees()\r\n        public\r\n    {\r\n        require(msg.sender == creator, \"!creator\");\r\n        uint128 c_fees = creatorFees;\r\n        creatorFees = 0;\r\n        IERC20(payToken).safeTransfer(creator, c_fees);\r\n        emit CreatorPaid(c_fees);\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n\r\n    function quickSort(uint32[] storage arr, int left, int right) internal {\r\n        int i = left;\r\n        int j = right;\r\n        if (i == j) return;\r\n        uint32 pivot = arr[uint32(left + (right - left) / 2)];\r\n        while (i <= j) {\r\n            while (arr[uint32(i)] < pivot) i++;\r\n            while (pivot < arr[uint32(j)]) j--;\r\n            if (i <= j) {\r\n                (arr[uint32(i)], arr[uint32(j)]) = (arr[uint32(j)], arr[uint32(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j)\r\n            quickSort(arr, left, j);\r\n        if (i < right)\r\n            quickSort(arr, i, right);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArbiterPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiums_claimed\",\"type\":\"uint256\"}],\"name\":\"ClaimPremiums\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatorPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"concept\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"coverage_price\",\"type\":\"uint128\"}],\"name\":\"NewProtection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ProvideCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"premiums_paid\",\"type\":\"uint128\"}],\"name\":\"Swept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKUP_PERIOD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RESERVES\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAW_GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_abdicate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptArbiter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_getArbiterFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_getCreatorFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"conceptIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"settleTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"needs_sort\",\"type\":\"bool\"}],\"name\":\"_setSettling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiterFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiterFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"conceptIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"coverageAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"duration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPay\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyProtection\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPremiums\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimTimes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"claimablePremiums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coveredConcepts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"coverageAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"duration\",\"type\":\"uint128\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"currentProviderTPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalTPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoefficients\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConcepts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"utilized\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getProtectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"coverageAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"conceptIndex\",\"type\":\"uint8\"},{\"internalType\":\"enum UmbrellaMetaPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct UmbrellaMetaPool.Protection\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"payToken_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"coefficients\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"creatorFee_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"arbiterFee_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rollover_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPay_\",\"type\":\"uint128\"},{\"internalType\":\"string[]\",\"name\":\"coveredConcepts_\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"isSettlable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdatedTPS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPay\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premiumsAccum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"coverageAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"duration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"utilized\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserves\",\"type\":\"uint128\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protections\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"coverageAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"conceptIndex\",\"type\":\"uint8\"},{\"internalType\":\"enum UmbrellaMetaPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protectionsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"provideCoverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSecondsProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastProvide\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawInitiated\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"sweepPremiums\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProtectionSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"utilized\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UmbrellaMetaPool","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2dc4b13523562e949126bcf61678d826f06582a2b1b9cf622f37ce22e1b56e11"}]}