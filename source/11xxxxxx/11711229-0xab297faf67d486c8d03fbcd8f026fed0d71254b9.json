{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice This contract adds liquidity to Harvest vaults with ETH or ERC tokens\r\n// SPDX-License-Identifier: GPLv2\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// -- Curve --\r\ninterface ICurveRegistry {\r\n    function metaPools(address tokenAddress)\r\n        external\r\n        view\r\n        returns (address swapAddress);\r\n}\r\n\r\ninterface ICurveZapIn {\r\n    function ZapIn(\r\n        address _fromTokenAddress,\r\n        address _toTokenAddress,\r\n        address _swapAddress,\r\n        uint256 _incomingTokenQty,\r\n        uint256 _minPoolTokens,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes calldata _swapCallData\r\n    ) external payable returns (uint256 crvTokensBought);\r\n}\r\n\r\n// -- Uniswap --\r\ninterface IUniZapInV3 {\r\n    function ZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable returns (uint256);\r\n}\r\n\r\n// -- Harvest --\r\ninterface IVault {\r\n    function underlying() external view returns (address);\r\n\r\n    function depositFor(uint256 amount, address holder) external;\r\n}\r\n\r\ncontract Harvest_ZapIn_V1 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public stopped = false;\r\n    uint256 public goodwill;\r\n\r\n    ICurveRegistry public curveReg;\r\n    ICurveZapIn public curveZap;\r\n    IUniZapInV3 public uniZap;\r\n    IUniZapInV3 public sushiZap;\r\n\r\n    constructor(\r\n        ICurveRegistry _curveReg,\r\n        ICurveZapIn _curveZap,\r\n        IUniZapInV3 _uniZap,\r\n        IUniZapInV3 _sushiZap\r\n    ) public {\r\n        curveReg = _curveReg;\r\n        curveZap = _curveZap;\r\n        uniZap = _uniZap;\r\n        sushiZap = _sushiZap;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function adds liquidity to a Harvest vault with ETH or ERC20 tokens\r\n    @param toWhomToIssue account that will recieve fTokens\r\n    @param fromToken The token used for entry (address(0) if ether)\r\n    @param amountIn The amount of fromToken to invest\r\n    @param vault Harvest vault address for the pool\r\n    @param minToTokens The minimum acceptable quantity of tokens if a swap occurs. Reverts otherwise\r\n    @param swapTarget Excecution target for the first swap\r\n    @param swapData DEX quote data\r\n     */\r\n    function ZapInTokenVault(\r\n        address toWhomToIssue,\r\n        address fromToken,\r\n        uint256 amountIn,\r\n        address vault,\r\n        uint256 minToTokens,\r\n        address swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable stopInEmergency {\r\n        uint256 toInvest = _pullTokens(fromToken, amountIn, true);\r\n\r\n        address vaultUnderlying = IVault(vault).underlying();\r\n\r\n        uint256 toTokenAmt;\r\n        if (fromToken == vaultUnderlying) {\r\n            toTokenAmt = toInvest;\r\n        } else {\r\n            toTokenAmt = _fillQuote(\r\n                fromToken,\r\n                vaultUnderlying,\r\n                toInvest,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n            require(toTokenAmt >= minToTokens, \"Err: High Slippage\");\r\n        }\r\n\r\n        _vaultDeposit(toWhomToIssue, vaultUnderlying, toTokenAmt, vault);\r\n    }\r\n\r\n    /**\r\n    @notice This function adds liquidity to a Curve Harvest vault with ETH or ERC20 tokens\r\n    @param toWhomToIssue account that will recieve fTokens\r\n    @param fromToken The token used for entry (address(0) if ether)\r\n    @param toTokenAddress The intermediate token to swap to (address(0) if ether)\r\n    @param amountIn The amount of fromToken to invest\r\n    @param vault Harvest vault address for the pool\r\n    @param minCrvTokens The minimum acceptable quantity of LP tokens. Reverts otherwise\r\n    @param swapTarget Excecution target for the first swap\r\n    @param swapData DEX quote data\r\n     */\r\n    function ZapInCurveVault(\r\n        address toWhomToIssue,\r\n        address fromToken,\r\n        address toTokenAddress,\r\n        uint256 amountIn,\r\n        address vault,\r\n        uint256 minCrvTokens,\r\n        address swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable stopInEmergency {\r\n        uint256 toInvest = _pullTokens(fromToken, amountIn, false);\r\n\r\n        address curveTokenAddr = IVault(vault).underlying();\r\n        address curveDepositAddr = curveReg.metaPools(curveTokenAddr);\r\n        uint256 curveLP;\r\n\r\n        if (fromToken != address(0)) {\r\n            IERC20(fromToken).safeApprove(address(curveZap), toInvest);\r\n            curveLP = curveZap.ZapIn(\r\n                fromToken,\r\n                toTokenAddress,\r\n                curveDepositAddr,\r\n                toInvest,\r\n                minCrvTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        } else {\r\n            curveLP = curveZap.ZapIn.value(toInvest)(\r\n                fromToken,\r\n                toTokenAddress,\r\n                curveDepositAddr,\r\n                toInvest,\r\n                minCrvTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        }\r\n\r\n        // deposit to vault\r\n        _vaultDeposit(toWhomToIssue, curveTokenAddr, curveLP, vault);\r\n    }\r\n\r\n    /**\r\n    @notice This function adds liquidity to a Uniswap Harvest vault with ETH or ERC20 tokens\r\n    @param toWhomToIssue account that will recieve fTokens\r\n    @param fromToken The token used for entry (address(0) if ether)\r\n    @param amountIn The amount of fromToken to invest\r\n    @param vault Harvest vault address for the pool\r\n    @param minUniTokens The minimum acceptable quantity of LP tokens. Reverts otherwise\r\n    @param swapTarget Excecution target for the first swap\r\n    @param swapData DEX quote data\r\n     */\r\n    function ZapInUniVault(\r\n        address toWhomToIssue,\r\n        address fromToken,\r\n        uint256 amountIn,\r\n        address vault,\r\n        uint256 minUniTokens,\r\n        address swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable stopInEmergency {\r\n        uint256 toInvest = _pullTokens(fromToken, amountIn, false);\r\n\r\n        address uniPair = IVault(vault).underlying();\r\n        uint256 uniLP;\r\n        if (fromToken == address(0)) {\r\n            uniLP = uniZap.ZapIn.value(toInvest)(\r\n                fromToken,\r\n                uniPair,\r\n                toInvest,\r\n                minUniTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        } else {\r\n            IERC20(fromToken).safeApprove(address(uniZap), toInvest);\r\n            uniLP = uniZap.ZapIn(\r\n                fromToken,\r\n                uniPair,\r\n                toInvest,\r\n                minUniTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        }\r\n\r\n        _vaultDeposit(toWhomToIssue, uniPair, uniLP, vault);\r\n    }\r\n\r\n    /**\r\n    @notice This function adds liquidity to a Sushiswap Harvest vault with ETH or ERC20 tokens\r\n    @param toWhomToIssue account that will recieve fTokens\r\n    @param fromToken The token used for entry (address(0) if ether)\r\n    @param amountIn The amount of fromToken to invest\r\n    @param vault Harvest vault address for the pool\r\n    @param minSushiTokens The minimum acceptable quantity of LP tokens. Reverts otherwise\r\n    @param swapTarget Excecution target for the first swap\r\n    @param swapData DEX quote data\r\n     */\r\n    function ZapInSushiVault(\r\n        address toWhomToIssue,\r\n        address fromToken,\r\n        uint256 amountIn,\r\n        address vault,\r\n        uint256 minSushiTokens,\r\n        address swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable stopInEmergency {\r\n        // get incoming tokens\r\n        uint256 toInvest = _pullTokens(fromToken, amountIn, false);\r\n\r\n        // get sushi lp tokens\r\n        address sushiPair = IVault(vault).underlying();\r\n        uint256 sushiLP;\r\n        if (fromToken == address(0)) {\r\n            sushiLP = sushiZap.ZapIn.value(toInvest)(\r\n                fromToken,\r\n                sushiPair,\r\n                toInvest,\r\n                minSushiTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        } else {\r\n            IERC20(fromToken).safeApprove(address(sushiZap), toInvest);\r\n            sushiLP = sushiZap.ZapIn(\r\n                fromToken,\r\n                sushiPair,\r\n                toInvest,\r\n                minSushiTokens,\r\n                swapTarget,\r\n                swapTarget,\r\n                swapData\r\n            );\r\n        }\r\n\r\n        // deposit to vault\r\n        _vaultDeposit(toWhomToIssue, sushiPair, sushiLP, vault);\r\n    }\r\n\r\n    function _pullTokens(\r\n        address token,\r\n        uint256 amount,\r\n        bool enableGoodwill\r\n    ) internal returns (uint256 value) {\r\n        if (token == address(0)) {\r\n            require(msg.value > 0, \"No eth sent\");\r\n            value = msg.value;\r\n        } else {\r\n            require(amount > 0, \"Invalid token amount\");\r\n            require(msg.value == 0, \"Eth sent with token\");\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n            value = amount;\r\n        }\r\n\r\n        if (enableGoodwill && goodwill > 0) {\r\n            uint256 goodwillPortion = (value.mul(goodwill)).div(10000);\r\n            value = value.sub(goodwillPortion);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    function _vaultDeposit(\r\n        address toWhomToIssue,\r\n        address underlyingToken,\r\n        uint256 underlyingAmt,\r\n        address vault\r\n    ) internal {\r\n        IERC20(underlyingToken).safeApprove(vault, underlyingAmt);\r\n        IVault(vault).depositFor(underlyingAmt, toWhomToIssue);\r\n    }\r\n\r\n    function _fillQuote(\r\n        address _fromTokenAddress,\r\n        address toToken,\r\n        uint256 _amount,\r\n        address swapTarget,\r\n        bytes memory swapCallData\r\n    ) internal returns (uint256 amtBought) {\r\n        uint256 valueToSend;\r\n        if (_fromTokenAddress == address(0)) {\r\n            valueToSend = _amount;\r\n        } else {\r\n            IERC20 fromToken = IERC20(_fromTokenAddress);\r\n            fromToken.safeApprove(address(swapTarget), 0);\r\n            fromToken.safeApprove(address(swapTarget), _amount);\r\n        }\r\n\r\n        uint256 iniBal = IERC20(toToken).balanceOf(address(this));\r\n        (bool success, ) = swapTarget.call.value(valueToSend)(swapCallData);\r\n        require(success, \"Error Swapping Tokens 1\");\r\n        uint256 finalBal = IERC20(toToken).balanceOf(address(this));\r\n\r\n        amtBought = finalBal.sub(iniBal);\r\n    }\r\n\r\n    function updateCurveRegistry(ICurveRegistry _curveReg) external onlyOwner {\r\n        curveReg = _curveReg;\r\n    }\r\n\r\n    function updateCurveZap(ICurveZapIn _curveZap) external onlyOwner {\r\n        curveZap = _curveZap;\r\n    }\r\n\r\n    function updateUniZap(IUniZapInV3 _uniZap) external onlyOwner {\r\n        uniZap = _uniZap;\r\n    }\r\n\r\n    function updateSushiZap(IUniZapInV3 _sushiZap) external onlyOwner {\r\n        sushiZap = _sushiZap;\r\n    }\r\n\r\n    function set_new_goodwill(uint256 _new_goodwill) external onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill <= 100,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function toggleContractActive() external onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    function withdrawTokens(IERC20[] calldata _tokenAddresses)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n            _tokenAddresses[i].safeTransfer(\r\n                owner(),\r\n                _tokenAddresses[i].balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = Address.toPayable(owner());\r\n        _to.transfer(contractBalance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"_curveReg\",\"type\":\"address\"},{\"internalType\":\"contract ICurveZapIn\",\"name\":\"_curveZap\",\"type\":\"address\"},{\"internalType\":\"contract IUniZapInV3\",\"name\":\"_uniZap\",\"type\":\"address\"},{\"internalType\":\"contract IUniZapInV3\",\"name\":\"_sushiZap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrvTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"ZapInCurveVault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSushiTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"ZapInSushiVault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"ZapInTokenVault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minUniTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"ZapInUniVault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveReg\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveZap\",\"outputs\":[{\"internalType\":\"contract ICurveZapIn\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_goodwill\",\"type\":\"uint256\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushiZap\",\"outputs\":[{\"internalType\":\"contract IUniZapInV3\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniZap\",\"outputs\":[{\"internalType\":\"contract IUniZapInV3\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"_curveReg\",\"type\":\"address\"}],\"name\":\"updateCurveRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ICurveZapIn\",\"name\":\"_curveZap\",\"type\":\"address\"}],\"name\":\"updateCurveZap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IUniZapInV3\",\"name\":\"_sushiZap\",\"type\":\"address\"}],\"name\":\"updateSushiZap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IUniZapInV3\",\"name\":\"_uniZap\",\"type\":\"address\"}],\"name\":\"updateUniZap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Harvest_ZapIn_V1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fedba6539cbc0bf508cff780793225780a24705400000000000000000000000079c88866247a3626d45011662efa093535554b34000000000000000000000000d3cf4e98e1e432b3d6ae42ae406a78f2ac8293d000000000000000000000000091baf383abc0c332a69a73041c866f6761a90b3c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://278dc492d759f9ac073c8aa5383815bf6f2b83e5a9b4e1b4bf63392747c89d63"}]}