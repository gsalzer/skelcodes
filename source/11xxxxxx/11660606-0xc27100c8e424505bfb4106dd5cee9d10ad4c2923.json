{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/harvest-core/RewardDistributionSwitcher.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"../inheritance/Controllable.sol\\\";\\nimport \\\"../interface/INoMintRewardPool.sol\\\";\\n\\ncontract RewardDistributionSwitcher is Controllable {\\n\\n  mapping (address => bool) switchingAllowed;\\n\\n  constructor(address _storage) public Controllable(_storage){}\\n\\n  function returnOwnership(address poolAddr) public onlyGovernance {\\n    INoMintRewardPool(poolAddr).transferOwnership(governance());\\n  }\\n\\n  function enableSwitchers(address[] memory switchers) public onlyGovernance {\\n    for(uint256 i = 0; i < switchers.length; i++){\\n      switchingAllowed[switchers[i]] = true;\\n    }\\n  }\\n\\n  function setSwitcher(address switcher, bool allowed) public onlyGovernance {\\n    switchingAllowed[switcher] = allowed;\\n  }\\n\\n\\n  function setPoolRewardDistribution(address poolAddr, address newRewardDistributor) public {\\n    require(msg.sender == governance() || switchingAllowed[msg.sender], \\\"msg.sender not allowed to switch\\\");\\n\\n    INoMintRewardPool(poolAddr).setRewardDistribution(newRewardDistributor);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/inheritance/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n\\n  constructor(address _storage) Governable(_storage) public {\\n  }\\n\\n  modifier onlyController() {\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return store.controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/INoMintRewardPool.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface INoMintRewardPool {\\n    function withdraw(uint) external;\\n    function getReward() external;\\n    function stake(uint) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function exit() external;\\n\\n    function rewardDistribution() external view returns (address);\\n    function lpToken() external view returns(address);\\n    function rewardToken() external view returns(address);\\n\\n    // only owner\\n    function setRewardDistribution(address _rewardDistributor) external;\\n    function transferOwnership(address _owner) external;\\n    function notifyRewardAmount(uint256 _reward) external;\\n}\\n\"\r\n    },\r\n    \"contracts/inheritance/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"switchers\",\"type\":\"address[]\"}],\"name\":\"enableSwitchers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"returnOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRewardDistributor\",\"type\":\"address\"}],\"name\":\"setPoolRewardDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"switcher\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setSwitcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardDistributionSwitcher","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}