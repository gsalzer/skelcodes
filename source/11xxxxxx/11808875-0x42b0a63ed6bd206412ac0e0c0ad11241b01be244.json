{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dyco.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.3;\\n\\nimport \\\"./helpers/DYCOCore.sol\\\";\\n\\n\\n/// @title DYCO smart contract\\n/// @author DAOMAKER\\n/// @notice Contract calculates, distribute and keep the investors state and balances\\n/// @dev The contract accepts calls only from DYCO factory contract (owner)\\n/// All percental variables uses x100, eg: 15% should be provided as 1500\\ncontract DYCO is DYCOCore {\\n  using SafeMath for uint256;\\n\\n  // ------------------\\n  // OWNER PUBLIC METHODS\\n  // ------------------\\n\\n  /// @dev Operator should add whitelisted users with this method\\n  /// It can be called several times for big amount of users\\n  function addWhitelistedUsers(\\n    address[] memory _usersArray,\\n    uint256[] memory _amountsArray\\n  ) external onlyOwner {\\n    require(initialized, \\\"addWhitelistedUsers: Initialization should be done before calling this method!\\\");\\n    require(_usersArray.length != 0, \\\"addWhitelistedUsers: could not be 0 length array!\\\");\\n    require(_usersArray.length == _amountsArray.length, \\\"addWhitelistedUsers: could not be different length arrays!\\\");\\n\\n    uint256 totalTokensForUsers;\\n\\n    for (uint256 i = 0; i < _usersArray.length; i++) {\\n      address user = _usersArray[i];\\n      uint256 amount = _amountsArray[i];\\n\\n      require(!_users[user].whitelisted, \\\"addWhitelistedUsers: user duplication!\\\");\\n\\n      _users[user] = User({\\n        whitelisted: true,\\n        maxTokens: amount,\\n        receivedReleases: 0,\\n        burnedTokens: 0,\\n        distributedTokens: 0,\\n        naturallyReceivedTokens: 0\\n      });\\n\\n      if (initialDistributionEnabled) {\\n        uint256 tokensPerRelease = _getTokensPerRelease(user, 0, amount);\\n        _users[user].receivedReleases = 1;\\n        _users[user].distributedTokens = tokensPerRelease;\\n        _users[user].naturallyReceivedTokens = tokensPerRelease;\\n\\n        _transferTokensFrom(operator, user, tokensPerRelease);\\n        totalTokensForUsers = totalTokensForUsers.add(amount.sub(tokensPerRelease));\\n      } else {\\n        totalTokensForUsers = totalTokensForUsers.add(amount);\\n      }\\n    }\\n\\n    _transferTokensFrom(operator, address(this), totalTokensForUsers);\\n  }\\n\\n  // ------------------\\n  // PUBLIC SETTERS\\n  // ------------------\\n\\n  /// @dev Method automatically calculates and knows which feature to use (natural nor bridge)\\n  /// It will never been reverted (only if toll bridge paused).\\n  function claimTokens(address receiver, uint256 amount) external onlyOwner onlyWhitelisted(receiver) returns (\\n    uint256 burnableTokens,\\n    uint256 transferableTokens\\n  ) {\\n    require(amount != 0, \\\"claimTokens: Amount should be bigger 0!\\\");\\n    require(receiver != address(0), \\\"claimTokens: Receiver can not be zero address!\\\");\\n\\n    if (amount > _users[receiver].maxTokens.sub(_users[receiver].distributedTokens)) {\\n      amount = _users[receiver].maxTokens.sub(_users[receiver].distributedTokens);\\n    }\\n\\n    uint256 naturalAvailableTokens = _getNaturalAvailableTokens(receiver);\\n\\n    if (amount > naturalAvailableTokens && !_isFinished()) {\\n      require(!paused(), \\\"claimTokens: Claiming tokens via toll bridge is paused!\\\");\\n\\n      if (naturalAvailableTokens != 0) {\\n        _users[receiver].receivedReleases = _getPastReleasesCount();\\n        _users[receiver].distributedTokens = _users[receiver].distributedTokens.add(naturalAvailableTokens);\\n        _users[receiver].naturallyReceivedTokens = _users[receiver].naturallyReceivedTokens.add(naturalAvailableTokens);\\n\\n        transferableTokens = naturalAvailableTokens;\\n      }\\n\\n      uint256 overageAmount = amount.sub(naturalAvailableTokens);\\n      (uint256 burnPercent, uint256 transferPercent) = _getBurnAndTransferPercents(receiver);\\n      burnableTokens = _percentToAmount(overageAmount, burnPercent);\\n      uint256 tollBridgeTransferableTokens = _percentToAmount(overageAmount, transferPercent);\\n\\n      transferableTokens = transferableTokens.add(tollBridgeTransferableTokens);\\n      _users[receiver].burnedTokens = _users[receiver].burnedTokens.add(burnableTokens);\\n      _users[receiver].distributedTokens = _users[receiver].distributedTokens.add(tollBridgeTransferableTokens.add(burnableTokens));\\n    } else {\\n      if (amount != naturalAvailableTokens) {\\n        amount = naturalAvailableTokens;\\n      }\\n\\n      _users[receiver].receivedReleases = _getPastReleasesCount();\\n      _users[receiver].distributedTokens = _users[receiver].distributedTokens.add(amount);\\n      _users[receiver].naturallyReceivedTokens = _users[receiver].naturallyReceivedTokens.add(amount);\\n\\n      transferableTokens = amount;\\n    }\\n\\n    _transferTokens(receiver, transferableTokens);\\n    if (burnableTokens != 0) {\\n      if (isBurnableToken) {\\n        _burnTokens(burnableTokens);\\n      } else {\\n        _transferTokens(burnValley, burnableTokens);\\n      }\\n    }\\n\\n    return (\\n      burnableTokens,\\n      transferableTokens\\n    );\\n  }\\n\\n  // ------------------\\n  // PUBLIC GETTERS\\n  // ------------------\\n\\n  /// @dev Method returns ONLY natural available tokens, without toll bridge tokens\\n  function getNaturalAvailable(address user) external view returns (uint256) {\\n    return _getNaturalAvailableTokens(user);\\n  }\\n\\n  // ------------------\\n  // INTERNAL METHODS\\n  // ------------------\\n\\n  /// @dev Method calculates percent of toll bridge (transferable/burnable\\n  /// The formula is following:\\n  /// ----------------\\n  /// TOKENS_TO_CLAIM = 100 - [ (100 - X) * (Y * (A - Z) / A) + B * (Z / A) ]\\n  /// TOKENS_TO_BURN = 100 - TOKENS_TO_CLAIM\\n  /// ----------------\\n  /// X => at the time of claim, percentage of tokens naturally distributed\\n  /// Y => the percent of tokens burned for claims right after TGE (cost to instant flippers)\\n  /// A => amount of days for full distribution\\n  /// Z => days since TGE\\n  /// B => half of final distribution\\n  /// ----------------\\n  /// It uses the current state of the user (naturallyReceivedTokens), and returns 2 percent values\\n  /// Percents can be used only for this state, and will be changed after call\\n  function _getBurnAndTransferPercents(address user) private view returns (uint256, uint256) {\\n    uint256 burnPercent;\\n    uint256 transferPercent;\\n    uint256 timeSinceCreation = _timeSinceCreation();\\n    uint256 naturallyClaimedPercent = (_users[user].naturallyReceivedTokens.mul(HUNDRED_PERCENT)).div(_users[user].maxTokens);\\n    uint256 fullDistributionDelay = finish.sub(createdAt);\\n\\n    burnPercent = (HUNDRED_PERCENT.sub(naturallyClaimedPercent))\\n      .mul((MULTIPLIER.mul(tollFee).mul(fullDistributionDelay.sub(timeSinceCreation))).div(fullDistributionDelay.mul(HUNDRED_PERCENT)))\\n      .add(MULTIPLIER.mul((distributionPercents[distributionPercents.length - 1].div(2)).mul(timeSinceCreation)).div(fullDistributionDelay))\\n      .div(MULTIPLIER);\\n    transferPercent = HUNDRED_PERCENT.sub(burnPercent);\\n\\n    return (\\n      burnPercent,\\n      transferPercent\\n    );\\n  }\\n\\n  function _getNaturalAvailableTokens(address user) internal view returns (uint256) {\\n    uint256 naturalAvailableTokens;\\n    uint256 receivedReleases = _users[user].receivedReleases;\\n    uint256 missedReleases = _getPastReleasesCount().sub(receivedReleases);\\n    uint256 availableTokens = _users[user].maxTokens.sub(_users[user].distributedTokens);\\n\\n    while (missedReleases > 0) {\\n      uint256 tokensPerRelease = _getTokensPerRelease(user, receivedReleases, availableTokens);\\n      availableTokens = availableTokens.sub(tokensPerRelease);\\n      naturalAvailableTokens = naturalAvailableTokens.add(tokensPerRelease);\\n\\n      missedReleases--;\\n      receivedReleases++;\\n    }\\n\\n    return naturalAvailableTokens;\\n  }\\n\\n  /// @dev Returns tokens of provided release of the certain user\\n  /// The formula is following:\\n  /// ----------------\\n  /// RELEASE_PERCENT * LEFT_TOKENS / (RELEASE_PERCENT + REST_PERCENTS_SUM)\\n  function _getTokensPerRelease(address user, uint256 releaseId, uint256 leftTokens) internal view returns (uint256) {\\n    (uint256 releasePercent, uint256 restPercents) = _getReleaseAndRestPercents(releaseId);\\n\\n    return (releasePercent.mul(leftTokens).div(releasePercent.add(restPercents)));\\n  }\\n\\n  /// @dev Returns the percent of thee current release and sum of the rest releases\\n  function _getReleaseAndRestPercents(uint256 releaseId) internal view returns (uint256, uint256) {\\n    uint256 restPercents = HUNDRED_PERCENT;\\n    uint256 releasePercent = distributionPercents[releaseId];\\n\\n    for (uint8 i = 0; i <= releaseId; i++) {\\n      restPercents = restPercents.sub(distributionPercents[i]);\\n    }\\n\\n    return (releasePercent, restPercents);\\n  }\\n}\"\r\n    },\r\n    \"contracts/helpers/DYCOCore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.3;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBurnable.sol\\\";\\nimport \\\"../helpers/Ownable.sol\\\";\\n\\n\\n/// @title DYCO core smart contract\\n/// @author DAOMAKER\\n/// @dev Contract includes the storage variables and methods, which not contains the main logical functions.\\ncontract DYCOCore is Pausable, Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public finish;\\n  uint256 public tollFee;\\n  uint256 public createdAt;\\n  uint256 public constant MULTIPLIER = 10**24;\\n  uint256 public constant HUNDRED_PERCENT = 10000;\\n\\n  uint256[] public distributionDelays;\\n  uint256[] public distributionPercents;\\n\\n  address public burnValley;\\n  address public operator;\\n\\n  bool public initialized;\\n  bool public isBurnableToken;\\n  bool public initialDistributionEnabled;\\n\\n  IERC20 public token;\\n\\n  struct User {\\n    bool whitelisted;\\n    uint256 maxTokens;\\n    uint256 receivedReleases;\\n    uint256 burnedTokens;\\n    uint256 distributedTokens;\\n    uint256 naturallyReceivedTokens;\\n  }\\n\\n  mapping(address => User) internal _users;\\n\\n  modifier onlyWhitelisted(address receiver) {\\n    require(_users[receiver].whitelisted, \\\"onlyWhitelisted: Receiver is not whitelisted!\\\");\\n    _;\\n  }\\n\\n  // ------------------\\n  // PUBLIC SETTERS (OWNER)\\n  // ------------------\\n\\n  /// @dev Should be called only once, after contract cloning\\n  function init(\\n    address _token,\\n    address _operator,\\n    uint256 _tollFee,\\n    uint256[] calldata _distributionDelays,\\n    uint256[] calldata _distributionPercents,\\n    bool _initialDistributionEnabled,\\n    bool _isBurnableToken,\\n    address _burnValley\\n  ) external {\\n    require(!initialized, \\\"init: Can not be initialized twice!\\\");\\n    require(_token != address(0), \\\"init: Token address can not be ZERO_ADDR!\\\");\\n    require(_operator != address(0), \\\"init: Operator address can not be ZERO_ADDR!\\\");\\n    require(_distributionDelays.length != 0 && _distributionDelays.length < 12, \\\"init: Incompatible delays count!\\\");\\n    require(_distributionDelays.length == _distributionPercents.length, \\\"init: Delays and percents should be equal!\\\");\\n    require(HUNDRED_PERCENT >= _tollFee, \\\"init: The toll fee can not be bigger then 100%!\\\");\\n    require(_getArraySum(_distributionPercents) == HUNDRED_PERCENT, \\\"init: The total percent of all releases is not equal to hundred percent!\\\");\\n\\n    if (_initialDistributionEnabled) {\\n      require(_distributionDelays[0] == 0, \\\"init: For initial distribution the first delay should be 0!\\\");\\n    }\\n\\n    initialized = true;\\n    tollFee = _tollFee;\\n    operator = _operator;\\n    token = IERC20(_token);\\n    burnValley = _burnValley;\\n    createdAt = block.timestamp;\\n    isBurnableToken = _isBurnableToken;\\n    distributionDelays = _distributionDelays;\\n    distributionPercents = _distributionPercents;\\n    initialDistributionEnabled = _initialDistributionEnabled;\\n    finish = block.timestamp.add(_getArraySum(_distributionDelays));\\n\\n    _transferOwnership(msg.sender);\\n  }\\n\\n  /// @dev Pause toll bridge feature, natural claiming method still will be available\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @dev Resume toll bridge feature\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  /// @dev Exit contract and funds if extra situation happens.\\n  /// Operator can get back all tokens back\\n  function emergencyExit(address receiver) external onlyOwner {\\n    token.safeTransfer(receiver, token.balanceOf(address(this)));\\n  }\\n\\n  // ------------------\\n  // PUBLIC GETTERS\\n  // ------------------\\n\\n  /// @dev Method returns user data (whitelisted, max tokens, received tokens, last activity timestamp)\\n  function getUserStats(address user) external view returns (\\n    bool whitelisted,\\n    uint256 maxTokens,\\n    uint256 receivedReleases,\\n    uint256 burnedTokens,\\n    uint256 distributedTokens,\\n    uint256 naturallyReceivedTokens\\n  ) {\\n    return (\\n      _users[user].whitelisted,\\n      _users[user].maxTokens,\\n      _users[user].receivedReleases,\\n      _users[user].burnedTokens,\\n      _users[user].distributedTokens,\\n      _users[user].naturallyReceivedTokens\\n    );\\n  }\\n\\n  /// @dev Get upcoming release date (timestamp)\\n  /// After reaching the time it will return the timestamp of the last release\\n  function getUpcomingReleaseDate() external view returns (uint256) {\\n    return _getUpcomingReleaseDate();\\n  }\\n\\n  // ------------------\\n  // INTERNAL HELPERS\\n  // ------------------\\n\\n  /// @dev Returns date of the next release\\n  function _getUpcomingReleaseDate() internal view returns (uint256) {\\n    if (_isFinished()) {\\n      return finish;\\n    }\\n\\n    uint256 nextReleaseDate = createdAt;\\n\\n    for (uint8 i = 0; i < distributionDelays.length; i++) {\\n      nextReleaseDate = nextReleaseDate.add(distributionDelays[i]);\\n      if (nextReleaseDate > block.timestamp) break;\\n    }\\n\\n    return nextReleaseDate;\\n  }\\n\\n  /// @dev Returns the passed releases count since contract creation\\n  function _getPastReleasesCount() internal view returns (uint256) {\\n    uint256 releaseId;\\n    uint256 timePassed;\\n    uint256 timeSinceCreation = _timeSinceCreation();\\n\\n    for (uint8 i = 0; i < distributionDelays.length; i++) {\\n      timePassed = timePassed.add(distributionDelays[i]);\\n\\n      if (timeSinceCreation > timePassed) {\\n        releaseId++;\\n      } else break;\\n    }\\n\\n    return releaseId;\\n  }\\n\\n  /// @dev Simple method, returns percent of the provided amount\\n  function _percentToAmount(uint256 amount, uint256 percent) internal pure returns (uint256) {\\n    return amount.mul(percent).div(HUNDRED_PERCENT);\\n  }\\n\\n  /// @dev Returns time after contract deployment (seconds)\\n  function _timeSinceCreation() internal view returns (uint256) {\\n    return block.timestamp.sub(createdAt);\\n  }\\n\\n  /// @dev Return is DYCO finished or not\\n  function _isFinished() internal view returns (bool) {\\n    return block.timestamp > finish;\\n  }\\n\\n  /// @dev Compute sum of arrays' all elements\\n  function _getArraySum(uint256[] memory uintArray) internal pure returns (uint256) {\\n    uint256 sum;\\n\\n    for (uint256 i = 0; i < uintArray.length; i++) {\\n      sum = sum.add(uintArray[i]);\\n    }\\n\\n    return sum;\\n  }\\n\\n  /// @dev Transfer tokens to receiver by safeTransfer method\\n  function _transferTokens(address to, uint256 amount) internal {\\n    token.safeTransfer(to, amount);\\n  }\\n\\n  /// @dev Transfer tokens to receiver by safeTransfer method\\n  function _transferTokensFrom(address from, address to, uint256 amount) internal {\\n    token.safeTransferFrom(from, to, amount);\\n  }\\n\\n  /// @dev Burn amount of tokens from contract balance\\n  function _burnTokens(uint256 amount) internal {\\n    IBurnable(address(token)).burn(amount);\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.3;\\n\\ninterface IBurnable {\\n  function burn(uint256 amount) external;\\n  function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/helpers/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_usersArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsArray\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelistedUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnValley\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionDelays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNaturalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpcomingReleaseDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedReleases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"naturallyReceivedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tollFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_distributionDelays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_distributionPercents\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_initialDistributionEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isBurnableToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_burnValley\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tollFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DYCO","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}