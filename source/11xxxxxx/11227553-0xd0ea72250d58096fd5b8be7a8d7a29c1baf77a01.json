{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\n\\r\\ninterface IERC1155 {\\r\\n\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n  event URI(string _amount, uint256 indexed _id);\\r\\n\\r\\n\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n  function setApprovalForAll(address _operator, bool _approved) external;\\r\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n  \\r\\n}\"\r\n    },\r\n    \"contracts/MonetExchange.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IERC1155.sol';\\r\\n\\r\\ncontract MonetExchange {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public tokenCard;\\r\\n    address public tokenMonet;\\r\\n    \\r\\n    bytes4 private constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n    bytes4 private constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n    uint256 public fee = 2;  // 2%\\r\\n    address public feeTo;\\r\\n    address public feeToSetter;\\r\\n    \\r\\n    uint256 private _nextId;\\r\\n    mapping(uint256 => Order) internal _orders;\\r\\n\\r\\n    struct Order {\\r\\n        uint256 id;\\r\\n        uint256 num;\\r\\n        uint256 price;\\r\\n        address owner;\\r\\n        uint256 status;\\r\\n        uint256 direction;\\r\\n    }\\r\\n\\r\\n    constructor(address card, address monet) public {\\r\\n        tokenCard = card;\\r\\n        tokenMonet = monet;\\r\\n        feeTo = msg.sender;\\r\\n        feeToSetter = msg.sender;\\r\\n    }\\r\\n\\r\\n    // VIEW\\r\\n\\r\\n    // PRIVATE\\r\\n    function _transferFromCards(address _from, address _to, uint256 _id, uint256 _value) private {\\r\\n        IERC1155(tokenCard).safeTransferFrom(_from, _to, _id, _value, bytes(''));\\r\\n    }\\r\\n\\r\\n    function _transferFromMonet(address _from, address _to, uint256 _value) private {\\r\\n        require(IERC20(tokenMonet).transferFrom(_from, _to, _value), 'transferFrom fail');\\r\\n    }\\r\\n\\r\\n    function _transfer(address _to, uint256 _value) private {\\r\\n        require(IERC20(tokenMonet).transfer(_to, _value), 'transfer fail');\\r\\n    }\\r\\n\\r\\n    // EXTERNAL\\r\\n    function trade(uint256 orderId, uint256 num) external {\\r\\n        Order storage order = _orders[orderId];\\r\\n        require(order.id != 0 && order.status == 0, 'order is empty');\\r\\n        require(order.owner != msg.sender, 'order owner is caller');\\r\\n        require(order.num >= num, 'order num is less');\\r\\n        if (order.direction == 0) {\\r\\n            uint256 feeAmount = num.mul(order.price).mul(fee).div(100);\\r\\n            if (feeAmount > 0 && feeTo != address(0)) _transfer(feeTo, feeAmount);\\r\\n            _transfer(msg.sender, num.mul(order.price).sub(feeAmount));\\r\\n            _transferFromCards(msg.sender, order.owner, order.id, num);\\r\\n        } else {\\r\\n            uint256 feeAmount = num.mul(order.price).mul(fee).div(100);\\r\\n            if (feeAmount > 0 && feeTo != address(0)) _transferFromMonet(msg.sender, feeTo, feeAmount);\\r\\n            _transferFromCards(address(this), msg.sender, order.id, num);\\r\\n            _transferFromMonet(msg.sender, order.owner, num.mul(order.price).sub(feeAmount));\\r\\n        }\\r\\n        order.num = order.num.sub(num);\\r\\n        if (order.num == 0) {\\r\\n            order.status = 1;\\r\\n        }\\r\\n        emit Trade(msg.sender, orderId, num);\\r\\n    }\\r\\n\\r\\n    function revoke(uint256 orderId) external {\\r\\n        Order storage order = _orders[orderId];\\r\\n        require(order.id != 0 && order.status == 0, 'order is empty');\\r\\n        require(order.owner == msg.sender, 'caller is not the order owner');\\r\\n        if (order.direction == 0) {\\r\\n            _transfer(msg.sender, order.num.mul(order.price));\\r\\n        } else {\\r\\n            _transferFromCards(address(this), msg.sender, order.id, order.num);\\r\\n        }\\r\\n        order.status = 2;\\r\\n        emit Revoke(msg.sender, orderId);\\r\\n    }\\r\\n\\r\\n    function placeOrder(uint256 id, uint256 num, uint256 price, uint256 direction) external generateId {\\r\\n        require(_nextId > 0, 'order id generate fail');\\r\\n        require(direction < 2, 'direction is error');\\r\\n        if (direction == 0) {\\r\\n            _transferFromMonet(msg.sender, address(this), num.mul(price));\\r\\n        } else {\\r\\n            _transferFromCards(msg.sender, address(this), id, num);\\r\\n        }\\r\\n        _orders[_nextId] = Order(id, num, price, msg.sender, 0, direction);\\r\\n        emit PlaceOrder(msg.sender, _nextId, id, num, price, direction);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == feeToSetter, 'FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external {\\r\\n        require(msg.sender == feeToSetter, 'FORBIDDEN');\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n    \\r\\n    // IERC1155TokenReceiver\\r\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4){\\r\\n        return ERC1155_RECEIVED_VALUE;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns(bytes4){\\r\\n        return ERC1155_BATCH_RECEIVED_VALUE;\\r\\n    }\\r\\n\\r\\n    // MODIFIER\\r\\n    modifier generateId() {\\r\\n        _nextId = _nextId.add(1);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // EVENT\\r\\n    event Trade(address indexed sender, uint256 indexed orderId, uint256 num);\\r\\n    event Revoke(address indexed sender, uint256 indexed orderId);\\r\\n    event PlaceOrder(address indexed sender, uint256 orderId, uint256 id, uint256 num, uint256 price, uint256 direction);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n    \\r\\n    function div(uint a, uint b) internal pure returns (uint z) {\\r\\n        require(b > 0);\\r\\n        return a / b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"card\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"monet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"}],\"name\":\"PlaceOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"}],\"name\":\"placeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMonet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonetExchange","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001014cf898383d275da1c2ed970d0b2cd5ffef3c2000000000000000000000000f51d48b4554862604d3e69a424c2b68afe3bb968","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}