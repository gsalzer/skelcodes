{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20/ERC20.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public desc;\r\n    uint8 public decimals;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `TokenOwner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed TokenOwner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address TokenOwner, address spender) public view returns (uint256) {\r\n        return _allowances[TokenOwner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: Not enough in deligation\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: Not Enough balance\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a `Transfer` event with `to` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `TokenOwner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `TokenOwner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address TokenOwner, address spender, uint256 value) internal {\r\n        require(TokenOwner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[TokenOwner][spender] = value;\r\n        emit Approval(TokenOwner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts/governance/Owner.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ncontract Owner {\r\n\r\n    address public OwnerAddress;\r\n\r\n    modifier isOwner(){\r\n        require( msg.sender == OwnerAddress);\r\n        _;\r\n    }\r\n\r\n    function changeOwner ( address _newAddress )\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        OwnerAddress = _newAddress;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/token/IBTCToken.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n\r\ncontract IBTCToken is ERC20 , Owner{\r\n\r\n    address public TAddr;\r\n\r\n    modifier isTreasury(){\r\n        require(msg.sender == TAddr);\r\n        _;\r\n    }\r\n\r\n    constructor(  )\r\n        public\r\n    {\r\n        name = \"IBTC Blockchain\";\r\n        symbol = \"IBTC\";\r\n        desc = \"IBTC Blockchain\";\r\n        decimals = 18;\r\n        OwnerAddress = msg.sender;\r\n    }\r\n\r\n    function setTreasury ( address _TAddres )\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        TAddr = _TAddres;\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function mint(address recipient, uint256 amount)\r\n        isTreasury\r\n        public\r\n        returns (bool result )\r\n    {\r\n        _mint( recipient , amount );\r\n        result = true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        returns (bool result )\r\n    {\r\n        _transfer(msg.sender, recipient , amount );\r\n        result = true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: Not enough in deligation\");\r\n        _transfer(msg.sender, recipient , amount );\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address TokenOwner, address spender) public view returns (uint256) {\r\n        return _allowances[TokenOwner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/treasury/Treasury_ds.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\ncontract Treasury_ds is Owner {\r\n    using SafeMath for uint256;\r\n\r\n    bool public contractState;\r\n\r\n    IBTCToken Token;\r\n\r\n    address public TokenAddr;\r\n\r\n    address payable public Owner1;\r\n\r\n    address payable public Owner2;\r\n\r\n    address masterAddr;\r\n\r\n    uint256 public Rate;\r\n\r\n    bool public enabled;\r\n\r\n    mapping ( uint256 => LLimit ) public Levels;\r\n\r\n    struct LLimit{\r\n        uint256 percent;\r\n        uint256 salesLimit;\r\n        uint256 bonus;\r\n    }\r\n\r\n    uint256 public MaxLevel;\r\n\r\n//    Child -> Parent Mapping\r\n    mapping ( address => address ) public PCTree;\r\n\r\n    mapping ( address => userData ) public userLevel;\r\n\r\n    struct userData{\r\n        uint256 level;\r\n        uint256 sales;\r\n        uint256 share;\r\n        uint256 bonus;\r\n    }\r\n\r\n    modifier isInActive(){\r\n        require(contractState == false);\r\n        _;\r\n    }\r\n\r\n    modifier isActive(){\r\n        require(contractState == true);\r\n        _;\r\n    }\r\n\r\n    modifier isSameLength ( uint256 _s1 , uint256 _s2 ){\r\n        require(_s1 == _s2);\r\n        _;\r\n    }\r\n\r\n    modifier isVaildClaim( uint256 _amt ){\r\n        require( userLevel[msg.sender].share >= _amt );\r\n        _;\r\n    }\r\n\r\n    modifier isVaildReferer( address _ref ){\r\n        require( userLevel[_ref].level != 0 );\r\n        _;\r\n    }\r\n\r\n    modifier isSaleClose ( uint256 _amt ){\r\n        require( enabled == true );\r\n        _;\r\n    }\r\n\r\n    modifier isValidTOwner(){\r\n        require(( Owner1 == msg.sender ) || (Owner2 == msg.sender));\r\n        _;\r\n    }\r\n\r\n    event puchaseEvent( address indexed _buyer , address indexed _referer , uint256 _value , uint256 _tokens );\r\n\r\n    event claimEvent( address indexed _buyer ,  uint256 _value , uint256 _pendingShare );\r\n\r\n    event eventSetAccount( address indexed _child , address indexed _parent , uint256 _sales , uint256 _bonus , uint256 _level );\r\n}\r\n\r\n// File: contracts/treasury/Treasury.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\ncontract Treasury is Treasury_ds{\r\n\r\n\r\n    constructor( address _TAddr )\r\n        public\r\n    {\r\n        Token = IBTCToken( _TAddr );\r\n        TokenAddr = _TAddr;\r\n        OwnerAddress = msg.sender;\r\n        contractState = false;\r\n    }\r\n\r\n    function setLevels( uint256[] memory _percent , uint256[] memory _salesLimit , uint256[] memory _bonus )\r\n        public\r\n        isSameLength( _salesLimit.length , _percent.length )\r\n        isInActive\r\n        isOwner\r\n    {\r\n        MaxLevel = _salesLimit.length;\r\n        for (uint i=0; i<_salesLimit.length; i++) {\r\n            Levels[i+1] = LLimit( _percent[i] ,_salesLimit[i] , _bonus[i] );\r\n        }\r\n    }\r\n\r\n    function setAccount ( address _child , address _parent , uint256 _sales )\r\n        isInActive\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        PCTree[_child] = _parent;\r\n        userLevel[ _child ].sales = _sales;\r\n        for ( uint i= 1 ; i <= MaxLevel ; i++) {\r\n            if( Levels[i].salesLimit < _sales ){\r\n                userLevel[ _child ].bonus = Levels[i].bonus;\r\n                userLevel[ _child ].level = i;\r\n            }\r\n        }\r\n        emit eventSetAccount( _child , _parent , _sales , userLevel[ _child ].bonus , userLevel[ _child ].level );\r\n        return true;\r\n    }\r\n\r\n    function setupTreasury ( uint256 _rate , address payable _owner1 , address payable _owner2 )\r\n        isInActive\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        enabled = true;\r\n        Rate = _rate;\r\n        masterAddr = address(this);\r\n        PCTree[masterAddr] = address(0);\r\n        Owner1 = _owner1;\r\n        Owner2 = _owner2;\r\n        userLevel[masterAddr].level = MaxLevel;\r\n        contractState = true;\r\n        return true;\r\n    }\r\n\r\n    function calcRate ( uint256 _value )\r\n        public\r\n        view\r\n        returns ( uint256 )\r\n    {\r\n        return _value.mul( 10**18 ).div( Rate );\r\n    }\r\n\r\n    function LoopFx ( address _addr , uint256 _token ,  uint256 _value , uint256 _shareRatio )\r\n        internal\r\n        returns ( uint256 value )\r\n    {\r\n        userLevel[ _addr ].sales = userLevel[ _addr ].sales.add( _token );\r\n        if( _shareRatio < Levels[ userLevel[ _addr ].level ].percent ){\r\n            uint256 diff = Levels[ userLevel[ _addr ].level ].percent.sub(_shareRatio);\r\n            userLevel[ _addr ].share = userLevel[ _addr ].share.add( _value.mul(diff).div(10000) );\r\n            value = Levels[ userLevel[ _addr ].level ].percent;\r\n        }else if( _shareRatio == Levels[ userLevel[ _addr ].level ].percent ){\r\n            value = Levels[ userLevel[ _addr ].level ].percent;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function LevelChange ( address _addr )\r\n        internal\r\n    {\r\n        uint256 curLevel = userLevel[_addr ].level;\r\n        while( curLevel <= MaxLevel){\r\n            if( ( userLevel[ _addr ].sales < Levels[ curLevel ].salesLimit ) ){\r\n                break;\r\n            }else{\r\n                userLevel[_addr].bonus = Levels[ curLevel ].bonus;\r\n                userLevel[_addr ].level = curLevel;\r\n            }\r\n            curLevel = curLevel.add(1);\r\n        }\r\n    }\r\n\r\n    function purchase ( address _referer )\r\n        isActive\r\n        isVaildReferer( _referer )\r\n        payable\r\n        public\r\n        returns ( bool )\r\n    {\r\n        address Parent;\r\n        uint256 cut = 0;\r\n        uint256 tokens = calcRate(msg.value);\r\n        uint256 lx = 0;\r\n        bool overflow = false;\r\n        iMint( msg.sender , tokens);\r\n        if( userLevel[ msg.sender ].level == 0 ){\r\n            userLevel[ msg.sender ].level = 1;\r\n        }\r\n        if( PCTree[msg.sender] == address(0)){\r\n            Parent = _referer;\r\n            PCTree[msg.sender] = Parent;\r\n        }else{\r\n            Parent = PCTree[msg.sender];\r\n        }\r\n        while( lx < 100 ){\r\n            lx = lx.add(1);\r\n            cut = LoopFx( Parent , tokens , msg.value , cut );\r\n            LevelChange( Parent );\r\n            if( PCTree[ Parent ] == address(0)){\r\n                break;\r\n            }\r\n            Parent = PCTree[ Parent ];\r\n            if( lx == 100){\r\n                overflow = true;\r\n            }\r\n        }\r\n        if( overflow ){\r\n            cut = LoopFx( masterAddr , tokens , msg.value , cut );\r\n        }\r\n        emit puchaseEvent( msg.sender , PCTree[msg.sender] , msg.value , tokens );\r\n        return true;\r\n    }\r\n\r\n    function iMint ( address _addr , uint256 _value )\r\n        isSaleClose( _value )\r\n        internal\r\n    {\r\n        Token.mint( _addr , _value );\r\n    }\r\n\r\n    function claim (uint256 _amt)\r\n        isActive\r\n        isVaildClaim( _amt )\r\n        payable\r\n        public\r\n        returns ( bool )\r\n    {\r\n        userLevel[ msg.sender ].share = userLevel[ msg.sender ].share.sub( _amt );\r\n        Token.mint( msg.sender , userLevel[ msg.sender ].bonus );\r\n        userLevel[ msg.sender ].bonus = 0;\r\n        msg.sender.transfer( _amt );\r\n        emit claimEvent( msg.sender , _amt , userLevel[ msg.sender ].share );\r\n        return true;\r\n    }\r\n\r\n    function claimOwner ()\r\n        isActive\r\n        isValidTOwner\r\n        public\r\n        payable\r\n        returns ( bool )\r\n    {\r\n        uint256 _amt  = userLevel[ address(this) ].share.div(2);\r\n        userLevel[ address(this) ].share = 0;\r\n        Owner1.transfer( _amt );\r\n        Owner2.transfer( _amt );\r\n        emit claimEvent( Owner1 , _amt , userLevel[ address(this) ].share );\r\n        emit claimEvent( Owner2 , _amt , userLevel[ address(this) ].share );\r\n        return true;\r\n    }\r\n\r\n    function setRate ( uint256 _rate )\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        Rate = _rate;\r\n        return true;\r\n    }\r\n\r\n    function enableSales ( )\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        enabled = true;\r\n        return true;\r\n    }\r\n    function disableSales ( )\r\n        isOwner\r\n        public\r\n        returns ( bool )\r\n    {\r\n        enabled = false;\r\n        return true;\r\n    }\r\n\r\n    function viewStatus( address _addr )\r\n        view\r\n        public\r\n        returns ( uint256 _level , uint256 _sales , uint256 _claim , uint256 _bonus )\r\n    {\r\n        _level = userLevel[ _addr ].level;\r\n        _sales = userLevel[ _addr ].sales;\r\n        _claim = userLevel[ _addr ].share;\r\n        _bonus = userLevel[ _addr ].bonus;\r\n    }\r\n\r\n    function checkRef ( address _ref)\r\n        public\r\n        view\r\n        returns ( bool )\r\n    {\r\n        return ( userLevel[_ref].level != 0 );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pendingShare\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sales\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"eventSetAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"puchaseEvent\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PCTree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calcRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"checkRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sales\",\"type\":\"uint256\"}],\"name\":\"setAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_salesLimit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonus\",\"type\":\"uint256[]\"}],\"name\":\"setLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner2\",\"type\":\"address\"}],\"name\":\"setupTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"viewStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Treasury","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"00000000000000000000000008029a00765dc0c71c25f221552fddd2ba4965e8","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://757a9c56ffdd5c5cb50054d8d368fd251db47b5c49c372e0b940b2c72b35c161"}]}