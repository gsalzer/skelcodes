{"status":"1","message":"OK","result":[{"SourceCode":"{\"ACOAssetHelper.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nlibrary ACOAssetHelper {\\r\\n    uint256 internal constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to get if the address is for Ethereum (0x0).\\r\\n     * @param _address Address to be checked.\\r\\n     * @return Whether the address is for Ethereum.\\r\\n     */ \\r\\n    function _isEther(address _address) internal pure returns(bool) {\\r\\n        return _address == address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to approve ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param spender Authorized address.\\r\\n     * @param amount Amount to authorize.\\r\\n     */\\r\\n    function _callApproveERC20(address token, address spender, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0x095ea7b3, spender, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callApproveERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to transfer ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param recipient Address of the transfer destination.\\r\\n     * @param amount Amount to transfer.\\r\\n     */\\r\\n    function _callTransferERC20(address token, address recipient, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0xa9059cbb, recipient, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callTransferERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to call transferFrom on ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param sender Address of the sender.\\r\\n     * @param recipient Address of the transfer destination.\\r\\n     * @param amount Amount to transfer.\\r\\n     */\\r\\n     function _callTransferFromERC20(address token, address sender, address recipient, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callTransferFromERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset symbol.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset symbol.\\r\\n     */\\r\\n    function _getAssetSymbol(address asset) internal view returns(string memory) {\\r\\n        if (_isEther(asset)) {\\r\\n            return \\\"ETH\\\";\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetSymbol\\\");\\r\\n            return abi.decode(returndata, (string));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset decimals.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset decimals.\\r\\n     */\\r\\n    function _getAssetDecimals(address asset) internal view returns(uint8) {\\r\\n        if (_isEther(asset)) {\\r\\n            return uint8(18);\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetDecimals\\\");\\r\\n            return abi.decode(returndata, (uint8));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to the asset name.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset name.\\r\\n     */\\r\\n    function _getAssetName(address asset) internal view returns(string memory) {\\r\\n        if (_isEther(asset)) {\\r\\n            return \\\"Ethereum\\\";\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetName\\\");\\r\\n            return abi.decode(returndata, (string));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset balance of an account.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param account Address of the account.\\r\\n     * @return The account balance.\\r\\n     */\\r\\n    function _getAssetBalanceOf(address asset, address account) internal view returns(uint256) {\\r\\n        if (_isEther(asset)) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x70a08231, account));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetBalanceOf\\\");\\r\\n            return abi.decode(returndata, (uint256));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset allowance between two addresses.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param owner Address of the owner of the tokens.\\r\\n     * @param spender Address of the spender authorized.\\r\\n     * @return The owner allowance for the spender.\\r\\n     */\\r\\n    function _getAssetAllowance(address asset, address owner, address spender) internal view returns(uint256) {\\r\\n        if (_isEther(asset)) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0xdd62ed3e, owner, spender));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetAllowance\\\");\\r\\n            return abi.decode(returndata, (uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to transfer an asset. \\r\\n     * @param asset Address of the asset to be transferred.\\r\\n     * @param to Address of the destination.\\r\\n     * @param amount The amount to be transferred.\\r\\n     */\\r\\n    function _transferAsset(address asset, address to, uint256 amount) internal {\\r\\n        if (_isEther(asset)) {\\r\\n            (bool success,) = to.call{value:amount}(new bytes(0));\\r\\n            require(success, \\u0027ACOAssetHelper::_transferAsset\\u0027);\\r\\n        } else {\\r\\n            _callTransferERC20(asset, to, amount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Internal function to receive an asset. \\r\\n     * @param asset Address of the asset to be received.\\r\\n     * @param amount The amount to be received.\\r\\n     */\\r\\n    function _receiveAsset(address asset, uint256 amount) internal {\\r\\n        if (_isEther(asset)) {\\r\\n            require(msg.value == amount, \\\"ACOAssetHelper:: Invalid ETH amount\\\");\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"ACOAssetHelper:: Ether is not expected\\\");\\r\\n            _callTransferFromERC20(asset, msg.sender, address(this), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to check asset allowance and set to Infinity if necessary.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param owner Address of the owner of the tokens.\\r\\n     * @param spender Address of the spender authorized.\\r\\n     * @param amount Amount to check allowance.\\r\\n     */\\r\\n    function _setAssetInfinityApprove(address asset, address owner, address spender, uint256 amount) internal {\\r\\n        if (_getAssetAllowance(asset, owner, spender) \\u003c amount) {\\r\\n            _callApproveERC20(asset, spender, MAX_UINT);\\r\\n        }\\r\\n    }\\r\\n}\"},\"ACOVault.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./ACOAssetHelper.sol\\u0027;\\r\\nimport \\u0027./IACOVault.sol\\u0027;\\r\\nimport \\u0027./IController.sol\\u0027;\\r\\nimport \\u0027./IACOPoolFactory.sol\\u0027;\\r\\nimport \\u0027./IACOFlashExercise.sol\\u0027;\\r\\nimport \\u0027./IACOFactory.sol\\u0027;\\r\\nimport \\u0027./IACOAssetConverterHelper.sol\\u0027;\\r\\nimport \\u0027./IACOToken.sol\\u0027;\\r\\nimport \\u0027./IACOPool.sol\\u0027;\\r\\n\\r\\n\\r\\ncontract ACOVault is Ownable, IACOVault {\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    uint256 internal constant PERCENTAGE_PRECISION = 100000;\\r\\n    uint256 internal constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    event SetController(address indexed oldController, address indexed newController);\\r\\n    event SetAssetConverter(address indexed oldAssetConverter, address indexed newAssetConverter);\\r\\n    event SetAcoFlashExercise(address indexed oldAcoFlashExercise, address indexed newAcoFlashExercise);\\r\\n    event SetMinPercentageToKeep(uint256 indexed oldMinPercentageToKeep, uint256 indexed newMinPercentageToKeep);\\r\\n    event SetAcoToken(address indexed oldAcoToken, address indexed newAcoToken);\\r\\n    event SetAcoPool(address indexed oldAcoPool, address indexed newAcoPool);\\r\\n    event SetTolerancePriceAbove(uint256 indexed oldTolerancePriceAbove, uint256 indexed newTolerancePriceAbove);\\r\\n    event SetTolerancePriceBelow(uint256 indexed oldTolerancePriceBelow, uint256 indexed newTolerancePriceBelow);\\r\\n    event SetMinExpiration(uint256 indexed oldMinExpiration, uint256 indexed newMinExpiration);\\r\\n    event SetMaxExpiration(uint256 indexed oldMaxExpiration, uint256 indexed newMaxExpiration);\\r\\n    event SetMinTimeToExercise(uint256 indexed oldMinTimeToExercise, uint256 indexed newMinTimeToExercise);\\r\\n    event SetExerciseSlippage(uint256 indexed oldExerciseSlippage, uint256 indexed newExerciseSlippage);\\r\\n    event SetWithdrawFee(uint256 indexed oldWithdrawFee, uint256 indexed newWithdrawFee);\\r\\n    event SetOperator(address indexed operator, bool indexed previousPermission, bool indexed newPermission);\\r\\n    event RewardAco(address indexed acoToken, uint256 acoTokenAmountIn);\\r\\n    event ExerciseAco(address indexed acoToken, uint256 acoTokensOut, uint256 tokenIn);\\r\\n    event Deposit(address indexed account, uint256 shares, uint256 amount);\\r\\n    event Withdraw(address indexed account, uint256 shares, uint256 amount, uint256 fee);\\r\\n\\r\\n    IACOPoolFactory public immutable override acoPoolFactory;\\r\\n    IACOFactory public immutable override acoFactory;\\r\\n    address public immutable override token;\\r\\n    \\r\\n    uint256 public override minPercentageToKeep;\\r\\n    \\r\\n    IController public override controller;\\r\\n    IACOAssetConverterHelper public override assetConverter;\\r\\n    IACOFlashExercise public override acoFlashExercise;\\r\\n    \\r\\n    IACOPool public override acoPool;\\r\\n    IACOToken public override currentAcoToken;\\r\\n    address[] public override acoTokens;\\r\\n    address[] public override validAcos;\\r\\n    uint256 public override tolerancePriceAbove;\\r\\n    uint256 public override tolerancePriceBelow;\\r\\n    uint256 public override minExpiration;\\r\\n    uint256 public override maxExpiration;\\r\\n    uint256 public override minTimeToExercise;\\r\\n    uint256 public override exerciseSlippage;\\r\\n    uint256 public override withdrawFee;\\r\\n    uint256 public override totalSupply;\\r\\n    \\r\\n    mapping(address =\\u003e bool) public operators;\\r\\n    \\r\\n    mapping(address =\\u003e uint256) internal balances;\\r\\n    mapping(address =\\u003e AcoData) internal acoData;\\r\\n    mapping(address =\\u003e AccountData) internal accounts;\\r\\n    \\r\\n    constructor(VaultInitData memory initData) public {\\r\\n        super.init();\\r\\n        \\r\\n        require(initData.acoPoolFactory.isContract(), \\\"ACOVault:: Invalid ACO pool factory\\\");\\r\\n        require(initData.acoFactory.isContract(), \\\"ACOVault:: Invalid ACO factory\\\");\\r\\n        require(initData.token.isContract(), \\\"ACOVault:: Invalid token\\\");\\r\\n        \\r\\n        acoPoolFactory = IACOPoolFactory(initData.acoPoolFactory);\\r\\n        acoFactory = IACOFactory(initData.acoFactory);\\r\\n        token = initData.token;\\r\\n        _setAssetConverter(initData.assetConverter);\\r\\n        _setAcoFlashExercise(initData.acoFlashExercise);\\r\\n        _setMinPercentageToKeep(initData.minPercentageToKeep);\\r\\n        _setMinTimeToExercise(initData.minTimeToExercise);\\r\\n        _setExerciseSlippage(initData.exerciseSlippage);\\r\\n        _setWithdrawFee(initData.withdrawFee);\\r\\n        _setMaxExpiration(initData.maxExpiration);\\r\\n        _setMinExpiration(initData.minExpiration);\\r\\n        _setTolerancePriceAbove(initData.tolerancePriceAbove);\\r\\n        _setTolerancePriceBelow(initData.tolerancePriceBelow);\\r\\n        _setAcoToken(\\r\\n            IACOAssetConverterHelper(initData.assetConverter), \\r\\n            IACOFactory(initData.acoFactory), \\r\\n            IACOPoolFactory(initData.acoPoolFactory), \\r\\n            initData.currentAcoToken, \\r\\n            initData.acoPool\\r\\n        );\\r\\n        _setOperator(msg.sender, true);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.sender != tx.origin, \\\"ACOVault:: Only contract\\\");\\r\\n    }\\r\\n\\r\\n    function name() public view override returns(string memory) {\\r\\n        return string(abi.encodePacked(\\\"ACO Vault \\\", ACOAssetHelper._getAssetSymbol(address(token))));\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns(uint8) {\\r\\n        return ACOAssetHelper._getAssetDecimals(address(token));\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view override returns(uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n    \\r\\n    function getAcoData(address acoToken) external view override returns(AcoData memory) {\\r\\n        return acoData[acoToken];\\r\\n    }\\r\\n    \\r\\n    function getAccountAcoDataCount(address account) external view override returns(uint256) {\\r\\n        AccountData storage data = accounts[account];\\r\\n        return data.acoTokensOnDeposit.length;\\r\\n    }\\r\\n    \\r\\n    function getAccountAcoDataByIndex(address account, uint256 index) external view override returns(address, AccountAcoData memory) {\\r\\n        AccountData storage data = accounts[account];\\r\\n        address acoToken = data.acoTokensOnDeposit[index];\\r\\n        return (acoToken, data.dataOnDeposit[acoToken]);\\r\\n    }\\r\\n    \\r\\n    function getAccountAcoDataByAco(address account, address acoToken) external view override returns(AccountAcoData memory) {\\r\\n        return accounts[account].dataOnDeposit[acoToken];   \\r\\n    }\\r\\n    \\r\\n    function getAccountSituation(address account, uint256 shares) external view override returns(uint256, uint256, address[] memory, uint256[] memory) {\\r\\n        require(shares \\u003e 0, \\\"ACOVault:: Invalid shares\\\");\\r\\n        uint256 fullShare = balanceOf(account);\\r\\n        require(fullShare \\u003e= shares, \\\"ACOVault:: Shares not available\\\");\\r\\n        \\r\\n        (uint256 totalProfit, uint256 individualProfit, address[] memory acos, uint256[] memory acosAmount) = _getAccountAcoSituation(account, shares, fullShare);\\r\\n        \\r\\n        uint256 bufferBalance = ACOAssetHelper._getAssetBalanceOf(token, address(this));\\r\\n        uint256 accountBalance = _getAccountBalance(shares, totalSupply, totalProfit, individualProfit, bufferBalance);\\r\\n        if (bufferBalance \\u003c accountBalance) {\\r\\n            accountBalance = bufferBalance.add(controller.actualAmount(address(this), accountBalance.sub(bufferBalance)));\\r\\n        }\\r\\n        uint256 fee = accountBalance.mul(withdrawFee).div(PERCENTAGE_PRECISION);\\r\\n        accountBalance = accountBalance.sub(fee);\\r\\n        \\r\\n        return (accountBalance, fee, acos, acosAmount);\\r\\n    }\\r\\n\\r\\n    function balance() public override view returns(uint256) {\\r\\n        return ACOAssetHelper._getAssetBalanceOf(token, address(this)).add(controller.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function available() public override view returns(uint256) {\\r\\n        return PERCENTAGE_PRECISION.sub(minPercentageToKeep).mul(ACOAssetHelper._getAssetBalanceOf(token, address(this))).div(PERCENTAGE_PRECISION);\\r\\n    }\\r\\n\\r\\n    function numberOfAcoTokensNegotiated() public override view returns(uint256) {\\r\\n        return acoTokens.length;\\r\\n    }\\r\\n\\r\\n    function numberOfValidAcoTokens() public override view returns(uint256) {\\r\\n        return validAcos.length;\\r\\n    }\\r\\n\\r\\n    function getPricePerFullShare() public override view returns(uint256) {\\r\\n        uint256 _decimals = uint256(decimals());\\r\\n        return balance().mul(_decimals).div(totalSupply);\\r\\n    }\\r\\n  \\r\\n    function setController(address newController) onlyOwner external override {\\r\\n        _setController(newController);\\r\\n    }\\r\\n    \\r\\n    function setAssetConverter(address newAssetConverter) onlyOwner external override {\\r\\n        _setAssetConverter(newAssetConverter);\\r\\n    }\\r\\n    \\r\\n    function setAcoFlashExercise(address newAcoFlashExercise) onlyOwner external override {\\r\\n        _setAcoFlashExercise(newAcoFlashExercise);\\r\\n    }\\r\\n    \\r\\n    function setMinPercentageToKeep(uint256 newMinPercentageToKeep) onlyOwner external override {\\r\\n        _setMinPercentageToKeep(newMinPercentageToKeep);\\r\\n    }\\r\\n    \\r\\n    function setTolerancePriceBelow(uint256 newTolerancePriceBelow) onlyOwner external override {\\r\\n        _setTolerancePriceBelow(newTolerancePriceBelow);\\r\\n    }\\r\\n\\r\\n    function setTolerancePriceAbove(uint256 newTolerancePriceAbove) onlyOwner external override {\\r\\n        _setTolerancePriceAbove(newTolerancePriceAbove);\\r\\n    }\\r\\n\\r\\n    function setMinExpiration(uint256 newMinExpiration) onlyOwner external override {\\r\\n        _setMinExpiration(newMinExpiration);\\r\\n    }\\r\\n\\r\\n    function setMaxExpiration(uint256 newMaxExpiration) onlyOwner external override {\\r\\n        _setMaxExpiration(newMaxExpiration);\\r\\n    }\\r\\n    \\r\\n    function setMinTimeToExercise(uint256 newMinTimeToExercise) onlyOwner external override {\\r\\n        _setMinTimeToExercise(newMinTimeToExercise);\\r\\n    }\\r\\n    \\r\\n    function setExerciseSlippage(uint256 newExerciseSlippage) onlyOwner external override {\\r\\n        _setExerciseSlippage(newExerciseSlippage);\\r\\n    }\\r\\n    \\r\\n    function setWithdrawFee(uint256 newWithdrawFee) onlyOwner external override {\\r\\n        _setWithdrawFee(newWithdrawFee);\\r\\n    }\\r\\n    \\r\\n    function setOperator(address operator, bool permission) onlyOwner external override {\\r\\n        _setOperator(operator, permission);\\r\\n    }\\r\\n    \\r\\n    function setAcoToken(address newAcoToken, address newAcoPool) external override {\\r\\n        require(operators[msg.sender], \\\"ACOVault:: Invalid sender\\\");\\r\\n        _setAcoToken(assetConverter, acoFactory, acoPoolFactory, newAcoToken, newAcoPool);\\r\\n    }\\r\\n    \\r\\n    function setAcoPool(address newAcoPool) external override {\\r\\n        require(operators[msg.sender], \\\"ACOVault:: Invalid sender\\\");\\r\\n        (address underlying, \\r\\n         address strikeAsset, \\r\\n         bool isCall, \\r\\n         uint256 strikePrice, \\r\\n         uint256 expiryTime) = acoFactory.acoTokenData(address(currentAcoToken));\\r\\n        _setAcoPool(acoPoolFactory, newAcoPool, underlying, strikeAsset, isCall, strikePrice, expiryTime);\\r\\n    }\\r\\n    \\r\\n    function withdrawStuckToken(address _token, address destination) external override {\\r\\n        require(msg.sender == address(controller), \\\"ACOVault:: Invalid sender\\\");\\r\\n        require(address(token) != _token \\u0026\\u0026 !acoData[_token].initialized, \\\"ACOVault:: Invalid token\\\");\\r\\n        uint256 _balance = ACOAssetHelper._getAssetBalanceOf(_token, address(this));\\r\\n        if (_balance \\u003e 0) {\\r\\n            ACOAssetHelper._transferAsset(_token, destination, _balance);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function earn() external override {\\r\\n        require(operators[msg.sender], \\\"ACOVault:: Invalid sender\\\");\\r\\n        controller.earn(available());\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 amount) external override {\\r\\n        require(address(controller) != address(0), \\\"ACOVault:: No controller\\\");\\r\\n        require(amount \\u003e 0, \\\"ACOVault:: Invalid amount\\\");\\r\\n        uint256 _totalBalance = balance();\\r\\n        ACOAssetHelper._receiveAsset(address(token), amount);\\r\\n        \\r\\n        uint256 shares = 0;\\r\\n        if (_totalBalance == 0) {\\r\\n            shares = amount;\\r\\n        } else {\\r\\n            shares = amount.mul(totalSupply).div(_totalBalance);\\r\\n        }\\r\\n            \\r\\n        AccountData storage data = accounts[msg.sender];\\r\\n        _setAccountDataOnDeposit(address(currentAcoToken), balanceOf(msg.sender), data);\\r\\n        \\r\\n        _mint(msg.sender, shares);\\r\\n        \\r\\n        emit Deposit(msg.sender, shares, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 shares) external override {\\r\\n        require(shares \\u003e 0, \\\"ACOVault:: Invalid shares\\\");\\r\\n        \\r\\n        uint256 fullShare = balanceOf(msg.sender);\\r\\n        uint256 vaultTotalSupply = totalSupply;\\r\\n        _burn(msg.sender, shares);\\r\\n        \\r\\n        AccountData storage data = accounts[msg.sender];\\r\\n        (uint256 totalProfit, uint256 individualProfit) = _setAccountOpenPositionDataOnWithdraw(shares, fullShare, data);\\r\\n        \\r\\n        _setAccountValidAcoDataOnWithdraw(shares, fullShare, data);\\r\\n\\r\\n        if (fullShare == shares) {\\r\\n            delete accounts[msg.sender];\\r\\n        }\\r\\n        \\r\\n        uint256 bufferBalance = ACOAssetHelper._getAssetBalanceOf(token, address(this));\\r\\n        uint256 accountBalance = _getAccountBalance(shares, vaultTotalSupply, totalProfit, individualProfit, bufferBalance);\\r\\n        if (bufferBalance \\u003c accountBalance) {\\r\\n            accountBalance = bufferBalance.add(controller.withdraw(accountBalance.sub(bufferBalance)));\\r\\n        }\\r\\n        uint256 fee = accountBalance.mul(withdrawFee).div(PERCENTAGE_PRECISION);\\r\\n        accountBalance = accountBalance.sub(fee);\\r\\n        \\r\\n        controller.sendFee(fee);\\r\\n        ACOAssetHelper._transferAsset(address(token), msg.sender, accountBalance);\\r\\n        \\r\\n        emit Withdraw(msg.sender, shares, accountBalance, fee);\\r\\n    }\\r\\n    \\r\\n    function exerciseAco(address acoToken, uint256 acoAmount) external override {\\r\\n        (uint256 acoBalance, uint256 minIntrinsicValue, address collateral) = _exerciseValidation(acoToken, acoAmount);\\r\\n        \\r\\n        uint256 previousTokenAmount = ACOAssetHelper._getAssetBalanceOf(token, address(this));\\r\\n        \\r\\n        acoFlashExercise.flashExercise(acoToken, acoBalance, minIntrinsicValue, block.timestamp);\\r\\n        \\r\\n        if (collateral != address(token)) {\\r\\n            uint256 collateralBalance = ACOAssetHelper._getAssetBalanceOf(collateral, address(this));\\r\\n            uint256 etherAmount = 0;\\r\\n            if (ACOAssetHelper._isEther(collateral)) {\\r\\n                etherAmount = collateralBalance;\\r\\n            } else if (ACOAssetHelper._getAssetAllowance(collateral, address(this), address(assetConverter)) \\u003c collateralBalance) {\\r\\n                ACOAssetHelper._callApproveERC20(collateral, address(assetConverter), MAX_UINT);\\r\\n            }\\r\\n            assetConverter.swapExactAmountOut{value: etherAmount}(collateral, address(token), collateralBalance);\\r\\n        }\\r\\n        \\r\\n        uint256 tokenIn = ACOAssetHelper._getAssetBalanceOf(token, address(this)).sub(previousTokenAmount);\\r\\n        AcoData storage _acoData = acoData[acoToken];\\r\\n        _acoData.profit = tokenIn.add(_acoData.profit); \\r\\n        _acoData.exercised = acoBalance.add(_acoData.exercised); \\r\\n        \\r\\n        emit ExerciseAco(acoToken, acoBalance, tokenIn);\\r\\n    }\\r\\n    \\r\\n    function setReward(uint256 acoTokenAmount, uint256 rewardAmount) external override {\\r\\n        require(msg.sender == address(controller), \\\"ACOVault:: Invalid sender\\\");\\r\\n        address _currentAcoToken = address(currentAcoToken);\\r\\n        require(IACOToken(_currentAcoToken).expiryTime() \\u003e minTimeToExercise.add(block.timestamp), \\\"ACOVault:: Invalid time to buy\\\");\\r\\n        address _token = token;\\r\\n        address poolExpectedAsset = IACOToken(_currentAcoToken).strikeAsset();\\r\\n        \\r\\n        uint256 restriction;\\r\\n        if (_token != poolExpectedAsset) {\\r\\n            restriction = assetConverter.swapExactAmountOutWithMinAmountToReceive(_token, poolExpectedAsset, rewardAmount, 1);    \\r\\n        } else {\\r\\n            restriction = rewardAmount;\\r\\n        }\\r\\n        \\r\\n        uint256 amount = acoPool.swap(true, _currentAcoToken, acoTokenAmount, restriction, address(this), block.timestamp);\\r\\n        \\r\\n        AcoData storage _acoData = acoData[_currentAcoToken];\\r\\n        _acoData.amount = amount.add(_acoData.amount);\\r\\n        _acoData.tokenPerShare = amount.mul(1e18).div(totalSupply).add(_acoData.tokenPerShare);\\r\\n        \\r\\n        if (_token != poolExpectedAsset) {\\r\\n            uint256 poolAssetBalance = ACOAssetHelper._getAssetBalanceOf(poolExpectedAsset, address(this));\\r\\n            if (poolAssetBalance \\u003e 0) {\\r\\n                assetConverter.swapExactAmountOutWithMinAmountToReceive(poolExpectedAsset, _token, poolAssetBalance, 1);  \\r\\n            }\\r\\n        }\\r\\n        \\r\\n        emit RewardAco(_currentAcoToken, amount);\\r\\n    }\\r\\n    \\r\\n    function skim(address account) external override {\\r\\n        AccountData storage data = accounts[account];\\r\\n        for (uint256 i = data.acoTokensOnDeposit.length; i \\u003e 0; --i) {\\r\\n            address acoToken = data.acoTokensOnDeposit[i - 1];\\r\\n            if (block.timestamp \\u003e= IACOToken(acoToken).expiryTime()) {\\r\\n                AcoData storage _acoData = acoData[acoToken];\\r\\n                uint256 acoTotalProfit = _acoData.profit.sub(_acoData.withdrawnProfit); \\r\\n                if (acoTotalProfit == 0) {\\r\\n                    _removeFromAccountData(acoToken, data);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setValidAcoTokens() public override {\\r\\n        for (uint256 i = validAcos.length; i \\u003e 0; --i) {\\r\\n            uint256 index = i - 1;\\r\\n            address acoToken = validAcos[index];\\r\\n            if (block.timestamp \\u003e= IACOToken(acoToken).expiryTime()) {\\r\\n                _removeFromValidAcos(index);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _removeFromAccountData(address acoToken, AccountData storage data) internal {\\r\\n        uint256 index = data.dataOnDeposit[acoToken].index;\\r\\n        uint256 lastIndex = data.acoTokensOnDeposit.length - 1;\\r\\n\\t\\tif (lastIndex != index) {\\r\\n\\t\\t\\taddress last = data.acoTokensOnDeposit[lastIndex];\\r\\n\\t\\t\\tdata.dataOnDeposit[last].index = index;\\r\\n\\t\\t\\tdata.acoTokensOnDeposit[index] = last;\\r\\n\\t\\t}\\r\\n        data.acoTokensOnDeposit.pop();\\r\\n        delete data.dataOnDeposit[acoToken];\\r\\n    }\\r\\n\\r\\n    function _removeFromValidAcos(uint256 index) internal {\\r\\n        uint256 lastIndex = validAcos.length - 1;\\r\\n\\t\\tif (lastIndex != index) {\\r\\n\\t\\t    address last = validAcos[lastIndex];\\r\\n\\t\\t\\tvalidAcos[index] = last;\\r\\n\\t\\t}\\r\\n        validAcos.pop();\\r\\n    }\\r\\n    \\r\\n    function _setAccountDataOnDeposit(\\r\\n        address acoToken, \\r\\n        uint256 previousShares,\\r\\n        AccountData storage data\\r\\n    ) internal {\\r\\n        AcoData storage _acoData = acoData[acoToken];\\r\\n        if (data.dataOnDeposit[acoToken].initialized) {\\r\\n            AccountAcoData storage accountData = data.dataOnDeposit[acoToken];\\r\\n            accountData.tokenAccumulated = accountData.tokenAccumulated.add(_getAccountAcoAmount(previousShares, _acoData, accountData));\\r\\n            accountData.tokenPerShare = _acoData.tokenPerShare;\\r\\n        } else if (previousShares \\u003e 0 || _acoData.amount \\u003e _acoData.exercised) {\\r\\n            uint256 tokenAccumulated = 0;\\r\\n            if (previousShares \\u003e 0) {\\r\\n                tokenAccumulated = _getAccountAcoAmount(previousShares, _acoData, data.dataOnDeposit[acoToken]);\\r\\n            }\\r\\n            data.dataOnDeposit[acoToken] = AccountAcoData(_acoData.tokenPerShare, tokenAccumulated, data.acoTokensOnDeposit.length, true);\\r\\n            data.acoTokensOnDeposit.push(acoToken);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _setAccountDataOnWithdraw(\\r\\n        address acoToken,\\r\\n        uint256 acoAmount,\\r\\n        uint256 tokenAccumulated,\\r\\n        uint256 individualProfit,\\r\\n        AcoData storage _acoData,\\r\\n        AccountAcoData storage accountData\\r\\n    ) internal {\\r\\n        uint256 normalizedAmount = _getAcoNormalizedAmount(acoToken, acoAmount, _acoData);\\r\\n        \\r\\n        if (accountData.initialized) {\\r\\n            accountData.tokenAccumulated = tokenAccumulated;\\r\\n            accountData.tokenPerShare = _acoData.tokenPerShare;\\r\\n        }\\r\\n        _acoData.withdrawnNormalizedAmount = acoAmount.add(_acoData.withdrawnNormalizedAmount);\\r\\n        _acoData.withdrawnProfit = individualProfit.add(_acoData.withdrawnProfit);\\r\\n        \\r\\n        if (normalizedAmount \\u003e 0) {\\r\\n            ACOAssetHelper._transferAsset(acoToken, msg.sender, normalizedAmount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _setAccountOpenPositionDataOnWithdraw(\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AccountData storage data\\r\\n    ) internal returns(uint256, uint256) {\\r\\n        uint256 totalProfit = 0;\\r\\n        uint256 individualProfit = 0;\\r\\n        for (uint256 i = data.acoTokensOnDeposit.length; i \\u003e 0; --i) {\\r\\n            address acoToken = data.acoTokensOnDeposit[i - 1];\\r\\n            AcoData storage _acoData = acoData[acoToken];\\r\\n            AccountAcoData storage accountData = data.dataOnDeposit[acoToken];\\r\\n            \\r\\n            uint256 acoTotalProfit = _acoData.profit.sub(_acoData.withdrawnProfit);\\r\\n            (uint256 acoAmount, uint256 tokenAccumulated) = _getAcoAmountAndTokenAccumulated(shares, fullShare, _acoData, accountData);\\r\\n            uint256 acoProfit = _getAccountAcoProfit(acoAmount, acoTotalProfit, _acoData);\\r\\n            \\r\\n            totalProfit = totalProfit.add(acoTotalProfit);\\r\\n            individualProfit = individualProfit.add(acoProfit);\\r\\n            \\r\\n            if (block.timestamp \\u003e= IACOToken(acoToken).expiryTime()) {\\r\\n                if (fullShare \\u003e shares \\u0026\\u0026 acoTotalProfit == 0) {\\r\\n                    _removeFromAccountData(acoToken, data);\\r\\n                }\\r\\n            } else {\\r\\n                _setAccountDataOnWithdraw(acoToken, acoAmount, tokenAccumulated, acoProfit, _acoData, accountData);\\r\\n            }   \\r\\n        }\\r\\n        return (totalProfit, individualProfit);\\r\\n    }\\r\\n    \\r\\n    function _setAccountValidAcoDataOnWithdraw(\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AccountData storage data\\r\\n    ) internal {\\r\\n        for (uint256 j = validAcos.length; j \\u003e 0; --j) {\\r\\n            uint256 index = j - 1;\\r\\n            address acoToken = validAcos[index];\\r\\n            if (block.timestamp \\u003e= IACOToken(acoToken).expiryTime()) {\\r\\n                _removeFromValidAcos(index);\\r\\n            } else {\\r\\n                AccountAcoData storage accountData = data.dataOnDeposit[acoToken];\\r\\n                if (!accountData.initialized) {\\r\\n                    AcoData storage _acoData = acoData[acoToken];\\r\\n                    (uint256 acoAmount,) = _getAcoAmountAndTokenAccumulated(shares, fullShare, _acoData, accountData);\\r\\n                    _setAccountDataOnWithdraw(acoToken, acoAmount, 0, 0, _acoData, accountData);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _getAccountBalance(\\r\\n        uint256 shares,\\r\\n        uint256 vaultTotalSupply,\\r\\n        uint256 totalProfit,\\r\\n        uint256 individualProfit,\\r\\n        uint256 tokenBalance\\r\\n    ) internal view returns(uint256) {\\r\\n        uint256 _balance = controller.balanceOf(address(this));\\r\\n        uint256 normalizedIndividualProfit = 0;\\r\\n        if (individualProfit \\u003e 0) {\\r\\n            normalizedIndividualProfit = controller.actualAmount(address(this), individualProfit);\\r\\n        }\\r\\n        if (totalProfit \\u003e 0) {\\r\\n            if (tokenBalance \\u003e= totalProfit) {\\r\\n                _balance = _balance.add(tokenBalance.sub(totalProfit));\\r\\n            } else {\\r\\n                _balance = _balance.sub(controller.actualAmount(address(this), totalProfit.sub(tokenBalance)));\\r\\n            }\\r\\n        } else {\\r\\n            _balance = _balance.add(tokenBalance);\\r\\n        }\\r\\n        return shares.mul(_balance).div(vaultTotalSupply).add(normalizedIndividualProfit);\\r\\n    }\\r\\n    \\r\\n    function _getAcoAmountAndTokenAccumulated(\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AcoData storage _acoData,\\r\\n        AccountAcoData storage accountData\\r\\n    ) internal view returns(uint256, uint256) {\\r\\n        uint256 acoAmountFullShare = _getAccountAcoAmount(fullShare, _acoData, accountData).add(accountData.tokenAccumulated);\\r\\n        \\r\\n        uint256 amount = 0;\\r\\n        uint256 tokenAccumulated = 0;\\r\\n        if (fullShare == shares) {\\r\\n            amount = acoAmountFullShare;\\r\\n        } else {\\r\\n            uint256 acoAmountShare = _getAccountAcoAmount(shares, _acoData, accountData);\\r\\n            uint256 tokenAccumulatedShare = shares.mul(accountData.tokenAccumulated).div(fullShare);\\r\\n            amount = acoAmountShare.add(tokenAccumulatedShare);\\r\\n            tokenAccumulated = acoAmountFullShare.sub(amount);\\r\\n        }\\r\\n        return (amount, tokenAccumulated);\\r\\n    }\\r\\n\\r\\n    function _getAccountAcoProfit(\\r\\n        uint256 acoAmount,\\r\\n        uint256 totalProfit,\\r\\n        AcoData storage _acoData\\r\\n    ) internal view returns(uint256) {\\r\\n        uint256 totalAmount = _acoData.amount.sub(_acoData.withdrawnNormalizedAmount);\\r\\n        if (totalAmount \\u003e 0) {\\r\\n            return acoAmount.mul(totalProfit).div(totalAmount);\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _getAccountAcoAmount(\\r\\n        uint256 shares,\\r\\n        AcoData storage _acoData,\\r\\n        AccountAcoData storage accountData\\r\\n    ) internal view returns(uint256) {\\r\\n        if (accountData.initialized) {\\r\\n            return _acoData.tokenPerShare.sub(accountData.tokenPerShare).mul(shares).div(1e18);\\r\\n        } else {\\r\\n            return _acoData.tokenPerShare.mul(shares).div(1e18);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _getAcoNormalizedAmount(\\r\\n        address acoToken,\\r\\n        uint256 amount,\\r\\n        AcoData storage _acoData\\r\\n    ) internal view returns(uint256) {\\r\\n        if (amount \\u003e 0) {\\r\\n            uint256 totalAmount = _acoData.amount.sub(_acoData.withdrawnNormalizedAmount);\\r\\n            if (totalAmount \\u003e 0) {\\r\\n                uint256 acoAmount = ACOAssetHelper._getAssetBalanceOf(acoToken, address(this));\\r\\n                return acoAmount.mul(amount).div(totalAmount);\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n    function _exerciseValidation(\\r\\n        address acoToken, \\r\\n        uint256 acoAmount\\r\\n    ) internal view returns(\\r\\n        uint256 actualAcoAmount, \\r\\n        uint256 minIntrinsicValue, \\r\\n        address collateral\\r\\n    ) {\\r\\n        (address underlying, \\r\\n         address strikeAsset, \\r\\n         bool isCall,\\r\\n         uint256 strikePrice, \\r\\n         uint256 expiryTime) = acoFactory.acoTokenData(acoToken);\\r\\n        require(expiryTime \\u003c= minTimeToExercise.add(block.timestamp), \\\"ACOVault:: Invalid time to exercise\\\");\\r\\n        \\r\\n        uint256 acoBalance = ACOAssetHelper._getAssetBalanceOf(acoToken, address(this));\\r\\n        if (acoAmount \\u003e acoBalance) {\\r\\n            actualAcoAmount = acoBalance;\\r\\n        } else {\\r\\n            actualAcoAmount = acoAmount;\\r\\n        }\\r\\n        require(actualAcoAmount \\u003e 0, \\\"ACOVault:: Invalid ACO amount\\\");\\r\\n        \\r\\n        uint256 price = assetConverter.getPrice(underlying, strikeAsset);\\r\\n        if (isCall) {\\r\\n            require(price \\u003e strikePrice, \\\"ACOVault:: It\\u0027s not ITM\\\");\\r\\n            uint256 priceWithSlippage = price.mul(PERCENTAGE_PRECISION.sub(exerciseSlippage)).div(PERCENTAGE_PRECISION);\\r\\n            if (priceWithSlippage \\u003e strikePrice) {\\r\\n                minIntrinsicValue = priceWithSlippage.sub(strikePrice).mul(actualAcoAmount).div(price);\\r\\n            } else {\\r\\n                minIntrinsicValue = actualAcoAmount.div(price);\\r\\n            }\\r\\n            collateral = underlying;\\r\\n        } else {\\r\\n            require(price \\u003c strikePrice, \\\"ACOVault:: It\\u0027s not ITM\\\");\\r\\n            uint256 priceWithSlippage = price.mul(PERCENTAGE_PRECISION.add(exerciseSlippage)).div(PERCENTAGE_PRECISION);\\r\\n            uint256 acoPrecision = 10 ** uint256(ACOAssetHelper._getAssetDecimals(acoToken));\\r\\n            if (priceWithSlippage \\u003c strikePrice) {\\r\\n                minIntrinsicValue = strikePrice.sub(priceWithSlippage).mul(actualAcoAmount).div(acoPrecision);\\r\\n            } else {\\r\\n                minIntrinsicValue = actualAcoAmount.div(acoPrecision);\\r\\n            }\\r\\n            collateral = strikeAsset;\\r\\n        }\\r\\n        require(minIntrinsicValue \\u003e 0, \\\"ACOVault:: Profit too small\\\");\\r\\n    }\\r\\n        \\r\\n    function _getAccountAcoSituation(\\r\\n        address account, \\r\\n        uint256 shares,\\r\\n        uint256 fullShare\\r\\n    ) internal view returns(uint256, uint256, address[] memory, uint256[] memory) {\\r\\n        AccountData storage data = accounts[account];\\r\\n        \\r\\n        (uint256 totalProfit, uint256 individualProfit, uint256 countOnDeposit, uint256[] memory accountAcoDataOnDeposit) = _getAccountOnDepositAcoAmounts(shares, fullShare, data);\\r\\n        (uint256 countValidAcos, uint256[] memory accountValidAcoData) = _getAccountValidAcoAmounts(shares, fullShare, data);\\r\\n        \\r\\n        uint256[] memory acosAmount = new uint256[](countOnDeposit + countValidAcos);\\r\\n        address[] memory acos = new address[](countOnDeposit + countValidAcos);\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i \\u003c accountAcoDataOnDeposit.length; ++i) {\\r\\n            if (accountAcoDataOnDeposit[i] \\u003e 0) {\\r\\n                acosAmount[index] = accountAcoDataOnDeposit[i];\\r\\n                acos[index] = data.acoTokensOnDeposit[i];\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 j = 0; j \\u003c accountValidAcoData.length; ++j) {\\r\\n            if (accountValidAcoData[j] \\u003e 0) {\\r\\n                acosAmount[index] = accountValidAcoData[j];\\r\\n                acos[index] = validAcos[j];\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n        return (totalProfit, individualProfit, acos, acosAmount);\\r\\n    }\\r\\n\\r\\n    function _getAccountOnDepositAcoAmounts(\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AccountData storage data\\r\\n    ) internal view returns(uint256 totalProfit, uint256 individualProfit, uint256 count, uint256[] memory accountAcoData) {\\r\\n        accountAcoData = new uint256[](data.acoTokensOnDeposit.length);\\r\\n        for (uint256 i = 0; i \\u003c data.acoTokensOnDeposit.length; ++i) {\\r\\n            address acoToken = data.acoTokensOnDeposit[i];\\r\\n            \\r\\n            (uint256 amount, uint256 acoTotalProfit, uint256 acoProfit) = _getAccountOnDepositAcoData(acoToken, shares, fullShare, data);\\r\\n\\r\\n            totalProfit = totalProfit.add(acoTotalProfit);\\r\\n            individualProfit = individualProfit.add(acoProfit);\\r\\n            \\r\\n            if (amount \\u003e 0) {\\r\\n                ++count;\\r\\n                accountAcoData[i] = amount;\\r\\n            } else {\\r\\n                accountAcoData[i] = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _getAccountOnDepositAcoData(\\r\\n        address acoToken,\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AccountData storage data\\r\\n    ) internal view returns(uint256, uint256, uint256) {\\r\\n        AcoData storage _acoData = acoData[acoToken];\\r\\n        AccountAcoData storage accountData = data.dataOnDeposit[acoToken];\\r\\n        \\r\\n        uint256 acoTotalProfit = _acoData.profit.sub(_acoData.withdrawnProfit);\\r\\n        (uint256 acoAmount,) = _getAcoAmountAndTokenAccumulated(shares, fullShare, _acoData, accountData);\\r\\n        uint256 acoProfit = _getAccountAcoProfit(acoAmount, acoTotalProfit, _acoData);\\r\\n        \\r\\n        uint256 amount = 0;\\r\\n        if (block.timestamp \\u003c IACOToken(acoToken).expiryTime()) {\\r\\n            amount = _getAcoNormalizedAmount(acoToken, acoAmount, _acoData);\\r\\n        }   \\r\\n        return (amount, acoTotalProfit, acoProfit);\\r\\n    }\\r\\n\\r\\n    function _getAccountValidAcoAmounts(\\r\\n        uint256 shares,\\r\\n        uint256 fullShare,\\r\\n        AccountData storage data\\r\\n    ) internal view returns(uint256, uint256[] memory) {\\r\\n        uint256 count = 0;\\r\\n        uint256[] memory accountAcoData = new uint256[](validAcos.length);\\r\\n        for (uint256 i = 0; i \\u003c validAcos.length; ++i) {\\r\\n            address acoToken = validAcos[i];\\r\\n            if (block.timestamp \\u003c IACOToken(acoToken).expiryTime()) {\\r\\n                AccountAcoData storage accountData = data.dataOnDeposit[acoToken];\\r\\n                if (!accountData.initialized) {\\r\\n                    AcoData storage _acoData = acoData[acoToken];\\r\\n                    (uint256 acoAmount,) = _getAcoAmountAndTokenAccumulated(shares, fullShare, _acoData, accountData);\\r\\n                    uint256 amount = _getAcoNormalizedAmount(acoToken, acoAmount, _acoData);\\r\\n                    if (amount \\u003e 0) {\\r\\n                        ++count;\\r\\n                        accountAcoData[i] = amount;\\r\\n                    } else {\\r\\n                        accountAcoData[i] = 0;\\r\\n                    }    \\r\\n                } else {\\r\\n                    accountAcoData[i] = 0;\\r\\n                }\\r\\n            } else {\\r\\n                accountAcoData[i] = 0;\\r\\n            }\\r\\n        }\\r\\n        return (count, accountAcoData);\\r\\n    }\\r\\n\\r\\n    function _setAcoToken(\\r\\n        IACOAssetConverterHelper _assetConverter,\\r\\n        IACOFactory _acoFactory, \\r\\n        IACOPoolFactory _acoPoolFactory, \\r\\n        address newAcoToken, \\r\\n        address newAcoPool\\r\\n    ) internal {\\r\\n        (address underlying, \\r\\n         address strikeAsset, \\r\\n         bool isCall, \\r\\n         uint256 strikePrice, \\r\\n         uint256 expiryTime) = _acoFactory.acoTokenData(newAcoToken);\\r\\n         \\r\\n        _acoTokenValidation(_assetConverter, underlying, strikeAsset, strikePrice, expiryTime);\\r\\n        \\r\\n        _setAcoPool(_acoPoolFactory, newAcoPool, underlying, strikeAsset, isCall, strikePrice, expiryTime);\\r\\n\\r\\n        emit SetAcoToken(address(currentAcoToken), newAcoToken);\\r\\n        \\r\\n        setValidAcoTokens();\\r\\n        \\r\\n        ACOAssetHelper._callApproveERC20(newAcoToken, address(acoFlashExercise), MAX_UINT);    \\r\\n        \\r\\n        currentAcoToken = IACOToken(newAcoToken);\\r\\n        \\r\\n        if (!acoData[newAcoToken].initialized) {\\r\\n            acoData[newAcoToken] = AcoData(0, 0, 0, 0, 0, 0, acoTokens.length, true);\\r\\n            acoTokens.push(newAcoToken);\\r\\n            validAcos.push(newAcoToken);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _setAcoPool(\\r\\n        IACOPoolFactory _acoPoolFactory, \\r\\n        address newAcoPool,\\r\\n        address underlying, \\r\\n        address strikeAsset, \\r\\n        bool isCall, \\r\\n        uint256 strikePrice, \\r\\n        uint256 expiryTime\\r\\n    ) internal {\\r\\n        _acoPoolValidation(_acoPoolFactory, newAcoPool, underlying, strikeAsset, isCall, strikePrice, expiryTime); \\r\\n        \\r\\n        emit SetAcoPool(address(acoPool), newAcoPool);\\r\\n        \\r\\n        ACOAssetHelper._callApproveERC20(strikeAsset, newAcoPool, MAX_UINT);\\r\\n        acoPool = IACOPool(newAcoPool);\\r\\n    }\\r\\n    \\r\\n    function _acoTokenValidation(\\r\\n        IACOAssetConverterHelper _assetConverter,\\r\\n        address underlying, \\r\\n        address strikeAsset, \\r\\n        uint256 strikePrice, \\r\\n        uint256 expiryTime\\r\\n    ) internal view {\\r\\n        require(underlying != strikeAsset, \\\"ACOVault:: Invalid ACO token\\\");\\r\\n        \\r\\n        uint256 minExpiryTime = minExpiration.add(block.timestamp);\\r\\n        uint256 maxExpiryTime = maxExpiration.add(block.timestamp);\\r\\n        require(expiryTime \\u003e= minExpiryTime \\u0026\\u0026 expiryTime \\u003c= maxExpiryTime, \\\"ACOVault:: Invalid ACO expiry time\\\");\\r\\n        \\r\\n        uint256 price = _assetConverter.getPrice(underlying, strikeAsset);\\r\\n        uint256 maxPrice = strikePrice.mul(PERCENTAGE_PRECISION.add(tolerancePriceAbove)).div(PERCENTAGE_PRECISION);\\r\\n        uint256 minPrice = strikePrice.mul(PERCENTAGE_PRECISION.sub(tolerancePriceBelow)).div(PERCENTAGE_PRECISION);\\r\\n        \\r\\n        require(price \\u003e= minPrice \\u0026\\u0026 price \\u003c= maxPrice, \\\"ACOVault:: Invalid ACO strike price\\\");\\r\\n    }\\r\\n    \\r\\n    function _acoPoolValidation(\\r\\n        IACOPoolFactory _acoPoolFactory,\\r\\n        address newAcoPool,\\r\\n        address underlying, \\r\\n        address strikeAsset, \\r\\n        bool isCall, \\r\\n        uint256 strikePrice, \\r\\n        uint256 expiryTime\\r\\n    ) internal view {\\r\\n        (uint256 poolStart, \\r\\n         address poolUnderlying, \\r\\n         address poolStrikeAsset, \\r\\n         bool poolIsCall, \\r\\n         uint256 poolMinStrikePrice, \\r\\n         uint256 poolMaxStrikePrice, \\r\\n         uint256 poolMinExpiration, \\r\\n         uint256 poolMaxExpiration,) = _acoPoolFactory.acoPoolData(newAcoPool);\\r\\n        require(\\r\\n            poolStart \\u003c= block.timestamp \\u0026\\u0026\\r\\n            underlying == poolUnderlying \\u0026\\u0026\\r\\n            strikeAsset == poolStrikeAsset \\u0026\\u0026\\r\\n            isCall == poolIsCall \\u0026\\u0026\\r\\n            poolMinStrikePrice \\u003c= strikePrice \\u0026\\u0026\\r\\n            poolMaxStrikePrice \\u003e= strikePrice \\u0026\\u0026\\r\\n            poolMinExpiration \\u003c= expiryTime \\u0026\\u0026\\r\\n            poolMaxExpiration \\u003e= expiryTime, \\r\\n            \\\"ACOVault:: Invalid ACO pool\\\");\\r\\n    }\\r\\n    \\r\\n    function _setController(address newController) internal {\\r\\n        require(newController.isContract(), \\\"ACOVault:: Invalid controller\\\");\\r\\n        emit SetController(address(controller), newController);\\r\\n        ACOAssetHelper._callApproveERC20(token, newController, MAX_UINT);\\r\\n        controller = IController(newController);\\r\\n    }\\r\\n    \\r\\n    function _setAssetConverter(address newAssetConverter) internal {\\r\\n        require(newAssetConverter.isContract(), \\\"ACOVault:: Invalid asset converter\\\");\\r\\n        emit SetAssetConverter(address(assetConverter), newAssetConverter);\\r\\n        assetConverter = IACOAssetConverterHelper(newAssetConverter);\\r\\n    }\\r\\n    \\r\\n    function _setAcoFlashExercise(address newAcoFlashExercise) internal {\\r\\n        require(newAcoFlashExercise.isContract(), \\\"ACOVault:: Invalid ACO flash exercise\\\");\\r\\n        emit SetAcoFlashExercise(address(acoFlashExercise), newAcoFlashExercise);\\r\\n        \\r\\n        address _currentAcoToken = address(currentAcoToken);\\r\\n        if (_currentAcoToken != address(0)) {\\r\\n            ACOAssetHelper._callApproveERC20(_currentAcoToken, newAcoFlashExercise, MAX_UINT);   \\r\\n        }\\r\\n        \\r\\n        acoFlashExercise = IACOFlashExercise(newAcoFlashExercise);\\r\\n    }\\r\\n    \\r\\n    function _setMinPercentageToKeep(uint256 newMinPercentageToKeep) internal {\\r\\n        require(newMinPercentageToKeep \\u003c PERCENTAGE_PRECISION, \\\"ACOVault:: Invalid percentage\\\");\\r\\n        emit SetMinPercentageToKeep(minPercentageToKeep, newMinPercentageToKeep);\\r\\n        minPercentageToKeep = newMinPercentageToKeep;\\r\\n    }\\r\\n    \\r\\n    function _setTolerancePriceAbove(uint256 newTolerancePriceAbove) internal {\\r\\n        require(newTolerancePriceAbove \\u003c PERCENTAGE_PRECISION, \\\"ACOVault:: Invalid tolerance\\\");\\r\\n        emit SetTolerancePriceAbove(tolerancePriceAbove, newTolerancePriceAbove);\\r\\n        tolerancePriceAbove = newTolerancePriceAbove;\\r\\n    }\\r\\n    \\r\\n    function _setTolerancePriceBelow(uint256 newTolerancePriceBelow) internal {\\r\\n        require(newTolerancePriceBelow \\u003c PERCENTAGE_PRECISION, \\\"ACOVault:: Invalid tolerance\\\");\\r\\n        emit SetTolerancePriceBelow(tolerancePriceBelow, newTolerancePriceBelow);\\r\\n        tolerancePriceBelow = newTolerancePriceBelow;\\r\\n    }\\r\\n    \\r\\n    function _setMinExpiration(uint256 newMinExpiration) internal {\\r\\n        require(newMinExpiration \\u003c= maxExpiration, \\\"ACOVault:: Invalid min expiration\\\");\\r\\n        emit SetMinExpiration(minExpiration, newMinExpiration);\\r\\n        minExpiration = newMinExpiration;\\r\\n    }\\r\\n    \\r\\n    function _setMaxExpiration(uint256 newMaxExpiration) internal {\\r\\n        require(newMaxExpiration \\u003e= minExpiration, \\\"ACOVault:: Invalid max expiration\\\");\\r\\n        emit SetMaxExpiration(maxExpiration, newMaxExpiration);\\r\\n        maxExpiration = newMaxExpiration;\\r\\n    }\\r\\n    \\r\\n    function _setMinTimeToExercise(uint256 newMinTimeToExercise) internal {\\r\\n        require(newMinTimeToExercise \\u003e= 3600, \\\"ACOVault:: Invalid min time to exercise\\\");\\r\\n        emit SetMinTimeToExercise(minTimeToExercise, newMinTimeToExercise);\\r\\n        minTimeToExercise = newMinTimeToExercise;\\r\\n    }\\r\\n    \\r\\n    function _setExerciseSlippage(uint256 newExerciseSlippage) internal {\\r\\n        require(newExerciseSlippage \\u003c PERCENTAGE_PRECISION, \\\"ACOVault:: Invalid exercise slippage\\\");\\r\\n        emit SetExerciseSlippage(exerciseSlippage, newExerciseSlippage);\\r\\n        exerciseSlippage = newExerciseSlippage;\\r\\n    }\\r\\n    \\r\\n    function _setWithdrawFee(uint256 newWithdrawFee) internal {\\r\\n        require(newWithdrawFee \\u003c= 1000, \\\"ACOVault:: Invalid withdraw fee\\\");\\r\\n        emit SetWithdrawFee(withdrawFee, newWithdrawFee);\\r\\n        withdrawFee = newWithdrawFee;\\r\\n    }\\r\\n    \\r\\n    function _setOperator(address operator, bool newPermission) internal {\\r\\n        emit SetOperator(operator, operators[operator], newPermission);\\r\\n        operators[operator] = newPermission;\\r\\n    }\\r\\n    \\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ACOVault:: Invalid account\\\");\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        balances[account] = balances[account].add(amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ACOVault:: Invalid account\\\");\\r\\n        balances[account] = balances[account].sub(amount);\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n    }\\r\\n}\"},\"Address.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"IACOAssetConverterHelper.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IACOAssetConverterHelper {\\r\\n    function setPairTolerancePercentage(address baseAsset, address quoteAsset, uint256 tolerancePercentage) external;\\r\\n    function setAggregator(address baseAsset, address quoteAsset, address aggregator) external;\\r\\n    function setUniswapMiddleRoute(address baseAsset, address quoteAsset, address[] calldata uniswapMiddleRoute) external;\\r\\n    function withdrawStuckAsset(address asset, address destination) external;\\r\\n    function hasAggregator(address baseAsset, address quoteAsset) external view returns(bool);\\r\\n    function getPairData(address baseAsset, address quoteAsset) external view returns(address, uint256, uint256, uint256);\\r\\n    function getUniswapMiddleRouteByIndex(address baseAsset, address quoteAsset, uint256 index) external view returns(address);\\r\\n    function getPrice(address baseAsset, address quoteAsset) external view returns(uint256);\\r\\n    function getPriceWithTolerance(address baseAsset, address quoteAsset, bool isMinimumPrice) external view returns(uint256);\\r\\n    function getExpectedAmountOutToSwapExactAmountIn(address assetToSold, address assetToBuy, uint256 amountToBuy) external view returns(uint256);\\r\\n    function getExpectedAmountOutToSwapExactAmountInWithSpecificTolerance(address assetToSold, address assetToBuy, uint256 amountToBuy, uint256 tolerancePercentage) external view returns(uint256);\\r\\n    function swapExactAmountOut(address assetToSold, address assetToBuy, uint256 amountToSold) external payable returns(uint256);\\r\\n    function swapExactAmountOutWithSpecificTolerance(address assetToSold, address assetToBuy, uint256 amountToSold, uint256 tolerancePercentage) external payable returns(uint256);\\r\\n    function swapExactAmountOutWithMinAmountToReceive(address assetToSold, address assetToBuy, uint256 amountToSold, uint256 minAmountToReceive) external payable returns(uint256);\\r\\n    function swapExactAmountIn(address assetToSold, address assetToBuy, uint256 amountToBuy) external payable returns(uint256);\\r\\n    function swapExactAmountInWithSpecificTolerance(address assetToSold, address assetToBuy, uint256 amountToBuy, uint256 tolerancePercentage) external payable returns(uint256);\\r\\n    function swapExactAmountInWithMaxAmountToSold(address assetToSold, address assetToBuy, uint256 amountToBuy, uint256 maxAmountToSold) external payable returns(uint256);\\r\\n}\"},\"IACOFactory.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IACOFactory {\\r\\n\\tfunction init(address _factoryAdmin, address _acoTokenImplementation, uint256 _acoFee, address _acoFeeDestination) external;\\r\\n    function acoFee() external view returns(uint256);\\r\\n    function factoryAdmin() external view returns(address);\\r\\n    function acoTokenImplementation() external view returns(address);\\r\\n    function acoFeeDestination() external view returns(address);\\r\\n    function acoTokenData(address acoToken) external view returns(address, address, bool, uint256, uint256);\\r\\n    function createAcoToken(address underlying, address strikeAsset, bool isCall, uint256 strikePrice, uint256 expiryTime, uint256 maxExercisedAccounts) external returns(address);\\r\\n    function setFactoryAdmin(address newFactoryAdmin) external;\\r\\n    function setAcoTokenImplementation(address newAcoTokenImplementation) external;\\r\\n    function setAcoFee(uint256 newAcoFee) external;\\r\\n    function setAcoFeeDestination(address newAcoFeeDestination) external;\\r\\n}\"},\"IACOFlashExercise.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IACOFlashExercise {\\r\\n    function uniswapFactory() external view returns(address);\\r\\n    function uniswapRouter() external view returns(address);\\r\\n    function weth() external view returns(address);\\r\\n    function getUniswapPair(address acoToken) external view returns(address);\\r\\n    function getExerciseData(address acoToken, uint256 tokenAmount, address[] calldata accounts) external view returns(uint256, uint256);\\r\\n    function getEstimatedReturn(address acoToken, uint256 tokenAmount) external view returns(uint256);\\r\\n    function flashExercise(address acoToken, uint256 tokenAmount, uint256 minimumCollateral, uint256 salt) external;\\r\\n    function flashExerciseAccounts(address acoToken, uint256 tokenAmount, uint256 minimumCollateral, address[] calldata accounts) external;\\r\\n    function uniswapV2Call(address sender, uint256 amount0Out, uint256 amount1Out, bytes calldata data) external;\\r\\n}\\r\\n\"},\"IACOPool.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\ninterface IACOPool is IERC20 {\\r\\n    struct InitData {\\r\\n        uint256 poolStart;\\r\\n        address acoFlashExercise;\\r\\n        address acoFactory;\\r\\n        address chiToken;\\r\\n        uint256 fee;\\r\\n        address feeDestination;\\r\\n        address underlying;\\r\\n        address strikeAsset;\\r\\n        uint256 minStrikePrice; \\r\\n        uint256 maxStrikePrice;\\r\\n        uint256 minExpiration;\\r\\n        uint256 maxExpiration;\\r\\n        bool isCall; \\r\\n        bool canBuy;\\r\\n        address strategy;\\r\\n        uint256 baseVolatility;    \\r\\n    }\\r\\n    \\r\\n\\tfunction init(InitData calldata initData) external;\\r\\n    function numberOfACOTokensCurrentlyNegotiated() external view returns(uint256);\\r\\n    function collateral() external view returns(address);\\r\\n    function setStrategy(address strategy) external;\\r\\n    function setBaseVolatility(uint256 baseVolatility) external;\\r\\n    function quote(bool isBuying, address acoToken, uint256 tokenAmount) external view returns(uint256 swapPrice, uint256 fee, uint256 underlyingPrice);\\r\\n    function swap(bool isBuying, address acoToken, uint256 tokenAmount, uint256 restriction, address to, uint256 deadline) external returns(uint256);\\r\\n    function swapWithGasToken(bool isBuying, address acoToken, uint256 tokenAmount, uint256 restriction, address to, uint256 deadline) external returns(uint256);\\r\\n    function exerciseACOToken(address acoToken) external;\\r\\n    function redeemACOTokens() external;\\r\\n\\tfunction redeemACOToken(address acoToken) external;\\r\\n    function deposit(uint256 collateralAmount, address to) external payable returns(uint256 acoPoolTokenAmount);\\r\\n    function redeem() external returns(uint256 underlyingReceived, uint256 strikeAssetReceived);\\r\\n    function redeemFrom(address account) external returns(uint256 underlyingReceived, uint256 strikeAssetReceived);\\r\\n    function restoreCollateral() external;\\r\\n}\"},\"IACOPoolFactory.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IACOPoolFactory {\\r\\n    function factoryAdmin() external view returns(address);\\r\\n    function acoPoolImplementation() external view returns(address);\\r\\n    function acoFactory() external view returns(address);\\r\\n    function acoFlashExercise() external view returns(address);\\r\\n    function chiToken() external view returns(address);\\r\\n    function acoPoolFee() external view returns(uint256);\\r\\n    function acoPoolFeeDestination() external view returns(address);\\r\\n    function poolAdminPermission(address account) external view returns(bool);\\r\\n    function strategyPermitted(address strategy) external view returns(bool);\\r\\n    function acoPoolData(address acoPool) external view returns(uint256 poolStart, address underlying, address strikeAsset, bool isCall, uint256 minStrikePrice, uint256 maxStrikePrice, uint256 minExpiration, uint256 maxExpiration, bool canBuy);\\r\\n    function setFactoryAdmin(address newFactoryAdmin) external;\\r\\n    function setAcoPoolImplementation(address newAcoPoolImplementation) external;\\r\\n    function setAcoFactory(address newAcoFactory) external;\\r\\n    function setAcoFlashExercise(address newAcoFlashExercise) external;\\r\\n    function setChiToken(address newChiToken) external;\\r\\n    function setAcoPoolFee(uint256 newAcoPoolFee) external;\\r\\n    function setAcoPoolFeeDestination(address newAcoPoolFeeDestination) external;\\r\\n    function setAcoPoolPermission(address poolAdmin, bool newPermission) external;\\r\\n    function setAcoPoolStrategyPermission(address strategy, bool newPermission) external;\\r\\n    function setAcoPoolStrategy(address strategy, address[] calldata acoPools) external;\\r\\n    function setAcoPoolBaseVolatility(uint256[] calldata baseVolatilities, address[] calldata acoPools) external;\\r\\n}\"},\"IACOToken.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IACOToken is IERC20 {\\r\\n\\tfunction init(address _underlying, address _strikeAsset, bool _isCall, uint256 _strikePrice, uint256 _expiryTime, uint256 _acoFee, address payable _feeDestination, uint256 _maxExercisedAccounts) external;\\r\\n    function name() external view returns(string memory);\\r\\n    function symbol() external view returns(string memory);\\r\\n    function decimals() external view returns(uint8);\\r\\n    function underlying() external view returns (address);\\r\\n    function strikeAsset() external view returns (address);\\r\\n    function feeDestination() external view returns (address);\\r\\n    function isCall() external view returns (bool);\\r\\n    function strikePrice() external view returns (uint256);\\r\\n    function expiryTime() external view returns (uint256);\\r\\n    function totalCollateral() external view returns (uint256);\\r\\n    function acoFee() external view returns (uint256);\\r\\n\\tfunction maxExercisedAccounts() external view returns (uint256);\\r\\n    function underlyingSymbol() external view returns (string memory);\\r\\n    function strikeAssetSymbol() external view returns (string memory);\\r\\n    function underlyingDecimals() external view returns (uint8);\\r\\n    function strikeAssetDecimals() external view returns (uint8);\\r\\n    function currentCollateral(address account) external view returns(uint256);\\r\\n    function unassignableCollateral(address account) external view returns(uint256);\\r\\n    function assignableCollateral(address account) external view returns(uint256);\\r\\n    function currentCollateralizedTokens(address account) external view returns(uint256);\\r\\n    function unassignableTokens(address account) external view returns(uint256);\\r\\n    function assignableTokens(address account) external view returns(uint256);\\r\\n    function getCollateralAmount(uint256 tokenAmount) external view returns(uint256);\\r\\n    function getTokenAmount(uint256 collateralAmount) external view returns(uint256);\\r\\n    function getBaseExerciseData(uint256 tokenAmount) external view returns(address, uint256);\\r\\n    function numberOfAccountsWithCollateral() external view returns(uint256);\\r\\n    function getCollateralOnExercise(uint256 tokenAmount) external view returns(uint256, uint256);\\r\\n    function collateral() external view returns(address);\\r\\n    function mintPayable() external payable returns(uint256);\\r\\n    function mintToPayable(address account) external payable returns(uint256);\\r\\n    function mint(uint256 collateralAmount) external returns(uint256);\\r\\n    function mintTo(address account, uint256 collateralAmount) external returns(uint256);\\r\\n    function burn(uint256 tokenAmount) external returns(uint256);\\r\\n    function burnFrom(address account, uint256 tokenAmount) external returns(uint256);\\r\\n    function redeem() external returns(uint256);\\r\\n    function redeemFrom(address account) external returns(uint256);\\r\\n    function exercise(uint256 tokenAmount, uint256 salt) external payable returns(uint256);\\r\\n    function exerciseFrom(address account, uint256 tokenAmount, uint256 salt) external payable returns(uint256);\\r\\n    function exerciseAccounts(uint256 tokenAmount, address[] calldata accounts) external payable returns(uint256);\\r\\n    function exerciseAccountsFrom(address account, uint256 tokenAmount, address[] calldata accounts) external payable returns(uint256);\\r\\n}\"},\"IACOVault.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./IController.sol\\u0027;\\r\\nimport \\u0027./IACOPoolFactory.sol\\u0027;\\r\\nimport \\u0027./IACOFlashExercise.sol\\u0027;\\r\\nimport \\u0027./IACOFactory.sol\\u0027;\\r\\nimport \\u0027./IACOAssetConverterHelper.sol\\u0027;\\r\\nimport \\u0027./IACOToken.sol\\u0027;\\r\\nimport \\u0027./IACOPool.sol\\u0027;\\r\\nimport \\u0027./IControlled.sol\\u0027;\\r\\n\\r\\ninterface IACOVault is IControlled {\\r\\n    struct VaultInitData {\\r\\n        address acoFactory;\\r\\n        address acoPoolFactory;\\r\\n        address token;\\r\\n        address assetConverter;\\r\\n        address acoFlashExercise;\\r\\n        uint256 minPercentageToKeep;\\r\\n        address currentAcoToken;\\r\\n        address acoPool;\\r\\n        uint256 tolerancePriceAbove;\\r\\n        uint256 tolerancePriceBelow;\\r\\n        uint256 minExpiration;\\r\\n        uint256 maxExpiration;\\r\\n        uint256 minTimeToExercise;\\r\\n        uint256 exerciseSlippage;\\r\\n        uint256 withdrawFee;\\r\\n    }\\r\\n        \\r\\n    struct AcoData {\\r\\n        uint256 amount;\\r\\n        uint256 profit;\\r\\n        uint256 exercised;\\r\\n        uint256 tokenPerShare;\\r\\n        uint256 withdrawnNormalizedAmount;\\r\\n        uint256 withdrawnProfit;\\r\\n        uint256 index;\\r\\n        bool initialized;\\r\\n    }\\r\\n    \\r\\n    struct AccountAcoData {\\r\\n        uint256 tokenPerShare;\\r\\n        uint256 tokenAccumulated;\\r\\n        uint256 index;\\r\\n        bool initialized;\\r\\n    }\\r\\n    \\r\\n    struct AccountData {\\r\\n        mapping(address =\\u003e AccountAcoData) dataOnDeposit;\\r\\n        address[] acoTokensOnDeposit;\\r\\n    }\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n    function decimals() external view returns(uint8);\\r\\n    function totalSupply() external view returns(uint256);\\r\\n    function balanceOf(address account) external view returns(uint256);\\r\\n    function acoPoolFactory() external view returns(IACOPoolFactory);\\r\\n    function acoFactory() external view returns(IACOFactory);\\r\\n    function controller() external view returns(IController);\\r\\n    function assetConverter() external view returns(IACOAssetConverterHelper);\\r\\n    function acoFlashExercise() external view returns(IACOFlashExercise);\\r\\n    function acoPool() external view returns(IACOPool);\\r\\n    function currentAcoToken() external view returns(IACOToken);\\r\\n    function acoTokens(uint256 index) external view returns(address);\\r\\n    function validAcos(uint256 index) external view returns(address);\\r\\n    function minPercentageToKeep() external view returns(uint256);\\r\\n    function tolerancePriceAbove() external view returns(uint256);\\r\\n    function tolerancePriceBelow() external view returns(uint256);\\r\\n    function minExpiration() external view returns(uint256);\\r\\n    function maxExpiration() external view returns(uint256);\\r\\n    function minTimeToExercise() external view returns(uint256);\\r\\n    function exerciseSlippage() external view returns(uint256);\\r\\n    function withdrawFee() external view returns(uint256);\\r\\n    function getAcoData(address acoToken) external view returns(AcoData memory);\\r\\n    function getAccountAcoDataCount(address account) external view returns(uint256);\\r\\n    function getAccountAcoDataByIndex(address account, uint256 index) external view returns(address, AccountAcoData memory);\\r\\n    function getAccountAcoDataByAco(address account, address acoToken) external view returns(AccountAcoData memory);\\r\\n    function getAccountSituation(address account, uint256 shares) external view returns(uint256, uint256, address[] memory, uint256[] memory);\\r\\n    function setController(address newController) external;\\r\\n    function setAssetConverter(address newAssetConverter) external;\\r\\n    function setAcoFlashExercise(address newAcoFlashExercise) external;\\r\\n    function setMinPercentageToKeep(uint256 newMinPercentageToKeep) external;\\r\\n    function setTolerancePriceBelow(uint256 newTolerancePriceBelow) external;\\r\\n    function setTolerancePriceAbove(uint256 newTolerancePriceAbove) external;\\r\\n    function setMinExpiration(uint256 newMinExpiration) external;\\r\\n    function setMaxExpiration(uint256 newMaxExpiration) external;\\r\\n    function setMinTimeToExercise(uint256 newMinTimeToExercise) external;\\r\\n    function setExerciseSlippage(uint256 newMinTimeToExercise) external;\\r\\n    function setWithdrawFee(uint256 newWithdrawFee) external;\\r\\n    function setOperator(address operator, bool permission) external;\\r\\n    function setAcoToken(address newAcoToken, address newAcoPool) external;\\r\\n    function setAcoPool(address newAcoPool) external;\\r\\n    function balance() external view returns(uint256);\\r\\n    function available() external view returns(uint256);\\r\\n    function getPricePerFullShare() external view returns(uint256);\\r\\n    function numberOfAcoTokensNegotiated() external view returns(uint256);\\r\\n    function numberOfValidAcoTokens() external view returns(uint256);\\r\\n    function exerciseAco(address acoToken, uint256 acoAmount) external;\\r\\n    function deposit(uint256 amount) external;\\r\\n    function earn() external;\\r\\n    function withdraw(uint256 shares) external;\\r\\n    function setReward(uint256 acoTokenAmount, uint256 rewardAmount) external;\\r\\n    function skim(address account) external;\\r\\n    function setValidAcoTokens() external;\\r\\n}\"},\"IControlled.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IControlled {\\r\\n    function token() external view returns(address);\\r\\n    function withdrawStuckToken(address _token, address destination) external;\\r\\n}\"},\"IController.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IController {\\r\\n    function balanceOf(address vault) external view returns(uint256);\\r\\n    function actualAmount(address vault, uint256 amount) external view returns(uint256);\\r\\n    function earn(uint256 amount) external;\\r\\n    function withdraw(uint256 amount) external returns(uint256);\\r\\n    function sendFee(uint256 amount) external;\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Adapted from OpenZeppelin\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function init() internal {\\r\\n        require(_owner == address(0), \\\"Ownable: Contract initialized\\\");\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"acoFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acoPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetConverter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acoFlashExercise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToKeep\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentAcoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acoPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tolerancePriceAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tolerancePriceBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeToExercise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IACOVault.VaultInitData\",\"name\":\"initData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acoTokensOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIn\",\"type\":\"uint256\"}],\"name\":\"ExerciseAco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acoTokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"RewardAco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAcoFlashExercise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoFlashExercise\",\"type\":\"address\"}],\"name\":\"SetAcoFlashExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAcoPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoPool\",\"type\":\"address\"}],\"name\":\"SetAcoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAcoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoToken\",\"type\":\"address\"}],\"name\":\"SetAcoToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAssetConverter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetConverter\",\"type\":\"address\"}],\"name\":\"SetAssetConverter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldExerciseSlippage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newExerciseSlippage\",\"type\":\"uint256\"}],\"name\":\"SetExerciseSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMaxExpiration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxExpiration\",\"type\":\"uint256\"}],\"name\":\"SetMaxExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinExpiration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinExpiration\",\"type\":\"uint256\"}],\"name\":\"SetMinExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinPercentageToKeep\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinPercentageToKeep\",\"type\":\"uint256\"}],\"name\":\"SetMinPercentageToKeep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinTimeToExercise\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinTimeToExercise\",\"type\":\"uint256\"}],\"name\":\"SetMinTimeToExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousPermission\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldTolerancePriceAbove\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTolerancePriceAbove\",\"type\":\"uint256\"}],\"name\":\"SetTolerancePriceAbove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldTolerancePriceBelow\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTolerancePriceBelow\",\"type\":\"uint256\"}],\"name\":\"SetTolerancePriceBelow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acoFactory\",\"outputs\":[{\"internalType\":\"contract IACOFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoFlashExercise\",\"outputs\":[{\"internalType\":\"contract IACOFlashExercise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPool\",\"outputs\":[{\"internalType\":\"contract IACOPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolFactory\",\"outputs\":[{\"internalType\":\"contract IACOPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acoTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetConverter\",\"outputs\":[{\"internalType\":\"contract IACOAssetConverterHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAcoToken\",\"outputs\":[{\"internalType\":\"contract IACOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acoAmount\",\"type\":\"uint256\"}],\"name\":\"exerciseAco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exerciseSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"}],\"name\":\"getAccountAcoDataByAco\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAccumulated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct IACOVault.AccountAcoData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountAcoDataByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAccumulated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct IACOVault.AccountAcoData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountAcoDataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getAccountSituation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"}],\"name\":\"getAcoData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exercised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnNormalizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct IACOVault.AcoData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPercentageToKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeToExercise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAcoTokensNegotiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfValidAcoTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoFlashExercise\",\"type\":\"address\"}],\"name\":\"setAcoFlashExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoPool\",\"type\":\"address\"}],\"name\":\"setAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAcoPool\",\"type\":\"address\"}],\"name\":\"setAcoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetConverter\",\"type\":\"address\"}],\"name\":\"setAssetConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExerciseSlippage\",\"type\":\"uint256\"}],\"name\":\"setExerciseSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxExpiration\",\"type\":\"uint256\"}],\"name\":\"setMaxExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinExpiration\",\"type\":\"uint256\"}],\"name\":\"setMinExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPercentageToKeep\",\"type\":\"uint256\"}],\"name\":\"setMinPercentageToKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTimeToExercise\",\"type\":\"uint256\"}],\"name\":\"setMinTimeToExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"acoTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTolerancePriceAbove\",\"type\":\"uint256\"}],\"name\":\"setTolerancePriceAbove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTolerancePriceBelow\",\"type\":\"uint256\"}],\"name\":\"setTolerancePriceBelow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setValidAcoTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerancePriceAbove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerancePriceBelow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validAcos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ACOVault","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000176b98ab38d1ae8ff3f30bf07f9b93e26f559c170000000000000000000000004db1d076ed0a3f2bb9b105d96edfb1671916f6ca000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000008e17731d424887b3f1f488857b68501b3b1c279b0000000000000000000000008992eea8b6d388af1df04800e69e66b2d87998950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd1803edf27e4715e1f42f0511687ef0e8e19302000000000000000000000000ae7f0e3c47dddf8fa5d688fb7b69073d1a4919b1000000000000000000000000000000000000000000000000000000000000119400000000000000000000000000000000000000000000000000000000000011940000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000a8c000000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000000c8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://93076c4a7fd20765e283953107d7d586af7103f4c94a04f6281034bef2b67035"}]}