{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.5;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) + value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) - value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ISushiswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\ninterface IComptroller {\r\n    function enterMarkets(address[] memory cTokens) external;\r\n    function getAllMarkets() external view returns (address[] memory);\r\n}\r\n\r\ninterface cyToken {\r\n    function borrow(uint) external;\r\n    function mint(uint) external;\r\n    function redeem(uint) external;\r\n    function redeemUnderlying(uint) external;\r\n    function repayBorrow(uint) external;\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ncontract xVault {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address owner;\r\n    \r\n    IComptroller constant COMPTROLLER = IComptroller(0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258);\r\n    address constant FACTORY = address(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    \r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                FACTORY,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\r\n            )))));\r\n    }\r\n    \r\n    function enterMarkets() public {\r\n        COMPTROLLER.enterMarkets(COMPTROLLER.getAllMarkets());\r\n    }\r\n    \r\n    function approveMarkets() public {\r\n        address[] memory _markets = COMPTROLLER.getAllMarkets();\r\n        for (uint i = 0; i < _markets.length; i++) {\r\n            address _underlying = cyToken(_markets[i]).underlying();\r\n            IERC20(_underlying).safeApprove(_markets[i], uint(-1));\r\n        }\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        enterMarkets();\r\n        //approveMarkets();\r\n    }\r\n    \r\n    function withdraw(address token, uint amount) external {\r\n        require(owner == msg.sender);\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n    }\r\n    \r\n    function open(address cylong, address long, uint lamt, address cyshort, address short, uint samt, address cymargin, uint mamt) external {\r\n        require(owner == msg.sender);\r\n        IERC20(cymargin).safeTransferFrom(msg.sender, address(this), mamt);\r\n        _borrow(cylong, long, lamt, cyshort, short, samt);\r\n    }\r\n    \r\n    function close(address cyrepay, address repay, uint ramt, address cywithdraw, address uwithdraw, uint wamt) external {\r\n        require(owner == msg.sender);\r\n        address tokenB = repay == WETH ? uwithdraw : WETH;\r\n        ISushiswapV2Pair _pairFrom = ISushiswapV2Pair(pairFor(repay, tokenB));\r\n        (uint amount0, uint amount1) = repay < tokenB ? (ramt, uint(0)) : (uint(0), ramt);\r\n        _pairFrom.swap(amount0, amount1, address(this), abi.encode(cyrepay, repay, ramt, address(_pairFrom), cywithdraw, uwithdraw, wamt, false));\r\n    }\r\n    \r\n    function _borrow(address cylong, address long, uint lamt, address cyshort, address short, uint samt) internal {\r\n        (uint amount0, uint amount1) = long < WETH ? (lamt, uint(0)) : (uint(0), lamt);\r\n        address tokenB = long == WETH ? short : WETH;\r\n        ISushiswapV2Pair _pairFrom = ISushiswapV2Pair(pairFor(long, tokenB));\r\n        _pairFrom.swap(amount0, amount1, address(this), abi.encode(cylong, long, lamt, address(_pairFrom), cyshort, short, samt, true));\r\n    }\r\n    \r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        require(sender == address(this));\r\n        (address _cylong, address _long, uint _lamt, address _pairFrom, address _cyshort, address _short, uint _samt, bool _pos) = abi.decode(data, (address, address, uint, address, address, address, uint, bool));\r\n        if (_pos) {\r\n            _open(_cylong, _lamt, _pairFrom, amount0, _short, _long, _samt, _cyshort);\r\n        } else {\r\n            _close(_cylong, _lamt, _pairFrom, amount0, _short, _long, _samt, _cyshort);\r\n        }\r\n    }\r\n    \r\n    function _close(address _cyrepay, uint _ramt, address _pairFrom, uint _amount0, address _withdraw, address _repay, uint _wamt, address _cywithdraw) internal {\r\n        IERC20(_repay).safeApprove(_cyrepay, 0);\r\n        IERC20(_repay).safeApprove(_cyrepay, uint(-1));\r\n        cyToken(_cyrepay).repayBorrow(_ramt);\r\n        \r\n        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(_pairFrom).getReserves();\r\n        (uint reserveIn, uint reserveOut) = _amount0 > 0 ? (reserve1, reserve0) : (reserve0, reserve1);\r\n        \r\n        uint _minRepay = _getAmountIn(_ramt, reserveIn, reserveOut);\r\n        \r\n        if (_withdraw == WETH || _repay == WETH) {\r\n            require(_minRepay <= _wamt);\r\n            cyToken(_cywithdraw).redeemUnderlying(_minRepay);\r\n            IERC20(_withdraw).safeTransfer(address(_pairFrom), _minRepay);\r\n        } else {\r\n            _crossClose(_withdraw, _minRepay, _wamt, _cywithdraw, address(_pairFrom));\r\n        }\r\n    }\r\n    \r\n    function _open(address _cylong, uint _lamt, address _pairFrom, uint _amount0, address _short, address _long, uint _samt, address _cyshort) internal {\r\n        IERC20(_long).safeApprove(_cylong, 0);\r\n        IERC20(_long).safeApprove(_cylong, uint(-1));\r\n        cyToken(_cylong).mint(_lamt);\r\n        \r\n        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(_pairFrom).getReserves();\r\n        (uint reserveIn, uint reserveOut) = _amount0 > 0 ? (reserve1, reserve0) : (reserve0, reserve1);\r\n        \r\n        uint _minRepay = _getAmountIn(_lamt, reserveIn, reserveOut);\r\n        \r\n        if (_short == WETH || _long == WETH) {\r\n            require(_minRepay <= _samt);\r\n            cyToken(_cyshort).borrow(_minRepay);\r\n            IERC20(_short).safeTransfer(address(_pairFrom), _minRepay);\r\n        } else {\r\n            _cross(_short, _minRepay, _samt, _cyshort, address(_pairFrom));\r\n        }\r\n    }\r\n    \r\n    function _getShortFall(address _short, ISushiswapV2Pair _pairTo, uint _minWETHRepay) internal view returns (address, uint) {\r\n        (address token0,) = _short < WETH ? (_short, WETH) : (WETH, _short);\r\n        (uint reserve0, uint reserve1,) = _pairTo.getReserves();\r\n        (uint reserveIn, uint reserveOut) = token0 == _short ? (reserve0, reserve1) : (reserve1, reserve0);\r\n        return (token0, _getAmountIn(_minWETHRepay, reserveIn, reserveOut));\r\n    }\r\n    \r\n    function _cross(address _short, uint _minWETHRepay, uint _samt, address _cyshort, address _pairFrom) internal {\r\n        ISushiswapV2Pair _pairTo = ISushiswapV2Pair(pairFor(_short, WETH));\r\n        (address token0, uint _shortPay) = _getShortFall(_short, _pairTo, _minWETHRepay);\r\n        require(_shortPay <= _samt);\r\n        cyToken(_cyshort).borrow(_shortPay);\r\n        (uint amount0, uint amount1) = token0 == _short ? (uint(0), _minWETHRepay) : (_minWETHRepay, uint(0));\r\n        IERC20(_short).safeTransfer(address(_pairTo), _shortPay);\r\n        _pairTo.swap(amount0, amount1, _pairFrom, new bytes(0));\r\n    }\r\n    \r\n    function _crossClose(address _withdraw, uint _minWETHRepay, uint _wamt, address _cywithdraw, address _pairFrom) internal {\r\n        ISushiswapV2Pair _pairTo = ISushiswapV2Pair(pairFor(_withdraw, WETH));\r\n        (address token0, uint _shortPay) = _getShortFall(_withdraw, _pairTo, _minWETHRepay);\r\n        require(_shortPay <= _wamt);\r\n        cyToken(_cywithdraw).redeemUnderlying(_shortPay);\r\n        (uint amount0, uint amount1) = token0 == _withdraw ? (uint(0), _minWETHRepay) : (_minWETHRepay, uint(0));\r\n        IERC20(_withdraw).safeTransfer(address(_pairTo), _shortPay);\r\n        _pairTo.swap(amount0, amount1, _pairFrom, new bytes(0));\r\n    }\r\n    \r\n    function execute(address to, uint value, bytes calldata data) external returns (bool, bytes memory) {\r\n        require(owner == msg.sender);\r\n        (bool success, bytes memory result) = to.call{value:value}(data);\r\n        \r\n        return (success, result);\r\n    }\r\n\r\n    function _getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        uint numerator = reserveIn * amountOut * 1000;\r\n        uint denominator = (reserveOut - amountOut) * 997;\r\n        amountIn = (numerator / denominator) + 1;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"approveMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyrepay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ramt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cywithdraw\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uwithdraw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wamt\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cylong\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"long\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lamt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cyshort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"samt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cymargin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mamt\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"xVault","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad2c0d93c1d2d852063d707caa5755b40c42944a5ac6c9159dff33156cff8bfa"}]}