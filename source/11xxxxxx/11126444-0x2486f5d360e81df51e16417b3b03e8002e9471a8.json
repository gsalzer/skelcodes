{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract LynStaking is Ownable {\r\n    using SafeMath for uint256;\r\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    bytes4 private constant TRANSFER_FROM_SELECTOR = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    bytes4 private constant BALANCE_OF_SELECTOR = bytes4(keccak256(bytes('balanceOf(address)')));\r\n\r\n    uint256 private marketPrice;\r\n    uint256 private lockTime;\r\n    uint256 private startDepositTime;\r\n\r\n    uint256 private dayInterestRate;\r\n    uint256 private secondInterestRate;\r\n    uint256 private PERCENT_DECIMAL = 1e18;\r\n    uint256 private DECIMAL = 1e18;\r\n\r\n    uint256 private totalFund;\r\n\r\n    uint256 public totalDeposit;\r\n\r\n    address public depositToken;\r\n    address public rewardToken;\r\n\r\n    bool private stakable;\r\n\r\n    mapping(address=>uint256) capitals;\r\n    mapping(address=>uint256) lastDepositTime;\r\n    mapping(address=>uint256) lastActivityTime;\r\n    mapping(address=>uint256) accumulationInterest;\r\n\r\n    event DepositStart();\r\n    event DepositStop();\r\n    event UpdatePrice(uint256 newPrice);\r\n    event UpdateInterestRate(uint256 newRate);\r\n    event AddFund(uint256 amount);\r\n\r\n    event Deposit(address indexed staker, uint256 amount);\r\n    event Withdraw(address indexed staker, uint256 amount);\r\n    event Claim(address indexed staker, uint256 amount);\r\n\r\n    modifier onlyStakable() {\r\n        require(stakable, \"Not start staking yet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * IMPORTANT\r\n     * _dayInterestRate\r\n     * Since not supporting float point number of Solidity the input of this function should be multiplied by 10^18.\r\n     * Eg:\r\n     *   1% = 1/100 * 10^18 = 10000000000000000\r\n     *   1.2% = 1.2/100 * 10^18 = 12000000000000000\r\n     *   0.00556% = 0.00556/100 * 10^18 = 55600000000000\r\n     * Use this tool https://keisan.casio.com/calculator to calculate the rate\r\n     */\r\n    constructor(\r\n        address _depositTokenAddr,\r\n        address _rewardTokenAddr,\r\n        uint256 _lockTime,\r\n        uint256 _dayInterestRate\r\n    ) public {\r\n        depositToken = _depositTokenAddr;\r\n        rewardToken = _rewardTokenAddr;\r\n        lockTime = _lockTime;\r\n        dayInterestRate = _dayInterestRate;\r\n        secondInterestRate = _dayInterestRate.div(86400);\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    // OPERATION FUNCTIONS\r\n    //////////////////////////////////////\r\n    function depositStart() external onlyOwner() {\r\n        stakable = true;\r\n        emit DepositStart();\r\n    }\r\n\r\n    function depositStop() external onlyOwner() {\r\n        stakable = false;\r\n        emit DepositStop();\r\n    }\r\n\r\n    /**\r\n     * The input must be multiplied by 10^decimals\r\n     */\r\n    function updateMarketPrice(uint256 _newPrice) external onlyOwner() {\r\n        marketPrice = _newPrice;\r\n        emit UpdatePrice(_newPrice);\r\n    }\r\n\r\n    // Add fund to contract\r\n    function adminFund(uint256 _amount) external onlyOwner() {\r\n        _safeTransferFrom(rewardToken, msg.sender, address(this), _amount);\r\n        totalFund = totalFund.add(_amount);\r\n        emit AddFund(_amount);\r\n    }\r\n\r\n    // Send all reward token to owner's address in urgent case\r\n    function drain() external onlyOwner() {\r\n        uint256 balance = _getBalanceOf(rewardToken, address(this));\r\n        _safeTransfer(rewardToken, msg.sender, balance);\r\n    }\r\n\r\n    // Transfer USDT to owner address\r\n    function transfer(uint256 _amount) external onlyOwner() {\r\n        _safeTransfer(depositToken, msg.sender, _amount);\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    // PUBLIC FUNCTIONS\r\n    //////////////////////////////////////\r\n\r\n    function deposit(uint256 _amount) onlyStakable() external {\r\n        _safeTransferFrom(depositToken, msg.sender, address(this), _amount);\r\n        uint256 interest = _estimateInterest(msg.sender);\r\n        accumulationInterest[msg.sender] = accumulationInterest[msg.sender].add(interest);\r\n\r\n        capitals[msg.sender] = capitals[msg.sender].add(_amount);\r\n        lastDepositTime[msg.sender] = block.timestamp;\r\n        lastActivityTime[msg.sender] = block.timestamp;\r\n\r\n        totalDeposit = totalDeposit.add(_amount);\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function claimReward() external {\r\n        uint256 reward = checkLynReward(msg.sender);\r\n        require(reward > 0, \"Small reward\");\r\n\r\n        lastActivityTime[msg.sender] = block.timestamp;\r\n        accumulationInterest[msg.sender] = 0;\r\n\r\n        _safeTransfer(rewardToken, msg.sender, reward);\r\n        emit Claim(msg.sender, reward);\r\n    }\r\n\r\n    // Withdraw all deposit + reward\r\n    function withdraw() external {\r\n        require(lastDepositTime[msg.sender].add(lockTime) <= block.timestamp, \"Not expired\");\r\n\r\n        uint256 reward = checkLynReward(msg.sender);\r\n        lastActivityTime[msg.sender] = block.timestamp;\r\n        accumulationInterest[msg.sender] = 0;\r\n\r\n        totalDeposit = totalDeposit.sub(capitals[msg.sender]);\r\n\r\n        uint256 returnAmount = capitals[msg.sender].mul(DECIMAL).div(marketPrice);\r\n        capitals[msg.sender] = 0;\r\n\r\n        returnAmount = returnAmount.add(reward);\r\n\r\n        _safeTransfer(rewardToken, msg.sender, returnAmount);\r\n        emit Withdraw(msg.sender, returnAmount);\r\n    }\r\n\r\n    function _estimateInterest(address _staker) internal view returns (uint256) {\r\n        uint256 d = block.timestamp.sub(lastActivityTime[_staker]);\r\n        uint256 interest = _caculateInterest(capitals[_staker], d);\r\n        return interest.add(accumulationInterest[_staker]);\r\n    }\r\n\r\n    function _caculateInterest(uint256 capital, uint d) internal view returns (uint256) {\r\n        return capital.mul(d).mul(secondInterestRate).div(PERCENT_DECIMAL).mul(DECIMAL);\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    // GET FUNCTIONS\r\n    //////////////////////////////////////\r\n    function checkUserCapital(address _address) public view returns (uint256){\r\n        return capitals[_address];\r\n    }\r\n\r\n    function checkUserCapitalLyn(address _address) public view returns (uint256){\r\n        return capitals[_address].mul(DECIMAL).div(marketPrice);\r\n    }\r\n\r\n    function checkLynReward(address _staker) public view returns (uint256) {\r\n        return _estimateInterest(_staker).div(marketPrice);\r\n    }\r\n\r\n    function checkReward(address _staker) public view returns (uint256) {\r\n        return _estimateInterest(_staker).div(DECIMAL);\r\n    }\r\n\r\n    function checkDepositStart() public view returns (bool) {\r\n        return stakable;\r\n    }\r\n\r\n    function checkPrice() public view returns(uint256) {\r\n        return marketPrice;\r\n    }\r\n\r\n    function checkStakeRateYear() public view returns(uint256) {\r\n        return dayInterestRate.mul(365);\r\n    }\r\n\r\n    function checkStakeRateDay() public view returns(uint256) {\r\n        return dayInterestRate;\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    // UTILITY FUNCTIONS\r\n    //////////////////////////////////////\r\n\r\n    // ERC20:\r\n    // Functions `transfer`, `transferFrom` should return bool\r\n    // but some token returns void instead of following the standard\r\n    // Since, we need to accept void return as a successful transfer\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address token, address from, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_FROM_SELECTOR, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function _getBalanceOf(address token, address account) private returns(uint256) {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(BALANCE_OF_SELECTOR, account));\r\n        require(success, 'BALACE_OF_FAILED');\r\n        uint256 balance = abi.decode(data,(uint256));\r\n        return balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayInterestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"UpdateInterestRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDepositStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"checkLynReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkStakeRateDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkStakeRateYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUserCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUserCapitalLyn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateMarketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LynStaking","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000b0b1685f55843d03739c7d9b0a230f1b7dcf03d50000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000005d392416e8000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fb866dc95587078ad321d2ec660374dbee55cf8279b7ebc5c11fea7cef289a9b"}]}