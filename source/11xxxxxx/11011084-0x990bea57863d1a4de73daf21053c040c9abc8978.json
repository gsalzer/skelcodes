{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ncontract remoteConfiguration\r\n{\r\n    \r\n    //The keyword \"public\" makes those variables readable from outside and inside.\r\n    //The address type is a 160-bit value that doesn't allow any arithmetic operations\r\n    address public manufacturer;\r\n    \r\n    //This declares a new complex type which will be used for variables later. It will represent a single device.\r\n    struct info {\r\n        address owner;\r\n        //uint256[] configurations;\r\n        uint256 configurations0;\r\n        uint256 configurations1;\r\n        uint256 configurations2;\r\n    }\r\n    \r\n    //The type maps unsigned integers to info. Mappings can be seen as hash tables which are virtually initialized such that\r\n    //every possible key exists and is mapped to a value whose byte-representation is all zeros.\r\n    mapping (uint => info) public idInfo;\r\n    \r\n    uint256 currentConfig;\r\n    uint256 configStartTime;\r\n    uint256 configPeriod;\r\n    bool tempUpdated;\r\n    uint256 lastTempUpdate;\r\n\r\n    modifier onlyManufacturer()\r\n    {\r\n        require(\r\n            msg.sender == manufacturer,\r\n            \"Only the mamanufacturer can register a new device.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    constructor() public payable \r\n    {\r\n        manufacturer = msg.sender;\r\n        //manufacturer = 0xFAFC4C0769f69Fc583A09380bD6Ee3136Eb4754C;\r\n        //manufacturer = _manufacturer;\r\n        //tempUpdated = true;\r\n        //lastTempUpdate = block.number;\r\n    }\r\n\r\n    function registerDevice(uint _identifier, uint256 config0, uint256 config1, uint256 config2) public payable onlyManufacturer {\r\n        idInfo[_identifier].owner = msg.sender;\r\n        idInfo[_identifier].configurations0 = config0; //this is the encrypted default configuration\r\n        idInfo[_identifier].configurations1 = config1;\r\n        idInfo[_identifier].configurations2 = config2;\r\n    }\r\n    \r\n    function transferOwnership(uint _identifier, address buyer) public {\r\n\t\trequire(\r\n            msg.sender == idInfo[_identifier].owner,\r\n            \"Only the device owner can transfer the ownership.\"\r\n        );\r\n        idInfo[_identifier].owner = buyer;\r\n        \r\n    }\r\n    \r\n    function upgradeConfiguration(uint _identifier, uint256 requestedConfig, uint256 configTimer) public payable \r\n    {\r\n        require(\r\n            msg.sender == idInfo[_identifier].owner,\r\n            \"Only the device owner can request for configuration upgrade.\"\r\n        );\r\n        \r\n        if( requestedConfig == 1 ){\r\n            if (msg.value < 10 szabo){ \r\n                revert(); \r\n            } else {\r\n                currentConfig = idInfo[_identifier].configurations1;\r\n            }\r\n        } else if( requestedConfig == 2 ){\r\n            if (msg.value < 20 szabo){ \r\n                revert(); \r\n            } else {\r\n                currentConfig = idInfo[_identifier].configurations2;\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n        configStartTime = block.timestamp;\r\n        configPeriod = configTimer;\r\n    }\r\n    \r\n        \r\n    function queryConfiguration() public view returns (uint256, uint256)\r\n    {\r\n        if (block.timestamp - configStartTime < configPeriod) {\r\n            return (currentConfig, configPeriod);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function transferContractValue () public payable onlyManufacturer {\r\n        uint256 transferAmount = address(this).balance - 1 finney;\r\n        address(msg.sender).transfer(transferAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configurations0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configurations1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configurations2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manufacturer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"config0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"config1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"config2\",\"type\":\"uint256\"}],\"name\":\"registerDevice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferContractValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedConfig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configTimer\",\"type\":\"uint256\"}],\"name\":\"upgradeConfiguration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"remoteConfiguration","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a662b31969f6139907bd58e5a69325178a4210718440ec8b49a35c0e90d6e8a9"}]}