{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n//True POZ Token will have this, \r\ninterface IPOZBenefit {\r\n    function IsPOZHolder(address _Subject) external view returns(bool);\r\n}// stakeOf(address account) public view returns (uint256)\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\ninterface IStaking {\r\n    function stakeOf(address account) public view returns (uint256) ;\r\n}/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Benefit is IPOZBenefit, Ownable {\r\n    constructor() public {\r\n        MinHold = 1;\r\n        IsToken = true;\r\n    }\r\n\r\n    bool public IsToken;\r\n    address public TokenAddress;\r\n    address public POZBenefit_Address;\r\n    uint256 public MinHold;\r\n\r\n    function SetMinHold (uint256 _MinHold) public onlyOwner {\r\n        require(_MinHold>0,'Must be more then 0');\r\n        MinHold = _MinHold;\r\n    }\r\n\r\n    function SwapIsToken() public onlyOwner {\r\n        IsToken = !IsToken;\r\n    }\r\n\r\n    function SetTokenAddress(address _New_Address) public onlyOwner {\r\n        TokenAddress = _New_Address;\r\n    }\r\n\r\n    function SetPOZBenefitAddress(address _New_Address) public onlyOwner {\r\n        POZBenefit_Address = _New_Address;\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function CheckStaking(address _Subject) internal view returns (uint256)\r\n    {\r\n       return IStaking(TokenAddress).stakeOf(_Subject);\r\n    }\r\n\r\n    function IsPOZHolder(address _Subject) external view returns (bool) {\r\n        return IsPOZInvestor(_Subject);\r\n    }\r\n\r\n    function IsPOZInvestor(address _investor) internal view returns (bool) {\r\n        if (TokenAddress == address(0x0) && POZBenefit_Address == address(0x0))\r\n            return false; // Last file in line, no change result\r\n        return ((TokenAddress != address(0x0) &&\r\n           (IsToken? CheckBalance(TokenAddress, _investor) :CheckStaking(_investor)) >= MinHold) ||\r\n            (POZBenefit_Address != address(0x0) &&\r\n                IPOZBenefit(POZBenefit_Address).IsPOZHolder(_investor)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_New_Address\",\"type\":\"address\"}],\"name\":\"SetTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SwapIsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_New_Address\",\"type\":\"address\"}],\"name\":\"SetPOZBenefitAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Subject\",\"type\":\"address\"}],\"name\":\"IsPOZHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinHold\",\"type\":\"uint256\"}],\"name\":\"SetMinHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POZBenefit_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Benefit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e8092ff8c9538d145b6adbb771cb1af29cfecfa58eea65a31811ae82a5f1b7fe"}]}