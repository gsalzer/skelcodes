{"status":"1","message":"OK","result":[{"SourceCode":"// File: @axie/contract-library/contracts/token/erc20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ninterface IERC20 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function totalSupply() external view returns (uint256 _supply);\r\n  function balanceOf(address _owner) external view returns (uint256 _balance);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool _success);\r\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool _success);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n}\r\n\r\n// File: @axie/contract-library/contracts/access/HasAdmin.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract HasAdmin {\r\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\r\n  event AdminRemoved(address indexed _oldAdmin);\r\n\r\n  address public admin;\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    admin = msg.sender;\r\n    emit AdminChanged(address(0), admin);\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin) external onlyAdmin {\r\n    require(_newAdmin != address(0));\r\n    emit AdminChanged(admin, _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function removeAdmin() external onlyAdmin {\r\n    emit AdminRemoved(admin);\r\n    admin = address(0);\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/ownership/Withdrawable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\ncontract Withdrawable is HasAdmin {\r\n  function withdrawEther() external onlyAdmin {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawToken(IERC20 _token) external onlyAdmin {\r\n    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\r\n  }\r\n}\r\n\r\n// File: IMerkleDistributor.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n// Allows anyone to claim a token if they exist in a merkle root.\r\ninterface IMerkleDistributor {\r\n    // Returns the address of the token distributed by this contract.\r\n    function token() external view returns (address);\r\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\r\n    function merkleRoot() external view returns (bytes32);\r\n    // Returns true if the index has been marked claimed.\r\n    function claimed(address account) external view returns (bool);\r\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\r\n\r\n    // This event is triggered whenever a call to #claim succeeds.\r\n    event Claimed(uint256 index, address account, uint256 amount);\r\n}\r\n\r\n// File: MerkleProof.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n// File: MerkleDistributor.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MerkleDistributor is IMerkleDistributor, Withdrawable {\r\n    address public token;\r\n    bytes32 public merkleRoot;\r\n\r\n    mapping(address => bool) public claimed;\r\n\r\n    constructor(address token_, bytes32 merkleRoot_) public {\r\n        token = token_;\r\n        merkleRoot = merkleRoot_;\r\n    }\r\n\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external {\r\n        require(!claimed[account], 'MerkleDistributor: Already claimed.');\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\r\n\r\n        // Mark it claimed and send the token.\r\n        claimed[account] = true;\r\n        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\r\n\r\n        emit Claimed(index, account, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MerkleDistributor","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5d669627376ebd411e34b98f19c868c8aba5ada3a78c75350e7af623db87df04a4213e154a5b61051f3d8185bd0d7cf1bb86c18","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1cb42c0b80dcb94b2c46b89aa89a862d671f3e6f336b6066866c021b96ab09b6"}]}