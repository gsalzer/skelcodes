{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IApi3Token is IERC20 {\r\n    event MinterStatusUpdated(\r\n        address indexed minterAddress,\r\n        bool minterStatus\r\n        );\r\n\r\n    event BurnerStatusUpdated(\r\n        address indexed burnerAddress,\r\n        bool burnerStatus\r\n        );\r\n\r\n    function updateMinterStatus(\r\n        address minterAddress,\r\n        bool minterStatus\r\n        )\r\n        external;\r\n\r\n    function updateBurnerStatus(bool burnerStatus)\r\n        external;\r\n\r\n    function mint(\r\n        address account,\r\n        uint256 amount\r\n        )\r\n        external;\r\n\r\n    function burn(uint256 amount)\r\n        external;\r\n\r\n    function getMinterStatus(address minterAddress)\r\n        external\r\n        view\r\n        returns(bool minterStatus);\r\n\r\n    function getBurnerStatus(address burnerAddress)\r\n        external\r\n        view\r\n        returns(bool burnerStatus);\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IApi3State.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IApi3State {\r\n    enum ClaimStatus { Pending, Accepted, Denied }\r\n\r\n    event InflationManagerUpdated(address inflationManagerAddress);\r\n    event ClaimsManagerUpdated(address claimsManagerAddress);\r\n    event RewardVestingPeriodUpdated(uint256 rewardVestingPeriod);\r\n    event UnpoolRequestCooldownUpdated(uint256 unpoolRequestCooldown);\r\n    event UnpoolWaitingPeriodUpdated(uint256 unpoolWaitingPeriod);\r\n\r\n    function updateInflationManager(address inflationManagerAddress)\r\n        external;\r\n\r\n    function updateClaimsManager(address claimsManagerAddress)\r\n        external;\r\n\r\n    function updateRewardVestingPeriod(uint256 _rewardVestingPeriod)\r\n        external;\r\n\r\n    function updateUnpoolRequestCooldown(uint256 _unpoolRequestCooldown)\r\n        external;\r\n\r\n    function updateUnpoolWaitingPeriod(uint256 _unpoolWaitingPeriod)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IEpochUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IEpochUtils is IApi3State {\r\n    function getCurrentEpochIndex()\r\n        external\r\n        view\r\n        returns(uint256 currentEpochIndex);\r\n\r\n    function getEpochIndex(uint256 timestamp)\r\n        external\r\n        view\r\n        returns(uint256 epochIndex);\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IGetterUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IGetterUtils is IEpochUtils {\r\n    function getPooled(address userAddress)\r\n        external\r\n        view\r\n        returns(uint256 pooled);\r\n\r\n    function getVotingPower(\r\n        address delegate,\r\n        uint256 timestamp\r\n        )\r\n        external\r\n        view\r\n        returns(uint256 votingPower);\r\n\r\n    function getTotalRealPooled()\r\n        external\r\n        view\r\n        returns(uint256 totalRealPooled);\r\n\r\n    function getBalance(address userAddress)\r\n        external\r\n        view\r\n        returns(uint256 balance);\r\n\r\n    function getShare(address userAddress)\r\n        external\r\n        view\r\n        returns(uint256 share);\r\n\r\n    function getUnpoolRequestEpoch(address userAddress)\r\n        external\r\n        view\r\n        returns(uint256 unpoolRequestEpoch);\r\n\r\n    function getTotalStaked(uint256 epochIndex)\r\n        external\r\n        view\r\n        returns(uint256 totalStaked);\r\n\r\n    function getStaked(\r\n        address userAddress,\r\n        uint256 epochIndex\r\n        )\r\n        external\r\n        view\r\n        returns(uint256 staked);\r\n\r\n    function getDelegate(address userAddress)\r\n        external\r\n        view\r\n        returns(address delegate);\r\n\r\n    function getDelegated(\r\n        address delegate,\r\n        uint256 epochIndex\r\n        )\r\n        external\r\n        view\r\n        returns(uint256 delegated);\r\n\r\n    function getVestedRewards(uint256 epochIndex)\r\n        external\r\n        view\r\n        returns(uint256 vestedRewards);\r\n\r\n    function getUnpaidVestedRewards(uint256 epochIndex)\r\n        external\r\n        view\r\n        returns(uint256 unpaidVestedRewards);\r\n\r\n    function getInstantRewards(uint256 epochIndex)\r\n        external\r\n        view\r\n        returns(uint256 instantRewards);\r\n\r\n    function getUnpaidInstantRewards(uint256 epochIndex)\r\n        external\r\n        view\r\n        returns(uint256 unpaidInstantRewards);\r\n\r\n    function getVesting(bytes32 vestingId)\r\n        external\r\n        view\r\n        returns(\r\n            address userAddress,\r\n            uint256 amount,\r\n            uint256 epoch\r\n            );\r\n\r\n    function getUnvestedFund(address userAddress)\r\n        external\r\n        view\r\n        returns(uint256 unvestedFund);\r\n\r\n    function getClaim(bytes32 claimId)\r\n        external\r\n        view\r\n        returns(\r\n            address beneficiary,\r\n            uint256 amount,\r\n            IApi3State.ClaimStatus status\r\n            );\r\n\r\n    function getActiveClaims()\r\n        external\r\n        view\r\n        returns(bytes32[] memory _activeClaims);\r\n\r\n    function getIou(bytes32 iouId)\r\n        external\r\n        view\r\n        returns(\r\n            address userAddress,\r\n            uint256 amountInShares,\r\n            bytes32 claimId,\r\n            IApi3State.ClaimStatus redemptionCondition\r\n            );\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IClaimUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IClaimUtils is IGetterUtils {\r\n    event ClaimCreated(\r\n        bytes32 indexed claimId,\r\n        address indexed beneficiary,\r\n        uint256 amount\r\n        );\r\n\r\n    event ClaimAccepted(bytes32 indexed claimId);\r\n\r\n    event ClaimDenied(bytes32 indexed claimId);\r\n\r\n    function createClaim(\r\n        address beneficiary,\r\n        uint256 amount\r\n        )\r\n        external;\r\n\r\n    function acceptClaim(bytes32 claimId)\r\n        external;\r\n\r\n    function denyClaim(bytes32 claimId)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IIouUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ninterface IIouUtils is IClaimUtils {\r\n    event IouCreated(\r\n        bytes32 indexed iouId,\r\n        address indexed userAddress,\r\n        uint256 amountInShares,\r\n        bytes32 indexed claimId,\r\n        IApi3State.ClaimStatus redemptionCondition\r\n        );\r\n\r\n    event IouRedeemed(bytes32 indexed iouId, uint256 amount);\r\n\r\n    event IouDeleted(bytes32 indexed iouId);\r\n\r\n    function redeem(bytes32 iouId)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IVestingUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IVestingUtils is IIouUtils {\r\n    event VestingCreated(\r\n        bytes32 indexed vestingId,\r\n        address indexed userAddress,\r\n        uint256 amount,\r\n        uint256 vestingEpoch\r\n        );\r\n\r\n    event VestingResolved(bytes32 indexed vestingId);\r\n\r\n    function vest(bytes32 vestingId)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IStakeUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IStakeUtils is IVestingUtils {\r\n    event Staked(\r\n        address indexed userAddress,\r\n        uint256 amountInShares\r\n        );\r\n    \r\n    event UpdatedDelegate(\r\n        address indexed userAddress,\r\n        address indexed delegate\r\n        );\r\n\r\n    event Collected(\r\n        address indexed userAddress,\r\n        uint256 vestedRewards,\r\n        uint256 instantRewards\r\n        );\r\n\r\n    function stake(address userAddress)\r\n        external;\r\n\r\n    function updateDelegate(address delegate)\r\n        external;\r\n\r\n    function collect(address userAddress)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IPoolUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IPoolUtils is IStakeUtils {\r\n    event Pooled(\r\n        address indexed userAddress,\r\n        uint256 amount,\r\n        uint256 amountInShares\r\n        );\r\n    \r\n    event RequestedToUnpool(address indexed userAddress);\r\n\r\n    event Unpooled(\r\n        address indexed userAddress,\r\n        uint256 amount,\r\n        uint256 amountInShares\r\n    );\r\n\r\n    function pool(uint256 amount)\r\n        external;\r\n\r\n    function requestToUnpool()\r\n        external;\r\n\r\n    function unpool(uint256 amountInShares)\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/ITransferUtils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface ITransferUtils is IPoolUtils {\r\n    event Deposited(\r\n        address indexed sourceAddress,\r\n        uint256 amount,\r\n        address indexed userAddress\r\n        );\r\n    \r\n    event DepositedWithVesting(\r\n        address indexed sourceAddress,\r\n        uint256 amount,\r\n        address indexed userAddress,\r\n        uint256 vestingEpoch\r\n        );\r\n    \r\n    event Withdrawn(\r\n        address indexed userAddress,\r\n        address destinationAddress,\r\n        uint256 amount\r\n        );\r\n    \r\n    event AddedVestedRewards(\r\n        address indexed sourceAddress,\r\n        uint256 amount,\r\n        uint256 indexed epochIndex\r\n        );\r\n    \r\n    event AddedInstantRewards(\r\n        address indexed sourceAddress,\r\n        uint256 amount,\r\n        uint256 indexed epochIndex\r\n        );\r\n\r\n    function deposit(\r\n        address sourceAddress,\r\n        uint256 amount,\r\n        address userAddress\r\n        )\r\n        external;\r\n\r\n    function depositWithVesting(\r\n        address sourceAddress,\r\n        uint256 amount,\r\n        address userAddress,\r\n        uint256 vestingStart,\r\n        uint256 vestingEnd\r\n        )\r\n        external;\r\n\r\n    function withdraw(\r\n        address destinationAddress,\r\n        uint256 amount\r\n        )\r\n        external;\r\n\r\n    function addVestedRewards(\r\n        address sourceAddress,\r\n        uint256 amount\r\n        )\r\n        external;\r\n\r\n    function addInstantRewards(\r\n        address sourceAddress,\r\n        uint256 amount\r\n        )\r\n        external;\r\n}\r\n\r\n// File: @api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IApi3Pool is ITransferUtils {}\r\n\r\n// File: contracts/interfaces/ITimelockManager.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface ITimelockManager {\r\n    event Api3PoolUpdated(address api3PoolAddress);\r\n\r\n    event RevertedTimelock(\r\n        address indexed recipient,\r\n        address destination,\r\n        uint256 amount\r\n        );\r\n\r\n    event PermittedTimelockToBeReverted(address recipient);\r\n\r\n    event TransferredAndLocked(\r\n        address source,\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        uint256 releaseStart,\r\n        uint256 releaseEnd\r\n        );\r\n\r\n    event Withdrawn(\r\n        address indexed recipient,\r\n        uint256 amount\r\n        );\r\n\r\n    event WithdrawnToPool(\r\n        address indexed recipient,\r\n        address api3PoolAddress,\r\n        address beneficiary\r\n        );\r\n\r\n    function updateApi3Pool(address api3PoolAddress)\r\n        external;\r\n\r\n    function revertTimelock(\r\n        address recipient,\r\n        address destination\r\n        )\r\n        external;\r\n\r\n    function permitTimelockToBeReverted()\r\n        external;\r\n\r\n    function transferAndLock(\r\n        address source,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 releaseStart,\r\n        uint256 releaseEnd\r\n        )\r\n        external;\r\n\r\n    function transferAndLockMultiple(\r\n        address source,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata releaseStarts,\r\n        uint256[] calldata releaseEnds\r\n        )\r\n        external;\r\n\r\n    function withdraw()\r\n        external;\r\n\r\n    function withdrawToPool(\r\n        address api3PoolAddress,\r\n        address beneficiary\r\n        )\r\n        external;\r\n\r\n    function getWithdrawable(address recipient)\r\n        external\r\n        view\r\n        returns(uint256 withdrawable);\r\n\r\n    function getTimelock(address recipient)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalAmount,\r\n            uint256 remainingAmount,\r\n            uint256 releaseStart,\r\n            uint256 releaseEnd\r\n            );\r\n\r\n    function getRemainingAmount(address recipient)\r\n        external\r\n        view\r\n        returns (uint256 remainingAmount);\r\n\r\n    function getIfTimelockIsRevertible(address recipient)\r\n        external\r\n        view\r\n        returns (bool revertStatus);\r\n}\r\n\r\n// File: contracts/TimelockManager.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Contract that the API3 DAO uses to timelock API3 tokens\r\n/// @notice The owner of TimelockManager (i.e., API3 DAO) can send tokens to\r\n/// TimelockManager to timelock them. These tokens will then be vested to their\r\n/// recipient linearly, starting from releaseStart and ending at releaseEnd of\r\n/// the respective timelock.\r\n/// Alternatively, if the owner of TimelockManager (i.e., API3 DAO) sets the\r\n/// api3Pool address, the token recipients can transfer their locked tokens\r\n/// from TimelockManager to api3Pool. These tokens will remain timelocked\r\n/// (i.e., will not be withdrawable) at api3Pool until they are vested\r\n/// according to their respective schedule.\r\ncontract TimelockManager is Ownable, ITimelockManager {\r\n    using SafeMath for uint256;\r\n\r\n    /// @dev If an address has permitted the owner of this contract (i.e., the\r\n    /// API3 DAO) to revert (i.e., cancel and withdraw the tokens) their\r\n    /// timelock\r\n    mapping(address => bool) private permittedTimelockToBeReverted;\r\n\r\n    struct Timelock {\r\n        uint256 totalAmount;\r\n        uint256 remainingAmount;\r\n        uint256 releaseStart;\r\n        uint256 releaseEnd;\r\n        }\r\n\r\n    IApi3Token public immutable api3Token;\r\n    IApi3Pool public api3Pool;\r\n    mapping(address => Timelock) public timelocks;\r\n\r\n    /// @dev api3Pool is not initialized in the constructor because this\r\n    /// contract will be deployed before api3Pool\r\n    /// @param api3TokenAddress Address of the API3 token contract\r\n    /// @param timelockManagerOwner Address that will receive the ownership of\r\n    /// the TimelockManager contract (i.e., the API3 DAO)\r\n    constructor(\r\n        address api3TokenAddress,\r\n        address timelockManagerOwner\r\n        )\r\n        public\r\n    {\r\n        api3Token = IApi3Token(api3TokenAddress);\r\n        transferOwnership(timelockManagerOwner);\r\n    }\r\n\r\n    /// @notice Called by the owner (i.e., API3 DAO) to set the address of\r\n    /// api3Pool, which token recipients can transfer their tokens to\r\n    /// @param api3PoolAddress Address of the API3 pool contract\r\n    function updateApi3Pool(address api3PoolAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(\r\n            address(api3Pool) != api3PoolAddress,\r\n            \"Input will not update state\"\r\n        );\r\n        api3Pool = IApi3Pool(api3PoolAddress);\r\n        emit Api3PoolUpdated(api3PoolAddress);\r\n    }\r\n\r\n    /// @notice Called by the owner (i.e., API3 DAO) to revert the timelock of\r\n    /// a recipient, given that they have given permission beforehand\r\n    /// @param recipient Original recipient of tokens\r\n    /// @param destination Destination of the tokens locked by the reverted\r\n    /// timelock\r\n    function revertTimelock(\r\n        address recipient,\r\n        address destination\r\n        )\r\n        external\r\n        override\r\n        onlyOwner\r\n        onlyIfRecipientHasRemainingTokens(recipient)\r\n    {\r\n        require(\r\n            destination != address(0),\r\n            \"Invalid destination\"\r\n            );\r\n        require(\r\n            permittedTimelockToBeReverted[recipient],\r\n            \"Not permitted to revert timelock\"\r\n            );\r\n        // Reset permission automatically\r\n        permittedTimelockToBeReverted[recipient] = false;\r\n        uint256 remaining = timelocks[recipient].remainingAmount;\r\n        timelocks[recipient].remainingAmount = 0;\r\n        require(\r\n            api3Token.transfer(destination, remaining),\r\n            \"API3 token transfer failed\"\r\n            );\r\n        emit RevertedTimelock(recipient, destination, remaining);\r\n    }\r\n\r\n    /// @notice Permit the owner (i.e., API3 DAO) to revert the caller's\r\n    /// timelock\r\n    /// @dev To be used when the timelock has been created with incorrect\r\n    /// parameters (for example with releaseEnd at infinity)\r\n    function permitTimelockToBeReverted()\r\n        external\r\n        override\r\n        onlyIfRecipientHasRemainingTokens(msg.sender)\r\n    {\r\n        require(\r\n            !permittedTimelockToBeReverted[msg.sender],\r\n            \"Input will not update state\"\r\n        );\r\n        permittedTimelockToBeReverted[msg.sender] = true;\r\n        emit PermittedTimelockToBeReverted(msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers API3 tokens to this contract and timelocks them\r\n    /// @dev source needs to approve() this contract to transfer amount number\r\n    /// of tokens beforehand.\r\n    /// A recipient cannot have multiple timelocks.\r\n    /// @param source Source of tokens\r\n    /// @param recipient Recipient of tokens\r\n    /// @param amount Amount of tokens\r\n    /// @param releaseStart Start of release time\r\n    /// @param releaseEnd End of release time\r\n    function transferAndLock(\r\n        address source,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 releaseStart,\r\n        uint256 releaseEnd\r\n        )\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(\r\n            timelocks[recipient].remainingAmount == 0,\r\n            \"Recipient has remaining tokens\"\r\n            );\r\n        require(amount != 0, \"Amount cannot be 0\");\r\n        require(\r\n            releaseEnd > releaseStart,\r\n            \"releaseEnd not larger than releaseStart\"\r\n            );\r\n        require(\r\n            releaseStart > now,\r\n            \"releaseStart not in the future\"\r\n            );\r\n        timelocks[recipient] = Timelock({\r\n            totalAmount: amount,\r\n            remainingAmount: amount,\r\n            releaseStart: releaseStart,\r\n            releaseEnd: releaseEnd\r\n            });\r\n        require(\r\n            api3Token.transferFrom(source, address(this), amount),\r\n            \"API3 token transferFrom failed\"\r\n            );\r\n        emit TransferredAndLocked(\r\n            source,\r\n            recipient,\r\n            amount,\r\n            releaseStart,\r\n            releaseEnd\r\n            );\r\n    }\r\n\r\n    /// @notice Convenience function that calls transferAndLock() multiple times\r\n    /// @dev source is expected to be a single address, i.e., the API3 DAO.\r\n    /// source needs to approve() this contract to transfer the sum of the\r\n    /// amounts of tokens to be transferred and locked.\r\n    /// @param source Source of tokens\r\n    /// @param recipients Array of recipients of tokens\r\n    /// @param amounts Array of amounts of tokens\r\n    /// @param releaseStarts Array of starts of release times\r\n    /// @param releaseEnds Array of ends of release times\r\n    function transferAndLockMultiple(\r\n        address source,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata releaseStarts,\r\n        uint256[] calldata releaseEnds\r\n        )\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(\r\n            recipients.length == amounts.length\r\n                && recipients.length == releaseStarts.length\r\n                && recipients.length == releaseEnds.length,\r\n            \"Parameters are of unequal length\"\r\n            );\r\n        require(\r\n            recipients.length <= 30,\r\n            \"Parameters are longer than 30\"\r\n            );\r\n        for (uint256 ind = 0; ind < recipients.length; ind++)\r\n        {\r\n            transferAndLock(\r\n                source,\r\n                recipients[ind],\r\n                amounts[ind],\r\n                releaseStarts[ind],\r\n                releaseEnds[ind]\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @notice Used by the recipient to withdraw tokens\r\n    function withdraw()\r\n        external\r\n        override\r\n        onlyIfRecipientHasRemainingTokens(msg.sender)\r\n    {\r\n        address recipient = msg.sender;\r\n        uint256 withdrawable = getWithdrawable(recipient);\r\n        require(\r\n            withdrawable != 0,\r\n            \"No withdrawable tokens yet\"\r\n            );\r\n        timelocks[recipient].remainingAmount = timelocks[recipient].remainingAmount.sub(withdrawable);\r\n        require(\r\n            api3Token.transfer(recipient, withdrawable),\r\n            \"API3 token transfer failed\"\r\n            );\r\n        emit Withdrawn(\r\n            recipient,\r\n            withdrawable\r\n            );\r\n    }\r\n\r\n    /// @notice Used by the recipient to withdraw their tokens to the API3 pool\r\n    /// @dev We ask the recipient to provide api3PoolAddress as a form of\r\n    /// validation, i.e., the recipient confirms that the API3 pool address set\r\n    /// at this contract is correct\r\n    /// @param api3PoolAddress Address of the API3 pool contract\r\n    /// @param beneficiary Address that the tokens will be deposited to the\r\n    /// pool contract on behalf of\r\n    function withdrawToPool(\r\n        address api3PoolAddress,\r\n        address beneficiary\r\n        )\r\n        external\r\n        override\r\n        onlyIfRecipientHasRemainingTokens(msg.sender)\r\n    {\r\n        require(\r\n            beneficiary != address(0),\r\n            \"beneficiary cannot be 0\"\r\n            );\r\n        require(address(api3Pool) != address(0), \"API3 pool not set yet\");\r\n        require(\r\n            address(api3Pool) == api3PoolAddress,\r\n            \"API3 pool addresses do not match\"\r\n            );\r\n        address recipient = msg.sender;\r\n        uint256 withdrawable = getWithdrawable(recipient);\r\n        uint256 remaining = timelocks[recipient].remainingAmount;\r\n        uint256 timelocked = remaining.sub(withdrawable);\r\n        timelocks[recipient].remainingAmount = 0;\r\n        // Approve the total amount\r\n        api3Token.approve(address(api3Pool), remaining);\r\n        // Deposit the funds that are withdrawable without vesting\r\n        if (withdrawable != 0)\r\n        {\r\n            api3Pool.deposit(\r\n                address(this),\r\n                withdrawable,\r\n                beneficiary\r\n                );\r\n        }\r\n        // Deposit the funds that are still timelocked with vesting.\r\n        // The vesting will continue the same way at the pool, released\r\n        // linearly.\r\n        if (timelocked != 0)\r\n        {\r\n            api3Pool.depositWithVesting(\r\n                address(this),\r\n                timelocked,\r\n                beneficiary,\r\n                now > timelocks[recipient].releaseStart ? now : timelocks[recipient].releaseStart,\r\n                timelocks[recipient].releaseEnd\r\n                );\r\n        }\r\n        emit WithdrawnToPool(\r\n            recipient,\r\n            api3PoolAddress,\r\n            beneficiary\r\n            );\r\n    }\r\n\r\n    /// @notice Returns the amount of tokens a recipient can currently withdraw\r\n    /// @param recipient Address of the recipient\r\n    /// @return withdrawable Amount of tokens withdrawable by the recipient\r\n    function getWithdrawable(address recipient)\r\n        public\r\n        view\r\n        override\r\n        returns(uint256 withdrawable)\r\n    {\r\n        Timelock storage timelock = timelocks[recipient];\r\n        uint256 unlocked = getUnlocked(recipient);\r\n        uint256 withdrawn = timelock.totalAmount.sub(timelock.remainingAmount);\r\n        withdrawable = unlocked.sub(withdrawn);\r\n    }\r\n\r\n    /// @notice Returns the amount of tokens that was unlocked for the\r\n    /// recipient to date. Includes both withdrawn and non-withdrawn tokens.\r\n    /// @param recipient Address of the recipient\r\n    /// @return unlocked Amount of tokens unlocked for the recipient\r\n    function getUnlocked(address recipient)\r\n        private\r\n        view\r\n        returns(uint256 unlocked)\r\n    {\r\n        Timelock storage timelock = timelocks[recipient];\r\n        if (now <= timelock.releaseStart)\r\n        {\r\n            unlocked = 0;\r\n        }\r\n        else if (now >= timelock.releaseEnd)\r\n        {\r\n            unlocked = timelock.totalAmount;\r\n        }\r\n        else\r\n        {\r\n            uint256 passedTime = now.sub(timelock.releaseStart);\r\n            uint256 totalTime = timelock.releaseEnd.sub(timelock.releaseStart);\r\n            unlocked = timelock.totalAmount.mul(passedTime).div(totalTime);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the details of a timelock\r\n    /// @param recipient Recipient of tokens\r\n    /// @return totalAmount Total amount of tokens\r\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\r\n    /// @return releaseStart Release start time\r\n    /// @return releaseEnd Release end time\r\n    function getTimelock(address recipient)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 totalAmount,\r\n            uint256 remainingAmount,\r\n            uint256 releaseStart,\r\n            uint256 releaseEnd\r\n            )\r\n    {\r\n        Timelock storage timelock = timelocks[recipient];\r\n        totalAmount = timelock.totalAmount;\r\n        remainingAmount = timelock.remainingAmount;\r\n        releaseStart = timelock.releaseStart;\r\n        releaseEnd = timelock.releaseEnd;\r\n    }\r\n\r\n    /// @notice Returns remaining amount of a timelock\r\n    /// @dev Provided separately to be used with Etherscan's \"Read\"\r\n    /// functionality, in case getTimelock() output is too complicated for the\r\n    /// user.\r\n    /// @param recipient Recipient of tokens\r\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\r\n    function getRemainingAmount(address recipient)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 remainingAmount)\r\n    {\r\n        remainingAmount = timelocks[recipient].remainingAmount;\r\n    }\r\n\r\n    /// @notice Returns if the recipient's timelock is revertible\r\n    /// @param recipient Recipient of tokens\r\n    /// @return revertStatus If the recipient's timelock is revertible\r\n    function getIfTimelockIsRevertible(address recipient)\r\n        external\r\n        view\r\n        override\r\n        returns (bool revertStatus)\r\n    {\r\n        revertStatus = permittedTimelockToBeReverted[recipient];\r\n    }\r\n\r\n    /// @dev Reverts if the recipient does not have remaining tokens\r\n    modifier onlyIfRecipientHasRemainingTokens(address recipient)\r\n    {\r\n        require(\r\n            timelocks[recipient].remainingAmount != 0,\r\n            \"Recipient does not have remaining tokens\"\r\n            );\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockManagerOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"Api3PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PermittedTimelockToBeReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevertedTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"TransferredAndLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawnToPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Pool\",\"outputs\":[{\"internalType\":\"contract IApi3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IApi3Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getIfTimelockIsRevertible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revertStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitTimelockToBeReverted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"revertTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseEnds\",\"type\":\"uint256[]\"}],\"name\":\"transferAndLockMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"updateApi3Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimelockManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000b38210ea11411557c13457d4da7dc6ea731b88a000000000000000000000000e7af7c5982e073ac6525a34821fe1b3e8e432099","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a614fc555c43a31cbccbf1637c9819b3b9e0c046763a63e177c993617c2e54b"}]}