{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.8.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Ownable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface INBU {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function give(address recipient, uint256 amount, uint vesterId) external;\r\n}\r\n\r\ninterface INimbusReferralProgram {\r\n    function userSponsorByAddress(address user)  external view returns (uint);\r\n    function userIdByAddress(address user) external view returns (uint);\r\n    function userAddressById(uint id) external view returns (address);\r\n    function userSponsorAddressByAddress(address user) external view returns (address);\r\n}\r\n\r\ninterface INimbusStakingPool {\r\n    function stakeFor(uint amount, address user) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface INBU_WETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface INimbusRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ncontract NimbusInitialAcquisition is Ownable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    INBU public immutable NBU;\r\n    address public immutable NBU_WETH;\r\n    INimbusReferralProgram public referralProgram;\r\n    INimbusStakingPool[] public stakingPools;   //staking pools for checking sponsor balances\r\n    INimbusStakingPool public stakePool;        //staking pool for staking purchased assets\r\n    address public recipient;                      \r\n   \r\n    INimbusRouter public swapRouter;                \r\n    mapping (address => bool) public allowedTokens;\r\n    address public swapToken;                       \r\n    uint public swapTokenAmountForBonusThreshold;  \r\n    \r\n    uint public sponsorBonus;\r\n    mapping(address => uint) public unclaimedBonusBases;\r\n\r\n    event BuyNbuForToken(address token, uint tokenAmount, uint nbuAmount, address nbuRecipient);\r\n    event BuyNbuForEth(uint ethAmount, uint nbuAmount, address nbuRecipient);\r\n    event ProcessSponsorBonus(address sponsor, address user, uint bonusAmount);\r\n    event AddUnclaimedSponsorBonus(address user, uint nbuAmount);\r\n\r\n    event UpdateTokenNbuExchangeRate(address token, uint newRate);\r\n    event UpdateEthNbuExchangeRate(uint newRate);\r\n    event Rescue(address to, uint amount);\r\n    event RescueToken(address token, address to, uint amount); \r\n\r\n    constructor (address nbu, address router, address nbuWeth, address pool) {\r\n        NBU = INBU(nbu);\r\n        NBU_WETH = nbuWeth;\r\n        sponsorBonus = 10;\r\n        swapRouter = INimbusRouter(router);\r\n        recipient = address(this);\r\n        stakePool = INimbusStakingPool(pool);\r\n    }\r\n\r\n    function availableInitialSupply() external view returns (uint) {\r\n        return NBU.balanceOf(address(this));\r\n    }\r\n\r\n    function getNbuAmountForToken(address token, uint tokenAmount) public view returns (uint) { \r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = address(NBU);\r\n        return swapRouter.getAmountsOut(tokenAmount, path)[1];\r\n    }\r\n\r\n    function getNbuAmountForEth(uint ethAmount) public view returns (uint) { \r\n        return getNbuAmountForToken(NBU_WETH, ethAmount); \r\n    }\r\n\r\n    function getTokenAmountForNbu(address token, uint nbuAmount) public view returns (uint) { \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(NBU);\r\n        path[1] = token;\r\n        return swapRouter.getAmountsOut(nbuAmount, path)[1];\r\n    }\r\n\r\n    function getEthAmountForNbu(uint nbuAmount) public view returns (uint) { \r\n        return getTokenAmountForNbu(NBU_WETH, nbuAmount);\r\n    }\r\n\r\n    function currentBalance(address token) public view returns (uint) { \r\n        return INBU(token).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    function _buyNbu(address token, uint tokenAmount, uint nbuAmount, address nbuRecipient) private {\r\n        stakePool.stakeFor(nbuAmount, nbuRecipient);\r\n        emit BuyNbuForToken(token, tokenAmount, nbuAmount, nbuRecipient);\r\n        _processSponsor(nbuAmount);\r\n    }\r\n\r\n    function _processSponsor(uint nbuAmount) private {\r\n        address sponsorAddress = _getUserSponsorAddress();\r\n        if (sponsorAddress != address(0)) { \r\n            uint minNbuAmountForBonus = getNbuAmountForToken(swapToken, swapTokenAmountForBonusThreshold);\r\n            if (nbuAmount > minNbuAmountForBonus) {\r\n                uint sponsorAmount = NBU.balanceOf(sponsorAddress);\r\n                for (uint i; i < stakingPools.length; i++) {\r\n                    if (sponsorAmount > minNbuAmountForBonus) break;\r\n                    sponsorAmount = sponsorAmount.add(stakingPools[i].balanceOf(sponsorAddress));\r\n                }\r\n                \r\n                if (sponsorAmount > minNbuAmountForBonus) {\r\n                    uint bonusBase = nbuAmount.add(unclaimedBonusBases[msg.sender]);\r\n                    uint sponsorBonusAmount = bonusBase.mul(sponsorBonus) / 100;\r\n                    NBU.give(sponsorAddress, sponsorBonusAmount, 3);\r\n                    unclaimedBonusBases[msg.sender] = 0;\r\n                    emit ProcessSponsorBonus(sponsorAddress, msg.sender, sponsorBonusAmount);\r\n                } else {\r\n                    unclaimedBonusBases[msg.sender] = unclaimedBonusBases[msg.sender].add(nbuAmount);\r\n                    emit AddUnclaimedSponsorBonus(msg.sender, nbuAmount);\r\n                }\r\n            } else {\r\n                unclaimedBonusBases[msg.sender] = unclaimedBonusBases[msg.sender].add(nbuAmount);\r\n                emit AddUnclaimedSponsorBonus(msg.sender, nbuAmount);\r\n            }\r\n        } else {\r\n            unclaimedBonusBases[msg.sender] = unclaimedBonusBases[msg.sender].add(nbuAmount);\r\n            emit AddUnclaimedSponsorBonus(msg.sender, nbuAmount);\r\n        }\r\n    }\r\n\r\n    function _getUserSponsorAddress() private view returns (address) {\r\n        if (address(referralProgram) == address(0)) {\r\n            return address(0);\r\n        } else {\r\n            return referralProgram.userSponsorAddressByAddress(msg.sender);\r\n        } \r\n    }\r\n    \r\n    function buyExactNbuForTokens(address token, uint nbuAmount, address nbuRecipient) external whenNotPaused {\r\n        require(allowedTokens[token], \"Not allowed token\");\r\n        uint tokenAmount = getTokenAmountForNbu(token, nbuAmount);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, recipient, tokenAmount);\r\n        _buyNbu(token, tokenAmount, nbuAmount, nbuRecipient);\r\n    }\r\n\r\n    function buyNbuForExactTokens(address token, uint tokenAmount, address nbuRecipient) external whenNotPaused {\r\n        require(allowedTokens[token], \"Not allowed token\");\r\n        uint nbuAmount = getNbuAmountForToken(token, tokenAmount);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, recipient, tokenAmount);\r\n        _buyNbu(token, tokenAmount, nbuAmount, nbuRecipient);\r\n    }\r\n\r\n    function buyNbuForExactEth(address nbuRecipient) payable external whenNotPaused {\r\n        require(allowedTokens[NBU_WETH], \"Not allowed purchase for ETH\");\r\n        uint nbuAmount = getNbuAmountForEth(msg.value);\r\n        INBU_WETH(NBU_WETH).deposit{value: msg.value}();\r\n        _buyNbu(NBU_WETH, msg.value, nbuAmount, nbuRecipient);\r\n    }\r\n\r\n    function buyExactNbuForEth(uint nbuAmount, address nbuRecipient) payable external whenNotPaused {\r\n        require(allowedTokens[NBU_WETH], \"Not allowed purchase for ETH\");\r\n        uint nbuAmountMax = getNbuAmountForEth(msg.value);\r\n        require(nbuAmountMax >= nbuAmount, \"Not enough ETH\");\r\n        uint ethAmount = nbuAmountMax == nbuAmount ? msg.value : getEthAmountForNbu(nbuAmount);\r\n        INBU_WETH(NBU_WETH).deposit{value: ethAmount}();\r\n        _buyNbu(NBU_WETH, ethAmount, nbuAmount, nbuRecipient);\r\n        // refund dust eth, if any\r\n        if (nbuAmountMax > nbuAmount) TransferHelper.safeTransferETH(msg.sender, msg.value - ethAmount);\r\n    }\r\n\r\n\r\n    function claimSponsorBonusesBatch(address[] memory users) external { \r\n        for (uint i; i < users.length; i++) {\r\n            claimSponsorBonuses(users[i]);\r\n        }\r\n    }\r\n\r\n    function claimSponsorBonuses(address user) public {\r\n        require(unclaimedBonusBases[user] > 0, \"No unclaimed bonuses\");\r\n        require(referralProgram.userSponsorByAddress(user) == referralProgram.userIdByAddress(msg.sender), \"Not user sponsor\");\r\n        \r\n        uint minNbuAmountForBonus = getNbuAmountForToken(swapToken, swapTokenAmountForBonusThreshold);\r\n        uint bonusBase = unclaimedBonusBases[user];\r\n        require (bonusBase >= minNbuAmountForBonus, \"Bonus threshold not met\");\r\n\r\n        uint sponsorAmount = NBU.balanceOf(msg.sender);\r\n        for (uint i; i < stakingPools.length; i++) {\r\n            if (sponsorAmount > minNbuAmountForBonus) break;\r\n            sponsorAmount = sponsorAmount.add(stakingPools[i].balanceOf(msg.sender));\r\n        }\r\n        \r\n        require (sponsorAmount > minNbuAmountForBonus, \"Sponsor balance threshold for bonus not met\");\r\n        uint sponsorBonusAmount = bonusBase.mul(sponsorBonus) / 100;\r\n        NBU.give(msg.sender, sponsorBonusAmount, 3);\r\n        unclaimedBonusBases[msg.sender] = 0;\r\n        emit ProcessSponsorBonus(msg.sender, user, sponsorBonusAmount);\r\n    }\r\n    \r\n\r\n\r\n    //Admin functions\r\n    function rescue(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"Can't be zero address\");\r\n        require(amount > 0, \"Should be greater than 0\");\r\n        TransferHelper.safeTransferETH(to, amount);\r\n        emit Rescue(to, amount);\r\n    }\r\n\r\n    function rescue(address to, address token, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"Can't be zero address\");\r\n        require(amount > 0, \"Should be greater than 0\");\r\n        TransferHelper.safeTransfer(token, to, amount);\r\n        emit RescueToken(token, to, amount);\r\n    }\r\n\r\n    function updateAllowedTokens(address token, bool isAllowed) external onlyOwner {\r\n        require (token != address(0), \"Wrong addresses\");\r\n        allowedTokens[token] = isAllowed;\r\n    }\r\n    \r\n    function updateRecipient(address recipientAddress) external onlyOwner {\r\n        require(recipientAddress != address(0), \"Address is zero\");\r\n        recipient = recipientAddress;\r\n    } \r\n\r\n    function updateSponsorBonus(uint bonus) external onlyOwner {\r\n        sponsorBonus = bonus;\r\n    }\r\n\r\n    function updateReferralProgramContract(address newReferralProgramContract) external onlyOwner {\r\n        require(newReferralProgramContract != address(0), \"Address is zero\");\r\n        referralProgram = INimbusReferralProgram(newReferralProgramContract);\r\n    }\r\n\r\n    function updateStakePool(address newStakingPool) external onlyOwner {\r\n        require(newStakingPool != address(0), \"Address is zero\");\r\n        if (address(stakePool) != address(0)) NBU.approve(address(stakePool), 0);\r\n        stakePool = INimbusStakingPool(newStakingPool);\r\n        NBU.approve(newStakingPool, 2 ** 256 - 1);\r\n    }\r\n\r\n    function updateStakingPoolAdd(address newStakingPool) external onlyOwner {\r\n        for (uint i; i < stakingPools.length; i++) {\r\n            require (address(stakingPools[i]) != newStakingPool, \"Pool exists\");\r\n        }\r\n        stakingPools.push(INimbusStakingPool(newStakingPool));\r\n    }\r\n\r\n    function updateStakingPoolRemove(uint poolIndex) external onlyOwner {\r\n        stakingPools[poolIndex] = stakingPools[stakingPools.length - 1];\r\n        stakingPools.pop();\r\n    }\r\n\r\n    function updateSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"Address is zero\");\r\n        swapRouter = INimbusRouter(newSwapRouter);\r\n    }\r\n\r\n    function updateSwapToken(address newSwapToken) external onlyOwner {\r\n        require(newSwapToken != address(0), \"Address is zero\");\r\n        swapToken = newSwapToken;\r\n    }\r\n\r\n    function updateSwapTokenAmountForBonusThreshold(uint threshold) external onlyOwner {\r\n        swapTokenAmountForBonusThreshold = threshold;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nbu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nbuWeth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"}],\"name\":\"AddUnclaimedSponsorBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"BuyNbuForEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"BuyNbuForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"ProcessSponsorBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rescue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"UpdateEthNbuExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenNbuExchangeRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NBU\",\"outputs\":[{\"internalType\":\"contract INBU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NBU_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableInitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"buyExactNbuForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"buyExactNbuForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"buyNbuForExactEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nbuRecipient\",\"type\":\"address\"}],\"name\":\"buyNbuForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimSponsorBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"claimSponsorBonusesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"}],\"name\":\"getEthAmountForNbu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getNbuAmountForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getNbuAmountForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nbuAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForNbu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralProgram\",\"outputs\":[{\"internalType\":\"contract INimbusReferralProgram\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePool\",\"outputs\":[{\"internalType\":\"contract INimbusStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract INimbusStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract INimbusRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenAmountForBonusThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedBonusBases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"}],\"name\":\"updateRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferralProgramContract\",\"type\":\"address\"}],\"name\":\"updateReferralProgramContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"updateSponsorBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingPool\",\"type\":\"address\"}],\"name\":\"updateStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingPool\",\"type\":\"address\"}],\"name\":\"updateStakingPoolAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"updateStakingPoolRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapToken\",\"type\":\"address\"}],\"name\":\"updateSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokenAmountForBonusThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NimbusInitialAcquisition","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000eb58343b36c7528f23caae63a15024024131004900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bcd83df58a1bfd25b1347f9c9da1b7118b648a60000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9724946e64518d2b369df77ee23935376aeb78bf58b0d05635309e5f1808536"}]}