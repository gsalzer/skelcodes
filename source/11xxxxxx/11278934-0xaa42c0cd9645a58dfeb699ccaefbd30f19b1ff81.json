{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title LP Burner\r\n@notice Converts Curve LP tokens to a single asset and forwards to another burner\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface AddressProvider:\r\n    def get_registry() -> address: view\r\n\r\ninterface Registry:\r\n    def get_pool_from_lp_token(_lp_token: address) -> address: view\r\n    def get_coins(_pool: address) -> address[8]: view\r\n\r\ninterface StableSwap:\r\n    def remove_liquidity_one_coin(_amount: uint256, i: int128, _min_amount: uint256): nonpayable\r\n\r\n\r\nstruct SwapData:\r\n    pool: address\r\n    coin: address\r\n    burner: address\r\n    i: int128\r\n\r\n\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\n\r\n\r\nswap_data: public(HashMap[address, SwapData])\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @dev Unlike other burners, this contract may transfer tokens to\r\n         multiple addresses after the swap. Receiver addresses are\r\n         set by calling `set_swap_data` instead of setting it\r\n         within the constructor.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n\r\n\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Convert `_coin` by removing liquidity and transfer to another burner\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(_coin).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(_coin).balanceOf(self)\r\n\r\n    if amount != 0:\r\n        # remove liquidity and pass to the next burner\r\n        swap_data: SwapData = self.swap_data[_coin]\r\n        StableSwap(swap_data.pool).remove_liquidity_one_coin(amount, swap_data.i, 0)\r\n\r\n        amount = ERC20(swap_data.coin).balanceOf(self)\r\n        response: Bytes[32] = raw_call(\r\n            swap_data.coin,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(swap_data.burner, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_swap_data(_lp_token: address, _coin: address, _burner: address) -> bool:\r\n    \"\"\"\r\n    @notice Set conversion and transfer data for `_lp_token`\r\n    @param _lp_token LP token address\r\n    @param _coin Underlying coin to remove liquidity in\r\n    @param _burner Burner to transfer `_coin` to\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    # if another burner was previous set, revoke approvals\r\n    pool: address = self.swap_data[_lp_token].pool\r\n    if pool != ZERO_ADDRESS:\r\n        # we trust that LP tokens always return True, so no need for `raw_call`\r\n        ERC20(_lp_token).approve(pool, 0)\r\n    coin: address = self.swap_data[_lp_token].coin\r\n    if coin != ZERO_ADDRESS:\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(self.swap_data[_lp_token].burner, bytes32),\r\n                convert(0, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    # find `i` for `_coin` within the pool, approve transfers and save to storage\r\n    registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\r\n    pool = Registry(registry).get_pool_from_lp_token(_lp_token)\r\n    coins: address[8] = Registry(registry).get_coins(pool)\r\n    for i in range(8):\r\n        if coins[i] == ZERO_ADDRESS:\r\n            raise\r\n        if coins[i] == _coin:\r\n            self.swap_data[_lp_token] = SwapData({\r\n                pool: pool,\r\n                coin: _coin,\r\n                burner: _burner,\r\n                i: i\r\n            })\r\n            ERC20(_lp_token).approve(pool, MAX_UINT256)\r\n            response: Bytes[32] = raw_call(\r\n                _coin,\r\n                concat(\r\n                    method_id(\"approve(address,uint256)\"),\r\n                    convert(_burner, bytes32),\r\n                    convert(MAX_UINT256, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n            return True\r\n    raise\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":12815},{\"name\":\"set_swap_data\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_lp_token\"},{\"type\":\"address\",\"name\":\"_coin\"},{\"type\":\"address\",\"name\":\"_burner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":1176690},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7709},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36353},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37610},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36413},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36339},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36473},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36399},{\"name\":\"swap_data\",\"outputs\":[{\"type\":\"address\",\"name\":\"pool\"},{\"type\":\"address\",\"name\":\"coin\"},{\"type\":\"address\",\"name\":\"burner\"},{\"type\":\"int128\",\"name\":\"i\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":4744},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000ae9c8320a6394120ecb7b2b2678d9b4ac848d1060000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a00000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}