{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nHTTPS://QBURN.CASH\r\nHTTPS://T.ME/QUICKBURN\r\n----------------------------------------------\r\nCommunity driven project\r\n----------------------------------------------\r\n _______  ______            _______  _       \r\n(  ___  )(  ___ \\ |\\     /|(  ____ )( (    /|\r\n| (   ) || (   ) )| )   ( || (    )||  \\  ( |\r\n| |   | || (__/ / | |   | || (____)||   \\ | |\r\n| |   | ||  __ (  | |   | ||     __)| (\\ \\) |\r\n| | /\\| || (  \\ \\ | |   | || (\\ (   | | \\   |\r\n| (_\\ \\ || )___) )| (___) || ) \\ \\__| )  \\  |\r\n(____\\/_)|/ \\___/ (_______)|/   \\__/|/    )_)\r\n                                             \r\nQUICKBURN - Deflationary & Fast eco system\r\n----------------------------------------------\r\n- 20% Penalty when claiming rewards < 4 days\r\n- 100% Truly Decentralized\r\n----------------------------------------------\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakingToken is Ownable {\r\n    \r\n    //initializing safe computations\r\n    using SafeMath for uint;\r\n\r\n    IERC20 public contractAddress;\r\n    uint public stakingPool;\r\n    uint public stakeholdersIndex;\r\n    uint public totalStakes;\r\n    uint private setTime;\r\n    uint public minimumStakeValue;\r\n    address admin;\r\n    \r\n    uint rewardToShare;\r\n    \r\n    struct Stakeholder {\r\n         bool staker;\r\n         uint id;\r\n    }\r\n\r\n    modifier validatStake(uint _stake) {\r\n        require(_stake >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(contractAddress.balanceOf(msg.sender) >= _stake, \"Must have enough balance to stake\");\r\n        require(contractAddress.allowance(msg.sender, address(this)) >= _stake, \"Must approve tokens before staking\");\r\n        _;\r\n    }\r\n    \r\n    mapping (address => Stakeholder) public stakeholders;\r\n    mapping (uint => address) public stakeholdersReverseMapping;\r\n    mapping(address => uint256) private stakes;\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => uint256) private time;\r\n    mapping(address => bool) public registered;\r\n\r\n    constructor(IERC20 _contractAddress) public {\r\n        contractAddress = _contractAddress;\r\n        stakingPool = 0;\r\n        stakeholdersIndex = 0;\r\n        totalStakes = 0;\r\n        totalStakes = 0;\r\n        setTime = 0;\r\n        rewardToShare = 0;\r\n        minimumStakeValue = 0.1 ether;\r\n    }\r\n    \r\n    function bal(address addr) public view returns(uint) {\r\n        return contractAddress.balanceOf(addr);\r\n    }\r\n    \r\n    function approvedTokenBalance(address _sender) public view returns(uint) {\r\n        return contractAddress.allowance(_sender, address(this));\r\n    }\r\n    \r\n    function changeAdmin(address _newAdmin) public returns(bool) {\r\n        require(msg.sender == admin, 'Access denied!');\r\n        require(_newAdmin != address(0), \"New admin is zero address\");\r\n        admin = _newAdmin;\r\n        return true;\r\n    }\r\n    \r\n    function newStake(uint _stake) external validatStake(_stake) {\r\n        require(\r\n            stakes[msg.sender] == 0 && \r\n            registered[msg.sender] == false, \r\n            \"Already a stakeholder\"\r\n        );\r\n         require(approvedTokenBalance(msg.sender) >= _stake, \"No token approve yet\");\r\n        // Aprrove tokens before staking\r\n        contractAddress.transferFrom(msg.sender, address(this), _stake);\r\n        \r\n        addStakeholder(msg.sender); \r\n        uint registerCost = calculateCost(_stake);\r\n        uint stakeToPool = _stake.sub(registerCost);\r\n        stakingPool = stakingPool.add(stakeToPool);\r\n        stakes[msg.sender] = registerCost;\r\n        totalStakes = totalStakes.add(registerCost);\r\n        registered[msg.sender] = true;\r\n    }\r\n    \r\n    function stake(uint _stake) external { \r\n        require(\r\n            registered[msg.sender] == true, \r\n            \"Not a stakeholder, use the newStake method to stake\"\r\n        );\r\n        require(_stake >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(contractAddress.balanceOf(msg.sender) >= _stake, \"Must have enough balance to stake\");\r\n        require(\r\n            approvedTokenBalance(msg.sender) >= _stake, \r\n            \"Must approve tokens before staking\"\r\n        );\r\n        \r\n        contractAddress.transferFrom(msg.sender, address(this), _stake);\r\n        \r\n        // check previous stake balance\r\n        uint previousStakeBalance = stakes[msg.sender];\r\n        \r\n        uint availableTostake = calculateCost(_stake);\r\n        uint stakeToPool2 = _stake.sub(availableTostake);\r\n        stakingPool = stakingPool.add(stakeToPool2);\r\n        totalStakes = totalStakes.add(availableTostake);\r\n        stakes[msg.sender] = previousStakeBalance.add(availableTostake);\r\n    }\r\n    \r\n    function stakeOf(address _stakeholder) external view returns(uint256) {\r\n        return stakes[_stakeholder];\r\n    }\r\n    \r\n    function removeStake(uint _stake) external {\r\n        require(registered[msg.sender] == true, \"Not a stakeholder\");\r\n        require(stakes[msg.sender] > 0, 'stakes must be above 0');\r\n        require(stakes[msg.sender] >= _stake, \"Amount is greater than current stake\");\r\n        \r\n        time[msg.sender] = block.timestamp;\r\n        uint _balance = stakes[msg.sender];\r\n        stakes[msg.sender] = stakes[msg.sender].sub(_stake);\r\n         \r\n        uint _reward = rewards[msg.sender];\r\n        rewards[msg.sender] = 0;\r\n        totalStakes = totalStakes.sub(_stake);\r\n        // 20% withrawal charges\r\n        uint withdrawalCharges = _stake.mul(20).div(100);\r\n        stakingPool = stakingPool.add(withdrawalCharges);\r\n        uint _totalAmount = _balance.sub(withdrawalCharges);\r\n        _totalAmount = _totalAmount.add(_reward);\r\n        contractAddress.transfer(msg.sender, _totalAmount);\r\n        \r\n        if(stakes[msg.sender] == 0) removeStakeholder(msg.sender);\r\n    }\r\n    \r\n    function addStakeholder(address _stakeholder) private {\r\n        require(stakeholders[_stakeholder].staker == false, \"Already a stakeholder\");\r\n        stakeholders[_stakeholder].staker = true;    \r\n        stakeholders[_stakeholder].id = stakeholdersIndex;\r\n        stakeholdersReverseMapping[stakeholdersIndex] = _stakeholder;\r\n        stakeholdersIndex = stakeholdersIndex.add(1);\r\n    }\r\n   \r\n    function removeStakeholder(address _stakeholder) private  {\r\n        require(stakeholders[_stakeholder].staker == true, \"Not a stakeholder\");\r\n        \r\n        // get id of the stakeholders to be deleted\r\n        uint swappableId = stakeholders[_stakeholder].id;\r\n        \r\n        // swap the stakeholders info and update admins mapping\r\n        // get the last stakeholdersReverseMapping address for swapping\r\n        address swappableAddress = stakeholdersReverseMapping[stakeholdersIndex -1];\r\n        \r\n        // swap the stakeholdersReverseMapping and then reduce stakeholder index\r\n        stakeholdersReverseMapping[swappableId] = stakeholdersReverseMapping[stakeholdersIndex - 1];\r\n        \r\n        // also remap the stakeholder id\r\n        stakeholders[swappableAddress].id = swappableId;\r\n        \r\n        // delete and reduce admin index \r\n        delete(stakeholders[_stakeholder]);\r\n        delete(stakeholdersReverseMapping[stakeholdersIndex - 1]);\r\n        stakeholdersIndex = stakeholdersIndex.sub(1);\r\n        registered[msg.sender] = false;\r\n    }\r\n    \r\n    function getRewardToShareWeekly() external onlyOwner() {\r\n        require(block.timestamp > setTime, 'wait 4days from last call');\r\n        setTime = block.timestamp + 4 days;\r\n        rewardToShare = stakingPool.div(2);\r\n        stakingPool = stakingPool.sub(rewardToShare);\r\n    }\r\n    \r\n    function getRewards() external {\r\n        require(registered[msg.sender] == true, 'address does not belong to a stakeholders');\r\n        require(rewardToShare > 0, 'no reward to share at this time');\r\n        require(block.timestamp > time[msg.sender], 'can only call this function once every 4days');\r\n        \r\n        time[msg.sender] = block.timestamp + 4 days;\r\n        uint _initialStake = stakes[msg.sender];\r\n        uint reward = _initialStake.mul(rewardToShare).div(totalStakes);\r\n        rewards[msg.sender] = rewards[msg.sender].add(reward);\r\n    }\r\n    \r\n    /* return will converted to ether in frontend*/\r\n    function rewardOf(address _stakeholder) external view returns(uint256){\r\n        return rewards[_stakeholder];\r\n    }\r\n    \r\n    function calculateCost(uint256 _stake) private pure returns(uint availableForstake) {\r\n        uint stakingCost =  (_stake).mul(20).div(100);\r\n        availableForstake = _stake.sub(stakingCost);\r\n        return availableForstake;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"approvedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToShareWeekly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholdersReverseMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000080abaf9db4f5c5578e0ac8994fe6205fab7935b4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92272b114415d5ba4663b0b42ef693c6e890cb6809d5164d26cca308b40c17a5"}]}