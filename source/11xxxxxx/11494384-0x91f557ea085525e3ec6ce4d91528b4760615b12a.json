{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title LnAdminUpgradeable\r\n *\r\n * @dev This is an upgradeable version of `LnAdmin` by replacing the constructor with\r\n * an initializer and reserving storage slots.\r\n */\r\ncontract LnAdminUpgradeable is Initializable {\r\n    event CandidateChanged(address oldCandidate, address newCandidate);\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    function __LnAdminUpgradeable_init(address _admin) public initializer {\r\n        require(_admin != address(0), \"LnAdminUpgradeable: zero address\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit CandidateChanged(old, candidate);\r\n    }\r\n\r\n    function becomeAdmin() external {\r\n        require(msg.sender == candidate, \"LnAdminUpgradeable: only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged(old, admin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require((msg.sender == admin), \"LnAdminUpgradeable: only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[48] private __gap;\r\n}\r\n\r\n// a facade for prices fetch from oracles\r\ninterface LnPrices {\r\n    // get price for a currency\r\n    function getPrice(bytes32 currencyName) external view returns (uint);\r\n\r\n    // get price and updated time for a currency\r\n    function getPriceAndUpdatedTime(bytes32 currencyName) external view returns (uint price, uint time);\r\n\r\n    // is the price is stale\r\n    function isStale(bytes32 currencyName) external view returns (bool);\r\n\r\n    // the defined stale time\r\n    function stalePeriod() external view returns (uint);\r\n\r\n    // exchange amount of source currenty for some dest currency, also get source and dest curreny price\r\n    function exchange(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    ) external view returns (uint);\r\n\r\n    // exchange amount of source currenty for some dest currency\r\n    function exchangeAndPrices(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourcePrice,\r\n            uint destPrice\r\n        );\r\n\r\n    // price names\r\n    function LUSD() external view returns (bytes32);\r\n\r\n    function LINA() external view returns (bytes32);\r\n}\r\n\r\nabstract contract LnBasePrices is LnPrices {\r\n    // const name\r\n    bytes32 public constant override LINA = \"LINA\";\r\n    bytes32 public constant override LUSD = \"lUSD\";\r\n}\r\n\r\ncontract LnDefaultPrices is LnAdminUpgradeable, LnBasePrices {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    address public oracle;\r\n\r\n    uint public override stalePeriod;\r\n\r\n    mapping(bytes32 => uint) public mPricesLastRound;\r\n\r\n    struct PriceData {\r\n        uint216 mPrice;\r\n        uint40 mTime;\r\n    }\r\n\r\n    mapping(bytes32 => mapping(uint => PriceData)) private mPricesStorage;\r\n\r\n    uint private constant ORACLE_TIME_LIMIT = 10 minutes;\r\n\r\n    function __LnDefaultPrices_init(\r\n        address _admin,\r\n        address _oracle,\r\n        bytes32[] memory _currencyNames,\r\n        uint[] memory _newPrices\r\n    ) public initializer {\r\n        __LnAdminUpgradeable_init(_admin);\r\n\r\n        stalePeriod = 12 hours;\r\n\r\n        require(_currencyNames.length == _newPrices.length, \"array length error.\");\r\n\r\n        oracle = _oracle;\r\n\r\n        // The LUSD price is always 1 and is never stale.\r\n        _setPrice(LUSD, SafeDecimalMath.unit(), now);\r\n\r\n        _updateAll(_currencyNames, _newPrices, now);\r\n    }\r\n\r\n    /* interface */\r\n    function getPrice(bytes32 currencyName) external view override returns (uint) {\r\n        return _getPrice(currencyName);\r\n    }\r\n\r\n    function getPriceAndUpdatedTime(bytes32 currencyName) external view override returns (uint price, uint time) {\r\n        PriceData memory priceAndTime = _getPriceData(currencyName);\r\n        return (priceAndTime.mPrice, priceAndTime.mTime);\r\n    }\r\n\r\n    function exchange(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    ) external view override returns (uint value) {\r\n        (value, , ) = _exchangeAndPrices(sourceName, sourceAmount, destName);\r\n    }\r\n\r\n    function exchangeAndPrices(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint value,\r\n            uint sourcePrice,\r\n            uint destPrice\r\n        )\r\n    {\r\n        return _exchangeAndPrices(sourceName, sourceAmount, destName);\r\n    }\r\n\r\n    function isStale(bytes32 currencyName) external view override returns (bool) {\r\n        if (currencyName == LUSD) return false;\r\n        return _getUpdatedTime(currencyName).add(stalePeriod) < now;\r\n    }\r\n\r\n    /* functions */\r\n    function getCurrentRoundId(bytes32 currencyName) external view returns (uint) {\r\n        return mPricesLastRound[currencyName];\r\n    }\r\n\r\n    function setOracle(address _oracle) external onlyAdmin {\r\n        oracle = _oracle;\r\n        emit OracleUpdated(oracle);\r\n    }\r\n\r\n    function setStalePeriod(uint _time) external onlyAdmin {\r\n        stalePeriod = _time;\r\n        emit StalePeriodUpdated(stalePeriod);\r\n    }\r\n\r\n    // 外部调用，更新汇率 oracle是一个地址，从外部用脚本定期调用这个接口\r\n    function updateAll(\r\n        bytes32[] calldata currencyNames,\r\n        uint[] calldata newPrices,\r\n        uint timeSent\r\n    ) external onlyOracle returns (bool) {\r\n        _updateAll(currencyNames, newPrices, timeSent);\r\n    }\r\n\r\n    function deletePrice(bytes32 currencyName) external onlyOracle {\r\n        require(_getPrice(currencyName) > 0, \"price is zero\");\r\n\r\n        delete mPricesStorage[currencyName][mPricesLastRound[currencyName]];\r\n\r\n        mPricesLastRound[currencyName]--;\r\n\r\n        emit PriceDeleted(currencyName);\r\n    }\r\n\r\n    function _setPrice(\r\n        bytes32 currencyName,\r\n        uint256 price,\r\n        uint256 time\r\n    ) internal {\r\n        // start from 1\r\n        mPricesLastRound[currencyName]++;\r\n        mPricesStorage[currencyName][mPricesLastRound[currencyName]] = PriceData({\r\n            mPrice: uint216(price),\r\n            mTime: uint40(time)\r\n        });\r\n    }\r\n\r\n    function _updateAll(\r\n        bytes32[] memory currencyNames,\r\n        uint[] memory newPrices,\r\n        uint timeSent\r\n    ) internal returns (bool) {\r\n        require(currencyNames.length == newPrices.length, \"array length error, not match.\");\r\n        require(timeSent < (now + ORACLE_TIME_LIMIT), \"Time error\");\r\n\r\n        for (uint i = 0; i < currencyNames.length; i++) {\r\n            bytes32 currencyName = currencyNames[i];\r\n\r\n            require(newPrices[i] != 0, \"Zero is not a valid price, please call deletePrice instead.\");\r\n            require(currencyName != LUSD, \"LUSD cannot be updated.\");\r\n\r\n            if (timeSent < _getUpdatedTime(currencyName)) {\r\n                continue;\r\n            }\r\n\r\n            _setPrice(currencyName, newPrices[i], timeSent);\r\n        }\r\n\r\n        emit PricesUpdated(currencyNames, newPrices);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _getPriceData(bytes32 currencyName) internal view virtual returns (PriceData memory) {\r\n        return mPricesStorage[currencyName][mPricesLastRound[currencyName]];\r\n    }\r\n\r\n    function _getPrice(bytes32 currencyName) internal view returns (uint256) {\r\n        PriceData memory priceAndTime = _getPriceData(currencyName);\r\n        return priceAndTime.mPrice;\r\n    }\r\n\r\n    function _getUpdatedTime(bytes32 currencyName) internal view returns (uint256) {\r\n        PriceData memory priceAndTime = _getPriceData(currencyName);\r\n        return priceAndTime.mTime;\r\n    }\r\n\r\n    function _exchangeAndPrices(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourcePrice,\r\n            uint destPrice\r\n        )\r\n    {\r\n        sourcePrice = _getPrice(sourceName);\r\n        // If there's no change in the currency, then just return the amount they gave us\r\n        if (sourceName == destName) {\r\n            destPrice = sourcePrice;\r\n            value = sourceAmount;\r\n        } else {\r\n            // Calculate the effective value by going from source -> USD -> destination\r\n            destPrice = _getPrice(destName);\r\n            value = sourceAmount.multiplyDecimalRound(sourcePrice).divideDecimalRound(destPrice);\r\n        }\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n    modifier onlyOracle {\r\n        require(msg.sender == oracle, \"Only the oracle can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event OracleUpdated(address newOracle);\r\n    event StalePeriodUpdated(uint priceStalePeriod);\r\n    event PricesUpdated(bytes32[] currencyNames, uint[] newPrices);\r\n    event PriceDeleted(bytes32 currencyName);\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[46] private __gap;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"CandidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"PriceDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"currencyNames\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newPrices\",\"type\":\"uint256[]\"}],\"name\":\"PricesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceStalePeriod\",\"type\":\"uint256\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUSD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAdminUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencyNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPrices\",\"type\":\"uint256[]\"}],\"name\":\"__LnDefaultPrices_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"deletePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destName\",\"type\":\"bytes32\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destName\",\"type\":\"bytes32\"}],\"name\":\"exchangeAndPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourcePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"getCurrentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"getPriceAndUpdatedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyName\",\"type\":\"bytes32\"}],\"name\":\"isStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mPricesLastRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeSent\",\"type\":\"uint256\"}],\"name\":\"updateAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LnDefaultPrices","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"istanbul","Library":"SafeDecimalMath:740d22798ce6c73f1049eea4d8f153ad3e15e17e","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c156232bf8c39f2cd9dc174d776a8d0f589a062a30ebd045b85260dfab061191"}]}