{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-07\r\n*/\r\n\r\n// Price Oracle for Stabilize Protocol\r\n// This contract uses Aave Price Oracle\r\n// The main Operator contract can change which Price Oracle it uses\r\n\r\n// Updated to use Chainlink upgrade\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/************\r\nIPriceOracleGetter interface\r\nInterface for the Aave price oracle.\r\n*/\r\ninterface IPriceOracleGetter {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external view returns(address);\r\n    function getFallbackOracle() external view returns(address);\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ninterface zaToken {\r\n    // For the proxy tokens\r\n    function underlyingAsset() external view returns (address);\r\n}\r\n\r\ncontract StabilizePriceOracle {\r\n    function getPrice(address _address) external view returns (uint256) {\r\n        // This version of the price oracle will use Aave contracts\r\n        \r\n        // First get the Ethereum USD price from Chainlink Aggregator\r\n        // Mainnet address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        // Kovan address: 0x9326BFA02ADD2366b30bacB125260Af641031331\r\n        AggregatorV3Interface ethOracle = AggregatorV3Interface(address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419));\r\n        ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer \r\n        uint256 ethPrice = uint256(intEthPrice);\r\n        \r\n        address underlyingAsset;\r\n        // zaTokens store their underlying asset address in the contract\r\n        try zaToken(_address).underlyingAsset() returns (address) {\r\n            // If this address has that method, this will work\r\n            underlyingAsset = zaToken(_address).underlyingAsset();\r\n        }catch{\r\n            underlyingAsset = _address;\r\n        }\r\n        \r\n        // Retrieve PriceOracle address\r\n        // Mainnet address: 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\r\n        // Kovan address: 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5\r\n        LendingPoolAddressesProvider provider = LendingPoolAddressesProvider(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8));\r\n        address priceOracleAddress = provider.getPriceOracle();\r\n        IPriceOracleGetter priceOracle = IPriceOracleGetter(priceOracleAddress);\r\n\r\n        uint256 price = priceOracle.getAssetPrice(underlyingAsset); // This is relative to Ethereum, need to convert to USD\r\n        ethPrice = ethPrice / 10000; // We only care about 4 decimal places from Chainlink priceOracleAddress\r\n        price = price * ethPrice / 10000; // Convert to Wei format\r\n        return price;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StabilizePriceOracle","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ce0a9f9da71ad14d8d778811b7bf74cca1b2b2b74b479c3434e2ec01f90a773"}]}