{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/lender/tranche/operator/proportional.sol\npragma solidity >=0.5.15 >=0.5.15 <0.6.0;\n\n////// lib/tinlake-auth/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n/* pragma solidity >=0.5.15; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n\n////// lib/tinlake-auth/src/auth.sol\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n\ncontract Auth is DSNote {\n    mapping (address => uint) public wards;\n    function rely(address usr) public auth note { wards[usr] = 1; }\n    function deny(address usr) public auth note { wards[usr] = 0; }\n    modifier auth { require(wards[msg.sender] == 1); _; }\n}\n\n////// lib/tinlake-math/src/math.sol\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\ncontract Math {\n    uint256 constant ONE = 10 ** 27;\n\n    function safeAdd(uint x, uint y) public pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function safeSub(uint x, uint y) public pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function safeMul(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function safeDiv(uint x, uint y) public pure returns (uint z) {\n        z = x / y;\n    }\n\n    function rmul(uint x, uint y) public pure returns (uint z) {\n        z = safeMul(x, y) / ONE;\n    }\n\n    function rdiv(uint x, uint y) public pure returns (uint z) {\n        require(y > 0, \"division by zero\");\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\n    }\n\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\n        require(y > 0, \"division by zero\");\n        // always rounds up\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\n    }\n\n\n}\n\n////// src/lender/tranche/operator/proportional.sol\n// Copyright (C) 2020 Centrifuge\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n/* import \"tinlake-math/math.sol\"; */\n/* import \"tinlake-auth/auth.sol\"; */\n\ncontract TrancheLike_4 {\n    function supply(address usr, uint currencyAmount, uint tokenAmount) public;\n    function redeem(address usr, uint currencyAmount, uint tokenAmount) public;\n    function tokenSupply() public returns (uint);\n}\n\ncontract AssessorLike_5 {\n    function calcAndUpdateTokenPrice(address tranche) public returns(uint);\n    function supplyApprove(address tranche, uint currencyAmount) public returns(bool);\n    function redeemApprove(address tranche, uint currencyAmount) public returns(bool);\n    function tokenAmountForONE() public returns(uint);\n}\n\ncontract DistributorLike_4 {\n    function balance() public;\n}\n\ncontract ProportionalOperator is Math, DSNote, Auth  {\n    TrancheLike_4 public tranche;\n    AssessorLike_5 public assessor;\n    DistributorLike_4 public distributor;\n\n    // investor mappings\n    // each value in a own map for gas-optimization\n    mapping (address => uint) public supplyMaximum;\n    mapping (address => uint) public tokenReceived;\n    // helper we could also calculate based on principalRedeemed\n    mapping (address => uint) public tokenRedeemed;\n\n    // currency amount of investor's share in the pool which has already been redeemed\n    // denominated: in totalCurrencyReturned units\n    mapping (address => uint) public currencyRedeemed;\n\n    // principal amount of investor's share in the pool which has already been redeemed\n    // denominated: in totalPrincipalReturned units\n    mapping (address => uint) public principalRedeemed;\n\n    bool public supplyAllowed  = true;\n\n    // denominated in currency\n    uint public totalCurrencyReturned;\n\n    // denominated in currency\n    uint public totalPrincipalReturned;\n\n    // denominated in currency\n    uint public totalPrincipal;\n\n    constructor(address tranche_, address assessor_, address distributor_) public {\n        wards[msg.sender] = 1;\n        tranche = TrancheLike_4(tranche_);\n        assessor = AssessorLike_5(assessor_);\n        distributor = DistributorLike_4(distributor_);\n    }\n\n    /// sets the dependency to another contract\n    function depend(bytes32 contractName, address addr) public auth {\n        if (contractName == \"tranche\") { tranche = TrancheLike_4(addr); }\n        else if (contractName == \"assessor\") { assessor = AssessorLike_5(addr); }\n        else if (contractName == \"distributor\") { distributor = DistributorLike_4(addr); }\n        else revert();\n    }\n\n    function file(bytes32 what, address usr, uint supplyMaximum_, uint tokenReceived_, uint tokenRedeemed_, uint currencyRedeemed_, uint principalRedeemed_) external auth {\n        if(what == \"resetUsr\") {\n            approve(usr, supplyMaximum_);\n            tokenReceived[usr] = tokenReceived_;\n            tokenRedeemed[usr] = tokenRedeemed_;\n            currencyRedeemed[usr] = currencyRedeemed_;\n            principalRedeemed[usr] = principalRedeemed_;\n        } else { revert(\"unknown parameter\");}\n    }\n\n    function file(bytes32 what, bool supplyAllowed_) public auth {\n        if(what == \"supplyAllowed\") {\n            supplyAllowed = supplyAllowed_;\n        }\n    }\n    /// defines the max amount of currency for supply\n    function approve(address usr, uint currencyAmount) public auth {\n        supplyMaximum[usr] = currencyAmount;\n    }\n\n    function updateReturned(uint currencyReturned_, uint principalReturned_) public auth {\n        totalCurrencyReturned  = safeAdd(totalCurrencyReturned, currencyReturned_);\n        totalPrincipalReturned = safeAdd(totalPrincipalReturned, principalReturned_);\n    }\n\n    function setReturned(uint currencyReturned_, uint principalReturned_) public auth {\n        totalCurrencyReturned  = currencyReturned_;\n        totalPrincipalReturned = principalReturned_;\n    }\n\n    /// only approved investors can supply and approved\n    function supply(uint currencyAmount) external note {\n        require(supplyAllowed);\n\n        tokenReceived[msg.sender] = safeAdd(tokenReceived[msg.sender], currencyAmount);\n\n        require(tokenReceived[msg.sender] <= supplyMaximum[msg.sender], \"currency-amount-above-supply-maximum\");\n\n        require(assessor.supplyApprove(address(tranche), currencyAmount), \"supply-not-approved\");\n\n        // pre-defined tokenPrice of ONE\n        uint tokenAmount = currencyAmount;\n\n        tranche.supply(msg.sender, currencyAmount, tokenAmount);\n\n        totalPrincipal = safeAdd(totalPrincipal, currencyAmount);\n\n        distributor.balance();\n    }\n\n    /// redeem is proportional allowed\n    function redeem(uint tokenAmount) external note {\n        distributor.balance();\n\n        // maxTokenAmount that can still be redeemed based on the investor's share in the pool\n        uint maxTokenAmount = calcMaxRedeemToken(msg.sender);\n\n        if (tokenAmount > maxTokenAmount) {\n            tokenAmount = maxTokenAmount;\n        }\n\n        uint currencyAmount = calcRedeemCurrencyAmount(msg.sender, tokenAmount, maxTokenAmount);\n\n        require(assessor.redeemApprove(address(tranche), currencyAmount), \"redeem-not-approved\");\n        tokenRedeemed[msg.sender] = safeAdd(tokenRedeemed[msg.sender], tokenAmount);\n        tranche.redeem(msg.sender, currencyAmount, tokenAmount);\n    }\n\n    /// calculates the current max amount of tokens a user can redeem\n    /// the max amount of token depends on the total principal returned\n    /// and previous redeem actions of the user\n    function calcMaxRedeemToken(address usr) public view returns(uint) {\n        if (supplyAllowed) {\n            return 0;\n        }\n        // assumes a initial token price of ONE\n        return safeSub(rmul(rdiv(totalPrincipalReturned, totalPrincipal), tokenReceived[usr]), tokenRedeemed[usr]);\n    }\n\n    /// calculates the amount of currency a user can redeem for a specific token amount\n    /// the used token price for the conversion can be different among users depending on their\n    /// redeem history.\n    function calcRedeemCurrencyAmount(address usr, uint tokenAmount, uint maxTokenAmount) internal returns(uint) {\n        // solidity gas-optimized calculation avoiding local variable if possible\n        uint currencyAmount = rmul(tokenAmount, calcTokenPrice(usr));\n\n        uint redeemRatio = rdiv(tokenAmount, maxTokenAmount);\n\n        currencyRedeemed[usr] = safeAdd(rmul(safeSub(totalCurrencyReturned, currencyRedeemed[usr]),\n            redeemRatio), currencyRedeemed[usr]);\n\n        principalRedeemed[usr] = safeAdd(rmul(safeSub(totalPrincipalReturned, principalRedeemed[usr]),\n            redeemRatio), principalRedeemed[usr]);\n\n        return currencyAmount;\n    }\n\n     function calcTokenPrice(address usr) public view returns (uint) {\n        if (totalPrincipalReturned == 0)  {\n            return ONE;\n        }\n\n        uint principalLeft = safeSub(totalPrincipalReturned, principalRedeemed[usr]);\n        if (principalLeft == 0) {\n            return 0;\n        }\n\n       return rdiv(safeSub(totalCurrencyReturned, currencyRedeemed[usr]), principalLeft);\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranche_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assessor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assessor\",\"outputs\":[{\"internalType\":\"contract AssessorLike_5\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"calcMaxRedeemToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"calcTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencyRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"depend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DistributorLike_4\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"supplyAllowed_\",\"type\":\"bool\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyMaximum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceived_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRedeemed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyRedeemed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalRedeemed_\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"principalRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyReturned_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReturned_\",\"type\":\"uint256\"}],\"name\":\"setReturned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCurrencyReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrincipalReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"contract TrancheLike_4\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyReturned_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReturned_\",\"type\":\"uint256\"}],\"name\":\"updateReturned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProportionalOperator","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f2c43699306dab17ec353886272bdfb4f443ad840000000000000000000000006377737c28921fab9497e2a9f30fe8147a3bdfe400000000000000000000000027b309c6870d8b4ff762d230f0ee112e1c633267","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}