{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/bacfarmer/contracts/BacFarmer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.6.12;\\n//Import router interface\\nimport \\\"./IUniswapRouterV02.sol\\\";\\n//Import SafeMath\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n//Import IERC20\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n//Import Ownable\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './TransferHelper.sol';\\n\\ninterface IBasisCashPool {\\n  function DURATION (  ) external view returns ( uint256 );\\n  function balanceOf ( address account ) external view returns ( uint256 );\\n  function basisCash (  ) external view returns ( address );\\n  function dai (  ) external view returns ( address );\\n  function deposits ( address ) external view returns ( uint256 );\\n  function earned ( address account ) external view returns ( uint256 );\\n  function exit (  ) external;\\n  function getReward (  ) external;\\n  function lastTimeRewardApplicable (  ) external view returns ( uint256 );\\n  function lastUpdateTime (  ) external view returns ( uint256 );\\n  function notifyRewardAmount ( uint256 reward ) external;\\n  function owner (  ) external view returns ( address );\\n  function periodFinish (  ) external view returns ( uint256 );\\n  function renounceOwnership (  ) external;\\n  function rewardDistribution (  ) external view returns ( address );\\n  function rewardPerToken (  ) external view returns ( uint256 );\\n  function rewardPerTokenStored (  ) external view returns ( uint256 );\\n  function rewardRate (  ) external view returns ( uint256 );\\n  function rewards ( address ) external view returns ( uint256 );\\n  function setRewardDistribution ( address _rewardDistribution ) external;\\n  function stake ( uint256 amount ) external;\\n  function starttime (  ) external view returns ( uint256 );\\n  function totalSupply (  ) external view returns ( uint256 );\\n  function transferOwnership ( address newOwner ) external;\\n  function userRewardPerTokenPaid ( address ) external view returns ( uint256 );\\n  function withdraw ( uint256 amount ) external;\\n}\\n\\ninterface iCHI {\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\\n}\\n\\ncontract BACFarmerv5 is Ownable{\\n    using SafeMath for uint;\\n    using SafeMath for uint256;\\n\\n    address internal UniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    uint256 constant INFINITE_ALLOWANCE = 0xfe00000000000000000000000000000000000000000000000000000000000000;\\n\\n    //Pool addresses\\n    address public DaiPool = 0xEBd12620E29Dc6c452dB7B96E1F190F3Ee02BDE8;\\n    address public USDTPool = 0x2833bdc5B31269D356BDf92d0fD8f3674E877E44;\\n    address public USDCPool = 0x51882184b7F9BEEd6Db9c617846140DA1d429fD4;\\n    address public SUSDPool = 0xDc42a21e38C3b8028b01A6B00D8dBC648f93305C;\\n\\n    //Asset addresses\\n    address internal BAS  = 0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a;\\n    address internal USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n\\n    //Pool interfaces\\n    IBasisCashPool iDaiPool = IBasisCashPool(DaiPool);\\n    IBasisCashPool iUSDTPool = IBasisCashPool(USDTPool);\\n    IBasisCashPool iUSDCPool = IBasisCashPool(USDCPool);\\n    IBasisCashPool iSUSDPool = IBasisCashPool(SUSDPool);\\n\\n    iCHI public CHI = iCHI(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n\\n\\n    address selfAddr = address(this);\\n\\n    uint256 public susdDeposits = iSUSDPool.deposits(selfAddr);\\n    uint256 public usdcDeposits = iUSDCPool.deposits(selfAddr);\\n    uint256 public usdtDeposits = iUSDTPool.deposits(selfAddr);\\n    uint256 public daiDeposits = iDaiPool.deposits(selfAddr);\\n\\n    //Bools for internal stuff\\n    bool approved = false;\\n    bool reinvestsUSD = true;\\n\\n\\n    IUniswapV2Router02  public  IUniswapV2Router = IUniswapV2Router02(UniRouter);\\n\\n    //Whitelisted callers\\n    mapping (address => bool) public whitelistedExecutors;\\n\\n    constructor() public {\\n        whitelistedExecutors[msg.sender] = true;\\n    }\\n\\n    modifier discountCHI() {\\n        uint256 gasStart = gasleft();\\n        _;\\n        uint256 gasSpent = 21000 + gasStart.sub(gasleft()) + 16 * msg.data.length;\\n        CHI.freeFromUpTo(selfAddr, (gasSpent + 14154) / 41947);\\n    }\\n\\n    modifier onlyWhitelisted(){\\n        require(whitelistedExecutors[_msgSender()]);\\n        _;\\n    }\\n\\n    function revokeWhitelisted(address addx) public onlyOwner {\\n        whitelistedExecutors[addx] = false;\\n\\n    }\\n\\n    function addWhitelisted(address addx) public onlyOwner {\\n        whitelistedExecutors[addx] = true;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner override {\\n        addWhitelisted(newOwner);\\n        revokeWhitelisted(msg.sender);\\n        super.transferOwnership(newOwner);\\n    }\\n\\n    /* Helper funcs */\\n\\n    function getTokenBalanceOfAddr(address tokenAddress,address dest) public view returns (uint256){\\n        return IERC20(tokenAddress).balanceOf(dest);\\n    }\\n    function getTokenBalance(address tokenAddress) public view returns (uint256){\\n       return getTokenBalanceOfAddr(tokenAddress,selfAddr);\\n    }\\n\\n    function ApproveInf(address token,address spender) internal{\\n        TransferHelper.safeApprove(token,spender,INFINITE_ALLOWANCE);\\n    }\\n\\n    function doApprovals() public {\\n        //Approve bas to swap to dai\\n        ApproveInf(BAS,UniRouter);\\n        //Approve tokens for the pools\\n        ApproveInf(USDT,USDTPool);\\n        ApproveInf(USDC,USDCPool);\\n        ApproveInf(DAI,DaiPool);\\n        ApproveInf(SUSD,SUSDPool);\\n        approved = true;\\n    }\\n\\n    function PullTokenBalance(address token) internal {\\n        TransferHelper.safeTransferFrom(token,owner(),selfAddr,getTokenBalanceOfAddr(token,owner()));\\n    }\\n\\n    function pullStables() public onlyOwner {\\n        PullTokenBalance(USDT);\\n        PullTokenBalance(USDC);\\n        PullTokenBalance(DAI);\\n        PullTokenBalance(SUSD);\\n    }\\n\\n    function pullSUSD() public onlyOwner {\\n        PullTokenBalance(SUSD);\\n    }\\n\\n    function updateDepositAmounts() public {\\n        susdDeposits = iSUSDPool.deposits(selfAddr);\\n        usdcDeposits = iUSDCPool.deposits(selfAddr);\\n        usdtDeposits = iUSDTPool.deposits(selfAddr);\\n        daiDeposits =  iDaiPool.deposits(selfAddr);\\n    }\\n\\n    function toggleReinvest() public onlyOwner {\\n        reinvestsUSD = !reinvestsUSD;\\n    }\\n\\n    function depositAll() public onlyOwner {\\n        //Get balances\\n        uint256 usdtBal = getTokenBalance(USDT);\\n        uint256 usdcBal = getTokenBalance(USDC);\\n        uint256 daiBal = getTokenBalance(DAI);\\n        uint256 susdBal = getTokenBalance(SUSD);\\n\\n        //Check balance and deposit\\n        if(usdtBal > 0)\\n            iUSDTPool.stake(usdtBal);\\n\\n        if(usdcBal > 0)\\n            iUSDCPool.stake(usdcBal);\\n\\n        if(daiBal > 0)\\n            iDaiPool.stake(daiBal);\\n\\n        if(susdBal > 0)\\n            iSUSDPool.stake(susdBal);\\n        //Update deposits\\n        updateDepositAmounts();\\n    }\\n\\n    //Exit all pools without getting bas reward,used incase something messes up on farm contract\\n    function emergencyWithdrawAll() public onlyOwner {\\n        if(susdDeposits > 0)\\n            iSUSDPool.withdraw(susdDeposits);\\n        if(usdcDeposits > 0)\\n            iUSDCPool.withdraw(usdcDeposits);\\n        if(daiDeposits >  0)\\n            iDaiPool.withdraw(daiDeposits);\\n        if(usdtDeposits > 0)\\n            iUSDTPool.withdraw(usdtDeposits);\\n    }\\n\\n    function withdrawAllWithRewards() public onlyOwner {\\n        //Call exit on all pools,which gives collateral and rewards\\n        if(susdDeposits > 0)\\n            iSUSDPool.exit();\\n        if(usdcDeposits > 0)\\n            iUSDCPool.exit();\\n        if(daiDeposits >  0)\\n            iDaiPool.exit();\\n        if(usdtDeposits > 0)\\n            iUSDTPool.exit();\\n        //Update deposit data\\n        updateDepositAmounts();\\n    }\\n\\n    function getTotalEarned() public view returns (uint256) {\\n        uint256 usdtPoolEarned = iUSDTPool.earned(selfAddr);\\n        uint256 usdcPoolEarned = iUSDCPool.earned(selfAddr);\\n        uint256 susdPoolEarned = iSUSDPool.earned(selfAddr);\\n        uint256 daiPoolEarned = iDaiPool.earned(selfAddr);\\n        return usdtPoolEarned + usdcPoolEarned + susdPoolEarned + daiPoolEarned;\\n    }\\n\\n    function getEstimatedSUSDProfit() public view returns (uint256) {\\n        return IUniswapV2Router.getAmountsOut(getTotalEarned(),getPathForTokenToTokenTrip(BAS,DAI,SUSD))[2];\\n    }\\n\\n    function getRewards() public onlyWhitelisted {\\n        //Get bas rewards\\n        if(susdDeposits > 0)\\n            iSUSDPool.getReward();\\n        if(usdcDeposits > 0)\\n            iUSDCPool.getReward();\\n        if(daiDeposits > 0)\\n            iDaiPool.getReward();\\n        if(usdtDeposits > 0)\\n            iUSDTPool.getReward();\\n    }\\n\\n    function recoverERC20(address tokenAddress) public onlyOwner {\\n        TransferHelper.safeTransfer(tokenAddress,owner(),getTokenBalance(tokenAddress));\\n    }\\n\\n    function getPathForTokenToToken(address token1,address token2) private pure returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = token1;\\n        path[1] = token2;\\n        return path;\\n    }\\n\\n    function getPathForTokenToTokenTrip(address token1,address token2,address token3) private pure returns (address[] memory) {\\n        address[] memory path = new address[](3);\\n        path[0] = token1;\\n        path[1] = token2;\\n        path[2] = token3;\\n        return path;\\n    }\\n\\n    function swapWithPath(address[] memory path) internal{\\n        uint256 token1Balance = getTokenBalance(path[0]);\\n        IUniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(token1Balance,0,path,selfAddr,now + 2 hours);\\n    }\\n\\n    function swapTokenfortoken(address token1,address token2) internal{\\n        swapWithPath(getPathForTokenToToken(token1,token2));\\n    }\\n\\n    function takeProfits() public onlyWhitelisted {\\n        getRewards();\\n        if(getTokenBalance(BAS) > 0){\\n            //Swap bas to dai,then to susd\\n            swapWithPath(getPathForTokenToTokenTrip(BAS,DAI,SUSD));\\n        }\\n        uint256 sUSDBal = getTokenBalance(SUSD);\\n        if(reinvestsUSD && sUSDBal > 0) {\\n            //ReInvest SUSD back in pool\\n            iSUSDPool.stake(sUSDBal);\\n            updateDepositAmounts();\\n        }\\n    }\\n\\n    function takeProfitsWithCHI() public discountCHI {\\n        takeProfits();\\n    }\\n\\n    function withdrawStables() public onlyOwner {\\n        withdrawAllWithRewards();\\n        //Sell profits to susd\\n        if(getTokenBalance(BAS) > 0) {\\n            swapWithPath(getPathForTokenToTokenTrip(BAS,DAI,SUSD));\\n        }\\n        //Get balances\\n        uint256 usdtBal = getTokenBalance(USDT);\\n        uint256 usdcBal = getTokenBalance(USDC);\\n        uint256 daiBal = getTokenBalance(DAI);\\n        uint256 susdBal = getTokenBalance(SUSD);\\n        //Withdraw the stables from contract\\n        if(usdtBal > 0)\\n            recoverERC20(USDT);\\n        if(usdcBal > 0)\\n            recoverERC20(USDC);\\n        if(daiBal > 0)\\n            recoverERC20(DAI);\\n        if(susdBal > 0)\\n            recoverERC20(SUSD);\\n    }\\n\\n    function depositAllDiscounted() public discountCHI {\\n        depositAll();\\n    }\\n\\n    function withdrawStablesDiscounted() public discountCHI {\\n        withdrawStables();\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/bacfarmer/contracts/IUniswapRouterV02.sol\": {\r\n      \"content\": \"\\n//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/bacfarmer/contracts/IUniswapV2Router01.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/bacfarmer/contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferWithReturn(address token, address to, uint value) internal returns (bool) {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        return (success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHI\",\"outputs\":[{\"internalType\":\"contract iCHI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DaiPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IUniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSDPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addx\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAllDiscounted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimatedSUSDProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"getTokenBalanceOfAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullSUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullStables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addx\",\"type\":\"address\"}],\"name\":\"revokeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susdDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfitsWithCHI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDepositAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedExecutors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllWithRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStablesDiscounted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BACFarmerv5","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}