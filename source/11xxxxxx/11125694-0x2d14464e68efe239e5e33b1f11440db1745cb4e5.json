{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract RewardChannel {\r\n    address _owner;\r\n    IERC20 reward_token;\r\n    claimRecord[] claimHistory;\r\n    claimRecord[] pending;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function moveToNewChannel(address newChannel) public onlyOwner {\r\n        require(newChannel != address(0));\r\n        uint256 bal = reward_token.balanceOf(address(this));\r\n        reward_token.transfer(newChannel, bal);\r\n    }\r\n\r\n    struct claimRecord {\r\n        uint256 amount;\r\n        uint256 blcok_number;\r\n        uint256 expired_block;\r\n        bytes sig;\r\n        address receiver;\r\n    }\r\n\r\n    function RewardChannel(IERC20 _reward_token) public payable {\r\n        _owner = msg.sender;\r\n        reward_token = _reward_token;\r\n    }\r\n\r\n    function claimReward(\r\n        uint256 amount,\r\n        uint256 expired_block,\r\n        bytes signature\r\n    ) public {\r\n        clear_pending_list();\r\n        require(amount != 0);\r\n        bool signature_not_exist = true;\r\n        for (uint256 i = 0; i < claimHistory.length; i++) {\r\n            claimRecord memory record = claimHistory[i];\r\n            if (signature_compare(signature, record.sig) == true) {\r\n                signature_not_exist = false;\r\n            }\r\n            if (block.number > record.expired_block) {\r\n                delete (claimHistory[i]);\r\n            }\r\n        }\r\n        require(signature_not_exist);\r\n        bytes32 message = keccak256(msg.sender, amount, expired_block);\r\n        require(recoverSigner(message, signature) == _owner);\r\n        require(block.number < expired_block);\r\n        claimRecord memory newRecord = claimRecord({\r\n            amount: amount,\r\n            blcok_number: block.number,\r\n            expired_block: expired_block,\r\n            sig: signature,\r\n            receiver: msg.sender\r\n        });\r\n        claimHistory.push(newRecord);\r\n        pending.push(newRecord);\r\n    }\r\n\r\n    function signature_compare(bytes a, bytes b) internal pure returns (bool) {\r\n        if (a.length != b.length) {\r\n            return false;\r\n        }\r\n        for (uint256 i = 0; i < a.length; i++) {\r\n            if (a[i] != b[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function clear_pending_list() public {\r\n        for (uint256 i = 0; i < pending.length; i++) {\r\n            claimRecord memory record = pending[i];\r\n            if (is_duplicate(record.sig) == false) {\r\n                safeTGXTransfer(record.receiver, record.amount);\r\n            } else {\r\n                delete (pending[i]);\r\n            }\r\n        }\r\n        delete (pending);\r\n    }\r\n\r\n    function is_duplicate(bytes sig) internal view returns (bool) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < pending.length; i++) {\r\n            claimRecord memory record = pending[i];\r\n            if (signature_compare(sig, record.sig) == true) {\r\n                if (count == 1) {\r\n                    return true;\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function safeTGXTransfer(address _to, uint256 _amount) internal {\r\n        uint256 reward_pool_balance = reward_token.balanceOf(address(this));\r\n        if (_amount > reward_pool_balance) {\r\n            reward_token.transfer(_to, reward_pool_balance);\r\n        } else {\r\n            reward_token.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function splitSignature(bytes sig)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint8,\r\n            bytes32,\r\n            bytes32\r\n        )\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"clear_pending_list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expired_block\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newChannel\",\"type\":\"address\"}],\"name\":\"moveToNewChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RewardChannel","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000364a7381a5b378ced7ab33d1cdf6ff1bf162bfd6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://97c980633411666f8a03e7f213b2ce87036f77d56331c9de34fdc1a4be4a3402"}]}