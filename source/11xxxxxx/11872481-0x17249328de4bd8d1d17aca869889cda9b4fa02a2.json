{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/interfaces/IUniswapV2.sol\n\npragma solidity ^0.6.0;\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Factory {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function getPair(IERC20 tokenA, IERC20 tokenB)\n        external\n        view\n        returns (IUniswapV2Exchange pair);\n}\n\ninterface IUniswapV2Exchange {\n    //event Approval(address indexed owner, address indexed spender, uint value);\n    //event Transfer(address indexed from, address indexed to, uint value);\n\n    //function name() external pure returns (string memory);\n    //function symbol() external pure returns (string memory);\n    //function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    //function allowance(address owner, address spender) external view returns (uint);\n    //function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n\n    //function transferFrom(address from, address to, uint value) external returns (bool);\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\n    //function nonces(address owner) external view returns (uint);\n\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    //event Mint(address indexed sender, uint amount0, uint amount1);\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    /*event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n\nfunction getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n    */\n}\n\n// File: contracts/interfaces/IExternalPool.sol\n\npragma solidity ^0.6.0;\n\nabstract contract IExternalPool {\n    address public enterToken;\n\n    function getPoolValue(address denominator)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    function getTokenStaked() external view virtual returns (uint256);\n\n    function addPosition() external virtual returns (uint256);\n\n    function exitPosition(uint256 amount) external virtual;\n\n    function claimValue() external virtual;\n\n    function transferTokenTo(\n        address TokenAddress,\n        address recipient,\n        uint256 amount\n    ) external virtual returns (uint256);\n}\n\n// File: contracts/interfaces/ISFToken.sol\n\npragma solidity ^0.6.0;\n\ninterface ISFToken {\n    function rebase(uint256 totalSupply) external;\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n}\n\n// File: contracts/interfaces/ICHI.sol\n\npragma solidity ^0.6.12;\n\ninterface ICHI {\n    function freeFromUpTo(address from, uint256 value)\n        external\n        returns (uint256);\n\n    function freeUpTo(uint256 value) external returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function mint(uint256 value) external;\n}\n\n// File: contracts/CHIBurner.sol\n\npragma solidity ^0.6.12;\n\ncontract CHIBurner {\n    address internal constant CHI_ADDRESS =\n        0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n    ICHI internal constant chi = ICHI(CHI_ADDRESS);\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n\n        uint256 gasLeft = gasleft();\n        uint256 gasSpent = 21000 + gasStart - gasLeft + 16 * msg.data.length;\n\n        chi.freeUpTo((gasSpent + 14154) / 41947);\n    }\n}\n\n// File: contracts/utils/SafeERC20.sol\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\npragma solidity ^0.6.12;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).sub(\n                value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata =\n            address(token).functionCall(\n                data,\n                \"SafeERC20: low-level call failed\"\n            );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\nlibrary UniversalERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function universalTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token == IERC20(0)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    function universalApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token != IERC20(0)) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token == IERC20(0)) {\n            require(\n                from == msg.sender && msg.value >= amount,\n                \"msg.value is zero\"\n            );\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who)\n        internal\n        view\n        returns (uint256)\n    {\n        if (token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n\n// File: contracts/interfaces/IXChanger.sol\n\npragma solidity ^0.6.0;\n\ninterface XChanger {\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) external payable returns (uint256 result);\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) external view returns (uint256 returnAmount);\n\n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    ) external view returns (uint256 inputAmount);\n}\n\n// File: contracts/XChangerUser.sol\n\npragma solidity ^0.6.12;\n\n/**\n * @dev Helper contract to communicate to XChanger(XTrinity) contract to obtain prices and change tokens as needed\n */\ncontract XChangerUser {\n    using UniversalERC20 for IERC20;\n\n    XChanger public xchanger;\n\n    /**\n     * @dev get a price of one token amount in another\n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param amount - of the fromToken\n     */\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) public view returns (uint256 returnAmount) {\n        if (fromToken == toToken) {\n            returnAmount = amount;\n        } else {\n            (bool success, bytes memory data) =\n                address(xchanger).staticcall(\n                    abi.encodeWithSelector(\n                        xchanger.quote.selector,\n                        fromToken,\n                        toToken,\n                        amount\n                    )\n                );\n\n            require(\n                success && data.length > 0,\n                \"XChanger quote not successful\"\n            );\n\n            (returnAmount) = abi.decode(data, (uint256));\n        }\n    }\n\n    /**\n     * @dev get a reverse price of one token amount in another\n     * the opposite of above 'quote' method when we need to understand how much we need to spend actually\n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param returnAmount - of the toToken\n     */\n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    ) public view returns (uint256 inputAmount) {\n        if (fromToken == toToken) {\n            inputAmount = returnAmount;\n        } else {\n            (bool success, bytes memory data) =\n                address(xchanger).staticcall(\n                    abi.encodeWithSelector(\n                        xchanger.reverseQuote.selector,\n                        fromToken,\n                        toToken,\n                        returnAmount\n                    )\n                );\n            require(\n                success && data.length > 0,\n                \"XChanger reverseQuote not successful\"\n            );\n\n            (inputAmount) = abi.decode(data, (uint256));\n            inputAmount += 1; // Curve requires this\n        }\n    }\n\n    /**\n     * @dev swap one token to another given the amount we want to spend\n     \n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param amount - of the fromToken we are spending\n     * @param slipProtect - flag to ensure the transaction will be performed if the received amount is not less than expected within the given slip %% range (like 1%)\n     */\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) public payable returns (uint256 returnAmount) {\n        if (\n            fromToken.allowance(address(this), address(xchanger)) != uint256(-1)\n        ) {\n            fromToken.universalApprove(address(xchanger), uint256(-1));\n        }\n\n        returnAmount = xchanger.swap(fromToken, toToken, amount, slipProtect);\n    }\n}\n\n// File: contracts/interfaces/IWETH.sol\n\npragma solidity ^0.6.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n// File: contracts/access/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/utils/ReentrancyGuard.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev useful addon to limit one call per block - to be used with multiple different excluding methods - e.g. mint and burn\n     *\n     */\n\n    mapping(address => uint256) public lastblock;\n\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        /**\n         * @dev useful addon to limit one call per block - to be used with multiple different excluding methods - e.g. mint and burn\n         *\n         */\n        require(\n            lastblock[tx.origin] != block.number,\n            \"Reentrancy: this block is used\"\n        );\n        lastblock[tx.origin] = block.number;\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/ValueHolder.sol\n\npragma solidity ^0.6.12;\n\n/**\n * @title ValueHolder main administrative contract\n * @dev Main contract controlling the Mint/Burn/Rebase operations of a token.\n * Retrieves values from a multiple external/internal (Uni) pools in denominated [DAI] tokens\n */\ncontract ValueHolder is Ownable, CHIBurner, XChangerUser, ReentrancyGuard {\n    using UniversalERC20 for IERC20;\n    using SafeMath for uint256;\n\n    mapping(uint256 => address) public uniPools;\n    mapping(uint256 => address) public externalPools;\n\n    uint256 public uniLen;\n    uint256 public extLen;\n\n    address public SFToken;\n    address public denominateTo;\n    uint8 private denominateDecimals;\n    uint8 private sfDecimals;\n\n    address public votedPool;\n    enum PoolType {EXT, UNI}\n    PoolType public votedPoolType;\n\n    uint256 public votedFee; // 1% = 100\n    uint256 public votedPerformanceFee; // 1% = 100\n    uint256 public votedChi; // number of Chi to hold\n\n    uint256 private constant fpDigits = 8;\n    uint256 private constant fpNumbers = 10**fpDigits;\n\n    event LogValueManagerUpdated(address Manager);\n    event LogVoterUpdated(address Voter);\n    event LogVotedExtPoolUpdated(address pool, PoolType poolType);\n    event LogVotedUniPoolUpdated(address pool);\n    event LogSFTokenUpdated(address _NewSFToken);\n    event LogXChangerUpdated(address _NewXChanger);\n    event LogFeeUpdated(uint256 newFee);\n    event LogPerformanceFeeUpdated(uint256 newFee);\n    event LogFeeTaken(uint256 feeAmount);\n    event LogMintTaken(uint256 fromTokenAmount);\n    event LogBurnGiven(uint256 toTokenAmount);\n    event LogChiToppedUpdated(uint256 spendAmount);\n    address public ValueManager;\n\n    //address private constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address private constant DAI_ADDRESS =\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    IERC20 private constant WETH_ADDRESS =\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    bool private initialized;\n\n    /**\n     * @dev some functions should be available only to Value Manager address\n     */\n    modifier onlyValueManager() {\n        require(msg.sender == ValueManager, \"Not Value Manager\");\n        _;\n    }\n\n    /**\n     * @dev some functions should be available only to Voter address - separate contract is TBD\n     */\n    address public Voter;\n    modifier onlyVoter() {\n        require(msg.sender == Voter, \"Not Voter\");\n        _;\n    }\n\n    /**\n     * @dev for some methods we are not interested in being accessed by attacking contracts. Yes, we know this is not a useful pattern.\n     * But why? We love the idea of using EOA, contracts need to have a clear use case.\n     */\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin, \"Only EOA\");\n        _;\n    }\n\n    /**\n     * @dev initializer method instead of a constructor - to be used behind a proxy\n     */\n    function init(\n        address _votePool,\n        PoolType _votePoolType,\n        address _sfToken,\n        address _Xchanger\n    ) public {\n        //XChanger._init();\n        require(!initialized, \"Initialized\");\n        initialized = true;\n        _initVariables(_votePool, _votePoolType, _sfToken, _Xchanger);\n        Ownable.initialize(); // Do not forget this call!\n    }\n\n    /**\n     * @dev internal variable initialization\n     * @param _votePool - main pool to add value by default\n     * @param _votePoolType - main pool type (External or Uni)\n     * @param _sfToken - main S/F ERC20 token\n     * @param _Xchanger - XChanger(XTrinity) contract to be used for quotes and swaps\n     */\n    function _initVariables(\n        address _votePool,\n        PoolType _votePoolType,\n        address _sfToken,\n        address _Xchanger\n    ) internal {\n        uniLen = 0;\n        extLen = 0;\n        //0x3041CbD36888bECc7bbCBc0045E3B1f144466f5f UNI\n\n        externalPools[extLen] = _votePool;\n        extLen++;\n\n        votedPool = _votePool;\n        votedPoolType = _votePoolType;\n        if (votedPoolType == PoolType.UNI) {\n            uniPools[uniLen] = _votePool;\n            uniLen++;\n        }\n\n        emit LogVotedExtPoolUpdated(_votePool, _votePoolType);\n\n        denominateTo = DAI_ADDRESS; //0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\n        denominateDecimals = IERC20(denominateTo).decimals();\n        SFToken = _sfToken; //\n        sfDecimals = IERC20(_sfToken).decimals();\n        ValueManager = msg.sender;\n        Voter = msg.sender;\n        xchanger = XChanger(_Xchanger);\n        votedFee = 200;\n        votedChi = 10;\n        votedPerformanceFee = 1000;\n    }\n\n    /**\n     * @dev re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already.\n     * This method might help fixing the storage state.\n     */\n    function reInit(\n        address _extPool,\n        PoolType _votePoolType,\n        address _sfToken,\n        address _Xchanger\n    ) public onlyOwner {\n        _initVariables(_extPool, _votePoolType, _sfToken, _Xchanger);\n    }\n\n    /**\n     * @dev set a new S/F ERC20 token address - only if we need to\n     *\n     */\n    function setSFToken(address _NewSFToken) public onlyVoter {\n        SFToken = _NewSFToken;\n        sfDecimals = IERC20(_NewSFToken).decimals();\n        emit LogSFTokenUpdated(_NewSFToken);\n    }\n\n    /**\n     * @dev set new Value Manager address\n     */\n    function setValueManager(address _ValueManager) external onlyOwner {\n        ValueManager = _ValueManager;\n        emit LogValueManagerUpdated(_ValueManager);\n    }\n\n    /**\n     * @dev set new Voter address\n     */\n    function setVoter(address _Voter) external onlyOwner {\n        Voter = _Voter;\n        emit LogVoterUpdated(_Voter);\n    }\n\n    /**\n     * @dev set new XChanger/XTrinity address\n     */\n    function setXChangerImpl(address _Xchanger) external onlyVoter {\n        xchanger = XChanger(_Xchanger);\n        emit LogSFTokenUpdated(_Xchanger);\n    }\n\n    /**\n     * @dev set new Voted (default) pool for adding value\n     */\n    function setVotedPool(address pool, PoolType poolType) public onlyVoter {\n        votedPool = pool;\n        votedPoolType = poolType;\n        emit LogVotedExtPoolUpdated(pool, poolType);\n    }\n\n    /**\n     * @dev set new fee amount - used upon exit. value 200 = 2% fee\n     */\n    function setVotedFee(uint256 _votedFee) public onlyVoter {\n        votedFee = _votedFee;\n        emit LogFeeUpdated(_votedFee);\n    }\n\n    /**\n     * @dev set new fee amount - used upon exit. value 200 = 2% fee\n     */\n    function setVvotedPerformanceFee(uint256 _votedPerformanceFee)\n        public\n        onlyVoter\n    {\n        votedPerformanceFee = _votedPerformanceFee;\n        emit LogPerformanceFeeUpdated(_votedPerformanceFee);\n    }\n\n    /**\n     * @dev set new Chi amount to hold in the contract to save gas for mint/burn TXs\n     */\n    function setVotedChi(uint256 _votedChi) public onlyVoter {\n        votedChi = _votedChi;\n    }\n\n    /**\n     * @dev Value Manager can only access the tokens at this contract. Normally it is not used in the workflow.\n     */\n    function retrieveToken(address TokenAddress)\n        external\n        onlyValueManager\n        returns (uint256)\n    {\n        IERC20 Token = IERC20(TokenAddress);\n        uint256 balance = Token.balanceOf(address(this));\n        Token.universalTransfer(msg.sender, balance);\n        return balance;\n    }\n\n    /**\n     * @dev Check if we have enough CHi token in the contract and obtain some by minting or using exchanges\n     * TODO: check if msg.sender can give us some too\n     */\n    function topUpChi(IERC20 Token, uint256 amountAvailable)\n        public\n        returns (uint256 spendAmount)\n    {\n        uint256 currentChi = chi.balanceOf(address(this));\n        if (currentChi < votedChi) {\n            uint256 getChi = votedChi.div(2);\n\n            if (tx.gasprice < 30000000000) {\n                //cheap gas -> we can mint instead of buying\n                chi.mint(getChi);\n            } else {\n                IERC20 _Chi = IERC20(CHI_ADDRESS);\n                //top up 1/2 votedChi\n                spendAmount = reverseQuote(Token, _Chi, getChi);\n\n                if (amountAvailable >= spendAmount) {\n                    swap(Token, _Chi, spendAmount, false);\n                    LogChiToppedUpdated(spendAmount);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Method to tell us roughly how much resulting S/F token will be minted from the token given\n     * TODO: implement UNI pools\n     */\n    function mintQuote(address fromToken, uint256 amount)\n        external\n        view\n        returns (uint256 returnAmount)\n    {\n        require(votedPool != address(0), \"No voted pool available\");\n        if (votedPoolType == PoolType.EXT) {\n            IERC20 _fromToken = IERC20(fromToken);\n            IERC20 _toToken = IERC20(IExternalPool(votedPool).enterToken());\n\n            (returnAmount) = quote(_fromToken, _toToken, amount);\n\n            (returnAmount) = quote(\n                _toToken,\n                IERC20(denominateTo),\n                returnAmount\n            );\n        } else {\n            revert(\"Other not yet implemented\");\n        }\n    }\n\n    /**\n     * @dev payable fallback aka mint from eth to default\n     */\n    receive() external payable {\n        if (msg.sender != address(WETH_ADDRESS)) {\n            require(votedPool != address(0), \"No voted pool available\");\n            require(msg.value > 0);\n            mint(votedPool, votedPoolType, address(0), msg.value);\n        }\n    }\n\n    /**\n     * @dev Generic Mint to the Voted Pool\n     */\n    function mint(address fromToken, uint256 amount)\n        external\n        payable\n        returns (uint256 toMint)\n    {\n        require(votedPool != address(0), \"No voted pool available\");\n        toMint = mint(votedPool, votedPoolType, fromToken, amount);\n    }\n\n    /**\n     * @dev Main mint S/F token method\n     * takes any token, converts it as required and puts it into a default (Voted) pool\n     * resulting additional value is minted as S/F tokens (denominated in [DAI])\n     * some Chi may be taken from the input value to make the transaction cheaper and\n     * leave some Chi for future transactions\n     */\n\n    function mint(\n        address _pool,\n        PoolType _poolType,\n        address fromToken,\n        uint256 amount\n    ) public payable discountCHI onlyEOA nonReentrant returns (uint256 toMint) {\n        require(amount > 0, \"Mint does not make sense\");\n\n        IERC20 _fromToken = IERC20(fromToken);\n        uint256 balanceBefore;\n\n        if (fromToken != address(0)) {\n            require(\n                _fromToken.allowance(msg.sender, address(this)) >= amount,\n                \"Allowance is not enough\"\n            );\n            balanceBefore = _fromToken.balanceOf(address(this));\n            _fromToken.universalTransferFrom(msg.sender, address(this), amount);\n            //confirmed amount\n            amount = _fromToken.balanceOf(address(this)).sub(balanceBefore);\n        } else {\n            //convert to WETH\n            fromToken = address(WETH_ADDRESS);\n            _fromToken = WETH_ADDRESS;\n            balanceBefore = _fromToken.balanceOf(address(this));\n            IWETH(address(WETH_ADDRESS)).deposit{value: msg.value}();\n            amount = _fromToken.balanceOf(address(this)).sub(balanceBefore);\n        }\n        emit LogMintTaken(amount);\n\n        amount = amount.sub(topUpChi(_fromToken, amount));\n\n        // we rebase before depositing token to pool as we dont want to count it yet\n        _rebaseOnChain();\n\n        if (_poolType == PoolType.EXT) {\n            //check if _pool is legitimate\n            require(checkLegitPool(externalPools, extLen, _pool), \"Wrong pool\");\n\n            //External pool flow - standard methods should be used to get the enter token and add to position\n            IExternalPool extPool = IExternalPool(_pool);\n            IERC20 _toToken = IERC20(extPool.enterToken());\n\n            uint256 returnAmount = swap(_fromToken, _toToken, amount, false);\n\n            _toToken.universalTransfer(\n                votedPool,\n                _toToken.balanceOf(address(this))\n            );\n            extPool.addPosition();\n\n            // convert return amount to [denominateTo], if _toToken = denominateTo then amount is the same\n            toMint = quote(_toToken, IERC20(denominateTo), returnAmount);\n        } else {\n            require(checkLegitPool(uniPools, uniLen, _pool), \"Wrong pool\");\n\n            //Uniswap pool flow - we need to split the token into 2 parts and change accordingly to add to UNI LP\n            IUniswapV2Exchange pair = IUniswapV2Exchange(_pool);\n\n            (uint256 I0, uint256 I1, address token0, address token1) =\n                getUniSplit(amount, pair, _fromToken, false);\n\n            uint256 amount0 = swap(_fromToken, IERC20(token0), I0, false);\n            uint256 amount1 = swap(_fromToken, IERC20(token1), I1, false);\n\n            IERC20(token0).universalTransfer(address(pair), amount0);\n            IERC20(token1).universalTransfer(address(pair), amount1);\n\n            pair.mint(address(this));\n\n            toMint = quote(IERC20(token0), IERC20(denominateTo), amount0);\n            toMint += quote(IERC20(token1), IERC20(denominateTo), amount1);\n        }\n\n        // mint that amount to sender\n        require(toMint > 0, \"Nothing to mint\");\n        toMint = toSFDecimals(toMint);\n        ISFToken(SFToken).mint(msg.sender, toMint);\n    }\n\n    /**\n     * @dev Internal function to check if selected pool was added to the config (by voting)\n     */\n    function checkLegitPool(\n        mapping(uint256 => address) storage somePools,\n        uint256 poolLen,\n        address _pool\n    ) internal view returns (bool poolLegit) {\n        poolLegit = false;\n        for (uint256 i = 0; i < poolLen; i++) {\n            if (somePools[i] == _pool) {\n                poolLegit = true;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @dev Internal function to help calculating a multiplier for Uni pools\n     */\n    function _P(\n        uint256 Q0,\n        uint256 Q1,\n        IUniswapV2Exchange pair\n    ) internal view returns (uint256 P) {\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\n        require(reserve0 > 0 && reserve1 > 0, \"UNI pool is empty\");\n\n        P = (reserve0.mul(Q1).mul(10**fpDigits)).div(reserve1.mul(Q0));\n    }\n\n    /**\n     * @dev Internal function to help calculating an input amount for Uni Pools\n     */\n    function _I0(uint256 P, uint256 Q) internal pure returns (uint256 I0) {\n        I0 = Q.mul(fpNumbers**2).div(P.add(fpNumbers)).div(fpNumbers);\n    }\n\n    /**\n     * @dev Internal function to help calculating a proper split between tokens for a given Uni pool,\n     * @param Q - input token quantity\n     * @param pair - Uni/Sushi liquidity pool\n     * @param fromToken - ERC20 token to convert and add to LP\n     * @param reverse - if we need to extract value from the pool, not add\n     */\n    function getUniSplit(\n        uint256 Q,\n        IUniswapV2Exchange pair,\n        IERC20 fromToken,\n        bool reverse\n    )\n        internal\n        view\n        returns (\n            uint256 I0,\n            uint256 I1,\n            address token0,\n            address token1\n        )\n    {\n        token0 = pair.token0();\n        token1 = pair.token1();\n\n        uint256 I = Q.div(2);\n\n        uint256 Q0;\n        uint256 Q1;\n\n        if (reverse) {\n            Q0 = reverseQuote(IERC20(token0), fromToken, I);\n            Q1 = reverseQuote(IERC20(token1), fromToken, I);\n        } else {\n            Q0 = quote(fromToken, IERC20(token0), I);\n            Q1 = quote(fromToken, IERC20(token1), I);\n        }\n\n        uint256 P = _P(Q0, Q1, pair);\n\n        I0 = _I0(P, Q);\n        I1 = Q - I0;\n\n        if (reverse) {\n            I0 = reverseQuote(IERC20(token0), fromToken, I0);\n            I1 = reverseQuote(IERC20(token1), fromToken, I1);\n        }\n    }\n\n    /**\n     * @dev Method to pick a suitable Uni/External pool to extract the required value for burning\n     */\n    function pickPoolToExtract(uint256 amount)\n        public\n        view\n        returns (address pool, PoolType poolType)\n    {\n        //check UNI pool values\n        for (uint256 i = 0; i < uniLen; i++) {\n            address uniAddress = uniPools[i];\n\n            uint256 PairReserve;\n            if (uniAddress != address(0)) {\n                IUniswapV2Exchange uniPool = IUniswapV2Exchange(uniAddress);\n                (uint256 myreserve0, uint256 myreserve1) =\n                    getDenominatedValue(uniPool);\n\n                PairReserve += myreserve0;\n                PairReserve += myreserve1;\n\n                if (PairReserve >= amount) {\n                    return (uniAddress, PoolType.UNI);\n                }\n            }\n        }\n\n        for (uint256 i = 0; i < extLen; i++) {\n            address extAddress = externalPools[i];\n\n            if (extAddress != address(0)) {\n                // get quote to denominateTo\n                IExternalPool extPool = IExternalPool(extAddress);\n                uint256 poolValue =\n                    quote(\n                        IERC20(extPool.enterToken()),\n                        IERC20(denominateTo),\n                        extPool.getTokenStaked()\n                    );\n                if (poolValue >= amount) {\n                    return (extAddress, PoolType.EXT);\n                }\n            }\n        }\n\n        require(pool != address(0), \"No pool for requested amount\");\n    }\n\n    /**\n     * @dev Main method to burn S/F tokens and get back the requested amount from denominated token [DAI] to user\n     * NB: flashloan attacks shold be discouraged\n     * NB: considering to split it into 2 separate transactions, to disregard the flashloan use. \n    \n     */\n    function burn(address toToken, uint256 amount)\n        external\n        discountCHI\n        onlyEOA\n        nonReentrant\n        returns (uint256 toBurn)\n    {\n        if (toToken == address(0)) {\n            toToken = address(WETH_ADDRESS);\n        }\n\n        IERC20 _toToken = IERC20(toToken);\n        ISFToken _SFToken = ISFToken(SFToken);\n        // get latest token value, we don't want to burn more than expected if the value drops down\n        _rebaseOnChain();\n\n        // limit by existing balance - be can burn only that value and no more than that\n        uint256 senderBalance = _SFToken.balanceOf(msg.sender);\n        if (senderBalance < amount) {\n            amount = senderBalance;\n        }\n        require(amount > 0, \"Not enough burn balance\");\n        toBurn = amount;\n        _SFToken.burn(msg.sender, toBurn);\n\n        /// convert to denominateTo\n        amount = fromSFDecimals(amount);\n        uint256 feeTaken = getFee(amount);\n        emit LogFeeTaken(feeTaken);\n        amount -= feeTaken;\n\n        //Find the suitable pool to extract value\n        (address pool, PoolType poolType) = pickPoolToExtract(amount);\n\n        uint256 returnAmount;\n\n        if (poolType == PoolType.EXT) {\n            //External pool flow\n            IExternalPool extPool = IExternalPool(pool);\n            address poolToken = extPool.enterToken();\n\n            // get quote from sf token to pool token\n            // how much pool token [DAI?] is needed to make this amount of [denominateTo] (also DAI now)\n            // poolToken might be == denominateTo, in that case the price skew (FL attack) seem to be eliminated\n            uint256 poolTokenWithdraw =\n                reverseQuote(IERC20(poolToken), IERC20(denominateTo), amount);\n\n            require(poolTokenWithdraw > 0, \"Reverse Quote is 0\");\n\n            //pull out pool tokens\n            extPool.exitPosition(poolTokenWithdraw);\n            //get them out from the pool here\n            uint256 returnPoolTokenAmount =\n                extPool.transferTokenTo(\n                    poolToken,\n                    address(this),\n                    poolTokenWithdraw\n                );\n\n            // topup our contract with CHi to save on gas\n            returnPoolTokenAmount = returnPoolTokenAmount.sub(\n                topUpChi(IERC20(poolToken), returnPoolTokenAmount)\n            );\n\n            returnAmount = swap(\n                IERC20(poolToken),\n                _toToken,\n                returnPoolTokenAmount,\n                true\n            );\n        } else {\n            // Uni pool workflow\n            // Might be prone to Flashloan Attacks - the whole logic needs to be reviewed and maybe improved\n\n            (IERC20 token0, IERC20 token1, uint256 bal0, uint256 bal1) =\n                burnUniLq(amount, pool);\n\n            returnAmount = swap(token0, _toToken, bal0, true);\n            returnAmount += swap(token1, _toToken, bal1, true);\n\n            // topup with CHi\n            returnAmount = returnAmount.sub(topUpChi(_toToken, returnAmount));\n        }\n\n        //Here we transfer the value back to a user\n        //TODO: consider splitting it to a separate transaction, not available to perform in the same block\n        //might mitigate FL attack risk\n        if (toToken == address(WETH_ADDRESS)) {\n            IWETH(address(WETH_ADDRESS)).withdraw(returnAmount);\n            msg.sender.transfer(returnAmount);\n        } else {\n            _toToken.universalTransfer(msg.sender, returnAmount);\n        }\n\n        emit LogBurnGiven(returnAmount);\n    }\n\n    /**\n     * @dev Burn Uni LP token to get the necessary amount of tokens as requested\n     */\n    function burnUniLq(uint256 amount, address pool)\n        internal\n        returns (\n            IERC20 token0,\n            IERC20 token1,\n            uint256 bal0,\n            uint256 bal1\n        )\n    {\n        IUniswapV2Exchange pair = IUniswapV2Exchange(pool);\n        (, uint256 I1, address tok0, address tok1) =\n            getUniSplit(amount, pair, IERC20(denominateTo), true);\n\n        (, uint256 reserve1, ) = pair.getReserves();\n\n        uint256 lq = pair.totalSupply().mul(I1).div(reserve1); // might be min of either of those token0/token1\n\n        pair.transfer(pool, lq);\n        pair.burn(address(this));\n\n        token0 = IERC20(tok0);\n        token1 = IERC20(tok1);\n\n        bal0 = token0.balanceOf(address(this));\n        bal1 = token1.balanceOf(address(this));\n    }\n\n    /**\n     * @dev math to calculate the fee\n     */\n    function getFee(uint256 amount) internal view returns (uint256 feeTaken) {\n        feeTaken = amount.mul(votedFee).div(10000);\n    }\n\n    /**\n     * @dev Internal function to rebase main S/F token with given value\n     * @param value - Total supply of S/F\n     */\n    function _rebase(uint256 value) internal {\n        ISFToken SF = ISFToken(SFToken);\n        SF.rebase(value);\n    }\n\n    /**\n     * @dev Internal function to rebase main S/F token with the value\n     * as confirmed by on-chain quotes from XChanger(XTrinity) contract\n     * Consumes more gas, therefore it will be used only when minting/burning\n     */\n    function _rebaseOnChain() internal {\n        _rebase(toSFDecimals(getTotalValue() + 1));\n    }\n\n    /**\n     * @dev ValueManager can run onchain rebase any time as required\n     */\n    function rebase() public discountCHI onlyValueManager {\n        _rebaseOnChain();\n    }\n\n    /**\n     * @dev ValueManager can run an arbitrary rebase too - to save on gas as this TX is much cheaper\n     * This is really a workaround that should be disregarded by the community\n     */\n    function rebase(uint256 value) external onlyValueManager {\n        _rebase(value);\n    }\n\n    /**\n     * @dev math function to convert decimals from dS/F decimals (6) to enomination token [DAI] (18)\n     */\n\n    function fromSFDecimals(uint256 value) internal view returns (uint256) {\n        return value.mul(10**uint256(denominateDecimals - sfDecimals));\n    }\n\n    /**\n     * @dev math function to convert decimals from denomination token [DAI] (18) to S/F decimals (6)\n     */\n    function toSFDecimals(uint256 value) internal view returns (uint256) {\n        return value.div(10**uint256(denominateDecimals - sfDecimals));\n    }\n\n    /**\n     * @dev method for Value Manager to claim vaue from external (CompMiner) pool by collecting COMP, converting to [DAI]\n     * and then adding back to the same pool ()\n     * TODO: change from VotedPool to a loop from external pools if needed\n     */\n    function harvest() external onlyValueManager {\n        for (uint256 j = 0; j < extLen; j++) {\n            address extAddress = externalPools[j];\n            if (extAddress != address(0)) {\n                IExternalPool externalPool = IExternalPool(extAddress);\n                externalPool.claimValue();\n\n                IERC20 poolToken = IERC20(externalPool.enterToken());\n                uint256 poolTokenBalance = poolToken.balanceOf(votedPool);\n                if (poolTokenBalance > 0) {\n                    // Top Up With Chi\n                    externalPool.transferTokenTo(\n                        address(poolToken),\n                        address(this),\n                        poolTokenBalance\n                    );\n                    //TODO: performance fee\n                    if (votedPerformanceFee > 0) {\n                        uint256 performanceFee =\n                            poolTokenBalance.mul(votedPerformanceFee).div(\n                                10000\n                            );\n                        poolTokenBalance -= performanceFee;\n\n                        poolToken.universalTransfer(\n                            ValueManager,\n                            performanceFee\n                        );\n                    }\n\n                    topUpChi(poolToken, poolTokenBalance);\n\n                    poolToken.universalTransfer(\n                        extAddress,\n                        poolToken.balanceOf(address(this))\n                    );\n\n                    externalPool.addPosition();\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev math to calculate the %% of the uni pool owned by the holder\n     */\n    function getHolderPc(IUniswapV2Exchange uniPool)\n        internal\n        view\n        returns (uint256 holderPc)\n    {\n        try uniPool.totalSupply() returns (uint256 uniTotalSupply) {\n            holderPc = (uniPool.balanceOf(address(this)).mul(fpNumbers)).div(\n                uniTotalSupply\n            );\n        } catch {}\n    }\n\n    /**\n     * @dev method to return the amount of tokens in the uni LP pool owned by the holder\n     */\n    function getUniReserve(IUniswapV2Exchange uniPool)\n        public\n        view\n        returns (uint256 myreserve0, uint256 myreserve1)\n    {\n        uint256 holderPc = getHolderPc(uniPool);\n\n        try uniPool.getReserves() returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32\n        ) {\n            myreserve0 = (uint256(reserve0).mul(holderPc)).div(fpNumbers);\n            myreserve1 = (uint256(reserve1).mul(holderPc)).div(fpNumbers);\n        } catch {}\n    }\n\n    /**\n     * @dev method to return the external pool total value\n     */\n    function getExternalValue() public view returns (uint256 totalReserve) {\n        for (uint256 j = 0; j < extLen; j++) {\n            address extAddress = externalPools[j];\n            if (extAddress != address(0)) {\n                IExternalPool externalPool = IExternalPool(extAddress);\n\n                address poolToken = externalPool.enterToken();\n                // changing quotes to this contract instead\n                uint256 addValue =\n                    quote(\n                        IERC20(poolToken),\n                        IERC20(denominateTo),\n                        externalPool.getPoolValue(poolToken)\n                    );\n                totalReserve = totalReserve.add(addValue);\n            }\n        }\n    }\n\n    /**\n     * @dev method to return the denominated [DAI] uni pool value owned by the user\n     */\n    function getDenominatedValue(IUniswapV2Exchange uniPool)\n        public\n        view\n        returns (uint256 myreserve0, uint256 myreserve1)\n    {\n        (myreserve0, myreserve1) = getUniReserve(uniPool);\n\n        address token0 = uniPool.token0();\n        address token1 = uniPool.token1();\n\n        if (token0 != denominateTo) {\n            //get amount and convert to denominate addr;\n            if (token0 != SFToken && myreserve0 > 0) {\n                (myreserve0) = quote(\n                    IERC20(uniPool.token0()),\n                    IERC20(denominateTo),\n                    myreserve0\n                );\n            } else {\n                myreserve0 = 0;\n            }\n        }\n\n        if (uniPool.token1() != denominateTo) {\n            //get amount and convert to denominate addr;\n            if (token1 != SFToken && myreserve1 > 0) {\n                (myreserve1) = quote(\n                    IERC20(uniPool.token1()),\n                    IERC20(denominateTo),\n                    myreserve1\n                );\n            } else {\n                myreserve1 = 0;\n            }\n        }\n    }\n\n    /**\n     * @dev method to return total value of the fund from all the external and internal (uni) pools\n     * plus the own balance if there is one\n     */\n    function getTotalValue() public view returns (uint256 totalReserve) {\n        for (uint256 i = 0; i < uniLen; i++) {\n            address uniAddress = uniPools[i];\n\n            if (uniAddress != address(0)) {\n                IUniswapV2Exchange uniPool = IUniswapV2Exchange(uniAddress);\n                (uint256 myreserve0, uint256 myreserve1) =\n                    getDenominatedValue(uniPool);\n\n                totalReserve += myreserve0;\n                totalReserve += myreserve1;\n            }\n        }\n\n        totalReserve += getExternalValue();\n        totalReserve += IERC20(denominateTo).balanceOf(address(this));\n    }\n\n    /**\n     * @dev add new Uni pool - only by Voter\n     */\n    function addUni(address pool) public onlyVoter {\n        uniPools[uniLen] = pool;\n        uniLen++;\n    }\n\n    /**\n     * @dev remove a Uni pool - only by Voter\n     */\n    function delUni(uint256 i) external onlyVoter {\n        uniPools[i] = address(0);\n    }\n\n    /**\n     * @dev add new External pool - only by Voter\n     */\n    function addExt(address pool) public onlyVoter {\n        externalPools[extLen] = pool;\n        extLen++;\n    }\n\n    /**\n     * @dev remove External pool - only by Voter\n     */\n    function delExt(uint256 i) external onlyVoter {\n        externalPools[i] = address(0);\n    }\n\n    /**\n     * @dev to fix the length on the Uni pool array\n     * might be not needed but good for testing/fixing storage state\n     */\n    function setUniLen(uint256 i) external onlyVoter {\n        uniLen = i;\n    }\n\n    /**\n     * @dev to fix the length on the Ext pool array\n     * might be not needed but good for testing/fixing storage state\n     */\n    function setExtLen(uint256 i) external onlyVoter {\n        extLen = i;\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogBurnGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spendAmount\",\"type\":\"uint256\"}],\"name\":\"LogChiToppedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"LogFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LogFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogMintTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LogPerformanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"LogSFTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Manager\",\"type\":\"address\"}],\"name\":\"LogValueManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"LogVotedExtPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogVotedUniPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Voter\",\"type\":\"address\"}],\"name\":\"LogVoterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NewXChanger\",\"type\":\"address\"}],\"name\":\"LogXChangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SFToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ValueManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Exchange\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getDenominatedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myreserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myreserve1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Exchange\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getUniReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myreserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myreserve1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votePool\",\"type\":\"address\"},{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"_votePoolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_sfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Xchanger\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toMint\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toMint\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pickPoolToExtract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extPool\",\"type\":\"address\"},{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"_votePoolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_sfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Xchanger\",\"type\":\"address\"}],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"setExtLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"setSFToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"setUniLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ValueManager\",\"type\":\"address\"}],\"name\":\"setValueManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedChi\",\"type\":\"uint256\"}],\"name\":\"setVotedChi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedFee\",\"type\":\"uint256\"}],\"name\":\"setVotedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"setVotedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setVvotedPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Xchanger\",\"type\":\"address\"}],\"name\":\"setXChangerImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"slipProtect\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"}],\"name\":\"topUpChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spendAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedPoolType\",\"outputs\":[{\"internalType\":\"enum ValueHolder.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xchanger\",\"outputs\":[{\"internalType\":\"contract XChanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ValueHolder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}