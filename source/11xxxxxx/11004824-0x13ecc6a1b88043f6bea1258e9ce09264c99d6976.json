{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ninterface FiatContract {\r\n    function ETH(uint _id) external pure returns (uint256);\r\n    function USD(uint _id) external pure returns (uint256);\r\n    function EUR(uint _id) external pure returns (uint256);\r\n    function GBP(uint _id) external pure returns (uint256);\r\n    function updatedAt(uint _id) external pure returns (uint);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CrowedSale{\r\n    IERC20 token;\r\n    address owner;\r\n    FiatContract price;\r\n    address public fiatContractAddress;\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        // token = IERC20(address(0xe3cB92Fab39f4bF4D0E15591Bf4366Ce377Dc0DF));\r\n        token = IERC20(address(0x76F420c18d284Dca44999ae7461f918F847F137f));\r\n        owner = msg.sender;\r\n        setFiatContractAddress(0x2138FfE292fd0953f7fe2569111246E4DE9ff1DC);\r\n        price = FiatContract(fiatContractAddress); \r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender,'ERROR: Only Owner Can Run this');\r\n        _;\r\n    }\r\n    \r\n    receive() payable external{\r\n        buy();\r\n    }\r\n    \r\n    fallback() external{\r\n        buy();\r\n    }\r\n   \r\n    function buy() payable public{\r\n        require(msg.value != 0,\"POH: No value transfered\");\r\n        uint256 weiUSD = geETHforUSD();\r\n        require(weiUSD != 0, \"POH: No exchange value returned. Try again\");\r\n        //calculating amount of POH Token to be minted.\r\n        uint256 unitPrice = msg.value.div(weiUSD);\r\n        uint256 amountOfPOHTokens = (10**uint256(18) * unitPrice); //1 WYO token * USD amount of Value\r\n        token.transferFrom(owner,msg.sender,amountOfPOHTokens);\r\n    }\r\n    \r\n    function getEthAgainstToken(uint256 tokens) public view returns(uint256){\r\n        uint256 amountOfToken = tokens*10**uint256(18);\r\n        uint256 weiUSD = geETHforUSD();\r\n        return (amountOfToken*weiUSD)/1e18;\r\n    }\r\n    \r\n      function geETHforUSD() public view returns (uint256) {\r\n        uint256 usd = price.USD(0);\r\n        uint256 weiAmount = usd * 100; //1 USD amount of wei return\r\n        return weiAmount;\r\n    }\r\n    \r\n    function setFiatContractAddress(address _add) public onlyOwner{\r\n        require(_add != address(0),\"Invalid Address! Please add correct FiatContract Addresss\");\r\n        fiatContractAddress = _add; // MAINNET ADDRESS\r\n        // fiatContractAddress = 0x97d63Fe27cA359422C10b25206346B9e24A676Ca; // TESTNET ADDRESS\r\n    }\r\n    \r\n    function checkAllowance() public view returns(uint256){\r\n       return token.allowance(owner,address(this)); \r\n    }\r\n    \r\n    function end_ICO() public onlyOwner() {\r\n        payable(address(owner)).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiatContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geETHforUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEthAgainstToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setFiatContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CrowedSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b62a4720ff96d5047c067f5238b698601c43b83359bc9211b7e490eda189d73"}]}