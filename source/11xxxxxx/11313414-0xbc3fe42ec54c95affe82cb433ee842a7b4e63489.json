{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface USDT {\r\n    function approve(address guy, uint256 wad) external;\r\n\r\n    function transfer(address _to, uint256 _value) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external;\r\n}\r\n\r\ninterface ICurveFi_2 {\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n}\r\n\r\ninterface IVault {\r\n    function deposit(uint256) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract ToolCcrv {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant cDeposit = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\r\n    // cCrv\r\n    address public constant want = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\r\n    // bcCRV\r\n    address public constant bToken = 0xB34620D0b30648C9597799193E2265bee04606a8;\r\n\r\n    // stablecoins\r\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    event Recycled(address indexed user, uint256 sentDai, uint256 sentUsdc, uint256 sentWant, uint256 receivedBToken);\r\n\r\n    constructor() public {\r\n        IERC20(dai).approve(cDeposit, uint256(- 1));\r\n        IERC20(usdc).approve(cDeposit, uint256(- 1));\r\n        IERC20(want).approve(bToken, uint256(- 1));\r\n    }\r\n\r\n    function recycleExactAmounts(address sender, uint256 _dai, uint256 _usdc, uint256 _want) internal {\r\n        if (_dai > 0) {\r\n            IERC20(dai).transferFrom(sender, address(this), _dai);\r\n        }\r\n        if (_usdc > 0) {\r\n            IERC20(usdc).transferFrom(sender, address(this), _usdc);\r\n        }\r\n        if (_want > 0) {\r\n            IERC20(want).transferFrom(sender, address(this), _want);\r\n        }\r\n\r\n        uint256[2] memory depositAmounts = [_dai, _usdc];\r\n        if (_usdc.add(_dai) > 0) {\r\n            ICurveFi_2(cDeposit).add_liquidity(depositAmounts, 0);\r\n        }\r\n\r\n        uint256 wantBalance = IERC20(want).balanceOf(address(this));\r\n        if (wantBalance > 0) {\r\n            IVault(bToken).deposit(wantBalance);\r\n        }\r\n\r\n        uint256 _bToken = IERC20(bToken).balanceOf(address(this));\r\n        if (_bToken > 0) {\r\n            IERC20(bToken).transfer(sender, _bToken);\r\n        }\r\n\r\n        assert(IERC20(bToken).balanceOf(address(this)) == 0);\r\n\r\n        emit Recycled(sender, _dai, _usdc, _want, _bToken);\r\n    }\r\n\r\n    function recycle() external {\r\n        uint256 _dai = Math.min(IERC20(dai).balanceOf(msg.sender), IERC20(dai).allowance(msg.sender, address(this)));\r\n        uint256 _usdc = Math.min(IERC20(usdc).balanceOf(msg.sender), IERC20(usdc).allowance(msg.sender, address(this)));\r\n        uint256 _want = Math.min(IERC20(want).balanceOf(msg.sender), IERC20(want).allowance(msg.sender, address(this)));\r\n\r\n        recycleExactAmounts(msg.sender, _dai, _usdc, _want);\r\n    }\r\n\r\n\r\n    function recycleExact(uint256 _dai, uint256 _usdc, uint256 _want) external {\r\n        recycleExactAmounts(msg.sender, _dai, _usdc, _want);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentUsdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedBToken\",\"type\":\"uint256\"}],\"name\":\"Recycled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_want\",\"type\":\"uint256\"}],\"name\":\"recycleExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ToolCcrv","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://592858929ce85814047d8b9ddd40482a44afe073770133b7b641f5aa6b7b3954"}]}