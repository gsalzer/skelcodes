{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/newVersion/ERC20TokenExtended.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ncontract ERC20TokenExtended is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Total amount of tokens issued\r\n\r\n    mapping(address => bool) public migratedBalances;\r\n    mapping(address => mapping( address => bool)) public migratedAllowances;\r\n    uint256 internal totalTokenIssued;\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    IERC20 prevContract;\r\n\r\n    modifier migrateBalance(address _owner) {\r\n        if ( !migratedBalances[_owner] ) {\r\n            migratedBalances[_owner] = true;\r\n            balances[_owner] = balances[_owner].add(prevContract.balanceOf(_owner));\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier migrateAllowance(address _owner, address _spender) {\r\n        if (!migratedAllowances[_owner][_spender]) {\r\n            migratedAllowances[_owner][_spender] = true;\r\n            allowed[_owner][_spender] = allowed[_owner][_spender].add(\r\n                prevContract.allowance(_owner, _spender)\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _prevContract) public {\r\n        prevContract = IERC20(_prevContract);\r\n    }\r\n\r\n    function totalSupply() public virtual override view returns (uint256) {\r\n        return totalTokenIssued;\r\n    }\r\n\r\n    /* Get the account balance for an address */\r\n    function balanceOf(address _owner)\r\n    public\r\n    override\r\n    view\r\n    returns (uint256) {\r\n\r\n        if (!migratedBalances[_owner]) {\r\n            return prevContract.balanceOf(_owner).add(balances[_owner]);\r\n        }\r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        override\r\n        virtual\r\n        migrateBalance(msg.sender)\r\n        migrateBalance(_to)\r\n        returns (bool)\r\n    {\r\n\r\n        require(_to != address(0x0));\r\n\r\n        // amount sent cannot exceed balance\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        \r\n        // update balances\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to]        = balances[_to].add(_amount);\r\n\r\n        // log event\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /* Allow _spender to withdraw from your account up to _amount */\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n\r\n        require(_spender != address(0x0));\r\n\r\n        // update allowed amount\r\n        allowed[msg.sender][_spender] = _amount;\r\n\r\n        // log event\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Spender of tokens transfers tokens from the owner's balance */\r\n    /* Must be pre-approved by owner */\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        public\r\n        override\r\n        virtual\r\n        migrateAllowance(_from, msg.sender)\r\n        migrateBalance(msg.sender)\r\n        migrateBalance(_from)\r\n        migrateBalance(_to)\r\n        returns (bool)\r\n    {\r\n        \r\n        require(_to != address(0));\r\n        \r\n        // balance checks\r\n        require(balances[_from] >= _amount);\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n\r\n        // update balances and allowed amount\r\n        balances[_from]            = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to]              = balances[_to].add(_amount);\r\n\r\n        // log event\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Returns the amount of tokens approved by the owner */\r\n    /* that can be transferred by spender */\r\n    function allowance(address _owner, address _spender)\r\n    public\r\n    override\r\n    view\r\n    returns (uint256) {\r\n\r\n        if (!migratedAllowances[_owner][_spender]) {\r\n            return prevContract.allowance(_owner, _spender).add(allowed[_owner][_spender]);\r\n        }\r\n        return allowed[_owner][_spender];\r\n\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/newVersion/WhiteListManager.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract WhiteListManager is Ownable {\r\n\r\n    // The list here will be updated by multiple separate WhiteList contracts\r\n    mapping (address => bool) public list;\r\n\r\n    function unset(address addr) public onlyOwner {\r\n\r\n        list[addr] = false;\r\n    }\r\n\r\n    function unsetMany(address[] memory addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            unset(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function set(address addr) public onlyOwner {\r\n\r\n        list[addr] = true;\r\n    }\r\n\r\n    function setMany(address[] memory addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            set(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address addr) public view returns (bool) {\r\n\r\n        return list[addr];\r\n    }\r\n}\r\n\r\n// File: contracts/ShareToken.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\nabstract contract ShareToken is IERC20{\r\n\r\n    mapping(address => bool) public rewardTokenLocked;\r\n    bool public mainSaleTokenLocked = true;\r\n    uint256 public airDropTokenIssuedTotal;\r\n    uint256 public bountyTokenIssuedTotal;\r\n\r\n    uint256 public seedAndPresaleTokenIssuedTotal;\r\n\r\n\r\n    function totalMainSaleTokenIssued() public returns (uint256) {\r\n\r\n    }\r\n}\r\n\r\n// File: contracts/newVersion/ShareTokenExtended.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\ncontract ShareTokenExtended is ERC20TokenExtended, WhiteListManager {\r\n\r\n\r\n    string public constant name = \"ShareToken\";\r\n    string public constant symbol = \"SHR\";\r\n    uint8  public constant decimals = 2;\r\n    ShareToken public prevShareToken;\r\n\r\n    address public icoContract;\r\n\r\n    // Any token amount must be multiplied by this const to reflect decimals\r\n    uint256 constant E2 = 10 ** 2;\r\n\r\n    mapping(address => bool) public rewardTokenLocked;\r\n    mapping(address => bool) public migratedRewardTokenLocked;\r\n    bool public mainSaleTokenLocked = true;\r\n\r\n    uint256 public constant TOKEN_SUPPLY_MAINSALE_LIMIT = 1000000000 * E2; // 1,000,000,000 tokens (1 billion)\r\n    uint256 public constant TOKEN_SUPPLY_AIRDROP_LIMIT = 6666666667; // 66,666,666.67 tokens (0.066 billion)\r\n    uint256 public constant TOKEN_SUPPLY_BOUNTY_LIMIT = 33333333333; // 333,333,333.33 tokens (0.333 billion)\r\n\r\n    uint256 public airDropTokenIssuedTotal;\r\n    uint256 public bountyTokenIssuedTotal;\r\n\r\n    uint256 public constant TOKEN_SUPPLY_SEED_LIMIT = 500000000 * E2; // 500,000,000 tokens (0.5 billion)\r\n    uint256 public constant TOKEN_SUPPLY_PRESALE_LIMIT = 2500000000 * E2; // 2,500,000,000.00 tokens (2.5 billion)\r\n    uint256 public constant TOKEN_SUPPLY_SEED_PRESALE_LIMIT = TOKEN_SUPPLY_SEED_LIMIT + TOKEN_SUPPLY_PRESALE_LIMIT;\r\n\r\n    uint256 public seedAndPresaleTokenIssuedTotal;\r\n\r\n    uint8 private constant PRESALE_EVENT = 0;\r\n    uint8 private constant MAINSALE_EVENT = 1;\r\n    uint8 private constant BOUNTY_EVENT = 2;\r\n    uint8 private constant AIRDROP_EVENT = 3;\r\n\r\n    modifier migrateRewardTokenLocked(address _addr) {\r\n        // This requires the legacy ShareToken is completely locked\r\n        // no change made on *rewardTokenLocked* variable\r\n        if (!migratedRewardTokenLocked[_addr]) {\r\n            migratedRewardTokenLocked[_addr] = true;\r\n            rewardTokenLocked[_addr] = prevShareToken.rewardTokenLocked(_addr);\r\n        }\r\n        _;\r\n    }\r\n\r\n    //0xee5fe244406f35d9b4ddb488a64d51456630befc\r\n    constructor(address _prevContract)\r\n        public\r\n        ERC20TokenExtended(_prevContract)\r\n    {\r\n        prevShareToken = ShareToken(_prevContract);\r\n        totalTokenIssued = prevShareToken.totalMainSaleTokenIssued();\r\n        airDropTokenIssuedTotal = prevShareToken.airDropTokenIssuedTotal();\r\n        bountyTokenIssuedTotal = prevShareToken.bountyTokenIssuedTotal();\r\n        seedAndPresaleTokenIssuedTotal = prevShareToken.seedAndPresaleTokenIssuedTotal();\r\n        mainSaleTokenLocked = true;\r\n    }\r\n\r\n    function unlockMainSaleToken() public onlyOwner {\r\n\r\n        mainSaleTokenLocked = false;\r\n    }\r\n\r\n    function lockMainSaleToken() public onlyOwner {\r\n\r\n        mainSaleTokenLocked = true;\r\n    }\r\n\r\n    function unlockRewardToken(address addr) public onlyOwner {\r\n        rewardTokenLocked[addr] = false;\r\n        migratedRewardTokenLocked[addr] = true;\r\n    }\r\n\r\n    function unlockRewardTokenMany(address[] memory addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            unlockRewardToken(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function lockRewardToken(address addr) public onlyOwner {\r\n        rewardTokenLocked[addr] = true;\r\n        migratedRewardTokenLocked[addr] = true;\r\n    }\r\n\r\n    function lockRewardTokenMany(address[] memory addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            lockRewardToken(addrList[i]);\r\n        }\r\n    }\r\n\r\n    // Check if a given address is locked. The address can be in the whitelist or in the reward\r\n    function isLocked(address addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        // Main sale is running, any addr is locked\r\n        if (mainSaleTokenLocked) {\r\n            return true;\r\n        }\r\n        // Main sale is ended and thus any whitelist addr is unlocked\r\n        if (isWhitelisted(addr)) {\r\n            return false;\r\n        }\r\n        // If the addr is in the reward, it must be checked if locked\r\n        // If the addr is not in the reward, it is considered unlocked\r\n        if (!migratedRewardTokenLocked[addr]) {\r\n            return prevShareToken.rewardTokenLocked(addr);\r\n        }\r\n        return rewardTokenLocked[addr];\r\n\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n\r\n        return totalTokenIssued.add(seedAndPresaleTokenIssuedTotal).add(airDropTokenIssuedTotal).add(bountyTokenIssuedTotal);\r\n    }\r\n\r\n    function totalMainSaleTokenIssued() public view returns (uint256) {\r\n\r\n        return totalTokenIssued;\r\n    }\r\n\r\n    function totalMainSaleTokenLimit() public pure returns (uint256) {\r\n\r\n        return TOKEN_SUPPLY_MAINSALE_LIMIT;\r\n    }\r\n\r\n    function totalPreSaleTokenIssued() public view returns (uint256) {\r\n\r\n        return seedAndPresaleTokenIssuedTotal;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        override\r\n        migrateRewardTokenLocked(msg.sender)\r\n        migrateRewardTokenLocked(_to)\r\n        returns (bool success)\r\n    {\r\n\r\n        require(isLocked(msg.sender) == false);\r\n        require(isLocked(_to) == false);\r\n\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        public\r\n        override\r\n        migrateRewardTokenLocked(msg.sender)\r\n        migrateRewardTokenLocked(_from)\r\n        migrateRewardTokenLocked(_to)\r\n        returns (bool success)\r\n    {\r\n\r\n        require(isLocked(_from) == false);\r\n        require(isLocked(_to) == false);\r\n\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function setIcoContract(address _icoContract) public onlyOwner {\r\n\r\n        // Allow to set the ICO contract only once\r\n        require(icoContract == address(0));\r\n        require(_icoContract != address(0));\r\n\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    function sell(address buyer, uint256 tokens) public returns (bool success) {\r\n\r\n        require(icoContract != address(0));\r\n        // The sell() method can only be called by the fixedly-set ICO contract\r\n        require(msg.sender == icoContract);\r\n        require(tokens > 0);\r\n        require(buyer != address(0));\r\n\r\n        // Only whitelisted address can buy tokens. Otherwise, refund\r\n        require(isWhitelisted(buyer));\r\n\r\n        require(totalTokenIssued.add(tokens) <= TOKEN_SUPPLY_MAINSALE_LIMIT);\r\n\r\n        // Register tokens issued to the buyer\r\n        balances[buyer] = balances[buyer].add(tokens);\r\n\r\n        // Update total amount of tokens issued\r\n        totalTokenIssued = totalTokenIssued.add(tokens);\r\n\r\n        emit Transfer(address(MAINSALE_EVENT), buyer, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function rewardAirdrop(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        // this check also ascertains _amount is positive\r\n        require(_amount <= TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        require(airDropTokenIssuedTotal < TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_AIRDROP_LIMIT.sub(airDropTokenIssuedTotal);\r\n        if (_amount > remainingTokens) {\r\n            _amount = remainingTokens;\r\n        }\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        airDropTokenIssuedTotal = airDropTokenIssuedTotal.add(_amount);\r\n\r\n        // Lock the receiver\r\n        migratedRewardTokenLocked[_to] = true;\r\n        rewardTokenLocked[_to] = true;\r\n\r\n        emit Transfer(address(AIRDROP_EVENT), _to, _amount);\r\n    }\r\n\r\n    function rewardBounty(address _to, uint256 _amount) public onlyOwner {\r\n        // this check also ascertains _amount is positive\r\n        require(_amount <= TOKEN_SUPPLY_BOUNTY_LIMIT);\r\n\r\n        require(bountyTokenIssuedTotal < TOKEN_SUPPLY_BOUNTY_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_BOUNTY_LIMIT.sub(bountyTokenIssuedTotal);\r\n        if (_amount > remainingTokens) {\r\n            _amount = remainingTokens;\r\n        }\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        bountyTokenIssuedTotal = bountyTokenIssuedTotal.add(_amount);\r\n\r\n        // Lock the receiver\r\n        migratedRewardTokenLocked[_to] = true;\r\n        rewardTokenLocked[_to] = true;\r\n\r\n        emit Transfer(address(BOUNTY_EVENT), _to, _amount);\r\n    }\r\n\r\n    function rewardBountyMany(address[] memory addrList, uint256[] memory amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            rewardBounty(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    function rewardAirdropMany(address[] memory addrList, uint256[] memory amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            rewardAirdrop(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    function handlePresaleToken(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        require(_amount <= TOKEN_SUPPLY_SEED_PRESALE_LIMIT);\r\n\r\n        require(seedAndPresaleTokenIssuedTotal < TOKEN_SUPPLY_SEED_PRESALE_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_SEED_PRESALE_LIMIT.sub(seedAndPresaleTokenIssuedTotal);\r\n        require(_amount <= remainingTokens);\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        seedAndPresaleTokenIssuedTotal = seedAndPresaleTokenIssuedTotal.add(_amount);\r\n\r\n        emit Transfer(address(PRESALE_EVENT), _to, _amount);\r\n\r\n        // Also add to whitelist\r\n        set(_to);\r\n    }\r\n\r\n    function handlePresaleTokenMany(address[] memory addrList, uint256[] memory amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            handlePresaleToken(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    // add a selfdestruct function\r\n    function kill() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_AIRDROP_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_BOUNTY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_MAINSALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_PRESALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_SEED_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SUPPLY_SEED_PRESALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropTokenIssuedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyTokenIssuedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handlePresaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"handlePresaleTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMainSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"lockRewardTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainSaleTokenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedAllowances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedBalances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedRewardTokenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevShareToken\",\"outputs\":[{\"internalType\":\"contract ShareToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"rewardAirdropMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"rewardBountyMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedAndPresaleTokenIssuedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"setMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMainSaleTokenIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMainSaleTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPreSaleTokenIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockMainSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"unlockRewardTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"unsetMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShareTokenExtended","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee5fe244406f35d9b4ddb488a64d51456630befc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06dbeaf6b55c99013da18dd9ca32831748e51edc778acbb3f0e8aa154a693686"}]}