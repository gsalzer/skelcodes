{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2021 zapper\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\r\n\r\n///@author Zapper\r\n///@notice this contract implements one click removal of liquidity from Uniswap V2 pools, receiving ETH, ERC tokens or both.\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function balanceOf(address user) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\ncontract UniswapV2_ZapOut_General_V3 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    bool public stopped = false;\r\n    uint256 public goodwill;\r\n\r\n    // if true, goodwill is not deducted\r\n    mapping(address => bool) public feeWhitelist;\r\n\r\n    // % share of goodwill (0-100 %)\r\n    uint256 affiliateSplit;\r\n    // restrict affiliates\r\n    mapping(address => bool) public affiliates;\r\n    // affiliate => token => amount\r\n    mapping(address => mapping(address => uint256)) public affiliateBalance;\r\n    // token => amount\r\n    mapping(address => uint256) public totalAffiliateBalance;\r\n\r\n    address\r\n        private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    uint256\r\n        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    IUniswapV2Router02 private constant uniswapV2Router = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address private constant wethTokenAddress = address(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    constructor(uint256 _goodwill, uint256 _affiliateSplit) public {\r\n        goodwill = _goodwill;\r\n        affiliateSplit = _affiliateSplit;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    event zapOut(\r\n        address sender,\r\n        address pool,\r\n        address token,\r\n        uint256 tokensRec\r\n    );\r\n\r\n    /**\r\n    @notice Zap out in a pair of tokens\r\n    @param _FromUniPoolAddress The uniswap pair address to zapout\r\n    @param _IncomingLP The amount of LP\r\n    @param affiliate Affiliate address\r\n    @return the amount of pair tokens received after zapout\r\n     */\r\n    function ZapOut2PairToken(\r\n        address _FromUniPoolAddress,\r\n        uint256 _IncomingLP,\r\n        address affiliate\r\n    )\r\n        public\r\n        nonReentrant\r\n        stopInEmergency\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);\r\n\r\n        require(address(pair) != address(0), \"Error: Invalid Unipool Address\");\r\n\r\n        // get reserves\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n\r\n        IERC20(_FromUniPoolAddress).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _IncomingLP\r\n        );\r\n\r\n        IERC20(_FromUniPoolAddress).safeApprove(\r\n            address(uniswapV2Router),\r\n            _IncomingLP\r\n        );\r\n\r\n        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {\r\n            address _token = token0 == wethTokenAddress ? token1 : token0;\r\n            (amountA, amountB) = uniswapV2Router.removeLiquidityETH(\r\n                _token,\r\n                _IncomingLP,\r\n                1,\r\n                1,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n            // subtract goodwill\r\n            uint256 tokenGoodwill = _subtractGoodwill(\r\n                _token,\r\n                amountA,\r\n                affiliate\r\n            );\r\n            uint256 ethGoodwill = _subtractGoodwill(\r\n                ETHAddress,\r\n                amountB,\r\n                affiliate\r\n            );\r\n\r\n            // send tokens\r\n            IERC20(_token).safeTransfer(msg.sender, amountA.sub(tokenGoodwill));\r\n            Address.sendValue(msg.sender, amountB.sub(ethGoodwill));\r\n        } else {\r\n            (amountA, amountB) = uniswapV2Router.removeLiquidity(\r\n                token0,\r\n                token1,\r\n                _IncomingLP,\r\n                1,\r\n                1,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n            // subtract goodwill\r\n            uint256 tokenAGoodwill = _subtractGoodwill(\r\n                token0,\r\n                amountA,\r\n                affiliate\r\n            );\r\n            uint256 tokenBGoodwill = _subtractGoodwill(\r\n                token1,\r\n                amountB,\r\n                affiliate\r\n            );\r\n\r\n            // send tokens\r\n            IERC20(token0).safeTransfer(\r\n                msg.sender,\r\n                amountA.sub(tokenAGoodwill)\r\n            );\r\n            IERC20(token1).safeTransfer(\r\n                msg.sender,\r\n                amountB.sub(tokenBGoodwill)\r\n            );\r\n        }\r\n        emit zapOut(msg.sender, _FromUniPoolAddress, token0, amountA);\r\n        emit zapOut(msg.sender, _FromUniPoolAddress, token1, amountB);\r\n    }\r\n\r\n    /**\r\n    @notice Zap out in a single token\r\n    @param _ToTokenContractAddress The ERC20 token to zapout in (address(0x00) if ether)\r\n    @param _FromUniPoolAddress The uniswap pair address to zapout from\r\n    @param _IncomingLP The amount of LP to remove.\r\n    @param _minTokensRec indicates the minimum amount of tokens to receive\r\n    @param _swapTarget indicates the execution target for swap.\r\n    @param swap1Data DEX swap data\r\n    @param swap2Data DEX swap data\r\n    @param affiliate Affiliate address \r\n    @return the amount of eth/tokens received after zapout\r\n     */\r\n    function ZapOut(\r\n        address _ToTokenContractAddress,\r\n        address _FromUniPoolAddress,\r\n        uint256 _IncomingLP,\r\n        uint256 _minTokensRec,\r\n        address[] memory _swapTarget,\r\n        bytes memory swap1Data,\r\n        bytes memory swap2Data,\r\n        address affiliate\r\n    ) public nonReentrant stopInEmergency returns (uint256 tokenBought) {\r\n        //transfer goodwill and reoves liquidity\r\n        (uint256 amountA, uint256 amountB) = _removeLiquidity(\r\n            _FromUniPoolAddress,\r\n            _IncomingLP\r\n        );\r\n\r\n        //swaps tokens to token\r\n        tokenBought = _swapTokens(\r\n            _FromUniPoolAddress,\r\n            amountA,\r\n            amountB,\r\n            _ToTokenContractAddress,\r\n            _swapTarget,\r\n            swap1Data,\r\n            swap2Data\r\n        );\r\n        require(tokenBought >= _minTokensRec, \"High slippage\");\r\n\r\n        emit zapOut(\r\n            msg.sender,\r\n            _FromUniPoolAddress,\r\n            _ToTokenContractAddress,\r\n            tokenBought\r\n        );\r\n\r\n        uint256 totalGoodwillPortion;\r\n\r\n        // transfer toTokens to sender\r\n        if (_ToTokenContractAddress == address(0)) {\r\n            totalGoodwillPortion = _subtractGoodwill(\r\n                ETHAddress,\r\n                tokenBought,\r\n                affiliate\r\n            );\r\n\r\n            msg.sender.transfer(tokenBought.sub(totalGoodwillPortion));\r\n        } else {\r\n            totalGoodwillPortion = _subtractGoodwill(\r\n                _ToTokenContractAddress,\r\n                tokenBought,\r\n                affiliate\r\n            );\r\n\r\n            IERC20(_ToTokenContractAddress).safeTransfer(\r\n                msg.sender,\r\n                tokenBought.sub(totalGoodwillPortion)\r\n            );\r\n        }\r\n\r\n        return tokenBought.sub(totalGoodwillPortion);\r\n    }\r\n\r\n    /**\r\n    @notice Zap out in a pair of tokens with permit\r\n    @param _FromUniPoolAddress indicates the liquidity pool\r\n    @param _IncomingLP indicates the amount of LP to remove from pool\r\n    @param affiliate Affiliate address to share fees\r\n    @param _permitData indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values. \r\n    @return  amountA - indicates the amount received in token0, amountB - indicates the amount received in token1 \r\n    */\r\n    function ZapOut2PairTokenWithPermit(\r\n        address _FromUniPoolAddress,\r\n        uint256 _IncomingLP,\r\n        address affiliate,\r\n        bytes calldata _permitData\r\n    ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {\r\n        // permit\r\n        (bool success, ) = _FromUniPoolAddress.call(_permitData);\r\n        require(success, \"Could Not Permit\");\r\n\r\n        (amountA, amountB) = ZapOut2PairToken(\r\n            _FromUniPoolAddress,\r\n            _IncomingLP,\r\n            affiliate\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice Zap out in a signle token with permit\r\n    @param _ToTokenContractAddress indicates the toToken address to which tokens to convert.\r\n    @param _FromUniPoolAddress indicates the liquidity pool\r\n    @param _IncomingLP indicates the amount of LP to remove from pool\r\n    @param _minTokensRec indicatest the minimum amount of toTokens to receive\r\n    @param _permitData indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values. \r\n    @param _swapTarget indicates the execution target for swap.\r\n    @param swap1Data DEX swap data\r\n    @param swap2Data DEX swap data\r\n    @param affiliate Affiliate address to share fees\r\n    */\r\n    function ZapOutWithPermit(\r\n        address _ToTokenContractAddress,\r\n        address _FromUniPoolAddress,\r\n        uint256 _IncomingLP,\r\n        uint256 _minTokensRec,\r\n        bytes memory _permitData,\r\n        address[] memory _swapTarget,\r\n        bytes memory swap1Data,\r\n        bytes memory swap2Data,\r\n        address affiliate\r\n    ) public stopInEmergency returns (uint256) {\r\n        // permit\r\n        (bool success, ) = _FromUniPoolAddress.call(_permitData);\r\n        require(success, \"Could Not Permit\");\r\n\r\n        return (\r\n            ZapOut(\r\n                _ToTokenContractAddress,\r\n                _FromUniPoolAddress,\r\n                _IncomingLP,\r\n                _minTokensRec,\r\n                _swapTarget,\r\n                swap1Data,\r\n                swap2Data,\r\n                affiliate\r\n            )\r\n        );\r\n    }\r\n\r\n    function _removeLiquidity(address _FromUniPoolAddress, uint256 _IncomingLP)\r\n        internal\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);\r\n\r\n        require(address(pair) != address(0), \"Error: Invalid Unipool Address\");\r\n\r\n        //get pair tokens\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n\r\n        IERC20(_FromUniPoolAddress).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _IncomingLP\r\n        );\r\n\r\n        IERC20(_FromUniPoolAddress).safeApprove(\r\n            address(uniswapV2Router),\r\n            _IncomingLP\r\n        );\r\n\r\n        //remove liquidity\r\n        (amountA, amountB) = uniswapV2Router.removeLiquidity(\r\n            token0,\r\n            token1,\r\n            _IncomingLP,\r\n            1,\r\n            1,\r\n            address(this),\r\n            deadline\r\n        );\r\n        require(amountA > 0 && amountB > 0, \"Insufficient Liquidity\");\r\n    }\r\n\r\n    function _swapTokens(\r\n        address _FromUniPoolAddress,\r\n        uint256 _amountA,\r\n        uint256 _amountB,\r\n        address _toToken,\r\n        address[] memory _swapTarget,\r\n        bytes memory swap1Data,\r\n        bytes memory swap2Data\r\n    ) internal returns (uint256 tokensBought) {\r\n        require(_swapTarget.length == 2, \"Invalid data for 0x swap\");\r\n\r\n        address token0 = IUniswapV2Pair(_FromUniPoolAddress).token0();\r\n        address token1 = IUniswapV2Pair(_FromUniPoolAddress).token1();\r\n\r\n        //swap token0 to toToken\r\n        if (token0 == _toToken) {\r\n            tokensBought = tokensBought.add(_amountA);\r\n        } else {\r\n            //swap token using 0x swap\r\n            tokensBought = tokensBought.add(\r\n                _fillQuote(\r\n                    token0,\r\n                    _toToken,\r\n                    _amountA,\r\n                    _swapTarget[0],\r\n                    swap1Data\r\n                )\r\n            );\r\n        }\r\n\r\n        //swap token1 to toToken\r\n        if (token1 == _toToken) {\r\n            tokensBought = tokensBought.add(_amountB);\r\n        } else {\r\n            //swap token using 0x swap\r\n            tokensBought = tokensBought.add(\r\n                _fillQuote(\r\n                    token1,\r\n                    _toToken,\r\n                    _amountB,\r\n                    _swapTarget[1],\r\n                    swap2Data\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function _fillQuote(\r\n        address _fromTokenAddress,\r\n        address _toToken,\r\n        uint256 _amount,\r\n        address _swapTarget,\r\n        bytes memory swapData\r\n    ) internal returns (uint256) {\r\n        uint256 valueToSend;\r\n        if (_fromTokenAddress == address(0)) {\r\n            valueToSend = _amount;\r\n        } else {\r\n            IERC20 fromToken = IERC20(_fromTokenAddress);\r\n            fromToken.safeApprove(address(_swapTarget), 0);\r\n            fromToken.safeApprove(address(_swapTarget), _amount);\r\n        }\r\n\r\n        uint256 initialBalance = _toToken == address(0)\r\n            ? address(this).balance\r\n            : IERC20(_toToken).balanceOf(address(this));\r\n\r\n        (bool success, ) = _swapTarget.call.value(valueToSend)(swapData);\r\n        require(success, \"Error Swapping Tokens\");\r\n\r\n        uint256 finalBalance = _toToken == address(0)\r\n            ? (address(this).balance).sub(initialBalance)\r\n            : IERC20(_toToken).balanceOf(address(this)).sub(initialBalance);\r\n\r\n        require(finalBalance > 0, \"Swapped to Invalid Intermediate\");\r\n\r\n        return finalBalance;\r\n    }\r\n\r\n    /**\r\n    @notice this method returns the amount of tokens received in underlying tokens after removal of liquidity.\r\n    @param _FromUniPoolAddress indicates the liquidity pool.\r\n    @param _tokenA indicates the tokenA of pool\r\n    @param _tokenB indicates the tokenB of pool\r\n    @param _liquidity indicates the amount of liquidity to remove.\r\n    @return  amountA - indicates the amount removed in token0, amountB - indicates the amount removed in token1 \r\n    */\r\n    function removeLiquidityReturn(\r\n        address _FromUniPoolAddress,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _liquidity\r\n    ) external view returns (uint256 amountA, uint256 amountB) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);\r\n\r\n        (uint256 amount0, uint256 amount1) = _getBurnAmount(\r\n            _FromUniPoolAddress,\r\n            pair,\r\n            _tokenA,\r\n            _tokenB,\r\n            _liquidity\r\n        );\r\n\r\n        (address token0, ) = _sortTokens(_tokenA, _tokenB);\r\n\r\n        (amountA, amountB) = _tokenA == token0\r\n            ? (amount0, amount1)\r\n            : (amount1, amount0);\r\n\r\n        require(amountA >= 1, \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= 1, \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    function _sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    function _getBurnAmount(\r\n        address _FromUniPoolAddress,\r\n        IUniswapV2Pair pair,\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _liquidity\r\n    ) internal view returns (uint256 amount0, uint256 amount1) {\r\n        uint256 balance0 = IERC20(_token0).balanceOf(_FromUniPoolAddress);\r\n        uint256 balance1 = IERC20(_token1).balanceOf(_FromUniPoolAddress);\r\n\r\n        uint256 _totalSupply = pair.totalSupply();\r\n\r\n        amount0 = _liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = _liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 > 0 && amount1 > 0,\r\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n    }\r\n\r\n    function _subtractGoodwill(\r\n        address token,\r\n        uint256 amount,\r\n        address affiliate\r\n    ) internal returns (uint256 totalGoodwillPortion) {\r\n        bool whitelisted = feeWhitelist[msg.sender];\r\n        if (!whitelisted && goodwill > 0) {\r\n            totalGoodwillPortion = SafeMath.div(\r\n                SafeMath.mul(amount, goodwill),\r\n                10000\r\n            );\r\n\r\n            if (affiliates[affiliate]) {\r\n                uint256 affiliatePortion = totalGoodwillPortion\r\n                    .mul(affiliateSplit)\r\n                    .div(100);\r\n                affiliateBalance[affiliate][token] = affiliateBalance[affiliate][token]\r\n                    .add(affiliatePortion);\r\n                totalAffiliateBalance[token] = totalAffiliateBalance[token].add(\r\n                    affiliatePortion\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill <= 100,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_feeWhitelist(address zapAddress, bool status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        feeWhitelist[zapAddress] = status;\r\n    }\r\n\r\n    function set_new_affiliateSplit(uint256 _new_affiliateSplit)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _new_affiliateSplit <= 100,\r\n            \"Affiliate Split Value not allowed\"\r\n        );\r\n        affiliateSplit = _new_affiliateSplit;\r\n    }\r\n\r\n    function set_affiliate(address _affiliate, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        affiliates[_affiliate] = _status;\r\n    }\r\n\r\n    function ownerWithdrawTokens(address[] calldata tokens) external onlyOwner {\r\n        // withdraw goodwill share + extra tokens if any sent\r\n        // prevent owner from withdrawing affiliate share\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 qty;\r\n\r\n            if (tokens[i] == ETHAddress) {\r\n                qty = address(this).balance.sub(\r\n                    totalAffiliateBalance[tokens[i]]\r\n                );\r\n                Address.sendValue(Address.toPayable(owner()), qty);\r\n            } else {\r\n                qty = IERC20(tokens[i]).balanceOf(address(this)).sub(\r\n                    totalAffiliateBalance[tokens[i]]\r\n                );\r\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\r\n            }\r\n        }\r\n    }\r\n\r\n    function affilliateWithdraw(address[] calldata tokens) external {\r\n        uint256 tokenBal;\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            tokenBal = affiliateBalance[msg.sender][tokens[i]];\r\n            affiliateBalance[msg.sender][tokens[i]] = 0;\r\n            totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]]\r\n                .sub(tokenBal);\r\n\r\n            if (tokens[i] == ETHAddress) {\r\n                Address.sendValue(msg.sender, tokenBal);\r\n            } else {\r\n                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goodwill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliateSplit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRec\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromUniPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_swapTarget\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"swap1Data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2Data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"ZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromUniPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"ZapOut2PairToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromUniPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_permitData\",\"type\":\"bytes\"}],\"name\":\"ZapOut2PairTokenWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromUniPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_permitData\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_swapTarget\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"swap1Data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2Data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"ZapOutWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"affilliateWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ownerWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromUniPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"set_affiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"zapAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_feeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_affiliateSplit\",\"type\":\"uint256\"}],\"name\":\"set_new_affiliateSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_goodwill\",\"type\":\"uint256\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAffiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV2_ZapOut_General_V3","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://309ca976759a33280af5250723ca6eadf9f87c06911b9470dae2ac4cc2248edf"}]}