{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/Router.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./interfaces/IBalancerPool.sol\\\";\\nimport \\\"./interfaces/IStakingManager.sol\\\";\\nimport \\\"./templates/Initializable.sol\\\";\\n\\n/**\\n * @title Router\\n * @dev Liquidity management contract\\n */\\ncontract Router is Ownable, Initializable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev informs that EURxb router balance is empty\\n     */\\n    event EmptyEURxbBalance();\\n\\n    address private _teamAddress;\\n    IStakingManager private _stakingManager;\\n    uint256 private _startTime;\\n    uint256 private _endTime;\\n    address private _tUSDT;\\n    address private _tUSDC;\\n    address private _tBUSD;\\n    address private _tDAI;\\n    IERC20 private _tEURxb;\\n\\n    IUniswapV2Router02 private _uniswapRouter;\\n\\n    bool _isClosedContract = false;\\n\\n    mapping(address => address) private _pools;\\n\\n    constructor(address teamAddress) public {\\n        _teamAddress = teamAddress;\\n    }\\n\\n    /**\\n     * @dev setup uniswap router\\n     */\\n    function configure(\\n        address stakingManager,\\n        address uniswapRouter,\\n        address tUSDT,\\n        address tUSDC,\\n        address tBUSD,\\n        address tDAI,\\n        address tEURxb\\n    ) external initializer {\\n        // set uniswap router contract address\\n        _uniswapRouter = IUniswapV2Router02(uniswapRouter);\\n        // set staking manager contract address\\n        _stakingManager = IStakingManager(stakingManager);\\n        // set stablecoins contract addresses\\n        _tUSDT = tUSDT;\\n        _tUSDC = tUSDC;\\n        _tBUSD = tBUSD;\\n        _tDAI = tDAI;\\n        // set eurxb contract address\\n        _tEURxb = IERC20(tEURxb);\\n        // set stakingManager start/end times\\n        _startTime = _stakingManager.startTime();\\n        _endTime = _stakingManager.endTime();\\n        // set balancer pools and uniswap pairs addresses\\n        address[4] memory pools = _stakingManager.getPools();\\n        _pools[_tUSDT] = pools[0];\\n        _pools[_tUSDC] = pools[1];\\n        _pools[_tBUSD] = pools[2];\\n        _pools[_tDAI] = pools[3];\\n    }\\n\\n    /**\\n     * @return are the tokens frozen\\n     */\\n    function isClosedContract() external view returns (bool) {\\n        return _isClosedContract;\\n    }\\n\\n    /**\\n     * @return staking manager address\\n     */\\n    function stakingManager() external view returns (address) {\\n        return address(_stakingManager);\\n    }\\n\\n    /**\\n     * @return uniswap router address\\n     */\\n    function uniswapRouter() external view returns (address) {\\n        return address(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @return EURxb address\\n     */\\n    function eurxb() external view returns (address) {\\n        return address(_tEURxb);\\n    }\\n\\n    /**\\n     * @return start time\\n     */\\n    function startTime() external view returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    /**\\n     * @return end time\\n     */\\n    function endTime() external view returns (uint256) {\\n        return _endTime;\\n    }\\n\\n    /**\\n     * @return stable coins pool addresses\\n     */\\n    function getPoolAddress(address token) external view returns (address) {\\n        return _pools[token];\\n    }\\n\\n    /**\\n     * @return team address\\n     */\\n    function teamAddress() external view returns (address) {\\n        return _teamAddress;\\n    }\\n\\n    /**\\n     * @dev set team address\\n     * @param team address\\n     */\\n    function setTeamAddress(address team) external onlyOwner {\\n        _teamAddress = team;\\n    }\\n\\n    /**\\n     * @dev Close contract\\n     */\\n    function closeContract() external onlyOwner {\\n        require(_endTime < block.timestamp, \\\"Time is not over\\\");\\n        uint256 balance = _tEURxb.balanceOf(address(this));\\n        if (balance > 0) {\\n            _tEURxb.transfer(_teamAddress, balance);\\n        }\\n        _isClosedContract = true;\\n    }\\n\\n    /**\\n     * @dev Adding liquidity\\n     * @param token address\\n     * @param amount number of tokens\\n     */\\n    function addLiquidity(address token, uint256 amount) external {\\n        require(block.timestamp >= _startTime, \\\"The time has not come yet\\\");\\n        require(!_isClosedContract, \\\"Contract closed\\\");\\n        if (token == _tUSDC || token == _tDAI) {\\n            _addLiquidityBalancer(_msgSender(), token, amount);\\n        } else if (token == _tUSDT || token == _tBUSD) {\\n            _addLiquidityUniswap(_msgSender(), token, amount);\\n        } else {\\n            revert(\\\"token is not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds liquidity for USDT-EURxb and BUSD-EURxb pairs\\n     * @param token address\\n     * @param amount number of tokens\\n     */\\n    function _addLiquidityUniswap(address sender, address token, uint256 amount) internal {\\n        address pairAddress = _pools[token];\\n\\n        uint256 exchangeAmount = amount.div(2);\\n\\n        (uint256 tokenRatio, uint256 eurRatio) = _getUniswapReservesRatio(token);\\n\\n        uint256 amountEUR = exchangeAmount.mul(eurRatio).div(tokenRatio);\\n        uint256 balanceEUR = _tEURxb.balanceOf(address(this));\\n\\n        require(balanceEUR >= 10 ** 18, 'EmptyEURxbBalance'); // balance great then 1 EURxb token\\n\\n        // check if we don't have enough eurxb tokens\\n        if (balanceEUR <= amountEUR) {\\n            amountEUR = balanceEUR;\\n            // we can take only that much\\n            exchangeAmount = amountEUR.mul(tokenRatio).div(eurRatio);\\n            emit EmptyEURxbBalance();\\n        }\\n\\n        TransferHelper.safeTransferFrom(token, sender, address(this), exchangeAmount.mul(2));\\n\\n        // approve transfer tokens and eurxbs to uniswap pair\\n        TransferHelper.safeApprove(token, address(_uniswapRouter), exchangeAmount);\\n        TransferHelper.safeApprove(address(_tEURxb), address(_uniswapRouter), amountEUR);\\n\\n        (, , uint256 liquidityAmount) = _uniswapRouter\\n        .addLiquidity(\\n            address(_tEURxb),\\n            token,\\n            amountEUR, // token B\\n            exchangeAmount, // token A\\n            0, // min A amount\\n            0, // min B amount\\n            address(this), // mint liquidity to router, not user\\n            block.timestamp + 10 minutes // deadline 10 minutes\\n        );\\n\\n        uint256 routerTokenBalance = IERC20(token).balanceOf(address(this));\\n        TransferHelper.safeTransfer(token, _teamAddress, routerTokenBalance);\\n\\n        // reward user with liquidity\\n        if (block.timestamp > _endTime) {\\n            TransferHelper.safeTransfer(pairAddress, sender, liquidityAmount);\\n        } else {\\n            TransferHelper.safeApprove(pairAddress, address(_stakingManager), liquidityAmount);\\n            _stakingManager.addStake(sender, pairAddress, liquidityAmount);\\n        }\\n\\n        TransferHelper.safeApprove(token, address(_uniswapRouter), 0);\\n    }\\n\\n    function _addLiquidityBalancer(address sender, address token, uint256 amount) internal {\\n        address poolAddress = _pools[token];\\n        IBalancerPool pool = IBalancerPool(poolAddress);\\n        uint256 totalSupply = pool.totalSupply();\\n\\n        uint256 exchangeAmount = amount.div(2);\\n\\n        (uint256 tokenRatio, uint256 eurRatio) = _getBalancerReservesRatio(token, pool);\\n        uint256 amountEUR = exchangeAmount.mul(eurRatio).div(tokenRatio);\\n        uint256 balanceEUR = _tEURxb.balanceOf(address(this));\\n\\n        require(balanceEUR >= 10 ** 18, 'EmptyEURxbBalance'); // balance great then 1 EURxb token\\n\\n        uint256 routerTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        // check if we don't have enough eurxb tokens\\n        if (balanceEUR <= amountEUR) {\\n            amountEUR = balanceEUR;\\n            // we can take only that much\\n            exchangeAmount = amountEUR.mul(tokenRatio).div(eurRatio);\\n            emit EmptyEURxbBalance();\\n        }\\n\\n        TransferHelper.safeTransferFrom(token, sender, address(this), exchangeAmount.mul(2));\\n\\n        uint256 amountBPT;\\n        address addressEURxb = address(_tEURxb);\\n\\n        { // to save stack space\\n            TransferHelper.safeApprove(token, poolAddress, exchangeAmount);\\n            TransferHelper.safeApprove(addressEURxb, poolAddress, amountEUR);\\n\\n            uint256 balance = pool.getBalance(addressEURxb);\\n            amountBPT = totalSupply.mul(amountEUR).div(balance);\\n            amountBPT = amountBPT.mul(99).div(100);\\n\\n            uint256[] memory data = new uint256[](2);\\n            data[0] = amountEUR;\\n            data[1] = exchangeAmount;\\n            pool.joinPool(amountBPT, data);\\n        }\\n\\n        TransferHelper.safeTransfer(token, _teamAddress, exchangeAmount);\\n\\n        routerTokenBalance = (IERC20(token).balanceOf(address(this))).sub(routerTokenBalance);\\n        TransferHelper.safeTransfer(token, msg.sender, routerTokenBalance);\\n        TransferHelper.safeTransfer(addressEURxb, msg.sender, routerTokenBalance.mul(eurRatio).div(tokenRatio));\\n\\n        if (block.timestamp > _endTime) {\\n            TransferHelper.safeTransfer(poolAddress, sender, amountBPT);\\n        } else {\\n            TransferHelper.safeApprove(poolAddress, address(_stakingManager), amountBPT);\\n            _stakingManager.addStake(sender, poolAddress, amountBPT);\\n        }\\n\\n        TransferHelper.safeApprove(token, poolAddress, 0);\\n    }\\n\\n    /**\\n     * @dev returns uniswap pair reserves numbers or default numbers\\n     * used to get token/eurxb ratio\\n     */\\n    function _getUniswapReservesRatio(address token)\\n    internal\\n    returns (uint256 tokenRes, uint256 eurRes)\\n    {\\n        (uint112 res0, uint112 res1,) = IUniswapV2Pair(_pools[token]).getReserves();\\n        if (res0 == 0 || res1 == 0) {\\n            (tokenRes, eurRes) = (\\n                (10 ** uint256(_getTokenDecimals(token))).mul(27),\\n                (10 ** uint256(_getTokenDecimals(address(_tEURxb)))).mul(23)\\n            );\\n        } else {\\n            (address token0,) = _sortTokens(token, address(_tEURxb));\\n            (tokenRes, eurRes) = (token == token0) ? (res0, res1) : (res1, res0);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns balancer pair reserves numbers or default numbers\\n     * used to get token/eurxb ratio\\n     * guarantees, that returned numbers greater than zero\\n     */\\n    function _getBalancerReservesRatio(address token, IBalancerPool pool)\\n    internal\\n    returns (uint256, uint256)\\n    {\\n        uint256 balanceEurXB = pool.getBalance(address(_tEURxb));\\n        uint256 balanceToken = pool.getBalance(token);\\n\\n        if (balanceEurXB == 0 || balanceToken == 0) {\\n            return (\\n                (10 ** uint256(_getTokenDecimals(token))).mul(27),\\n                (10 ** uint256(_getTokenDecimals(address(_tEURxb)))).mul(23)\\n            );\\n        }\\n\\n        return (balanceToken, balanceEurXB);\\n    }\\n\\n    /**\\n     * @dev sorts token addresses just like uniswap router does\\n     */\\n    function _sortTokens(address tokenA, address tokenB)\\n    internal pure\\n    returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"identical tokens\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'zero address');\\n    }\\n\\n    function _getTokenDecimals(address token) internal returns (uint8) {\\n        // bytes4(keccak256(bytes('decimals()')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x313ce567));\\n        require(success &&\\n            (data.length == 0 ||\\n            abi.decode(data, (uint8)) > 0 ||\\n            abi.decode(data, (uint8)) < 100), \\\"DECIMALS_NOT_FOUND\\\");\\n        return abi.decode(data, (uint8));\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/interfaces/IBalancerPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title IBalancerPool\\n * @dev Pool balancer interface\\n */\\ninterface IBalancerPool {\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external;\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n}\\n\"\r\n    },\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/interfaces/IStakingManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title IStakingManager\\n * @dev Staking manager interface\\n */\\ninterface IStakingManager {\\n    function addStake(\\n        address user,\\n        address pool,\\n        uint256 amount\\n    ) external;\\n\\n    function startTime() external view returns (uint256);\\n\\n    function endTime() external view returns (uint256);\\n\\n    function getPools() external view returns (address[4] memory);\\n}\\n\"\r\n    },\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/templates/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n\\n/**\\n * @title Initializable allows to create initializable contracts\\n * so that only deployer can initialize contract and only once\\n */\\ncontract Initializable is Context {\\n    bool private _isContractInitialized;\\n    address private _deployer;\\n\\n    constructor() public {\\n        _deployer = _msgSender();\\n    }\\n\\n    modifier initializer {\\n        require(_msgSender() == _deployer, \\\"user not allowed to initialize\\\");\\n        require(!_isContractInitialized, \\\"contract already initialized\\\");\\n        _;\\n        _isContractInitialized = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmptyEURxbBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tUSDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tUSDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tBUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tDAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tEURxb\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eurxb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClosedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Router","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006e7249c50c5dd738c0bcf5e3f8f17679d5978e28","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}