{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\tfunction removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETH(address token,uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\r\n\tfunction removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETHWithPermit(address token,uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountETH);\r\n\tfunction swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\tfunction swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\r\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountETH);\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\tfunction shareOf(address account) external view returns (uint256 share); // hegic\r\n\t\r\n\tfunction allInfoFor(address _user) external view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 openingBlock, uint256 currentBlock, uint256 userETH, uint256 userSURF, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue); // surf3d\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ScamChecker  {\r\n\taddress payable public contractOwner;\r\n\r\n\tconstructor() public {\r\n\t\tcontractOwner = msg.sender;\r\n\t}\r\n\r\n\tfunction execute(bytes calldata data) external payable {\t\t\r\n\t}\r\n\t\r\n\tfunction withdraw(address atoken) public {\r\n\t\trequire(msg.sender == contractOwner, \"Nope\");\r\n\r\n\t\tIERC20 token = IERC20(atoken);\r\n\t\tuint256 bal = token.balanceOf(address(this));\r\n\t\tif (bal > 0)\r\n\t\t\ttoken.transfer(contractOwner, bal);\r\n\r\n\t\tbal = address(this).balance;\r\n\t\tif (bal > 0)\r\n\t\t\tcontractOwner.send(bal);\r\n\t}\r\n\r\n\tfunction testTokenWeth(address tokenAddr) public {\r\n\t\ttestToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, tokenAddr);\r\n\t}\r\n\r\n\tfunction testToken(address tokenAddr0, address tokenAddr1) public {\r\n\t\tIERC20 token0 = IERC20(tokenAddr0);\r\n\t\tIERC20 token1 = IERC20(tokenAddr1);\r\n\r\n\t\ttoken0.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, uint(-1));\r\n\t\ttoken1.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, uint(-1));\r\n\r\n\t\tIUniswapV2Router02 exchange = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = tokenAddr0;\r\n\t\tpath[1] = tokenAddr1;\r\n\t\tuint256 bal = token0.balanceOf(address(this));\r\n\t\texchange.swapExactTokensForTokens(bal, 1, path, address(this), block.timestamp);\r\n\r\n\t\tbal = token1.balanceOf(address(this));\r\n\t\tpath[0] = tokenAddr1;\r\n\t\tpath[1] = tokenAddr0;\r\n\t\texchange.swapExactTokensForTokens(bal, 1, path, address(this), block.timestamp);\r\n\t}\r\n\t\r\n\tfunction testFeeTokenWeth(address tokenAddr) public returns (uint256) {\r\n\t\treturn testFeeTokenWeth(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokenAddr);\r\n\t}\r\n\t\r\n\tfunction testFeeTokenWeth(address router, address tokenAddr) public returns (uint256) {\r\n\t\treturn testFeeToken(router, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, tokenAddr);\r\n\t}\r\n\r\n\tfunction testFeeToken(address tokenAddr0, address tokenAddr1) public returns (uint256) {\r\n\t\treturn testFeeToken(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokenAddr0, tokenAddr1);\r\n\t}\r\n\r\n\tfunction testFeeToken(address router, address tokenAddr0, address tokenAddr1) public returns (uint256) {\r\n\t\tIERC20 token0 = IERC20(tokenAddr0);\r\n\t\tIERC20 token1 = IERC20(tokenAddr1);\r\n\r\n\t\ttoken0.approve(router, uint(-1));\r\n\t\ttoken1.approve(router, uint(-1));\r\n\r\n\t\tIUniswapV2Router02 exchange = IUniswapV2Router02(router);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = tokenAddr0;\r\n\t\tpath[1] = tokenAddr1;\r\n\t\tuint256 bal0 = token0.balanceOf(address(this));\r\n\t\texchange.swapExactTokensForTokensSupportingFeeOnTransferTokens(bal0, 1, path, address(this), block.timestamp);\r\n\r\n\t\tuint256 bal1 = token1.balanceOf(address(this));\r\n\t\tpath[0] = tokenAddr1;\r\n\t\tpath[1] = tokenAddr0;\r\n\t\texchange.swapExactTokensForTokensSupportingFeeOnTransferTokens(bal1, 1, path, address(this), block.timestamp);\r\n\r\n\t\treturn (token0.balanceOf(address(this)) * 1000) / bal0;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr1\",\"type\":\"address\"}],\"name\":\"testFeeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr1\",\"type\":\"address\"}],\"name\":\"testFeeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"testFeeTokenWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"testFeeTokenWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr1\",\"type\":\"address\"}],\"name\":\"testToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"testTokenWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atoken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ScamChecker","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e4ee742c6f2aca10615c367ae611271ce53a2911071dd8c930d4e129f24a525"}]}