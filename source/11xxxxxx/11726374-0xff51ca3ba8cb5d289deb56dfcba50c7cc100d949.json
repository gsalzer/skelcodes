{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nenum OptionType {Invalid, Put, Call}\\r\\n\\r\\nenum PurchaseMethod {Invalid, Contract, ZeroEx}\\r\\n\\r\\nstruct OptionTerms {\\r\\n    address underlying;\\r\\n    address strikeAsset;\\r\\n    address collateralAsset;\\r\\n    uint256 expiry;\\r\\n    uint256 strikePrice;\\r\\n    OptionType optionType;\\r\\n}\\r\\n\\r\\nstruct ZeroExOrder {\\r\\n    address exchangeAddress;\\r\\n    address buyTokenAddress;\\r\\n    address sellTokenAddress;\\r\\n    address allowanceTarget;\\r\\n    uint256 protocolFee;\\r\\n    uint256 makerAssetAmount;\\r\\n    uint256 takerAssetAmount;\\r\\n    bytes swapData;\\r\\n}\"\r\n    },\r\n    \"IProtocolAdapter.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"types.sol\\\";\\r\\ninterface IProtocolAdapter {\\r\\n    /**\\r\\n     * @notice Emitted when a new option contract is purchased\\r\\n     */\\r\\n    event Purchased(\\r\\n        address indexed caller,\\r\\n        string indexed protocolName,\\r\\n        address indexed underlying,\\r\\n        address strikeAsset,\\r\\n        uint256 expiry,\\r\\n        uint256 strikePrice,\\r\\n        OptionType optionType,\\r\\n        uint256 amount,\\r\\n        uint256 premium,\\r\\n        uint256 optionID\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when an option contract is exercised\\r\\n     */\\r\\n    event Exercised(\\r\\n        address indexed caller,\\r\\n        address indexed options,\\r\\n        uint256 indexed optionID,\\r\\n        uint256 amount,\\r\\n        uint256 exerciseProfit\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Name of the adapter. E.g. \\\"HEGIC\\\", \\\"OPYN_V1\\\". Used as index key for adapter addresses\\r\\n     */\\r\\n    function protocolName() external pure returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Boolean flag to indicate whether to use option IDs or not.\\r\\n     * Fungible protocols normally use tokens to represent option contracts.\\r\\n     */\\r\\n    function nonFungible() external pure returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the purchase method used to purchase options\\r\\n     */\\r\\n    function purchaseMethod() external pure returns (PurchaseMethod);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an options contract exist based on the passed parameters.\\r\\n     * @param optionTerms is the terms of the option contract\\r\\n     */\\r\\n    function optionsExist(OptionTerms calldata optionTerms)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the options contract's address based on the passed parameters\\r\\n     * @param optionTerms is the terms of the option contract\\r\\n     */\\r\\n    function getOptionsAddress(OptionTerms calldata optionTerms)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\\r\\n     * @param optionTerms is the terms of the option contract\\r\\n     * @param purchaseAmount is the number of options purchased\\r\\n     */\\r\\n    function premium(OptionTerms calldata optionTerms, uint256 purchaseAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 cost);\\r\\n\\r\\n    /**\\r\\n     * @notice Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.\\r\\n     * @param options is the address of the options contract\\r\\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\\r\\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\\r\\n     */\\r\\n    function exerciseProfit(\\r\\n        address options,\\r\\n        uint256 optionID,\\r\\n        uint256 amount\\r\\n    ) external view returns (uint256 profit);\\r\\n\\r\\n    function canExercise(\\r\\n        address options,\\r\\n        uint256 optionID,\\r\\n        uint256 amount\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Purchases the options contract.\\r\\n     * @param optionTerms is the terms of the option contract\\r\\n     * @param amount is the purchase amount in Wad units (10**18)\\r\\n     */\\r\\n    function purchase(OptionTerms calldata optionTerms, uint256 amount)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 optionID);\\r\\n\\r\\n    /**\\r\\n     * @notice Exercises the options contract.\\r\\n     * @param options is the address of the options contract\\r\\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\\r\\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\\r\\n     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\\r\\n     */\\r\\n    function exercise(\\r\\n        address options,\\r\\n        uint256 optionID,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external payable;\\r\\n}\"\r\n    },\r\n    \"ProtocolAdapter.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"IProtocolAdapter.sol\\\";\\r\\n//\\r\\nlibrary ProtocolAdapter {\\r\\n    function delegateProtocolName(IProtocolAdapter adapter)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\\"protocolName()\\\")\\r\\n            );\\r\\n        require(success, \\\"protocolName staticcall failed\\\");\\r\\n        return abi.decode(result, (string));\\r\\n    }\\r\\n\\r\\n    function delegateNonFungible(IProtocolAdapter adapter)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\\"nonFungible()\\\")\\r\\n            );\\r\\n        require(success, \\\"nonFungible staticcall failed\\\");\\r\\n        return abi.decode(result, (bool));\\r\\n    }\\r\\n\\r\\n    function delegateOptionsExist(\\r\\n        IProtocolAdapter adapter,\\r\\n        OptionTerms calldata optionTerms\\r\\n    ) external view returns (bool) {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"optionsExist((address,address,address,uint256,uint256,uint8))\\\",\\r\\n                    optionTerms\\r\\n                )\\r\\n            );\\r\\n        require(success, \\\"optionsExist staticcall failed\\\");\\r\\n        return abi.decode(result, (bool));\\r\\n    }\\r\\n\\r\\n    function delegateGetOptionsAddress(\\r\\n        IProtocolAdapter adapter,\\r\\n        OptionTerms calldata optionTerms\\r\\n    ) external view returns (address) {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"getOptionsAddress((address,address,address,uint256,uint256,uint8))\\\",\\r\\n                    optionTerms\\r\\n                )\\r\\n            );\\r\\n        require(success, getRevertMsg(result));\\r\\n        require(success, \\\"getOptionsAddress staticcall failed\\\");\\r\\n        return abi.decode(result, (address));\\r\\n    }\\r\\n\\r\\n    function delegatePremium(\\r\\n        IProtocolAdapter adapter,\\r\\n        OptionTerms calldata optionTerms,\\r\\n        uint256 purchaseAmount\\r\\n    ) external view returns (uint256) {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"premium((address,address,address,uint256,uint256,uint8),uint256)\\\",\\r\\n                    optionTerms,\\r\\n                    purchaseAmount\\r\\n                )\\r\\n            );\\r\\n        require(success, \\\"premium staticcall failed\\\");\\r\\n        return abi.decode(result, (uint256));\\r\\n    }\\r\\n\\r\\n    function delegateExerciseProfit(\\r\\n        IProtocolAdapter adapter,\\r\\n        address options,\\r\\n        uint256 optionID,\\r\\n        uint256 amount\\r\\n    ) external view returns (uint256) {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).staticcall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"exerciseProfit(address,uint256,uint256)\\\",\\r\\n                    options,\\r\\n                    optionID,\\r\\n                    amount\\r\\n                )\\r\\n            );\\r\\n        require(success, getRevertMsg(result));\\r\\n        require(success, \\\"exerciseProfit staticcall failed\\\");\\r\\n        return abi.decode(result, (uint256));\\r\\n    }\\r\\n\\r\\n    function delegatePurchase(\\r\\n        IProtocolAdapter adapter,\\r\\n        OptionTerms calldata optionTerms,\\r\\n        uint256 purchaseAmount\\r\\n    ) external returns (uint256) {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"purchase((address,address,address,uint256,uint256,uint8),uint256)\\\",\\r\\n                    optionTerms,\\r\\n                    purchaseAmount\\r\\n                )\\r\\n            );\\r\\n        require(success, getRevertMsg(result));\\r\\n        return abi.decode(result, (uint256));\\r\\n    }\\r\\n\\r\\n    function delegatePurchaseWithZeroEx(\\r\\n        IProtocolAdapter adapter,\\r\\n        OptionTerms calldata optionTerms,\\r\\n        ZeroExOrder calldata zeroExOrder\\r\\n    ) external {\\r\\n        (bool success, bytes memory result) =\\r\\n            address(adapter).delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"purchaseWithZeroEx((address,address,address,uint256,uint256,uint8),(address,address,address,address,uint256,uint256,uint256,bytes))\\\",\\r\\n                    optionTerms,\\r\\n                    zeroExOrder\\r\\n                )\\r\\n            );\\r\\n        require(success, getRevertMsg(result));\\r\\n    }\\r\\n\\r\\n    function delegateExercise(\\r\\n        IProtocolAdapter adapter,\\r\\n        address options,\\r\\n        uint256 optionID,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external {\\r\\n        (bool success, bytes memory res) =\\r\\n            address(adapter).delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"exercise(address,uint256,uint256,address)\\\",\\r\\n                    options,\\r\\n                    optionID,\\r\\n                    amount,\\r\\n                    recipient\\r\\n                )\\r\\n            );\\r\\n        require(success, getRevertMsg(res));\\r\\n        require(success, \\\"exercise delegatecall failed\\\");\\r\\n    }\\r\\n\\r\\n    function getRevertMsg(bytes memory _returnData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"},{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegateExerciseProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum OptionType\",\"name\":\"optionType\",\"type\":\"OptionType\"}],\"internalType\":\"struct OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"delegateGetOptionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"}],\"name\":\"delegateNonFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum OptionType\",\"name\":\"optionType\",\"type\":\"OptionType\"}],\"internalType\":\"struct OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"delegateOptionsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum OptionType\",\"name\":\"optionType\",\"type\":\"OptionType\"}],\"internalType\":\"struct OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"delegatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"adapter\",\"type\":\"IProtocolAdapter\"}],\"name\":\"delegateProtocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProtocolAdapter","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://02d68db99cbe02282252e5555ed692da06089041ab303f78e313d56bdc41113c"}]}