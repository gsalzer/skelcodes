{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/app/contracts/Files.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity >=0.4.22 <0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\ncontract Files is OwnableUpgradeable {\\n\\n\\n    // Audio Fles Contract:\\n\\n    // File number: 1 \\n    // Title: Breaking the Chain\\n    // Album: Living an Impossible Dream\\n    // Website: https://QuantumIndigo.org\\n    // IPFS URL: (IPFS URL)\\n    // Comment: The World's First Decentralised Media Arts Collective.\\n    // Copyright: 2020 QMP (GnuPG ID FFE28038)\\n    // Submission Date: [DD.MM.YY]\\n    // Blockchain Write Date: [UNIX Date Generated by Smart Contract]\\n    // MD5 Hash: [MD5_hash]\\n\\n    struct FileOutput {\\n\\t\\tstring separator;\\n        string file_number;\\n\\t\\tstring title;\\n\\t\\tstring album;\\n\\t\\tstring website;\\n\\t\\tstring ipfs_hash;\\n\\t\\tstring comment;\\n\\t\\tstring copyright;\\n        string submission_date;\\n\\t\\tstring blockchain_date;\\n        string md_hash;\\n    }\\n\\n    struct FileOutputCollection {\\n\\t\\tstring[] separator;\\n        string[] file_number;\\n\\t\\tstring[] title;\\n\\t\\tstring[] album;\\n\\t\\tstring[] website;\\n\\t\\tstring[] ipfs_hash;\\n\\t\\tstring[] comment;\\n\\t\\tstring[] copyright;\\n        string[] submission_date;\\n\\t\\tstring[] blockchain_date;\\n        string[] md_hash;\\n    }\\n\\n    uint256 private size;\\n\\n\\t// Searches will be done nased on IPFS hash and SHA256 Hash.\\n\\n    mapping(uint256 => string) filesNumberIndex;\\n    mapping(string => uint256[]) filesByNumber;\\n\\n    mapping(uint256 => string) filesIpfsHashIndex;\\n    mapping(string => uint256[]) filesByIpfsHash;\\n\\n\\tmapping(uint256 => string) filesMDHashIndex;\\n    mapping(string => uint256[]) filesByMDHash;\\n\\n  \\n\\tmapping(uint256 => string) filesTitleIndex;\\n    mapping(uint256 => string) filesAlbumSeriesIndex;\\n\\tmapping(uint256 => string) filesWebsiteIndex;\\n\\tmapping(uint256 => string) filesCommentIndex;\\n\\tmapping(uint256 => string) filesCopyrightIndex;\\n    mapping(uint256 => string) filesSubmissionDateIndex;\\n\\tmapping(uint256 => uint256) filesBlockchainDateIndex;\\n    \\n    function initialize() initializer public {\\n        __Ownable_init();\\n    }\\n\\n    function addFile(string[] memory metadata) public onlyOwner returns (uint256) {\\n\\n        require( metadata.length == 9);\\n\\n\\t\\t// Data is pasted in FileOutput Order. Blockchain date is skipped because it will be added when the block is mined.\\n\\t\\t// 8 Items in total\\n\\n        string memory _file_number = metadata[0];\\n        string memory _title = metadata[1];\\n        string memory _album = metadata[2];\\n        string memory _website = metadata[3];\\n\\t    string memory _ipfs_hash = metadata[4];\\n        string memory _comment = metadata[5];\\n\\t\\tstring memory _copyright = metadata[6];\\n        string memory _submission_date = metadata[7];\\n\\t\\tstring memory _md_hash = metadata[8];\\n \\n\\n        filesNumberIndex[size] = _file_number;\\n        filesTitleIndex[size] = _title;\\n        filesAlbumSeriesIndex[size] = _album;\\n        filesWebsiteIndex[size] = _website;\\n        filesIpfsHashIndex[size] = _ipfs_hash;\\n        filesCommentIndex[size] = _comment;\\n        filesCopyrightIndex[size] = _copyright;\\n        filesSubmissionDateIndex[size] = _submission_date;\\n        filesBlockchainDateIndex[size] = block.timestamp;\\n\\t\\tfilesMDHashIndex[size] = _md_hash;\\n\\n\\n        filesByNumber[_file_number].push(size);\\n        filesByIpfsHash[_ipfs_hash].push(size);\\n        filesByMDHash[_md_hash].push(size);\\n\\n        size = size + 1;\\n        return size;\\n    }\\n\\n    function Find_Files_by_QI_Audio_Catalogue_Number(uint256 QI_Audio_Catalogue) view external returns (FileOutput[] memory) {\\n        return findFilesByKey(1, StringsUpgradeable.toString(QI_Audio_Catalogue));\\n    }\\n\\n    function Find_Files_by_IPFS_Hash(string calldata IPFS_Hash) view external returns (FileOutput[] memory) {\\n        return findFilesByKey(2, IPFS_Hash);\\n    }\\n\\n    function Find_Files_by_MD5_Hash(string calldata MD5_Hash) view external returns (FileOutput[] memory) {\\n        return findFilesByKey(3, MD5_Hash);\\n    }\\n\\n    function findFilesByKey(int key, string memory hash) view internal returns (FileOutput[] memory) {\\n        uint256 len;\\n\\n\\n        if(key == 1){\\n            len = filesByNumber[hash].length;\\n        } \\n\\n        if(key == 2){\\n            len = filesByIpfsHash[hash].length;\\n        } \\n\\n        if(key == 3){\\n            len = filesByMDHash[hash].length;\\n        } \\n\\n        FileOutputCollection memory outputsCollection;\\n\\n        outputsCollection.separator = new string[](len);\\n        outputsCollection.file_number = new string[](len);\\n        outputsCollection.title = new string[](len);\\n        outputsCollection.album = new string[](len);\\n        outputsCollection.website = new string[](len);\\n        outputsCollection.ipfs_hash = new string[](len);\\n        outputsCollection.comment = new string[](len);\\n        outputsCollection.copyright = new string[](len);\\n        outputsCollection.submission_date = new string[](len);\\n        outputsCollection.blockchain_date = new string[](len);\\t\\n\\t\\toutputsCollection.md_hash = new string[](len);\\t\\n\\n        for (uint256 index = 0; index < len; index++){\\n            uint256 id;\\n\\n            if(key == 1){\\n                id = filesByNumber[hash][index];\\n            } \\n\\n            if(key == 2){\\n                id = filesByIpfsHash[hash][index];\\n            } \\n\\n            if(key == 3){\\n                id = filesByMDHash[hash][index];\\n            } \\n\\n            (uint year, uint month, uint day) = timestampToDate(filesBlockchainDateIndex[id]);\\n\\n            outputsCollection.file_number[index] = filesNumberIndex[id];\\n            outputsCollection.title[index] = filesTitleIndex[id];\\n            outputsCollection.album[index] = filesAlbumSeriesIndex[id];\\n            outputsCollection.website[index] = filesWebsiteIndex[id];\\n            outputsCollection.ipfs_hash[index] = filesIpfsHashIndex[id];\\n            outputsCollection.comment[index] = filesCommentIndex[id];\\n            outputsCollection.copyright[index] = filesCopyrightIndex[id];\\n            outputsCollection.submission_date[index] = filesSubmissionDateIndex[id];\\n            outputsCollection.blockchain_date[index] =  concat( _convertVaalue(day),  \\\".\\\",  _convertVaalue(month), \\\".\\\", _convertVaalue(year) );\\n\\t\\t\\toutputsCollection.md_hash[index] = filesMDHashIndex[id];\\t\\n\\n        }\\n\\n        \\n\\t\\tFileOutput[] memory outputs = new FileOutput[](len);\\n\\t\\tfor (uint256 index = 0; index < len; index++) {\\n\\n            FileOutput memory output;\\n\\n            output = FileOutput(\\n                \\\"****\\\",\\n                concat(\\\"File Number: \\\", outputsCollection.file_number[index]),\\n                concat(\\\"Title: \\\", outputsCollection.title[index]),\\n                concat(\\\"Album: \\\", outputsCollection.album[index]),\\n                concat(\\\"Website: \\\", outputsCollection.website[index]),\\n                concat(\\\"IPFS URL: https://ipfs.io/ipfs/\\\", outputsCollection.ipfs_hash[index]),\\n                concat(\\\"Comment: \\\", outputsCollection.comment[index]),\\n                concat(\\\"Copyright: \\\", outputsCollection.copyright[index]),\\n                concat(\\\"Submission Date: \\\", outputsCollection.submission_date[index]),\\n                concat(\\\"Blockchain Write Date: \\\", outputsCollection.blockchain_date[index]),\\n                concat(\\\"MD5 Hash: \\\", outputsCollection.md_hash[index])\\n            );\\n\\n\\t\\t\\toutputs[index] = output;\\n\\t\\t}\\n\\t\\treturn outputs;\\n\\n\\t}\\n\\n\\tfunction concat(string memory a, string memory b) private pure returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(a, b));\\n\\t}\\n\\n    \\n\\tfunction timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / (24 * 60 * 60));\\n    }\\n\\n\\n    function _convertVaalue(uint _value) internal pure returns (string memory value) {\\n        if( _value <10) {\\n            value = concat(\\\"0\\\", StringsUpgradeable.toString(_value));\\n        } else {\\n            value = StringsUpgradeable.toString(_value);\\n        }\\n    }\\n\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + 2440588;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n        _year = _year % 100;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n\\tfunction concat(string memory a, string memory b, string memory c, string memory d, string memory e) private pure returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(a, b, c, d, e));\\n\\t}\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"IPFS_Hash\",\"type\":\"string\"}],\"name\":\"Find_Files_by_IPFS_Hash\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"separator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"file_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"album\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"copyright\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"submission_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"md_hash\",\"type\":\"string\"}],\"internalType\":\"struct Files.FileOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"MD5_Hash\",\"type\":\"string\"}],\"name\":\"Find_Files_by_MD5_Hash\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"separator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"file_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"album\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"copyright\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"submission_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"md_hash\",\"type\":\"string\"}],\"internalType\":\"struct Files.FileOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QI_Audio_Catalogue\",\"type\":\"uint256\"}],\"name\":\"Find_Files_by_QI_Audio_Catalogue_Number\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"separator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"file_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"album\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"copyright\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"submission_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"md_hash\",\"type\":\"string\"}],\"internalType\":\"struct Files.FileOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"metadata\",\"type\":\"string[]\"}],\"name\":\"addFile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Files","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}