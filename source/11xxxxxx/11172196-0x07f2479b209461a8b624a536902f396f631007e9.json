{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * NUTS Staking (v0.1 beta)\r\n * \r\n * For more info checkout: https://squirrel.finance\r\n * \r\n */\r\n\r\n\r\ncontract NutsStaking {\r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 nuts = ERC20(0x84294FC9710e1252d407d3D80A84bC39001bd4A8);\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => int256) payoutsTo;\r\n    \r\n    uint256 public totalDeposits;\r\n    uint256 profitPerShare;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    \r\n    function receiveApproval(address player, uint256 amount, address, bytes) external {\r\n        require(msg.sender == address(nuts));\r\n        nuts.transferFrom(player, this, amount);\r\n        totalDeposits += amount;\r\n        balances[player] += amount;\r\n        payoutsTo[player] += (int256) (profitPerShare * amount);\r\n    }\r\n    \r\n    function cashout(uint256 amount) external {\r\n        address recipient = msg.sender;\r\n        claimYield();\r\n        balances[recipient] = balances[recipient].sub(amount);\r\n        totalDeposits = totalDeposits.sub(amount);\r\n        payoutsTo[recipient] -= (int256) (profitPerShare * amount);\r\n        nuts.transfer(recipient, amount);\r\n    }\r\n    \r\n    function claimYield() public {\r\n        address recipient = msg.sender;\r\n        uint256 dividends = (uint256) ((int256)(profitPerShare * balances[recipient]) - payoutsTo[recipient]) / magnitude;\r\n        payoutsTo[recipient] += (int256) (dividends * magnitude);\r\n        bond.transfer(recipient, dividends);\r\n    }\r\n    \r\n    function shareYield(uint256 amount) external {\r\n        require(bond.transferFrom(msg.sender, this, amount));\r\n        profitPerShare += (amount * magnitude) / totalDeposits;\r\n    }\r\n    \r\n    function dividendsOf(address farmer) view public returns (uint256) {\r\n        return (uint256) ((int256)(profitPerShare * balances[farmer]) - payoutsTo[farmer]) / magnitude;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shareYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NutsStaking","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://151d350bc28d64a7f37a266f3b2fd01de3a4fc7f63648abf0efa396763d5b89c"}]}