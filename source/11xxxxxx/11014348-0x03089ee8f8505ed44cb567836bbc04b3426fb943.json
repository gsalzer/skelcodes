{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n\r\n\r\n        _paused = false;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/IERC20Extended.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IERC20Extended {\r\n    function decimals() external view returns (uint8);\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/IPriceEstimator.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IPriceEstimator {\r\n    function getEstimatedETHforERC20(\r\n        uint256 erc20Amount,\r\n        address token\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function getEstimatedERC20forETH(\r\n        uint256 etherAmountInWei,\r\n        address tokenAddress\r\n    ) external view returns (uint256[] memory);\r\n}\r\n\r\n// File: contracts/SmartSwap.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SmartSwap is Initializable, OwnableUpgradeSafe, PausableUpgradeSafe {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    enum Status {\r\n        OPEN,\r\n        CLOSED,\r\n        CANCELLED\r\n    }\r\n\r\n    enum SwapType {\r\n        ETH_TO_ERC20,\r\n        ERC20_TO_ETH,\r\n        ERC20_TO_ERC20\r\n    }\r\n\r\n    struct Swap {\r\n        uint256 openValue;\r\n        uint256 closeValue;\r\n        address payable openTrader;\r\n        address payable closeTrader;\r\n        address openContractAddress;\r\n        address closeContractAddress;\r\n        SwapType swapType;\r\n        Status status;\r\n    }\r\n\r\n    address constant private ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    uint256 constant private DEV_FEE_PERCENTAGE = 10;\r\n    uint256 constant private BURN_FEE_PERCENTAGE = 10;\r\n\r\n    //Global swap id. Also give total number of swaps made so far\r\n    uint256 private _swapId;\r\n\r\n    mapping (uint256 => Swap) private _swaps;\r\n\r\n    IERC20 private _swapToken;\r\n\r\n    //Wallet where fees will go\r\n    address payable private _feesWallet;\r\n\r\n    //Wallet where dev fund will go\r\n    address private _devWallet;\r\n\r\n    uint256 private _ethFeePercentage;\r\n    uint256 private _allowedFeeSlippagePercentage;\r\n    uint256 private _uniswapFeePercentage;\r\n\r\n    IPriceEstimator private _priceEstimator;\r\n\r\n    //list of free tokens\r\n    mapping(address => bool) private _listFreeTokens;\r\n\r\n    event Open(uint256 indexed id, address indexed openTrader, address indexed closeTrader);\r\n    event Cancel(uint256 indexed id);\r\n    event Close(uint256 indexed id);\r\n    event FeeWalletChanged(address indexed wallet);\r\n    event DevWalletChanged(address indexed wallet);\r\n    event SwapTokenUpdated(address indexed swapTokenAddress);\r\n\r\n    modifier onlyContract(address account)\r\n    {\r\n        require(account.isContract(), \"[Validation] The address does not contain a contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpenSwaps(uint256 id) {\r\n        Swap memory swap = _swaps[id];\r\n        require (swap.status == Status.OPEN);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev initialize\r\n    */\r\n    function initialize(\r\n        address swapTokenAddress,\r\n        address payable feesWallet,\r\n        address devWallet,\r\n        address priceEstimator\r\n    )\r\n    external\r\n    onlyContract(swapTokenAddress)\r\n    onlyContract(priceEstimator)\r\n    {\r\n        __SmartSwap_init(swapTokenAddress, feesWallet, devWallet, priceEstimator);\r\n    }\r\n\r\n    function __SmartSwap_init(\r\n        address swapTokenAddress,\r\n        address payable feesWallet,\r\n        address devWallet,\r\n        address priceEstimator\r\n    )\r\n    internal\r\n    initializer\r\n    {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __SmartSwap_init_unchained(swapTokenAddress, feesWallet, devWallet, priceEstimator);\r\n    }\r\n\r\n    function __SmartSwap_init_unchained(\r\n        address swapTokenAddress,\r\n        address payable feesWallet,\r\n        address devWallet,\r\n        address priceEstimator\r\n    )\r\n    internal\r\n    initializer\r\n    {\r\n        require(\r\n            swapTokenAddress != address(0),\r\n            \"[Validation] Invalid swap token address\"\r\n        );\r\n        require(feesWallet != address(0), \"[Validation] feesWallet is the zero address\");\r\n        require(devWallet != address(0), \"[Validation] devWallet is the zero address\");\r\n        require(\r\n            priceEstimator != address(0),\r\n            \"[Validation] Invalid price estimator address\"\r\n        );\r\n\r\n        _swapToken = IERC20(swapTokenAddress);\r\n        _feesWallet = feesWallet;\r\n        _devWallet = devWallet;\r\n        _priceEstimator = IPriceEstimator(priceEstimator);\r\n        _ethFeePercentage = 3;\r\n        _allowedFeeSlippagePercentage = 5;\r\n        _uniswapFeePercentage = 3;\r\n    }\r\n\r\n    /**\r\n    * @dev Called by an admin to pause, triggers stopped state.\r\n    */\r\n    function pause()\r\n    external\r\n    onlyOwner \r\n    {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n    * @dev Called by an admin to unpause, returns to normal state.\r\n    */\r\n    function unpause()\r\n    external\r\n    onlyOwner\r\n    {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @dev Update swap token address\r\n    * @param swapTokenAddress New swap token address\r\n    */\r\n    function setSwapToken(address swapTokenAddress)\r\n    external\r\n    onlyOwner\r\n    onlyContract(swapTokenAddress)\r\n    {\r\n        require(\r\n            swapTokenAddress != address(0),\r\n            \"[Validation]: Invalid swap token address\"\r\n        );\r\n        _swapToken = IERC20(swapTokenAddress);\r\n        emit SwapTokenUpdated(swapTokenAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to set fee receiver wallet\r\n    * @param wallet New wallet address\r\n    */\r\n    function setFeeWallet(address payable wallet)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            wallet != address(0),\r\n            \"[Validation] feesWallet is the zero address\"\r\n        );\r\n        _feesWallet = wallet;\r\n\r\n        emit FeeWalletChanged(wallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to set fee receiver wallet\r\n    * @param wallet New wallet address\r\n    */\r\n    function setDevWallet(address payable wallet)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            wallet != address(0),\r\n            \"[Validation] devWallet is the zero address\"\r\n        );\r\n        _devWallet = wallet;\r\n\r\n        emit DevWalletChanged(wallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Update price estimator address\r\n    * @param priceEstimator New price estimator address\r\n    */\r\n    function setPriceEstimator(address priceEstimator)\r\n    external\r\n    onlyOwner\r\n    onlyContract(priceEstimator)\r\n    {\r\n        require(\r\n            priceEstimator != address(0),\r\n            \"[Validation]: Invalid price estimator address\"\r\n        );\r\n        _priceEstimator = IPriceEstimator(priceEstimator);\r\n    }\r\n\r\n    /**\r\n    * @dev Update fees\r\n    * @param ethFeePercentage New percentage of fee in eth\r\n    */\r\n    function setEthFeePercentage(uint8 ethFeePercentage)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            ethFeePercentage >= 0 && ethFeePercentage <= 100,\r\n            \"[Validation]: ETH Fee percentage must be between 0 to 100\"\r\n        );\r\n        _ethFeePercentage = ethFeePercentage;\r\n    }\r\n\r\n    /**\r\n    * @dev Update fee slippage percentage allowance for erc20\r\n    * @param allowedFeeSlippagePercentage New allowed fee slippage percentage for fee in erc20\r\n    */\r\n    function setAllowedFeeSlippagePercentage(uint8 allowedFeeSlippagePercentage)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            allowedFeeSlippagePercentage >= 0 && allowedFeeSlippagePercentage <= 100,\r\n            \"[Validation]: Allowed Fee Slippage percentage must be between 0 to 100\"\r\n        );\r\n        _allowedFeeSlippagePercentage = allowedFeeSlippagePercentage;\r\n    }\r\n\r\n    /**\r\n    * @dev Update Uniswap fees\r\n    * @param uniswapFeePercentage New percentage of uniswap fee\r\n    */\r\n    function setUniswapFeePercentage(uint8 uniswapFeePercentage)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            uniswapFeePercentage >= 0 && uniswapFeePercentage <= 100,\r\n            \"[Validation]: Uniswap Fee percentage must be between 0 to 100\"\r\n        );\r\n        _uniswapFeePercentage = uniswapFeePercentage;\r\n    }\r\n\r\n    function getFeeInEthForEth(uint256 amount)\r\n    public\r\n    view\r\n    returns (uint256) \r\n    {\r\n        //_ethFeePercentage is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\r\n        return amount.mul(_ethFeePercentage).div(1000); //0.3% of ETH amount\r\n    }\r\n\r\n    function getFeeInEthForERC20(uint256 amount, address token)\r\n    public \r\n    view\r\n    returns (uint256)\r\n    {\r\n        if(isFreeToken(token)) {\r\n            return 0;\r\n        } else {\r\n            //price should be estimated by 1 token because Uniswap algo changes price based on large amount\r\n            uint256 tokenBits = 10 ** uint256(IERC20Extended(token).decimals());\r\n            uint256 estFeesInEthPerUnit = _priceEstimator.getEstimatedETHforERC20(tokenBits, token)[0];\r\n            //subtract uniswap 0.30% fees\r\n            //_uniswapFeePercentage is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\r\n            estFeesInEthPerUnit = estFeesInEthPerUnit.sub(estFeesInEthPerUnit.mul(_uniswapFeePercentage).div(1000));\r\n            uint256 equivEth = amount.mul(estFeesInEthPerUnit).div(tokenBits); //multiply by amount to be scheduled amount\r\n            return getFeeInEthForEth(equivEth);\r\n        }\r\n    }\r\n\r\n    function getFeeInEthForERC20UsingTotalSupply(uint256 amount, address token)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if(isFreeToken(token)) {\r\n            return 0;\r\n        } else {\r\n            //per 1% supply , 0.1 ETH is the fee\r\n            uint256 tokenTotalSupply = IERC20(token).totalSupply();\r\n            uint256 percentage = amount.mul(tokenTotalSupply).mul(100).div(tokenTotalSupply);\r\n            uint256 ethFeeInWei = 100000000000000000; //0.1 ETH\r\n            return percentage.mul(ethFeeInWei).div(tokenTotalSupply);\r\n        }\r\n    }\r\n\r\n    function getFeeInSwapForETH(uint256 amount)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 feesInEth = getFeeInEthForEth(amount);\r\n        return _getEquivSwapFee(feesInEth);\r\n    }\r\n\r\n    function getFeeInSwapForERC20(uint256 amount, address token, bool calcFeeUsingTotalSupply)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 feesInEth = calcFeeUsingTotalSupply ? \r\n            getFeeInEthForERC20UsingTotalSupply(amount, token) : \r\n            getFeeInEthForERC20(amount, token);\r\n        return _getEquivSwapFee(feesInEth);\r\n    }\r\n\r\n    function _getEquivSwapFee(uint256 feesInEth)\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 feesInEthIfPaidViaSwap = feesInEth.div(2);\r\n        uint256 swapPerEth = _priceEstimator.getEstimatedERC20forETH(1, address(_swapToken))[0];\r\n        //subtract uniswap 0.30% fees\r\n        //_uniswapFeePercentage is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\r\n        uint256 estSwapPerEth = swapPerEth.sub(swapPerEth.mul(_uniswapFeePercentage).div(1000));\r\n        return feesInEthIfPaidViaSwap.mul(estSwapPerEth);\r\n    }\r\n\r\n    function _distributeFees(uint256 fee)\r\n    private\r\n    {\r\n        uint256 devAmount = fee.mul(DEV_FEE_PERCENTAGE).div(100); //10%\r\n        uint256 burnAmount = fee.mul(BURN_FEE_PERCENTAGE).div(100); //10%\r\n        uint256 remAmount = fee.sub(devAmount).sub(burnAmount); //80%\r\n\r\n        _swapToken.safeTransferFrom(msg.sender, _feesWallet, remAmount);\r\n        _swapToken.safeTransferFrom(msg.sender, _devWallet, devAmount);\r\n        IERC20Extended(address(_swapToken)).burnFrom(msg.sender, burnAmount);\r\n    }\r\n\r\n    function open(\r\n        uint256 openValue,\r\n        address openContractAddress,\r\n        uint256 closeValue,\r\n        address payable closeTrader,\r\n        address closeContractAddress,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        require(openValue > 0, \"[Validation] The open value has to be larger than 0\");\r\n        require(closeValue > 0, \"[Validation] The close value has to be larger than 0\");\r\n        if(!isFreeToken(openContractAddress)) {\r\n        require(fee > 0, \"[Validation] The fee has to be larger than 0\");\r\n        }\r\n        require(closeTrader != address(0), \"[Validation] Invalid close trader address\");\r\n\r\n        if(ETH_ADDRESS == openContractAddress)\r\n        {\r\n            _openEtherToERC20(\r\n                openValue,\r\n                closeValue,\r\n                closeTrader,\r\n                closeContractAddress,\r\n                fee,\r\n                isFeeInSwap\r\n            );\r\n        } \r\n        else if(ETH_ADDRESS == closeContractAddress)\r\n        {\r\n            _openERC20ToEther(\r\n                openValue,\r\n                openContractAddress,\r\n                closeTrader,\r\n                closeValue,\r\n                fee,\r\n                isFeeInSwap,\r\n                calcFeeUsingTotalSupply\r\n            );\r\n        }\r\n        else\r\n        {\r\n            _openERC20ToERC20(\r\n                openValue,\r\n                openContractAddress,\r\n                closeValue,\r\n                closeTrader,\r\n                closeContractAddress,\r\n                fee,\r\n                isFeeInSwap,\r\n                calcFeeUsingTotalSupply\r\n            );\r\n        }\r\n    }\r\n\r\n    function _openEtherToERC20(\r\n        uint256 ethValue,\r\n        uint256 erc20Value,\r\n        address payable erc20Trader,\r\n        address erc20ContractAddress,\r\n        uint256 fee,\r\n        bool isFeeInSwap\r\n    )\r\n    private\r\n    whenNotPaused\r\n    onlyContract(erc20ContractAddress)\r\n    {\r\n        require(ethValue > 0, \"[Validation] The ETH amount has to be larger than 0\");\r\n        require(erc20Value > 0, \"[Validation] The ERC-20 amount has to be larger than 0\");\r\n        require(fee > 0, \"[Validation] The fee has to be larger than 0\");\r\n\r\n        //Transferring fee to the wallet\r\n        if(isFeeInSwap){\r\n            require(msg.value >= ethValue, \"[Validation] Enough ETH not sent\");\r\n            uint256 minRequiredFeeInSwap = getFeeInSwapForETH(ethValue);\r\n            uint256 feeDiff = 0;\r\n            if( fee < minRequiredFeeInSwap ) {\r\n                feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                //will allow if diff is less than 5%\r\n                require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n            }\r\n            _distributeFees(minRequiredFeeInSwap);\r\n        }\r\n        else {\r\n            uint256 minRequiredFeeInEth = getFeeInEthForEth(ethValue);\r\n            require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n            require(msg.value >= ethValue.add(minRequiredFeeInEth), \"[Validation] Enough ETH not sent\");\r\n            (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n            require(success, \"[Validation] Transfer of fee failed\");\r\n        }\r\n\r\n        _swapId = _swapId.add(1);\r\n\r\n        // Store the details of the swap.\r\n        _swaps[_swapId] = Swap({\r\n            openValue: ethValue,\r\n            openTrader: msg.sender,\r\n            openContractAddress: ETH_ADDRESS,\r\n            closeValue: erc20Value,\r\n            closeTrader: erc20Trader,\r\n            closeContractAddress: erc20ContractAddress,\r\n            swapType: SwapType.ETH_TO_ERC20,\r\n            status: Status.OPEN\r\n        });\r\n\r\n        emit Open(_swapId, msg.sender, erc20Trader);\r\n    }\r\n\r\n    function _openERC20ToEther(\r\n        uint256 erc20Value,\r\n        address erc20ContractAddress,\r\n        address payable ethTrader,\r\n        uint256 ethValue,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    private\r\n    whenNotPaused\r\n    onlyContract(erc20ContractAddress)\r\n    {\r\n        require(ethValue > 0, \"[Validation] The ETH amount has to be larger than 0\");\r\n        require(erc20Value > 0, \"[Validation] The ERC-20 amount has to be larger than 0\");\r\n        \r\n        if(!isFreeToken(erc20ContractAddress)) {\r\n            //Transfer fee to the wallet\r\n            if(isFeeInSwap){\r\n                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(erc20Value, erc20ContractAddress, calcFeeUsingTotalSupply);\r\n                uint256 feeDiff = 0;\r\n                if( fee < minRequiredFeeInSwap ) {\r\n                    feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                    //will allow if diff is less than 5%\r\n                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n                }\r\n                _distributeFees(minRequiredFeeInSwap);\r\n            }\r\n            else {\r\n                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? \r\n                    getFeeInEthForERC20UsingTotalSupply(erc20Value, erc20ContractAddress) : \r\n                    getFeeInEthForERC20(erc20Value, erc20ContractAddress);\r\n                require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n                require(msg.value >= minRequiredFeeInEth, \"[Validation] msg.value doesn't contain enough ETH for fee\");\r\n                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n                require(success, \"[Validation] Transfer of fee failed\");\r\n            }\r\n        }\r\n        // Transfer value from the opening trader to this contract.\r\n        IERC20 openERC20Contract = IERC20(erc20ContractAddress);\r\n        require(erc20Value <= openERC20Contract.allowance(msg.sender, address(this)));\r\n        require(openERC20Contract.transferFrom(msg.sender, address(this), erc20Value));\r\n\r\n        _swapId = _swapId.add(1);\r\n\r\n        // Store the details of the swap.\r\n        _swaps[_swapId] = Swap({\r\n            openValue: erc20Value,\r\n            openTrader: msg.sender,\r\n            openContractAddress: erc20ContractAddress,\r\n            closeValue: ethValue,\r\n            closeTrader: ethTrader,\r\n            closeContractAddress: ETH_ADDRESS,\r\n            swapType: SwapType.ERC20_TO_ETH,\r\n            status: Status.OPEN\r\n        });\r\n\r\n        emit Open(_swapId, msg.sender, ethTrader);\r\n    }\r\n\r\n    function _openERC20ToERC20(\r\n        uint256 openValue,\r\n        address openContractAddress,\r\n        uint256 closeValue,\r\n        address payable closeTrader,\r\n        address closeContractAddress,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    private\r\n    whenNotPaused\r\n    {\r\n        require(openValue > 0, \"[Validation] The open ERC-20 amount has to be larger than 0\");\r\n        require(closeValue > 0, \"[Validation] The close ERC-20 amount has to be larger than 0\");\r\n        \r\n        if(!isFreeToken(openContractAddress)) {\r\n            //Transfer fee to the wallet\r\n            if(isFeeInSwap){\r\n                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(openValue, openContractAddress, calcFeeUsingTotalSupply);\r\n                uint256 feeDiff = 0;\r\n                if( fee < minRequiredFeeInSwap ) {\r\n                    feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                    //will allow if diff is less than 5%\r\n                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n                }\r\n                _distributeFees(minRequiredFeeInSwap);\r\n            }\r\n            else {\r\n                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? \r\n                    getFeeInEthForERC20UsingTotalSupply(openValue, openContractAddress) : \r\n                    getFeeInEthForERC20(openValue, openContractAddress);\r\n                require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n                require(msg.value >= minRequiredFeeInEth, \"[Validation] msg.value doesn't contain enough ETH for fee\");\r\n                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n                require(success, \"[Validation] Transfer of fee failed\");\r\n            }\r\n        }\r\n\r\n        // Transfer value from the opening trader to this contract.\r\n        IERC20 openERC20Contract = IERC20(openContractAddress);\r\n        require(openValue <= openERC20Contract.allowance(msg.sender, address(this)));\r\n        require(openERC20Contract.transferFrom(msg.sender, address(this), openValue));\r\n\r\n        _swapId = _swapId.add(1);\r\n\r\n        // Store the details of the swap.\r\n        _swaps[_swapId] = Swap({\r\n            openValue: openValue,\r\n            openTrader: msg.sender,\r\n            openContractAddress: openContractAddress,\r\n            closeValue: closeValue,\r\n            closeTrader: closeTrader,\r\n            closeContractAddress: closeContractAddress,\r\n            swapType: SwapType.ERC20_TO_ERC20,\r\n            status: Status.OPEN\r\n        });\r\n\r\n        emit Open(_swapId, msg.sender, closeTrader);\r\n    }\r\n\r\n    function close(\r\n        uint256 id,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    external\r\n    payable\r\n    onlyOpenSwaps(id)\r\n    {\r\n        Swap memory swap = _swaps[id];\r\n        require(swap.closeTrader == _msgSender(), \"[Validation]: The caller is not authorized to close the trade\");\r\n        if(SwapType.ETH_TO_ERC20 == swap.swapType)\r\n        {\r\n            _closeEtherToERC20(\r\n                id,\r\n                fee,\r\n                isFeeInSwap,\r\n                calcFeeUsingTotalSupply\r\n            );\r\n        } \r\n        else if(SwapType.ERC20_TO_ETH == swap.swapType)\r\n        {\r\n            _closeERC20ToEther(\r\n                id,\r\n                fee,\r\n                isFeeInSwap\r\n            );\r\n        }\r\n        else\r\n        {\r\n            _closeERC20ToERC20(\r\n                id,\r\n                fee,\r\n                isFeeInSwap,\r\n                calcFeeUsingTotalSupply\r\n            );\r\n        }\r\n    }\r\n\r\n    function _closeEtherToERC20(\r\n        uint256 id,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    private\r\n    onlyOpenSwaps(id)\r\n    {\r\n        Swap storage swap = _swaps[id];\r\n\r\n        if(!isFreeToken(swap.closeContractAddress)) {\r\n            //Transfer fee to the wallet\r\n            if(isFeeInSwap){\r\n                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(swap.closeValue, swap.closeContractAddress, calcFeeUsingTotalSupply);\r\n                uint256 feeDiff = 0;\r\n                if( fee < minRequiredFeeInSwap ) {\r\n                    feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                    //will allow if diff is less than 5%\r\n                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n                }\r\n                _distributeFees(minRequiredFeeInSwap);\r\n            }\r\n            else {\r\n                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? \r\n                    getFeeInEthForERC20UsingTotalSupply(swap.closeValue, swap.closeContractAddress) : \r\n                    getFeeInEthForERC20(swap.closeValue, swap.closeContractAddress);\r\n                require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n                require(msg.value >= minRequiredFeeInEth, \"[Validation] msg.value doesn't contain enough ETH for fee\");\r\n                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n                require(success, \"[Validation] Transfer of fee failed\");\r\n            }\r\n        }\r\n        // Close the swap.\r\n        swap.status = Status.CLOSED;\r\n\r\n        // Transfer the ERC20 funds from the ERC20 trader to the ETH trader.\r\n        IERC20 erc20Contract = IERC20(swap.closeContractAddress);\r\n        require(swap.closeValue <= erc20Contract.allowance(swap.closeTrader, address(this)));\r\n        require(erc20Contract.transferFrom(swap.closeTrader, swap.openTrader, swap.closeValue));\r\n\r\n        // Transfer the ETH funds from this contract to the ERC20 trader.\r\n        swap.closeTrader.transfer(swap.openValue);\r\n        \r\n        emit Close(id);\r\n    }\r\n\r\n    function _closeERC20ToEther(\r\n        uint256 id,\r\n        uint256 fee,\r\n        bool isFeeInSwap\r\n    )\r\n    private\r\n    onlyOpenSwaps(id)\r\n    {\r\n        Swap storage swap = _swaps[id];\r\n\r\n        //Transferring fee to the wallet\r\n        if(isFeeInSwap){\r\n            require(msg.value >= swap.closeValue, \"[Validation] Enough ETH not sent\");\r\n            uint256 minRequiredFeeInSwap = getFeeInSwapForETH(swap.closeValue);\r\n            uint256 feeDiff = 0;\r\n            if( fee < minRequiredFeeInSwap ) {\r\n                feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                //will allow if diff is less than 5%\r\n                require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n            }\r\n            _distributeFees(minRequiredFeeInSwap);\r\n        }\r\n        else {\r\n            uint256 minRequiredFeeInEth = getFeeInEthForEth(swap.closeValue);\r\n            require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n            require(msg.value >= swap.closeValue.add(minRequiredFeeInEth), \"[Validation] Enough ETH not sent\");\r\n            (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n            require(success, \"[Validation] Transfer of fee failed\");\r\n        }\r\n\r\n        // Close the swap.\r\n        swap.status = Status.CLOSED;\r\n\r\n        // Transfer the opening funds from this contract to the eth trader.\r\n        IERC20 openERC20Contract = IERC20(swap.openContractAddress);\r\n        require(openERC20Contract.transfer(swap.closeTrader, swap.openValue));\r\n\r\n        (bool success,) = swap.openTrader.call.value(swap.closeValue)(\"\");\r\n        require(success, \"[Validation] Transfer of eth failed\");\r\n        \r\n        emit Close(id);\r\n    }\r\n\r\n    function _closeERC20ToERC20(\r\n        uint256 id,\r\n        uint256 fee,\r\n        bool isFeeInSwap,\r\n        bool calcFeeUsingTotalSupply\r\n    )\r\n    private\r\n    onlyOpenSwaps(id)\r\n    {\r\n        Swap storage swap = _swaps[id];\r\n\r\n        if(!isFreeToken(swap.closeContractAddress)) {\r\n            //Transfer fee to the wallet\r\n            if(isFeeInSwap){\r\n                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(swap.closeValue, swap.closeContractAddress, calcFeeUsingTotalSupply);\r\n                uint256 feeDiff = 0;\r\n                if( fee < minRequiredFeeInSwap ) {\r\n                    feeDiff = minRequiredFeeInSwap.sub(fee);\r\n                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);\r\n                    //will allow if diff is less than 5%\r\n                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, \"[Validation] Fee (SWAP) is below minimum required fee\");\r\n                }\r\n                _distributeFees(minRequiredFeeInSwap);\r\n            }\r\n            else {\r\n                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? \r\n                    getFeeInEthForERC20UsingTotalSupply(swap.closeValue, swap.closeContractAddress) : \r\n                    getFeeInEthForERC20(swap.closeValue, swap.closeContractAddress);\r\n                require(fee >= minRequiredFeeInEth, \"[Validation] Fee (ETH) is below minimum required fee\");\r\n                require(msg.value >= minRequiredFeeInEth, \"[Validation] msg.value doesn't contain enough ETH for fee\");\r\n                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)(\"\");\r\n                require(success, \"[Validation] Transfer of fee failed\");\r\n            }\r\n        }\r\n\r\n        // Close the swap.\r\n        swap.status = Status.CLOSED;\r\n\r\n        // Transfer the closing funds from the closing trader to the opening trader.\r\n        IERC20 closeERC20Contract = IERC20(swap.closeContractAddress);\r\n        require(swap.closeValue <= closeERC20Contract.allowance(swap.closeTrader, address(this)));\r\n        require(closeERC20Contract.transferFrom(swap.closeTrader, swap.openTrader, swap.closeValue));\r\n\r\n        // Transfer the opening funds from this contract to the closing trader.\r\n        IERC20 openERC20Contract = IERC20(swap.openContractAddress);\r\n        require(openERC20Contract.transfer(swap.closeTrader, swap.openValue));\r\n\r\n        emit Close(id);\r\n    }\r\n\r\n    function cancel(uint256 id)\r\n    external\r\n    onlyOpenSwaps(id)\r\n    {\r\n        Swap memory swap = _swaps[id];\r\n        require(swap.openTrader == _msgSender(), \"[Validation]: The caller is not authorized to cancel the trade\");\r\n        if(SwapType.ETH_TO_ERC20 == swap.swapType) {\r\n            _cancelEtherToERC20(id);\r\n        }\r\n        else {\r\n            _cancelERC20(id);\r\n        }\r\n    }\r\n\r\n    function _cancelEtherToERC20(uint256 id)\r\n    private\r\n    onlyOpenSwaps(id)\r\n    {\r\n        // Cancel the swap.\r\n        Swap storage swap = _swaps[id];\r\n        swap.status = Status.CANCELLED;\r\n\r\n        // Transfer the ETH value from this contract back to the ETH trader.\r\n        swap.openTrader.transfer(swap.openValue);\r\n        emit Cancel(id);\r\n    }\r\n\r\n    function _cancelERC20(uint256 id)\r\n    private\r\n    onlyOpenSwaps(id)\r\n    {\r\n        // Cancel the swap.\r\n        Swap storage swap = _swaps[id];\r\n        swap.status = Status.CANCELLED;\r\n\r\n        // Transfer opening value from this contract back to the opening trader.\r\n        IERC20 openERC20Contract = IERC20(swap.openContractAddress);\r\n        require(openERC20Contract.transfer(swap.openTrader, swap.openValue));\r\n\r\n        emit Cancel(id);\r\n    }\r\n\r\n    function check(uint256 id)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 openValue,\r\n        address openTrader,\r\n        address openContractAddress,\r\n        uint256 closeValue,\r\n        address closeTrader,\r\n        address closeContractAddress,\r\n        SwapType swapType,\r\n        Status status\r\n    )\r\n    {\r\n        Swap memory swap = _swaps[id];\r\n        return (\r\n            swap.openValue, \r\n            swap.openTrader, \r\n            swap.openContractAddress, \r\n            swap.closeValue, \r\n            swap.closeTrader, \r\n            swap.closeContractAddress,\r\n            swap.swapType,\r\n            swap.status\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev called by admin to add given token to free tokens list\r\n    */\r\n    function addTokenToFreeList(address token)\r\n    external\r\n    onlyOwner\r\n    onlyContract(token)\r\n    {\r\n        _listFreeTokens[token] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev called by admin to remove given token from free tokens list\r\n    */\r\n    function removeTokenFromFreeList(address token)\r\n    external\r\n    onlyOwner\r\n    onlyContract(token)\r\n    {\r\n        _listFreeTokens[token] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if token is in free list\r\n    * @param token The address to check\r\n    */\r\n    function isFreeToken(address token)\r\n    public\r\n    view\r\n    returns(bool)\r\n    {\r\n        return _listFreeTokens[token];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"DevWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"openTrader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closeTrader\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTokenAddress\",\"type\":\"address\"}],\"name\":\"SwapTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addTokenToFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"openTrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"closeTrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"closeContractAddress\",\"type\":\"address\"},{\"internalType\":\"enum SmartSwap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"enum SmartSwap.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeInSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"calcFeeUsingTotalSupply\",\"type\":\"bool\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFeeInEthForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFeeInEthForERC20UsingTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeInEthForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"calcFeeUsingTotalSupply\",\"type\":\"bool\"}],\"name\":\"getFeeInSwapForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeInSwapForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feesWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceEstimator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isFreeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"openContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeValue\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"closeTrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"closeContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeInSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"calcFeeUsingTotalSupply\",\"type\":\"bool\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenFromFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"allowedFeeSlippagePercentage\",\"type\":\"uint8\"}],\"name\":\"setAllowedFeeSlippagePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ethFeePercentage\",\"type\":\"uint8\"}],\"name\":\"setEthFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceEstimator\",\"type\":\"address\"}],\"name\":\"setPriceEstimator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTokenAddress\",\"type\":\"address\"}],\"name\":\"setSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"uniswapFeePercentage\",\"type\":\"uint8\"}],\"name\":\"setUniswapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartSwap","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee00f2242ec8196a71f1cbc13447e9f4cb1264aeb2eac01380fe91075aca8e9c"}]}