{"status":"1","message":"OK","result":[{"SourceCode":"# Copyright (C) 2021 VolumeFi Software, Inc.\r\n\r\n#  This program is free software: you can redistribute it and/or modify\r\n#  it under the terms of the Apache 2.0 License. \r\n#  This program is distributed WITHOUT ANY WARRANTY without even the implied warranty of\r\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n#  @author VolumeFi, Software inc.\r\n#  @notice This Vyper contract adds liquidity to any Uniswap V2 pool using ETH or any ERC20 Token.\r\n#  SPDX-License-Identifier: Apache-2.0\r\n\r\n# @version ^0.2.0\r\n\r\ninterface ERC20:\r\n    def approve(spender: address, amount: uint256): nonpayable\r\n    def transfer(recipient: address, amount: uint256): nonpayable\r\n    def transferFrom(sender: address, recipient: address, amount: uint256): nonpayable\r\n\r\ninterface UniswapV2Pair:\r\n    def token0() -> address: view\r\n    def token1() -> address: view\r\n\r\ninterface UniswapV2Router02:\r\n    def removeLiquidity(tokenA: address, tokenB: address, liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to: address, deadline: uint256) -> (uint256, uint256): nonpayable\r\n\r\ninterface WrappedEth:\r\n    def withdraw(wad: uint256): nonpayable\r\n\r\nUNISWAPV2ROUTER02: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\nDEADLINE: constant(uint256) = MAX_UINT256 # change\r\n\r\npaused: public(bool)\r\nadmin: public(address)\r\nfeeAmount: public(uint256)\r\nfeeAddress: public(address)\r\n\r\n@external\r\ndef __init__():\r\n    self.paused = False\r\n    self.admin = msg.sender\r\n    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\r\n    self.feeAmount = 1 * 10 ** 16\r\n\r\n@internal\r\ndef _token2Token(fromToken: address, toToken: address, tokens2Trade: uint256, to: address, deadline: uint256) -> uint256:\r\n    if fromToken == toToken:\r\n        return tokens2Trade\r\n    ERC20(fromToken).approve(UNISWAPV2ROUTER02, 0)\r\n    ERC20(fromToken).approve(UNISWAPV2ROUTER02, tokens2Trade)\r\n    \r\n    addrBytes: Bytes[288] = concat(convert(tokens2Trade, bytes32), convert(0, bytes32), convert(160, bytes32), convert(to, bytes32), convert(deadline, bytes32), convert(2, bytes32), convert(fromToken, bytes32), convert(toToken, bytes32))\r\n    funcsig: Bytes[4] = method_id(\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\")\r\n    full_data: Bytes[292] = concat(funcsig, addrBytes)\r\n    \r\n    _response: Bytes[128] = raw_call(\r\n        UNISWAPV2ROUTER02,\r\n        full_data,\r\n        max_outsize=128\r\n    )\r\n    tokenBought: uint256 = convert(slice(_response, 96, 32), uint256)\r\n    assert tokenBought > 0, \"Error Swapping Token 2\"\r\n    return tokenBought\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef divestEthPairToToken(pair: address, token: address, amount: uint256, deadline: uint256=MAX_UINT256) -> uint256:\r\n    assert not self.paused, \"Paused\"\r\n    fee: uint256 = self.feeAmount\r\n    msg_value: uint256 = msg.value\r\n\r\n    assert msg.value >= fee, \"Insufficient fee\"\r\n    if msg.value > fee:\r\n        send(msg.sender, msg.value - fee)\r\n    send(self.feeAddress, fee)\r\n\r\n    assert pair != ZERO_ADDRESS, \"Invalid Unipool Address\"\r\n\r\n    token0: address = UniswapV2Pair(pair).token0()\r\n    token1: address = UniswapV2Pair(pair).token1()\r\n\r\n    assert token0 == WETH or token1 == WETH, \"Not ETH Pair\"\r\n\r\n    ERC20(pair).transferFrom(msg.sender, self, amount)\r\n    ERC20(pair).approve(UNISWAPV2ROUTER02, amount)\r\n\r\n    token0Amount: uint256 = 0\r\n    token1Amount: uint256 = 0\r\n    (token0Amount, token1Amount) = UniswapV2Router02(UNISWAPV2ROUTER02).removeLiquidity(token0, token1, amount, 1, 1, self, deadline)\r\n    tokenAmount: uint256 = 0\r\n    if token == token0:\r\n        tokenAmount = token0Amount + self._token2Token(token1, token0, token1Amount, self, deadline)\r\n        ERC20(token).transfer(msg.sender, tokenAmount)\r\n    elif token == token1:\r\n        tokenAmount = token1Amount + self._token2Token(token0, token1, token0Amount, self, deadline)\r\n        ERC20(token).transfer(msg.sender, tokenAmount)\r\n    elif token == VETH or token == ZERO_ADDRESS:\r\n        if token0 == WETH:\r\n            tokenAmount = token0Amount + self._token2Token(token1, token0, token1Amount, self, deadline)\r\n        else:\r\n            tokenAmount = token1Amount + self._token2Token(token0, token1, token0Amount, self, deadline)\r\n        WrappedEth(WETH).withdraw(tokenAmount)\r\n        send(msg.sender, tokenAmount)\r\n    elif token0 == WETH:\r\n        tokenAmount = token0Amount + self._token2Token(token1, token0, token1Amount, self, deadline)\r\n        tokenAmount = self._token2Token(WETH, token, tokenAmount, msg.sender, deadline)\r\n    elif token1 == WETH:\r\n        tokenAmount = token1Amount + self._token2Token(token0, token1, token0Amount, self, deadline)\r\n        tokenAmount = self._token2Token(WETH, token, tokenAmount, msg.sender, deadline)\r\n    else:\r\n        raise \"Token ERROR\"\r\n    return tokenAmount\r\n\r\n# Admin functions\r\n@external\r\ndef pause(_paused: bool):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.paused = _paused\r\n\r\n@external\r\ndef newAdmin(_admin: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.admin = _admin\r\n\r\n@external\r\ndef newFeeAmount(_feeAmount: uint256):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAmount = _feeAmount\r\n\r\n@external\r\ndef newFeeAddress(_feeAddress: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAddress = _feeAddress\r\n\r\n@external\r\n@payable\r\ndef __default__(): pass","ABI":"[{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"divestEthPairToToken\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"pair\"},{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"name\":\"divestEthPairToToken\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"pair\"},{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"deadline\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"name\":\"pause\",\"outputs\":[],\"inputs\":[{\"type\":\"bool\",\"name\":\"_paused\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36397},{\"name\":\"newAdmin\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36427},{\"name\":\"newFeeAmount\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_feeAmount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36357},{\"name\":\"newFeeAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_feeAddress\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36487},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"paused\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"feeAmount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"feeAddress\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}