{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface AaveInterface {\r\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\r\n    function withdraw(address _asset, uint256 _amount, address _to) external;\r\n    function borrow(\r\n        address _asset,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode,\r\n        address _onBehalfOf\r\n    ) external;\r\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\r\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\r\n    function getUserAccountData(address user) external view returns (\r\n        uint256 totalCollateralETH,\r\n        uint256 totalDebtETH,\r\n        uint256 availableBorrowsETH,\r\n        uint256 currentLiquidationThreshold,\r\n        uint256 ltv,\r\n        uint256 healthFactor\r\n    );\r\n}\r\n\r\ninterface AaveLendingPoolProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n// Aave Protocol Data Provider\r\ninterface AaveDataProviderInterface {\r\n    function getReserveTokensAddresses(address _asset) external view returns (\r\n        address aTokenAddress,\r\n        address stableDebtTokenAddress,\r\n        address variableDebtTokenAddress\r\n    );\r\n    function getUserReserveData(address _asset, address _user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentStableDebt,\r\n        uint256 currentVariableDebt,\r\n        uint256 principalStableDebt,\r\n        uint256 scaledVariableDebt,\r\n        uint256 stableBorrowRate,\r\n        uint256 liquidityRate,\r\n        uint40 stableRateLastUpdated,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n    function getReserveConfigurationData(address asset) external view returns (\r\n        uint256 decimals,\r\n        uint256 ltv,\r\n        uint256 liquidationThreshold,\r\n        uint256 liquidationBonus,\r\n        uint256 reserveFactor,\r\n        bool usageAsCollateralEnabled,\r\n        bool borrowingEnabled,\r\n        bool stableBorrowRateEnabled,\r\n        bool isActive,\r\n        bool isFrozen\r\n    );\r\n}\r\n\r\ninterface AaveAddressProviderRegistryInterface {\r\n    function getAddressesProvidersList() external view returns (address[] memory);\r\n}\r\n\r\ninterface ATokenInterface {\r\n    function scaledBalanceOf(address _user) external view returns (uint256);\r\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface DSAInterface {\r\n    function isAuth(address) external view returns(bool);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Weth address\r\n    */\r\n    function getWethAddr() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n     /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 75);\r\n    }\r\n}\r\n\r\ncontract AaveImportHelpers is Helpers {\r\n\r\n    /**\r\n     * @dev get Aave Lending Pool Provider\r\n    */\r\n    function getAaveProvider() internal pure returns (AaveLendingPoolProviderInterface) {\r\n        return AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); //mainnet\r\n        // return AaveLendingPoolProviderInterface(0x652B2937Efd0B5beA1c8d54293FC1289672AFC6b); //kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Aave Protocol Data Provider\r\n    */\r\n    function getAaveDataProvider() internal pure returns (AaveDataProviderInterface) {\r\n        return AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d); //mainnet\r\n        // return AaveDataProviderInterface(0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79); //kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Referral Code V2\r\n    */\r\n    function getReferralCode() internal pure returns (uint16) {\r\n        return 3228;\r\n        // return 0;\r\n    }\r\n\r\n    function getIsColl(AaveDataProviderInterface aaveData, address token, address user) internal view returns (bool isCol) {\r\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, user);\r\n    }\r\n\r\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\r\n        if(isEth) token.deposit.value(amount)();\r\n    }\r\n\r\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\r\n       if(isEth) {\r\n            token.approve(address(token), amount);\r\n            token.withdraw(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveResolver is AaveImportHelpers {\r\n    function _TransferAtokens(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        AaveDataProviderInterface aaveData,\r\n        ATokenInterface[] memory atokenContracts,\r\n        uint[] memory amts,\r\n        address[] memory tokens,\r\n        address userAccount\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                require(atokenContracts[i].transferFrom(userAccount, address(this), amts[i]), \"allowance?\");\r\n                \r\n                if (!getIsColl(aaveData, tokens[i], address(this))) {\r\n                    aave.setUserUseReserveAsCollateral(tokens[i], true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _borrowOne(AaveInterface aave, address token, uint amt, uint rateMode) private {\r\n        bool isEth = token == getEthAddr();\r\n        address _token = isEth ? getWethAddr() : token;\r\n\r\n        aave.borrow(_token, amt, rateMode, getReferralCode(), address(this));\r\n    }\r\n\r\n    function _paybackBehalfOne(AaveInterface aave, address token, uint amt, uint rateMode, address user) private {\r\n        bool isEth = token == getEthAddr();\r\n        address _token = isEth ? getWethAddr() : token;\r\n\r\n        aave.repay(_token, amt, rateMode, user);\r\n    }\r\n\r\n    function _BorrowStable(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint256[] memory amts\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                _borrowOne(aave, tokens[i], amts[i], 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _BorrowVariable(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint256[] memory amts\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                _borrowOne(aave, tokens[i], amts[i], 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _PaybackStable(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint256[] memory amts,\r\n        address user\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                _paybackBehalfOne(aave, tokens[i], amts[i], 1, user);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _PaybackVariable(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint256[] memory amts,\r\n        address user\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                _paybackBehalfOne(aave, tokens[i], amts[i], 2, user);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveImportResolver is AaveResolver {\r\n\r\n    struct AaveData {\r\n        address[] tokens;\r\n        address[] atokens;\r\n        uint[] stableBorrowAmts;\r\n        uint[] variableBorrowAmts;\r\n        uint[] totalBorrowAmts;\r\n        uint[] atokensBal;\r\n        ATokenInterface[] atokenContracts;\r\n    }\r\n\r\n    function importAave(address userAccount, address[] calldata tokens, bool converStable) external payable {\r\n        require(DSAInterface(address(this)).isAuth(userAccount), \"user-account-not-auth\");\r\n\r\n        uint _length = tokens.length;\r\n        require(_length > 0, \"0-tokens-not-allowed\");\r\n\r\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\r\n        AaveDataProviderInterface aaveData = getAaveDataProvider();\r\n\r\n        AaveData memory _aaveData = AaveData({\r\n            tokens: tokens,\r\n            atokens: new address[](_length),\r\n            stableBorrowAmts: new uint[](_length),\r\n            variableBorrowAmts: new uint[](_length),\r\n            totalBorrowAmts: new uint[](_length),\r\n            atokensBal: new uint[](_length),\r\n            atokenContracts: new ATokenInterface[](_length)\r\n        });\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            (_aaveData.atokens[i], ,) = aaveData.getReserveTokensAddresses(tokens[i]);\r\n            (\r\n                _aaveData.atokensBal[i],\r\n                _aaveData.stableBorrowAmts[i],\r\n                _aaveData.variableBorrowAmts[i],\r\n                ,,,,,\r\n            ) = aaveData.getUserReserveData(userAccount, tokens[i]);\r\n            _aaveData.totalBorrowAmts[i] = _aaveData.stableBorrowAmts[i] + _aaveData.variableBorrowAmts[i];\r\n\r\n            bool isEth = tokens[i] == getEthAddr();\r\n            address _token = isEth ? getWethAddr() : tokens[i];\r\n            _aaveData.atokenContracts[i] = ATokenInterface(_token);\r\n            TokenInterface(_token).approve(address(aave), _aaveData.totalBorrowAmts[i]);\r\n        }\r\n\r\n        if (converStable) {\r\n            _BorrowVariable(_length, aave, _aaveData.tokens, _aaveData.totalBorrowAmts);\r\n        } else {\r\n            _BorrowStable(_length, aave, _aaveData.tokens, _aaveData.stableBorrowAmts);\r\n            _BorrowVariable(_length, aave, _aaveData.tokens, _aaveData.variableBorrowAmts);\r\n        }\r\n        _PaybackStable(_length, aave, _aaveData.tokens, _aaveData.stableBorrowAmts, userAccount);\r\n        _PaybackVariable(_length, aave, _aaveData.tokens, _aaveData.variableBorrowAmts, userAccount);\r\n        _TransferAtokens(_length, aave, aaveData, _aaveData.atokenContracts, _aaveData.atokensBal, _aaveData.tokens, userAccount);\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectAaveV2Import is AaveImportResolver {\r\n    string public name = \"AaveV2-Import-v1.1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"converStable\",\"type\":\"bool\"}],\"name\":\"importAave\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectAaveV2Import","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d3406c1938ff02eb1ecd7b5cb076d1fb440aa4b909f893e2e6ac68c67280a1e0"}]}