{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract PredictionMarket {\r\n    \r\n    AggregatorV3Interface internal priceFeed;\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 public latestConditionIndex;\r\n    address payable public owner;\r\n    \r\n    mapping (uint256 => ConditionInfo) public conditions;\r\n    mapping (uint256 => mapping (address => UserInfo)) public users;\r\n    \r\n    struct ConditionInfo\r\n    {\r\n        address oracle;\r\n        int triggerPrice;\r\n        uint256 settlementTime;\r\n        uint256 totalBelowETHStaked;\r\n        uint256 totalAboveETHStaked;\r\n        address[] aboveParticipants;\r\n        address[] belowParticipants;\r\n        bool isSettled;\r\n        int settledPrice;\r\n    }\r\n    \r\n    struct UserInfo\r\n    {\r\n        uint256 belowETHStaked;\r\n        uint256 aboveETHStaked;\r\n    }\r\n    \r\n    event ConditionPrepared(\r\n        uint256 indexed conditionIndex,\r\n        address indexed oracle,\r\n        uint256 indexed settlementTime,\r\n        int triggerPrice\r\n    );\r\n    \r\n    event UserPrediction(\r\n        uint256 indexed conditionIndex,\r\n        address indexed userAddress,\r\n        uint256 indexed ETHStaked,\r\n        uint8 prediction,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event UserClaimed(\r\n        uint256 indexed conditionIndex,\r\n        address indexed userAddress,\r\n        uint256 indexed winningAmount\r\n    );\r\n    \r\n    event ConditionSettled(\r\n        uint256 indexed conditionIndex,\r\n        int indexed settledPrice,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner,\"Not Owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address payable _owner) public {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function prepareCondition(address _oracle,uint256 _settlementTime, int _triggerPrice) external onlyOwner{\r\n        require(_oracle != address(0),\"Can't be 0 address\");\r\n        require(_settlementTime > block.timestamp,\"Settlement Time should be greater than Trx Confirmed Time\");\r\n        latestConditionIndex = latestConditionIndex.add(1);\r\n        ConditionInfo storage conditionInfo = conditions[latestConditionIndex];\r\n\r\n        conditionInfo.oracle = _oracle;\r\n        conditionInfo.settlementTime = _settlementTime;\r\n        conditionInfo.triggerPrice = _triggerPrice;\r\n        conditionInfo.isSettled = false;\r\n        \r\n        emit ConditionPrepared(latestConditionIndex, _oracle, _settlementTime, _triggerPrice);\r\n    }\r\n    \r\n    function probabilityRatio(uint256 _conditionIndex) external view returns(uint256 aboveProbability,uint256 belowProbability){\r\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n        \r\n        uint256 ethStakedForAbove = conditionInfo.totalAboveETHStaked;\r\n        uint256 ethStakedForBelow = conditionInfo.totalBelowETHStaked;\r\n        \r\n        uint256 totalETHStaked = ethStakedForAbove.add(ethStakedForBelow);\r\n        \r\n        uint256 aboveProbabilityRatio = totalETHStaked > 0 ? ethStakedForAbove.mul(1e18).div(totalETHStaked) : 0;\r\n        uint256 belowProbabilityRatio = totalETHStaked > 0 ? ethStakedForBelow.mul(1e18).div(totalETHStaked) : 0;\r\n                                                    \r\n        return (aboveProbabilityRatio,belowProbabilityRatio);\r\n    }\r\n    \r\n    function userTotalETHStaked(uint256 _conditionIndex,address userAddress) public view returns(uint256){\r\n        UserInfo storage userInfo = users[_conditionIndex][userAddress];\r\n        return userInfo.aboveETHStaked.add(userInfo.belowETHStaked);\r\n    }\r\n    \r\n    function betOnCondition(uint256 _conditionIndex,uint8 _prediction) public payable{\r\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n        require(conditionInfo.oracle !=address(0), \"Condition doesn't exists\");\r\n        require(block.timestamp < conditionInfo.settlementTime,\"Cannot bet after Settlement Time\");\r\n        uint256 userETHStaked = msg.value;\r\n        require(userETHStaked > 0 wei, \"Bet cannot be 0\");\r\n        require((_prediction == 0)||(_prediction == 1),\"Invalid Prediction\");   //prediction = 0 (price will be below), if 1 (price will be above)\r\n\r\n        \r\n        address userAddress = msg.sender;\r\n        UserInfo storage userInfo = users[_conditionIndex][userAddress];\r\n        \r\n        if(_prediction == 0) {\r\n            conditionInfo.belowParticipants.push(userAddress);\r\n            conditionInfo.totalBelowETHStaked = conditionInfo.totalBelowETHStaked.add(userETHStaked);\r\n            userInfo.belowETHStaked = userInfo.belowETHStaked.add(userETHStaked);\r\n        }\r\n        else{\r\n            conditionInfo.aboveParticipants.push(userAddress);\r\n            conditionInfo.totalAboveETHStaked = conditionInfo.totalAboveETHStaked.add(userETHStaked);\r\n            userInfo.aboveETHStaked = userInfo.aboveETHStaked.add(userETHStaked);\r\n        }\r\n        emit UserPrediction(_conditionIndex,userAddress,userETHStaked,_prediction,block.timestamp);\r\n    }\r\n    \r\n    function settleCondition(uint256 _conditionIndex) public {\r\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n        require(conditionInfo.oracle !=address(0), \"Condition doesn't exists\");\r\n        require(block.timestamp >= conditionInfo.settlementTime,\"Not before Settlement Time\");\r\n        require(!conditionInfo.isSettled,\"Condition settled already\");\r\n        \r\n        conditionInfo.isSettled = true;\r\n        priceFeed = AggregatorV3Interface(conditionInfo.oracle);\r\n        (,int latestPrice,,,) = priceFeed.latestRoundData();\r\n        conditionInfo.settledPrice = latestPrice;\r\n        emit ConditionSettled(_conditionIndex,latestPrice,block.timestamp);\r\n    }\r\n    \r\n    function claim(uint256 _conditionIndex) public{\r\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n        address payable userAddress = msg.sender;\r\n        UserInfo storage userInfo = users[_conditionIndex][userAddress];\r\n\r\n        require(userTotalETHStaked(_conditionIndex,userAddress) > 0, \"Nothing To Claim\");\r\n        \r\n        if(!conditionInfo.isSettled){\r\n            settleCondition(_conditionIndex);\r\n        }\r\n        uint256 totalPayout;    //Payout to be distributed among winners(total eth staked by loosing side)\r\n        uint256 winnersTotalETHStaked;   //total eth staked by the winning side\r\n        uint256 userProportion; //User Stake Proportion among the total ETH Staked by winners\r\n        uint256 winnerPayout;\r\n        uint256 winnerRedeemable;   //User can redeem 90% of there total winnerPayout \r\n        uint256 platformFees;      // remaining 10% will be treated as platformFees  \r\n        uint256 totalWinnerRedeemable; //Amount Redeemable including winnerRedeemable & user initial Stake\r\n        \r\n        if(conditionInfo.settledPrice >= conditionInfo.triggerPrice){    //Users who predicted above price wins \r\n            totalPayout = conditionInfo.totalBelowETHStaked;\r\n            winnersTotalETHStaked = conditionInfo.totalAboveETHStaked;\r\n            userProportion = userInfo.aboveETHStaked.mul(1e18).div(winnersTotalETHStaked);\r\n            winnerPayout = totalPayout.mul(userProportion).div(1e18);\r\n            winnerRedeemable = (winnerPayout.div(1000)).mul(900);    \r\n            platformFees = (winnerPayout.div(1000)).mul(100);         \r\n            owner.transfer(platformFees);\r\n            totalWinnerRedeemable = winnerRedeemable.add(userInfo.aboveETHStaked);\r\n            userAddress.transfer(totalWinnerRedeemable);\r\n        }\r\n        \r\n        else if(conditionInfo.settledPrice < conditionInfo.triggerPrice){      //Users who predicted below price wins\r\n            totalPayout = conditionInfo.totalAboveETHStaked;\r\n            winnersTotalETHStaked = conditionInfo.totalBelowETHStaked;\r\n            userProportion = userInfo.belowETHStaked.mul(1e18).div(winnersTotalETHStaked);\r\n            winnerPayout = totalPayout.mul(userProportion).div(1e18);\r\n            winnerRedeemable = (winnerPayout.div(1000)).mul(900);     \r\n            platformFees = (winnerPayout.div(1000)).mul(100);        \r\n            owner.transfer(platformFees);\r\n            totalWinnerRedeemable = winnerRedeemable.add(userInfo.belowETHStaked);\r\n            userAddress.transfer(totalWinnerRedeemable);\r\n        }\r\n        emit UserClaimed(_conditionIndex,userAddress,winnerPayout);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"triggerPrice\",\"type\":\"int256\"}],\"name\":\"ConditionPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"settledPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConditionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ETHStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserPrediction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"}],\"name\":\"betOnCondition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"triggerPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBelowETHStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAboveETHStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"settledPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConditionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_settlementTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_triggerPrice\",\"type\":\"int256\"}],\"name\":\"prepareCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"probabilityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aboveProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"belowProbability\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"settleCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userTotalETHStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"belowETHStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aboveETHStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PredictionMarket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ef66f9c4e3205ff3711de7aa02e13724c6c1f48a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2e3e661d18cfcc108d0023dc54867067794a95104527970a76362ee134bdc8a7"}]}