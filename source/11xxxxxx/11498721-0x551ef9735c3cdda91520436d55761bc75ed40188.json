{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setMigrator(address) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IWETH.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function approve(address guy, uint256 wad) external returns (bool);\r\n\r\n    function balanceOf(address addr) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/INerdBaseToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface INerdBaseToken {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Log(string log);\r\n}\r\n\r\ninterface INerdBaseTokenLGE is INerdBaseToken {\r\n    function getAllocatedLP(address _user) external view returns (uint256);\r\n\r\n    function getLpReleaseStart() external view returns (uint256);\r\n\r\n    function getTokenUniswapPair() external view returns (address);\r\n\r\n    function getTotalLPTokensMinted() external view returns (uint256);\r\n\r\n    function getReleasableLPTokensMinted() external view returns (uint256);\r\n\r\n    function isLPGenerationCompleted() external view returns (bool);\r\n\r\n    function tokenUniswapPair() external view returns (address);\r\n\r\n    function getUniswapRouterV2() external view returns (address);\r\n\r\n    function getUniswapFactory() external view returns (address);\r\n\r\n    function devFundAddress() external view returns (address);\r\n\r\n    function transferCheckerAddress() external view returns (address);\r\n\r\n    function feeDistributor() external view returns (address);\r\n}\r\n\r\n// File: contracts/IFeeApprover.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IFeeApprover {\r\n    function check(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function setFeeMultiplier(uint256 _feeMultiplier) external;\r\n\r\n    function feePercentX100() external view returns (uint256);\r\n\r\n    function setTokenUniswapPair(address _tokenUniswapPair) external;\r\n\r\n    function setNerdTokenAddress(address _nerdTokenAddress) external;\r\n\r\n    function updateTxState() external;\r\n\r\n    function calculateAmountsAfterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (uint256 transferToAmount, uint256 transferToFeeBearerAmount);\r\n\r\n    function setPaused() external;\r\n}\r\n\r\n// File: contracts/INerdVault.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface INerdVault {\r\n    function updatePendingRewards() external;\r\n\r\n    function depositFor(\r\n        address _depositFor,\r\n        uint256 _pid,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function poolInfo(uint256 _pid)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n\r\n// File: @nomiclabs/buidler/console.sol\r\n\r\npragma solidity >=0.4.22 <0.8.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(\r\n        0x000000000000000000636F6e736F6c652e6c6f67\r\n    );\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(\r\n                gas(),\r\n                consoleAddress,\r\n                payloadStart,\r\n                payloadLength,\r\n                0,\r\n                0\r\n            )\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logByte(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(byte)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/libraries/SafeMath.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/libraries/UniswapV2Library.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUniswap for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\r\n            IUniswapV2Factory(factory).getPair(tokenA, tokenB)\r\n        )\r\n            .getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1]\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i]\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/FarmETHRouter.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IStakingPool {\r\n    function depositFor(address _depositFor, uint256 _originAmount) external;\r\n}\r\n\r\ncontract FarmETHRouter is OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    mapping(address => uint256) public hardNerd;\r\n\r\n    address public _nerdToken;\r\n    address public _nerdWETHPair;\r\n    IFeeApprover public _feeApprover;\r\n    INerdVault public _nerdVault;\r\n    IWETH public _WETH;\r\n    address public _uniV2Factory;\r\n    address public _uniV2Router;\r\n\r\n    function initialize() public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        _nerdToken = 0x32C868F6318D6334B2250F323D914Bc2239E4EeE;\r\n        _uniV2Factory = INerdBaseTokenLGE(_nerdToken).getUniswapFactory();\r\n        _uniV2Router = INerdBaseTokenLGE(_nerdToken).getUniswapRouterV2();\r\n        _WETH = IWETH(IUniswapV2Router02(_uniV2Router).WETH());\r\n        _feeApprover = IFeeApprover(\r\n            INerdBaseTokenLGE(_nerdToken).transferCheckerAddress()\r\n        );\r\n        _nerdWETHPair = INerdBaseTokenLGE(_nerdToken).getTokenUniswapPair();\r\n        _nerdVault = INerdVault(0x47cE2237d7235Ff865E1C74bF3C6d9AF88d1bbfF);\r\n        refreshApproval();\r\n    }\r\n\r\n    function refreshApproval() public {\r\n        IUniswapV2Pair(_nerdWETHPair).approve(address(_nerdVault), uint256(-1));\r\n    }\r\n\r\n    event FeeApproverChanged(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    fallback() external payable {\r\n        if (msg.sender != address(_WETH)) {\r\n            addLiquidityETHOnly(msg.sender, false);\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferIn(address _source, uint256 _amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 sourceBalBefore = IERC20(_source).balanceOf(address(this));\r\n        safeTransferFrom(_source, msg.sender, address(this), _amount);\r\n        uint256 sourceBalAfter = IERC20(_source).balanceOf(address(this));\r\n        return sourceBalAfter.sub(sourceBalBefore);\r\n    }\r\n\r\n    function stakeNerdByETH(address stakingPool) external payable {\r\n        require(address(_WETH) != address(0), \"invalid WETH\");\r\n        _WETH.deposit{value: msg.value}();\r\n        stakeInternal(stakingPool, msg.value);\r\n    }\r\n\r\n    function stakeNerdByAnyToken(\r\n        address stakingPool,\r\n        address sourceToken,\r\n        uint256 amount\r\n    ) external {\r\n        require(stakingPool != address(0), \"invalid staking pool\");\r\n        uint256 sourceBal = safeTransferIn(sourceToken, amount);\r\n        //get eth pair with source\r\n        //swap source token for WETH\r\n        IERC20(sourceToken).safeApprove(_uniV2Router, sourceBal);\r\n        uint256 _ethAmount = sourceBal;\r\n        if (address(_WETH) != sourceToken) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = sourceToken;\r\n            path[1] = address(_WETH);\r\n            uint256 ethBefore = _WETH.balanceOf(address(this));\r\n            IUniswapV2Router02(_uniV2Router).swapExactTokensForTokens(\r\n                sourceBal,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 100\r\n            );\r\n            _ethAmount = _WETH.balanceOf(address(this)).sub(ethBefore);\r\n        }\r\n        stakeInternal(stakingPool, _ethAmount);\r\n    }\r\n\r\n    function stakeInternal(address stakingPool, uint256 _ethAmount) internal {\r\n        (uint256 reserveWeth, uint256 reservenerd) = getPairReserves(\r\n            address(_nerdWETHPair)\r\n        );\r\n        uint256 outnerd = UniswapV2Library.getAmountOut(\r\n            _ethAmount,\r\n            reserveWeth,\r\n            reservenerd\r\n        );\r\n        _WETH.transfer(_nerdWETHPair, _ethAmount);\r\n        (address token0, address token1) = UniswapV2Library.sortTokens(\r\n            address(_WETH),\r\n            _nerdToken\r\n        );\r\n        IUniswapV2Pair(_nerdWETHPair).swap(\r\n            _nerdToken == token0 ? outnerd : 0,\r\n            _nerdToken == token1 ? outnerd : 0,\r\n            address(this),\r\n            \"\"\r\n        );\r\n        outnerd = IERC20(_nerdToken).balanceOf(address(this));\r\n        IERC20(_nerdToken).approve(stakingPool, outnerd);\r\n        IStakingPool(stakingPool).depositFor(msg.sender, outnerd);\r\n    }\r\n\r\n    function addLiquidityByTokenForPool(\r\n        address sourceToken,\r\n        uint256 amount,\r\n        uint256 pid,\r\n        address payable to,\r\n        bool autoStake\r\n    ) external {\r\n        uint256 sourceBal = safeTransferIn(sourceToken, amount);\r\n        //get eth pair with source\r\n        //swap source token for WETH\r\n        IERC20(sourceToken).safeApprove(_uniV2Router, sourceBal);\r\n        uint256 _ethAmount = sourceBal;\r\n        if (address(_WETH) != sourceToken) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = sourceToken;\r\n            path[1] = address(_WETH);\r\n            uint256 ethBefore = _WETH.balanceOf(address(this));\r\n            IUniswapV2Router02(_uniV2Router).swapExactTokensForTokens(\r\n                sourceBal,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 100\r\n            );\r\n            _ethAmount = _WETH.balanceOf(address(this)).sub(ethBefore);\r\n        }\r\n        _addLiquidityETHOnlyForPool(pid, to, autoStake, _ethAmount, false);\r\n    }\r\n\r\n    //this is only applied for pool 0: NERD-ETH\r\n    function addLiquidityETHOnlyForPool(\r\n        uint256 pid,\r\n        address payable to,\r\n        bool autoStake\r\n    ) public payable {\r\n        require(to != address(0), \"Invalid address\");\r\n        _addLiquidityETHOnlyForPool(pid, to, autoStake, msg.value, true);\r\n    }\r\n\r\n    function _addLiquidityETHOnlyForPool(\r\n        uint256 pid,\r\n        address payable to,\r\n        bool autoStake,\r\n        uint256 _value,\r\n        bool _needDeposit\r\n    ) internal {\r\n        hardNerd[msg.sender] = hardNerd[msg.sender].add(_value);\r\n        uint256 buyAmount = _value.div(2);\r\n        require(buyAmount > 0, \"Insufficient ETH amount\");\r\n        (address lpAddress, , , , , , , , ) = _nerdVault.poolInfo(pid);\r\n        IUniswapV2Pair pair = IUniswapV2Pair(lpAddress);\r\n        address otherToken = pair.token0() == _nerdToken\r\n            ? pair.token1()\r\n            : pair.token0();\r\n\r\n        require(\r\n            otherToken != address(_WETH),\r\n            \"Please use addLiquidityETHOnly function\"\r\n        );\r\n        if (_needDeposit) {\r\n            _WETH.deposit{value: _value}();\r\n        }\r\n\r\n        uint256 outnerd = 0;\r\n        uint256 outOther = 0;\r\n        {\r\n            //buy nerd\r\n            address pairWithEth = _nerdWETHPair;\r\n            (uint256 reserveWeth, uint256 reservenerd) = getPairReserves(\r\n                pairWithEth\r\n            );\r\n            outnerd = UniswapV2Library.getAmountOut(\r\n                buyAmount,\r\n                reserveWeth,\r\n                reservenerd\r\n            );\r\n            _WETH.transfer(pairWithEth, buyAmount);\r\n            (address token0, address token1) = UniswapV2Library.sortTokens(\r\n                address(_WETH),\r\n                _nerdToken\r\n            );\r\n            IUniswapV2Pair(pairWithEth).swap(\r\n                _nerdToken == token0 ? outnerd : 0,\r\n                _nerdToken == token1 ? outnerd : 0,\r\n                address(this),\r\n                \"\"\r\n            );\r\n            outnerd = IERC20(_nerdToken).balanceOf(address(this));\r\n        }\r\n\r\n        {\r\n            //buy other token\r\n            address pairWithEth = IUniswapV2Factory(_uniV2Factory).getPair(\r\n                address(_WETH),\r\n                otherToken\r\n            );\r\n            (uint256 reserveWeth, uint256 reserveOther) = getPairReserves(\r\n                pairWithEth\r\n            );\r\n            outOther = UniswapV2Library.getAmountOut(\r\n                buyAmount,\r\n                reserveWeth,\r\n                reserveOther\r\n            );\r\n            _WETH.transfer(pairWithEth, buyAmount);\r\n            (address token0, address token1) = UniswapV2Library.sortTokens(\r\n                address(_WETH),\r\n                otherToken\r\n            );\r\n            IUniswapV2Pair(pairWithEth).swap(\r\n                otherToken == token0 ? outOther : 0,\r\n                otherToken == token1 ? outOther : 0,\r\n                address(this),\r\n                \"\"\r\n            );\r\n            outOther = IERC20(otherToken).balanceOf(address(this));\r\n        }\r\n\r\n        _addLiquidityForPool(\r\n            pid,\r\n            address(pair),\r\n            outnerd,\r\n            otherToken,\r\n            outOther,\r\n            to,\r\n            autoStake\r\n        );\r\n    }\r\n\r\n    //this is only applied for pool 0: NERD-ETH\r\n    function addLiquidityETHOnly(address payable to, bool autoStake)\r\n        public\r\n        payable\r\n    {\r\n        require(to != address(0), \"Invalid address\");\r\n        hardNerd[msg.sender] = hardNerd[msg.sender].add(msg.value);\r\n        uint256 buyAmount = msg.value.div(2);\r\n        require(buyAmount > 0, \"Insufficient ETH amount\");\r\n        require(address(_WETH) != address(0), \"invalid WETH\");\r\n        _WETH.deposit{value: msg.value}();\r\n        (uint256 reserveWeth, uint256 reservenerd) = getPairReserves(\r\n            address(_nerdWETHPair)\r\n        );\r\n        uint256 outnerd = UniswapV2Library.getAmountOut(\r\n            buyAmount,\r\n            reserveWeth,\r\n            reservenerd\r\n        );\r\n        _WETH.transfer(_nerdWETHPair, buyAmount);\r\n        (address token0, address token1) = UniswapV2Library.sortTokens(\r\n            address(_WETH),\r\n            _nerdToken\r\n        );\r\n        IUniswapV2Pair(_nerdWETHPair).swap(\r\n            _nerdToken == token0 ? outnerd : 0,\r\n            _nerdToken == token1 ? outnerd : 0,\r\n            address(this),\r\n            \"\"\r\n        );\r\n        outnerd = IERC20(_nerdToken).balanceOf(address(this));\r\n        _addLiquidityPool0(outnerd, buyAmount, to, autoStake);\r\n    }\r\n\r\n    function _addLiquidityForPool(\r\n        uint256 pid,\r\n        address pair,\r\n        uint256 nerdAmount,\r\n        address otherAddress,\r\n        uint256 otherAmount,\r\n        address payable to,\r\n        bool autoStake\r\n    ) internal {\r\n        if (IERC20(pair).totalSupply() == 0) {\r\n            IERC20(_nerdToken).approve(_uniV2Router, uint256(-1));\r\n            IERC20(otherAddress).approve(_uniV2Router, uint256(-1));\r\n            if (autoStake) {\r\n                IUniswapV2Router02(_uniV2Router).addLiquidity(\r\n                    _nerdToken,\r\n                    otherAddress,\r\n                    nerdAmount,\r\n                    otherAmount,\r\n                    0,\r\n                    0,\r\n                    address(this),\r\n                    block.timestamp + 100\r\n                );\r\n                IUniswapV2Pair(pair).approve(address(_nerdVault), uint256(-1));\r\n                _nerdVault.depositFor(\r\n                    to,\r\n                    pid,\r\n                    IUniswapV2Pair(pair).balanceOf(address(this))\r\n                );\r\n            } else {\r\n                IUniswapV2Router02(_uniV2Router).addLiquidity(\r\n                    _nerdToken,\r\n                    otherAddress,\r\n                    nerdAmount,\r\n                    otherAmount,\r\n                    0,\r\n                    0,\r\n                    to,\r\n                    block.timestamp + 100\r\n                );\r\n            }\r\n            return;\r\n        }\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\r\n            .getReserves();\r\n        (uint256 nerdReserve, uint256 otherTokenReserve) = (IUniswapV2Pair(pair)\r\n            .token0() == otherAddress)\r\n            ? (reserve1, reserve0)\r\n            : (reserve0, reserve1);\r\n\r\n        uint256 optimalnerdAmount = UniswapV2Library.quote(\r\n            otherAmount,\r\n            otherTokenReserve,\r\n            nerdReserve\r\n        );\r\n\r\n        uint256 optimalOtherAmount;\r\n        if (optimalnerdAmount > nerdAmount) {\r\n            optimalOtherAmount = UniswapV2Library.quote(\r\n                nerdAmount,\r\n                nerdReserve,\r\n                otherTokenReserve\r\n            );\r\n            optimalnerdAmount = nerdAmount;\r\n        } else optimalOtherAmount = otherAmount;\r\n\r\n        assert(IERC20(otherAddress).transfer(pair, optimalOtherAmount));\r\n        assert(IERC20(_nerdToken).transfer(pair, optimalnerdAmount));\r\n\r\n        if (autoStake) {\r\n            IUniswapV2Pair(pair).mint(address(this));\r\n            IUniswapV2Pair(pair).approve(address(_nerdVault), uint256(-1));\r\n            _nerdVault.depositFor(\r\n                to,\r\n                pid,\r\n                IUniswapV2Pair(pair).balanceOf(address(this))\r\n            );\r\n        } else IUniswapV2Pair(pair).mint(to);\r\n\r\n        //refund dust\r\n        if (IERC20(_nerdToken).balanceOf(address(this)) > 0)\r\n            IERC20(_nerdToken).transfer(\r\n                to,\r\n                IERC20(_nerdToken).balanceOf(address(this))\r\n            );\r\n\r\n        if (IERC20(otherAddress).balanceOf(address(this)) > 0) {\r\n            IERC20(otherAddress).transfer(\r\n                to,\r\n                IERC20(otherAddress).balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    function _addLiquidityPool0(\r\n        uint256 nerdAmount,\r\n        uint256 wethAmount,\r\n        address payable to,\r\n        bool autoStake\r\n    ) internal {\r\n        (uint256 wethReserve, uint256 nerdReserve) = getPairReserves(\r\n            address(_nerdWETHPair)\r\n        );\r\n\r\n        uint256 optimalnerdAmount = UniswapV2Library.quote(\r\n            wethAmount,\r\n            wethReserve,\r\n            nerdReserve\r\n        );\r\n\r\n        uint256 optimalWETHAmount;\r\n        if (optimalnerdAmount > nerdAmount) {\r\n            optimalWETHAmount = UniswapV2Library.quote(\r\n                nerdAmount,\r\n                nerdReserve,\r\n                wethReserve\r\n            );\r\n            optimalnerdAmount = nerdAmount;\r\n        } else optimalWETHAmount = wethAmount;\r\n\r\n        assert(_WETH.transfer(_nerdWETHPair, optimalWETHAmount));\r\n        assert(IERC20(_nerdToken).transfer(_nerdWETHPair, optimalnerdAmount));\r\n\r\n        if (autoStake) {\r\n            IUniswapV2Pair(_nerdWETHPair).mint(address(this));\r\n            _nerdVault.depositFor(\r\n                to,\r\n                0,\r\n                IUniswapV2Pair(_nerdWETHPair).balanceOf(address(this))\r\n            );\r\n        } else IUniswapV2Pair(_nerdWETHPair).mint(to);\r\n\r\n        //refund dust\r\n        if (IERC20(_nerdToken).balanceOf(address(this)) > 0)\r\n            IERC20(_nerdToken).transfer(\r\n                to,\r\n                IERC20(_nerdToken).balanceOf(address(this))\r\n            );\r\n\r\n        if (_WETH.balanceOf(address(this)) > 0) {\r\n            uint256 withdrawAmount = _WETH.balanceOf(address(this));\r\n            _WETH.withdraw(withdrawAmount);\r\n            to.transfer(withdrawAmount);\r\n        }\r\n    }\r\n\r\n    function changeFeeApprover(address feeApprover) external onlyOwner {\r\n        address oldAddress = address(_feeApprover);\r\n        _feeApprover = IFeeApprover(feeApprover);\r\n\r\n        emit FeeApproverChanged(feeApprover, oldAddress);\r\n    }\r\n\r\n    function getLPTokenPerEthUnit(uint256 ethAmt)\r\n        public\r\n        view\r\n        returns (uint256 liquidity)\r\n    {\r\n        (uint256 reserveWeth, uint256 reservenerd) = getPairReserves(\r\n            _nerdWETHPair\r\n        );\r\n        uint256 outnerd = UniswapV2Library.getAmountOut(\r\n            ethAmt.div(2),\r\n            reserveWeth,\r\n            reservenerd\r\n        );\r\n        uint256 _totalSupply = IUniswapV2Pair(_nerdWETHPair).totalSupply();\r\n\r\n        (address token0, ) = UniswapV2Library.sortTokens(\r\n            address(_WETH),\r\n            _nerdToken\r\n        );\r\n        (uint256 amount0, uint256 amount1) = token0 == _nerdToken\r\n            ? (outnerd, ethAmt.div(2))\r\n            : (ethAmt.div(2), outnerd);\r\n        (uint256 _reserve0, uint256 _reserve1) = token0 == _nerdToken\r\n            ? (reservenerd, reserveWeth)\r\n            : (reserveWeth, reservenerd);\r\n        liquidity = Math.min(\r\n            amount0.mul(_totalSupply) / _reserve0,\r\n            amount1.mul(_totalSupply) / _reserve1\r\n        );\r\n    }\r\n\r\n    function getPairReserves(address _pair)\r\n        internal\r\n        view\r\n        returns (uint256 wethReserves, uint256 otherTokenReserves)\r\n    {\r\n        address token0 = IUniswapV2Pair(_pair).token0();\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\r\n            .getReserves();\r\n        (wethReserves, otherTokenReserves) = token0 == address(_WETH)\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"FeeApproverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeApprover\",\"outputs\":[{\"internalType\":\"contract IFeeApprover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nerdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nerdVault\",\"outputs\":[{\"internalType\":\"contract INerdVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nerdWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityByTokenForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityETHOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityETHOnlyForPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeApprover\",\"type\":\"address\"}],\"name\":\"changeFeeApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"getLPTokenPerEthUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hardNerd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeNerdByAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"name\":\"stakeNerdByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FarmETHRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7765bd5b2f6cb0befbd2674a3551f32ea309f14607d40baf30af3da657212ad4"}]}