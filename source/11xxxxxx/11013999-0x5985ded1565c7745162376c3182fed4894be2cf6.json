{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract DokiCoinCore is ERC20(\"DokiDokiFinance\", \"DOKI\") {\r\n    using SafeMath for uint256;\r\n\r\n    address internal _taxer;\r\n    address internal _taxDestination;\r\n    uint internal _taxRate = 0;\r\n    mapping (address => bool) internal _taxWhitelist;\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[msg.sender] == true) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(msg.sender) >= transferAmount, \"insufficient balance.\");\r\n        super.transfer(recipient, amount);\r\n\r\n        if (taxAmount != 0) {\r\n            super.transfer(_taxDestination, taxAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[sender] == true) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(sender) >= transferAmount, \"insufficient balance.\");\r\n        super.transferFrom(sender, recipient, amount);\r\n        if (taxAmount != 0) {\r\n            super.transferFrom(sender, _taxDestination, taxAmount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DokiCoin is DokiCoinCore, Ownable {\r\n    mapping (address => bool) public minters;\r\n\r\n    constructor() {\r\n        _taxer = owner();\r\n        _taxDestination = owner();\r\n    }\r\n\r\n    function mint(address to, uint amount) public onlyMinter {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(uint amount) public {\r\n        require(amount > 0);\r\n        require(balanceOf(msg.sender) >= amount);\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        minters[account] = true;\r\n    }\r\n\r\n    function removeMinter(address account) public onlyOwner {\r\n        minters[account] = false;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Restricted to minters.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTaxer() {\r\n        require(msg.sender == _taxer, \"Only for taxer.\");\r\n        _;\r\n    }\r\n\r\n    function setTaxer(address account) public onlyOwner {\r\n        _taxer = account;\r\n    }\r\n\r\n    function setTaxRate(uint256 rate) public onlyTaxer {\r\n        _taxRate = rate;\r\n    }\r\n\r\n    function setTaxDestination(address account) public onlyTaxer {\r\n        _taxDestination = account;\r\n    }\r\n\r\n    function addToWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = false;\r\n    }\r\n\r\n    function taxer() public view returns(address) {\r\n        return _taxer;\r\n    }\r\n\r\n    function taxDestination() public view returns(address) {\r\n        return _taxDestination;\r\n    }\r\n\r\n    function taxRate() public view returns(uint256) {\r\n        return _taxRate;\r\n    }\r\n\r\n    function isInWhitelist(address account) public view returns(bool) {\r\n        return _taxWhitelist[account];\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ncontract DokiPresale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => uint) public ethSupply;\r\n    address payable devAddress;\r\n    uint public dokiPrice = 5;\r\n    uint public buyLimit = 3 * 1e18;\r\n    bool public presaleStart = false;\r\n    bool public onlyWhitelist = true;\r\n    uint public presaleLastSupply = 3000 * 1e18;\r\n\r\n    DokiCoin private doki = DokiCoin(0x9cEB84f92A0561fa3Cc4132aB9c0b76A59787544);\r\n\r\n    event BuyDokiSuccess(address account, uint ethAmount, uint dokiAmount);\r\n\r\n    constructor(address payable account) {\r\n        devAddress = account;\r\n\r\n        initWhitelist();\r\n    }\r\n\r\n    function addToWhitelist(address account) public onlyOwner {\r\n        require(whitelist[account] == false, \"This account is already in whitelist.\");\r\n        whitelist[account] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address account) public onlyOwner {\r\n        require(whitelist[account], \"This account is not in whitelist.\");\r\n        whitelist[account] = false;\r\n    }\r\n\r\n    function setDevAddress(address payable account) public onlyOwner {\r\n        devAddress = account;\r\n    }\r\n\r\n    function startPresale() public onlyOwner {\r\n        presaleStart = true;\r\n    }\r\n\r\n    function stopPresale() public onlyOwner {\r\n        presaleStart = false;\r\n    }\r\n\r\n    function setDokiPrice(uint newPrice) public onlyOwner {\r\n        dokiPrice = newPrice;\r\n    }\r\n\r\n    function setBuyLimit(uint newLimit) public onlyOwner {\r\n        buyLimit = newLimit;\r\n    }\r\n\r\n    function changeToNotOnlyWhitelist() public onlyOwner {\r\n        onlyWhitelist = false;\r\n    }\r\n\r\n    modifier needHaveLastSupply() {\r\n        require(presaleLastSupply >= 0, \"Oh you are so late.\");\r\n        _;\r\n    }\r\n\r\n    modifier presaleHasStarted() {\r\n        require(presaleStart, \"Presale has not been started.\");\r\n        _;\r\n    }\r\n\r\n    receive() payable external presaleHasStarted needHaveLastSupply {\r\n        if (onlyWhitelist) {\r\n            require(whitelist[msg.sender], \"This time is only for people who are in whitelist.\");\r\n        }\r\n        uint ethTotalAmount = ethSupply[msg.sender].add(msg.value);\r\n        require(ethTotalAmount <= buyLimit, \"Everyone should buy lesser than 3 eth.\");\r\n        uint dokiAmount = msg.value.mul(dokiPrice);\r\n        require(dokiAmount <= presaleLastSupply, \"insufficient presale supply\");\r\n        presaleLastSupply = presaleLastSupply.sub(dokiAmount);\r\n        doki.mint(msg.sender, dokiAmount);\r\n        ethSupply[msg.sender] = ethTotalAmount;\r\n        devAddress.transfer(msg.value);\r\n        emit BuyDokiSuccess(msg.sender, msg.value, dokiAmount);\r\n    }\r\n\r\n    function initWhitelist() internal {\r\n        whitelist[0x3c5de42f02DebBaA235f7a28E4B992362FfeE0B6] = true;\r\n        whitelist[0x7aE02E3871f38D0bA4a5192d97621ba52083fD06] = true;\r\n        whitelist[0xbb257625458a12374daf2AD0c91d5A215732F206] = true;\r\n        whitelist[0x862ADa03a5B7cB89b2dE442eA8FdaBe5CCdab661] = true;\r\n        whitelist[0xbA55F9d6B5D43Ce2A57657d1378D4694270fb10E] = true;\r\n        whitelist[0x6339D26dac709d16359CdadEc0Dbe87dE1CfA833] = true;\r\n        whitelist[0xa91856166B8c0DE93696b48163Bf16952DAc62E4] = true;\r\n        whitelist[0x3C03D1282974B4186578276e37eA4eccC7960F01] = true;\r\n        whitelist[0xc8994FB5E7623c511034076b7006873598a78Dd9] = true;\r\n        whitelist[0xBC6D28a2e0a29423f3a0Bc6CC6e656e1e58762d9] = true;\r\n        whitelist[0xE15aa7f7de1f1bB51aED5d7C28BDcb59987f020A] = true;\r\n        whitelist[0xA538311df7DC52bBE861F6e3EfDD749730503Cae] = true;\r\n        whitelist[0x42147EE918238fdfF257a15fA758944D6b870B6A] = true;\r\n        whitelist[0x5b049c3Bef543a181A720DcC6fEbc9afdab5D377] = true;\r\n        whitelist[0xBacEcAc3EA45372e6a83C2B97032211e4758368a] = true;\r\n        whitelist[0x9Fe686D6fAcBC5AE4433308B26e7c810ac43F3D4] = true;\r\n        whitelist[0xC4b51F3e8aFf16917d0a9651aCDf6392Bd9547d7] = true;\r\n        whitelist[0xEc0941c09573dB9b24f71Cf997Fe9E0cfAcfd365] = true;\r\n        whitelist[0xc0E630576248f9F05f1b098449eC20206ba35EbA] = true;\r\n        whitelist[0x7ce8CD580Cfae9f162BcbBFA80dcf3765f99Ca7f] = true;\r\n        whitelist[0xC7042A897789bba6952bFD9f307Da019CA8AeF37] = true;\r\n        whitelist[0x5AaAEF91F93bE4dE932b8e7324aBBF9f26DAa706] = true;\r\n        whitelist[0x9B269141E3B2924E4Fec66351607981638c0F30F] = true;\r\n        whitelist[0x25054f27C9972B341Aee6c0D373A652566075431] = true;\r\n        whitelist[0x0659213124b2E572575B827E252701b7615872Af] = true;\r\n        whitelist[0xe4FD210236D8Ba17663997097B832e8e0D262ceE] = true;\r\n        whitelist[0x14575550C4d4f9AEF3A2a84a19753D8dd2Aa9853] = true;\r\n        whitelist[0x2A2572771d1d5C69c9e98b095522BF49eC529B7E] = true;\r\n        whitelist[0x5C7A537511950A172F3270c94C58442774DeC6cb] = true;\r\n        whitelist[0xFaBFbAb3F20203A41A3306be1d1aB68365Bc48C1] = true;\r\n        whitelist[0x7d251915B2848d8B2D4A6c6CF9DD8fa901E073F2] = true;\r\n        whitelist[0x14123aB5131B6adE473c296FB073A0606944a0E0] = true;\r\n        whitelist[0xCB52F012E04D1E4521063c9d5Debc11ddaa21A68] = true;\r\n        whitelist[0xc138aE7bCD1fDe0606a4eD6c8B7413e80c796915] = true;\r\n        whitelist[0x3b90c92c9F37bC37e8C3Ce5E7B9be677E4766DC4] = true;\r\n        whitelist[0xE96E7353fE78AB94D1B43417E21ebC5af985F41A] = true;\r\n        whitelist[0x963D961b4F18dB19d285F44e6De8D77BD457D7D6] = true;\r\n        whitelist[0x63e5B223A8D880D60bfFeE57975C37781a419E63] = true;\r\n        whitelist[0xdAF934FeCd9268BA8a7c06Df8d232Ac103a4f627] = true;\r\n        whitelist[0xEA4EeA0c25053323D343356c2D0fa3bC40c2Fe7B] = true;\r\n        whitelist[0xF5C83A480013191c15Dc12Ef2e22ad93ae6738f6] = true;\r\n        whitelist[0xDDbA8aE65292565625bd7F026adc478Ed22b4d69] = true;\r\n        whitelist[0xE879680B1bC9C7C2984B2f1388f4De83E6e3B250] = true;\r\n        whitelist[0xb9B6a2c155C0054db0b67e98fA4E855cBb9586f2] = true;\r\n        whitelist[0x3AdB1ba3B077e590947E33Fd23FB7cb4d868B332] = true;\r\n        whitelist[0x7111A80e1128e50DD8F3cF376E1c48b34596F9D8] = true;\r\n        whitelist[0x28D02B415d2FcA7D5A0fD91888289f950bb578A4] = true;\r\n        whitelist[0xe76e9885c47F9Dc95013D41d5E9A1a9764dD0bC2] = true;\r\n        whitelist[0xfC0e20301eDCF4c44eFA3685B359bcaC64EAD609] = true;\r\n        whitelist[0xf43745801132dce8d6967880526B6Ab8EB031E97] = true;\r\n        whitelist[0xC274362c1E85834Eb8387C18168C01aaEe2B00d7] = true;\r\n        whitelist[0xa3874d11FF2608dc04497e4150E0879936aCEc1D] = true;\r\n        whitelist[0xb4aF8ADBB27310B4d6B5C6053936E039Caa72e4D] = true;\r\n        whitelist[0x06C8eFE325b53DbBE568E71C1409BcB48216d3eA] = true;\r\n        whitelist[0xdC28750295EE229D2a3d8975F8D83B0CDEDcFE03] = true;\r\n        whitelist[0xe6181bDb6e75ccCa82D2e7C105F26DC67090099a] = true;\r\n        whitelist[0x2F64Faef236f8Eaf7738e9d3288E982928B0a73d] = true;\r\n        whitelist[0x18C345fbd441CfA3138FcAe8390C04024EAd8C9a] = true;\r\n        whitelist[0xf8cd77CbbE5571Cd6Ab01Ac5BD04fDAaB78bB879] = true;\r\n        whitelist[0xb7fc44237eE35D7b533037cbA2298E54c3d59276] = true;\r\n        whitelist[0x185d38D04b3e52811a5f010ec5A8E0435aBD0bBc] = true;\r\n        whitelist[0xc0D3a8d939d8653F0Fd8fE7a0646DD3884293466] = true;\r\n        whitelist[0x0B82CcC284ACcC1F8eCaC32FCd30971B2a9C3940] = true;\r\n        whitelist[0xD8F8C01bf25B9620ba033384E149CAA73875d0D0] = true;\r\n        whitelist[0xD492aFF2A83d9B73EFBcC29C707a6756F6905e87] = true;\r\n        whitelist[0xAD000B7D6344458e3c821A029bF6cB997835FA13] = true;\r\n        whitelist[0x959575e3B3D6f5ADB18eC72Fb764Df05694a59F5] = true;\r\n        whitelist[0xF872Ea3e3BC2d9EFcb660dE497A6F1c50E4ad25D] = true;\r\n        whitelist[0x77a05DB77AB91bfEF29497596DE47AC8608A2b1d] = true;\r\n        whitelist[0x71FF1934C6e7C846561A8b17A18BA279736Cf9f4] = true;\r\n        whitelist[0x443C84B232808a6A99DEeCF1d7c0bdE14Ff9f0a0] = true;\r\n        whitelist[0x417a1662214fC35bfF661598C7dDc5C378688722] = true;\r\n        whitelist[0xEB0756B7C7F6077Ae3A2c26eab2205B48dE2fa12] = true;\r\n        whitelist[0x24857DFa7200358235fa534dc418cb5F3B5433e1] = true;\r\n        whitelist[0xc41879f97f85F43Ab78D4e45608f2Daf7c8E477E] = true;\r\n        whitelist[0xdB6C038FBa7E192a5706992bEcD5DC7956B80497] = true;\r\n        whitelist[0x49010C49DC04965494da05Da16D028A76977D97F] = true;\r\n        whitelist[0xE537c5DcD0eC49Ca144b0e38554feed3C5D09d6f] = true;\r\n        whitelist[0xeb42523A092CeaFb6b5b52b0a88d3F88154A3494] = true;\r\n        whitelist[0x6b0ABF7fcaa10EBAd592409d931571306B875CF4] = true;\r\n        whitelist[0x716C9cC35607040f54b9232D35a2871F46894F58] = true;\r\n        whitelist[0x2f442C704c3D4Bd081531175Ce05C2C88603ce09] = true;\r\n        whitelist[0x90a83be74d75F293232B949f69717e9fB693fec1] = true;\r\n        whitelist[0xD453FaC4F90af5c73e9eFaD44Da3AF54A3FAd266] = true;\r\n        whitelist[0x21699F05cd7FAf2165512703af577afaDDA0458f] = true;\r\n        whitelist[0xf5f165910e11496C2d1B3D46319a5A07f09Bf2D9] = true;\r\n        whitelist[0x829b41AFa6414f7c15f470eDffE80B919a07ba54] = true;\r\n        whitelist[0xC135eb7D124A7b97a277dF76522b396548bc3f3A] = true;\r\n        whitelist[0x2B3352e94EB8bCC46391d89ec7A8C30D352027f8] = true;\r\n        whitelist[0xbf6aA73698750F23e4EF4dE161BfB8e65E30d27D] = true;\r\n        whitelist[0x0F15F75C491aeaf1cb8b0BA627e49C01e4948bbc] = true;\r\n        whitelist[0x3FFC8b9721f96776beF8468f48F65E0ca573fcF2] = true;\r\n        whitelist[0x9DC6A59a9Eee821cE178f0aaBE1880874d48eca1] = true;\r\n        whitelist[0x722E895A12d2A11BE99ed69dBc1FEdbB9F3Cd8fe] = true;\r\n        whitelist[0xbd9CE5C6F04664d8097b7eA3375Abe09C489DaE7] = true;\r\n        whitelist[0x35aa9F96639F04C6Eb4318d9ba1e5EE17ec6E769] = true;\r\n        whitelist[0xAB0b73a67fDAbC8042e58f44CfAfF309638556ED] = true;\r\n        whitelist[0x0d4f0f044Dc5E2B059F11c6A5024D97e05E8F85E] = true;\r\n        whitelist[0x4fbCd2F65051B96EfC4262d6afEffc04d21d5bF2] = true;\r\n        whitelist[0x336d4aFD4c1e0B82a2Bb38859C234c54eDF0a983] = true;\r\n        whitelist[0xE443624fFAcD5d26ACd38488ceE8A395443e44F3] = true;\r\n        whitelist[0x9F533382024F02632C832EA2B66F4Bbb1DBc4087] = true;\r\n        whitelist[0x13537B154FAF1bc43De663a52E51F092718328Ed] = true;\r\n        whitelist[0xF00991B79D28e35322DD9975738566Cc6FAcb84E] = true;\r\n        whitelist[0xe0d3C29Cf08c20cdA16823F1722380a90D4e1A3F] = true;\r\n        whitelist[0x8303c76A8174EB5B5C5C9c320cE92f625A85eac2] = true;\r\n        whitelist[0xf916D5D0310BFCD0D9B8c43D0a29070670D825f9] = true;\r\n        whitelist[0xFa75905a479d1d69BAD098b9Ed82af8844Fb23B4] = true;\r\n        whitelist[0xf63370F0a9C09d53e1A410181BD80831934EfB19] = true;\r\n        whitelist[0x8c2682E403B1Be886e59315c4C3c66468f2F1a10] = true;\r\n        whitelist[0xC8bF8c55224c4ce61CB92F4e8E2EB0209B0Bf25D] = true;\r\n        whitelist[0x1A8a67603eacb511b6AAd692061Bb8184Bf0C5d1] = true;\r\n        whitelist[0x8Cc7B3Bb008799a76cA9a886f1917Ce7bE3e25A0] = true;\r\n        whitelist[0x69cD50bE56604f940cd444182dB1bAe241569204] = true;\r\n        whitelist[0x3EfA2D0C9929ee7D66Cc61c899996E8673A6dAb8] = true;\r\n        whitelist[0xEbc3C19ae48978822d00eBb4B8532d2ec0E07598] = true;\r\n        whitelist[0x790E9f425Ce7991322ddaF9D7BaE1129BD680868] = true;\r\n        whitelist[0x3D635158A7FbC164b2170eC05083313de9ADDf72] = true;\r\n        whitelist[0x6f158C7DdAeb8594d36C8869bee1B3080a6e5317] = true;\r\n        whitelist[0x4E32EBe322b4743aDc6c27f8B66fCD4D539F2045] = true;\r\n        whitelist[0xFfC041B1c734f8bC0502A9Fc0d7c35AB437C416d] = true;\r\n        whitelist[0xCA3e9A1102cAa617635Af1eAe757c255D5017278] = true;\r\n        whitelist[0xa5A52a6e8f911E01047C389C56da31cd6B828840] = true;\r\n        whitelist[0xd056a5fb273359EC4a3B45A3F98432C580F31d56] = true;\r\n        whitelist[0xA94b40c53432f0576E64873CE1CEAd1aae62Fc90] = true;\r\n        whitelist[0x8AcC5677F98b86c407BFA7861f53857430Ba3904] = true;\r\n        whitelist[0x90E72eFBD7a646453D7e3A1f3c4Ae5220c414EAb] = true;\r\n        whitelist[0x6659F315FB55CC93f5A25CcdD0edF3A73B923308] = true;\r\n        whitelist[0xDA567f1D3f131985F779c88AD8dBB35E6a65A00c] = true;\r\n        whitelist[0x749BF5e8DE4fb44f14dE3B1498852dc0471bE8a8] = true;\r\n        whitelist[0xE96D65Ec7C8856114878300697a3e5052de194ff] = true;\r\n        whitelist[0xe0A21FE64FF987e0518204bfC6451Bcb265DDBBc] = true;\r\n        whitelist[0xAacC4eA6188fb9d2F8FFeE395fd4a75F7e5518B3] = true;\r\n        whitelist[0x52217443E3fBed2DdF2364F8E174deC88a72b3a6] = true;\r\n        whitelist[0x184b44Fd51bECC7B547f8268E39d9126983826f8] = true;\r\n        whitelist[0xd838a891E891d9E59942a5d04d26B1b67a0e6779] = true;\r\n        whitelist[0x9e353fbdC3eC7290290BdA31a8001cb609858adf] = true;\r\n        whitelist[0xad7d7000dcC2122416f5B314C557704084E3D37D] = true;\r\n        whitelist[0x2670fdB57EEFfd47cD6e90067bDd54e5EF79e727] = true;\r\n        whitelist[0x0F11CF7894dcC97A9D30Be39f0d04720Dc5d5531] = true;\r\n        whitelist[0xF29680cFb7893CF142C603580604D748A7De6e65] = true;\r\n        whitelist[0x9b0726e95e72eB6f305b472828b88D2d2bDD41C7] = true;\r\n        whitelist[0x3051ca84FC32d731f3AeC559FC8a1EE343ab3a97] = true;\r\n        whitelist[0x2bB5f56470F26B2518F56B4F32e9a33c3562457D] = true;\r\n        whitelist[0x85Dd36038EacbEEdF785927CDE2Ac47Fdb581032] = true;\r\n        whitelist[0x8043D8Aee89D74F6611B6E09c811A45b05b19D0E] = true;\r\n        whitelist[0x687ea228eb60a22c2a9145857435b988F58c3a63] = true;\r\n        whitelist[0xA9382E2F2E3fead01b260B3BD4E1023cE48EF265] = true;\r\n        whitelist[0xb825Ac19f7ee811190D94D50a8D2dEc1BE9cFeDF] = true;\r\n        whitelist[0xc482b3fA06380359462972a8FC128c66505231Dd] = true;\r\n        whitelist[0x9Ae5FFc3923a55bC32Ff4A38812bba629261e03A] = true;\r\n        whitelist[0x515afF85b6A289ed75713D6Ff3addf7bf57F0810] = true;\r\n        whitelist[0x7Bb9635e750a100d8c73Cf88114175b1e346d495] = true;\r\n        whitelist[0x3485F724F8f562a417c8405a70A430DFC0Ea6044] = true;\r\n        whitelist[0xfdCC9C3DEFd76175457759d21ec7bebfa7614189] = true;\r\n        whitelist[0x7b88aD278Cd11506661516E544EcAA9e39F03aF0] = true;\r\n        whitelist[0xccD0466227327941EAc05e1D7ee7524DebfC4d20] = true;\r\n        whitelist[0x5485dAC30911d3BBE51bC61b84f723160379D49f] = true;\r\n        whitelist[0xDA2e1aBBf7c35BCE835AeeF4fbfc1D6e84Dd8A19] = true;\r\n        whitelist[0x781dC05Bb477A936865516F928DC12016c992177] = true;\r\n        whitelist[0x8A6c29f7fE583aD69eCD4dA5A6ab49f6c850B148] = true;\r\n        whitelist[0x3151335A0f4Dd51fc553c39d3003AcBb59568f09] = true;\r\n        whitelist[0x85c7dcbFCf50Ca65817Bb629fd580B79994e1F7a] = true;\r\n        whitelist[0xe5963480aCE624A003cb1645C75eF468d7d533C5] = true;\r\n        whitelist[0x72714f174f24951bA5336534A2AB4f223Fb909a3] = true;\r\n        whitelist[0x3B09545fF83844298EFf767eaaD95D66Dc852D8A] = true;\r\n        whitelist[0xbb35A21De58AE57526000df4916fa09948534671] = true;\r\n        whitelist[0x6536f90f5cA05166B98DAD513B02C237F4751011] = true;\r\n        whitelist[0xA66230f6A34Db307C443f4818E77F541fc67d7E3] = true;\r\n        whitelist[0xCBBE17De5e61e746DCd43E8D4A072505d0747FeA] = true;\r\n        whitelist[0x46B8FfC41F26cd896E033942cAF999b78d10c277] = true;\r\n        whitelist[0xe14252BFBC36a0F0B0599c3F1Adb85E00432d152] = true;\r\n        whitelist[0xF93eD4Fe97eB8A2508D03222a28E332F1C89B0eD] = true;\r\n        whitelist[0x37f48060490EEADcE18Da8965139b4Af6AC1b3C6] = true;\r\n        whitelist[0x69Bb92BF0641Df61783EA18c01f96656424bD76C] = true;\r\n        whitelist[0xc19baA07F2E0445504ACD571E8e4A3097C96628A] = true;\r\n        whitelist[0x035000529CffE9f04DB8E81B7A53807E63EeaC12] = true;\r\n        whitelist[0x8b5E270C19eb8f28050a561D0bE08690cc33e73D] = true;\r\n        whitelist[0x127bBc2904Dbb53Cf601782fC12fa4fD633394E4] = true;\r\n        whitelist[0x09822341eD88aEeA91BC06eAC6B16bcD091d9241] = true;\r\n        whitelist[0x3ebBe77bC7ae8655b78E678ef9Cde01925ee59AD] = true;\r\n        whitelist[0xeD2a45611B967Df5647a17dFeaa0DEc40806De54] = true;\r\n        whitelist[0x9043c7c4f4B57588DBb4dD2d84ee12D2ba85B101] = true;\r\n        whitelist[0xcB309AaBD74E66b6392002e07696875299Dd6D13] = true;\r\n        whitelist[0x19dfdc194Bb5CF599af78B1967dbb3783c590720] = true;\r\n        whitelist[0xe0027F5BF87241fA8e8b7F31Da691686f3dd1D49] = true;\r\n        whitelist[0xB534b564dDDe2fF68B4698cC06943675482ad2C1] = true;\r\n        whitelist[0x8744465Ab472A103841D8a9d21D9F06aAfcba776] = true;\r\n        whitelist[0x884FA72dF82c658Bafb98E79d9B52c02D5c84B68] = true;\r\n        whitelist[0x36E0CAF9d18301104E6c9d5F1Db9e3cC6efD6ac3] = true;\r\n        whitelist[0x37042Bd03c06B19aedB94A4e2157AB9B0878c016] = true;\r\n        whitelist[0xCdD607DECbe9b714F6E032bA478830a521753233] = true;\r\n        whitelist[0x641d35823e1342b5d7B541b1c701c3d4A41F82ad] = true;\r\n        whitelist[0xE5DD12F8ab12a4FB51695Cd1c01A9318a2746357] = true;\r\n        whitelist[0x808e2cb9abEE589093F181cdCa4461ffA9769545] = true;\r\n        whitelist[0x70c05eea4E71a5ecDee5EC1d1Fc3F8843c320eFa] = true;\r\n        whitelist[0x59d7b684bced2a28FedebFc09ce3A795F49a4620] = true;\r\n        whitelist[0x5eD48eCbE5ea89720f21147080e7088fA6a8fC0D] = true;\r\n        whitelist[0x669fD7eeDa4CAb02849fc96532Bf2Dda0786E967] = true;\r\n        whitelist[0xEFAC8617928e662D607c77Bf777F91d7908424B2] = true;\r\n    }\r\n    \r\n    function testMint() public onlyOwner {\r\n        doki.mint(address(this), 1);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dokiAmount\",\"type\":\"uint256\"}],\"name\":\"BuyDokiSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeToNotOnlyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dokiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLastSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setDokiPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DokiPresale","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000370d7f82131adc0bb0e87869ee8293409272a111","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d5045699c4456e3a196371cfb0d003b806ae697bcc36c5e22add0a760e62618b"}]}