{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/roles/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"role already has the account\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"role dosen't have the account\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/erc/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-165\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/erc/ERC173.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\ninterface IERC173 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\ncontract ERC173 is IERC173, ERC165  {\r\n    address private _owner;\r\n\r\n    constructor() public {\r\n        _registerInterface(0x7f5828d0);\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner() {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        address previousOwner = owner();\r\n\t_owner = _newOwner;\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/roles/Operatable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Operatable is ERC173 {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n    Roles.Role private operators;\r\n\r\n    constructor() public {\r\n        operators.add(msg.sender);\r\n        _paused = false;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Must be operator\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOperator() {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return operators.has(account);\r\n    }\r\n\r\n    function addOperator(address account) public onlyOperator() {\r\n        operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOperator() {\r\n        operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function pause() public onlyOperator() whenNotPaused() {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOperator() whenPaused() {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/roles/Withdrawable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Withdrawable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WithdrawerAdded(address indexed account);\r\n    event WithdrawerRemoved(address indexed account);\r\n\r\n    Roles.Role private withdrawers;\r\n\r\n    constructor() public {\r\n        withdrawers.add(msg.sender);\r\n    }\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(isWithdrawer(msg.sender), \"Must be withdrawer\");\r\n        _;\r\n    }\r\n\r\n    function isWithdrawer(address account) public view returns (bool) {\r\n        return withdrawers.has(account);\r\n    }\r\n\r\n    function addWithdrawer(address account) public onlyWithdrawer() {\r\n        withdrawers.add(account);\r\n        emit WithdrawerAdded(account);\r\n    }\r\n\r\n    function removeWithdrawer(address account) public onlyWithdrawer() {\r\n        withdrawers.remove(account);\r\n        emit WithdrawerRemoved(account);\r\n    }\r\n\r\n    function withdrawEther() public onlyWithdrawer() {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libraries/Uint256.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Uint256 {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"division by 0\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"modulo by 0\");\r\n        return a % b;\r\n    }\r\n\r\n    function toString(uint256 a) internal pure returns (string memory) {\r\n        bytes32 retBytes32;\r\n        uint256 len = 0;\r\n        if (a == 0) {\r\n            retBytes32 = \"0\";\r\n            len++;\r\n        } else {\r\n            uint256 value = a;\r\n            while (value > 0) {\r\n                retBytes32 = bytes32(uint256(retBytes32) / (2 ** 8));\r\n                retBytes32 |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\r\n                value /= 10;\r\n                len++;\r\n            }\r\n        }\r\n\r\n        bytes memory ret = new bytes(len);\r\n        uint256 i;\r\n\r\n        for (i = 0; i < len; i++) {\r\n            ret[i] = retBytes32[i];\r\n        }\r\n        return string(ret);\r\n    }\r\n}\r\n\r\n// File: contracts/SPLSPLGatewayV1.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ninterface GuildAsset {\r\n    function getTotalVolume(uint16 _guildType) external view returns (uint256);\r\n}\r\n\r\ninterface SPLGuildPool {\r\n    function addEthToGuildPool(uint16 _guildType, address _purchaseBy) external payable;\r\n}\r\n\r\ninterface IngameMoney {\r\n    function hashTransactedAt(bytes32 _hash) external view returns(uint256);\r\n    function buy(address payable _user, address payable _referrer, uint256 _referralBasisPoint, uint16 _guildType, bytes calldata _signature, bytes32 _hash) external payable;\r\n}\r\n\r\ncontract SPLSPLGatewayV1 is Operatable, Withdrawable, IngameMoney {\r\n    using Uint256 for uint256;\r\n    struct Campaign {\r\n        uint8 purchaseType;\r\n        uint8 subPurchaseType;\r\n        uint8 proxyPurchaseType;\r\n    }\r\n\r\n    uint8 constant PURCHASE_NORMAL = 0;\r\n    uint8 constant PURCHASE_ETH_BACK = 1;\r\n    uint8 constant PURCHASE_UP20 = 2;\r\n    uint8 constant PURCHASE_REGULAR = 3;\r\n    uint8 constant PURCHASE_ETH_BACK_UP20 = 4;\r\n\r\n    Campaign public campaign;\r\n\r\n    mapping(uint256 => bool) public payableOptions;\r\n    address public validater;\r\n\r\n    GuildAsset public guildAsset;\r\n    SPLGuildPool public guildPool;\r\n    uint256 public guildBasisPoint;\r\n\r\n    uint256 constant BASE = 10000;\r\n    uint256 private nonce;\r\n    uint16 public chanceDenom;\r\n    uint256 public ethBackBasisPoint;\r\n    bytes private salt;\r\n    mapping(bytes32 => uint256) private _hashTransactedAt;\r\n\r\n    event Sold(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 purchaseType,\r\n        uint256 grossValue,\r\n        uint256 referralValue,\r\n        uint256 guildValue,\r\n        uint256 netValue,\r\n        uint16 indexed guildType\r\n    );\r\n\r\n    event CampaignUpdated(\r\n        uint8 purchaseType,\r\n        uint8 subPurchaseType,\r\n        uint8 proxyPurchaseType\r\n    );\r\n\r\n    event GuildBasisPointUpdated(\r\n        uint256 guildBasisPoint\r\n    );\r\n\r\n    constructor(\r\n        address _validater,\r\n        address _guildAssetAddress,\r\n        address payable _guildPoolAddress\r\n    ) public payable {\r\n        setValidater(_validater);\r\n        setGuildAssetAddress(_guildAssetAddress);\r\n        setGuildPoolAddress(_guildPoolAddress);\r\n        setCampaign(0, 0, 0);\r\n        updateGuildBasisPoint(1500);\r\n        updateEthBackBasisPoint(5000);\r\n        updateChance(25);\r\n        salt = bytes(\"iiNg4uJulaa4Yoh7\");\r\n\r\n        nonce = 222;\r\n\r\n        // payableOptions[0] = true;\r\n        payableOptions[0.03 ether] = true;\r\n        payableOptions[0.05 ether] = true;\r\n        payableOptions[0.1 ether] = true;\r\n        payableOptions[0.5 ether] = true;\r\n        payableOptions[1 ether] = true;\r\n        payableOptions[5 ether] = true;\r\n        payableOptions[10 ether] = true;\r\n    }\r\n\r\n    function setValidater(address _varidater) public onlyOperator() {\r\n        validater = _varidater;\r\n    }\r\n\r\n    function setPayableOption(uint256 _option, bool desired) external onlyOperator() {\r\n        payableOptions[_option] = desired;\r\n    }\r\n\r\n    function setCampaign(\r\n        uint8 _purchaseType,\r\n        uint8 _subPurchaseType,\r\n        uint8 _proxyPurchaseType\r\n    )\r\n        public\r\n        onlyOperator()\r\n    {\r\n        campaign = Campaign(_purchaseType, _subPurchaseType, _proxyPurchaseType);\r\n        emit CampaignUpdated(_purchaseType, _subPurchaseType, _proxyPurchaseType);\r\n    }\r\n\r\n    function setGuildAssetAddress(address _guildAssetAddress) public onlyOwner() {\r\n        guildAsset = GuildAsset(_guildAssetAddress);\r\n    }\r\n\r\n    function setGuildPoolAddress(address payable _guildPoolAddress) public onlyOwner() {\r\n        guildPool = SPLGuildPool(_guildPoolAddress);\r\n    }\r\n\r\n    function updateGuildBasisPoint(uint256 _newGuildBasisPoint) public onlyOwner() {\r\n        guildBasisPoint = _newGuildBasisPoint;\r\n        emit GuildBasisPointUpdated(\r\n            guildBasisPoint\r\n        );\r\n    }\r\n\r\n    function updateChance(uint16 _newchanceDenom) public onlyOperator() {\r\n        chanceDenom = _newchanceDenom;\r\n    }\r\n\r\n    function updateEthBackBasisPoint(uint256 _ethBackBasisPoint) public onlyOperator() {\r\n        ethBackBasisPoint = _ethBackBasisPoint;\r\n    }\r\n\r\n    function buy(\r\n        address payable _user,\r\n        address payable _referrer,\r\n        uint256 _referralBasisPoint,\r\n        uint16 _guildType,\r\n        bytes memory _signature,\r\n        bytes32 _hash\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused()\r\n    {\r\n        require(_referralBasisPoint + ethBackBasisPoint + guildBasisPoint <= BASE, \"Invalid basis points\");\r\n        require(payableOptions[msg.value], \"Invalid msg.value\");\r\n        require(validateSig(encodeData(_user, _referrer, _referralBasisPoint, _guildType), _signature), \"Invalid signature\");\r\n        if (_hash != bytes32(0)) {\r\n            recordHash(_hash);\r\n        }\r\n        uint8 purchaseType = campaign.proxyPurchaseType;\r\n        uint256 netValue = msg.value;\r\n        uint256 referralValue = _referrerBack(_referrer, _referralBasisPoint);\r\n        uint256 guildValue = _guildPoolBack(_guildType);\r\n        netValue = msg.value.sub(referralValue).sub(guildValue);\r\n\r\n        emit Sold(\r\n            _user,\r\n            _referrer,\r\n            purchaseType,\r\n            msg.value,\r\n            referralValue,\r\n            guildValue,\r\n            netValue,\r\n            _guildType\r\n        );\r\n    }\r\n\r\n    function buySPL(\r\n        address payable _referrer,\r\n        uint256 _referralBasisPoint,\r\n        uint16 _guildType,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        require(_referralBasisPoint + ethBackBasisPoint + guildBasisPoint <= BASE, \"Invalid basis points\");\r\n        require(payableOptions[msg.value], \"Invalid msg.value\");\r\n        require(validateSig(encodeData(msg.sender, _referrer, _referralBasisPoint, _guildType), _signature), \"Invalid signature\");\r\n\r\n        uint8 purchaseType = campaign.purchaseType;\r\n        uint256 netValue = msg.value;\r\n        uint256 referralValue = 0;\r\n        uint256 guildValue = 0;\r\n\r\n        if (purchaseType == PURCHASE_ETH_BACK || purchaseType == PURCHASE_ETH_BACK_UP20) {\r\n            if (getRandom(chanceDenom, nonce, msg.sender) == 0) {\r\n                uint256 ethBackValue = _ethBack(msg.sender, ethBackBasisPoint);\r\n                netValue = netValue.sub(ethBackValue);\r\n            } else {\r\n                purchaseType = campaign.subPurchaseType;\r\n                referralValue = _referrerBack(_referrer, _referralBasisPoint);\r\n                guildValue = _guildPoolBack(_guildType);\r\n                netValue = msg.value.sub(referralValue).sub(guildValue);\r\n            }\r\n            nonce++;\r\n        } else {\r\n            referralValue = _referrerBack(_referrer, _referralBasisPoint);\r\n            guildValue = _guildPoolBack(_guildType);\r\n            netValue = msg.value.sub(referralValue).sub(guildValue);\r\n        }\r\n\r\n        emit Sold(\r\n            msg.sender,\r\n            _referrer,\r\n            purchaseType,\r\n            msg.value,\r\n            referralValue,\r\n            guildValue,\r\n            netValue,\r\n            _guildType\r\n        );\r\n    }\r\n\r\n    function hashTransactedAt(bytes32 _hash) public view returns (uint256) {\r\n        return _hashTransactedAt[_hash];\r\n    }\r\n\r\n    function recordHash(bytes32 _hash) internal {\r\n        require(_hashTransactedAt[_hash] == 0, \"The hash is already transacted\");\r\n        _hashTransactedAt[_hash] = block.number;\r\n    }\r\n\r\n    function getRandom(uint16 max, uint256 _nonce, address _sender) public view returns (uint16) {\r\n        return uint16(\r\n            bytes2(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        blockhash(block.number-1),\r\n                        _sender,\r\n                        _nonce,\r\n                        salt\r\n                    )\r\n                )\r\n            )\r\n        ) % max;\r\n    }\r\n\r\n    function _ethBack(address payable _buyer, uint256 _ethBackBasisPoint) internal returns (uint256) {\r\n        uint256 ethBackValue = msg.value.mul(_ethBackBasisPoint).div(BASE);\r\n        _buyer.transfer(ethBackValue);\r\n        return ethBackValue;\r\n    }\r\n\r\n    function _guildPoolBack(uint16 _guildType) internal returns (uint256) {\r\n        if(_guildType == 0) {\r\n            return 0;\r\n        }\r\n        require(guildAsset.getTotalVolume(_guildType) != 0, \"Invalid _guildType\");\r\n\r\n        uint256 guildValue;\r\n        guildValue = msg.value.mul(guildBasisPoint).div(BASE);\r\n        guildPool.addEthToGuildPool.value(guildValue)(_guildType, msg.sender);\r\n        return guildValue;\r\n    }\r\n\r\n    function _referrerBack(address payable _referrer, uint256 _referralBasisPoint) internal returns (uint256) {\r\n        if(_referrer == address(0x0) || _referrer == msg.sender) {\r\n            return 0;\r\n        }\r\n        uint256 referralValue = msg.value.mul(_referralBasisPoint).div(BASE);\r\n        _referrer.transfer(referralValue);\r\n        return referralValue;\r\n    }\r\n\r\n    function encodeData(address _sender, address _referrer, uint256 _referralBasisPoint, uint16 _guildType) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                            _sender,\r\n                            _referrer,\r\n                            _referralBasisPoint,\r\n                            _guildType\r\n                            )\r\n                    );\r\n    }\r\n\r\n    function validateSig(bytes32 _message, bytes memory _signature) public view returns (bool) {\r\n        require(validater != address(0), \"validater must be set\");\r\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);\r\n        return (signer == validater);\r\n    }\r\n\r\n    function recover(bytes32 _message, bytes memory _signature) public pure returns (address) {\r\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);\r\n        return signer;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guildAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_guildPoolAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"subPurchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proxyPurchaseType\",\"type\":\"uint8\"}],\"name\":\"CampaignUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guildBasisPoint\",\"type\":\"uint256\"}],\"name\":\"GuildBasisPointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grossValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guildValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"guildType\",\"type\":\"uint16\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WithdrawerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WithdrawerRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buySPL\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"subPurchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"proxyPurchaseType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chanceDenom\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_guildType\",\"type\":\"uint16\"}],\"name\":\"encodeData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBackBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guildAsset\",\"outputs\":[{\"internalType\":\"contract GuildAsset\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guildBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guildPool\",\"outputs\":[{\"internalType\":\"contract SPLGuildPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"hashTransactedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWithdrawer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_purchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_subPurchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_proxyPurchaseType\",\"type\":\"uint8\"}],\"name\":\"setCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guildAssetAddress\",\"type\":\"address\"}],\"name\":\"setGuildAssetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_guildPoolAddress\",\"type\":\"address\"}],\"name\":\"setGuildPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"desired\",\"type\":\"bool\"}],\"name\":\"setPayableOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_varidater\",\"type\":\"address\"}],\"name\":\"setValidater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newchanceDenom\",\"type\":\"uint16\"}],\"name\":\"updateChance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethBackBasisPoint\",\"type\":\"uint256\"}],\"name\":\"updateEthBackBasisPoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGuildBasisPoint\",\"type\":\"uint256\"}],\"name\":\"updateGuildBasisPoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validateSig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SPLSPLGatewayV1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af1d50904a05ebe26ecb17333161be2971eb4a69000000000000000000000000554ac2fe4d5ebc937fa835f127125952036c90c5000000000000000000000000c55b94937eec4284c5342f3359c336b02798e589","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://53c5eae11ef97f2ac180d027b5d2814c35052cf283b2d69c705cbb3adb3ea686"}]}