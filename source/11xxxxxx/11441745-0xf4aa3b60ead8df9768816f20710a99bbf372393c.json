{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/ISaffronBase.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface ISaffronBase {\r\n  enum Tranche {S, AA, A}\r\n  enum LPTokenType {dsec, principal}\r\n\r\n  // Store values (balances, dsec, vdsec) with TrancheUint256\r\n  struct TrancheUint256 {\r\n    uint256 S;\r\n    uint256 AA;\r\n    uint256 A;\r\n  }\r\n\r\n  struct epoch_params {\r\n    uint256 start_date;       // Time when the platform launched\r\n    uint256 duration;         // Duration of epoch\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ISaffronStrategy.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\ninterface ISaffronStrategy is ISaffronBase{\r\n  function deploy_all_capital() external;\r\n  function select_adapter_for_liquidity_removal() external returns(address);\r\n  function add_adapter(address adapter_address) external;\r\n  function add_pool(address pool_address) external;\r\n  function delete_adapters() external;\r\n  function set_governance(address to) external;\r\n  function get_adapter_address(uint256 adapter_index) external view returns(address);\r\n}\r\n\r\n// File: contracts/interfaces/ISaffronPool.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface ISaffronPool is ISaffronBase {\r\n  function add_liquidity(uint256 amount, Tranche tranche) external;\r\n  function remove_liquidity(address v1_dsec_token_address, uint256 dsec_amount, address v1_principal_token_address, uint256 principal_amount) external;\r\n  function get_base_asset_address() external view returns(address);\r\n  function hourly_strategy(address adapter_address) external;\r\n  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) external;\r\n  function set_governance(address to) external;\r\n  function get_epoch_cycle_params() external view returns (uint256, uint256);\r\n  function shutdown() external;\r\n}\r\n\r\n// File: contracts/interfaces/ISaffronAdapter.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface ISaffronAdapter is ISaffronBase {\r\n    function deploy_capital(uint256 amount) external;\r\n    function return_capital(uint256 base_asset_amount, address to) external;\r\n    function approve_transfer(address addr,uint256 amount) external;\r\n    function get_base_asset_address() external view returns(address);\r\n    function set_base_asset(address addr) external;\r\n    function get_holdings() external returns(uint256);\r\n    function get_interest(uint256 principal) external returns(uint256);\r\n    function set_governance(address to) external;\r\n}\r\n\r\n// File: contracts/lib/IERC20.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Address.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    // solhint-disable-next-line max-line-length\r\n    require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) { // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/lib/Context.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/SFI.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n\r\ncontract SFI is ERC20 {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public governance;\r\n  address public SFI_minter;\r\n  uint256 public MAX_TOKENS = 100000 ether;\r\n\r\n  constructor (string memory name, string memory symbol) ERC20(name, symbol) {\r\n    // Initial governance is Saffron Deployer\r\n    governance = msg.sender;\r\n  }\r\n\r\n  function mint_SFI(address to, uint256 amount) public {\r\n    require(msg.sender == SFI_minter, \"must be SFI_minter\");\r\n    require(this.totalSupply() + amount < MAX_TOKENS, \"cannot mint more than MAX_TOKENS\");\r\n    _mint(to, amount);\r\n  }\r\n\r\n  function set_minter(address to) external {\r\n    require(msg.sender == governance, \"must be governance\");\r\n    SFI_minter = to;\r\n  }\r\n\r\n  function set_governance(address to) external {\r\n    require(msg.sender == governance, \"must be governance\");\r\n    governance = to;\r\n  }\r\n\r\n  event ErcSwept(address who, address to, address token, uint256 amount);\r\n  function erc_sweep(address _token, address _to) public {\r\n    require(msg.sender == governance, \"must be governance\");\r\n\r\n    IERC20 tkn = IERC20(_token);\r\n    uint256 tBal = tkn.balanceOf(address(this));\r\n    tkn.safeTransfer(_to, tBal);\r\n\r\n    emit ErcSwept(msg.sender, _to, _token, tBal);\r\n  }\r\n}\r\n\r\n// File: contracts/SaffronStrategy.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// v0: all functions returns the only adapter that exists\r\n// v1: evaluate adapters by interest rate and return the best one possible per currency\r\ncontract SaffronStrategy is ISaffronStrategy {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public governance;\r\n  address public team_address;\r\n  address public SFI_address;\r\n  address[] public pools;\r\n  address[] public adapters;\r\n  mapping(address=>uint256) private adapter_indexes;\r\n  mapping(uint256=>address) private adapter_addresses;\r\n  uint256[] public pool_SFI_rewards = [700, 762, 430, 430, 430, 36, 100, 762, 100];\r\n\r\n  // True if epoch has been wound down already\r\n  mapping(uint256=>bool) public epoch_wound_down;\r\n\r\n  uint256 public last_deploy;     // Last run of Hourly Deploy\r\n  uint256 public deploy_interval; // Hourly deploy interval\r\n\r\n  epoch_params public epoch_cycle = epoch_params({\r\n    start_date: 1604239200,   // 11/01/2020 @ 2:00pm (UTC)\r\n    duration:   14 days       // 1210000 seconds\r\n  });\r\n\r\n  constructor(address _sfi_address, address _team_address, bool epoch_cycle_reset) {\r\n    governance = msg.sender;\r\n    team_address = _team_address;\r\n    SFI_address = _sfi_address;\r\n    deploy_interval = 1 hours;\r\n    epoch_cycle.duration = (epoch_cycle_reset ? 30 minutes : 14 days); // Make testing previous epochs easier\r\n    epoch_cycle.start_date = (epoch_cycle_reset ? (block.timestamp) - (3 * epoch_cycle.duration) : 1604239200); // Make testing previous epochs easier\r\n  }\r\n\r\n  // Select best adapter based on APY\r\n  function select_best_adapter(address base_asset_address) public view returns(address) {\r\n    require(base_asset_address != address(0x0), \"can't have an adapter for 0x0 address\");\r\n    return adapters[0]; // v0: only one adapter\r\n  }\r\n\r\n  function wind_down_epoch(uint256 epoch) external {\r\n    require(epoch == 3, \"v1.3: only epoch 3\");\r\n    require(!epoch_wound_down[epoch], \"epoch already wound down\");\r\n    require(team_address == msg.sender, \"must be team\");\r\n    uint256 current_epoch = get_current_epoch();\r\n    require(epoch < current_epoch, \"cannot wind down future epoch\");\r\n    epoch_wound_down[epoch] = true;\r\n\r\n    // Team Funds\r\n    uint256 team_sfi = (10000 * 1 ether) >> epoch;\r\n    SFI(SFI_address).mint_SFI(team_address, team_sfi);\r\n\r\n    // DAI Pool (700 SFI)\r\n    uint256 dSFI = (700 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[0], dSFI);\r\n    ISaffronPool(pools[0]).wind_down_epoch(epoch, dSFI);\r\n\r\n    // SFI/ETH Uniswap LP Pool (762 SFI)\r\n    uint256 lpSFI = (762 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[1], lpSFI);\r\n    ISaffronPool(pools[1]).wind_down_epoch(epoch, lpSFI);\r\n\r\n    // SFI Staking Pool (430 SFI)\r\n    uint256 sSFI = (430 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[2], sSFI);\r\n    ISaffronPool(pools[2]).wind_down_epoch(epoch, sSFI);\r\n\r\n    // SFI/BTSE Uniswap LP Pool (430 SFI)\r\n    uint256 btseSFI = (430 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[3], btseSFI);\r\n    ISaffronPool(pools[3]).wind_down_epoch(epoch, btseSFI);\r\n\r\n    // rSFI Staking Pool (430 SFI)\r\n    uint256 srSFI = (430 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[4], srSFI);\r\n    ISaffronPool(pools[4]).wind_down_epoch(epoch, srSFI);\r\n\r\n    // SFI/GEEQ Uniswap LP Pool (36 SFI)\r\n    uint256 geeqSFI = (36 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[5], geeqSFI);\r\n    ISaffronPool(pools[5]).wind_down_epoch(epoch, geeqSFI);\r\n\r\n    // SFI/ESD Uniswap LP Pool (100 SFI)\r\n    uint256 esdSFI = (100 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[6], esdSFI);\r\n    ISaffronPool(pools[6]).wind_down_epoch(epoch, esdSFI);\r\n\r\n    // SFI/ETH SushiSwap LP Pool (762 SFI)\r\n    uint256 sushiSFI = (762 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[7], sushiSFI);\r\n    ISaffronPool(pools[7]).wind_down_epoch(epoch, sushiSFI);\r\n\r\n    // ibETH/Alpha Pool (100 SFI)\r\n    uint256 ibeSFI = (100 * 1 ether);\r\n    SFI(SFI_address).mint_SFI(pools[8], ibeSFI);\r\n    ISaffronPool(pools[8]).wind_down_epoch(epoch, ibeSFI);\r\n  }\r\n\r\n  function wind_down_pool(uint256 pool, uint256 epoch) external {\r\n    require(msg.sender == team_address, \"must be team\");\r\n    require(epoch == 3, \"v1.3: only epoch 3\");\r\n    uint256 current_epoch = get_current_epoch();\r\n    require(epoch < current_epoch, \"cannot wind down future epoch\");\r\n\r\n    if (pool == uint(-1)) {\r\n      require(!epoch_wound_down[epoch], \"epoch already wound down\");\r\n      require(team_address == msg.sender, \"must be team\");\r\n      epoch_wound_down[epoch] = true;\r\n    }\r\n\r\n    // Team Funds\r\n    uint256 team_sfi = (10000 * 1 ether) >> epoch;\r\n    SFI(SFI_address).mint_SFI(team_address, team_sfi);\r\n\r\n    if (pool == 0) { // DAI Pool (700 SFI)\r\n      uint256 dSFI = (700 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[0], dSFI);\r\n      ISaffronPool(pools[0]).wind_down_epoch(epoch, dSFI);\r\n    }\r\n\r\n    if (pool == 1) { // SFI/ETH Uniswap LP Pool (762 SFI)\r\n      uint256 lpSFI = (762 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[1], lpSFI);\r\n      ISaffronPool(pools[1]).wind_down_epoch(epoch, lpSFI);\r\n    }\r\n\r\n    if (pool == 2) { // SFI Staking Pool (430 SFI)\r\n      uint256 sSFI = (430 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[2], sSFI);\r\n      ISaffronPool(pools[2]).wind_down_epoch(epoch, sSFI);\r\n    }\r\n\r\n    if (pool == 3) { // SFI/BTSE Uniswap LP Pool (430 SFI)\r\n      uint256 btseSFI = (430 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[3], btseSFI);\r\n      ISaffronPool(pools[3]).wind_down_epoch(epoch, btseSFI);\r\n    }\r\n\r\n    if (pool == 4) { // rSFI Staking Pool (430 SFI)\r\n      uint256 srSFI = (430 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[4], srSFI);\r\n      ISaffronPool(pools[4]).wind_down_epoch(epoch, srSFI);\r\n    }\r\n\r\n    if (pool == 5) { // SFI/GEEQ Uniswap LP Pool (36 SFI)\r\n      uint256 geeqSFI = (36 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[5], geeqSFI);\r\n      ISaffronPool(pools[5]).wind_down_epoch(epoch, geeqSFI);\r\n    }\r\n\r\n    if (pool == 6) { // SFI/ESD Uniswap LP Pool (100 SFI)\r\n      uint256 esdSFI = (100 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[6], esdSFI);\r\n      ISaffronPool(pools[6]).wind_down_epoch(epoch, esdSFI);\r\n    }\r\n\r\n    if (pool == 7) { // SFI/ETH SushiSwap LP Pool (762 SFI)\r\n      uint256 sushiSFI = (762 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[7], sushiSFI);\r\n      ISaffronPool(pools[7]).wind_down_epoch(epoch, sushiSFI);\r\n    }\r\n\r\n    if (pool == 8) { // ibETH/Alpha Pool (20 SFI)\r\n      uint256 ibeSFI = (100 * 1 ether);\r\n      SFI(SFI_address).mint_SFI(pools[8], ibeSFI);\r\n      ISaffronPool(pools[8]).wind_down_epoch(epoch, ibeSFI);\r\n    }\r\n  }\r\n\r\n  // Deploy all capital in pool (funnel 100% of pooled base assets into best adapter)\r\n  function deploy_all_capital() external override {\r\n    require(block.timestamp >= last_deploy + (deploy_interval), \"deploy call too soon\" );\r\n    last_deploy = block.timestamp;\r\n    ISaffronPool pool = ISaffronPool(pools[0]);\r\n    IERC20 base_asset = IERC20(pool.get_base_asset_address());\r\n    if (base_asset.balanceOf(pools[0]) > 0) pool.hourly_strategy(adapters[0]);\r\n  }\r\n\r\n  function v01_final_deploy() external {\r\n    require(msg.sender == governance, \"must be governance\");\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      ISaffronPool pool = ISaffronPool(pools[i]);\r\n      IERC20 base_asset = IERC20(pool.get_base_asset_address());\r\n      if (base_asset.balanceOf(address(pool)) > 0) pool.hourly_strategy(select_best_adapter(address(base_asset)));\r\n      pool.shutdown();\r\n    }\r\n  }\r\n\r\n  // Add adapters to a list of adapters passed in\r\n  function add_adapter(address adapter_address) external override {\r\n    require(msg.sender == governance, \"add_adapter: must be governance\");\r\n    adapter_indexes[adapter_address] = adapters.length;\r\n    adapters.push(adapter_address);\r\n  }\r\n\r\n  // Get an adapter's address by index\r\n  function get_adapter_index(address adapter_address) public view returns(uint256) {\r\n    return adapter_indexes[adapter_address];\r\n  }\r\n\r\n  // Get an adapter's address by index\r\n  function get_adapter_address(uint256 index) external view override returns(address) {\r\n    return address(adapters[index]);\r\n  }\r\n\r\n  function add_pool(address pool_address) external override {\r\n    require(msg.sender == governance, \"add_pool: must be governance\");\r\n    pools.push(pool_address);\r\n  }\r\n\r\n  function delete_adapters() external override {\r\n    require(msg.sender == governance, \"delete_adapters: must be governance\");\r\n    delete adapters;\r\n  }\r\n\r\n  function set_team_address(address to) public {\r\n    require(msg.sender == governance || msg.sender == team_address, \"permission\");\r\n    team_address = to;\r\n  }\r\n\r\n  function set_governance(address to) external override {\r\n    require(msg.sender == governance, \"set_governance: must be governance\");\r\n    governance = to;\r\n  }\r\n\r\n  function select_adapter_for_liquidity_removal() external view override returns(address) {\r\n    return adapters[0]; // v0: only one adapter\r\n  }\r\n  // v1.5 add replace adapter function\r\n  // v1.5 add remove adapter function\r\n\r\n  /*** TIME UTILITY FUNCTIONS ***/\r\n  function get_epoch_end(uint256 epoch) public view returns (uint256) {\r\n    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration));\r\n  }\r\n\r\n  function get_current_epoch() public view returns (uint256) {\r\n    require(block.timestamp > epoch_cycle.start_date, \"before epoch 0\");\r\n    return (block.timestamp - epoch_cycle.start_date) / epoch_cycle.duration;\r\n  }\r\n\r\n  function get_seconds_until_epoch_end(uint256 epoch) public view returns (uint256) {\r\n    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration)).sub(block.timestamp);\r\n  }\r\n\r\n  event ErcSwept(address who, address to, address token, uint256 amount);\r\n  function erc_sweep(address _token, address _to) public {\r\n    require(msg.sender == governance, \"must be governance\");\r\n\r\n    IERC20 tkn = IERC20(_token);\r\n    uint256 tBal = tkn.balanceOf(address(this));\r\n    tkn.safeTransfer(_to, tBal);\r\n\r\n    emit ErcSwept(msg.sender, _to, _token, tBal);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sfi_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"epoch_cycle_reset\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErcSwept\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SFI_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter_address\",\"type\":\"address\"}],\"name\":\"add_adapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"add_pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delete_adapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy_all_capital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epoch_wound_down\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"erc_sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_adapter_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter_address\",\"type\":\"address\"}],\"name\":\"get_adapter_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_current_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"get_epoch_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"get_seconds_until_epoch_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_deploy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_SFI_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"select_adapter_for_liquidity_removal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base_asset_address\",\"type\":\"address\"}],\"name\":\"select_best_adapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"set_governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"set_team_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v01_final_deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"wind_down_epoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"wind_down_pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SaffronStrategy","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000b753428af26e81097e7fd17f40c88aaa3e04902c00000000000000000000000009e9ff67d9d5a25fa465db6f0bede5560581f8cb0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c309d11e258d8e574668bb2da3cf43f89ee5b5cc3687e469d6060b3062086109"}]}