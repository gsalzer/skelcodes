{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\ninterface ITokenDistributor {\r\n\r\n  function initialize(address[] memory _receivers, uint[] memory _percentages) external;\r\n\r\n  function distribute(IERC20[] memory _tokens) external;\r\n\r\n  function getDistribution()\r\n    external\r\n    view\r\n    returns (address[] memory receivers, uint256[] memory percentages);\r\n}\r\n\r\ninterface IProxyWithAdminActions {\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\r\n\r\n  function changeAdmin(address newAdmin) external;\r\n}\r\n\r\ninterface IProposalExecutor {\r\n    function execute() external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title AIP2ProposalPayload\r\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\r\n * - Updates the TokenDistributor contract as defined by the AIP-2\r\n * @author Aave\r\n **/\r\ncontract AIP2ProposalPayload is IProposalExecutor {\r\n  event ProposalExecuted();\r\n\r\n  address public constant DISTRIBUTOR_IMPL = 0x62C936a16905AfC49B589a41d033eE222A2325Ad;\r\n  address public constant DISTRIBUTOR_PROXY = 0xE3d9988F676457123C5fD01297605efdD0Cba1ae;\r\n  address public constant AAVE_COLLECTOR = 0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c;\r\n  address public constant REFERRAL_WALLET = 0x2fbB0c60a41cB7Ea5323071624dCEAD3d213D0Fa;\r\n\r\n  /**\r\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\r\n   */\r\n  function execute() external override {\r\n    address[] memory receivers = new address[](2);\r\n    receivers[0] = AAVE_COLLECTOR;\r\n    receivers[1] = REFERRAL_WALLET;\r\n\r\n    uint256[] memory percentages = new uint256[](2);\r\n    percentages[0] = uint256(8000);\r\n    percentages[1] = uint256(2000);\r\n\r\n    bytes memory params =\r\n      abi.encodeWithSelector(\r\n        ITokenDistributor(DISTRIBUTOR_IMPL).initialize.selector,\r\n        receivers,\r\n        percentages\r\n      );\r\n\r\n    IProxyWithAdminActions(DISTRIBUTOR_PROXY).upgradeToAndCall(DISTRIBUTOR_IMPL, params);\r\n\r\n    emit ProposalExecuted();\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_COLLECTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTOR_IMPL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTOR_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AIP2ProposalPayload","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://654a69882a62091ccc2648ac8dab14915e185495742472e409b9d4864e5dcf1a"}]}