{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/commons/Ownable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/StringUtils.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\nlibrary StringUtils {\r\n    function toBytes32(string memory _a) internal pure returns (bytes32 b) {\r\n        require(bytes(_a).length <= 32, \"string too long\");\r\n\r\n        assembly {\r\n            let bi := mul(mload(_a), 8)\r\n            b := and(mload(add(_a, 32)), shl(sub(256, bi), sub(exp(2, bi), 1)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/diaspore/RateOracle.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n/**\r\n    @dev Defines the interface of a standard Diaspore RCN Oracle,\r\n    The contract should also implement it's ERC165 interface: 0xa265d8e0\r\n    @notice Each oracle can only support one currency\r\n    @author Agustin Aguilar\r\n*/\r\nabstract contract RateOracle {\r\n    uint256 public constant VERSION = 5;\r\n    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\r\n    \r\n    /**\r\n        3 or 4 letters symbol of the currency, Ej: ETH\r\n    */\r\n    function baseToken() external virtual view returns (string memory);\r\n\r\n\r\n    /**\r\n        3 or 4 letters symbol of the currency, Ej: ETH\r\n    */\r\n    function symbol() external virtual view returns (string memory);\r\n\r\n    /**\r\n        Descriptive name of the currency, Ej: Ethereum\r\n    */\r\n    function name() external virtual view returns (string memory);\r\n\r\n    /**\r\n        The number of decimals of the currency represented by this Oracle,\r\n            it should be the most common number of decimal places\r\n    */\r\n    function decimals() external virtual view returns (uint256);\r\n\r\n    /**\r\n        The base token on which the sample is returned\r\n            should be the RCN Token address.\r\n    */\r\n    function token() external virtual view returns (address);\r\n\r\n    /**\r\n        The currency symbol encoded on a UTF-8 Hex\r\n    */\r\n    function currency() external virtual view returns (bytes32);\r\n\r\n    /**\r\n        The name of the Individual or Company in charge of this Oracle\r\n    */\r\n    function maintainer() external virtual view returns (string memory);\r\n\r\n    /**\r\n        Returns the url where the oracle exposes a valid \"oracleData\" if needed\r\n    */\r\n    function url() external virtual view returns (string memory);\r\n\r\n    /**\r\n        Returns a sample on how many token() are equals to how many currency()\r\n    */\r\n    function readSample(bytes calldata _data) external virtual view returns (uint256 _tokens, uint256 _equivalent);\r\n}\r\n\r\n// File: contracts/interfaces/IOracleAdapter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IOracleAdapter {\r\n\r\n  function setAggregator(\r\n    bytes32 _symbolA,\r\n    bytes32 _symbolB,\r\n    address _aggregator\r\n  ) external;\r\n\r\n  function removeAggregator(bytes32 _symbolA, bytes32 _symbolB) external;\r\n  function getRate (bytes32[] calldata path) external view returns (uint256, uint256);\r\n  function latestTimestamp (bytes32[] calldata path) external view returns (uint256);\r\n\r\n  event RemoveAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n  event SetAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\nlibrary SafeMath {\r\n    using SafeMath for uint256;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"Add overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(x >= y, \"Sub overflow\");\r\n        return x - y;\r\n    }\r\n\r\n    function mult(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 z = x * y;\r\n        require(z/x == y, \"Mult overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    function multdiv(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\r\n        require(z != 0, \"div by zero\");\r\n        return x.mult(y) / z;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/PausedProvided.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface PausedProvided {\r\n    function isPaused() external view returns (bool);\r\n}\r\n\r\n// File: contracts/commons/Pausable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    mapping(address => bool) public canPause;\r\n    bool public paused;\r\n\r\n    event Paused();\r\n    event Started();\r\n    event CanPause(address _pauser, bool _enabled);\r\n\r\n    function setPauser(address _pauser, bool _enabled) external onlyOwner {\r\n        canPause[_pauser] = _enabled;\r\n        emit CanPause(_pauser, _enabled);\r\n    }\r\n\r\n    function pause() external {\r\n        require(!paused, \"already paused\");\r\n\r\n        require(\r\n            msg.sender == _owner ||\r\n            canPause[msg.sender],\r\n            \"not authorized to pause\"\r\n        );\r\n\r\n        paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    function start() external onlyOwner {\r\n        require(paused, \"not paused\");\r\n        paused = false;\r\n        emit Started();\r\n    }\r\n}\r\n\r\n// File: contracts/diaspore/MultiSourceOracle.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MultiSourceOracle is RateOracle, Ownable, Pausable {\r\n    using StringUtils for string;\r\n    using SafeMath for uint256;\r\n\r\n    RateOracle public upgrade;\r\n\r\n    uint256 public ibase;\r\n    bytes32[] public path;\r\n    IOracleAdapter public oracleAdapter;\r\n    PausedProvided public pausedProvided;\r\n\r\n\r\n    string private isymbol;\r\n    string private iname;\r\n    uint256 private idecimals;\r\n    address private itoken;\r\n    string private ibaseToken;\r\n    bytes32 private icurrency;\r\n    string private imaintainer;\r\n\r\n    constructor(\r\n        IOracleAdapter _oracleAdapter,\r\n        string memory _baseToken,\r\n        uint256 _base,\r\n        string memory _symbol,\r\n        string memory _name,\r\n        uint256 _decimals,\r\n        address _token,\r\n        string memory _maintainer,\r\n        bytes32[] memory _path\r\n    ) public {\r\n        oracleAdapter = _oracleAdapter;\r\n        ibaseToken = _baseToken;\r\n        // Create legacy bytes32 currency\r\n        bytes32 currency = _symbol.toBytes32();\r\n        // Save Oracle metadata\r\n        isymbol = _symbol;\r\n        iname = _name;\r\n        idecimals = _decimals;\r\n        itoken = _token;\r\n        icurrency = currency;\r\n        imaintainer = _maintainer;\r\n        path = _path;\r\n        ibase = _base;\r\n        pausedProvided = PausedProvided(msg.sender);\r\n    }\r\n\r\n    /**\r\n        3 or 4 letters symbol of the currency, Ej: ETH\r\n    */\r\n    function baseToken() external override virtual view returns (string memory) {\r\n        return ibaseToken;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, 3 or 4 letter symbol of the currency provided by this oracle\r\n     *   (ej: ARS)\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function symbol() external override view returns (string memory) {\r\n        return isymbol;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, full name of the currency provided by this oracle\r\n     *   (ej: Argentine Peso)\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function name() external override view returns (string memory) {\r\n        return iname;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, decimals to express the common denomination\r\n     *   of the currency provided by this oracle\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function decimals() external override view returns (uint256) {\r\n        return idecimals;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, token address of the currency provided by this oracle\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function token() external override view returns (address) {\r\n        return itoken;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, bytes32 code of the currency provided by this oracle\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function currency() external override view returns (bytes32) {\r\n        return icurrency;\r\n    }\r\n\r\n    /**\r\n     * @return metadata, human readable name of the entity maintainer of this oracle\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function maintainer() external override view returns (string memory) {\r\n        return imaintainer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the URL required to retrieve the auxiliary data\r\n     *   as specified by the RateOracle spec, no auxiliary data is required\r\n     *   so it returns an empty string.\r\n     * @return An empty string, because the auxiliary data is not required\r\n     * @notice Defined by the RCN RateOracle interface\r\n     */\r\n    function url() external override view returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the medatada of the oracle\r\n     * @param _name Name of the oracle currency\r\n     * @param _decimals Decimals for the common representation of the currency\r\n     * @param _maintainer Name of the maintainer entity of the Oracle\r\n     * @param _token, token address of the currency provided by this oracle\r\n     * @param _path, path to get the currency rate\r\n     */\r\n    function setMetadata(\r\n        string calldata _name,\r\n        uint256 _decimals,\r\n        string calldata _maintainer,\r\n        address _token,\r\n        bytes32[] calldata _path\r\n    ) external onlyOwner {\r\n        iname = _name;\r\n        idecimals = _decimals;\r\n        imaintainer = _maintainer;\r\n        itoken = _token;\r\n        path = _path;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the Oracle contract, all subsequent calls to `readSample` will be forwareded to `_upgrade`\r\n     * @param _upgrade Contract address of the new updated oracle\r\n     * @notice If the `upgrade` address is set to the address `0` the Oracle is considered not upgraded\r\n     */\r\n    function setUpgrade(RateOracle _upgrade) external onlyOwner {\r\n        upgrade = _upgrade;\r\n    }\r\n\r\n    /**\r\n     * @dev Reads the rate provided by the Oracle\r\n     *   this being the result of the resolved path by the oracle-adapter\r\n     * @param _oracleData Oracle auxiliar data defined in the RCN Oracle spec\r\n     *   not used for this oracle, but forwarded in case of upgrade.\r\n     * @return _tokens _equivalent `_equivalent` is the median of the values provided by the signer\r\n     *   `_tokens` are equivalent to `_equivalent` in the currency of the Oracle\r\n     */\r\n    function readSample(bytes memory _oracleData) public override view returns (uint256 _tokens, uint256 _equivalent) {\r\n        // Check if paused\r\n        require(!paused && !pausedProvided.isPaused(), \"contract paused\");\r\n\r\n        // Check if Oracle contract has been upgraded\r\n        RateOracle _upgrade = upgrade;\r\n        if (address(_upgrade) != address(0)) {\r\n            return _upgrade.readSample(_oracleData);\r\n        }\r\n\r\n        // Tokens is always base ;\r\n        (uint256 rate, uint256 dec) = oracleAdapter.getRate(path);\r\n        _tokens = ibase.mult(10 ** dec);\r\n        _equivalent = rate.mult(10 ** idecimals);\r\n    }\r\n\r\n    /**\r\n     * @dev Reads the rate provided by the Oracle\r\n     *   this being the result of the resolved path by the oracle-adapter\r\n     * @return _tokens _equivalent `_equivalent` is the median of the values provided by the signer\r\n     *   `_tokens` are equivalent to `_equivalent` in the currency of the Oracle\r\n     * @notice This Oracle accepts reading the sample without auxiliary data\r\n     */\r\n    function readSample() external view returns (uint256 _tokens, uint256 _equivalent) {\r\n        (_tokens, _equivalent) = readSample(new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Reads the last timestamp when the oracle was updated\r\n     * @return timestamp last updated\r\n     * @notice If the sample rate is get from many oracles , the latest timestamp returns the older one\r\n     */\r\n    function latestTimestamp() external view returns (uint256 timestamp) {\r\n        timestamp = oracleAdapter.latestTimestamp(path);\r\n    }\r\n}\r\n\r\n// File: contracts/diaspore/OracleFactory.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract OracleFactory is Ownable, Pausable, PausedProvided {\r\n    mapping(string => address) public symbolToOracle;\r\n    mapping(address => string) public oracleToSymbol;\r\n\r\n    event NewOracle(\r\n        address _oracleAdapter,\r\n        string _symbol,\r\n        address _oracle,\r\n        string _name,\r\n        uint256 _decimals,\r\n        address _token,\r\n        string _maintainer,\r\n        bytes32[] _path\r\n    );\r\n\r\n    event Upgraded(\r\n        address indexed _oracle,\r\n        address _new\r\n    );\r\n\r\n    event UpdatedMetadata(\r\n        address indexed _oracle,\r\n        string _name,\r\n        uint256 _decimals,\r\n        string _maintainer,\r\n        address _token,\r\n        bytes32[] _path\r\n    );\r\n\r\n    event OraclePaused(\r\n        address indexed _oracle,\r\n        address _pauser\r\n    );\r\n\r\n    event OracleStarted(\r\n        address indexed _oracle\r\n    );\r\n\r\n    string public baseToken;\r\n    uint256 public baseDecimals;\r\n\r\n    constructor(\r\n        string memory _baseToken,\r\n        uint256 _decimals\r\n    ) public {\r\n        baseToken = _baseToken;\r\n        baseDecimals = 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new Oracle contract for a given `_symbol`\r\n     * @param _symbol metadata symbol for the currency of the oracle to create\r\n     * @param _name metadata name for the currency of the oracle\r\n     * @param _decimals metadata number of decimals to express the common denomination of the currency\r\n     * @param _token metadata token address of the currency\r\n     *   (if the currency has no token, it should be the address 0)\r\n     * @param _maintainer metadata maintener human readable name\r\n     * @notice Only one oracle by symbol can be created\r\n     */\r\n    function newOracle(\r\n        IOracleAdapter _oracleAdapter,\r\n        string calldata _symbol,\r\n        string calldata _name,\r\n        uint256 _decimals,\r\n        address _token,\r\n        string calldata _maintainer,\r\n        bytes32[] calldata _path\r\n    ) external onlyOwner {\r\n        // Check for duplicated oracles\r\n        require(symbolToOracle[_symbol] == address(0), \"Oracle already exists\");\r\n        // Create oracle contract\r\n        address oracle;\r\n        {\r\n        oracle = _createOracle(\r\n            _oracleAdapter,\r\n            _symbol,\r\n            _name,\r\n            _decimals,\r\n            _token,\r\n            _maintainer,\r\n            _path\r\n        );\r\n        }\r\n        // Sanity check new oracle\r\n        assert(bytes(oracleToSymbol[address(oracle)]).length == 0);\r\n        // Save Oracle in registry\r\n        symbolToOracle[_symbol] = address(oracle);\r\n        oracleToSymbol[address(oracle)] = _symbol;\r\n        // Emit events\r\n        _emitNewOracle(\r\n            address(_oracleAdapter),\r\n            _symbol,\r\n            address(oracle),\r\n            _name,\r\n            _decimals,\r\n            _token,\r\n            _maintainer,\r\n            _path\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return true if the Oracle ecosystem is paused\r\n     * @notice Used by PausedProvided and readed by the Oracles on each `readSample()`\r\n     */\r\n    function isPaused() external override view returns (bool) {\r\n        return paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the given `_oracle`\r\n     * @param _oracle oracle address to be paused\r\n     * @notice Acts as a proxy of `_oracle.pause`\r\n     */\r\n    function pauseOracle(address _oracle) external {\r\n        require(\r\n            canPause[msg.sender] ||\r\n            msg.sender == _owner,\r\n            \"not authorized to pause\"\r\n        );\r\n\r\n        MultiSourceOracle(_oracle).pause();\r\n        emit OraclePaused(_oracle, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the given `_oracle`\r\n     * @param _oracle oracle address to be started\r\n     * @notice Acts as a proxy of `_oracle.start`\r\n     */\r\n    function startOracle(address _oracle) external onlyOwner {\r\n        MultiSourceOracle(_oracle).start();\r\n        emit OracleStarted(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the Oracle contract, all subsequent calls to `readSample` will be forwareded to `_upgrade`\r\n     * @param _oracle oracle address to be upgraded\r\n     * @param _upgrade contract address of the new updated oracle\r\n     * @notice Acts as a proxy of `_oracle.setUpgrade`\r\n     */\r\n    function setUpgrade(address _oracle, address _upgrade) external onlyOwner {\r\n        MultiSourceOracle(_oracle).setUpgrade(RateOracle(_upgrade));\r\n        emit Upgraded(_oracle, _upgrade);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the medatada of the oracle\r\n     * @param _oracle oracle address to update its metadata\r\n     * @param _name Name of the oracle currency\r\n     * @param _decimals Decimals for the common representation of the currency\r\n     * @param _maintainer Name of the maintainer entity of the Oracle\r\n     * @notice Acts as a proxy of `_oracle.setMetadata`\r\n     */\r\n    function setMetadata(\r\n        address _oracle,\r\n        string calldata _name,\r\n        uint256 _decimals,\r\n        string calldata _maintainer,\r\n        address _token,\r\n        bytes32[] calldata _path\r\n    ) external onlyOwner {\r\n        MultiSourceOracle(_oracle).setMetadata(\r\n            _name,\r\n            _decimals,\r\n            _maintainer,\r\n            _token,\r\n            _path\r\n        );\r\n\r\n        emit UpdatedMetadata(\r\n            _oracle,\r\n            _name,\r\n            _decimals,\r\n            _maintainer,\r\n            _token,\r\n            _path\r\n        );\r\n    }\r\n\r\n    function _createOracle(\r\n        IOracleAdapter _oracleAdapter,\r\n        string memory _symbol,\r\n        string memory _name,\r\n        uint256 _decimals,\r\n        address _token,\r\n        string memory _maintainer,\r\n        bytes32[] memory _path\r\n    ) private returns(address oracle)\r\n    {\r\n        oracle = address(\r\n            new MultiSourceOracle(\r\n            _oracleAdapter,\r\n            baseToken,\r\n            baseDecimals,\r\n            _symbol,\r\n            _name,\r\n            _decimals,\r\n            _token,\r\n            _maintainer,\r\n            _path\r\n        ));\r\n    }\r\n\r\n    function _emitNewOracle(\r\n        address _oracleAdapter,\r\n        string memory _symbol,\r\n        address oracle,\r\n        string memory _name,\r\n        uint256 _decimals,\r\n        address _token,\r\n        string memory _maintainer,\r\n        bytes32[] memory _path\r\n    ) private\r\n    {\r\n        emit NewOracle(\r\n            _oracleAdapter,\r\n            _symbol,\r\n            oracle,\r\n            _name,\r\n            _decimals,\r\n            _token,\r\n            _maintainer,\r\n            _path\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"CanPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_maintainer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_path\",\"type\":\"bytes32[]\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"OraclePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_maintainer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_path\",\"type\":\"bytes32[]\"}],\"name\":\"UpdatedMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracleAdapter\",\"name\":\"_oracleAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_maintainer\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_path\",\"type\":\"bytes32[]\"}],\"name\":\"newOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleToSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"pauseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_maintainer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_path\",\"type\":\"bytes32[]\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upgrade\",\"type\":\"address\"}],\"name\":\"setUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"startOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbolToOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OracleFactory","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4ec663f32808d988bdfc0a2fb4265fda60ad6b4bfb37fcdb50b31231838e5a0"}]}