{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-01\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor() internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            isMinter(_msgSender()),\r\n            \"MinterRole: caller does not have the Minter role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract CanTransferRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CanTransferAdded(address indexed account);\r\n    event CanTransferRemoved(address indexed account);\r\n\r\n    Roles.Role private _canTransfer;\r\n\r\n    constructor() internal {\r\n        _addCanTransfer(_msgSender());\r\n    }\r\n\r\n    modifier onlyCanTransfer() {\r\n        require(\r\n            canTransfer(_msgSender()),\r\n            \"CanTransferRole: caller does not have the CanTransfer role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function canTransfer(address account) public view returns (bool) {\r\n        return _canTransfer.has(account);\r\n    }\r\n\r\n    function addCanTransfer(address account) public onlyCanTransfer {\r\n        _addCanTransfer(account);\r\n    }\r\n\r\n    function renounceCanTransfer() public {\r\n        _removeCanTransfer(_msgSender());\r\n    }\r\n\r\n    function _addCanTransfer(address account) internal {\r\n        _canTransfer.add(account);\r\n        emit CanTransferAdded(account);\r\n    }\r\n\r\n    function _removeCanTransfer(address account) internal {\r\n        _canTransfer.remove(account);\r\n        emit CanTransferRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155MetadataURI.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\introspection\\ERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping (uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substition, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\r\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\r\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\r\n     *\r\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\r\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    /*\r\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor (string memory uri) public {\r\n        _setURI(uri);\r\n\r\n        // register the supported interfaces to conform to ERC1155 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155);\r\n\r\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substituion mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            require(accounts[i] != address(0), \"ERC1155: batch balance query for the zero address\");\r\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][to] = _balances[id][to].add(amount);\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(\r\n                amount,\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][to] = _balances[id][to].add(amount);\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substituion mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] = _balances[id][account].add(amount);\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        _balances[id][account] = _balances[id][account].sub(\r\n            amount,\r\n            \"ERC1155: burn amount exceeds balance\"\r\n        );\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\r\n                amounts[i],\r\n                \"ERC1155: burn amount exceeds balance\"\r\n            );\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal virtual\r\n    { }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        internal\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\AccessControl.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) internal virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\common\\AccessControlMixin.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract AccessControlMixin is AccessControl {\r\n    string private _revertMsg;\r\n    function _setupContractId(string memory contractId) internal {\r\n        _revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\r\n    }\r\n\r\n    modifier only(bytes32 role) {\r\n        require(\r\n            hasRole(role, _msgSender()),\r\n            _revertMsg\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c,\r\n    string memory _d,\r\n    string memory _e\r\n  ) internal pure returns (string memory) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(\r\n      _ba.length + _bb.length + _bc.length + _bd.length + _be.length\r\n    );\r\n    bytes memory babcde = bytes(abcde);\r\n    uint256 k = 0;\r\n    for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c,\r\n    string memory _d\r\n  ) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, _d, '');\r\n  }\r\n\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c\r\n  ) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, '', '');\r\n  }\r\n\r\n  function strConcat(string memory _a, string memory _b)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    return strConcat(_a, _b, '', '', '');\r\n  }\r\n\r\n  function uint2str(uint256 _i)\r\n    internal\r\n    pure\r\n    returns (string memory _uintAsString)\r\n  {\r\n    if (_i == 0) {\r\n      return '0';\r\n    }\r\n    uint256 j = _i;\r\n    uint256 len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\n\r\ncontract ProxyRegistry {\r\n  mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\nabstract contract ERC1155Tradable is\r\n  ERC1155,\r\n  AccessControlMixin\r\n{\r\n  using Strings for string;\r\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n  bytes32 public constant WHITELIST_ADMIN_ROLE = keccak256(\"WHITELIST_ADMIN_ROLE\");\r\n\r\n  address proxyRegistryAddress;\r\n  uint256 internal _currentTokenID = 0;\r\n  mapping(uint256 => address) public creators;\r\n  mapping(uint256 => uint256) public tokenSupply;\r\n  mapping(uint256 => uint256) public tokenMaxSupply;\r\n  // Contract name\r\n  string public name;\r\n  // Contract symbol\r\n  string public symbol;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _proxyRegistryAddress\r\n  ) public ERC1155('https://api.toshimon.io/cards/') {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    proxyRegistryAddress = _proxyRegistryAddress;\r\n  }\r\n\r\n  function addWhitelistAdmin(address account) public virtual only(DEFAULT_ADMIN_ROLE) {\r\n    grantRole(WHITELIST_ADMIN_ROLE,account);\r\n  }\r\n\r\n  function addMinter(address account) public virtual only(DEFAULT_ADMIN_ROLE) {\r\n    grantRole(MINTER_ROLE,account);\r\n  }\r\n\r\n  function removeWhitelistAdmin(address account) public virtual only(DEFAULT_ADMIN_ROLE) {\r\n    revokeRole(WHITELIST_ADMIN_ROLE,account);\r\n  }\r\n\r\n  function removeMinter(address account) public virtual only(DEFAULT_ADMIN_ROLE) {\r\n    revokeRole(MINTER_ROLE,account);\r\n  }\r\n\r\n  function uri(uint256 _id) public  view virtual override returns (string memory) {\r\n    require(_exists(_id), 'ERC721Tradable#uri: NONEXISTENT_TOKEN');\r\n    return Strings.strConcat(uri(_id), Strings.uint2str(_id));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total quantity for a token ID\r\n   * @param _id uint256 ID of the token to query\r\n   * @return amount of token in existence\r\n   */\r\n  function totalSupply(uint256 _id) public view virtual returns (uint256) {\r\n    return tokenSupply[_id];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI)\r\n    public\r\n    virtual\r\n     only(WHITELIST_ADMIN_ROLE)\r\n  {\r\n    _setURI(_newBaseMetadataURI);\r\n  }\r\n\r\n  function setMaxSupply(uint256 _id, uint256 _maxSupply)\r\n    public\r\n    only(WHITELIST_ADMIN_ROLE)\r\n  {\r\n    tokenMaxSupply[_id] = _maxSupply;\r\n  }\r\n\r\n  function create(\r\n    uint256 _maxSupply,\r\n    uint256 _initialSupply,\r\n    string calldata _uri,\r\n    bytes calldata _data\r\n  ) external virtual only(WHITELIST_ADMIN_ROLE) returns (uint256 tokenId) {\r\n    require(\r\n      _initialSupply <= _maxSupply,\r\n      'Initial supply cannot be more than max supply'\r\n    );\r\n    uint256 _id = _getNextTokenID();\r\n    _incrementTokenTypeId();\r\n    creators[_id] = msg.sender;\r\n\r\n    if (bytes(_uri).length > 0) {\r\n      emit URI(_uri, _id);\r\n    }\r\n\r\n    if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\r\n    tokenSupply[_id] = _initialSupply;\r\n    tokenMaxSupply[_id] = _maxSupply;\r\n    return _id;\r\n  }\r\n  \r\n  function createBatch(\r\n    uint256  _timesCreated,   \r\n    uint256  _maxSupply\r\n  \r\n  ) external virtual only(WHITELIST_ADMIN_ROLE){\r\n    uint256 _id;\r\n    for (uint i = 0; i < _timesCreated; i++) {\r\n\r\n        _id = _getNextTokenID();\r\n        _incrementTokenTypeId();\r\n        creators[_id] = msg.sender;\r\n        tokenMaxSupply[_id] = _maxSupply;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Mints some amount of tokens to an address\r\n   * @param _to          Address of the future owner of the token\r\n   * @param _id          Token ID to mint\r\n   * @param _quantity    Amount of tokens to mint\r\n   * @param _data        Data to pass if receiver is contract\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes memory _data\r\n  ) public virtual only(MINTER_ROLE) {\r\n    uint256 tokenId = _id;\r\n    uint256 newSupply = tokenSupply[tokenId].add(_quantity);\r\n    require(newSupply <= tokenMaxSupply[tokenId], 'Max supply reached');\r\n    _mint(_to, _id, _quantity, _data);\r\n    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\r\n  }\r\n\r\n  /**\r\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings - The Beano of NFTs\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool isOperator)\r\n  {\r\n    // Whitelist OpenSea proxy contract for easy trading.\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n      return true;\r\n    }\r\n\r\n    return ERC1155.isApprovedForAll(_owner, _operator);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n   * @param _id uint256 ID of the token to query the existence of\r\n   * @return bool whether the token exists\r\n   */\r\n  function _exists(uint256 _id) internal view virtual returns (bool) {\r\n    return creators[_id] != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev calculates the next token ID based on value of _currentTokenID\r\n   * @return uint256 for the next token ID\r\n   */\r\n  function _getNextTokenID() internal virtual view returns (uint256) {\r\n    return _currentTokenID.add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev increments the value of _currentTokenID\r\n   */\r\n  function _incrementTokenTypeId() internal virtual {\r\n    _currentTokenID++;\r\n  }\r\n    /**\r\n   * @dev Returns the max quantity for a token ID\r\n   * @param _id uint256 ID of the token to query\r\n   * @return amount of token in existence\r\n   */\r\n  function maxSupply(uint256 _id) public view returns (uint256) {\r\n    return tokenMaxSupply[_id];\r\n  }\r\n}\r\n\r\n// File: contracts\\child\\ChildToken\\ChildERC1155.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ToshimonMinter is ERC1155Tradable\r\n{\r\n    using Strings for string;\r\n    string private _contractURI;\r\n    \r\n\r\n    constructor(address _proxyRegistryAddress)\r\n        public\r\n        ERC1155Tradable('Toshimon Minter', 'ToshimonMinter', _proxyRegistryAddress)\r\n    {\r\n\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n        _setupContractId(\"ChildERC1155\");\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(WHITELIST_ADMIN_ROLE, _msgSender());\r\n        \r\n        _contractURI = 'https://api.toshimon.io/toshimon-erc1155';\r\n\r\n    }\r\n\r\n    // This is to support Native meta transactions\r\n    // never use msg.sender directly, use _msgSender() instead\r\n\r\n\r\n    function setBaseMetadataURI(string memory newURI) public only(WHITELIST_ADMIN_ROLE) {\r\n        _setBaseMetadataURI(newURI);\r\n    }\r\n\r\n    function mintBatch(address user, uint256[] calldata ids, uint256[] calldata amounts)\r\n        external\r\n        only(MINTER_ROLE)\r\n    {\r\n        _mintBatch(user, ids, amounts, '');\r\n    }\r\n function setContractURI(string memory newURI) public only(WHITELIST_ADMIN_ROLE) {\r\n    _contractURI = newURI;\r\n  }\r\n\r\n  function contractURI() public view returns (string memory) {\r\n    return _contractURI;\r\n  }\r\n  /**\r\n   * @dev Ends minting of token\r\n   * @param _id Token ID for which minting will end\r\n   */\r\n  function endMinting(uint256 _id) external only(WHITELIST_ADMIN_ROLE) {\r\n    tokenMaxSupply[_id] = tokenSupply[_id];\r\n  }\r\n\r\n  function burn(\r\n    address _account,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) \r\n    external\r\n    only(MINTER_ROLE) {\r\n    require(\r\n      balanceOf(_account, _id) >= _amount,\r\n      'Cannot burn more than addres has'\r\n    );\r\n    _burn(_account, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * Mint NFT and send those to the list of given addresses\r\n   */\r\n  function airdrop(uint256 _id, address[] calldata _addresses)  \r\n        external\r\n        only(MINTER_ROLE)  {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      _mint(_addresses[i], _id, 1, '');\r\n    }\r\n  }\r\n    /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public only(DEFAULT_ADMIN_ROLE) {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    grantRole(DEFAULT_ADMIN_ROLE,newOwner);\r\n    revokeRole(DEFAULT_ADMIN_ROLE,getRoleMember(DEFAULT_ADMIN_ROLE,0));\r\n  }\r\n  function isMinter(address account) public view returns (bool) {\r\n    return hasRole(MINTER_ROLE,account);\r\n  }\r\n  function isOwner(address account) public view returns (bool) {\r\n    return hasRole(DEFAULT_ADMIN_ROLE,account);\r\n  }\r\n  function isWhitelistAdmin(address account) public view returns (bool) {\r\n    return hasRole(WHITELIST_ADMIN_ROLE,account);\r\n  }\r\n  function owner() public view returns (address) {\r\n    return getRoleMember(DEFAULT_ADMIN_ROLE,0);\r\n  }\r\n \r\n}\r\n\r\n\r\n\r\ncontract ToshiCoinNonTradable is Ownable, MinterRole, CanTransferRole {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    string public name = \"ToshiCoin - Non Tradable\";\r\n    string public symbol = \"ToshiCoin\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public totalClaimed;\r\n    uint256 public totalMinted;\r\n\r\n    uint256 public remainingToshiCoinForSale = 4000 * (1e18);\r\n    uint256 public priceInTOSHI = 3;\r\n\r\n    IERC20 public toshi;\r\n    address public toshiTreasury;\r\n\r\n    constructor(IERC20 _toshi, address _toshiTreasury) public {\r\n        toshi = _toshi;\r\n        toshiTreasury = _toshiTreasury;\r\n    }\r\n\r\n    function addClaimed(uint256 amount) internal {\r\n        totalClaimed = totalClaimed.add(amount);\r\n    }\r\n\r\n    function addMinted(uint256 amount) internal {\r\n        totalMinted = totalMinted.add(amount);\r\n    }\r\n\r\n    function setRemainingToshiCoinForSale(uint256 _remainingToshiCoinForSale)\r\n        external\r\n        onlyMinter\r\n    {\r\n        remainingToshiCoinForSale = _remainingToshiCoinForSale;\r\n    }\r\n\r\n    function setPriceInToshi(uint256 _priceInTOSHI) external onlyMinter {\r\n        priceInTOSHI = _priceInTOSHI;\r\n    }\r\n\r\n    function setToshiTreasury(address _toshiTreasury) external onlyMinter {\r\n        toshiTreasury = _toshiTreasury;\r\n    }\r\n\r\n    /**\r\n     * @dev Anyone can purchase ToshiCoin for TOSHI until it is sold out.\r\n     */\r\n    function purchase(uint256 amount) external {\r\n        uint256 price = priceInTOSHI.mul(amount);\r\n        uint256 balance = toshi.balanceOf(msg.sender);\r\n\r\n        require(balance >= price, \"ToshiCoin: Not enough TOSHI in wallet.\");\r\n        require(\r\n            remainingToshiCoinForSale >= amount,\r\n            \"ToshiCoin: Not enough ToshiCoin for sale.\"\r\n        );\r\n\r\n        safeToshiTransferFrom(msg.sender, toshiTreasury, price);\r\n\r\n        remainingToshiCoinForSale = remainingToshiCoinForSale.sub(amount);\r\n\r\n        _mint(msg.sender, amount);\r\n        addMinted(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claiming is white-listed to specific minter addresses for now to limit transfers.\r\n     */\r\n    function claim(address to, uint256 amount) public onlyCanTransfer {\r\n        transfer(to, amount);\r\n        addClaimed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        onlyCanTransfer\r\n        returns (bool)\r\n    {\r\n        require(\r\n            amount <= _balances[msg.sender],\r\n            \"ToshiCoin: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyCanTransfer returns (bool) {\r\n        require(\r\n            amount <= _balances[from],\r\n            \"ToshiCoin: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Minting is white-listed to specific minter addresses for now.\r\n     */\r\n    function mint(address to, uint256 amount) public onlyMinter {\r\n        _mint(to, amount);\r\n        addMinted(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burning is white-listed to specific minter addresses for now.\r\n     */\r\n    function burn(address from, uint256 value) public onlyCanTransfer {\r\n        require(\r\n            _balances[from] >= value,\r\n            \"ToshiCoin: Cannot burn more than the address balance\"\r\n        );\r\n\r\n        _burn(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that creates an amount of the token and assigns it to an account.\r\n     * This encapsulates the modification of balances such that the proper events are emitted.\r\n     * @param to The account that will receive the created tokens.\r\n     * @param amount The amount that will be created.\r\n     */\r\n    function _mint(address to, uint256 amount) internal {\r\n        require(to != address(0), \"ToshiCoin: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that destroys an amount of the token of a given address.\r\n     * @param from The account whose tokens will be destroyed.\r\n     * @param amount The amount that will be destroyed.\r\n     */\r\n    function _burn(address from, uint256 amount) internal {\r\n        require(from != address(0), \"ToshiCoin: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(amount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe token transfer from to prevent over-transfers.\r\n     */\r\n    function safeToshiTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 tokenBalance = toshi.balanceOf(address(from));\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        toshi.transferFrom(from, to, transferAmount);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\ncontract ToshiCoinFarm is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 amountInPool;\r\n        uint256 coinsReceivedToDate;\r\n        /*\r\n         *  At any point in time, the amount of ToshiCoin earned by a user waiting to be claimed is:\r\n         *\r\n         *    Pending claim = (user.amountInPool * pool.coinsEarnedPerToken) - user.coinsReceivedToDate\r\n         *\r\n         *  Whenever a user deposits or withdraws tokens to a pool, the following occurs:\r\n         *   1. The pool's `coinsEarnedPerToken` is rebalanced to account for the new shares in the pool.\r\n         *   2. The `lastRewardBlock` is updated to the latest block.\r\n         *   3. The user receives the pending claim sent to their address.\r\n         *   4. The user's `amountInPool` and `coinsReceivedToDate` get updated for this pool.\r\n         */\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 token;\r\n        uint256 lastUpdateTime;\r\n        uint256 coinsPerDay;\r\n        uint256 coinsEarnedPerToken;\r\n    }\r\n\r\n    PoolInfo[] public poolInfo;\r\n\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(address => uint256) public tokenPoolIds;\r\n\r\n    ToshiCoinNonTradable public ToshiCoin;\r\n\r\n    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(ToshiCoinNonTradable toshiCoinAddress) public {\r\n        ToshiCoin = toshiCoinAddress;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function pendingCoins(uint256 poolId, address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][user];\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        uint256 coinsEarnedPerToken = pool.coinsEarnedPerToken;\r\n\r\n        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {\r\n            uint256 pendingCoins = block\r\n                .timestamp\r\n                .sub(pool.lastUpdateTime)\r\n                .mul(pool.coinsPerDay)\r\n                .div(86400);\r\n\r\n            coinsEarnedPerToken = coinsEarnedPerToken.add(\r\n                pendingCoins.mul(1e18).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return\r\n            user.amountInPool.mul(coinsEarnedPerToken).div(1e18).sub(\r\n                user.coinsReceivedToDate\r\n            );\r\n    }\r\n\r\n    function totalPendingCoins(address user) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; ++poolId) {\r\n            total = total.add(pendingCoins(poolId, user));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new pool to the farm. Cannot add the same token more than once.\r\n     */\r\n    function addPool(IERC20 token, uint256 _coinsPerDay) public onlyOwner {\r\n        require(\r\n            tokenPoolIds[address(token)] == 0,\r\n            \"ToshiCoinFarm: Added duplicate token pool\"\r\n        );\r\n        require(\r\n            address(token) != address(ToshiCoin),\r\n            \"ToshiCoinFarm: Cannot add ToshiCoin pool\"\r\n        );\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: token,\r\n                coinsPerDay: _coinsPerDay,\r\n                lastUpdateTime: block.timestamp,\r\n                coinsEarnedPerToken: 0\r\n            })\r\n        );\r\n\r\n        tokenPoolIds[address(token)] = poolInfo.length;\r\n    }\r\n\r\n    function setCoinsPerDay(uint256 poolId, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"ToshiCoinFarm: Coins per day cannot be negative\");\r\n\r\n        updatePool(poolId);\r\n\r\n        poolInfo[poolId].coinsPerDay = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim all pending rewards in all pools.\r\n     */\r\n    function claimAll(uint256[] memory poolIds) public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; poolId++) {\r\n            withdraw(poolIds[poolId], 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards in all pools.\r\n     */\r\n    function updateAllPools() public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; poolId++) {\r\n            updatePool(poolId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards for a pool.\r\n     */\r\n    function updatePool(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n\r\n        if (block.timestamp <= pool.lastUpdateTime) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n\r\n        if (pool.coinsPerDay == 0 || tokenSupply == 0) {\r\n            pool.lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 pendingCoins = block\r\n            .timestamp\r\n            .sub(pool.lastUpdateTime)\r\n            .mul(pool.coinsPerDay)\r\n            .div(86400);\r\n\r\n        ToshiCoin.mint(address(this), pendingCoins);\r\n\r\n        pool.lastUpdateTime = block.timestamp;\r\n        pool.coinsEarnedPerToken = pool.coinsEarnedPerToken.add(\r\n            pendingCoins.mul(1e18).div(tokenSupply)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit tokens into a pool and claim pending reward.\r\n     */\r\n    function deposit(uint256 poolId, uint256 amount) public {\r\n        require(\r\n            amount > 0,\r\n            \"ToshiCoinFarm: Cannot deposit non-positive amount into pool\"\r\n        );\r\n\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCoinClaim(msg.sender, pending);\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.add(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        safePoolTransferFrom(msg.sender, address(this), amount, pool);\r\n\r\n        emit Deposit(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens from a pool and claim pending reward.\r\n     */\r\n    function withdraw(uint256 poolId, uint256 amount) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool >= amount,\r\n            \"ToshiCoinFarm: User does not have enough funds to withdraw from this pool\"\r\n        );\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCoinClaim(msg.sender, pending);\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.sub(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        if (amount > 0) {\r\n            safePoolTransfer(msg.sender, amount, pool);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw withdraws funds without claiming rewards.\r\n     *      This should only be used in emergencies.\r\n     */\r\n    function emergencyWithdraw(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool > 0,\r\n            \"ToshiCoinFarm: User has no funds to withdraw from this pool\"\r\n        );\r\n\r\n        uint256 amount = user.amountInPool;\r\n\r\n        user.amountInPool = 0;\r\n        user.coinsReceivedToDate = 0;\r\n\r\n        safePoolTransfer(msg.sender, amount, pool);\r\n\r\n        emit EmergencyWithdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe ToshiCoin transfer to prevent over-transfers.\r\n     */\r\n    function safeToshiCoinClaim(address to, uint256 amount) internal {\r\n        uint256 coinsBalance = ToshiCoin.balanceOf(address(this));\r\n        uint256 claimAmount = amount > coinsBalance ? coinsBalance : amount;\r\n\r\n        ToshiCoin.claim(to, claimAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe pool token transfer to prevent over-transfers.\r\n     */\r\n    function safePoolTransfer(\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(address(this));\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transfer(to, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe pool token transfer from to prevent over-transfers.\r\n     */\r\n    function safePoolTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(from);\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transferFrom(from, to, transferAmount);\r\n    }\r\n}\r\n\r\ncontract ToshiCash is Ownable, MinterRole, CanTransferRole {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    string public name = \"ToshiCash\";\r\n    string public symbol = \"ToshiCash\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public totalClaimed;\r\n    uint256 public totalMinted;\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    function addClaimed(uint256 amount) internal {\r\n        totalClaimed = totalClaimed.add(amount);\r\n    }\r\n\r\n    function addMinted(uint256 amount) internal {\r\n        totalMinted = totalMinted.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claiming is white-listed to specific minter addresses for now to limit transfers.\r\n     */\r\n    function claim(address to, uint256 amount) public onlyCanTransfer {\r\n        transfer(to, amount);\r\n        addClaimed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            amount <= _balances[msg.sender],\r\n            \"ToshiCash: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transferring is white-listed to specific minter addresses for now.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyCanTransfer returns (bool) {\r\n        require(\r\n            amount <= _balances[from],\r\n            \"ToshiCash: Cannot transfer more than balance\"\r\n        );\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Minting is white-listed to specific minter addresses for now.\r\n     */\r\n    function mint(address to, uint256 amount) public onlyMinter {\r\n        _mint(to, amount);\r\n        addMinted(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burning is white-listed to specific minter addresses for now.\r\n     */\r\n    function burn(address from, uint256 value) public onlyCanTransfer {\r\n        require(\r\n            _balances[from] >= value,\r\n            \"ToshiCash: Cannot burn more than the address balance\"\r\n        );\r\n\r\n        _burn(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that creates an amount of the token and assigns it to an account.\r\n     * This encapsulates the modification of balances such that the proper events are emitted.\r\n     * @param to The account that will receive the created tokens.\r\n     * @param amount The amount that will be created.\r\n     */\r\n    function _mint(address to, uint256 amount) internal {\r\n        require(to != address(0), \"ToshiCash: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that destroys an amount of the token of a given address.\r\n     * @param from The account whose tokens will be destroyed.\r\n     * @param amount The amount that will be destroyed.\r\n     */\r\n    function _burn(address from, uint256 amount) internal {\r\n        require(from != address(0), \"ToshiCash: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(amount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract ToshiCashFarm is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 amountInPool;\r\n        uint256 coinsReceivedToDate;\r\n        /*\r\n         *  At any point in time, the amount of ToshiCoin earned by a user waiting to be claimed is:\r\n         *\r\n         *    Pending claim = (user.amountInPool * pool.coinsEarnedPerToken) - user.coinsReceivedToDate\r\n         *\r\n         *  Whenever a user deposits or withdraws tokens to a pool, the following occurs:\r\n         *   1. The pool's `coinsEarnedPerToken` is rebalanced to account for the new shares in the pool.\r\n         *   2. The `lastRewardBlock` is updated to the latest block.\r\n         *   3. The user receives the pending claim sent to their address.\r\n         *   4. The user's `amountInPool` and `coinsReceivedToDate` get updated for this pool.\r\n         */\r\n    }\r\n    struct UserInfoERC1155 {\r\n        uint256 amountInPool;\r\n        \r\n        /*\r\n         *  At any point in time, the amount of ToshiCoin earned by a user waiting to be claimed is:\r\n         *\r\n         *    Pending claim = (user.amountInPool * pool.coinsEarnedPerToken) - user.coinsReceivedToDate\r\n         *\r\n         *  Whenever a user deposits or withdraws tokens to a pool, the following occurs:\r\n         *   1. The pool's `coinsEarnedPerToken` is rebalanced to account for the new shares in the pool.\r\n         *   2. The `lastRewardBlock` is updated to the latest block.\r\n         *   3. The user receives the pending claim sent to their address.\r\n         *   4. The user's `amountInPool` and `coinsReceivedToDate` get updated for this pool.\r\n         */\r\n    }\r\n    \r\n\r\n    struct PoolInfo {\r\n        IERC20 token;\r\n        uint256 lastUpdateTime;\r\n        uint256 coinsPerDay;\r\n        uint256 coinsEarnedPerToken;\r\n    }\r\n    struct ERC1155Multiplier {\r\n        uint256 id;\r\n        uint256 percentBoost;\r\n       \r\n    }\r\n    struct ERC1155MultiplierUserInfo {\r\n        uint256 multiplier;\r\n        uint256 total;\r\n       \r\n    }\r\n\r\n    PoolInfo[] public poolInfo;\r\n    ERC1155Multiplier[] public eRC1155Multiplier;\r\n\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(uint256 => mapping(address => UserInfoERC1155)) public userInfoERC1155;\r\n    mapping(address => uint256) public tokenPoolIds;\r\n    mapping(uint256 => uint256) public eRC1155MultiplierIds;\r\n    mapping(address => ERC1155MultiplierUserInfo) public userMultiplier;\r\n\r\n    ToshiCoinFarm public toshiCoinFarm;\r\n    ToshiCash public toshiCash;\r\n    ToshimonMinter public toshimonMinter;\r\n    address public toshiCoinFarmDelegate;\r\n\r\n    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n    event DepositERC1155(address indexed user, uint256 indexed erc1155);\r\n    event WithdrawERC1155(\r\n        address indexed user,\r\n        uint256 indexed erc1155\r\n    );\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(ToshiCoinFarm toshiCoinFarmAddress, address toshiCoinFarmDelegateAddress, ToshiCash toshiCashAddress, ToshimonMinter toshimonMinterAddress) public {\r\n        toshiCash = toshiCashAddress;\r\n        toshiCoinFarm = toshiCoinFarmAddress;\r\n        toshiCoinFarmDelegate = toshiCoinFarmDelegateAddress;\r\n        toshimonMinter = toshimonMinterAddress;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    function pendingCoins(uint256 poolId, address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][user];\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        uint256 coinsEarnedPerToken = pool.coinsEarnedPerToken;\r\n\r\n        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {\r\n            uint256 pendingCoins = block\r\n                .timestamp\r\n                .sub(pool.lastUpdateTime)\r\n                .mul(pool.coinsPerDay)\r\n                .div(86400);\r\n\r\n            coinsEarnedPerToken = coinsEarnedPerToken.add(\r\n                pendingCoins.mul(1e18).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return\r\n            user.amountInPool.mul(coinsEarnedPerToken).div(1e18).sub(\r\n                user.coinsReceivedToDate\r\n            );\r\n    }\r\n\r\n\r\n    function pendingCoinsBonus(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        (uint256 amountInPool, uint256 coinsReceivedToDate) = toshiCoinFarm.userInfo(0,msg.sender);\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(toshiCoinFarm));\r\n        uint256 coinsEarnedPerToken = pool.coinsEarnedPerToken;\r\n\r\n        if (block.timestamp > pool.lastUpdateTime && tokenSupply > 0) {\r\n            uint256 pendingCoins = block\r\n                .timestamp\r\n                .sub(pool.lastUpdateTime)\r\n                .mul(pool.coinsPerDay)\r\n                .div(86400);\r\n\r\n            coinsEarnedPerToken = coinsEarnedPerToken.add(\r\n                pendingCoins.mul(1e18).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return\r\n            amountInPool.mul(coinsEarnedPerToken).div(1e18).sub(\r\n                user.coinsReceivedToDate\r\n            );\r\n    }\r\n\r\n    function totalPendingCoins(address user) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; ++poolId) {\r\n            total = total.add(pendingCoins(poolId, user));\r\n        }\r\n\r\n        return total;\r\n    }\r\n    function userMultiplierValue(address user) public view returns (uint256) {\r\n\r\n        return userMultiplier[msg.sender].multiplier;\r\n    }\r\n    \r\n    function userERC155StakedTotal(address user) public view returns (uint256) {\r\n\r\n        return userMultiplier[msg.sender].total;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new pool to the farm. Cannot add the same token more than once.\r\n     */\r\n    function addPool(IERC20 token, uint256 _coinsPerDay) public onlyOwner {\r\n\r\n       require(\r\n            address(token) != address(toshiCash),\r\n            \"ToshiCashFarm: Cannot add ToshiCash pool\"\r\n        );\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: token,\r\n                coinsPerDay: _coinsPerDay,\r\n                lastUpdateTime: block.timestamp,\r\n                coinsEarnedPerToken: 0\r\n            })\r\n        );\r\n\r\n        tokenPoolIds[address(token)] = poolInfo.length;\r\n    }\r\n\r\n    function addERC1155Multiplier(uint256 _id, uint256 _percentBoost) public onlyOwner {\r\n        require(\r\n            eRC1155MultiplierIds[_id] == 0,\r\n            \"ToshiCashFarm: Cannot add duplicate Toshimon E%C1155\"\r\n        );\r\n\r\n        eRC1155Multiplier.push(\r\n            ERC1155Multiplier({\r\n                id:_id,\r\n                percentBoost: _percentBoost\r\n            })\r\n        );\r\n\r\n        eRC1155MultiplierIds[_id] = poolInfo.length;\r\n    }\r\n\r\n    function setCoinsPerDay(uint256 poolId, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"ToshiCoinFarm: Coins per day cannot be negative\");\r\n\r\n        updatePool(poolId);\r\n\r\n        poolInfo[poolId].coinsPerDay = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim all pending rewards in all pools.\r\n     */\r\n    function claimAll(uint256[] memory poolIds) public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 0; poolId < length; poolId++) {\r\n            withdraw(poolIds[poolId], 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards in all pools.\r\n     */\r\n    function updateAllPools() public {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint256 poolId = 1; poolId < length; poolId++) {\r\n            updatePool(poolId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pending rewards for a pool.\r\n     */\r\n    function updatePool(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\r\n        if (block.timestamp <= pool.lastUpdateTime) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenSupply = pool.token.balanceOf(address(toshiCoinFarm));\r\n\r\n        if (pool.coinsPerDay == 0 || tokenSupply == 0) {\r\n            pool.lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 pendingCoins = block\r\n            .timestamp\r\n            .sub(pool.lastUpdateTime)\r\n            .mul(pool.coinsPerDay)\r\n            .div(86400);\r\n\r\n        toshiCash.mint(address(this), pendingCoins.mul(multiplier.multiplier.add(100)).div(100));\r\n\r\n        pool.lastUpdateTime = block.timestamp;\r\n        pool.coinsEarnedPerToken = pool.coinsEarnedPerToken.add(\r\n            pendingCoins.mul(1e18).div(tokenSupply)\r\n        );\r\n    }\r\n\r\n\r\n  /**\r\n     * @dev Deposit tokens into a pool and claim pending reward.\r\n     */\r\n    function depositERC1155(uint256 poolId) public {\r\n\r\n        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];\r\n        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];\r\n        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\r\n        \r\n        require(\r\n            user.amountInPool == 0,\r\n            \"ToshiCoinFarm: User can only stake one of each erc1155 type\"\r\n        );\r\n        withdraw(1,0);\r\n        \r\n        user.amountInPool = user.amountInPool.add(1);\r\n        multiplier.multiplier = multiplier.multiplier.add(erc1155.percentBoost);\r\n        multiplier.total = multiplier.total.add(erc1155.percentBoost);\r\n        if(multiplier.multiplier > 100){\r\n            multiplier.multiplier = 100;\r\n        }\r\n\r\n        toshimonMinter.burn(msg.sender,erc1155.id, 1);\r\n\r\n        emit DepositERC1155(msg.sender, erc1155.id);\r\n    }\r\n      /**\r\n     * @dev Deposit tokens into a pool and claim pending reward.\r\n     */\r\n    function withdrawERC1155(uint256 poolId) public {\r\n\r\n        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];\r\n        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];\r\n        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\r\n        \r\n        \r\n        require(\r\n            user.amountInPool >= 1,\r\n            \"ToshiCoinFarm: User does not have enough funds to withdraw from this pool\"\r\n        );\r\n        withdraw(1,0);\r\n        \r\n        user.amountInPool = user.amountInPool.sub(1);\r\n        \r\n        \r\n        multiplier.total = multiplier.total.sub(erc1155.percentBoost);\r\n        multiplier.multiplier = multiplier.total;\r\n        if(multiplier.multiplier > 100){\r\n            multiplier.multiplier = 100;\r\n        }\r\n        \r\n          toshimonMinter.mint(msg.sender,erc1155.id, 1,\"\");\r\n        \r\n\r\n        emit WithdrawERC1155(msg.sender, erc1155.id);\r\n    }\r\n\r\n    function claimBonus() public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        (uint256 amountInPool, uint256 coinsReceivedToDate) = toshiCoinFarm.userInfo(0,msg.sender);\r\n        \r\n\r\n        \r\n        updatePool(0);\r\n\r\n        uint256 pending = amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCashClaim(msg.sender, pending);\r\n        }\r\n\r\n        user.coinsReceivedToDate = pending;\r\n\r\n        emit Withdraw(msg.sender, pending, amountInPool);\r\n    }\r\n\r\n\r\n   //\r\n /**\r\n     * @dev Deposit tokens into a pool and claim pending reward.\r\n     */\r\n    function deposit(uint256 poolId, uint256 amount) public {\r\n        require(\r\n            amount > 0,\r\n            \"ToshiCashFarm: Cannot deposit non-positive amount into pool\"\r\n        );\r\n        require(\r\n            poolId != 0,\r\n            \"ToshiCashFarm: There is no pool 0\"\r\n        );\r\n        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCashClaim(msg.sender, pending.mul(multiplier.multiplier.add(100)).div(100));\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.add(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        safePoolTransferFrom(msg.sender, address(this), amount, pool);\r\n\r\n        emit Deposit(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens from a pool and claim pending reward.\r\n     */\r\n    function withdraw(uint256 poolId, uint256 amount) public {\r\n        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool >= amount,\r\n            \"ToshiCashFarm: User does not have enough funds to withdraw from this pool\"\r\n        );\r\n        \r\n        require(\r\n            poolId != 0,\r\n            \"ToshiCashFarm: There is no pool 0\"\r\n        );\r\n\r\n        updatePool(poolId);\r\n\r\n        uint256 pending = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18)\r\n            .sub(user.coinsReceivedToDate);\r\n\r\n        if (pending > 0) {\r\n            safeToshiCashClaim(msg.sender, pending.mul(multiplier.multiplier.add(100)).div(100));\r\n        }\r\n\r\n        user.amountInPool = user.amountInPool.sub(amount);\r\n        user.coinsReceivedToDate = user\r\n            .amountInPool\r\n            .mul(pool.coinsEarnedPerToken)\r\n            .div(1e18);\r\n\r\n        if (amount > 0) {\r\n            safePoolTransfer(msg.sender, amount, pool);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw withdraws funds without claiming rewards.\r\n     *      This should only be used in emergencies.\r\n     */\r\n    function emergencyWithdraw(uint256 poolId) public {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        UserInfo storage user = userInfo[poolId][msg.sender];\r\n\r\n        require(\r\n            user.amountInPool > 0,\r\n            \"ToshiCashFarm: User has no funds to withdraw from this pool\"\r\n        );\r\n\r\n        uint256 amount = user.amountInPool;\r\n\r\n        user.amountInPool = 0;\r\n        user.coinsReceivedToDate = 0;\r\n\r\n        safePoolTransfer(msg.sender, amount, pool);\r\n\r\n        emit EmergencyWithdraw(msg.sender, poolId, amount);\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev Safe pool token transfer to prevent over-transfers.\r\n     */\r\n    function safePoolTransfer(\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(address(this));\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transfer(to, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe pool token transfer from to prevent over-transfers.\r\n     */\r\n    function safePoolTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        PoolInfo storage pool\r\n    ) internal {\r\n        uint256 tokenBalance = pool.token.balanceOf(from);\r\n        uint256 transferAmount = amount > tokenBalance ? tokenBalance : amount;\r\n\r\n        pool.token.transferFrom(from, to, transferAmount);\r\n    }\r\n    /**\r\n     * @dev Safe ToshiCoin transfer to prevent over-transfers.\r\n     */\r\n    function safeToshiCashClaim(address to, uint256 amount) internal {\r\n       uint256 coinsBalance = toshiCash.balanceOf(address(this));\r\n       uint256 claimAmount = amount > coinsBalance ? coinsBalance : amount;\r\n\r\n       toshiCash.claim(to, claimAmount);\r\n    }\r\n    \r\n\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ToshiCoinFarm\",\"name\":\"toshiCoinFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toshiCoinFarmDelegateAddress\",\"type\":\"address\"},{\"internalType\":\"contract ToshiCash\",\"name\":\"toshiCashAddress\",\"type\":\"address\"},{\"internalType\":\"contract ToshimonMinter\",\"name\":\"toshimonMinterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc1155\",\"type\":\"uint256\"}],\"name\":\"DepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc1155\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC1155\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentBoost\",\"type\":\"uint256\"}],\"name\":\"addERC1155Multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coinsPerDay\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eRC1155Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eRC1155MultiplierIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCoinsBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsEarnedPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCoinsPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshiCash\",\"outputs\":[{\"internalType\":\"contract ToshiCash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshiCoinFarm\",\"outputs\":[{\"internalType\":\"contract ToshiCoinFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshiCoinFarmDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshimonMinter\",\"outputs\":[{\"internalType\":\"contract ToshimonMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalPendingCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userERC155StakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsReceivedToDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoERC1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userMultiplierValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ToshiCashFarm","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000050c2ac66ed6da83a8a2eeeafd468d9def522e03a00000000000000000000000050c2ac66ed6da83a8a2eeeafd468d9def522e03a000000000000000000000000b6e0b9edc711c89b9259e5ff04af48255c500ead000000000000000000000000d2d2a84f0eb587f70e181a0c4b252c2c053f80cb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://384eef7703065f407636a0ad2f935ce53e9eaea0068685b15ac69f1de39adc5b"}]}