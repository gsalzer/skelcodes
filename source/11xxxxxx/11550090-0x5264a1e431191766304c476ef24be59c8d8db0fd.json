{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/MultisigDeal.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract MultisigDeal is Context {\r\n    using SafeMath for uint256;\r\n\r\n    address private _radix;\r\n    address private _seller;\r\n    address private _buyer;\r\n    uint256 private _amount;\r\n    string private _tokenName;\r\n    address private _token;\r\n    uint256 private _uid;\r\n    bool _executed;\r\n\r\n    modifier onlyRadix () {\r\n        require(_msgSender() == address(_radix), \"caller is not the radix\");\r\n        _;\r\n    }\r\n\r\n    constructor (uint256 uid, address radix, address buyer, uint256 amount, string memory tokenName, address token) public {\r\n        IERC20 candidate = IERC20(token);\r\n        require(candidate.totalSupply() > 0, \"token doesn't support ERC20\");\r\n        _radix = radix;\r\n        _seller = tx.origin;\r\n        _buyer = buyer;\r\n        _amount = amount;\r\n        _tokenName = tokenName;\r\n        _token = token;\r\n        _executed = false;\r\n        _uid = uid;\r\n    }\r\n\r\n    function transferToBuyer() external onlyRadix {\r\n        require(!_executed, \"contract always executed\");\r\n        IERC20 token = IERC20(_token);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance >= _amount, \"insufficient contract address balance\");\r\n\r\n        token.transfer(_buyer, _amount);\r\n        if (balance > _amount) {\r\n            token.transfer(_seller, balance.sub(_amount));\r\n        }\r\n        _executed = true;\r\n    }\r\n\r\n    function returnToSeller() external onlyRadix {\r\n        require(!_executed, \"contract always executed\");\r\n        IERC20 token = IERC20(_token);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            token.transfer(_seller, balance);\r\n        }\r\n        _executed = true;\r\n    }\r\n\r\n    function radixAddress() external view returns (address) {\r\n        return _radix;\r\n    }\r\n\r\n    function sellerAddress() external view returns (address) {\r\n        return _seller;\r\n    }\r\n\r\n    function buyerAddress() external view returns (address) {\r\n        return _buyer;\r\n    }\r\n\r\n    function amount() external view returns (uint256) {\r\n        return _amount;\r\n    }\r\n\r\n    function tokenName() external view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    function tokenAddress() external view returns (address) {\r\n        return _token;\r\n    }\r\n\r\n    function executed() external view returns (bool) {\r\n        return _executed;\r\n    }\r\n\r\n    function uid() external view returns (uint256) {\r\n        return _uid;\r\n    }\r\n}\r\n\r\n// File: contracts/Factory.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n// import \"./TestToken.sol\";\r\n\r\n\r\ncontract Factory is Context {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (uint256 => address) private _deals; // uid -> deals address\r\n    mapping (address => address[]) private _userDeals; // user address -> deals addresses\r\n\r\n    function createDeal(uint256 uid, address radix, address buyer, uint256 amount, string calldata tokenName, address token) external {\r\n        require(radix != address(0), \"radix can't be zero address\");\r\n        require(buyer != address(0), \"buyer can't be zero address\");\r\n        require(token != address(0), \"token can't be zero address\");\r\n        require(amount > 0, \"amount cat't be zero\");\r\n        require(_deals[uid] == address(0), \"uid already used, collision\");\r\n        MultisigDeal newDeal = new MultisigDeal(uid, radix, buyer, amount, tokenName, token);\r\n\r\n        _deals[uid] = address(newDeal);\r\n        _userDeals[_msgSender()].push(address(newDeal));\r\n        _userDeals[buyer].push(address(newDeal));\r\n    }\r\n\r\n    function getUserDeals(address user) external view returns (address[] memory) {\r\n         return _userDeals[user];\r\n    }\r\n\r\n    function getUserDealsWithFilter(address user, bool buyersOnly) external view returns (address[] memory) {\r\n        uint256 counter = 0;\r\n        uint256 length = _userDeals[user].length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            MultisigDeal deal = MultisigDeal(_userDeals[user][i]);\r\n            if ((deal.buyerAddress() == user && buyersOnly) ||\r\n                (deal.sellerAddress() == user && !buyersOnly)) {\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        address[] memory deals = new address[](counter);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            MultisigDeal deal = MultisigDeal(_userDeals[user][i]);\r\n            if ((deal.buyerAddress() == user && buyersOnly) ||\r\n                (deal.sellerAddress() == user && !buyersOnly)) {\r\n                deals[index] = _userDeals[user][i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return deals;\r\n    }\r\n\r\n    function getDealContract(uint256 uid) external view returns (address) {\r\n        return _deals[uid];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"radix\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"getDealContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDeals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"buyersOnly\",\"type\":\"bool\"}],\"name\":\"getUserDealsWithFilter\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9eeac4dc96fbced9c2b55b3516fb19e12fd4d945f9e6980b0cf1e710c1caff85"}]}