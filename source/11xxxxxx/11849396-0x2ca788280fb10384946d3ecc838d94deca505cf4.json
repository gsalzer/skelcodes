{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n# @notice A proxy contract to purchase insurance.\r\n# @author ujenjt\r\n# @license MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface StableSwapLike:\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256: payable\r\n\r\n\r\ninterface MooniswapLike:\r\n    def tokens(i: uint256) -> address: view\r\n    def getReturn(src: address, dst: address, amount: uint256) -> uint256: view\r\n    def swap(src: address, dst: address, amount: uint256, minReturn: uint256, referral: address): payable\r\n\r\n\r\ninterface UnslashedMarketLike:\r\n    def depositPremium(): payable\r\n\r\n\r\nowner: public(address)\r\nsteth_to_eth_est_slippage: public(uint256)\r\nldo_to_steth_est_slippage: public(uint256)\r\n\r\n\r\n# unslashed contract\r\nUNSLASHED_MARKET: constant(address) = 0x746d94f1161C991675Ede99aBCDb0412a4fEE43E\r\n\r\n# token addresses\r\nSTETH_TOKEN: constant(address) = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\nLDO_TOKEN: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\r\nUNSLASHED_PREMIUM_TOKEN: constant(address) = 0x2B76f72BFFcBE386EE6BD5F801f24f472dc9f633\r\n\r\n# pool addresses\r\nMOONISWAP_STETH_LDO: constant(address) = 0x1f629794B34FFb3B29FF206Be5478A52678b47ae\r\nCURVE_STETH_ETH: constant(address) = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022\r\n\r\n# curve STETH/ETH pool indexes\r\nETH_INDEX: constant(int128) = 0\r\nSTETH_INDEX: constant(int128) = 1\r\n\r\n\r\n@external\r\ndef __init__(_steth_to_eth_est_slippage: uint256, _ldo_to_steth_est_slippage: uint256):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _steth_to_eth_est_slippage percentage of addition to the steth amount to compensate the slippage during stETH -> ETH swap\r\n    @param _ldo_to_steth_est_slippage percentage of addition to the ldo amount to compensate the slippage during LDO -> stETH swap\r\n    \"\"\"\r\n    self.owner = msg.sender\r\n\r\n    # percentage is defined in basis points: 1 basis point is equal to 0.01%, 10000 is 100%\r\n    assert _steth_to_eth_est_slippage <= 10000, \"curve pool est slippage is over 100 percent\"\r\n    assert _ldo_to_steth_est_slippage <= 10000, \"1inch pool est slippage is over 100 percent\"\r\n    self.steth_to_eth_est_slippage = _steth_to_eth_est_slippage\r\n    self.ldo_to_steth_est_slippage = _ldo_to_steth_est_slippage\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    assert msg.value > 0 # dev: unexpected call\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_ldo_amount_to_swap(_expected_eth_amount: uint256, _steth_balance: uint256) -> uint256:\r\n    eth_after_initial_steth_swap: uint256 = 0\r\n    if _steth_balance > 0:\r\n        eth_after_initial_steth_swap = StableSwapLike(CURVE_STETH_ETH).get_dy(\r\n            STETH_INDEX,\r\n            ETH_INDEX,\r\n            _steth_balance\r\n        )\r\n\r\n    if eth_after_initial_steth_swap >= _expected_eth_amount:\r\n        return 0\r\n\r\n    eth_for_ldo: uint256 = _expected_eth_amount - eth_after_initial_steth_swap\r\n    steth_eth_spot_price: uint256 = StableSwapLike(CURVE_STETH_ETH).get_dy(\r\n        STETH_INDEX,\r\n        ETH_INDEX,\r\n        10 ** 18\r\n    )\r\n\r\n    steth_for_ldo: uint256 = (10 ** 18 * eth_for_ldo) / steth_eth_spot_price\r\n    steth_for_ldo += (steth_for_ldo * self.steth_to_eth_est_slippage) / 10000\r\n\r\n    ldo_steth_spot_price: uint256 = MooniswapLike(MOONISWAP_STETH_LDO).getReturn(\r\n        LDO_TOKEN,\r\n        STETH_TOKEN,\r\n        10 ** 18\r\n    )\r\n\r\n    ldo_to_swap: uint256 = (10 ** 18 * steth_for_ldo) / ldo_steth_spot_price\r\n    ldo_to_swap += (ldo_to_swap * self.ldo_to_steth_est_slippage) / 10000\r\n\r\n    return ldo_to_swap\r\n\r\n\r\n@external\r\ndef purchase(_insurance_price_in_eth: uint256, _min_insurance: uint256):\r\n    steth_balance: uint256 = ERC20(STETH_TOKEN).balanceOf(self)\r\n    ldo_balance: uint256 = ERC20(LDO_TOKEN).balanceOf(self)\r\n\r\n    owner_: address = self.owner\r\n\r\n    assert steth_balance + ldo_balance != 0, \"contract should have ldo or steth tokens\"\r\n    assert _insurance_price_in_eth != 0, \"_insurance_price_in_eth should be greater than 0\"\r\n\r\n    ldo_to_swap: uint256 = self._get_ldo_amount_to_swap(_insurance_price_in_eth, steth_balance)\r\n\r\n    assert ldo_balance >= ldo_to_swap, \"should have enough ldo\"\r\n\r\n    # swap LDO -> stETH if needed\r\n    if ldo_to_swap > 0:\r\n        ERC20(LDO_TOKEN).approve(MOONISWAP_STETH_LDO, ldo_to_swap)\r\n        MooniswapLike(MOONISWAP_STETH_LDO).swap(\r\n            LDO_TOKEN,\r\n            STETH_TOKEN,\r\n            ldo_to_swap,\r\n            0,\r\n            owner_\r\n        )\r\n\r\n    # swap stETH -> ETH\r\n    steth_balance = ERC20(STETH_TOKEN).balanceOf(self)\r\n    ERC20(STETH_TOKEN).approve(CURVE_STETH_ETH, steth_balance)\r\n    StableSwapLike(CURVE_STETH_ETH).exchange(\r\n        STETH_INDEX,\r\n        ETH_INDEX,\r\n        steth_balance,\r\n        _insurance_price_in_eth\r\n    )\r\n\r\n    # purchase insurance tokens and transfer them back to the agent\r\n    UnslashedMarketLike(UNSLASHED_MARKET).depositPremium(value=_insurance_price_in_eth)\r\n\r\n    insurance_token_amount: uint256 = ERC20(UNSLASHED_PREMIUM_TOKEN).balanceOf(self)\r\n\r\n    assert insurance_token_amount > _min_insurance, 'too few insurance tokens purchased'\r\n\r\n    ERC20(UNSLASHED_PREMIUM_TOKEN).transfer(owner_, insurance_token_amount)\r\n\r\n    # transfer the rest ETH and tokens to the agent\r\n    if self.balance != 0:\r\n        send(owner_, self.balance)\r\n\r\n    ldo_balance = ERC20(LDO_TOKEN).balanceOf(self)\r\n    if ldo_balance > 0:\r\n        ERC20(LDO_TOKEN).transfer(owner_, ldo_balance)\r\n\r\n\r\n@external\r\ndef transfer_ownership(_to: address):\r\n    \"\"\"\r\n    @notice Changes the contract owner. Can only be called by the current owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    self.owner = _to\r\n\r\n\r\n@external\r\ndef set_est_slippages(_steth_to_eth_est_slippage: uint256, _ldo_to_steth_est_slippage: uint256):\r\n    \"\"\"\r\n    @notice Changes the slippage. Can only be called by the current owner.\r\n    @param _steth_to_eth_est_slippage percentage of addition to the steth amount to compensate the slippage during stETH -> ETH swap\r\n    @param _ldo_to_steth_est_slippage percentage of addition to the ldo amount to compensate the slippage during LDO -> stETH swap\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n\r\n    # percentage is defined in basis points: 1 basis point is equal to 0.01%, 10000 is 100%\r\n    assert _steth_to_eth_est_slippage <= 10000, \"curve pool est slippage is over 100 percent\"\r\n    assert _ldo_to_steth_est_slippage <= 10000, \"1inch pool est slippage is over 100 percent\"\r\n    self.steth_to_eth_est_slippage = _steth_to_eth_est_slippage\r\n    self.ldo_to_steth_est_slippage = _ldo_to_steth_est_slippage\r\n\r\n\r\n@external\r\ndef recover_erc20(_token: address, _token_amount: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Transfers the the given ERC20 token and the whole\r\n        ETH balance from self to the owner of self.\r\n    \"\"\"\r\n    recipient: address = self.owner\r\n\r\n    ERC20(_token).transfer(recipient, _token_amount)\r\n\r\n    if self.balance != 0:\r\n        send(recipient, self.balance)","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_steth_to_eth_est_slippage\"},{\"type\":\"uint256\",\"name\":\"_ldo_to_steth_est_slippage\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"purchase\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_insurance_price_in_eth\"},{\"type\":\"uint256\",\"name\":\"_min_insurance\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":86042},{\"name\":\"transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36397},{\"name\":\"set_est_slippages\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_steth_to_eth_est_slippage\"},{\"type\":\"uint256\",\"name\":\"_ldo_to_steth_est_slippage\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":71593},{\"name\":\"recover_erc20\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"uint256\",\"name\":\"_token_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37201},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"steth_to_eth_est_slippage\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"ldo_to_steth_est_slippage\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}