{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\tif (newOwner != address(0)) {\r\n\t\t\towner = newOwner;\r\n\t\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//Tokenlock trade\r\n// ----------------------------------------------------------------------------\r\ncontract Tokenlock is Owned {\r\n  uint8 isLocked = 0;\r\n  event Freezed();\r\n  event UnFreezed();\r\n  modifier validLock {\r\n    require(isLocked == 0);\r\n    _;\r\n  }\r\n  function freeze() public onlyOwner {\r\n    isLocked = 1;\r\n    emit Freezed();\r\n  }\r\n  function unfreeze() public onlyOwner {\r\n    isLocked = 0;\r\n    emit UnFreezed();\r\n  }\r\n\r\n\r\n  mapping(address => bool) blacklist;\r\n  event LockUser(address indexed who);\r\n  event UnlockUser(address indexed who);\r\n\r\n  modifier permissionCheck {\r\n    require(!blacklist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function lockUser(address who) public onlyOwner {\r\n    blacklist[who] = true;\r\n    emit LockUser(who);\r\n  }\r\n\r\n  function unlockUser(address who) public onlyOwner {\r\n    blacklist[who] = false;\r\n    emit UnlockUser(who);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Timi is Tokenlock {\r\n\r\n    using SafeMath for uint;\r\n    string public name = \"Timr Finance\";\r\n    string public symbol = \"Tim2\";\r\n    uint8  public decimals = 18;\r\n    uint  internal _rate=100;\r\n    uint  internal _amount;\r\n    uint256  public totalSupply;\r\n\r\n    //bank\r\n    mapping(address => uint)  bank_balances;\r\n    //eth\r\n    mapping(address => uint) activeBalances;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\r\n    event Burn(address indexed _from, uint256 value);\r\n\t// Called when new token are issued\r\n\tevent Issue(uint amount);\r\n\t// Called when tokens are redeemed\r\n\tevent Redeem(uint amount);\r\n    //Called when sent\r\n    event Sent(address from, address to, uint amount);\r\n    event FallbackCalled(address sent, uint amount);\r\n\r\n    \t/**\r\n\t* @dev Fix for the ERC20 short address attack.\r\n\t*/\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\trequire(!(msg.data.length < size + 4));\r\n\t\t_;\r\n\t}\r\n\r\n    constructor (uint totalAmount) public{\r\n        totalSupply =  totalAmount * 10**uint256(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n/*    function totalSupply() public  view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }*/\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfBank(address tokenOwner) public  view returns (uint balance) {\r\n        return bank_balances[tokenOwner];\r\n    }\r\n\r\n    function balanceOfReg(address tokenOwner) public  view returns (uint balance) {\r\n        return activeBalances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public  view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public   view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Issue a new amount of tokens\r\n\t// these tokens are deposited into the owner address\r\n\t// @param _amount Number of tokens to be issued\r\n\t// ------------------------------------------------------------------------\r\n\tfunction issue(uint amount) public onlyOwner {\r\n\t\trequire(totalSupply + amount > totalSupply);\r\n\t\trequire(balances[owner] + amount > balances[owner]);\r\n\r\n\t\tbalances[owner] += amount;\r\n\t\ttotalSupply += amount;\r\n\t\temit Issue(amount);\r\n\t}\r\n\t// ------------------------------------------------------------------------\r\n\t// Redeem tokens.\r\n\t// These tokens are withdrawn from the owner address\r\n\t// if the balance must be enough to cover the redeem\r\n\t// or the call will fail.\r\n\t// @param _amount Number of tokens to be issued\r\n\t// ------------------------------------------------------------------------\r\n\tfunction redeem(uint amount) public onlyOwner {\r\n\t\trequire(totalSupply >= amount);\r\n\t\trequire(balances[owner] >= amount);\r\n\r\n\t\ttotalSupply -= amount;\r\n\t\tbalances[owner] -= amount;\r\n\t\temit Redeem(amount);\r\n\t}\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public  validLock permissionCheck onlyPayloadSize(2 * 32) returns (bool success) {\r\n        require(to != address(0));\r\n        require(balances[msg.sender] >= tokens && tokens > 0);\r\n        require(balances[to] + tokens >= balances[to]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public  validLock permissionCheck onlyPayloadSize(3 * 32) returns (bool success) {\r\n        require(to != address(0));\r\n\r\n        require(balances[from] >= tokens && tokens > 0);\r\n        require(balances[to] + tokens >= balances[to]);\r\n\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n        if(allowed[from][msg.sender] > 0)\r\n        {\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        }\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n        // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferStore(address from, address to, uint tokens) public  validLock permissionCheck onlyPayloadSize(3 * 32) returns (bool success) {\r\n        require(to != address(0));\r\n\r\n        require(balances[from] >= tokens && tokens > 0);\r\n        require(balances[to] + tokens >= balances[to]);\r\n\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n        if(allowed[from][msg.sender] > 0)\r\n        {\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        }\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n\r\n        bank_balances[from] = bank_balances[from].add(tokens);\r\n\r\n\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public  onlyOwner {\r\n        // return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n        address(uint160(tokenAddress)).transfer(tokens);\r\n        emit Sent(owner,tokenAddress,tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //  ERC20 withdraw\r\n    // -----------------------------------------\r\n    function withdraw() onlyOwner public {\r\n        msg.sender.transfer(address(this).balance);\r\n        _amount = 0;\r\n    }\r\n\r\n    function showAmount() onlyOwner public view returns (uint) {\r\n        return _amount;\r\n    }\r\n\r\n    function showBalance() onlyOwner public view returns (uint) {\r\n        return owner.balance;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //  ERC20 set rate\r\n    // -----------------------------------------\r\n    function set_rate(uint _vlue) public onlyOwner{\r\n        require(_vlue > 0);\r\n        _rate = _vlue;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //  ERC20 tokens\r\n    // -----------------------------------------\r\n    receive() external  payable{\r\n        /* require(balances[owner] >= msg.value && msg.value > 0);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value * _rate);\r\n\t\tbalances[owner] = balances[owner].sub(msg.value * _rate); */\r\n        _amount=_amount.add(msg.value);\r\n        activeBalances[msg.sender] = activeBalances[msg.sender].add(msg.value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //  ERC20 recharge\r\n    // -----------------------------------------\r\n    function recharge() public payable{\r\n        _amount=_amount.add(msg.value);\r\n        activeBalances[msg.sender] = activeBalances[msg.sender].add(msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LockUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"UnlockUser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOfBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOfReg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vlue\",\"type\":\"uint256\"}],\"name\":\"set_rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferStore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Timi","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000200b20","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d6b4a74ce050d3519a533e05a6ef4de341b6305c15be81369ecaf859019ec7b9"}]}