{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\nabstract contract ERC165 is IERC165 {\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\"},\"IERC1155Receiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface IERC1155Receiver is IERC165 {\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"},\"IEthItem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\ninterface IEthItem {\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    function burnBatch(\\n        uint256[] calldata objectIds,\\n        uint256[] calldata amounts\\n    ) external;\\n}\"},\"WhereIsMyDragonTreasure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IEthItem.sol\\\";\\n\\ncontract WhereIsMyDragonTreasure is IERC1155Receiver, ERC165 {\\n\\n    address private _source;\\n    uint256 private _legendaryCard;\\n\\n    uint256 private _singleReward;\\n    uint256 private _legendaryCardAmount;\\n    uint256 private _startBlock;\\n\\n    uint256 private _redeemed;\\n\\n    constructor(address source, uint256 legendaryCard, uint256 legendaryCardAmount, uint256 startBlock) {\\n        _source = source;\\n        _legendaryCard = legendaryCard;\\n        _legendaryCardAmount = legendaryCardAmount;\\n        _startBlock = startBlock;\\n        _registerInterfaces();\\n    }\\n\\n    function _registerInterfaces() private {\\n        _registerInterface(this.onERC1155Received.selector);\\n        _registerInterface(this.onERC1155BatchReceived.selector);\\n    }\\n\\n    receive() external payable {\\n        if(block.number \\u003e= _startBlock) {\\n            payable(msg.sender).transfer(msg.value);\\n            return;\\n        }\\n        _singleReward = address(this).balance / _legendaryCardAmount;\\n    }\\n\\n    function data() public view returns(uint256 balance, uint256 singleReward, uint256 startBlock, uint256 redeemed) {\\n        balance = address(this).balance;\\n        singleReward = _singleReward;\\n        startBlock = _startBlock;\\n        redeemed = _redeemed;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 objectId,\\n        uint256 amount,\\n        bytes memory\\n    )\\n        public override\\n        returns(bytes4) {\\n        uint256[] memory objectIds = new uint256[](1);\\n        objectIds[0] = objectId;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n        _checkBurnAndTransfer(from, objectIds, amounts);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] memory objectIds,\\n        uint256[] memory amounts,\\n        bytes memory\\n    )\\n        public override\\n        returns(bytes4) {\\n        _checkBurnAndTransfer(from, objectIds, amounts);\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _checkBurnAndTransfer(address from, uint256[] memory objectIds, uint256[] memory amounts) private {\\n        require(msg.sender == _source, \\\"Unauthorized Action\\\");\\n        require(block.number \\u003e= _startBlock, \\\"Redeem Period still not started\\\");\\n        for(uint256 i = 0; i \\u003c objectIds.length; i++) {\\n            require(objectIds[i] == _legendaryCard, \\\"Wrong Card!\\\");\\n            _redeemed += amounts[i];\\n            payable(from).transfer(_singleReward * amounts[i]);\\n        }\\n        IEthItem(_source).burnBatch(objectIds, amounts);\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"legendaryCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendaryCardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WhereIsMyDragonTreasure","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b6ab68a44ecc9fb2244aab83eb2f6dba54205ebf00000000000000000000000022e6559f495f97af51ff56719cdff80f65a0b93a00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000cd255c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a7d3fb06ef9c6b1647d296c2db9c56917fc170c451cc5d7b255e249eeda83e1d"}]}