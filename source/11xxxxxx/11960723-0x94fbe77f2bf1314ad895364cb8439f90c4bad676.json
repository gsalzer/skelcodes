{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\presto\\PrestoData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct PrestoOperation {\r\n\r\n    address inputTokenAddress;\r\n    uint256 inputTokenAmount;\r\n\r\n    address ammPlugin;\r\n    address[] liquidityPoolAddresses;\r\n    address[] swapPath;\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n\r\n    address[] receivers;\r\n    uint256[] receiversPercentages;\r\n}\r\n\r\n// File: contracts\\presto\\IPresto.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IPresto {\r\n\r\n    function ONE_HUNDRED() external view returns (uint256);\r\n    function doubleProxy() external view returns (address);\r\n    function feePercentage() external view returns (uint256);\r\n\r\n    function feePercentageInfo() external view returns (uint256, address);\r\n\r\n    function setDoubleProxy(address _doubleProxy) external;\r\n\r\n    function setFeePercentage(uint256 _feePercentage) external;\r\n\r\n    function execute(PrestoOperation[] memory operations) external payable;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\index\\IIndex.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IIndex {\r\n\r\n    function _doubleProxy() external view returns(address);\r\n\r\n    function collection() external view returns(address);\r\n\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    function setCollectionUri(string calldata uri) external;\r\n\r\n    function info(uint256 objectId, uint256 value) external view returns(address[] memory _tokens, uint256[] memory _amounts);\r\n\r\n    function mint(string calldata name, string calldata symbol, string calldata uri, address[] calldata _tokens, uint256[] calldata _amounts, uint256 value, address receiver) external payable returns(uint256 objectId, address interoperableInterfaceAddress);\r\n\r\n    function mint(uint256 objectId, uint256 value, address receiver) external payable;\r\n}\r\n\r\n// File: contracts\\presto\\util\\ERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract ERC1155Receiver {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n        _registerInterface(\r\n            ERC1155Receiver(0).onERC1155Received.selector ^\r\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts\\presto\\util\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC1155 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\presto\\util\\IERC20.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\presto\\util\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20 {\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: contracts\\presto\\util\\IEthItem.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\ninterface IEthItem is IERC1155 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\presto\\util\\INativeV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface INativeV1 is IEthItem {\r\n\r\n    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\r\n\r\n    function extension() external view returns (address extensionAddress);\r\n\r\n    function canMint(address operator) external view returns (bool result);\r\n\r\n    function isEditable(uint256 objectId) external view returns (bool result);\r\n\r\n    function releaseExtension() external;\r\n\r\n    function uri() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 objectId, uint256 amount) external;\r\n\r\n    function makeReadOnly(uint256 objectId) external;\r\n\r\n    function setUri(string calldata newUri) external;\r\n\r\n    function setUri(uint256 objectId, string calldata newUri) external;\r\n}\r\n\r\n// File: contracts\\presto\\verticalizations\\IndexPresto.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IndexPresto is ERC1155Receiver {\r\n\r\n    mapping(address => uint256) private _tokenIndex;\r\n    address[] private _tokensToTransfer;\r\n    uint256[] private _tokenAmounts;\r\n    PrestoOperation[] private _operations;\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function mint(\r\n        address prestoAddress,\r\n        PrestoOperation[] memory operations,\r\n        address indexAddress,\r\n        bytes memory indexData\r\n    ) public payable returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        uint256 eth = _transferToMeAndCheckAllowance(operations, prestoAddress);\r\n        IPresto(prestoAddress).execute{value : eth}(_operations);\r\n        (objectId, interoperableInterfaceAddress) = _mint(indexAddress, indexData);\r\n        _flushAndClear(interoperableInterfaceAddress, msg.sender);\r\n    }\r\n\r\n    function mint(\r\n        address prestoAddress,\r\n        PrestoOperation[] memory operations,\r\n        address indexAddress,\r\n        uint256 objectId, uint256 value, address receiver) public payable {\r\n        uint256 eth = _transferToMeAndCheckAllowance(operations, prestoAddress);\r\n        IPresto(prestoAddress).execute{value : eth}(_operations);\r\n        (address[] memory tokenAddresses, uint256[] memory amounts) = IIndex(indexAddress).info(objectId, value);\r\n        _approve(indexAddress, tokenAddresses, amounts);\r\n        IIndex(indexAddress).mint{value : _balanceOf(address(0))}(objectId, value, receiver);\r\n        _flushAndClear(address(INativeV1(IIndex(indexAddress).collection()).asInteroperable(objectId)), msg.sender);\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n            (address prestoAddress, PrestoOperation[] memory operations, bytes memory payload) = abi.decode(data, (address, PrestoOperation[], bytes));\r\n            INativeV1(msg.sender).safeTransferFrom(address(this), INativeV1(msg.sender).extension(), id, value, payload);\r\n            uint256[] memory ids = new uint256[](1);\r\n            ids[0] = id;\r\n            _afterBurn(prestoAddress, operations, ids, from);\r\n            return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n            (address prestoAddress, PrestoOperation[] memory operations, bytes memory payload) = abi.decode(data, (address, PrestoOperation[], bytes));\r\n            INativeV1(msg.sender).safeBatchTransferFrom(address(this), INativeV1(msg.sender).extension(), ids, values, payload);\r\n            _afterBurn(prestoAddress, operations, ids, from);\r\n            return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function _afterBurn(\r\n        address prestoAddress,\r\n        PrestoOperation[] memory operations,\r\n        uint256[] memory ids,\r\n        address from) private {\r\n            IPresto(prestoAddress).execute{value : _collectTokensAndCheckAllowance(operations, prestoAddress)}(operations);\r\n            for(uint256 i = 0; i < ids.length; i++) {\r\n                _collectTokenData(address(INativeV1(msg.sender).asInteroperable(ids[i])), 1);\r\n            }\r\n            _flushAndClear(address(0), from);\r\n    }\r\n\r\n    function _mint(address indexAddress, bytes memory indexData) private returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        (string memory name, string memory symbol, string memory uri, address[] memory _tokens, uint256[] memory _amounts, uint256 value, address receiver) = abi.decode(indexData, (string, string, string, address[], uint256[], uint256, address));\r\n        _approve(indexAddress, _tokens, new uint256[](0));\r\n        (objectId, interoperableInterfaceAddress) = IIndex(indexAddress).mint{value : _balanceOf(address(0))}(name, symbol, uri, _tokens, _amounts, value, receiver);\r\n    }\r\n\r\n    function _approve(address indexAddress, address[] memory tokenAddresses, uint256[] memory amounts) private {\r\n        for(uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            _safeApprove(tokenAddresses[i], indexAddress, amounts.length > 0 ? amounts[i] : _balanceOf(tokenAddresses[i]));\r\n        }\r\n    }\r\n\r\n    function _flushAndClear(address indexInteroperableInterfaceAddress, address receiver) private {\r\n        _safeTransfer(indexInteroperableInterfaceAddress, receiver, _balanceOf(indexInteroperableInterfaceAddress));\r\n        if(_tokensToTransfer.length == 0 || _tokensToTransfer[_tokenIndex[address(0)]] != address(0)) {\r\n            _safeTransfer(address(0), receiver, address(this).balance);\r\n        }\r\n        _flushAndClear();\r\n    }\r\n\r\n    function _transferToMeAndCheckAllowance(PrestoOperation[] memory operations, address operator) private returns (uint256 eth) {\r\n        eth = _collectTokensAndCheckAllowance(operations, operator);\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            if(_tokensToTransfer[i] == address(0)) {\r\n                require(msg.value == _tokenAmounts[i], \"Incorrect ETH value\");\r\n            } else {\r\n                _safeTransferFrom(_tokensToTransfer[i], msg.sender, address(this), _tokenAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _collectTokensAndCheckAllowance(PrestoOperation[] memory operations, address operator) private returns (uint256 eth) {\r\n        for(uint256 i = 0; i < operations.length; i++) {\r\n            PrestoOperation memory operation = operations[i];\r\n            require(operation.ammPlugin == address(0) || operation.liquidityPoolAddresses.length > 0, \"AddLiquidity not allowed\"); \r\n            _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount);\r\n            if(operation.ammPlugin != address(0)) {\r\n                _operations.push(operation);\r\n                if(operation.inputTokenAddress == address(0) || operation.enterInETH) {\r\n                    eth += operation.inputTokenAmount;\r\n                }\r\n            }\r\n        }\r\n        for(uint256 i = 0 ; i < _tokensToTransfer.length; i++) {\r\n            if(_tokensToTransfer[i] != address(0)) {\r\n                _safeApprove(_tokensToTransfer[i], operator, _tokenAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount) private {\r\n        if(inputTokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 position = _tokenIndex[inputTokenAddress];\r\n\r\n        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\r\n            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\r\n            _tokensToTransfer.push(inputTokenAddress);\r\n            _tokenAmounts.push(0);\r\n        }\r\n        _tokenAmounts[position] = _tokenAmounts[position] + inputTokenAmount;\r\n    }\r\n\r\n    function _flushAndClear() private {\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            _safeTransfer(_tokensToTransfer[i], msg.sender, _balanceOf(_tokensToTransfer[i]));\r\n            delete _tokenIndex[_tokensToTransfer[i]];\r\n        }\r\n        delete _tokensToTransfer;\r\n        delete _tokenAmounts;\r\n        delete _operations;\r\n    }\r\n\r\n    function _balanceOf(address tokenAddress) private view returns(uint256) {\r\n        if(tokenAddress == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            (bool result,) = to.call{value:value}(\"\");\r\n            require(result, \"ETH transfer failed\");\r\n            return;\r\n        }\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prestoAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PrestoOperation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"indexAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"indexData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interoperableInterfaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prestoAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PrestoOperation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"indexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IndexPresto","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fbac7ca7322ee9fb008d50de0cdb002d8f09037ba885bd7a49299fc49de03e42"}]}