{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"HXYF.sol\":{\"content\":\"//HXYF.sol\\r\\n//\\r\\n//\\r\\n\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n  function symbol() external pure returns (string memory);\\r\\n  function decimals() external pure returns (uint8);\\r\\n  function totalSupply() external view returns (uint);\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n      address indexed sender,\\r\\n      uint amount0In,\\r\\n      uint amount1In,\\r\\n      uint amount0Out,\\r\\n      uint amount1Out,\\r\\n      address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n  function skim(address to) external;\\r\\n  function sync() external;\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n    //when a user freezes tokens\\r\\n    event LpFreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        address indexed lpToken\\r\\n    );\\r\\n\\r\\n    //when a user unfreezes tokens\\r\\n    event LpUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        address indexed lpToken\\r\\n    );\\r\\n    \\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HXYFINANCE TOKEN CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HXYFINANCE is IERC20, TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeMath for uint32;\\r\\n    using SafeMath for uint16;\\r\\n    using SafeMath for uint8;\\r\\n\\r\\n    using SafeERC20 for HXYFINANCE;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    //uniswap setup\\r\\n    address public uniETHHXYF = address(0);\\r\\n    address public uniETHHXY = address(0x8349fBbd8F229b0B6298e7c14b3778eaDf4426DD);\\r\\n    address public uniHEXHXB = address(0x938Af9DE4Fe7Fd683F9eDf29E12457181E01Ca46);\\r\\n    address public uniETHHXP = address(0x55dB1Ca87CB8f0e6AaEa44BeE5E6DcE5B72DA9c0);\\r\\n    IUniswapV2Pair internal uniETHHXYFInterface = IUniswapV2Pair(uniETHHXYF);\\r\\n    IUniswapV2Pair internal uniETHHXYInterface = IUniswapV2Pair(uniETHHXY);\\r\\n    IUniswapV2Pair internal uniHEXHXBInterface = IUniswapV2Pair(uniHEXHXB);\\r\\n    IUniswapV2Pair internal uniETHHXPInterface = IUniswapV2Pair(uniETHHXP);\\r\\n\\r\\n    //apy setup\\r\\n    uint32 public hxyfApy = 100;\\r\\n    uint32 public hxyApy = 333;\\r\\n    uint32 public hxbApy = 500;\\r\\n    uint32 public hxpApy = 1000;\\r\\n    uint32 public globalApy = 100;\\r\\n    uint16 public halvening = 1;\\r\\n    \\r\\n    //lp freeze setup\\r\\n    uint constant internal MINUTESECONDS = 60;\\r\\n    uint256 public totalHxyfLpFrozen = 0;\\r\\n    uint256 public totalHxyLpFrozen = 0;\\r\\n    uint256 public totalHxbLpFrozen = 0;\\r\\n    uint256 public totalHxpLpFrozen = 0;\\r\\n    \\r\\n    mapping (address =\\u003e uint) public hxyfLpFrozenBalances;//balance of ETHHXYF LP frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public hxyLpFrozenBalances;//balance of ETHHXY LP frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public hxbLpFrozenBalances;//balance of HEXHXB LP frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public hxpLpFrozenBalances;//balance of HXPETH LP frozen mapped by user\\r\\n\\r\\n    //tokenomics\\r\\n    uint256 internal _totalSupply;\\r\\n    string public constant name = \\\"hxy.finance\\\";\\r\\n    string public constant symbol = \\\"HXYF\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    \\r\\n    //airdrop contract\\r\\n    address payable public airdropContract = address(0);\\r\\n\\r\\n    //admin\\r\\n    address payable internal _p1 = 0x55db05F51b31F45EBEDefdD4467ebEc2D026a820;\\r\\n    address payable internal _p2 = 0x993e189a1b8B9D0D8259E09479ADD07c084b8e75;\\r\\n    \\r\\n    bool private sync;\\r\\n    \\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    \\r\\n    mapping (address =\\u003e Farmer) public farmer;\\r\\n    struct Farmer{\\r\\n        uint256 hxyfFreezeStartTimestamp;\\r\\n        uint256 hxyFreezeStartTimestamp;\\r\\n        uint256 hxbFreezeStartTimestamp;\\r\\n        uint256 hxpFreezeStartTimestamp;\\r\\n        uint256 totalFarmedHxyf;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!sync, \\\"Sync lock\\\");\\r\\n        sync = true;\\r\\n        _;\\r\\n        sync = false;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 initialTokens) public {\\r\\n        admins[_p1] = true;\\r\\n        admins[_p2] = true;\\r\\n        admins[msg.sender] = true;\\r\\n        //mint initial tokens\\r\\n        mintInitialTokens(initialTokens);\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable{\\r\\n        donate();\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n     \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply unless mintBLock is true\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        uint256 amt = amount;\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _totalSupply = _totalSupply.add(amt);\\r\\n        _balances[account] = _balances[account].add(amt);\\r\\n        emit Transfer(address(0), account, amt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //mint HXYF initial tokens (only ever called in constructor)\\r\\n    function mintInitialTokens(uint amount)\\r\\n        internal\\r\\n        synchronized\\r\\n    {\\r\\n        _mint(_p1, amount.div(4).mul(3));//mint HXYF to p1\\r\\n        _mint(_p2, amount.div(4));//mint HXYF to p2\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - HXYF CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n    \\r\\n    //freeze ETHHXYF LP tokens to contract, approval needed\\r\\n    function FreezeEthHxyfLP(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(lpBalance(uniETHHXYF) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isHarvestable(msg.sender, uniETHHXYF)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        //update balances\\r\\n        hxyfLpFrozenBalances[msg.sender] = hxyfLpFrozenBalances[msg.sender].add(amt);\\r\\n        totalHxyfLpFrozen = totalHxyfLpFrozen.add(amt);\\r\\n        farmer[msg.sender].hxyfFreezeStartTimestamp = now;\\r\\n        uniETHHXYFInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        emit LpFreeze(msg.sender, amt, uniETHHXYF);\\r\\n    }\\r\\n    \\r\\n    //unfreeze ETHHXYF LP tokens from contract\\r\\n    function UnfreezeEthHxyfLP()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hxyfLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        uint amt = hxyfLpFrozenBalances[msg.sender];\\r\\n        if(isHarvestable(msg.sender, uniETHHXYF)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        hxyfLpFrozenBalances[msg.sender] = 0;\\r\\n        farmer[msg.sender].hxyfFreezeStartTimestamp = 0;\\r\\n        totalHxyfLpFrozen = totalHxyfLpFrozen.sub(amt);\\r\\n        uniETHHXYFInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit LpUnfreeze(msg.sender, amt, uniETHHXYF);\\r\\n    }\\r\\n    \\r\\n    //freeze ETHHXY LP tokens to contract, approval needed\\r\\n    function FreezeEthHxyLP(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(lpBalance(uniETHHXY) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isHarvestable(msg.sender, uniETHHXY)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        //update balances\\r\\n        hxyLpFrozenBalances[msg.sender] = hxyLpFrozenBalances[msg.sender].add(amt);\\r\\n        totalHxyLpFrozen = totalHxyLpFrozen.add(amt);\\r\\n        farmer[msg.sender].hxyFreezeStartTimestamp = now;\\r\\n        uniETHHXYInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        emit LpFreeze(msg.sender, amt, uniETHHXY);\\r\\n    }\\r\\n    \\r\\n    //unfreeze ETHHXY LP tokens from contract\\r\\n    function UnfreezeEthHxyLP()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hxyLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        uint amt = hxyLpFrozenBalances[msg.sender];\\r\\n        if(isHarvestable(msg.sender, uniETHHXY)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        hxyLpFrozenBalances[msg.sender] = 0;\\r\\n        farmer[msg.sender].hxyFreezeStartTimestamp = 0;\\r\\n        totalHxyLpFrozen = totalHxyLpFrozen.sub(amt);\\r\\n        uniETHHXYInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit LpUnfreeze(msg.sender, amt, uniETHHXY);\\r\\n    }\\r\\n    \\r\\n    //freeze HEXHXB LP tokens to contract, approval needed\\r\\n    function FreezeHexHxbLP(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(lpBalance(uniHEXHXB) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isHarvestable(msg.sender, uniHEXHXB)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        //update balances\\r\\n        hxbLpFrozenBalances[msg.sender] = hxbLpFrozenBalances[msg.sender].add(amt);\\r\\n        totalHxbLpFrozen = totalHxbLpFrozen.add(amt);\\r\\n        farmer[msg.sender].hxbFreezeStartTimestamp = now;\\r\\n        uniHEXHXBInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        emit LpFreeze(msg.sender, amt, uniHEXHXB);\\r\\n    }\\r\\n    \\r\\n    //unfreeze HEXHXB LP tokens from contract\\r\\n    function UnfreezeHexHxbLP()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hxbLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        uint amt = hxbLpFrozenBalances[msg.sender];\\r\\n        if(isHarvestable(msg.sender, uniHEXHXB)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        hxbLpFrozenBalances[msg.sender] = 0;\\r\\n        farmer[msg.sender].hxbFreezeStartTimestamp = 0;\\r\\n        totalHxbLpFrozen = totalHxbLpFrozen.sub(amt);\\r\\n        uniHEXHXBInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit LpUnfreeze(msg.sender, amt, uniHEXHXB);\\r\\n    }\\r\\n    \\r\\n    //freeze HXPETH LP tokens to contract, approval needed\\r\\n    function FreezeEthHxpLP(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(lpBalance(uniETHHXP) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isHarvestable(msg.sender, uniETHHXP)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        //update balances\\r\\n        hxpLpFrozenBalances[msg.sender] = hxpLpFrozenBalances[msg.sender].add(amt);\\r\\n        totalHxpLpFrozen = totalHxpLpFrozen.add(amt);\\r\\n        farmer[msg.sender].hxpFreezeStartTimestamp = now;\\r\\n        uniETHHXPInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        emit LpFreeze(msg.sender, amt, uniETHHXP);\\r\\n    }\\r\\n    \\r\\n    //unfreeze HXPETH LP tokens from contract\\r\\n    function UnfreezeEthHxpLP()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hxpLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        uint amt = hxpLpFrozenBalances[msg.sender];\\r\\n        if(isHarvestable(msg.sender, uniETHHXP)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        hxpLpFrozenBalances[msg.sender] = 0;\\r\\n        farmer[msg.sender].hxpFreezeStartTimestamp = 0;\\r\\n        totalHxpLpFrozen = totalHxpLpFrozen.sub(amt);\\r\\n        uniETHHXPInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit LpUnfreeze(msg.sender, amt, uniETHHXP);\\r\\n    }\\r\\n\\r\\n    function harvest(uint rewards)\\r\\n        internal\\r\\n    {\\r\\n        _mint(msg.sender, rewards);\\r\\n        _mint(airdropContract, rewards);\\r\\n        _mint(_p1, rewards.div(2));\\r\\n        _mint(_p2, rewards.div(2));\\r\\n    }\\r\\n\\r\\n    //harvest HXYF from ETHHXYF lp\\r\\n    function HarvestHxyfLp()\\r\\n        public\\r\\n    {\\r\\n        require(hxyfLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient lp balance\\\");//ensure user has enough lp frozen \\r\\n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\\r\\n        if(interest \\u003e 0){\\r\\n            harvest(interest);\\r\\n            farmer[msg.sender].hxyfFreezeStartTimestamp = now;\\r\\n            farmer[msg.sender].totalFarmedHxyf += interest;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //harvest HXYF from ETHHXY lp\\r\\n    function HarvestHxyLp()\\r\\n        public\\r\\n    {\\r\\n        require(hxyLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient lp balance\\\");//ensure user has enough lp frozen \\r\\n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\\r\\n        if(interest \\u003e 0){\\r\\n            harvest(interest);\\r\\n            farmer[msg.sender].hxyFreezeStartTimestamp = now;\\r\\n            farmer[msg.sender].totalFarmedHxyf += interest;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //harvest HXYF from HEXHXB lp\\r\\n    function HarvestHxbLp()\\r\\n        public\\r\\n    {\\r\\n        require(hxbLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient lp balance\\\");//ensure user has enough lp frozen \\r\\n        uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\\r\\n        if(interest \\u003e 0){\\r\\n            harvest(interest);\\r\\n            farmer[msg.sender].hxbFreezeStartTimestamp = now;\\r\\n            farmer[msg.sender].totalFarmedHxyf += interest;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //harvest HXYF from HEXHXP lp\\r\\n    function HarvestHxpLp()\\r\\n        public\\r\\n    {\\r\\n        require(hxpLpFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient lp balance\\\");//ensure user has enough lp frozen \\r\\n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\\r\\n        if(interest \\u003e 0){\\r\\n            harvest(interest);\\r\\n            farmer[msg.sender].hxpFreezeStartTimestamp = now;\\r\\n            farmer[msg.sender].totalFarmedHxyf += interest;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //returns freezing reward in HXY\\r\\n    function calcHarvestRewards(address _user, address _lp)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {   \\r\\n        if(_lp == uniETHHXYF){\\r\\n            return ((hxyfLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxyfApy)).mul(minsPastFreezeTime(_user, _lp)));\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            return ((hxyLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxyApy)).mul(minsPastFreezeTime(_user, _lp))); \\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            return ((hxbLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxbApy)).mul(minsPastFreezeTime(_user, _lp)));\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            return ((hxpLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxpApy)).mul(minsPastFreezeTime(_user, _lp)));\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n    //returns amount of minutes past since lp freeze start - min 1 minute\\r\\n    function minsPastFreezeTime(address _user, address _lp)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        if(_lp == uniETHHXYF){\\r\\n            if(farmer[_user].hxyfFreezeStartTimestamp == 0){\\r\\n                return 0;\\r\\n            }\\r\\n            uint minsPast = now.sub(farmer[_user].hxyfFreezeStartTimestamp).div(MINUTESECONDS);\\r\\n            if(minsPast \\u003e= 1){\\r\\n                return minsPast;// returns 0 if under 1 min passed\\r\\n            }\\r\\n            else{\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            if(farmer[_user].hxyFreezeStartTimestamp == 0){\\r\\n                return 0;\\r\\n            }\\r\\n            uint minsPast = now.sub(farmer[_user].hxyFreezeStartTimestamp).div(MINUTESECONDS);\\r\\n            if(minsPast \\u003e= 1){\\r\\n                return minsPast;// returns 0 if under 1 min passed\\r\\n            }\\r\\n            else{\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            if(farmer[_user].hxbFreezeStartTimestamp == 0){\\r\\n                return 0;\\r\\n            }\\r\\n            uint minsPast = now.sub(farmer[_user].hxbFreezeStartTimestamp).div(MINUTESECONDS);\\r\\n            if(minsPast \\u003e= 1){\\r\\n                return minsPast;// returns 0 if under 1 min passed\\r\\n            }\\r\\n            else{\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            if(farmer[_user].hxpFreezeStartTimestamp == 0){\\r\\n                return 0;\\r\\n            }\\r\\n            uint minsPast = now.sub(farmer[_user].hxpFreezeStartTimestamp).div(MINUTESECONDS);\\r\\n            if(minsPast \\u003e= 1){\\r\\n                return minsPast;// returns 0 if under 1 min passed\\r\\n            }\\r\\n            else{\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function burnHxyf(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"value must be greater than 0\\\");\\r\\n        _burn(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n    \\r\\n    function newHalvening()\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {   \\r\\n        halvening = halvening * 2;\\r\\n    }\\r\\n\\r\\n    function setGlobalApy(uint32 _apy)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {   \\r\\n          globalApy = _apy;\\r\\n    }\\r\\n    \\r\\n    function setApy(uint32 _apy, address _lp)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        if(_lp == uniETHHXYF){\\r\\n            hxyfApy = _apy;\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            hxyApy = _apy;\\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            hxbApy = _apy;\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            hxpApy = _apy;\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //set airdropcontract for can only be set once\\r\\n    function setAirdropContract(address payable _airdropContract)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(_airdropContract != address(0), \\\"cannot be null address\\\");\\r\\n        airdropContract = _airdropContract;\\r\\n    }\\r\\n\\r\\n    function setHXYFExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniETHHXYF = exchange;\\r\\n        uniETHHXYFInterface = IUniswapV2Pair(uniETHHXYF);\\r\\n    }\\r\\n        function setHXYExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniETHHXY = exchange;\\r\\n        uniETHHXYInterface = IUniswapV2Pair(uniETHHXY);\\r\\n    }\\r\\n        function setHXBExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniHEXHXB = exchange;\\r\\n        uniHEXHXBInterface = IUniswapV2Pair(uniHEXHXB);\\r\\n    }\\r\\n        function setHXPExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniETHHXP = exchange;\\r\\n        uniETHHXPInterface = IUniswapV2Pair(uniETHHXP);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //total HXY frozen in contract\\r\\n    function totalFrozenLpBalance(address _lp)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if(_lp == uniETHHXYF){\\r\\n            return totalHxyfLpFrozen;\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            return totalHxyLpFrozen;\\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            return totalHxbLpFrozen;\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            return totalHxpLpFrozen;\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //HXYF balance of caller\\r\\n    function hxyfBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n    \\r\\n    //LP balance of caller\\r\\n    function lpBalance(address _lp)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if(_lp == uniETHHXYF){\\r\\n            return uniETHHXYFInterface.balanceOf(msg.sender);\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            return uniETHHXYInterface.balanceOf(msg.sender);\\r\\n\\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            return uniHEXHXBInterface.balanceOf(msg.sender);\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            return uniETHHXPInterface.balanceOf(msg.sender);\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    //check if user can harvest HXYF yet\\r\\n    function isHarvestable(address _user, address _lp)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(_lp == uniETHHXYF){\\r\\n            if(farmer[_user].hxyfFreezeStartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return farmer[_user].hxyfFreezeStartTimestamp.add((MINUTESECONDS.div(24))) \\u003c= now; \\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniETHHXY){\\r\\n            if(farmer[_user].hxyFreezeStartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return farmer[_user].hxyFreezeStartTimestamp.add((MINUTESECONDS.div(24))) \\u003c= now; \\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniHEXHXB){\\r\\n            if(farmer[_user].hxbFreezeStartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return farmer[_user].hxbFreezeStartTimestamp.add((MINUTESECONDS.div(24))) \\u003c= now; \\r\\n            }\\r\\n        }\\r\\n        else if(_lp == uniETHHXP){\\r\\n            if(farmer[_user].hxpFreezeStartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return farmer[_user].hxpFreezeStartTimestamp.add((MINUTESECONDS.div(24))) \\u003c= now; \\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function donate() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        bool success = false;\\r\\n        uint256 balance = msg.value;\\r\\n        //distribute\\r\\n        (success, ) =  _p1.call{value:balance.mul(50).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p2.call{value:balance.mul(50).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeEthHxpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeEthHxyLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeEthHxyfLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeHexHxbLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HarvestHxbLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HarvestHxpLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HarvestHxyLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HarvestHxyfLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeEthHxpLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeEthHxyLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeEthHxyfLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeHexHxbLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"burnHxyf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"calcHarvestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hxyfFreezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxyFreezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxbFreezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxpFreezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFarmedHxyf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvening\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxbApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hxbLpFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxpApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hxpLpFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hxyLpFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyfApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyfBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hxyfLpFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"isHarvestable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"lpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"minsPastFreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newHalvening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_airdropContract\",\"type\":\"address\"}],\"name\":\"setAirdropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_apy\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_apy\",\"type\":\"uint32\"}],\"name\":\"setGlobalApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHXBExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHXPExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHXYExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHXYFExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"totalFrozenLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxbLpFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxpLpFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxyLpFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxyfLpFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniETHHXP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniETHHXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniETHHXYF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniHEXHXB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HXYFINANCE","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000084595161401484a000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://411ea232de9efa4982a0a4916b00985d0d9a72539092d8aeb4675a7f5cae2810"}]}