{"status":"1","message":"OK","result":[{"SourceCode":"// File: ../common/openzeppelin/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/SmokeSignal.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract EthPriceOracle\r\n{\r\n    function read()\r\n        public \r\n        virtual\r\n        view \r\n        returns(bytes32);\r\n}\r\n\r\nstruct StoredMessageData \r\n{\r\n    address firstAuthor;\r\n    uint nativeBurned;\r\n    uint dollarsBurned;\r\n    uint nativeTipped;\r\n    uint dollarsTipped;\r\n}\r\n\r\ncontract SmokeSignal \r\n{\r\n    using SafeMath for uint256;\r\n\r\n    address payable constant burnAddress = address(0x0);\r\n    address payable donationAddress;\r\n    EthPriceOracle public oracle;\r\n\r\n    constructor(address payable _donationAddress, EthPriceOracle _oracle) \r\n        public \r\n    {\r\n        donationAddress = _donationAddress;\r\n        oracle = _oracle;\r\n    }\r\n\r\n    mapping (bytes32 => StoredMessageData) public storedMessageData;\r\n\r\n    function EthPrice() \r\n        public\r\n        view\r\n        returns (uint _price)\r\n    {\r\n        return address(oracle) == address(0) ? 10**18 : uint(oracle.read());\r\n    }\r\n\r\n    function ethToUsd(uint ethAmount)\r\n        public\r\n        view\r\n        returns (uint usdAmount)\r\n    {\r\n        usdAmount = EthPrice() * ethAmount / 10**18;\r\n    }\r\n\r\n    event MessageBurn(\r\n        bytes32 indexed _hash,\r\n        address indexed _from,\r\n        uint _burnAmount,\r\n        uint _burnUsdValue,\r\n        string _message\r\n    );\r\n\r\n    function burnMessage(string calldata _message, uint donateAmount)\r\n        external\r\n        payable\r\n        returns(bytes32)\r\n    {\r\n        internalDonateIfNonzero(donateAmount);\r\n\r\n        bytes32 hash = keccak256(abi.encode(_message));\r\n\r\n        uint burnAmount = msg.value.sub(donateAmount);\r\n\r\n        uint burnUsdValue = ethToUsd(burnAmount);\r\n\r\n        internalBurnForMessageHash(hash, burnAmount, burnUsdValue);\r\n\r\n        if (storedMessageData[hash].firstAuthor == address(0))\r\n        {\r\n            storedMessageData[hash].firstAuthor = msg.sender;\r\n        }\r\n\r\n        emit MessageBurn(\r\n            hash,\r\n            msg.sender,\r\n            burnAmount,\r\n            burnUsdValue,\r\n            _message);\r\n\r\n        return hash;\r\n    }\r\n\r\n    event HashBurn(\r\n        bytes32 indexed _hash,\r\n        address indexed _from,\r\n        uint _burnAmount,\r\n        uint _burnUsdValue\r\n    );\r\n\r\n    function burnHash(bytes32 _hash, uint donateAmount)\r\n        external\r\n        payable\r\n    {\r\n        internalDonateIfNonzero(donateAmount);\r\n\r\n        uint burnAmount = msg.value.sub(donateAmount);\r\n\r\n        uint burnUsdValue = ethToUsd(burnAmount);\r\n\r\n        internalBurnForMessageHash(_hash, burnAmount, burnUsdValue);\r\n\r\n        emit HashBurn(\r\n            _hash,\r\n            msg.sender,\r\n            burnAmount,\r\n            burnUsdValue\r\n        );\r\n    }\r\n\r\n    event HashTip(\r\n        bytes32 indexed _hash,\r\n        address indexed _from,\r\n        uint _tipAmount,\r\n        uint _tipUsdValue\r\n    );\r\n\r\n    function tipHashOrBurnIfNoAuthor(bytes32 _hash, uint donateAmount)\r\n        external\r\n        payable\r\n    {\r\n        internalDonateIfNonzero(donateAmount);\r\n\r\n        uint tipAmount = msg.value.sub(donateAmount);\r\n        \r\n        uint tipUsdValue = ethToUsd(tipAmount);\r\n        \r\n        address author = storedMessageData[_hash].firstAuthor;\r\n        if (author == address(0))\r\n        {\r\n            internalBurnForMessageHash(_hash, tipAmount, tipUsdValue);\r\n\r\n            emit HashBurn(\r\n                _hash,\r\n                msg.sender,\r\n                tipAmount,\r\n                tipUsdValue\r\n            );\r\n        }\r\n        else \r\n        {\r\n            internalTipForMessageHash(_hash, author, tipAmount, tipUsdValue);\r\n\r\n            emit HashTip(\r\n                _hash,\r\n                msg.sender,\r\n                tipAmount,\r\n                tipUsdValue\r\n            );\r\n        }\r\n    }\r\n\r\n    function internalBurnForMessageHash(bytes32 _hash, uint _burnAmount, uint _burnUsdValue)\r\n        internal\r\n    {\r\n        internalBurn(_burnAmount);\r\n        storedMessageData[_hash].nativeBurned += _burnAmount;\r\n        storedMessageData[_hash].dollarsBurned += _burnUsdValue;\r\n    }\r\n\r\n    function internalTipForMessageHash(bytes32 _hash, address author, uint _tipAmount, uint _tipUsdValue)\r\n        internal\r\n    {\r\n        internalSend(author, _tipAmount);\r\n        storedMessageData[_hash].nativeTipped += _tipAmount;\r\n        storedMessageData[_hash].dollarsTipped += _tipUsdValue;\r\n    }\r\n\r\n    function internalDonateIfNonzero(uint _wei)\r\n        internal\r\n    {\r\n        if (_wei > 0)\r\n        {\r\n            internalSend(donationAddress, _wei);\r\n        }\r\n    }\r\n\r\n    function internalSend(address _to, uint _wei)\r\n        internal\r\n    {\r\n        _to.call.value(_wei)(\"\");\r\n    }\r\n\r\n    function internalBurn(uint _wei)\r\n        internal\r\n    {\r\n        burnAddress.call.value(_wei)(\"\");\r\n    }\r\n}\r\n\r\ncontract SmokeSignal_Ethereum is SmokeSignal\r\n{\r\n    constructor(address payable _donationAddress) SmokeSignal(_donationAddress, EthPriceOracle(0x729D19f657BD0614b4985Cf1D82531c67569197B))\r\n        public \r\n    { }\r\n}\r\n\r\ncontract SmokeSignal_xDai is SmokeSignal\r\n{\r\n    constructor(address payable _donationAddress) SmokeSignal(_donationAddress, EthPriceOracle(address(0)))\r\n        public \r\n    { }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_donationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnUsdValue\",\"type\":\"uint256\"}],\"name\":\"HashBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tipAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tipUsdValue\",\"type\":\"uint256\"}],\"name\":\"HashTip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnUsdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"MessageBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"donateAmount\",\"type\":\"uint256\"}],\"name\":\"burnHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donateAmount\",\"type\":\"uint256\"}],\"name\":\"burnMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ethToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract EthPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"storedMessageData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"firstAuthor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nativeBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dollarsBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dollarsTipped\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"donateAmount\",\"type\":\"uint256\"}],\"name\":\"tipHashOrBurnIfNoAuthor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"SmokeSignal_Ethereum","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000093fe7d1d24be7cb33329800ba2166f4d28eaa553","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e202f5147622b77439e99d8200200a2868f69d606280c5f3dbe05eaea1f8b00"}]}