{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface MassetStructs {\r\n\r\n    /** @dev Stores high level basket info */\r\n    struct Basket {\r\n\r\n        /** @dev Array of Bassets currently active */\r\n        Basset[] bassets;\r\n\r\n        /** @dev Max number of bAssets that can be present in any Basket */\r\n        uint8 maxBassets;\r\n\r\n        /** @dev Some bAsset is undergoing re-collateralisation */\r\n        bool undergoingRecol;\r\n\r\n        /**\r\n         * @dev In the event that we do not raise enough funds from the auctioning of a failed Basset,\r\n         * The Basket is deemed as failed, and is undercollateralised to a certain degree.\r\n         * The collateralisation ratio is used to calc Masset burn rate.\r\n         */\r\n        bool failed;\r\n        uint256 collateralisationRatio;\r\n\r\n    }\r\n\r\n    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\r\n    struct Basset {\r\n\r\n        /** @dev Address of the bAsset */\r\n        address addr;\r\n\r\n        /** @dev Status of the basset,  */\r\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\r\n\r\n        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\r\n        bool isTransferFeeCharged; // takes a byte in storage\r\n\r\n        /**\r\n         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n         */\r\n        uint256 ratio;\r\n\r\n        /** @dev Target weights of the Basset (100% == 1e18) */\r\n        uint256 maxWeight;\r\n\r\n        /** @dev Amount of the Basset that is held in Collateral */\r\n        uint256 vaultBalance;\r\n\r\n    }\r\n\r\n    /** @dev Status of the Basset - has it broken its peg? */\r\n    enum BassetStatus {\r\n        Default,\r\n        Normal,\r\n        BrokenBelowPeg,\r\n        BrokenAbovePeg,\r\n        Blacklisted,\r\n        Liquidating,\r\n        Liquidated,\r\n        Failed\r\n    }\r\n\r\n    /** @dev Internal details on Basset */\r\n    struct BassetDetails {\r\n        Basset bAsset;\r\n        address integrator;\r\n        uint8 index;\r\n    }\r\n\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct ForgePropsMulti {\r\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct RedeemProps {\r\n        bool isValid;\r\n        Basset[] allBassets;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n\r\n    /** @dev All details needed for proportionate Redemption */\r\n    struct RedeemPropsMulti {\r\n        uint256 colRatio;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n}\r\n\r\ncontract IMasset is MassetStructs {\r\n\r\n    /** @dev Calc interest */\r\n    function collectInterest() external returns (uint256 swapFeesGained, uint256 newTotalSupply);\r\n    function collectPlatformInterest() external returns (uint256 interestGained, uint256 newTotalSupply);\r\n\r\n    /** @dev Minting */\r\n    function mint(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetMinted);\r\n    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n\r\n    /** @dev Swapping */\r\n    function swap( address _input, address _output, uint256 _quantity, address _recipient)\r\n        external returns (uint256 output);\r\n    function getSwapOutput( address _input, address _output, uint256 _quantity)\r\n        external view returns (bool, string memory, uint256 output);\r\n\r\n    /** @dev Redeeming */\r\n    function redeem(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\r\n\r\n    /** @dev Setters for the Manager or Gov to update module info */\r\n    function upgradeForgeValidator(address _newForgeValidator) external;\r\n\r\n    /** @dev Setters for Gov to set system params */\r\n    function setSwapFee(uint256 _swapFee) external;\r\n\r\n    /** @dev Getters */\r\n    function getBasketManager() external view returns(address);\r\n    function forgeValidator() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function swapFee() external view returns (uint256);\r\n}\r\n\r\ninterface ISavingsContract {\r\n\r\n    /** @dev Manager privs */\r\n    function depositInterest(uint256 _amount) external;\r\n\r\n    /** @dev Saver privs */\r\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued);\r\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\r\n\r\n    /** @dev Getters */\r\n    function exchangeRate() external view returns (uint256);\r\n    function creditBalances(address) external view returns (uint256);\r\n}\r\n\r\ninterface ISavingsManager {\r\n\r\n    /** @dev Admin privs */\r\n    function distributeUnallocatedInterest(address _mAsset) external;\r\n\r\n    /** @dev Liquidator */\r\n    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\r\n\r\n    /** @dev Liquidator */\r\n    function collectAndStreamInterest(address _mAsset) external;\r\n\r\n    /** @dev Public privs */\r\n    function collectAndDistributeInterest(address _mAsset) external;\r\n}\r\n\r\ninterface IRevenueRecipient {\r\n\r\n    /** @dev Recipient */\r\n    function notifyRedistributionAmount(address _mAsset, uint256 _amount) external;\r\n}\r\n\r\ncontract ModuleKeys {\r\n\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR = 0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract Module is ModuleKeys {\r\n\r\n    INexus public nexus;\r\n\r\n    /**\r\n     * @dev Initialises the Module by setting publisher addresses,\r\n     *      and reading all available system module information\r\n     */\r\n    constructor(address _nexus) internal {\r\n        require(_nexus != address(0), \"Nexus is zero address\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _liquidator() internal view returns (address) {\r\n        return nexus.getModule(KEY_LIQUIDATOR);\r\n    }\r\n}\r\n\r\ncontract PausableModule is Module {\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by Governor\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by Governor\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     * Hooks into the Module to give the Governor ability to pause\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor (address _nexus) internal Module(_nexus) {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     * @return Returns `true` when paused, otherwise `false`\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the Governor to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyGovernor whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by Governor to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyGovernor whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\n// External\r\n// Internal\r\n// Libs\r\n/**\r\n * @title   SavingsManager\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  Savings Manager collects interest from mAssets and sends them to the\r\n *          corresponding Savings Contract, performing some validation in the process.\r\n * @dev     VERSION: 1.3\r\n *          DATE:    2020-12-09\r\n */\r\ncontract SavingsManager is ISavingsManager, PausableModule {\r\n\r\n    using SafeMath for uint256;\r\n    using StableMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    // Core admin events\r\n    event RevenueRecipientSet(address indexed mAsset, address recipient);\r\n    event SavingsContractAdded(address indexed mAsset, address savingsContract);\r\n    event SavingsContractUpdated(address indexed mAsset, address savingsContract);\r\n    event SavingsRateChanged(uint256 newSavingsRate);\r\n    event StreamsFrozen();\r\n    // Interest collection\r\n    event LiquidatorDeposited(address indexed mAsset, uint256 amount);\r\n    event InterestCollected(address indexed mAsset, uint256 interest, uint256 newTotalSupply, uint256 apy);\r\n    event InterestDistributed(address indexed mAsset, uint256 amountSent);\r\n    event RevenueRedistributed(address indexed mAsset, address recipient, uint256 amount);\r\n\r\n    // Locations of each mAsset savings contract\r\n    mapping(address => ISavingsContract) public savingsContracts;\r\n    mapping(address => IRevenueRecipient) public revenueRecipients;\r\n    // Time at which last collection was made\r\n    mapping(address => uint256) public lastPeriodStart;\r\n    mapping(address => uint256) public lastCollection;\r\n    mapping(address => uint256) public periodYield;\r\n\r\n    // Amount of collected interest that will be sent to Savings Contract (100%)\r\n    uint256 private savingsRate = 1e18;\r\n    // Utils to help keep interest under check\r\n    uint256 constant private SECONDS_IN_YEAR = 365 days;\r\n    // Theoretical cap on APY to avoid excess inflation\r\n    uint256 constant private MAX_APY = 15e18;\r\n    uint256 constant private TEN_BPS = 1e15;\r\n    // Streaming liquidated tokens\r\n    uint256 private constant DURATION = 7 days;\r\n    uint256 private constant ONE_DAY = 1 days;\r\n    uint256 constant private THIRTY_MINUTES = 30 minutes;\r\n    // Streams\r\n    bool private streamsFrozen = false;\r\n    // Liquidator\r\n    mapping(address => Stream) public liqStream;\r\n    // Platform\r\n    mapping(address => Stream) public yieldStream;\r\n    // Batches are for the platformInterest collection\r\n    mapping(address => uint256) public lastBatchCollected;\r\n\r\n    enum StreamType {\r\n        liquidator,\r\n        yield\r\n    }\r\n\r\n    struct Stream {\r\n        uint256 end;\r\n        uint256 rate;\r\n    }\r\n\r\n    constructor(\r\n        address _nexus,\r\n        address _mUSD,\r\n        address _savingsContract\r\n    )\r\n        public\r\n        PausableModule(_nexus)\r\n    {\r\n        _updateSavingsContract(_mUSD, _savingsContract);\r\n        emit SavingsContractAdded(_mUSD, _savingsContract);\r\n    }\r\n\r\n    modifier onlyLiquidator() {\r\n        require(msg.sender == _liquidator(), \"Only liquidator can execute\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStreamsNotFrozen() {\r\n        require(!streamsFrozen, \"Streaming is currently frozen\");\r\n        _;\r\n    }\r\n\r\n    /***************************************\r\n                    STATE\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Adds a new savings contract\r\n     * @param _mAsset           Address of underlying mAsset\r\n     * @param _savingsContract  Address of the savings contract\r\n     */\r\n    function addSavingsContract(address _mAsset, address _savingsContract)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(address(savingsContracts[_mAsset]) == address(0), \"Savings contract already exists\");\r\n        _updateSavingsContract(_mAsset, _savingsContract);\r\n        emit SavingsContractAdded(_mAsset, _savingsContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates an existing savings contract\r\n     * @param _mAsset           Address of underlying mAsset\r\n     * @param _savingsContract  Address of the savings contract\r\n     */\r\n    function updateSavingsContract(address _mAsset, address _savingsContract)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(address(savingsContracts[_mAsset]) != address(0), \"Savings contract does not exist\");\r\n        _updateSavingsContract(_mAsset, _savingsContract);\r\n        emit SavingsContractUpdated(_mAsset, _savingsContract);\r\n    }\r\n\r\n    function _updateSavingsContract(address _mAsset, address _savingsContract)\r\n        internal\r\n    {\r\n        require(_mAsset != address(0) && _savingsContract != address(0), \"Must be valid address\");\r\n        savingsContracts[_mAsset] = ISavingsContract(_savingsContract);\r\n\r\n        IERC20(_mAsset).safeApprove(address(_savingsContract), 0);\r\n        IERC20(_mAsset).safeApprove(address(_savingsContract), uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes streaming of mAssets\r\n     */\r\n    function freezeStreams()\r\n        external\r\n        onlyGovernor\r\n        whenStreamsNotFrozen\r\n    {\r\n        streamsFrozen = true;\r\n\r\n        emit StreamsFrozen();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the revenue recipient address\r\n     * @param _mAsset           Address of underlying mAsset\r\n     * @param _recipient        Address of the recipient\r\n     */\r\n    function setRevenueRecipient(address _mAsset, address _recipient)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        revenueRecipients[_mAsset] = IRevenueRecipient(_recipient);\r\n\r\n        emit RevenueRecipientSet(_mAsset, _recipient);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets a new savings rate for interest distribution\r\n     * @param _savingsRate   Rate of savings sent to SavingsContract (100% = 1e18)\r\n     */\r\n    function setSavingsRate(uint256 _savingsRate)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        // Greater than 60% upto 100%\r\n        require(_savingsRate >= 6e17 && _savingsRate <= 1e18, \"Must be a valid rate\");\r\n        savingsRate = _savingsRate;\r\n        emit SavingsRateChanged(_savingsRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the liquidator to deposit proceeds from iquidated gov tokens.\r\n     * Transfers proceeds on a second by second basis to the Savings Contract over 1 week.\r\n     * @param _mAsset The mAsset to transfer and distribute\r\n     * @param _liquidated Units of mAsset to distribute\r\n     */\r\n    function depositLiquidation(address _mAsset, uint256 _liquidated)\r\n        external\r\n        whenNotPaused\r\n        onlyLiquidator\r\n        whenStreamsNotFrozen\r\n    {\r\n        // Collect existing interest to ensure everything is up to date\r\n        _collectAndDistributeInterest(_mAsset);\r\n\r\n        // transfer liquidated mUSD to here\r\n        IERC20(_mAsset).safeTransferFrom(_liquidator(), address(this), _liquidated);\r\n\r\n        uint256 leftover = _unstreamedRewards(_mAsset, StreamType.liquidator);\r\n        _initialiseStream(_mAsset, StreamType.liquidator, _liquidated.add(leftover), DURATION);\r\n\r\n        emit LiquidatorDeposited(_mAsset, _liquidated);\r\n    }\r\n\r\n    /**\r\n     * @dev Collects the platform interest from a given mAsset and then adds capital to the\r\n     * stream. If there is > 24h left in current stream, just top it up, otherwise reset.\r\n     * @param _mAsset The mAsset to fetch interest\r\n     */\r\n    function collectAndStreamInterest(address _mAsset)\r\n        external\r\n        whenNotPaused\r\n        whenStreamsNotFrozen\r\n    {\r\n        // Collect existing interest to ensure everything is up to date\r\n        _collectAndDistributeInterest(_mAsset);\r\n\r\n        uint256 currentTime = now;\r\n        uint256 previousBatch = lastBatchCollected[_mAsset];\r\n        uint256 timeSincePreviousBatch = currentTime.sub(previousBatch);\r\n        require(timeSincePreviousBatch > 6 hours, \"Cannot deposit twice in 6 hours\");\r\n        lastBatchCollected[_mAsset] = currentTime;\r\n\r\n        // Batch collect\r\n        (uint256 interestCollected, uint256 totalSupply) =  IMasset(_mAsset).collectPlatformInterest();\r\n\r\n        if(interestCollected > 0){\r\n            // Validate APY\r\n            uint256 apy = _validateCollection(totalSupply, interestCollected, timeSincePreviousBatch);\r\n\r\n            // Get remaining rewards\r\n            uint256 leftover = _unstreamedRewards(_mAsset, StreamType.yield);\r\n            _initialiseStream(_mAsset, StreamType.yield, interestCollected.add(leftover), ONE_DAY);\r\n\r\n            emit InterestCollected(_mAsset, interestCollected, totalSupply, apy);\r\n        }\r\n\r\n        emit InterestCollected(_mAsset, interestCollected, totalSupply, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates how many rewards from the stream are still to be distributed, from the\r\n     * last collection time to the end of the stream.\r\n     * @param _mAsset The mAsset in question\r\n     * @return leftover The total amount of mAsset that is yet to be collected from a stream\r\n     */\r\n    function _unstreamedRewards(address _mAsset, StreamType _stream) internal view returns (uint256 leftover) {\r\n        uint256 lastUpdate = lastCollection[_mAsset];\r\n\r\n        Stream memory stream = _stream == StreamType.liquidator ? liqStream[_mAsset] : yieldStream[_mAsset];\r\n        uint256 unclaimedSeconds = 0;\r\n        if(lastUpdate < stream.end){\r\n            unclaimedSeconds = stream.end.sub(lastUpdate);\r\n        }\r\n        return unclaimedSeconds.mul(stream.rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Simply sets up the stream\r\n     * @param _mAsset The mAsset in question\r\n     * @param _amount Amount of units to stream\r\n     * @param _duration Duration of the stream, from now\r\n     */\r\n    function _initialiseStream(address _mAsset, StreamType _stream, uint256 _amount, uint256 _duration) internal {\r\n        uint256 currentTime = now;\r\n        // Distribute reward per second over X seconds\r\n        uint256 rate = _amount.div(_duration);\r\n        uint256 end = currentTime.add(_duration);\r\n        if(_stream == StreamType.liquidator){\r\n            liqStream[_mAsset] = Stream(end, rate);\r\n        } else {\r\n            yieldStream[_mAsset] = Stream(end, rate);\r\n        }\r\n\r\n        // Reset pool data to enable lastCollection usage twice\r\n        require(lastCollection[_mAsset] == currentTime, \"Stream data must be up to date\");\r\n    }\r\n\r\n    /***************************************\r\n                COLLECTION\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Collects interest from a target mAsset and distributes to the SavingsContract.\r\n     *      Applies constraints such that the max APY since the last fee collection cannot\r\n     *      exceed the \"MAX_APY\" variable.\r\n     * @param _mAsset       mAsset for which the interest should be collected\r\n     */\r\n    function collectAndDistributeInterest(address _mAsset)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        _collectAndDistributeInterest(_mAsset);\r\n    }\r\n\r\n    function _collectAndDistributeInterest(address _mAsset)\r\n        internal\r\n    {\r\n        ISavingsContract savingsContract = savingsContracts[_mAsset];\r\n        require(address(savingsContract) != address(0), \"Must have a valid savings contract\");\r\n\r\n        // Get collection details\r\n        uint256 recentPeriodStart = lastPeriodStart[_mAsset];\r\n        uint256 previousCollection = lastCollection[_mAsset];\r\n        lastCollection[_mAsset] = now;\r\n\r\n        // 1. Collect the new interest from the mAsset\r\n        IMasset mAsset = IMasset(_mAsset);\r\n        (uint256 interestCollected, uint256 totalSupply) = mAsset.collectInterest();\r\n\r\n        // 2. Update all the time stamps\r\n        //    Avoid division by 0 by adding a minimum elapsed time of 1 second\r\n        uint256 timeSincePeriodStart = StableMath.max(1, now.sub(recentPeriodStart));\r\n        uint256 timeSinceLastCollection = StableMath.max(1, now.sub(previousCollection));\r\n\r\n        uint256 inflationOperand = interestCollected;\r\n        //    If it has been 30 mins since last collection, reset period data\r\n        if(timeSinceLastCollection > THIRTY_MINUTES) {\r\n            lastPeriodStart[_mAsset] = now;\r\n            periodYield[_mAsset] = 0;\r\n        }\r\n        //    Else if period has elapsed, start a new period from the lastCollection time\r\n        else if(timeSincePeriodStart > THIRTY_MINUTES) {\r\n            lastPeriodStart[_mAsset] = previousCollection;\r\n            periodYield[_mAsset] = interestCollected;\r\n        }\r\n        //    Else add yield to period yield\r\n        else {\r\n            inflationOperand = periodYield[_mAsset].add(interestCollected);\r\n            periodYield[_mAsset] = inflationOperand;\r\n        }\r\n\r\n        //    Add on liquidated\r\n        uint256 newReward = _unclaimedRewards(_mAsset, previousCollection);\r\n        // 3. Validate that interest is collected correctly and does not exceed max APY\r\n        if(interestCollected > 0 || newReward > 0) {\r\n            require(\r\n                IERC20(_mAsset).balanceOf(address(this)) >= interestCollected.add(newReward),\r\n                \"Must receive mUSD\"\r\n            );\r\n\r\n            uint256 extrapolatedAPY = _validateCollection(totalSupply, inflationOperand, timeSinceLastCollection);\r\n\r\n            emit InterestCollected(_mAsset, interestCollected, totalSupply, extrapolatedAPY);\r\n\r\n            // 4. Distribute the interest\r\n            //    Calculate the share for savers (95e16 or 95%)\r\n            uint256 saversShare = interestCollected.add(newReward).mulTruncate(savingsRate);\r\n\r\n            //    Call depositInterest on contract\r\n            savingsContract.depositInterest(saversShare);\r\n\r\n            emit InterestDistributed(_mAsset, saversShare);\r\n        } else {\r\n            emit InterestCollected(_mAsset, 0, totalSupply, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates unclaimed rewards from the liquidation stream\r\n     * @param _mAsset mAsset key\r\n     * @param _previousCollection Time of previous collection\r\n     * @return Units of mAsset that have been unlocked for distribution\r\n     */\r\n    function _unclaimedRewards(address _mAsset, uint256 _previousCollection) internal view returns (uint256) {\r\n        Stream memory liq = liqStream[_mAsset];\r\n        uint256 unclaimedSeconds_liq = _unclaimedSeconds(_previousCollection, liq.end);\r\n        uint256 subtotal_liq = unclaimedSeconds_liq.mul(liq.rate);\r\n\r\n        Stream memory yield = yieldStream[_mAsset];\r\n        uint256 unclaimedSeconds_yield = _unclaimedSeconds(_previousCollection, yield.end);\r\n        uint256 subtotal_yield = unclaimedSeconds_yield.mul(yield.rate);\r\n\r\n        return subtotal_liq.add(subtotal_yield);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the seconds of unclaimed rewards, based on period length\r\n     * @param _lastUpdate Time of last update\r\n     * @param _end End time of period\r\n     * @return Seconds of stream that should be compensated\r\n     */\r\n    function _unclaimedSeconds(uint256 _lastUpdate, uint256 _end) internal view returns (uint256) {\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 unclaimedSeconds = 0;\r\n\r\n        if(currentTime <= _end){\r\n            unclaimedSeconds = currentTime.sub(_lastUpdate);\r\n        } else if(_lastUpdate < _end) {\r\n            unclaimedSeconds = _end.sub(_lastUpdate);\r\n        }\r\n        return unclaimedSeconds;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates that an interest collection does not exceed a maximum APY. If last collection\r\n     * was under 30 mins ago, simply check it does not exceed 10bps\r\n     * @param _newSupply               New total supply of the mAsset\r\n     * @param _interest                Increase in total supply since last collection\r\n     * @param _timeSinceLastCollection Seconds since last collection\r\n     */\r\n    function _validateCollection(uint256 _newSupply, uint256 _interest, uint256 _timeSinceLastCollection)\r\n        internal\r\n        pure\r\n        returns (uint256 extrapolatedAPY)\r\n    {\r\n        // Percentage increase in total supply\r\n        // e.g. (1e20 * 1e18) / 1e24 = 1e14 (or a 0.01% increase)\r\n        // e.g. (5e18 * 1e18) / 1.2e24 = 4.1667e12\r\n        // e.g. (1e19 * 1e18) / 1e21 = 1e16\r\n        uint256 oldSupply = _newSupply.sub(_interest);\r\n        uint256 percentageIncrease = _interest.divPrecisely(oldSupply);\r\n\r\n        //      If over 30 mins, extrapolate APY\r\n        // e.g. day: (86400 * 1e18) / 3.154e7 = 2.74..e15\r\n        // e.g. 30 mins: (1800 * 1e18) / 3.154e7 = 5.7..e13\r\n        // e.g. epoch: (1593596907 * 1e18) / 3.154e7 = 50.4..e18\r\n        uint256 yearsSinceLastCollection =\r\n            _timeSinceLastCollection.divPrecisely(SECONDS_IN_YEAR);\r\n\r\n        // e.g. 0.01% (1e14 * 1e18) / 2.74..e15 = 3.65e16 or 3.65% apr\r\n        // e.g. (4.1667e12 * 1e18) / 5.7..e13 = 7.1e16 or 7.1% apr\r\n        // e.g. (1e16 * 1e18) / 50e18 = 2e14\r\n        extrapolatedAPY = percentageIncrease.divPrecisely(yearsSinceLastCollection);\r\n\r\n        if(_timeSinceLastCollection > THIRTY_MINUTES) {\r\n            require(extrapolatedAPY < MAX_APY, \"Interest protected from inflating past maxAPY\");\r\n        } else {\r\n            require(percentageIncrease < TEN_BPS, \"Interest protected from inflating past 10 Bps\");\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n            Revenue Redistribution\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Redistributes the unallocated interest to the saved recipient, allowing\r\n     * the siphoned assets to be used elsewhere in the system\r\n     * @param _mAsset  mAsset to collect\r\n     */\r\n    function distributeUnallocatedInterest(address _mAsset)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        IRevenueRecipient recipient = revenueRecipients[_mAsset];\r\n        require(address(recipient) != address(0), \"Must have valid recipient\");\r\n\r\n        IERC20 mAsset = IERC20(_mAsset);\r\n        uint256 balance = mAsset.balanceOf(address(this));\r\n        uint256 leftover_liq = _unstreamedRewards(_mAsset, StreamType.liquidator);\r\n        uint256 leftover_yield = _unstreamedRewards(_mAsset, StreamType.yield);\r\n\r\n        uint256 unallocated = balance.sub(leftover_liq).sub(leftover_yield);\r\n\r\n        mAsset.approve(address(recipient), unallocated);\r\n        recipient.notifyRedistributionAmount(_mAsset, unallocated);\r\n\r\n        emit RevenueRedistributed(_mAsset, address(recipient), unallocated);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_savingsContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"}],\"name\":\"InterestDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidatorDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RevenueRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevenueRedistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"savingsContract\",\"type\":\"address\"}],\"name\":\"SavingsContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"savingsContract\",\"type\":\"address\"}],\"name\":\"SavingsContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSavingsRate\",\"type\":\"uint256\"}],\"name\":\"SavingsRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StreamsFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_savingsContract\",\"type\":\"address\"}],\"name\":\"addSavingsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"}],\"name\":\"collectAndDistributeInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"}],\"name\":\"collectAndStreamInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidated\",\"type\":\"uint256\"}],\"name\":\"depositLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"}],\"name\":\"distributeUnallocatedInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeStreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBatchCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPeriodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revenueRecipients\",\"outputs\":[{\"internalType\":\"contract IRevenueRecipient\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"savingsContracts\",\"outputs\":[{\"internalType\":\"contract ISavingsContract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRevenueRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_savingsRate\",\"type\":\"uint256\"}],\"name\":\"setSavingsRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_savingsContract\",\"type\":\"address\"}],\"name\":\"updateSavingsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SavingsManager","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3000000000000000000000000e2f2a5c287993345a840db3b0845fbc70f5935a5000000000000000000000000cf3f73290803fc04425bee135a4caeb2bab2c2a1","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://57bed67a3bc5833364aa509627823e580933cbb80a3634bb058cfb2fdc0e488f"}]}