{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood:\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\n * compliant implementations may not do it.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowed;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param owner The address to query the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        _transfer(from, to, value);\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified addresses\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\n     * @param owner The address that owns the tokens.\\n     * @param spender The address that will spend the tokens.\\n     * @param value The number of tokens that can be spent.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(spender != address(0));\\n        require(owner != address(0));\\n\\n        _allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\n     * internal burn function.\\n     * Emits an Approval event (reflecting the reduced allowance).\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burnFrom(address account, uint256 value) internal {\\n        _burn(account, value);\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\n    }\\n}\\n\"},\"ERC20Burnable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract ERC20Burnable is ERC20 {\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param value The amount of token to be burned.\\n     */\\n    function burn(uint256 value) public {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n     * @param from address The address which you want to send tokens from\\n     * @param value uint256 The amount of token to be burned\\n     */\\n    function burnFrom(address from, uint256 value) public {\\n        _burnFrom(from, value);\\n    }\\n}\\n\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return the symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return the number of decimals of the token.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IMaster.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n/**\\n * Subset of master contract interface\\n */\\ncontract IMaster {\\n    function withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        address to,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s,\\n        address from\\n    )\\n    public;\\n\\n    function mintTokensByPeers(\\n        address tokenAddress,\\n        uint256 amount,\\n        address beneficiary,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s,\\n        address from\\n    )\\n    public;\\n\\n    function checkTokenAddress(address token) public view returns (bool);\\n}\\n\"},\"Master.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./MasterToken.sol\\\";\\n\\n/**\\n * Provides functionality of master contract\\n */\\ncontract Master {\\n    bool internal initialized_;\\n    bool internal enabled_;\\n    bytes32 public proof;\\n    uint256 public proofReward;\\n    address public owner_;\\n    mapping(address =\\u003e bool) public isPeer;\\n    uint public peersCount;\\n    /** Iroha tx hashes used */\\n    mapping(bytes32 =\\u003e bool) public used;\\n    mapping(address =\\u003e bool) public uniqueAddresses;\\n\\n    MasterToken public tokenInstance;\\n\\n    mapping(address =\\u003e bool) public isToken;\\n\\n    event Withdrawal(bytes32 txHash);\\n\\n    event EnableContract(address provider, bytes32 proof);\\n\\n    /**\\n     * Constructor. Sets contract owner to contract creator.\\n     */\\n    constructor(address[] memory initialPeers, string memory name, string memory symbol, uint8 decimals, address beneficiary, uint256 supply, uint256 reward) public {\\n        initialize(msg.sender, initialPeers, name, symbol, decimals, beneficiary, supply, reward);\\n    }\\n\\n    /**\\n     * Initialization of smart contract.\\n     */\\n    function initialize(address owner, address[] memory initialPeers, string memory name, string memory symbol, uint8 decimals, address beneficiary, uint256 supply, uint256 reward) public {\\n        require(!initialized_);\\n\\n        owner_ = owner;\\n        for (uint8 i = 0; i \\u003c initialPeers.length; i++) {\\n            addPeer(initialPeers[i]);\\n        }\\n\\n        // 0 means ether which is definitely in whitelist\\n        isToken[address(0)] = true;\\n\\n        // Create new instance of the token\\n        tokenInstance = new MasterToken(name, symbol, decimals, beneficiary, supply);\\n        isToken[address(tokenInstance)] = true;\\n\\n        proofReward = reward;\\n\\n        initialized_ = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called when the contract is disabled.\\n     */\\n    modifier enabled() {\\n        require(enabled_);\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner_;\\n    }\\n\\n    /**\\n     * A special function-like stub to allow ether accepting\\n     */\\n    function() external payable {\\n        require(msg.data.length == 0);\\n    }\\n\\n    function submitProof(\\n        bytes32 proofArg,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    )\\n    public\\n    {\\n        require(!enabled_, \\\"Proof has been submitted already\\\");\\n        require(checkSignatures(\\n                keccak256(abi.encodePacked(proofArg)),\\n                v,\\n                r,\\n                s)\\n        );\\n\\n        tokenInstance.mintTokens(msg.sender, proofReward);\\n\\n        proof = proofArg;\\n        enabled_ = true;\\n        emit EnableContract(msg.sender, proofArg);\\n    }\\n\\n    /**\\n     * Adds new peer to list of signature verifiers. Can be called only by contract owner.\\n     * @param newAddress address of new peer\\n     */\\n    function addPeer(address newAddress) private returns (uint) {\\n        require(isPeer[newAddress] == false);\\n        isPeer[newAddress] = true;\\n        ++peersCount;\\n        return peersCount;\\n    }\\n\\n    function removePeer(address peerAddress) private {\\n        require(isPeer[peerAddress] == true);\\n        isPeer[peerAddress] = false;\\n        --peersCount;\\n    }\\n\\n    function addPeerByPeer(\\n        address newPeerAddress,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    )\\n    public returns (bool)\\n    {\\n        require(used[txHash] == false);\\n        require(checkSignatures(keccak256(abi.encodePacked(newPeerAddress, txHash)),\\n            v,\\n            r,\\n            s)\\n        );\\n\\n        addPeer(newPeerAddress);\\n        used[txHash] = true;\\n        return true;\\n    }\\n\\n    function removePeerByPeer(\\n        address peerAddress,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    )\\n    public returns (bool)\\n    {\\n        require(used[txHash] == false);\\n        require(checkSignatures(\\n                keccak256(abi.encodePacked(peerAddress, txHash)),\\n                v,\\n                r,\\n                s)\\n        );\\n\\n        removePeer(peerAddress);\\n        used[txHash] = true;\\n        return true;\\n    }\\n\\n    /**\\n     * Adds new token to whitelist. Token should not been already added.\\n     * @param newToken token to add\\n     */\\n    function addToken(address newToken) public onlyOwner {\\n        require(isToken[newToken] == false);\\n        isToken[newToken] = true;\\n    }\\n\\n    /**\\n     * Checks is given token inside a whitelist or not\\n     * @param tokenAddress address of token to check\\n     * @return true if token inside whitelist or false otherwise\\n     */\\n    function checkTokenAddress(address tokenAddress) public view returns (bool) {\\n        return isToken[tokenAddress];\\n    }\\n\\n    /**\\n     * Withdraws specified amount of ether or one of ERC-20 tokens to provided address\\n     * @param tokenAddress address of token to withdraw (0 for ether)\\n     * @param amount amount of tokens or ether to withdraw\\n     * @param to target account address\\n     * @param txHash hash of transaction from Iroha\\n     * @param v array of signatures of tx_hash (v-component)\\n     * @param r array of signatures of tx_hash (r-component)\\n     * @param s array of signatures of tx_hash (s-component)\\n     * @param from relay contract address\\n     */\\n    function withdraw(\\n        address tokenAddress,\\n        uint256 amount,\\n        address payable to,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s,\\n        address from\\n    )\\n    public\\n    enabled\\n    {\\n        require(checkTokenAddress(tokenAddress));\\n        require(used[txHash] == false);\\n        require(checkSignatures(\\n                keccak256(abi.encodePacked(tokenAddress, amount, to, txHash, from)),\\n                v,\\n                r,\\n                s)\\n        );\\n\\n        if (tokenAddress == address(0)) {\\n            used[txHash] = true;\\n            // untrusted transfer, relies on provided cryptographic proof\\n            to.transfer(amount);\\n        } else {\\n            IERC20 coin = IERC20(tokenAddress);\\n            used[txHash] = true;\\n            // untrusted call, relies on provided cryptographic proof\\n            coin.transfer(to, amount);\\n        }\\n        emit Withdrawal(txHash);\\n    }\\n\\n    /**\\n     * Checks given addresses for duplicates and if they are peers signatures\\n     * @param hash unsigned data\\n     * @param v v-component of signature from hash\\n     * @param r r-component of signature from hash\\n     * @param s s-component of signature from hash\\n     * @return true if all given addresses are correct or false otherwise\\n     */\\n    function checkSignatures(bytes32 hash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) private returns (bool) {\\n        require(peersCount \\u003e= 1);\\n        require(v.length == r.length);\\n        require(r.length == s.length);\\n        uint needSigs = peersCount - (peersCount - 1) / 3;\\n        require(s.length \\u003e= needSigs);\\n\\n        uint count = 0;\\n        address[] memory recoveredAddresses = new address[](s.length);\\n        for (uint i = 0; i \\u003c s.length; ++i) {\\n            address recoveredAddress = recoverAddress(\\n                hash,\\n                v[i],\\n                r[i],\\n                s[i]\\n            );\\n\\n            // not a peer address or not unique\\n            if (isPeer[recoveredAddress] != true || uniqueAddresses[recoveredAddress] == true) {\\n                continue;\\n            }\\n            recoveredAddresses[count] = recoveredAddress;\\n            count = count + 1;\\n            uniqueAddresses[recoveredAddress] = true;\\n        }\\n\\n        // restore state for future usages\\n        for (uint i = 0; i \\u003c count; ++i) {\\n            uniqueAddresses[recoveredAddresses[i]] = false;\\n        }\\n\\n        return count \\u003e= needSigs;\\n    }\\n\\n    /**\\n     * Recovers address from a given single signature\\n     * @param hash unsigned data\\n     * @param v v-component of signature from hash\\n     * @param r r-component of signature from hash\\n     * @param s s-component of signature from hash\\n     * @return address recovered from signature\\n     */\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) private pure returns (address) {\\n        bytes32 simple_hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        address res = ecrecover(simple_hash, v, r, s);\\n        return res;\\n    }\\n\\n    /**\\n     * Mint new Token\\n     * @param tokenAddress address to mint\\n     * @param amount how much to mint\\n     * @param beneficiary destination address\\n     * @param txHash hash of transaction from Iroha\\n     * @param v array of signatures of tx_hash (v-component)\\n     * @param r array of signatures of tx_hash (r-component)\\n     * @param s array of signatures of tx_hash (s-component)\\n     */\\n    function mintTokensByPeers(\\n        address tokenAddress,\\n        uint256 amount,\\n        address beneficiary,\\n        bytes32 txHash,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s,\\n        address from\\n    )\\n    public\\n    enabled\\n    {\\n        require(address(tokenInstance) == tokenAddress);\\n        require(used[txHash] == false);\\n        require(checkSignatures(\\n                keccak256(abi.encodePacked(tokenAddress, amount, beneficiary, txHash, from)),\\n                v,\\n                r,\\n                s)\\n        );\\n\\n        tokenInstance.mintTokens(beneficiary, amount);\\n        used[txHash] = true;\\n        emit Withdrawal(txHash);\\n    }\\n}\\n\"},\"MasterToken.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MasterToken is ERC20Burnable, ERC20Detailed, Ownable {\\n\\n    /**\\n     * @dev Constructor that gives the specified address all of existing tokens.\\n     */\\n    constructor(string memory name, string memory symbol, uint8 decimals, address beneficiary, uint256 supply) public ERC20Detailed(name, symbol, decimals) {\\n        _mint(beneficiary, supply);\\n    }\\n\\n    function mintTokens(address beneficiary, uint256 amount) public onlyOwner {\\n        _mint(beneficiary, amount);\\n    }\\n\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"initialPeers\",\"type\":\"address[]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPeer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proofArg\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"submitProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mintTokensByPeers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"peerAddress\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"removePeerByPeer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"checkTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPeerAddress\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"addPeerByPeer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialPeers\",\"type\":\"address[]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"EnableContract\",\"type\":\"event\"}]","ContractName":"Master","CompilerVersion":"v0.5.9+commit.c68bc34e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001043561a88293000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000de3db1d9e08f67165b0be470968f027f355df91e000000000000000000000000becf435a25e1f9ec600ce986a474d944f73f5382000000000000000000000000d0c8509241aec31c6ed408f6efd953b385dea096000000000000000000000000a966f435b416e80b6be34bac0b1bd35f581f3a4b000000000000000000000000eb1a1c74b5bf49487e227deb0879876fd10c0f78000000000000000000000000b5c278d902358cff09a466efc5dc563ec01bd823000000000000000000000000c9523c812cf304afa92d1e73cc6927d8118184f70000000000000000000000000000000000000000000000000000000000000014536f72612056616c696461746f7220546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000356414c0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fa329fcee27915c2b5eaa0049de68e3ffcff5cbfd2d8921823aa008539ea5477"}]}