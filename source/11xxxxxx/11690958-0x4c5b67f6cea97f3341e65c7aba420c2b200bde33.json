{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAssetIntroducerV1 {\r\n\r\n}\r\n\r\n// File: contracts/protocol/constants/CommonConstants.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract CommonConstants {\r\n\r\n    uint public constant EXCHANGE_RATE_BASE_RATE = 1e18;\r\n\r\n}\r\n\r\n// File: contracts/utils/Blacklistable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Allows accounts to be blacklisted by the owner of the contract.\r\n *\r\n *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\r\n */\r\ncontract Blacklistable is Ownable {\r\n\r\n    string public constant BLACKLISTED = \"BLACKLISTED\";\r\n\r\n    mapping(address => bool) internal blacklisted;\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator of this contract\r\n    */\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == owner(), \"MUST_BE_BLACKLISTER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(blacklisted[account] == false, BLACKLISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\r\n    */\r\n    function checkNotBlacklisted(address account) public view {\r\n        require(!blacklisted[account], BLACKLISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds `account` to blacklist\r\n     *\r\n     * @param account The address to blacklist\r\n    */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     *\r\n     * @param account The address to remove from the blacklist\r\n    */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/impl/DmmBlacklistable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DmmBlacklistable is Blacklistable {\r\n\r\n    constructor() public {\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainAssetValuatorV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOffChainAssetValuatorV1 {\r\n\r\n    event AssetsValueUpdated(uint newAssetsValue);\r\n\r\n    /**\r\n     * @dev Gets the DMM ecosystem's collateral's value from Chainlink's on-chain data feed.\r\n     *\r\n     * @return The value of the ecosystem's collateral, as a number with 18 decimals\r\n     */\r\n    function getOffChainAssetsValue() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/InterestRateInterface.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface InterestRateInterface {\r\n\r\n    /**\r\n      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\r\n      *\r\n      * @param dmmTokenId The DMMA whose interest should be retrieved\r\n      * @param totalSupply The total supply fot he DMM token\r\n      * @param activeSupply The supply that's currently being lent by users\r\n      * @return The interest rate in APY, which is a number with 18 decimals\r\n      */\r\n    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUnderlyingTokenValuator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUnderlyingTokenValuator {\r\n\r\n    /**\r\n      * @dev Gets the tokens value in terms of USD.\r\n      *\r\n      * @return The value of the `amount` of `token`, as a number with the same number of decimals as `amount` passed\r\n      *         in to this function.\r\n      */\r\n    function getTokenValue(address token, uint amount) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/ICollateralizationCalculator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ICollateralizationCalculator {\r\n\r\n    event DmmControllerChanged(address indexed oldController, address indexed newController);\r\n\r\n    function dmmController() external view returns (address);\r\n\r\n    function setDmmController(address newController) external;\r\n\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainAssetValuatorV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOffChainAssetValuatorV2 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetsValueUpdated(uint newAssetsValue);\r\n    event AssetTypeSet(uint tokenId, string assetType, bool isAdded);\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function initialize(\r\n        address owner,\r\n        address guardian,\r\n        address linkToken,\r\n        uint oraclePayment,\r\n        uint offChainAssetsValue,\r\n        bytes32 offChainAssetsValueJobId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Adds an asset type to be supported by the provided principal / affiliate. Use `tokenId` 0 to denote all\r\n     *      asset introducers.\r\n     */\r\n    function addSupportedAssetTypeByTokenId(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Removes an asset type to be supported by the provided principal / affiliate. Use `tokenId` 0 to denote all\r\n     *      asset introducers.\r\n     */\r\n    function removeSupportedAssetTypeByTokenId(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external;\r\n\r\n    /**\r\n     * Sets the oracle job ID for getting all collateral for the ecosystem.\r\n     */\r\n    function setCollateralValueJobId(\r\n        bytes32 jobId\r\n    ) external;\r\n\r\n    /**\r\n     * Sets the amount of LINK to be paid for the `collateralValueJobId`\r\n     */\r\n    function setOraclePayment(\r\n        uint oraclePayment\r\n    ) external;\r\n\r\n    function submitGetOffChainAssetsValueRequest(\r\n        address oracle\r\n    ) external;\r\n\r\n    function fulfillGetOffChainAssetsValueRequest(\r\n        bytes32 requestId,\r\n        uint offChainAssetsValue\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @return  The amount of LINK to be paid for fulfilling this oracle request.\r\n     */\r\n    function oraclePayment() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The timestamp at which the oracle was last pinged\r\n     */\r\n    function lastUpdatedTimestamp() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The block number at which the oracle was last pinged\r\n     */\r\n    function lastUpdatedBlockNumber() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The off-chain assets job ID for getting all assets. NOTE this will be broken down by asset introducer\r\n     *          (token ID) in the future so this function will be deprecated.\r\n     */\r\n    function offChainAssetsValueJobId() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Gets the DMM ecosystem's collateral's value from Chainlink's on-chain data feed.\r\n     *\r\n     * @return The value of all of the ecosystem's collateral, as a number with 18 decimals\r\n     */\r\n    function getOffChainAssetsValue() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM ecosystem's collateral's value from Chainlink's on-chain data feed.\r\n     *\r\n     * @param   tokenId The ID of the asset introducer whose assets should be valued or use 0 to denote all introducers.\r\n     * @return          The value of the asset introducer's ecosystem collateral, as a number with 18 decimals.\r\n     */\r\n    function getOffChainAssetsValueByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @param tokenId   The token ID of the asset introducer; 0 to denote all of them\r\n     * @param assetType The asset type for the collateral (lien) held by the DMM DAO\r\n     * @return True if the asset type is supported, or false otherwise\r\n     */\r\n    function isSupportedAssetTypeByAssetIntroducer(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainCurrencyValuatorV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Gets the value of any currencies that are residing off-chain, but are NOT yet allocated to a revenue-producing asset.\r\n */\r\ninterface IOffChainCurrencyValuatorV2 {\r\n\r\n    function initialize(\r\n        address owner,\r\n        address guardian\r\n    ) external;\r\n\r\n    function getOffChainCurrenciesValue() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmControllerV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDmmControllerV2 {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    function COLLATERALIZATION_BASE_RATE() external pure returns (uint);\r\n\r\n    function INTEREST_RATE_BASE_RATE() external pure returns (uint);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing tokens.\r\n     *\r\n     * @param dmmTokens         The tokens that should be added to this controller.\r\n     * @param underlyingTokens  The tokens that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmTokens(\r\n        address[] calldata dmmTokens,\r\n        address[] calldata underlyingTokens\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the new address that will serve as the guardian for this controller.\r\n     *\r\n     * @param newGuardian   The new address that will serve as the guardian for this controller.\r\n     */\r\n    function setGuardian(address newGuardian) external;\r\n\r\n    function setCollateralizationCalculator(address newCollateralizationCalculator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\r\n     *\r\n     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\r\n     */\r\n    function setDmmTokenFactory(address newDmmTokenFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\r\n     *\r\n     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\r\n     */\r\n    function setDmmEtherFactory(address newDmmEtherFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRate` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\r\n     */\r\n    function getDmmTokenIds() external view returns (uint[] memory);\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\r\n     *      contract address for that token ID.\r\n     */\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    function underlyingTokenValuator() external view returns (IUnderlyingTokenValuator);\r\n\r\n    function offChainAssetsValuator() external view returns (IOffChainAssetValuatorV2);\r\n\r\n    function offChainCurrencyValuator() external view returns (IOffChainCurrencyValuatorV2);\r\n\r\n    function collateralizationCalculator() external view returns (ICollateralizationCalculator);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmController.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDmmController {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    function COLLATERALIZATION_BASE_RATE() external pure returns (uint);\r\n    function MIN_RESERVE_RATIO_BASE_RATE() external pure returns (uint);\r\n    function INTEREST_RATE_BASE_RATE() external pure returns (uint);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the new address that will serve as the guardian for this controller.\r\n     *\r\n     * @param newGuardian   The new address that will serve as the guardian for this controller.\r\n     */\r\n    function setGuardian(address newGuardian) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\r\n     *\r\n     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\r\n     */\r\n    function setDmmTokenFactory(address newDmmTokenFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\r\n     *\r\n     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\r\n     */\r\n    function setDmmEtherFactory(address newDmmEtherFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRate` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\r\n     */\r\n    function getDmmTokenIds() external view returns (uint[] memory);\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\r\n     *      contract address for that token ID.\r\n     */\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    function underlyingTokenValuator() external view returns (IUnderlyingTokenValuator);\r\n\r\n    function offChainAssetsValuator() external view returns (IOffChainAssetValuatorV2);\r\n\r\n    function offChainCurrencyValuator() external view returns (IOffChainCurrencyValuatorV2);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * Basically an interface except, contains the implementation of the type-hashes for offline signature generation.\r\n *\r\n * This contract contains the signatures and documentation for all publicly-implemented functions in the DMM token.\r\n */\r\ninterface IDmmToken {\r\n\r\n    /*****************\r\n     * Events\r\n     */\r\n\r\n    event Mint(address indexed minter, address indexed recipient, uint amount);\r\n    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\r\n    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\r\n\r\n    /*****************\r\n     * Functions\r\n     */\r\n\r\n    /**\r\n     * @dev The controller that deployed this parent\r\n     */\r\n    function controller() external view returns (IDmmController);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @return  The min amount that can be minted in a single transaction. This amount corresponds with the number of\r\n     *          decimals that this token has.\r\n     */\r\n    function minMintAmount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The min amount that can be redeemed from DMM to underlying in a single transaction. This amount\r\n     *          corresponds with the number of decimals that this token has.\r\n     */\r\n    function minRedeemAmount() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The amount of DMM that is in circulation (outside of this contract)\r\n      */\r\n    function activeSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Attempts to add `amount` to the total supply by issuing the tokens to this contract. This call fires a\r\n     *      Transfer event from the 0x0 address to this contract.\r\n     */\r\n    function increaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev Attempts to remove `amount` from the total supply by destroying those tokens that are held in this\r\n     *      contract. This call reverts with TOO_MUCH_ACTIVE_SUPPLY if `amount` is not held in this contract.\r\n     */\r\n    function decreaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers deposit the underlying token around which this DMMA\r\n     *      wraps to this contract. This is used to replenish liquidity and after interest payouts are made from the\r\n     *      real-world assets.\r\n     */\r\n    function depositUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers withdraw the underlying token around which this DMMA\r\n     *      wraps from this contract. This is used to withdraw deposited tokens, to be allocated to real-world assets\r\n     *      that produce income streams and can cover interest payments.\r\n     */\r\n    function withdrawUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedTimestamp() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedBlockNumber() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The exchange rate from underlying to DMM. Invert this number to go from DMM to underlying. This number\r\n     *      has 18 decimals.\r\n     */\r\n    function getCurrentExchangeRate() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The current nonce of the provided `owner`. This `owner` should be the signer for any gasless transactions.\r\n     */\r\n    function nonceOf(address owner) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from msg.sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to the msg.sender. Note, this call reverts with INSUFFICIENT_DMM_LIQUIDITY if\r\n     *      there is not enough DMM available to be minted.\r\n     *\r\n     * @param amount The amount of underlying to send to this DMMA for conversion to DMM.\r\n     * @return The amount of DMM minted.\r\n     */\r\n    function mint(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to recipient. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount` / `exchangeRate`. This call reverts with INSUFFICIENT_DMM_LIQUIDITY\r\n     *      if there is not enough DMM available to be minted. See #MINT_TYPE_HASH. This function gives the `owner` the\r\n     *      illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction and\r\n     *      potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-minted DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of underlying that should be minted by `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of DMM minted, minus the fees paid. To get the total amount minted, add the `feeAmount` to\r\n     *          the returned amount from this function call.\r\n     */\r\n    function mintFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from msg.sender to this DMMA contract. Then, sends the corresponding amount of token around\r\n     *      which this DMMA wraps to the msg.sender. Note, this call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY if\r\n     *      there is not enough DMM available to be redeemed.\r\n     *\r\n     * @param amount    The amount of DMM to be transferred from msg.sender to this DMMA.\r\n     * @return          The amount of underlying redeemed.\r\n     */\r\n    function redeem(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from `owner` to the DMMA contract. Then, sends the corresponding amount of token around which\r\n     *      this DMMA wraps to `recipient`. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount`. This call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY\r\n     *      if there is not enough underlying available to be redeemed. See #REDEEM_TYPE_HASH. This function gives the\r\n     *      `owner` the illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction\r\n     *      and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-redeemed DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be redeemed for `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of underlying redeemed.\r\n     */\r\n    function redeemFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Sets an allowance for owner with spender using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #PERMIT_TYPEHASH.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param spender       The contract/wallet that can spend DMM tokens on behalf of owner.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param allowed       True if the spender can spend funds on behalf of owner or false to revoke this privilege.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint nonce,\r\n        uint expiry,\r\n        bool allowed,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers DMM from the `owner` to `recipient` using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #TRANSFER_TYPEHASH. This function gives the `owner` the illusion of committing a gasless transaction,\r\n     *      allowing a relayer to broadcast the transaction and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message and originator of the transfer.\r\n     * @param recipient     The address that will receive the transferred DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be transferred from `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return              True if the transfer was successful or false if it failed.\r\n     */\r\n    function transferFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmTokenFactory.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IDmmTokenFactory {\r\n\r\n    function deployToken(\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply,\r\n        address controller\r\n    ) external returns (IDmmToken);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IPausable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IPausable {\r\n\r\n    function paused() external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainCurrencyValuatorV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Gets the value of any currencies that are residing off-chain, but are NOT yet allocated to a revenue-producing asset.\r\n */\r\ninterface IOffChainCurrencyValuatorV1 {\r\n\r\n    /**\r\n     * @return The value of the off-chain assets. The number returned uses 18 decimal places.\r\n     */\r\n    function getOffChainCurrenciesValue() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/impl/DmmControllerV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DmmControllerV2 is IPausable, Pausable, CommonConstants, IDmmControllerV2, Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    /********************************\r\n     * Events\r\n     */\r\n\r\n    event GuardianChanged(address previousGuardian, address newGuardian);\r\n    event DmmTokenFactoryChanged(address previousDmmTokenFactory, address newDmmTokenFactory);\r\n    event DmmEtherFactoryChanged(address previousDmmEtherFactory, address newDmmEtherFactory);\r\n    event CollateralizationCalculatorChanged(address previousCollateralizationCalculator, address newCollateralizationCalculator);\r\n    event InterestRateInterfaceChanged(address previousInterestRateInterface, address newInterestRateInterface);\r\n    event OffChainAssetValuatorChanged(address previousOffChainAssetValuator, address newOffChainAssetValuator);\r\n    event OffChainCurrencyValuatorChanged(address previousOffChainCurrencyValuator, address newOffChainCurrencyValuator);\r\n    event UnderlyingTokenValuatorChanged(address previousUnderlyingTokenValuator, address newUnderlyingTokenValuator);\r\n\r\n    event MarketAdded(uint indexed dmmTokenId, address indexed dmmToken, address indexed underlyingToken);\r\n\r\n    event DisableMarket(uint indexed dmmTokenId);\r\n    event EnableMarket(uint indexed dmmTokenId);\r\n\r\n    event MinCollateralizationChanged(uint previousMinCollateralization, uint newMinCollateralization);\r\n    event MinReserveRatioChanged(uint previousMinReserveRatio, uint newMinReserveRatio);\r\n\r\n    /********************************\r\n     * Controller Fields\r\n     */\r\n\r\n    address public guardian;\r\n    IAssetIntroducerV1 public assetIntroducerProxy;\r\n    ICollateralizationCalculator public collateralizationCalculator;\r\n    InterestRateInterface public interestRateInterface;\r\n    IOffChainAssetValuatorV1 public offChainAssetsValuator;\r\n    IOffChainCurrencyValuatorV1 public offChainCurrencyValuator;\r\n    IUnderlyingTokenValuator public underlyingTokenValuator;\r\n    IDmmTokenFactory public dmmEtherFactory;\r\n    IDmmTokenFactory public dmmTokenFactory;\r\n    DmmBlacklistable public blacklistable;\r\n    uint public minCollateralization;\r\n    uint public minReserveRatio;\r\n    address public wethToken;\r\n\r\n    /********************************\r\n     * DMM Account Management\r\n     */\r\n\r\n    mapping(uint => address) public dmmTokenIdToDmmTokenAddressMap;\r\n    mapping(address => uint) public dmmTokenAddressToDmmTokenIdMap;\r\n\r\n    mapping(address => uint) public underlyingTokenAddressToDmmTokenIdMap;\r\n    mapping(uint => address) public dmmTokenIdToUnderlyingTokenAddressMap;\r\n\r\n    mapping(uint => bool) public dmmTokenIdToIsDisabledMap;\r\n    uint[] public dmmTokenIds;\r\n\r\n    /********************************\r\n     * Constants\r\n     */\r\n\r\n    uint public constant COLLATERALIZATION_BASE_RATE = 1e18;\r\n    uint public constant INTEREST_RATE_BASE_RATE = 1e18;\r\n    uint public constant MIN_RESERVE_RATIO_BASE_RATE = 1e18;\r\n\r\n    constructor(\r\n        address _guardian,\r\n        address _assetIntroducerProxy,\r\n        address _collateralizationCalculator,\r\n        address _interestRateInterface,\r\n        address _offChainAssetsValuator,\r\n        address _offChainCurrencyValuator,\r\n        address _underlyingTokenValuator,\r\n        address _dmmEtherFactory,\r\n        address _dmmTokenFactory,\r\n        address _blacklistable,\r\n        uint _minCollateralization,\r\n        uint _minReserveRatio,\r\n        address _wethToken\r\n    ) public {\r\n        guardian = _guardian;\r\n        assetIntroducerProxy = IAssetIntroducerV1(_assetIntroducerProxy);\r\n        collateralizationCalculator = ICollateralizationCalculator(_collateralizationCalculator);\r\n        interestRateInterface = InterestRateInterface(_interestRateInterface);\r\n        offChainAssetsValuator = IOffChainAssetValuatorV1(_offChainAssetsValuator);\r\n        offChainCurrencyValuator = IOffChainCurrencyValuatorV1(_offChainCurrencyValuator);\r\n        underlyingTokenValuator = IUnderlyingTokenValuator(_underlyingTokenValuator);\r\n        dmmTokenFactory = IDmmTokenFactory(_dmmTokenFactory);\r\n        dmmEtherFactory = IDmmTokenFactory(_dmmEtherFactory);\r\n        blacklistable = DmmBlacklistable(_blacklistable);\r\n        minCollateralization = _minCollateralization;\r\n        minReserveRatio = _minReserveRatio;\r\n        wethToken = _wethToken;\r\n    }\r\n\r\n    /*****************\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"ECOSYSTEM_PAUSED\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused(), \"ECOSYSTEM_NOT_PAUSED\");\r\n        _;\r\n    }\r\n\r\n    modifier requireTokenExists(uint dmmTokenId) {\r\n        require(dmmTokenIdToDmmTokenAddressMap[dmmTokenId] != address(0x0), \"TOKEN_DOES_NOT_EXIST\");\r\n        _;\r\n    }\r\n\r\n    modifier requireIsFromAssetIntroducer {\r\n        require(\r\n            msg.sender == address(assetIntroducerProxy),\r\n            \"DmmControllerV2: SENDER_IS_NOT_ASSET_INTRODUCER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requireIsFromAssetIntroducerOrGuardian {\r\n        require(\r\n            msg.sender == address(assetIntroducerProxy) || msg.sender == guardian,\r\n            \"DmmControllerV2: SENDER_IS_NOT_ASSET_INTRODUCER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**********************\r\n     * Public Functions\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        address oldOwner = owner();\r\n        super.transferOwnership(newOwner);\r\n        _removePauser(oldOwner);\r\n        _addPauser(newOwner);\r\n    }\r\n\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string memory symbol,\r\n        string memory name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) public onlyOwner {\r\n        require(\r\n            underlyingTokenAddressToDmmTokenIdMap[underlyingToken] == 0,\r\n            \"TOKEN_ALREADY_EXISTS\"\r\n        );\r\n\r\n        IDmmToken dmmToken;\r\n        address controller = address(this);\r\n        if (underlyingToken == wethToken) {\r\n            dmmToken = dmmEtherFactory.deployToken(\r\n                symbol,\r\n                name,\r\n                decimals,\r\n                minMintAmount,\r\n                minRedeemAmount,\r\n                totalSupply,\r\n                controller\r\n            );\r\n        } else {\r\n            dmmToken = dmmTokenFactory.deployToken(\r\n                symbol,\r\n                name,\r\n                decimals,\r\n                minMintAmount,\r\n                minRedeemAmount,\r\n                totalSupply,\r\n                controller\r\n            );\r\n        }\r\n\r\n        _addMarket(address(dmmToken), underlyingToken);\r\n    }\r\n\r\n    function addMarketFromExistingDmmTokens(\r\n        address[] calldata dmmTokens,\r\n        address[] calldata underlyingTokens\r\n    )\r\n    onlyOwner\r\n    external {\r\n        require(\r\n            dmmTokens.length == underlyingTokens.length,\r\n            \"LENGTHS_MUST_MATCH\"\r\n        );\r\n        for (uint i = 0; i < dmmTokens.length; i++) {\r\n            require(\r\n                underlyingTokenAddressToDmmTokenIdMap[underlyingTokens[i]] == 0,\r\n                \"TOKEN_ALREADY_EXISTS\"\r\n            );\r\n            require(\r\n                dmmTokens[i].isContract(),\r\n                \"DMM_TOKEN_IS_NOT_CONTRACT\"\r\n            );\r\n            require(\r\n                underlyingTokens[i].isContract(),\r\n                \"UNDERLYING_TOKEN_IS_NOT_CONTRACT\"\r\n            );\r\n            require(\r\n                Ownable(dmmTokens[i]).owner() == address(this),\r\n                \"INVALID_DMM_TOKEN_OWNERSHIP\"\r\n            );\r\n\r\n            _addMarket(dmmTokens[i], underlyingTokens[i]);\r\n        }\r\n    }\r\n\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    )\r\n    onlyOwner\r\n    external {\r\n        require(\r\n            underlyingTokenAddressToDmmTokenIdMap[underlyingToken] == 0,\r\n            \"TOKEN_ALREADY_EXISTS\"\r\n        );\r\n        require(\r\n            dmmToken.isContract(),\r\n            \"DMM_TOKEN_IS_NOT_CONTRACT\"\r\n        );\r\n        require(\r\n            underlyingToken.isContract(),\r\n            \"UNDERLYING_TOKEN_IS_NOT_CONTRACT\"\r\n        );\r\n        require(\r\n            Ownable(dmmToken).owner() == address(this),\r\n            \"INVALID_DMM_TOKEN_OWNERSHIP\"\r\n        );\r\n\r\n        _addMarket(dmmToken, underlyingToken);\r\n    }\r\n\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    )\r\n    onlyOwner\r\n    public {\r\n        require(\r\n            newController.isContract(),\r\n            \"NEW_CONTROLLER_IS_NOT_CONTRACT\"\r\n        );\r\n        // All of the following contracts are owned by the controller. All other ownable contracts are owned by the\r\n        // same owner as this controller.\r\n        for (uint i = 0; i < dmmTokenIds.length; i++) {\r\n            address dmmToken = dmmTokenIdToDmmTokenAddressMap[dmmTokenIds[i]];\r\n            Ownable(dmmToken).transferOwnership(newController);\r\n        }\r\n        Ownable(address(dmmEtherFactory)).transferOwnership(newController);\r\n        Ownable(address(dmmTokenFactory)).transferOwnership(newController);\r\n    }\r\n\r\n    function enableMarket(uint dmmTokenId) public requireTokenExists(dmmTokenId) whenNotPaused onlyOwner {\r\n        require(dmmTokenIdToIsDisabledMap[dmmTokenId], \"MARKET_ALREADY_ENABLED\");\r\n        dmmTokenIdToIsDisabledMap[dmmTokenId] = false;\r\n        emit EnableMarket(dmmTokenId);\r\n    }\r\n\r\n    function disableMarket(uint dmmTokenId) public requireTokenExists(dmmTokenId) whenNotPaused onlyOwner {\r\n        require(!dmmTokenIdToIsDisabledMap[dmmTokenId], \"MARKET_ALREADY_DISABLED\");\r\n        dmmTokenIdToIsDisabledMap[dmmTokenId] = true;\r\n        emit DisableMarket(dmmTokenId);\r\n    }\r\n\r\n    function setGuardian(\r\n        address newGuardian\r\n    )\r\n    whenNotPaused\r\n    onlyOwner\r\n    public {\r\n        address oldGuardian = guardian;\r\n        guardian = newGuardian;\r\n        emit GuardianChanged(oldGuardian, newGuardian);\r\n    }\r\n\r\n    function setCollateralizationCalculator(\r\n        address newCollateralizationCalculator\r\n    ) public whenNotPaused onlyOwner {\r\n        address oldCollateralizationCalculator = address(collateralizationCalculator);\r\n        collateralizationCalculator = ICollateralizationCalculator(newCollateralizationCalculator);\r\n        emit CollateralizationCalculatorChanged(oldCollateralizationCalculator, address(collateralizationCalculator));\r\n    }\r\n\r\n    function setDmmTokenFactory(address newDmmTokenFactory) public whenNotPaused onlyOwner {\r\n        address oldDmmTokenFactory = address(dmmTokenFactory);\r\n        dmmTokenFactory = IDmmTokenFactory(newDmmTokenFactory);\r\n        emit DmmTokenFactoryChanged(oldDmmTokenFactory, address(dmmTokenFactory));\r\n    }\r\n\r\n    function setDmmEtherFactory(address newDmmEtherFactory) public whenNotPaused onlyOwner {\r\n        address oldDmmEtherFactory = address(dmmEtherFactory);\r\n        dmmEtherFactory = IDmmTokenFactory(newDmmEtherFactory);\r\n        emit DmmEtherFactoryChanged(oldDmmEtherFactory, address(dmmEtherFactory));\r\n    }\r\n\r\n    function setInterestRateInterface(address newInterestRateInterface) public whenNotPaused onlyOwner {\r\n        address oldInterestRateInterface = address(interestRateInterface);\r\n        interestRateInterface = InterestRateInterface(newInterestRateInterface);\r\n        emit InterestRateInterfaceChanged(oldInterestRateInterface, address(interestRateInterface));\r\n    }\r\n\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) public whenNotPaused onlyOwner {\r\n        address oldOffChainAssetValuator = address(offChainAssetsValuator);\r\n        offChainAssetsValuator = IOffChainAssetValuatorV1(newOffChainAssetValuator);\r\n        emit OffChainAssetValuatorChanged(oldOffChainAssetValuator, address(offChainAssetsValuator));\r\n    }\r\n\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) public whenNotPaused onlyOwner {\r\n        address oldOffChainCurrencyValuator = address(offChainCurrencyValuator);\r\n        offChainCurrencyValuator = IOffChainCurrencyValuatorV1(newOffChainCurrencyValuator);\r\n        emit OffChainCurrencyValuatorChanged(oldOffChainCurrencyValuator, address(offChainCurrencyValuator));\r\n    }\r\n\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) public whenNotPaused onlyOwner {\r\n        address oldUnderlyingTokenValuator = address(underlyingTokenValuator);\r\n        underlyingTokenValuator = IUnderlyingTokenValuator(newUnderlyingTokenValuator);\r\n        emit UnderlyingTokenValuatorChanged(oldUnderlyingTokenValuator, address(underlyingTokenValuator));\r\n    }\r\n\r\n    function setMinCollateralization(uint newMinCollateralization) public whenNotPaused onlyOwner {\r\n        uint oldMinCollateralization = minCollateralization;\r\n        minCollateralization = newMinCollateralization;\r\n        emit MinCollateralizationChanged(oldMinCollateralization, minCollateralization);\r\n    }\r\n\r\n    function setMinReserveRatio(uint newMinReserveRatio) public whenNotPaused onlyOwner {\r\n        uint oldMinReserveRatio = minReserveRatio;\r\n        minReserveRatio = newMinReserveRatio;\r\n        emit MinReserveRatioChanged(oldMinReserveRatio, minReserveRatio);\r\n    }\r\n\r\n    function increaseTotalSupply(\r\n        uint dmmTokenId,\r\n        uint amount\r\n    ) public requireTokenExists(dmmTokenId) whenNotPaused onlyOwner {\r\n        IDmmToken(dmmTokenIdToDmmTokenAddressMap[dmmTokenId]).increaseTotalSupply(amount);\r\n        require(getTotalCollateralization() >= minCollateralization, \"INSUFFICIENT_COLLATERAL\");\r\n    }\r\n\r\n    function decreaseTotalSupply(\r\n        uint dmmTokenId,\r\n        uint amount\r\n    ) public requireTokenExists(dmmTokenId) whenNotPaused onlyOwner {\r\n        IDmmToken(dmmTokenIdToDmmTokenAddressMap[dmmTokenId]).decreaseTotalSupply(amount);\r\n    }\r\n\r\n    function adminWithdrawFunds(\r\n        uint dmmTokenId,\r\n        uint underlyingAmount\r\n    ) public requireTokenExists(dmmTokenId) whenNotPaused requireIsFromAssetIntroducer {\r\n        // Attempt to pull from the DMM contract into this contract, then send from this contract to sender.\r\n        IDmmToken token = IDmmToken(dmmTokenIdToDmmTokenAddressMap[dmmTokenId]);\r\n        token.withdrawUnderlying(underlyingAmount);\r\n        IERC20 underlyingToken = IERC20(dmmTokenIdToUnderlyingTokenAddressMap[dmmTokenId]);\r\n        underlyingToken.safeTransfer(_msgSender(), underlyingAmount);\r\n\r\n        // This is the amount owed by the system in terms of underlying\r\n        uint totalOwedAmount = token.activeSupply().mul(token.getCurrentExchangeRate()).div(EXCHANGE_RATE_BASE_RATE);\r\n        uint underlyingBalance = IERC20(dmmTokenIdToUnderlyingTokenAddressMap[dmmTokenId]).balanceOf(address(token));\r\n\r\n        if (totalOwedAmount > 0) {\r\n            // IE if we owe 100 and have an underlying balance of 10 --> reserve ratio is 0.1\r\n            uint actualReserveRatio = underlyingBalance.mul(MIN_RESERVE_RATIO_BASE_RATE).div(totalOwedAmount);\r\n            require(actualReserveRatio >= minReserveRatio, \"INSUFFICIENT_LEFTOVER_RESERVES\");\r\n        }\r\n\r\n        emit AdminWithdraw(_msgSender(), underlyingAmount);\r\n    }\r\n\r\n    function adminDepositFunds(\r\n        uint dmmTokenId,\r\n        uint underlyingAmount\r\n    ) public requireTokenExists(dmmTokenId) whenNotPaused requireIsFromAssetIntroducerOrGuardian {\r\n        // Attempt to pull from the sender into this contract, then have the DMM token pull from here.\r\n        IERC20 underlyingToken = IERC20(dmmTokenIdToUnderlyingTokenAddressMap[dmmTokenId]);\r\n        underlyingToken.safeTransferFrom(_msgSender(), address(this), underlyingAmount);\r\n\r\n        address dmmTokenAddress = dmmTokenIdToDmmTokenAddressMap[dmmTokenId];\r\n        underlyingToken.approve(dmmTokenAddress, underlyingAmount);\r\n        IDmmToken(dmmTokenAddress).depositUnderlying(underlyingAmount);\r\n        emit AdminDeposit(_msgSender(), underlyingAmount);\r\n    }\r\n\r\n    function getTotalCollateralization() public view returns (uint) {\r\n        return collateralizationCalculator.getTotalCollateralization();\r\n    }\r\n\r\n    function getActiveCollateralization() public view returns (uint) {\r\n        return collateralizationCalculator.getActiveCollateralization();\r\n    }\r\n\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) public view returns (uint) {\r\n        uint dmmTokenId = underlyingTokenAddressToDmmTokenIdMap[underlyingToken];\r\n        return getInterestRateByDmmTokenId(dmmTokenId);\r\n    }\r\n\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) requireTokenExists(dmmTokenId) public view returns (uint) {\r\n        address dmmToken = dmmTokenIdToDmmTokenAddressMap[dmmTokenId];\r\n        uint totalSupply = IERC20(dmmToken).totalSupply();\r\n        uint activeSupply = IDmmToken(dmmToken).activeSupply();\r\n        return interestRateInterface.getInterestRate(dmmTokenId, totalSupply, activeSupply);\r\n    }\r\n\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) public view returns (uint) {\r\n        uint dmmTokenId = dmmTokenAddressToDmmTokenIdMap[dmmToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        uint totalSupply = IERC20(dmmToken).totalSupply();\r\n        uint activeSupply = IDmmToken(dmmToken).activeSupply();\r\n        return interestRateInterface.getInterestRate(dmmTokenId, totalSupply, activeSupply);\r\n    }\r\n\r\n    function getExchangeRateByUnderlying(address underlyingToken) public view returns (uint) {\r\n        address dmmToken = getDmmTokenForUnderlying(underlyingToken);\r\n        return IDmmToken(dmmToken).getCurrentExchangeRate();\r\n    }\r\n\r\n    function getExchangeRate(address dmmToken) public view returns (uint) {\r\n        uint dmmTokenId = dmmTokenAddressToDmmTokenIdMap[dmmToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        return IDmmToken(dmmToken).getCurrentExchangeRate();\r\n    }\r\n\r\n    function getDmmTokenForUnderlying(address underlyingToken) public view returns (address) {\r\n        uint dmmTokenId = underlyingTokenAddressToDmmTokenIdMap[underlyingToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        return dmmTokenIdToDmmTokenAddressMap[dmmTokenId];\r\n    }\r\n\r\n    function getUnderlyingTokenForDmm(address dmmToken) public view returns (address) {\r\n        uint dmmTokenId = dmmTokenAddressToDmmTokenIdMap[dmmToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        return dmmTokenIdToUnderlyingTokenAddressMap[dmmTokenId];\r\n    }\r\n\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) requireTokenExists(dmmTokenId) public view returns (bool) {\r\n        return !dmmTokenIdToIsDisabledMap[dmmTokenId];\r\n    }\r\n\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) public view returns (bool) {\r\n        uint dmmTokenId = dmmTokenAddressToDmmTokenIdMap[dmmToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        return !dmmTokenIdToIsDisabledMap[dmmTokenId];\r\n    }\r\n\r\n    function getTokenIdFromDmmTokenAddress(address dmmToken) public view returns (uint) {\r\n        uint dmmTokenId = dmmTokenAddressToDmmTokenIdMap[dmmToken];\r\n        _checkTokenExists(dmmTokenId);\r\n\r\n        return dmmTokenId;\r\n    }\r\n\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address) {\r\n        address token = dmmTokenIdToDmmTokenAddressMap[dmmTokenId];\r\n        require(token != address(0x0), \"TOKEN_DOES_NOT_EXIST\");\r\n        return token;\r\n    }\r\n\r\n    function getDmmTokenIds() public view returns (uint[] memory) {\r\n        return dmmTokenIds;\r\n    }\r\n\r\n\r\n    /**********************\r\n     * Private Functions\r\n     */\r\n\r\n    function _checkTokenExists(uint dmmTokenId) internal pure returns (bool) {\r\n        require(dmmTokenId != 0, \"TOKEN_DOES_NOT_EXIST\");\r\n        return true;\r\n    }\r\n\r\n    function _addMarket(address dmmToken, address underlyingToken) private {\r\n        // Start the IDs at 1. Zero is reserved for the empty case when it doesn't exist.\r\n        uint dmmTokenId = dmmTokenIds.length + 1;\r\n\r\n        // Update the maps\r\n        dmmTokenIdToDmmTokenAddressMap[dmmTokenId] = dmmToken;\r\n        dmmTokenAddressToDmmTokenIdMap[dmmToken] = dmmTokenId;\r\n        underlyingTokenAddressToDmmTokenIdMap[underlyingToken] = dmmTokenId;\r\n        dmmTokenIdToUnderlyingTokenAddressMap[dmmTokenId] = underlyingToken;\r\n\r\n        // Misc. Structures\r\n        dmmTokenIdToIsDisabledMap[dmmTokenId] = false;\r\n        dmmTokenIds.push(dmmTokenId);\r\n\r\n        emit MarketAdded(dmmTokenId, dmmToken, underlyingToken);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetIntroducerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralizationCalculator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offChainAssetsValuator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offChainCurrencyValuator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingTokenValuator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dmmEtherFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dmmTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blacklistable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReserveRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousCollateralizationCalculator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollateralizationCalculator\",\"type\":\"address\"}],\"name\":\"CollateralizationCalculatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"DisableMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousDmmEtherFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDmmEtherFactory\",\"type\":\"address\"}],\"name\":\"DmmEtherFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousDmmTokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDmmTokenFactory\",\"type\":\"address\"}],\"name\":\"DmmTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"EnableMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousInterestRateInterface\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInterestRateInterface\",\"type\":\"address\"}],\"name\":\"InterestRateInterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinCollateralization\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinCollateralization\",\"type\":\"uint256\"}],\"name\":\"MinCollateralizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinReserveRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinReserveRatio\",\"type\":\"uint256\"}],\"name\":\"MinReserveRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOffChainAssetValuator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOffChainAssetValuator\",\"type\":\"address\"}],\"name\":\"OffChainAssetValuatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOffChainCurrencyValuator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOffChainCurrencyValuator\",\"type\":\"address\"}],\"name\":\"OffChainCurrencyValuatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousUnderlyingTokenValuator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUnderlyingTokenValuator\",\"type\":\"address\"}],\"name\":\"UnderlyingTokenValuatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"COLLATERALIZATION_BASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_RATE_BASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTEREST_RATE_BASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_RESERVE_RATIO_BASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRedeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"addMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"addMarketFromExistingDmmToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dmmTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"addMarketFromExistingDmmTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"adminDepositFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetIntroducerProxy\",\"outputs\":[{\"internalType\":\"contract IAssetIntroducerV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklistable\",\"outputs\":[{\"internalType\":\"contract DmmBlacklistable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralizationCalculator\",\"outputs\":[{\"internalType\":\"contract ICollateralizationCalculator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"disableMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmmEtherFactory\",\"outputs\":[{\"internalType\":\"contract IDmmTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dmmTokenAddressToDmmTokenIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmmTokenFactory\",\"outputs\":[{\"internalType\":\"contract IDmmTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmmTokenIdToDmmTokenAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmmTokenIdToIsDisabledMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmmTokenIdToUnderlyingTokenAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmmTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"enableMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"getDmmTokenAddressByDmmTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getDmmTokenForUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDmmTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getExchangeRateByUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"}],\"name\":\"getInterestRateByDmmTokenAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"getInterestRateByDmmTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getInterestRateByUnderlyingTokenAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"}],\"name\":\"getTokenIdFromDmmTokenAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingTokenForDmm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateInterface\",\"outputs\":[{\"internalType\":\"contract InterestRateInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"}],\"name\":\"isMarketEnabledByDmmTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"isMarketEnabledByDmmTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offChainAssetsValuator\",\"outputs\":[{\"internalType\":\"contract IOffChainAssetValuatorV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offChainCurrencyValuator\",\"outputs\":[{\"internalType\":\"contract IOffChainCurrencyValuatorV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollateralizationCalculator\",\"type\":\"address\"}],\"name\":\"setCollateralizationCalculator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDmmEtherFactory\",\"type\":\"address\"}],\"name\":\"setDmmEtherFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDmmTokenFactory\",\"type\":\"address\"}],\"name\":\"setDmmTokenFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterestRateInterface\",\"type\":\"address\"}],\"name\":\"setInterestRateInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinCollateralization\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinReserveRatio\",\"type\":\"uint256\"}],\"name\":\"setMinReserveRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOffChainAssetValuator\",\"type\":\"address\"}],\"name\":\"setOffChainAssetValuator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOffChainCurrencyValuator\",\"type\":\"address\"}],\"name\":\"setOffChainCurrencyValuator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnderlyingTokenValuator\",\"type\":\"address\"}],\"name\":\"setUnderlyingTokenValuator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferOwnershipToNewController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingTokenAddressToDmmTokenIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingTokenValuator\",\"outputs\":[{\"internalType\":\"contract IUnderlyingTokenValuator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DmmControllerV2","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dd7680b6b2eec193ce3ece7129708ee12531bccf00000000000000000000000022da19b404f432d64e280c3c5712e52612b689fd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f2a3b2efa07d264ea79ce0b96d3173a8feacd350000000000000000000000004f9c3332d352f1ef22f010ba93a9653261e1634b000000000000000000000000826d758af2fed387ac15843327e143b2cafe9047000000000000000000000000ac7e5e3b589d55a43d62b90c6b4c4ef28ea355730000000000000000000000001186d7dff910aa6c74bb9af71539c668133034ac0000000000000000000000006ce6c84fe43df6a28c209b36179bd84a52caeefe000000000000000000000000516d652e2f12876f5f0244aa661b1c262a2d96b10000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://932416bcc1f562c298ee659ce6561d63c1c75ec3383297cc9c6ee8e2c5319e0e"}]}