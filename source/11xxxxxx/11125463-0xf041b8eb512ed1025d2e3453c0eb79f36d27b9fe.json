{"status":"1","message":"OK","result":[{"SourceCode":"{\"BMWP_V1.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BMWP ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n * Originally based on code by: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol\\r\\n */\\r\\ncontract BMWP is IERC20 {\\r\\n  /**\\r\\n   * MATH\\r\\n   */\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  /**\\r\\n  * DATA\\r\\n  */\\r\\n\\r\\n  // ERC20 BASIC DATA \\r\\n  mapping (address =\\u003e uint256) private _balances;\\r\\n  string public constant name = \\\"BMWP token\\\"; // solium-disable-line uppercase\\r\\n  string public constant symbol = \\\"BMWP\\\"; // solium-disable-line uppercase\\r\\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  // ERC20 DATA\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n  // INITIALIZATION DATA\\r\\n  bool private initialized = false;\\r\\n\\r\\n  // OWNER DATA\\r\\n  address public owner;\\r\\n\\r\\n  /**\\r\\n  * FUNCTIONALITY\\r\\n  */\\r\\n\\r\\n  // INITIALIZATION FUNCTIONALITY\\r\\n\\r\\n  /**\\r\\n  * @dev sets initials tokens, the owner.\\r\\n  * this serves as the constructor for the proxy but compiles to the\\r\\n  * memory model of the Implementation contract.\\r\\n  */\\r\\n  function initialize() public {\\r\\n    require(!initialized, \\\"already initialized\\\");\\r\\n    owner = msg.sender;\\r\\n    initialized = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * The constructor is used here to ensure that the implementation\\r\\n  * contract is initialized. An uncontrolled implementation\\r\\n  * contract might lead to misleading state\\r\\n  * for users who accidentally interact with it.\\r\\n  */\\r\\n  constructor() public {\\r\\n    initialize();\\r\\n  }\\r\\n\\r\\n  // ERC20 BASIC FUNCTIONALITY\\r\\n\\r\\n  /**\\r\\n  * @dev Total number of tokens in existence\\r\\n  */\\r\\n  function totalSupply() public view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _addr The address to query the the balance of.\\r\\n  * @return An uint256 representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _addr) public view returns (uint256) {\\r\\n    return _balances[_addr];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Transfer token for a specified address\\r\\n  * @param to The address to transfer to.\\r\\n  * @param value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address to, uint256 value) public returns (bool) {\\r\\n    require(value \\u003c= _balances[msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    emit Transfer(msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // ERC20 FUNCTIONALITY\\r\\n\\r\\n  /**\\r\\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n  * @param _owner address The address which owns the funds.\\r\\n  * @param spender address The address which will spend the funds.\\r\\n  * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n  */\\r\\n  function allowance(address _owner, address spender) public view returns (uint256) {\\r\\n    return _allowed[_owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address spender, uint256 value) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n\\r\\n    _allowed[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // ERC20 FUNCTIONALITY\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param from address The address which you want to send tokens from\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 the amount of tokens to be transferred\\r\\n   */\\r\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n    require(value \\u003c= _balances[from]);\\r\\n    require(value \\u003c= _allowed[from][msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[from] = _balances[from].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    emit Transfer(from, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n   * approve should be called when allowed_[_spender] == 0. To increment\\r\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n   * the first transaction is mined)\\r\\n   * From MonolithDAO Token.sol\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param addedValue The amount of tokens to increase the allowance by.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n\\r\\n    _allowed[msg.sender][spender] = (\\r\\n      _allowed[msg.sender][spender].add(addedValue));\\r\\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n   * approve should be called when allowed_[_spender] == 0. To decrement\\r\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n   * the first transaction is mined)\\r\\n   * From MonolithDAO Token.sol\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n\\r\\n    _allowed[msg.sender][spender] = (\\r\\n      _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // OWNER FUNCTIONALITY\\r\\n\\r\\n  /**\\r\\n  * @dev Throws if called by any account other than the owner.\\r\\n  */\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner, \\\"onlyOwner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n  * @param _newOwner The address to transfer ownership to.\\r\\n  */\\r\\n  function transferOwnership(address _newOwner) public onlyOwner {\\r\\n    require(_newOwner != address(0), \\\"cannot transfer ownership to address zero\\\");\\r\\n    emit OwnershipTransferred(owner, _newOwner);\\r\\n    owner = _newOwner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * EVENTS\\r\\n  */\\r\\n\\r\\n  // OWNABLE EVENTS\\r\\n  event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n  * @dev Version 1 of the BMWP token .\\r\\n  * 1. fix the bug that the total quantity is incorrect\\r\\n  * 2. fix the bug that the token has no holder\\r\\n  */\\r\\n  bool private v1_fixed = false;\\r\\n  function v1Fix() public onlyOwner {\\r\\n    require(!v1_fixed, \\\"already initialized\\\");\\r\\n    _totalSupply = 21*10**4*10**18;\\r\\n    _balances[owner] = _totalSupply;\\r\\n    v1_fixed = true;\\r\\n  }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface IERC20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value\\r\\n  );\\r\\n\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n  );\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, reverts on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"v1Fix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BMWP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://006eea7da20e307e480a228e1e9fbeab886c2f9640e7e2fd68b46620ece1a69d"}]}