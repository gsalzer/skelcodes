{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IArmorMaster {\r\n    function registerModule(bytes32 _key, address _module) external;\r\n    function getModule(bytes32 _key) external view returns(address);\r\n    function keep() external;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * \r\n * @dev Completely default OpenZeppelin.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initializeOwnable() internal {\r\n        require(_owner == address(0), \"already initialized\");\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    function receiveOwnership() public {\r\n        require(msg.sender == _pendingOwner, \"only pending owner can call this function\");\r\n        _transferOwnership(_pendingOwner);\r\n        _pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\nlibrary Bytes32 {\r\n    function toString(bytes32 x) internal pure returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint256 j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint256 j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Each arCore contract is a module to enable simple communication and interoperability. ArmorMaster.sol is master.\r\n**/\r\ncontract ArmorModule {\r\n    IArmorMaster internal _master;\r\n\r\n    using Bytes32 for bytes32;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Ownable(address(_master)).owner(), \"only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier doKeep() {\r\n        _master.keep();\r\n        _;\r\n    }\r\n\r\n    modifier onlyModule(bytes32 _module) {\r\n        string memory message = string(abi.encodePacked(\"only module \", _module.toString(),\" can call this function\"));\r\n        require(msg.sender == getModule(_module), message);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Used when multiple can call.\r\n    **/\r\n    modifier onlyModules(bytes32 _moduleOne, bytes32 _moduleTwo) {\r\n        string memory message = string(abi.encodePacked(\"only module \", _moduleOne.toString(),\" or \", _moduleTwo.toString(),\" can call this function\"));\r\n        require(msg.sender == getModule(_moduleOne) || msg.sender == getModule(_moduleTwo), message);\r\n        _;\r\n    }\r\n\r\n    function initializeModule(address _armorMaster) internal {\r\n        require(address(_master) == address(0), \"already initialized\");\r\n        require(_armorMaster != address(0), \"master cannot be zero address\");\r\n        _master = IArmorMaster(_armorMaster);\r\n    }\r\n\r\n    function changeMaster(address _newMaster) external onlyOwner {\r\n        _master = IArmorMaster(_newMaster);\r\n    }\r\n\r\n    function getModule(bytes32 _key) internal view returns(address) {\r\n        return _master.getModule(_key);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n * \r\n * @dev Default OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n  function calculateRoot(bytes32[] memory leaves) internal pure returns(bytes32) {\r\n    require(leaves.length > 0, \"Cannot compute zero length\");\r\n    bytes32[] memory elements = leaves;\r\n    bytes32[] memory nextLayer = new bytes32[]((elements.length+1)/2) ;\r\n    while(elements.length > 1) {\r\n      for(uint256 i = 0; i<elements.length;i+=2){\r\n        bytes32 left;\r\n        bytes32 right;\r\n        if(i == elements.length - 1){\r\n          left = elements[i];\r\n          right = elements[i];\r\n        }\r\n        else if(elements[i] <= elements[i+1]){\r\n          left = elements[i];\r\n          right = elements[i+1];\r\n        }\r\n        else {\r\n          left = elements[i+1];\r\n          right = elements[i];\r\n        }\r\n        bytes32 elem = keccak256(abi.encodePacked(left,right));\r\n        nextLayer[i/2] = elem;\r\n      }\r\n      elements = nextLayer;\r\n      nextLayer = new bytes32[]((elements.length+1)/2);\r\n    }\r\n    return elements[0];\r\n\r\n  }\r\n  /**\r\n   * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n   * defined by `root`. For this, a `proof` must be provided, containing\r\n   * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n   * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n   */\r\n  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n    bytes32 computedHash = leaf;\r\n\r\n    for (uint256 i = 0; i < proof.length; i++) {\r\n      bytes32 proofElement = proof[i];\r\n\r\n      if (computedHash <= proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n      } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n      }\r\n    }\r\n\r\n    // Check if the computed hash (root) is equal to the provided root\r\n    return computedHash == root;\r\n  }\r\n}\r\n\r\ninterface IStakeManager {\r\n    function totalStakedAmount(address protocol) external view returns(uint256);\r\n    function protocolAddress(uint64 id) external view returns(address);\r\n    function protocolId(address protocol) external view returns(uint64);\r\n    function initialize(address _armorMaster) external;\r\n    function allowedCover(address _newProtocol, uint256 _newTotalCover) external view returns (bool);\r\n    function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount) external;\r\n}\r\n\r\ninterface IBalanceManager {\r\n  event Deposit(address indexed user, uint256 amount);\r\n  event Withdraw(address indexed user, uint256 amount);\r\n  event Loss(address indexed user, uint256 amount);\r\n  event PriceChange(address indexed user, uint256 price);\r\n  event AffiliatePaid(address indexed affiliate, address indexed referral, uint256 amount, uint256 timestamp);\r\n  event ReferralAdded(address indexed affiliate, address indexed referral, uint256 timestamp);\r\n  function deposit(address _referrer) external payable;\r\n  function withdraw(uint256 _amount) external;\r\n  function initialize(address _armormaster, address _devWallet) external;\r\n  function balanceOf(address _user) external view returns (uint256);\r\n  function perSecondPrice(address _user) external view returns(uint256);\r\n  function changePrice(address user, uint64 _newPricePerSec) external;\r\n}\r\n\r\ninterface IPlanManager {\r\n  // Event to notify frontend of plan update.\r\n  event PlanUpdate(address indexed user, address[] protocols, uint256[] amounts, uint256 endTime);\r\n  function initialize(address _armorManager) external;\r\n  function changePrice(address _scAddress, uint256 _pricePerAmount) external;\r\n  function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts) external;\r\n  function checkCoverage(address _user, address _protocol, uint256 _hacktime, uint256 _amount) external view returns (uint256, bool);\r\n  function coverageLeft(address _protocol) external view returns(uint256);\r\n  function getCurrentPlan(address _user) external view returns(uint128 start, uint128 end);\r\n  function updateExpireTime(address _user, uint256 _expiry) external;\r\n  function planRedeemed(address _user, uint256 _planIndex, address _protocol) external;\r\n  function totalUsedCover(address _scAddress) external view returns (uint256);\r\n}\r\n\r\ninterface IClaimManager {\r\n    function initialize(address _armorMaster) external;\r\n    function transferNft(address _to, uint256 _nftId) external;\r\n    function exchangeWithdrawal(uint256 _amount) external;\r\n}\r\n/**\r\n * @dev Separating this off to specifically doKeep track of a borrower's plans.\r\n**/\r\ncontract PlanManager is ArmorModule, IPlanManager {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    uint256 constant private DENOMINATOR = 1000;\r\n    \r\n    // List of plans that a user has purchased so there is a historical record.\r\n    mapping (address => Plan[]) public plans;\r\n\r\n    // keccak256(\"ARMORFI.PLAN\", address(user), uint256(planIdx), uint256(protocolIdx)) => ProtocolPlan\r\n    mapping (bytes32 => ProtocolPlan) public protocolPlan;\r\n    \r\n    // StakeManager calls this when a new NFT is added to update what the price for that protocol is.\r\n    // Cover price in ETH (1e18) of price per second per ETH covered.\r\n    mapping (address => uint256) public nftCoverPrice;\r\n    \r\n    // Mapping to doKeep track of how much coverage we've sold for each protocol.\r\n    // smart contract address => total borrowed cover\r\n    mapping (address => uint256) public override totalUsedCover;\r\n    \r\n    // Protocol => amount of coverage bought by shields (then shields plus) for that protocol.\r\n    // Keep track of these to only allow a % of staked NFTs to be bought by each.\r\n    mapping (address => uint256) public arShieldCover;\r\n    mapping (address => uint256) public arShieldPlusCover;\r\n    mapping (address => uint256) public coreCover;\r\n    \r\n    // Percent allocated to each part of the system. 350 == 35%.\r\n    uint256 public arShieldPercent;\r\n    uint256 public arShieldPlusPercent;\r\n    uint256 public corePercent;\r\n    \r\n    // Mapping of the address of shields => 1 if they're arShield and 2 if they're arShieldPlus.\r\n    mapping (address => uint256) public arShields;\r\n    \r\n    // The amount of markup for Armor's service vs. the original cover cost. 200 == 200%.\r\n    uint256 public markup;\r\n\r\n    // Mapping = protocol => cover amount\r\n    struct Plan {\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint128 length;\r\n    }\r\n\r\n    struct ProtocolPlan {\r\n        uint64 protocolId;\r\n        uint192 amount;\r\n    }\r\n    \r\n    function initialize(\r\n        address _armorMaster\r\n    ) external override {\r\n        initializeModule(_armorMaster);\r\n        markup = 150;\r\n        arShieldPercent = 350;\r\n        arShieldPlusPercent = 350;\r\n        corePercent = 300;\r\n    }\r\n    \r\n    function getCurrentPlan(address _user) external view override returns(uint128 start, uint128 end){\r\n        if(plans[_user].length == 0){\r\n            return(0,0);\r\n        }\r\n        Plan memory plan = plans[_user][plans[_user].length-1];\r\n        \r\n        //return 0 if there is no active plan\r\n        if(plan.endTime < now){\r\n            return(0,0);\r\n        } else {\r\n            start = plan.startTime;\r\n            end = plan.endTime;\r\n        }\r\n    }\r\n    \r\n    /*\r\n     * @dev User can update their plan for cover amount on any protocol.\r\n     * @param _protocols Addresses of the protocols that we want coverage for.\r\n     * @param _coverAmounts The amount of coverage desired in WEI.\r\n     * @notice Let's simplify this somehow--even just splitting into different functions.\r\n    **/\r\n    function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts)\r\n      external\r\n      doKeep\r\n      override\r\n    {\r\n        require(_protocols.length == _coverAmounts.length, \"protocol and coverAmount length mismatch\");\r\n        require(_protocols.length <= 30, \"You may not protect more than 30 protocols at once.\");\r\n        \r\n        // Need to get price of the protocol here\r\n        if(plans[msg.sender].length > 0){\r\n          Plan storage lastPlan = plans[msg.sender][plans[msg.sender].length - 1];\r\n\r\n          // First go through and subtract all old cover amounts.\r\n          _removeLatestTotals(msg.sender);\r\n          \r\n          // Set current plan to have ended now or when it ended previously.\r\n          lastPlan.endTime = lastPlan.endTime <= now ? lastPlan.endTime : uint64(now);\r\n        }\r\n\r\n        _addNewTotals(_protocols, _coverAmounts);\r\n        uint256 newPricePerSec;\r\n        uint256 _markup = markup;\r\n        \r\n        \r\n        // Loop through protocols, find price per second, add to rate, add coverage amount to mapping.\r\n        for (uint256 i = 0; i < _protocols.length; i++) {\r\n            require(nftCoverPrice[_protocols[i]] != 0, \"Protocol price is zero\");\r\n            \r\n            // nftCoverPrice is Wei per second per full Ether, so a cover amont in Wei. This is divided after this loop.\r\n            uint256 pricePerSec = nftCoverPrice[ _protocols[i] ].mul(_coverAmounts[i]);\r\n            newPricePerSec = newPricePerSec.add(pricePerSec);\r\n        }\r\n        \r\n        //newPricePerSec = newPricePerSec * _markup / 1e18 for decimals / 100 to make up for markup (200 == 200%);\r\n        newPricePerSec = newPricePerSec.mul(_markup).div(1e18).div(100);\r\n        \r\n        // this means user is canceling all plans\r\n        if(newPricePerSec == 0){\r\n            Plan memory newPlan;\r\n            newPlan = Plan(uint64(now), uint64(-1), uint128(0));\r\n            plans[msg.sender].push(newPlan);\r\n            IBalanceManager(getModule(\"BALANCE\")).changePrice(msg.sender, 0);\r\n            emit PlanUpdate(msg.sender, _protocols, _coverAmounts, uint64(-1));\r\n            return;\r\n        }\r\n\r\n        uint256 balance = IBalanceManager(getModule(\"BALANCE\")).balanceOf(msg.sender);\r\n        uint256 endTime = balance.div(newPricePerSec).add(block.timestamp);\r\n        \r\n        // Let's make sure a user can pay for this for at least a week. Weird manipulation of utilization farming could happen otherwise.\r\n        require(endTime >= block.timestamp.add(7 days), \"Balance must be enough for 7 days of coverage.\");\r\n        \r\n        //add plan\r\n        Plan memory newPlan;\r\n        newPlan = Plan(uint64(now), uint64(endTime), uint128(_protocols.length));\r\n        plans[msg.sender].push(newPlan);\r\n        \r\n        //add protocol plan\r\n        for(uint256 i = 0;i<_protocols.length; i++){\r\n            bytes32 key = _hashKey(msg.sender, plans[msg.sender].length - 1, i);\r\n            uint64 protocolId = IStakeManager(getModule(\"STAKE\")).protocolId(_protocols[i]);\r\n            protocolPlan[key] = ProtocolPlan(protocolId, uint192(_coverAmounts[i]));\r\n        }\r\n        \r\n        // update balance price per second here\r\n        uint64 castPricePerSec = uint64(newPricePerSec);\r\n        require(uint256(castPricePerSec) == newPricePerSec);\r\n        IBalanceManager(getModule(\"BALANCE\")).changePrice(msg.sender, castPricePerSec);\r\n\r\n        emit PlanUpdate(msg.sender, _protocols, _coverAmounts, endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the contract-wide totals for each protocol that has changed.\r\n     * @param _user User whose plan is updating these totals.\r\n    **/\r\n    function _removeLatestTotals(address _user) internal {\r\n        Plan storage plan = plans[_user][plans[_user].length - 1];\r\n\r\n        uint256 idx = plans[_user].length - 1;\r\n\r\n        for (uint256 i = 0; i < plan.length; i++) {\r\n            bytes32 key = _hashKey(_user, idx, i);\r\n            ProtocolPlan memory protocol = protocolPlan[key];\r\n            address protocolAddress = IStakeManager(getModule(\"STAKE\")).protocolAddress(protocol.protocolId);\r\n            totalUsedCover[protocolAddress] = totalUsedCover[protocolAddress].sub(uint256(protocol.amount));\r\n            \r\n            uint256 shield = arShields[_user];\r\n            if (shield == 1) {\r\n                arShieldCover[protocolAddress] = arShieldCover[protocolAddress].sub(protocol.amount);\r\n            } else if (shield == 2) {\r\n                arShieldPlusCover[protocolAddress] = arShieldPlusCover[protocolAddress].sub(protocol.amount);\r\n            } else {\r\n                coreCover[protocolAddress] = coreCover[protocolAddress].sub(protocol.amount);\r\n            }   \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add new totals for new protocol/cover amounts.\r\n     * @param _newProtocols Protocols that are being borrowed for.\r\n     * @param _newCoverAmounts Cover amounts (in Wei) that are being borrowed.\r\n    **/\r\n    function _addNewTotals(address[] memory _newProtocols, uint256[] memory _newCoverAmounts) internal {\r\n        for (uint256 i = 0; i < _newProtocols.length; i++) {\r\n            \r\n            (uint256 shield, uint256 allowed) = _checkBuyerAllowed(_newProtocols[i]);\r\n            require(allowed >= _newCoverAmounts[i], \"Exceeds allowed cover amount.\");\r\n            \r\n            totalUsedCover[_newProtocols[i]] = totalUsedCover[_newProtocols[i]].add(_newCoverAmounts[i]);\r\n            \r\n            if (shield == 1) {\r\n                arShieldCover[_newProtocols[i]] = arShieldCover[_newProtocols[i]].add(_newCoverAmounts[i]);\r\n            } else if (shield == 2) {\r\n                arShieldPlusCover[_newProtocols[i]] = arShieldPlusCover[_newProtocols[i]].add(_newCoverAmounts[i]);\r\n            } else {\r\n                coreCover[_newProtocols[i]] = coreCover[_newProtocols[i]].add(_newCoverAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determine the amount of coverage left for a specific protocol.\r\n     * @param _protocol The address of the protocol we're determining coverage left for.\r\n    **/\r\n    function coverageLeft(address _protocol)\r\n      external\r\n      override\r\n      view\r\n    returns (uint256) {\r\n        (/* uint256 shield */, uint256 allowed) = _checkBuyerAllowed(_protocol);\r\n        return allowed;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check whether the buyer is allowed to purchase this amount of cover.\r\n     *      Used because core can only buy 30%, and 35% for shields.\r\n     * @param _protocol The protocol cover is being purchased for.\r\n    **/\r\n    function _checkBuyerAllowed(address _protocol)\r\n      internal\r\n      view\r\n    returns (uint256, uint256)\r\n    {\r\n        uint256 totalAllowed = IStakeManager(getModule(\"STAKE\")).totalStakedAmount(_protocol);\r\n        uint256 shield = arShields[msg.sender];\r\n            \r\n        if (shield == 1) {\r\n            uint256 currentCover = arShieldCover[_protocol];\r\n            uint256 allowed = totalAllowed * arShieldPercent / DENOMINATOR;\r\n            return (shield, allowed > currentCover ? allowed - currentCover : 0);\r\n        } else if (shield == 2) {\r\n            uint256 currentCover = arShieldPlusCover[_protocol];\r\n            uint256 allowed = totalAllowed * arShieldPlusPercent / DENOMINATOR;\r\n            return (shield, allowed > currentCover ? allowed - currentCover : 0);\r\n        } else {\r\n            uint256 currentCover = coreCover[_protocol];\r\n            uint256 allowed = totalAllowed * corePercent / DENOMINATOR;\r\n            return (shield, allowed > currentCover ? allowed - currentCover : 0);        \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Used by ClaimManager to check how much coverage the user had at the time of a hack.\r\n     * @param _user The user to check coverage for.\r\n     * @param _protocol The address of the protocol that was hacked. (Address used according to arNFT).\r\n     * @param _hackTime The timestamp of when a hack happened.\r\n     * @return index index of plan for hackTime\r\n     * @return check whether amount is allowed\r\n    **/\r\n    function checkCoverage(address _user, address _protocol, uint256 _hackTime, uint256 _amount)\r\n      external\r\n      view\r\n      override\r\n      returns(uint256 index, bool check)\r\n    {\r\n        // This may be more gas efficient if we don't grab this first but instead grab each plan from storage individually?\r\n        Plan[] storage planArray = plans[_user];\r\n        \r\n        // In normal operation, this for loop should never get too big.\r\n        // If it does (from malicious action), the user will be the only one to suffer.\r\n        for (int256 i = int256(planArray.length - 1); i >= 0; i--) {\r\n            Plan storage plan = planArray[uint256(i)];\r\n            // Only one plan will be active at the time of a hack--return cover amount from then.\r\n            if (_hackTime >= plan.startTime && _hackTime < plan.endTime) {\r\n                for(uint256 j = 0; j< plan.length; j++){\r\n                    bytes32 key = _hashKey(_user, uint256(i), j);\r\n                    if(IStakeManager(getModule(\"STAKE\")).protocolAddress(protocolPlan[key].protocolId) == _protocol){\r\n                        return (uint256(i), _amount <= uint256(protocolPlan[key].amount));\r\n                    }\r\n                }\r\n                return (uint256(i), false);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n     * @dev ClaimManager redeems the plan if it has been claimed. Sets claim amount to 0 so it cannot be claimed again.\r\n     * @param _user User that is redeeming this plan.\r\n     * @param _planIndex The index in the user's Plan array that we're checking.\r\n     * @param _protocol Address of the protocol that a claim is being redeemed for.\r\n    **/\r\n    function planRedeemed(address _user, uint256 _planIndex, address _protocol) \r\n      external \r\n      override \r\n      onlyModule(\"CLAIM\")\r\n    {\r\n        Plan storage plan = plans[_user][_planIndex];\r\n        require(plan.endTime <= now, \"Cannot redeem active plan, update plan to redeem properly\");\r\n\r\n        for (uint256 i = 0; i < plan.length; i++) {\r\n            bytes32 key = _hashKey(_user,_planIndex,i);\r\n            \r\n            ProtocolPlan memory protocol = protocolPlan[key];\r\n            address protocolAddress = IStakeManager(getModule(\"STAKE\")).protocolAddress(protocol.protocolId);\r\n            \r\n            if (protocolAddress == _protocol) protocolPlan[key].amount = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Armor has the ability to change the price that a user is paying for their insurance.\r\n     * @param _protocol The protocol whose arNFT price is being updated.\r\n     * @param _newPrice the new price PER SECOND that the user will be paying.\r\n    **/\r\n    function changePrice(address _protocol, uint256 _newPrice)\r\n      external\r\n      override\r\n      onlyModule(\"STAKE\")\r\n    {\r\n        nftCoverPrice[_protocol] = _newPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev BalanceManager calls to update expire time of a plan when a deposit/withdrawal happens.\r\n     * @param _user Address whose balance was updated.\r\n     * @param _expiry New time plans expire.\r\n    **/\r\n    function updateExpireTime(address _user, uint256 _expiry)\r\n      external\r\n      override\r\n      onlyModule(\"BALANCE\")\r\n    {\r\n        if (plans[_user].length == 0) return;\r\n        Plan storage plan = plans[_user][plans[_user].length-1];\r\n        if (plan.endTime > block.timestamp && _expiry <= block.timestamp) _removeLatestTotals(_user);\r\n        plan.endTime = uint64(_expiry);\r\n    }\r\n    \r\n    /**\r\n     * @dev Hash for protocol info identifier.\r\n     * @param _user Address of the user.\r\n     * @param _planIndex Index of the plan in the user's plan array.\r\n     * @param _protoIndex Index of the protocol in the plan.\r\n     * @return Hash for identifier for protocolPlan mapping.\r\n    **/\r\n    function _hashKey(address _user, uint256 _planIndex, uint256 _protoIndex)\r\n      internal\r\n      pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\"ARMORFI.PLAN.\", _user, _planIndex, _protoIndex));\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner (DAO) can adjust the markup buyers pay for coverage.\r\n     * @param _newMarkup The new markup that will be used. 100 == 100% (no markup).\r\n    **/\r\n    function adjustMarkup(uint256 _newMarkup)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_newMarkup >= 100, \"Markup must be at least 0 (100%).\");\r\n        markup = _newMarkup;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner (DAO) can adjust the percent of coverage allowed for each product.\r\n     * @param _newCorePercent New percent of coverage for general arCore users.\r\n     * @param _newArShieldPercent New percent of coverage for arShields.\r\n     * @param _newArShieldPlusPercent New percent of coverage for arShield Plus.\r\n    **/\r\n    function adjustPercents(uint256 _newCorePercent, uint256 _newArShieldPercent, uint256 _newArShieldPlusPercent)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_newCorePercent + _newArShieldPercent + _newArShieldPlusPercent == 1000, \"Total allocation cannot be more than 100%.\");\r\n        corePercent = _newCorePercent;\r\n        arShieldPercent = _newArShieldPercent;\r\n        arShieldPlusPercent = _newArShieldPlusPercent;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner (DAO) can adjust shields on the contract.\r\n     * @param _shieldAddress Array of addresses we're adjusting.\r\n     * @param _shieldType Type of shield: 1 for arShield, 2 for arShield Plus.\r\n    **/\r\n    function adjustShields(address[] calldata _shieldAddress, uint256[] calldata _shieldType)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_shieldAddress.length == _shieldType.length, \"Submitted arrays are not of equal length.\");\r\n        for (uint256 i = 0; i < _shieldAddress.length; i++) {\r\n            arShields[_shieldAddress[i]] = _shieldType[i];\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"protocols\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PlanUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMarkup\",\"type\":\"uint256\"}],\"name\":\"adjustMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCorePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newArShieldPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newArShieldPlusPercent\",\"type\":\"uint256\"}],\"name\":\"adjustPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_shieldAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shieldType\",\"type\":\"uint256[]\"}],\"name\":\"adjustShields\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arShieldCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arShieldPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arShieldPlusCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arShieldPlusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arShields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hackTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coreCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"coverageLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentPlan\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_armorMaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftCoverPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"planRedeemed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"protocolPlan\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolId\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUsedCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"updateExpireTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_coverAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updatePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlanManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5e573a11ea71749457df3a8088f21d8123eeddc0eaf945c6ac6a507e2160ed8b"}]}