{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract BKP_Sales is Owned {\r\n    \r\n    using SafeMath for uint256;\r\n    address public tokenAddress = 0xe1B3ecdf26aF3C631715b6a49A74470e306D455b;\r\n    uint256 unLockingDate;\r\n    \r\n    struct Users{\r\n        uint256 purchasedTokens;\r\n        uint256 claimedTokens;\r\n        uint256 investedInPreSale;\r\n        uint256 investedInPubSale;\r\n    }\r\n    mapping(address => Users) public usersTokens;\r\n    \r\n    struct Sales{\r\n        uint256 tokenRatePerEth;\r\n        uint256 maxTokensForSale;\r\n        uint256 soldTokens;\r\n        uint256 maxInvestment;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n    }\r\n    mapping(uint256 => Sales) public sales;\r\n    \r\n    modifier unLockingOpen{\r\n        require(block.timestamp >= unLockingDate, \"unlocking will start by 2 january\");\r\n        _;\r\n    }\r\n    \r\n    event CLAIMED(uint256 amount);\r\n    \r\n    constructor() public {\r\n        owner = 0xAfDE309b21922dc45f20aDFb659eF36ac984A454;\r\n        sales[0].tokenRatePerEth = 34706; //347,06\r\n        sales[0].maxTokensForSale = 100000 * 10 ** (18); // 100,000 BKP for sale\r\n        sales[0].soldTokens = 0;\r\n        sales[0].maxInvestment = 5 ether;\r\n        sales[0].startDate = 1608055200; // 15 dec 2020 6pm GMT\r\n        sales[0].endDate = 1608314400; // 18 dec 2020 6pm GMT\r\n        \r\n        sales[1].tokenRatePerEth = 295;\r\n        sales[1].maxTokensForSale = 300000 * 10 ** (18); // 300,000 BKP for sale\r\n        sales[1].soldTokens = 0;\r\n        sales[1].maxInvestment = 20 ether;\r\n        sales[1].startDate = 1608660000; // 22 dec 2020 6pm GMT\r\n        sales[1].endDate = 1609437600; // 31 dec 2020 6pm GMT\r\n\r\n        unLockingDate = 1609545600; // 2 january, 2021 \r\n    }\r\n    \r\n    receive() external payable {\r\n        uint256 _sale;\r\n        if(block.timestamp >= sales[0].startDate && block.timestamp <= sales[0].endDate ){\r\n            // presale\r\n            _sale = 0;\r\n            require(usersTokens[msg.sender].investedInPreSale.add(msg.value) <= sales[_sale].maxInvestment, \"Exceeds allowed max Investment\");\r\n            usersTokens[msg.sender].investedInPreSale = usersTokens[msg.sender].investedInPreSale.add(msg.value);\r\n        }\r\n        else if(block.timestamp >= sales[1].startDate && block.timestamp <= sales[1].endDate){\r\n            // publicsale\r\n            _sale = 1;\r\n            require(usersTokens[msg.sender].investedInPubSale.add(msg.value) <= sales[_sale].maxInvestment, \"Exceeds allowed max Investment\");\r\n            usersTokens[msg.sender].investedInPubSale = usersTokens[msg.sender].investedInPubSale.add(msg.value);\r\n        }\r\n        else{\r\n            revert(\"sale is not open\");\r\n        }\r\n        \r\n        uint256 tokens;\r\n        if(_sale == 0)\r\n            tokens = (msg.value.mul(sales[_sale].tokenRatePerEth)).div(10 ** 2);\r\n        else \r\n            tokens = (msg.value.mul(sales[_sale].tokenRatePerEth));\r\n        \r\n        // allocate tokens to the user\r\n        usersTokens[msg.sender].purchasedTokens = usersTokens[msg.sender].purchasedTokens.add(tokens);\r\n        \r\n        require(sales[_sale].soldTokens.add(tokens) <= sales[_sale].maxTokensForSale, \"Insufficient tokens for sale\");\r\n        \r\n        sales[_sale].soldTokens = sales[_sale].soldTokens.add(tokens);\r\n\r\n        // send received funds to the owner\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function claimTokens() external unLockingOpen{\r\n        // the private sale purchasers will claim their tokens using this function\r\n        uint256 releasePeriod = 1 days;\r\n        uint256 releasePercentage = 166; //1.66% is released per day\r\n        \r\n        uint256 totalTime = block.timestamp.sub(unLockingDate); // this will give total time \r\n        totalTime = totalTime.div(releasePeriod); \r\n        uint256 totalPercentage;\r\n        if(block.timestamp > unLockingDate.add(60 days))\r\n            totalPercentage = 100;\r\n        else \r\n            totalPercentage = (totalTime.mul(releasePercentage)).div(100); // converts 166% to 1.66%\r\n        \r\n        uint256 totalTokensToClaim = onePercent(usersTokens[msg.sender].purchasedTokens).mul(totalPercentage);\r\n        totalTokensToClaim = totalTokensToClaim.sub(usersTokens[msg.sender].claimedTokens);\r\n        \r\n        require(totalTokensToClaim > 0, \"Nothing pending to claim\");\r\n        \r\n        require(IToken(tokenAddress).transfer(msg.sender, totalTokensToClaim), \"Insufficient balance of sale contract!\");\r\n        \r\n        usersTokens[msg.sender].claimedTokens = usersTokens[msg.sender].claimedTokens.add(totalTokensToClaim);\r\n        \r\n        emit CLAIMED(totalTokensToClaim);\r\n    }\r\n    \r\n    function onePercent(uint256 _tokens) internal pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CLAIMED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenRatePerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchasedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedInPreSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedInPubSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BKP_Sales","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b6d94d5ea623c12ce716f5ac1559c8c951c29a9387fcfbf1509095a4a27cb01e"}]}