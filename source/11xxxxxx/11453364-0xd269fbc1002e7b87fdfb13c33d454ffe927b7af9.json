{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 12-10-2020\r\n*/\r\n/*\r\n    Copyright 2020 Charge Factory.\r\n    SPDX-License-Identifier: Apache-2.0\r\n*/\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n// lib/Ownable.sol\r\n/**\r\n * @title Ownable\r\n * @author Charge Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// intf/ICharge.sol\r\ninterface ICharge {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function claimOwnership() external;\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\r\n\r\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\r\n\r\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllBase() external returns (uint256);\r\n\r\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllQuote() external returns (uint256);\r\n\r\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\r\n\r\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n}\r\n\r\n// helper/CloneFactory\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// ChargeFactory.sol\r\n/**\r\n * @title ChargeFactory\r\n * @author Charge Breeder\r\n *\r\n * @notice Register of All Charge\r\n */\r\ncontract ChargeFactory is Ownable {\r\n    address public _Charge_LOGIC_;\r\n    address public _CLONE_FACTORY_;\r\n\r\n    address public _DEFAULT_SUPERVISOR_;\r\n\r\n    mapping(address => mapping(address => address)) internal _Charge_REGISTER_;\r\n    address[] public _Charges;\r\n\r\n    // ============ Events ============\r\n\r\n    event ChargeBirth(address newBorn, address baseToken, address quoteToken);\r\n\r\n    // ============ Constructor Function ============\r\n\r\n    constructor(\r\n        address _ChargeLogic,\r\n        address _cloneFactory,\r\n        address _defaultSupervisor\r\n    ) public {\r\n        _Charge_LOGIC_ = _ChargeLogic;\r\n        _CLONE_FACTORY_ = _cloneFactory;\r\n        _DEFAULT_SUPERVISOR_ = _defaultSupervisor;\r\n    }\r\n\r\n    // ============ Admin Function ============\r\n\r\n    function setChargeLogic(address _ChargeLogic) external onlyOwner {\r\n        _Charge_LOGIC_ = _ChargeLogic;\r\n    }\r\n\r\n    function setCloneFactory(address _cloneFactory) external onlyOwner {\r\n        _CLONE_FACTORY_ = _cloneFactory;\r\n    }\r\n\r\n    function setDefaultSupervisor(address _defaultSupervisor) external onlyOwner {\r\n        _DEFAULT_SUPERVISOR_ = _defaultSupervisor;\r\n    }\r\n\r\n    function removeCharge(address Charge) external onlyOwner {\r\n        address baseToken = ICharge(Charge)._BASE_TOKEN_();\r\n        address quoteToken = ICharge(Charge)._QUOTE_TOKEN_();\r\n        require(isChargeRegistered(baseToken, quoteToken), \"Charge_NOT_REGISTERED\");\r\n        _Charge_REGISTER_[baseToken][quoteToken] = address(0);\r\n        for (uint256 i = 0; i <= _Charges.length - 1; i++) {\r\n            if (_Charges[i] == Charge) {\r\n                _Charges[i] = _Charges[_Charges.length - 1];\r\n                _Charges.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addCharge(address Charge) public onlyOwner {\r\n        address baseToken = ICharge(Charge)._BASE_TOKEN_();\r\n        address quoteToken = ICharge(Charge)._QUOTE_TOKEN_();\r\n        require(!isChargeRegistered(baseToken, quoteToken), \"Charge_REGISTERED\");\r\n        _Charge_REGISTER_[baseToken][quoteToken] = Charge;\r\n        _Charges.push(Charge);\r\n    }\r\n\r\n    // ============ Breed Charge Function ============\r\n\r\n    function breedCharge(\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external onlyOwner returns (address newBornCharge) {\r\n        require(!isChargeRegistered(baseToken, quoteToken), \"Charge_REGISTERED\");\r\n        newBornCharge = ICloneFactory(_CLONE_FACTORY_).clone(_Charge_LOGIC_);\r\n        ICharge(newBornCharge).init(\r\n            _OWNER_,\r\n            _DEFAULT_SUPERVISOR_,\r\n            maintainer,\r\n            baseToken,\r\n            quoteToken,\r\n            oracle,\r\n            lpFeeRate,\r\n            mtFeeRate,\r\n            k,\r\n            gasPriceLimit\r\n        );\r\n        addCharge(newBornCharge);\r\n        emit ChargeBirth(newBornCharge, baseToken, quoteToken);\r\n        return newBornCharge;\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function isChargeRegistered(address baseToken, address quoteToken) public view returns (bool) {\r\n        if (\r\n            _Charge_REGISTER_[baseToken][quoteToken] == address(0) &&\r\n            _Charge_REGISTER_[quoteToken][baseToken] == address(0)\r\n        ) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getCharge(address baseToken, address quoteToken) external view returns (address) {\r\n        return _Charge_REGISTER_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getCharges() external view returns (address[] memory) {\r\n        return _Charges;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ChargeLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultSupervisor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"ChargeBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Charge_LOGIC_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_Charges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_SUPERVISOR_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"}],\"name\":\"addCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"breedCharge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newBornCharge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getCharge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharges\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"isChargeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"}],\"name\":\"removeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ChargeLogic\",\"type\":\"address\"}],\"name\":\"setChargeLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"}],\"name\":\"setCloneFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultSupervisor\",\"type\":\"address\"}],\"name\":\"setDefaultSupervisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChargeFactory","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000001505a9ed57ac87b2b89dc1cc7de783ee62df4630000000000000000000000009a64aec37440f6900434dd4eb67f00d4a3bc507100000000000000000000000091003e8db351a0461bbc73ee81b4b1563e675c77","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0bec04b54ef7d2c1a855668791da2c91739f9967472967e38944e9fa5c21822a"}]}