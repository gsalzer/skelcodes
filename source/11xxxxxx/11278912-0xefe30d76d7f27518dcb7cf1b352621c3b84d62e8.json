{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title USDN Burner\r\n@notice Return 50% of USDN to pool LPs, convert remaining to 3CRV\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface PoolProxy:\r\n    def withdraw_admin_fees(_pool: address): nonpayable\r\n    def donate_admin_fees(_pool: address): nonpayable\r\n\r\n\r\ninterface RegistrySwap:\r\n    def exchange(\r\n        _poool: address,\r\n        _from: address,\r\n        _to: address,\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n        _receiver: address,\r\n    ) -> uint256: payable\r\n\r\ninterface AddressProvider:\r\n    def get_address(_id: uint256) -> address: view\r\n\r\n\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\nTRIPOOL_LP: constant(address) = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\r\nUSDN_POOL: constant(address) = 0x0f9cb53Ebe405d49A0bbdBD291A65Ff571bC83e1\r\nUSDN: constant(address) = 0x674C6Ad92Fd080e4004b2312b45f796a192D27a0\r\n\r\nis_approved: HashMap[address, bool]\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\npool_proxy: public(address)\r\n\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_pool_proxy: address, _receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an `UnderlyingBurner` deployment.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.pool_proxy = _pool_proxy\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n\r\n@payable\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Swap `_coin` for 3CRV and transfer to the fee distributor\r\n    @param _coin Address of the coin being swapped\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n    assert _coin == USDN  # dev: only USDN\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(USDN).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(USDN).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(USDN).balanceOf(self)\r\n\r\n    if amount > 1:\r\n        # withdraw any pending fees from USDN pool\r\n        PoolProxy(self.pool_proxy).withdraw_admin_fees(USDN_POOL)\r\n\r\n        # transfer 50% of USDN back into the pool\r\n        ERC20(USDN).transfer(USDN_POOL, amount / 2)\r\n\r\n        # donate tranferred USDN to LPs\r\n        PoolProxy(self.pool_proxy).donate_admin_fees(USDN_POOL)\r\n\r\n        # swap remaining USDN for 3CRV and transfer to fee distributor\r\n        amount = ERC20(USDN).balanceOf(self)\r\n        registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\r\n        if not self.is_approved[registry_swap]:\r\n            ERC20(USDN).approve(registry_swap, MAX_UINT256)\r\n            self.is_approved[registry_swap] = True\r\n\r\n        RegistrySwap(registry_swap).exchange(USDN_POOL, USDN, TRIPOOL_LP, amount, 0, self.receiver)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_pool_proxy(_pool_proxy: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the pool proxy address\r\n    @param _pool_proxy Pool proxy address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.pool_proxy = _pool_proxy\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool_proxy\"},{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"payable\",\"type\":\"function\",\"gas\":50183},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7769},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36413},{\"name\":\"set_pool_proxy\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool_proxy\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36443},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37700},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36503},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36429},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36563},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36489},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"pool_proxy\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000001632e630e79c3dda3a559a21fe3877997d5dc35000000000000000000000000a464e6dcda8ac41e03616f95f4bc98a13b8922dc000000000000000000000000ae9c8320a6394120ecb7b2b2678d9b4ac848d10600000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}