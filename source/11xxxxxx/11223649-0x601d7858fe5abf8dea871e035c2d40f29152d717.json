{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IShareConverter {\r\n    function convert_shares_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\r\n\r\n    function convert_shares(address _input, address _output, uint _inputAmount) external returns (uint _outputAmount);\r\n}\r\n\r\ninterface IValueVaultMaster {\r\n    function bank(address) view external returns (address);\r\n    function isVault(address) view external returns (bool);\r\n    function isController(address) view external returns (bool);\r\n    function isStrategy(address) view external returns (bool);\r\n\r\n    function slippage(address) view external returns (uint);\r\n    function convertSlippage(address _input, address _output) view external returns (uint);\r\n\r\n    function valueToken() view external returns (address);\r\n    function govVault() view external returns (address);\r\n    function insuranceFund() view external returns (address);\r\n    function performanceReward() view external returns (address);\r\n\r\n    function govVaultProfitShareFee() view external returns (uint);\r\n    function gasFee() view external returns (uint);\r\n    function insuranceFee() view external returns (uint);\r\n    function withdrawalProtectionFee() view external returns (uint);\r\n}\r\n\r\n// 0: DAI, 1: USDC, 2: USDT\r\ninterface IStableSwap3Pool {\r\n    function get_virtual_price() external view returns (uint);\r\n    function balances(uint) external view returns (uint);\r\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\r\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\r\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface IDepositBUSD {\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\r\n}\r\n\r\n// 0: DAI, 1: USDC, 2: USDT, 3: BUSD\r\ninterface IStableSwapBUSD {\r\n    function get_virtual_price() external view returns (uint);\r\n    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\r\n    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\r\n    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\r\n    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface IDepositSUSD {\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\r\n}\r\n\r\n// 0: DAI, 1: USDC, 2: USDT, 3: sUSD\r\ninterface IStableSwapSUSD {\r\n    function get_virtual_price() external view returns (uint);\r\n    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\r\n    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\r\n    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\r\n    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface IDepositHUSD {\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\r\n    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external returns (uint);\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external returns (uint);\r\n}\r\n\r\n// 0: hUSD, 1: 3Crv\r\ninterface IStableSwapHUSD {\r\n    function get_virtual_price() external view returns (uint);\r\n    function calc_token_amount(uint[2] calldata amounts, bool deposit) external view returns (uint);\r\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\r\n    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\r\n    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\r\n    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\r\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\r\n    function calc_withdraw_one_coin(uint amount, int128 i) external view returns (uint);\r\n    function remove_liquidity_one_coin(uint amount, int128 i, uint minAmount) external returns (uint);\r\n    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external returns (uint);\r\n}\r\n\r\ninterface IDepositCompound {\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\r\n}\r\n\r\n// 0: DAI, 1: USDC\r\ninterface IStableSwapCompound {\r\n    function get_virtual_price() external view returns (uint);\r\n    function calc_token_amount(uint[2] calldata amounts, bool deposit) external view returns (uint);\r\n    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\r\n    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\r\n    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface yTokenInterface {\r\n    function getPricePerFullShare() external view returns (uint);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n}\r\n\r\n// 0. 3pool [DAI, USDC, USDT]                  ## APY: 0.88% +8.53% (CRV)                  ## Vol: $16,800,095  ## Liquidity: $163,846,738  (https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\r\n// 1. BUSD [(y)DAI, (y)USDC, (y)USDT, (y)BUSD] ## APY: 2.54% +11.16%                       ## Vol: $6,580,652   ## Liquidity: $148,930,780  (https://etherscan.io/address/0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27)\r\n// 2. sUSD [DAI, USDC, USDT, sUSD]             ## APY: 2.59% +2.19% (SNX) +13.35% (CRV)    ## Vol: $11,854,566  ## Liquidity: $53,575,781   (https://etherscan.io/address/0xA5407eAE9Ba41422680e2e00537571bcC53efBfD)\r\n// 3. husd [HUSD, 3pool]                       ## APY: 0.53% +8.45% (CRV)                  ## Vol: $0           ## Liquidity: $1,546,077    (https://etherscan.io/address/0x3eF6A01A0f81D6046290f3e2A8c5b843e738E604)\r\n// 4. Compound [(c)DAI, (c)USDC]               ## APY: 3.97% +9.68% (CRV)                  ## Vol: $2,987,370   ## Liquidity: $121,783,878  (https://etherscan.io/address/0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56)\r\n// 5. Y [(y)DAI, (y)USDC, (y)USDT, (y)TUSD]    ## APY: 3.37% +8.39% (CRV)                  ## Vol: $8,374,971   ## Liquidity: $176,470,728  (https://etherscan.io/address/0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)\r\n// 6. Swerve [(y)DAI...(y)TUSD]                ## APY: 0.43% +6.05% (CRV)                  ## Vol: $1,567,681   ## Liquidity: $28,631,966   (https://etherscan.io/address/0x329239599afB305DA0A2eC69c58F8a6697F9F88d)\r\ncontract ShareConverter is IShareConverter {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20[3] public pool3CrvTokens; // DAI, USDC, USDT\r\n    yTokenInterface[4] public poolBUSDyTokens; // yDAI, yUSDC, yUSDT, yBUSD\r\n    CTokenInterface[2] public poolCompoundCTokens;\r\n    IERC20 public token3CRV; // 3Crv\r\n\r\n    IERC20 public tokenBUSD; // BUSD\r\n    IERC20 public tokenBCrv; // BCrv (yDAI+yUSDC+yUSDT+yBUSD)\r\n\r\n    IERC20 public tokenSUSD; // sUSD\r\n    IERC20 public tokenSCrv; // SCrv (DAI/USDC/USDT/sUSD)\r\n\r\n    IERC20 public tokenHUSD; // hUSD\r\n    IERC20 public tokenHCrv; // HCrv (hUSD/3CRV)\r\n\r\n    IERC20 public tokenCCrv; // cDAI+cUSDC ((c)DAI+(c)USDC)\r\n\r\n    address public governance;\r\n\r\n    IStableSwap3Pool public stableSwap3Pool;\r\n\r\n    IDepositBUSD public depositBUSD;\r\n    IStableSwapBUSD public stableSwapBUSD;\r\n\r\n    IDepositSUSD public depositSUSD;\r\n    IStableSwapSUSD public stableSwapSUSD;\r\n\r\n    IDepositHUSD public depositHUSD;\r\n    IStableSwapHUSD public stableSwapHUSD;\r\n\r\n    IDepositCompound public depositCompound;\r\n    IStableSwapCompound public stableSwapCompound;\r\n\r\n    IValueVaultMaster public vaultMaster;\r\n\r\n    // tokens: 0. BUSD, 1. sUSD, 2. hUSD\r\n    // tokenCrvs: 0. BCrv, 1. SCrv, 2. HCrv, 3. CCrv\r\n    // depositUSD: 0. depositBUSD, 1. depositSUSD, 2. depositHUSD, 3. depositCompound\r\n    // stableSwapUSD: 0. stableSwapBUSD, 1. stableSwapSUSD, 2. stableSwapHUSD, 3. stableSwapCompound\r\n    constructor (\r\n        IERC20 _tokenDAI, IERC20 _tokenUSDC, IERC20 _tokenUSDT, IERC20 _token3CRV,\r\n        IERC20[] memory _tokens, IERC20[] memory _tokenCrvs,\r\n        address[] memory _depositUSD, address[] memory _stableSwapUSD,\r\n        yTokenInterface[4] memory _yTokens,\r\n        CTokenInterface[2] memory _cTokens,\r\n        IStableSwap3Pool _stableSwap3Pool,\r\n        IValueVaultMaster _vaultMaster) public {\r\n        pool3CrvTokens[0] = _tokenDAI;\r\n        pool3CrvTokens[1] = _tokenUSDC;\r\n        pool3CrvTokens[2] = _tokenUSDT;\r\n\r\n        poolBUSDyTokens = _yTokens;\r\n        poolCompoundCTokens = _cTokens;\r\n\r\n        token3CRV = _token3CRV;\r\n        tokenBUSD = _tokens[0];\r\n        tokenBCrv = _tokenCrvs[0];\r\n        tokenSUSD = _tokens[1];\r\n        tokenSCrv = _tokenCrvs[1];\r\n        tokenHUSD = _tokens[2];\r\n        tokenHCrv = _tokenCrvs[2];\r\n        tokenCCrv = _tokenCrvs[3];\r\n\r\n        stableSwap3Pool = _stableSwap3Pool;\r\n\r\n        depositBUSD = IDepositBUSD(_depositUSD[0]);\r\n        stableSwapBUSD = IStableSwapBUSD(_stableSwapUSD[0]);\r\n\r\n        depositSUSD = IDepositSUSD(_depositUSD[1]);\r\n        stableSwapSUSD = IStableSwapSUSD(_stableSwapUSD[1]);\r\n\r\n        depositHUSD = IDepositHUSD(_depositUSD[2]);\r\n        stableSwapHUSD = IStableSwapHUSD(_stableSwapUSD[2]);\r\n\r\n        depositCompound = IDepositCompound(_depositUSD[3]);\r\n        stableSwapCompound = IStableSwapCompound(_stableSwapUSD[3]);\r\n\r\n        for (uint i = 0; i < 3; i++) {\r\n            pool3CrvTokens[i].safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(stableSwapBUSD), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(depositBUSD), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(stableSwapSUSD), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(depositSUSD), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(stableSwapHUSD), type(uint256).max);\r\n            pool3CrvTokens[i].safeApprove(address(depositHUSD), type(uint256).max);\r\n            if (i < 2) { // DAI && USDC\r\n                pool3CrvTokens[i].safeApprove(address(depositCompound), type(uint256).max);\r\n                pool3CrvTokens[i].safeApprove(address(stableSwapCompound), type(uint256).max);\r\n            }\r\n        }\r\n\r\n        token3CRV.safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n\r\n        tokenBUSD.safeApprove(address(stableSwapBUSD), type(uint256).max);\r\n        tokenBCrv.safeApprove(address(stableSwapBUSD), type(uint256).max);\r\n        tokenBCrv.safeApprove(address(depositBUSD), type(uint256).max);\r\n\r\n        tokenSUSD.safeApprove(address(stableSwapSUSD), type(uint256).max);\r\n        tokenSCrv.safeApprove(address(stableSwapSUSD), type(uint256).max);\r\n        tokenSCrv.safeApprove(address(depositSUSD), type(uint256).max);\r\n\r\n        tokenHCrv.safeApprove(address(stableSwapHUSD), type(uint256).max);\r\n        tokenHCrv.safeApprove(address(depositHUSD), type(uint256).max);\r\n\r\n        tokenCCrv.safeApprove(address(depositCompound), type(uint256).max);\r\n        tokenCCrv.safeApprove(address(stableSwapCompound), type(uint256).max);\r\n\r\n        vaultMaster = _vaultMaster;\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setVaultMaster(IValueVaultMaster _vaultMaster) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vaultMaster = _vaultMaster;\r\n    }\r\n\r\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function convert_shares_rate(address _input, address _output, uint _inputAmount) external override view returns (uint _outputAmount) {\r\n        if (_output == address(token3CRV)) {\r\n            if (_input == address(tokenBCrv)) { // convert from BCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                _amounts[1] = depositBUSD.calc_withdraw_one_coin(_inputAmount, 1); // BCrv -> USDC\r\n                _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true); // USDC -> 3CRV\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                _amounts[1] = depositSUSD.calc_withdraw_one_coin(_inputAmount, 1); // SCrv -> USDC\r\n                _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true); // USDC -> 3CRV\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> 3CRV\r\n                _outputAmount = stableSwapHUSD.calc_withdraw_one_coin(_inputAmount, 1); // HCrv -> 3CRV\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                uint usdc = depositCompound.calc_withdraw_one_coin(_inputAmount, 1); // CCrv -> USDC\r\n                _amounts[1] = usdc;//convert_usdc_to_cusdc(usdc); // TODO: to implement\r\n                _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true); // USDC -> 3CRV\r\n            }\r\n        } else if (_output == address(tokenBCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> BCrv\r\n                uint[4] memory _amounts;\r\n                uint usdc = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, 1); // 3CRV -> USDC\r\n                _amounts[1] = _convert_underlying_to_ytoken_rate(poolBUSDyTokens[1], usdc); // USDC -> yUSDC\r\n                _outputAmount = stableSwapBUSD.calc_token_amount(_amounts, true); // yUSDC -> BCrv\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                uint usdc = depositSUSD.calc_withdraw_one_coin(_inputAmount, 1); // SCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ytoken_rate(poolBUSDyTokens[1], usdc); // USDC -> yUSDC\r\n                _outputAmount = stableSwapBUSD.calc_token_amount(_amounts, true); // yUSDC -> BCrv\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                uint usdc = depositHUSD.calc_withdraw_one_coin(_inputAmount, 2); // HCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ytoken_rate(poolBUSDyTokens[1], usdc); // USDC -> yUSDC\r\n                _outputAmount = stableSwapBUSD.calc_token_amount(_amounts, true); // yUSDC -> BCrv\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                uint usdc = depositCompound.calc_withdraw_one_coin(_inputAmount, 1); // CCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ytoken_rate(poolBUSDyTokens[1], usdc); // USDC -> yUSDC\r\n                _outputAmount = stableSwapBUSD.calc_token_amount(_amounts, true); // yUSDC -> BCrv\r\n            }\r\n        } else if (_output == address(tokenSCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, 1); // 3CRV -> USDC\r\n                _outputAmount = stableSwapSUSD.calc_token_amount(_amounts, true); // USDC -> BCrv\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = depositBUSD.calc_withdraw_one_coin(_inputAmount, 1); // BCrv -> USDC\r\n                _outputAmount = stableSwapSUSD.calc_token_amount(_amounts, true); // USDC -> SCrv\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = depositHUSD.calc_withdraw_one_coin(_inputAmount, 2); // HCrv -> USDC\r\n                _outputAmount = stableSwapSUSD.calc_token_amount(_amounts, true); // USDC -> SCrv\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = depositCompound.calc_withdraw_one_coin(_inputAmount, 1); // CCrv -> USDC\r\n                _outputAmount = stableSwapSUSD.calc_token_amount(_amounts, true); // USDC -> SCrv\r\n            }\r\n        } else if (_output == address(tokenHCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> HCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _inputAmount;\r\n                _outputAmount = stableSwapHUSD.calc_token_amount(_amounts, true); // 3CRV -> HCrv\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = depositBUSD.calc_withdraw_one_coin(_inputAmount, 1); // BCrv -> USDC\r\n                _outputAmount = depositHUSD.calc_token_amount(_amounts, true); // USDC -> HCrv\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = depositSUSD.calc_withdraw_one_coin(_inputAmount, 1); // SCrv -> USDC\r\n                _outputAmount = depositHUSD.calc_token_amount(_amounts, true); // USDC -> HCrv\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = depositCompound.calc_withdraw_one_coin(_inputAmount, 1); // CCrv -> USDC\r\n                _outputAmount = depositHUSD.calc_token_amount(_amounts, true); // USDC -> HCrv\r\n            }\r\n        } else if (_output == address(tokenCCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> CCrv\r\n                uint[2] memory _amounts;\r\n                uint usdc = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, 1); // 3CRV -> USDC\r\n                _amounts[1] = _convert_underlying_to_ctoken(poolCompoundCTokens[1], usdc); // USDC -> cUSDC\r\n                _outputAmount = stableSwapCompound.calc_token_amount(_amounts, true); // cUSDC -> CCrv\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> CCrv\r\n                uint[2] memory _amounts;\r\n                uint usdc = depositBUSD.calc_withdraw_one_coin(_inputAmount, 1); // BCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ctoken(poolCompoundCTokens[1], usdc); // USDC -> cUSDC\r\n                _outputAmount = stableSwapCompound.calc_token_amount(_amounts, true); // cUSDC -> CCrv\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> CCrv\r\n                uint[2] memory _amounts;\r\n                uint usdc = depositSUSD.calc_withdraw_one_coin(_inputAmount, 1); // SCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ctoken(poolCompoundCTokens[1], usdc); // USDC -> cUSDC\r\n                _outputAmount = stableSwapCompound.calc_token_amount(_amounts, true); // cUSDC -> CCrv\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> CCrv\r\n                uint[2] memory _amounts;\r\n                uint usdc = depositHUSD.calc_withdraw_one_coin(_inputAmount, 2); // HCrv -> USDC\r\n                _amounts[1] = _convert_underlying_to_ctoken(poolCompoundCTokens[1], usdc); // USDC -> cUSDC\r\n                _outputAmount = stableSwapCompound.calc_token_amount(_amounts, true); // cUSDC -> CCrv\r\n            }\r\n        }\r\n        if (_outputAmount > 0) {\r\n            uint _slippage = _outputAmount.mul(vaultMaster.convertSlippage(_input, _output)).div(10000);\r\n            _outputAmount = _outputAmount.sub(_slippage);\r\n        }\r\n    }\r\n\r\n    function convert_shares(address _input, address _output, uint _inputAmount) external override returns (uint _outputAmount) {\r\n        require(vaultMaster.isVault(msg.sender) || vaultMaster.isController(msg.sender) || msg.sender == governance, \"!(governance||vault||controller)\");\r\n        if (_output == address(token3CRV)) {\r\n            if (_input == address(tokenBCrv)) { // convert from BCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                _amounts[1] = _convert_bcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = token3CRV.balanceOf(address(this));\r\n                stableSwap3Pool.add_liquidity(_amounts, 1);\r\n                uint _after = token3CRV.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                _amounts[1] = _convert_scrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = token3CRV.balanceOf(address(this));\r\n                stableSwap3Pool.add_liquidity(_amounts, 1);\r\n                uint _after = token3CRV.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> 3CRV\r\n                _outputAmount = _convert_hcrv_to_3crv(_inputAmount);\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> 3CRV\r\n                uint[3] memory _amounts;\r\n                _amounts[1] = _convert_ccrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = token3CRV.balanceOf(address(this));\r\n                stableSwap3Pool.add_liquidity(_amounts, 1);\r\n                uint _after = token3CRV.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            }\r\n        } else if (_output == address(tokenBCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> BCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_3crv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenBCrv.balanceOf(address(this));\r\n                depositBUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenBCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_scrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenBCrv.balanceOf(address(this));\r\n                depositBUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenBCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_hcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenBCrv.balanceOf(address(this));\r\n                depositBUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenBCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> BCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_ccrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenBCrv.balanceOf(address(this));\r\n                depositBUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenBCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            }\r\n        } else if (_output == address(tokenSCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_3crv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenSCrv.balanceOf(address(this));\r\n                depositSUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenSCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_bcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenSCrv.balanceOf(address(this));\r\n                depositSUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenSCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_hcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenSCrv.balanceOf(address(this));\r\n                depositSUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenSCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> SCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[1] = _convert_ccrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenSCrv.balanceOf(address(this));\r\n                depositSUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenSCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            }\r\n        } else if (_output == address(tokenHCrv)) {\r\n            // todo: re-check\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> HCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _inputAmount;\r\n\r\n                uint _before = tokenHCrv.balanceOf(address(this));\r\n                stableSwapHUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenHCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = _convert_bcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenHCrv.balanceOf(address(this));\r\n                depositHUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenHCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = _convert_scrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenHCrv.balanceOf(address(this));\r\n                depositHUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenHCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenCCrv)) { // convert from CCrv -> HCrv\r\n                uint[4] memory _amounts;\r\n                _amounts[2] = _convert_ccrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenHCrv.balanceOf(address(this));\r\n                depositHUSD.add_liquidity(_amounts, 1);\r\n                uint _after = tokenHCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            }\r\n        } else if (_output == address(tokenCCrv)) {\r\n            if (_input == address(token3CRV)) { // convert from 3CRV -> CCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _convert_3crv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenCCrv.balanceOf(address(this));\r\n                depositCompound.add_liquidity(_amounts, 1);\r\n                uint _after = tokenCCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenBCrv)) { // convert from BCrv -> CCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _convert_bcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenCCrv.balanceOf(address(this));\r\n                depositCompound.add_liquidity(_amounts, 1);\r\n                uint _after = tokenCCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenSCrv)) { // convert from SCrv -> BCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _convert_scrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenCCrv.balanceOf(address(this));\r\n                depositCompound.add_liquidity(_amounts, 1);\r\n                uint _after = tokenCCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            } else if (_input == address(tokenHCrv)) { // convert from HCrv -> BCrv\r\n                uint[2] memory _amounts;\r\n                _amounts[1] = _convert_hcrv_to_usdc(_inputAmount);\r\n\r\n                uint _before = tokenCCrv.balanceOf(address(this));\r\n                depositCompound.add_liquidity(_amounts, 1);\r\n                uint _after = tokenCCrv.balanceOf(address(this));\r\n\r\n                _outputAmount = _after.sub(_before);\r\n            }\r\n        }\r\n        if (_outputAmount > 0) {\r\n            IERC20(_output).safeTransfer(msg.sender, _outputAmount);\r\n        }\r\n        return _outputAmount;\r\n    }\r\n\r\n    function _convert_underlying_to_ctoken(CTokenInterface ctoken, uint _amount) internal view returns (uint _outputAmount) {\r\n        _outputAmount = _amount.mul(10 ** 18).div(ctoken.exchangeRateStored());\r\n    }\r\n\r\n    function _convert_underlying_to_ytoken_rate(yTokenInterface yToken, uint _inputAmount) internal view returns (uint _outputAmount) {\r\n        return _inputAmount.mul(1e18).div(yToken.getPricePerFullShare());\r\n    }\r\n\r\n    function _convert_3crv_to_usdc(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // 3CRV -> USDC\r\n        uint _before = pool3CrvTokens[1].balanceOf(address(this));\r\n        stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, 1, 1);\r\n        _outputAmount = pool3CrvTokens[1].balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function _convert_bcrv_to_usdc(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // BCrv -> USDC\r\n        uint _before = pool3CrvTokens[1].balanceOf(address(this));\r\n        depositBUSD.remove_liquidity_one_coin(_inputAmount, 1, 1);\r\n        _outputAmount = pool3CrvTokens[1].balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function _convert_scrv_to_usdc(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // SCrv -> USDC\r\n        uint _before = pool3CrvTokens[1].balanceOf(address(this));\r\n        depositSUSD.remove_liquidity_one_coin(_inputAmount, 1, 1);\r\n        _outputAmount = pool3CrvTokens[1].balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function _convert_hcrv_to_usdc(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // HCrv -> USDC\r\n        uint _before = pool3CrvTokens[1].balanceOf(address(this));\r\n        depositHUSD.remove_liquidity_one_coin(_inputAmount, 2, 1);\r\n        _outputAmount = pool3CrvTokens[1].balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function _convert_ccrv_to_usdc(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // CCrv -> USDC\r\n        uint _before = pool3CrvTokens[1].balanceOf(address(this));\r\n        depositCompound.remove_liquidity_one_coin(_inputAmount, 1, 1);\r\n        _outputAmount = pool3CrvTokens[1].balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function _convert_hcrv_to_3crv(uint _inputAmount) internal returns (uint _outputAmount) {\r\n        // HCrv -> 3CRV\r\n        uint _before = token3CRV.balanceOf(address(this));\r\n        stableSwapHUSD.remove_liquidity_one_coin(_inputAmount, 1, 1);\r\n        _outputAmount = token3CRV.balanceOf(address(this)).sub(_before);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenDAI\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token3CRV\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokenCrvs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositUSD\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stableSwapUSD\",\"type\":\"address[]\"},{\"internalType\":\"contract yTokenInterface[4]\",\"name\":\"_yTokens\",\"type\":\"address[4]\"},{\"internalType\":\"contract CTokenInterface[2]\",\"name\":\"_cTokens\",\"type\":\"address[2]\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert_shares_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBUSD\",\"outputs\":[{\"internalType\":\"contract IDepositBUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCompound\",\"outputs\":[{\"internalType\":\"contract IDepositCompound\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositHUSD\",\"outputs\":[{\"internalType\":\"contract IDepositHUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSUSD\",\"outputs\":[{\"internalType\":\"contract IDepositSUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3CrvTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBUSDyTokens\",\"outputs\":[{\"internalType\":\"contract yTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolCompoundCTokens\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"name\":\"setVaultMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapBUSD\",\"outputs\":[{\"internalType\":\"contract IStableSwapBUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapCompound\",\"outputs\":[{\"internalType\":\"contract IStableSwapCompound\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapHUSD\",\"outputs\":[{\"internalType\":\"contract IStableSwapHUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapSUSD\",\"outputs\":[{\"internalType\":\"contract IStableSwapSUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBCrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCCrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHCrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSCrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaster\",\"outputs\":[{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ShareConverter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000c2cb1040220768554cf699b0d863a3cd4324ce3200000000000000000000000026ea744e5b887e5205727f55dfbe8685e3b21951000000000000000000000000e6354ed5bc4b393a5aad09f21c46e101e692d44700000000000000000000000004bc0ab673d88ae9dbc9da2380cb6b79c4bca9ae0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7000000000000000000000000ea48b3f50f3cf2216e34e2e868abc810b729f0e300000000000000000000000000000000000000000000000000000000000000030000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c5300000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f51000000000000000000000000df574c24545e5ffecb9a659c229253d4111d87e100000000000000000000000000000000000000000000000000000000000000040000000000000000000000003b3ac5386837dc563660fb6a0937dfaa5924333b000000000000000000000000c25a3a3b969415c80451098fa907ec722572917f0000000000000000000000005b5cfe992adac0c9d48e05854b2d91c73a003858000000000000000000000000845838df265dcd2c412a1dc9e959c7d08537f8a20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b6c057591e073249f2d9d88ba59a46cfc9b59edb000000000000000000000000fcba3e75865d2d561be8d220616520c171f1285100000000000000000000000009672362833d8f703d5395ef3252d4bfa51c15ca000000000000000000000000eb21209ae4c2c9ff2a86aca31e123764a3b6bc06000000000000000000000000000000000000000000000000000000000000000400000000000000000000000079a8c46dea5ada233abaffd40f3a0a2b1e5a4f27000000000000000000000000a5407eae9ba41422680e2e00537571bcc53efbfd0000000000000000000000003ef6a01a0f81d6046290f3e2a8c5b843e738e604000000000000000000000000a2b47e3d5c44877cca798226b7b8118f9bfb7a56","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e200f23a00c70e636c0f37a05548f131b9b727ab9b5edb6218988a84cdf914f3"}]}