{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.1;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner || tx.origin == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface TokenInterface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ncontract NexenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    TokenInterface public token;\r\n    \r\n    address[] public holders;\r\n    \r\n    mapping (address => Holding[]) public holdings;\r\n\r\n    struct Holding {\r\n        uint256 totalTokens;\r\n        uint256 unlockDate;\r\n        bool claimed;\r\n    }\r\n    \r\n    // Events\r\n    event VestingCreated(address _to, uint256 _totalTokens, uint256 _unlockDate);\r\n    event TokensReleased(address _to, uint256 _tokensReleased);\r\n    \r\n    function getVestingByBeneficiary(address _beneficiary, uint256 _index) external view returns (uint256 totalTokens, uint256 unlockDate, bool claimed) {\r\n        require(holdings[_beneficiary].length > _index, \"The holding doesn't exist\");\r\n        Holding memory holding = holdings[_beneficiary][_index];\r\n        totalTokens = holding.totalTokens;\r\n        unlockDate = holding.unlockDate;\r\n        claimed = holding.claimed;\r\n    }\r\n    \r\n    function getTotalVestingsByBeneficiary(address _beneficiary) external view returns (uint256) {\r\n        return holdings[_beneficiary].length;\r\n    }\r\n\r\n    function getTotalToClaimNowByBeneficiary(address _beneficiary) public view returns(uint256) {\r\n        uint256 total = 0;\r\n        \r\n        for (uint256 i = 0; i < holdings[_beneficiary].length; i++) {\r\n            Holding memory holding = holdings[_beneficiary][i];\r\n            if (!holding.claimed && block.timestamp > holding.unlockDate) {\r\n                total = total.add(holding.totalTokens);\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n    \r\n    function getTotalVested() public view returns(uint256) {\r\n        uint256 total = 0;\r\n        \r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            for (uint256 j = 0; j < holdings[holders[i]].length; j++) {\r\n                Holding memory holding = holdings[holders[i]][j];\r\n                total = total.add(holding.totalTokens);\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n    \r\n    function getTotalClaimed() public view returns(uint256) {\r\n        uint256 total = 0;\r\n        \r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            for (uint256 j = 0; j < holdings[holders[i]].length; j++) {\r\n                Holding memory holding = holdings[holders[i]][j];\r\n                if (holding.claimed) {\r\n                    total = total.add(holding.totalTokens);\r\n                }\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    function claimTokens() external\r\n    {\r\n        uint256 tokensToClaim = getTotalToClaimNowByBeneficiary(msg.sender);\r\n        require(tokensToClaim > 0, \"Nothing to claim\");\r\n        \r\n        for (uint256 i = 0; i < holdings[msg.sender].length; i++) {\r\n            Holding storage holding = holdings[msg.sender][i];\r\n            if (!holding.claimed && block.timestamp > holding.unlockDate) {\r\n                holding.claimed = true;\r\n            }\r\n        }\r\n\r\n        require(token.transfer(msg.sender, tokensToClaim), \"Insufficient balance in vesting contract\");\r\n        emit TokensReleased(msg.sender, tokensToClaim);\r\n    }\r\n    \r\n    function _addHolderToList(address _beneficiary) internal {\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            if (holders[i] == _beneficiary) {\r\n                return;\r\n            }\r\n        }\r\n        holders.push(_beneficiary);\r\n    }\r\n\r\n    function createVesting(address _beneficiary, uint256 _totalTokens, uint256 _unlockDate) public onlyOwner {\r\n        token.transferFrom(msg.sender, address(this), _totalTokens);\r\n\r\n        _addHolderToList(_beneficiary);\r\n        Holding memory holding = Holding(_totalTokens, _unlockDate, false);\r\n        holdings[_beneficiary].push(holding);\r\n        emit VestingCreated(_beneficiary, _totalTokens, _unlockDate);\r\n    }\r\n    \r\n    constructor(address _token) {\r\n        token = TokenInterface(_token);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensReleased\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalToClaimNowByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalVestingsByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NexenVesting","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bec8d5c639778652dc2440da996a6bcf43f07746","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a1d7be2d79507ee257baa02768ac121f4bd61b2644ef64248e570fb03b1b66b"}]}