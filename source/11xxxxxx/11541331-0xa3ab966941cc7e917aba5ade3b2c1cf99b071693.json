{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\ninterface WePiggyPriceOracleInterface {\n\n    function getPrice(address token) external view returns (uint);\n\n    function setPrice(address token, uint price, bool force) external;\n\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface PTokenInterface {\n    function underlying() external view returns (address);\n\n    function symbol() external view returns (string memory);\n}\n\ninterface CompoundPriceOracleInterface {\n    enum PriceSource {\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\n        REPORTER   /// implies the price is set by the reporter\n    }\n\n    /// @dev Describe how the USD price should be determined for an asset.\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\n    struct CTokenConfig {\n        address cToken;\n        address underlying;\n        bytes32 symbolHash;\n        uint256 baseUnit;\n        PriceSource priceSource;\n        uint256 fixedPrice;\n        address uniswapMarket;\n        bool isUniswapReversed;\n    }\n\n    function getUnderlyingPrice(address cToken) external view returns (uint);\n\n    function getTokenConfigByUnderlying(address underlying) external view returns (CTokenConfig memory);\n\n    function getTokenConfigBySymbol(string memory symbol) external view returns (CTokenConfig memory);\n}\n\ncontract WePiggyPriceProviderV1 is Ownable {\n\n    using SafeMath for uint256;\n\n    enum PriceOracleType{\n        ChainLink,\n        Compound,\n        Customer\n    }\n\n    struct PriceOracle {\n        address source;\n        PriceOracleType sourceType;\n    }\n\n    //Config for pToken\n    struct TokenConfig {\n        address pToken;\n        address underlying;\n        string underlyingSymbol; //example: DAI\n        uint256 baseUnit; //example: 1e18\n        bool fixedUsd; //if true,will return 1*e36/baseUnit\n    }\n\n\n    mapping(address => TokenConfig) public tokenConfigs;\n    mapping(address => PriceOracle[]) public oracles;\n\n    event ConfigUpdated(address pToken, address underlying, string underlyingSymbol, uint256 baseUnit, bool fixedUsd);\n    event PriceOracleUpdated(address pToken, PriceOracle[] oracles);\n\n\n    constructor() public {\n    }\n\n\n    function getUnderlyingPrice(address _pToken) external view returns (uint){\n\n        uint256 price = 0;\n        TokenConfig storage tokenConfig = tokenConfigs[_pToken];\n        if (tokenConfig.fixedUsd) {//if true,will return 1*e36/baseUnit\n            price = 1;\n            return price.mul(1e36).div(tokenConfig.baseUnit);\n        }\n\n        PriceOracle[] storage priceOracles = oracles[_pToken];\n        for (uint256 i = 0; i < priceOracles.length; i++) {\n            PriceOracle storage priceOracle = priceOracles[i];\n            if (priceOracle.source != address(0)) {// check the priceOracle is available\n                price = _getUnderlyingPriceInternal(_pToken, tokenConfig, priceOracle);\n                if (price > 0) {\n                    return price;\n                }\n            }\n        }\n\n        // price must bigger than 0\n        require(price > 0, \"price must bigger than zero\");\n\n        return 0;\n    }\n\n    function _getUnderlyingPriceInternal(address _pToken, TokenConfig memory tokenConfig, PriceOracle memory priceOracle) internal view returns (uint){\n\n        address underlying = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n        PTokenInterface pToken = PTokenInterface(_pToken);\n\n        if (!compareStrings(pToken.symbol(), \"pETH\")) {\n            underlying = address(PTokenInterface(_pToken).underlying());\n        }\n\n        PriceOracleType sourceType = priceOracle.sourceType;\n        if (sourceType == PriceOracleType.ChainLink) {\n            return _getChainlinkPriceInternal(priceOracle, tokenConfig);\n        } else if (sourceType == PriceOracleType.Compound) {\n            return _getCompoundPriceInternal(priceOracle, tokenConfig);\n        } else if (sourceType == PriceOracleType.Customer) {\n            return _getCustomerPriceInternal(priceOracle, tokenConfig);\n        }\n\n        return 0;\n    }\n\n\n    function _getCustomerPriceInternal(PriceOracle memory priceOracle, TokenConfig memory tokenConfig) internal view returns (uint) {\n        address source = priceOracle.source;\n        WePiggyPriceOracleInterface customerPriceOracle = WePiggyPriceOracleInterface(source);\n        uint price = customerPriceOracle.getPrice(tokenConfig.underlying);\n        if (price <= 0) {\n            return 0;\n        } else {//return: (price / 1e8) * (1e36 / baseUnit) ==> price * 1e28 / baseUnit\n            return uint(price).mul(1e28).div(tokenConfig.baseUnit);\n        }\n    }\n\n    // Get price from compound oracle\n    function _getCompoundPriceInternal(PriceOracle memory priceOracle, TokenConfig memory tokenConfig) internal view returns (uint) {\n        address source = priceOracle.source;\n        CompoundPriceOracleInterface compoundPriceOracle = CompoundPriceOracleInterface(source);\n        CompoundPriceOracleInterface.CTokenConfig memory ctc = compoundPriceOracle.getTokenConfigBySymbol(tokenConfig.underlyingSymbol);\n        address cTokenAddress = ctc.cToken;\n        return compoundPriceOracle.getUnderlyingPrice(cTokenAddress);\n    }\n\n\n    // Get price from chainlink oracle\n    function _getChainlinkPriceInternal(PriceOracle memory priceOracle, TokenConfig memory tokenConfig) internal view returns (uint){\n\n        require(tokenConfig.baseUnit > 0, \"baseUnit must be greater than zero\");\n\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceOracle.source);\n        (\n        uint80 roundID,\n        int price,\n        uint startedAt,\n        uint timeStamp,\n        uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n\n        if (price <= 0) {\n            return 0;\n        } else {//return: (price / 1e8) * (1e36 / baseUnit) ==> price * 1e28 / baseUnit\n            return uint(price).mul(1e28).div(tokenConfig.baseUnit);\n        }\n\n    }\n\n\n    function addTokenConfig(address pToken, address underlying, string memory underlyingSymbol, uint256 baseUnit, bool fixedUsd,\n        address[] memory sources, PriceOracleType[] calldata sourceTypes) public onlyOwner {\n\n        require(sources.length == sourceTypes.length, \"sourceTypes.length must equal than sources.length\");\n\n        // add TokenConfig\n        TokenConfig storage tokenConfig = tokenConfigs[pToken];\n        require(tokenConfig.pToken == address(0), \"bad params\");\n        tokenConfig.pToken = pToken;\n        tokenConfig.underlying = underlying;\n        tokenConfig.underlyingSymbol = underlyingSymbol;\n        tokenConfig.baseUnit = baseUnit;\n        tokenConfig.fixedUsd = fixedUsd;\n\n        // add priceOracles\n        require(oracles[pToken].length < 1, \"bad params\");\n        for (uint i = 0; i < sources.length; i++) {\n            PriceOracle[] storage list = oracles[pToken];\n            list.push(PriceOracle({\n            source : sources[i],\n            sourceType : sourceTypes[i]\n            }));\n        }\n\n        emit ConfigUpdated(pToken, underlying, underlyingSymbol, baseUnit, fixedUsd);\n        emit PriceOracleUpdated(pToken, oracles[pToken]);\n\n    }\n\n\n    function addOrUpdateTokenConfigSource(address pToken, uint256 index, address source, PriceOracleType _sourceType) public onlyOwner {\n\n        PriceOracle[] storage list = oracles[pToken];\n\n        if (list.length > index) {//will update\n            PriceOracle storage oracle = list[index];\n            oracle.source = source;\n            oracle.sourceType = _sourceType;\n        } else {//will add\n            list.push(PriceOracle({\n            source : source,\n            sourceType : _sourceType\n            }));\n        }\n\n    }\n\n    function updateTokenConfigBaseUnit(address pToken, uint256 baseUnit) public onlyOwner {\n        TokenConfig storage tokenConfig = tokenConfigs[pToken];\n        require(tokenConfig.pToken != address(0), \"bad params\");\n        tokenConfig.baseUnit = baseUnit;\n\n        emit ConfigUpdated(pToken, tokenConfig.underlying, tokenConfig.underlyingSymbol, baseUnit, tokenConfig.fixedUsd);\n    }\n\n    function updateTokenConfigFixedUsd(address pToken, bool fixedUsd) public onlyOwner {\n        TokenConfig storage tokenConfig = tokenConfigs[pToken];\n        require(tokenConfig.pToken != address(0), \"bad params\");\n        tokenConfig.fixedUsd = fixedUsd;\n\n        emit ConfigUpdated(pToken, tokenConfig.underlying, tokenConfig.underlyingSymbol, tokenConfig.baseUnit, fixedUsd);\n    }\n\n\n    function getOracleSourcePrice(address pToken, uint sourceIndex) public view returns (uint){\n\n        TokenConfig storage tokenConfig = tokenConfigs[pToken];\n        PriceOracle[] storage priceOracles = oracles[pToken];\n\n        return _getUnderlyingPriceInternal(pToken, tokenConfig, priceOracles[sourceIndex]);\n    }\n\n\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    function oracleLength(address pToken) public view returns (uint){\n        PriceOracle[] storage priceOracles = oracles[pToken];\n        return priceOracles.length;\n    }\n\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fixedUsd\",\"type\":\"bool\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"enum WePiggyPriceProviderV1.PriceOracleType\",\"name\":\"sourceType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct WePiggyPriceProviderV1.PriceOracle[]\",\"name\":\"oracles\",\"type\":\"tuple[]\"}],\"name\":\"PriceOracleUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"enum WePiggyPriceProviderV1.PriceOracleType\",\"name\":\"_sourceType\",\"type\":\"uint8\"}],\"name\":\"addOrUpdateTokenConfigSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fixedUsd\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"enum WePiggyPriceProviderV1.PriceOracleType[]\",\"name\":\"sourceTypes\",\"type\":\"uint8[]\"}],\"name\":\"addTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"}],\"name\":\"getOracleSourcePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"oracleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"enum WePiggyPriceProviderV1.PriceOracleType\",\"name\":\"sourceType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fixedUsd\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"}],\"name\":\"updateTokenConfigBaseUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedUsd\",\"type\":\"bool\"}],\"name\":\"updateTokenConfigFixedUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WePiggyPriceProviderV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}