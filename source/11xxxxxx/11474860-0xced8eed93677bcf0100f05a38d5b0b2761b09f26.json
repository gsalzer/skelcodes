{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/strategies/sushiswap/strategy-sushi-eth-wbtc-lp.sol\rpragma solidity >=0.6.0 <0.7.0 >=0.6.2 <0.7.0 >=0.6.7 <0.7.0;\r\r////// src/interfaces/controller.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\rinterface IController {\r    function jars(address) external view returns (address);\r\r    function rewards() external view returns (address);\r\r    function devfund() external view returns (address);\r\r    function treasury() external view returns (address);\r\r    function balanceOf(address) external view returns (uint256);\r\r    function withdraw(address, uint256) external;\r\r    function earn(address, uint256) external;\r}\r\r////// src/lib/context.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/*\r * @dev Provides information about the current execution context, including the\r * sender of the transaction and its data. While these are generally available\r * via msg.sender and msg.data, they should not be accessed in such a direct\r * manner, since when dealing with GSN meta-transactions the account sending and\r * paying for execution may not be the actual sender (as far as an application\r * is concerned).\r *\r * This contract is only required for intermediate, library-like contracts.\r */\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\r////// src/lib/safe-math.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/**\r * @dev Wrappers over Solidity's arithmetic operations with added overflow\r * checks.\r *\r * Arithmetic operations in Solidity wrap on overflow. This can easily result\r * in bugs, because programmers usually assume that an overflow raises an\r * error, which is the standard behavior in high level programming languages.\r * `SafeMath` restores this intuition by reverting the transaction when an\r * operation overflows.\r *\r * Using this library instead of the unchecked operations eliminates an entire\r * class of bugs, so it's recommended to use it always.\r */\rlibrary SafeMath {\r    /**\r     * @dev Returns the addition of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `+` operator.\r     *\r     * Requirements:\r     *\r     * - Addition cannot overflow.\r     */\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        return sub(a, b, \"SafeMath: subtraction overflow\");\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        uint256 c = a - b;\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `*` operator.\r     *\r     * Requirements:\r     *\r     * - Multiplication cannot overflow.\r     */\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r        // benefit is lost if 'b' is also tested.\r        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r        if (a == 0) {\r            return 0;\r        }\r\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        return div(a, b, \"SafeMath: division by zero\");\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        uint256 c = a / b;\r        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        return mod(a, b, \"SafeMath: modulo by zero\");\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts with custom message when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b != 0, errorMessage);\r        return a % b;\r    }\r}\r////// src/lib/erc20.sol\r\r// File: contracts/GSN/Context.sol\r\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/* import \"./safe-math.sol\"; */\r/* import \"./context.sol\"; */\r\r// File: contracts/token/ERC20/IERC20.sol\r\r\r/**\r * @dev Interface of the ERC20 standard as defined in the EIP.\r */\rinterface IERC20_1 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\r// File: contracts/utils/Address.sol\r\r\r/**\r * @dev Collection of functions related to the address type\r */\rlibrary Address {\r    /**\r     * @dev Returns true if `account` is a contract.\r     *\r     * [IMPORTANT]\r     * ====\r     * It is unsafe to assume that an address for which this function returns\r     * false is an externally-owned account (EOA) and not a contract.\r     *\r     * Among others, `isContract` will return false for the following\r     * types of addresses:\r     *\r     *  - an externally-owned account\r     *  - a contract in construction\r     *  - an address where a contract will be created\r     *  - an address where a contract lived, but was destroyed\r     * ====\r     */\r    function isContract(address account) internal view returns (bool) {\r        // This method relies on extcodesize, which returns 0 for contracts in\r        // construction, since the code is only stored at the end of the\r        // constructor execution.\r\r        uint256 size;\r        // solhint-disable-next-line no-inline-assembly\r        assembly { size := extcodesize(account) }\r        return size > 0;\r    }\r\r    /**\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r     * `recipient`, forwarding all available gas and reverting on errors.\r     *\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r     * imposed by `transfer`, making them unable to receive funds via\r     * `transfer`. {sendValue} removes this limitation.\r     *\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r     *\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r     * taken to not create reentrancy vulnerabilities. Consider using\r     * {ReentrancyGuard} or the\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r     */\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    /**\r     * @dev Performs a Solidity function call using a low level `call`. A\r     * plain`call` is an unsafe replacement for a function call: use this\r     * function instead.\r     *\r     * If `target` reverts with a revert reason, it is bubbled up by this\r     * function (like regular Solidity function calls).\r     *\r     * Returns the raw returned data. To convert to the expected return value,\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r     *\r     * Requirements:\r     *\r     * - `target` must be a contract.\r     * - calling `target` with `data` must not revert.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r      return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return _functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but also transferring `value` wei to `target`.\r     *\r     * Requirements:\r     *\r     * - the calling contract must have an ETH balance of at least `value`.\r     * - the called Solidity function must be `payable`.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        return _functionCallWithValue(target, data, value, errorMessage);\r    }\r\r    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r        require(isContract(target), \"Address: call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r        if (success) {\r            return returndata;\r        } else {\r            // Look for revert reason and bubble it up if present\r            if (returndata.length > 0) {\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r                // solhint-disable-next-line no-inline-assembly\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\r// File: contracts/token/ERC20/ERC20.sol\r\r/**\r * @dev Implementation of the {IERC20} interface.\r *\r * This implementation is agnostic to the way tokens are created. This means\r * that a supply mechanism has to be added in a derived contract using {_mint}.\r * For a generic mechanism see {ERC20PresetMinterPauser}.\r *\r * TIP: For a detailed writeup see our guide\r * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r * to implement supply mechanisms].\r *\r * We have followed general OpenZeppelin guidelines: functions revert instead\r * of returning `false` on failure. This behavior is nonetheless conventional\r * and does not conflict with the expectations of ERC20 applications.\r *\r * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r * This allows applications to reconstruct the allowance for all accounts just\r * by listening to said events. Other implementations of the EIP may not emit\r * these events, as it isn't required by the specification.\r *\r * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r * functions have been added to mitigate the well-known issues around setting\r * allowances. See {IERC20-approve}.\r */\rcontract ERC20 is Context, IERC20_1 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    mapping (address => uint256) private _balances;\r\r    mapping (address => mapping (address => uint256)) private _allowances;\r\r    uint256 private _totalSupply;\r\r    string private _name;\r    string private _symbol;\r    uint8 private _decimals;\r\r    /**\r     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r     * a default value of 18.\r     *\r     * To select a different value for {decimals}, use {_setupDecimals}.\r     *\r     * All three of these values are immutable: they can only be set once during\r     * construction.\r     */\r    constructor (string memory name, string memory symbol) public {\r        _name = name;\r        _symbol = symbol;\r        _decimals = 18;\r    }\r\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() public view returns (string memory) {\r        return _name;\r    }\r\r    /**\r     * @dev Returns the symbol of the token, usually a shorter version of the\r     * name.\r     */\r    function symbol() public view returns (string memory) {\r        return _symbol;\r    }\r\r    /**\r     * @dev Returns the number of decimals used to get its user representation.\r     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r     *\r     * Tokens usually opt for a value of 18, imitating the relationship between\r     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r     * called.\r     *\r     * NOTE: This information is only used for _display_ purposes: it in\r     * no way affects any of the arithmetic of the contract, including\r     * {IERC20-balanceOf} and {IERC20-transfer}.\r     */\r    function decimals() public view returns (uint8) {\r        return _decimals;\r    }\r\r    /**\r     * @dev See {IERC20-totalSupply}.\r     */\r    function totalSupply() public view override returns (uint256) {\r        return _totalSupply;\r    }\r\r    /**\r     * @dev See {IERC20-balanceOf}.\r     */\r    function balanceOf(address account) public view override returns (uint256) {\r        return _balances[account];\r    }\r\r    /**\r     * @dev See {IERC20-transfer}.\r     *\r     * Requirements:\r     *\r     * - `recipient` cannot be the zero address.\r     * - the caller must have a balance of at least `amount`.\r     */\r    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-allowance}.\r     */\r    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    /**\r     * @dev See {IERC20-approve}.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-transferFrom}.\r     *\r     * Emits an {Approval} event indicating the updated allowance. This is not\r     * required by the EIP. See the note at the beginning of {ERC20};\r     *\r     * Requirements:\r     * - `sender` and `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     * - the caller must have allowance for ``sender``'s tokens of at least\r     * `amount`.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(sender, recipient, amount);\r        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r        return true;\r    }\r\r    /**\r     * @dev Atomically increases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r        return true;\r    }\r\r    /**\r     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     * - `spender` must have allowance for the caller of at least\r     * `subtractedValue`.\r     */\r    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r        return true;\r    }\r\r    /**\r     * @dev Moves tokens `amount` from `sender` to `recipient`.\r     *\r     * This is internal function is equivalent to {transfer}, and can be used to\r     * e.g. implement automatic token fees, slashing mechanisms, etc.\r     *\r     * Emits a {Transfer} event.\r     *\r     * Requirements:\r     *\r     * - `sender` cannot be the zero address.\r     * - `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     */\r    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\r        _beforeTokenTransfer(sender, recipient, amount);\r\r        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r        _balances[recipient] = _balances[recipient].add(amount);\r        emit Transfer(sender, recipient, amount);\r    }\r\r    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r     * the total supply.\r     *\r     * Emits a {Transfer} event with `from` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `to` cannot be the zero address.\r     */\r    function _mint(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: mint to the zero address\");\r\r        _beforeTokenTransfer(address(0), account, amount);\r\r        _totalSupply = _totalSupply.add(amount);\r        _balances[account] = _balances[account].add(amount);\r        emit Transfer(address(0), account, amount);\r    }\r\r    /**\r     * @dev Destroys `amount` tokens from `account`, reducing the\r     * total supply.\r     *\r     * Emits a {Transfer} event with `to` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `account` cannot be the zero address.\r     * - `account` must have at least `amount` tokens.\r     */\r    function _burn(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: burn from the zero address\");\r\r        _beforeTokenTransfer(account, address(0), amount);\r\r        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r        _totalSupply = _totalSupply.sub(amount);\r        emit Transfer(account, address(0), amount);\r    }\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r     *\r     * This internal function is equivalent to `approve`, and can be used to\r     * e.g. set automatic allowances for certain subsystems, etc.\r     *\r     * Emits an {Approval} event.\r     *\r     * Requirements:\r     *\r     * - `owner` cannot be the zero address.\r     * - `spender` cannot be the zero address.\r     */\r    function _approve(address owner, address spender, uint256 amount) internal virtual {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    /**\r     * @dev Sets {decimals} to a value other than the default one of 18.\r     *\r     * WARNING: This function should only be called from the constructor. Most\r     * applications that interact with token contracts will not expect\r     * {decimals} to ever change, and may work incorrectly if it does.\r     */\r    function _setupDecimals(uint8 decimals_) internal {\r        _decimals = decimals_;\r    }\r\r    /**\r     * @dev Hook that is called before any transfer of tokens. This includes\r     * minting and burning.\r     *\r     * Calling conditions:\r     *\r     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r     * will be to transferred to `to`.\r     * - when `from` is zero, `amount` tokens will be minted for `to`.\r     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r     * - `from` and `to` are never both zero.\r     *\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r     */\r    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r}\r\r/**\r * @title SafeERC20\r * @dev Wrappers around ERC20 operations that throw on failure (when the token\r * contract returns false). Tokens that return no value (and instead revert or\r * throw on failure) are also supported, non-reverting calls are assumed to be\r * successful.\r * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r */\rlibrary SafeERC20 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    function safeTransfer(IERC20_1 token, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r    }\r\r    function safeTransferFrom(IERC20_1 token, address from, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r    }\r\r    /**\r     * @dev Deprecated. This function has issues similar to the ones found in\r     * {IERC20-approve}, and its usage is discouraged.\r     *\r     * Whenever possible, use {safeIncreaseAllowance} and\r     * {safeDecreaseAllowance} instead.\r     */\r    function safeApprove(IERC20_1 token, address spender, uint256 value) internal {\r        // safeApprove should only be called when setting an initial allowance,\r        // or when resetting it to zero. To increase and decrease it, use\r        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r        // solhint-disable-next-line max-line-length\r        require((value == 0) || (token.allowance(address(this), spender) == 0),\r            \"SafeERC20: approve from non-zero to non-zero allowance\"\r        );\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r    }\r\r    function safeIncreaseAllowance(IERC20_1 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    function safeDecreaseAllowance(IERC20_1 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    /**\r     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r     * on the return value: the return value is optional (but if data is returned, it must not be false).\r     * @param token The token targeted by the call.\r     * @param data The call data (encoded using abi.encode or one of its variants).\r     */\r    function _callOptionalReturn(IERC20_1 token, bytes memory data) private {\r        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r        // the target address contains contract code and also asserts for success in the low-level call.\r\r        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r        if (returndata.length > 0) { // Return data is optional\r            // solhint-disable-next-line max-line-length\r            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r        }\r    }\r}\r////// src/interfaces/jar.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.2; */\r\r/* import \"../lib/erc20.sol\"; */\r\rinterface IJar is IERC20_1 {\r    function token() external view returns (address);\r\r    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\r\r    function getRatio() external view returns (uint256);\r\r    function depositAll() external;\r\r    function deposit(uint256) external;\r\r    function withdrawAll() external;\r\r    function withdraw(uint256) external;\r\r    function earn() external;\r\r    function decimals() external view returns (uint8);\r}\r\r////// src/interfaces/masterchef.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.7; */\r\rinterface IMasterchef {\r    function BONUS_MULTIPLIER() external view returns (uint256);\r\r    function add(\r        uint256 _allocPoint,\r        address _lpToken,\r        bool _withUpdate\r    ) external;\r\r    function bonusEndBlock() external view returns (uint256);\r\r    function deposit(uint256 _pid, uint256 _amount) external;\r\r    function dev(address _devaddr) external;\r\r    function devFundDivRate() external view returns (uint256);\r\r    function devaddr() external view returns (address);\r\r    function emergencyWithdraw(uint256 _pid) external;\r\r    function getMultiplier(uint256 _from, uint256 _to)\r        external\r        view\r        returns (uint256);\r\r    function massUpdatePools() external;\r\r    function owner() external view returns (address);\r\r    function pendingPickle(uint256 _pid, address _user)\r        external\r        view\r        returns (uint256);\r\r    function pickle() external view returns (address);\r\r    function picklePerBlock() external view returns (uint256);\r\r    function poolInfo(uint256)\r        external\r        view\r        returns (\r            address lpToken,\r            uint256 allocPoint,\r            uint256 lastRewardBlock,\r            uint256 accPicklePerShare\r        );\r\r    function poolLength() external view returns (uint256);\r\r    function renounceOwnership() external;\r\r    function set(\r        uint256 _pid,\r        uint256 _allocPoint,\r        bool _withUpdate\r    ) external;\r\r    function setBonusEndBlock(uint256 _bonusEndBlock) external;\r\r    function setDevFundDivRate(uint256 _devFundDivRate) external;\r\r    function setPicklePerBlock(uint256 _picklePerBlock) external;\r\r    function startBlock() external view returns (uint256);\r\r    function totalAllocPoint() external view returns (uint256);\r\r    function transferOwnership(address newOwner) external;\r\r    function updatePool(uint256 _pid) external;\r\r    function userInfo(uint256, address)\r        external\r        view\r        returns (uint256 amount, uint256 rewardDebt);\r\r    function withdraw(uint256 _pid, uint256 _amount) external;\r}\r\r////// src/interfaces/staking-rewards.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.2; */\r\rinterface IStakingRewards {\r    function balanceOf(address account) external view returns (uint256);\r\r    function earned(address account) external view returns (uint256);\r\r    function exit() external;\r\r    function getReward() external;\r\r    function getRewardForDuration() external view returns (uint256);\r\r    function lastTimeRewardApplicable() external view returns (uint256);\r\r    function lastUpdateTime() external view returns (uint256);\r\r    function notifyRewardAmount(uint256 reward) external;\r\r    function periodFinish() external view returns (uint256);\r\r    function rewardPerToken() external view returns (uint256);\r\r    function rewardPerTokenStored() external view returns (uint256);\r\r    function rewardRate() external view returns (uint256);\r\r    function rewards(address) external view returns (uint256);\r\r    function rewardsDistribution() external view returns (address);\r\r    function rewardsDuration() external view returns (uint256);\r\r    function rewardsToken() external view returns (address);\r\r    function stake(uint256 amount) external;\r\r    function stakeWithPermit(\r        uint256 amount,\r        uint256 deadline,\r        uint8 v,\r        bytes32 r,\r        bytes32 s\r    ) external;\r\r    function stakingToken() external view returns (address);\r\r    function totalSupply() external view returns (uint256);\r\r    function userRewardPerTokenPaid(address) external view returns (uint256);\r\r    function withdraw(uint256 amount) external;\r}\r\rinterface IStakingRewardsFactory {\r    function deploy(address stakingToken, uint256 rewardAmount) external;\r\r    function isOwner() external view returns (bool);\r\r    function notifyRewardAmount(address stakingToken) external;\r\r    function notifyRewardAmounts() external;\r\r    function owner() external view returns (address);\r\r    function renounceOwnership() external;\r\r    function rewardsToken() external view returns (address);\r\r    function stakingRewardsGenesis() external view returns (uint256);\r\r    function stakingRewardsInfoByStakingToken(address)\r        external\r        view\r        returns (address stakingRewards, uint256 rewardAmount);\r\r    function stakingTokens(uint256) external view returns (address);\r\r    function transferOwnership(address newOwner) external;\r}\r\r////// src/interfaces/sushi-chef.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.7; */\r\r// interface for Sushiswap MasterChef contract\rinterface ISushiChef {\r    function BONUS_MULTIPLIER() external view returns (uint256);\r\r    function add(\r        uint256 _allocPoint,\r        address _lpToken,\r        bool _withUpdate\r    ) external;\r\r    function bonusEndBlock() external view returns (uint256);\r\r    function deposit(uint256 _pid, uint256 _amount) external;\r\r    function dev(address _devaddr) external;\r\r    function devFundDivRate() external view returns (uint256);\r\r    function devaddr() external view returns (address);\r\r    function emergencyWithdraw(uint256 _pid) external;\r\r    function getMultiplier(uint256 _from, uint256 _to)\r        external\r        view\r        returns (uint256);\r\r    function massUpdatePools() external;\r\r    function owner() external view returns (address);\r\r    function pendingSushi(uint256 _pid, address _user)\r        external\r        view\r        returns (uint256);\r\r    function sushi() external view returns (address);\r\r    function sushiPerBlock() external view returns (uint256);\r\r    function poolInfo(uint256)\r        external\r        view\r        returns (\r            address lpToken,\r            uint256 allocPoint,\r            uint256 lastRewardBlock,\r            uint256 accsushiPerShare\r        );\r\r    function poolLength() external view returns (uint256);\r\r    function renounceOwnership() external;\r\r    function set(\r        uint256 _pid,\r        uint256 _allocPoint,\r        bool _withUpdate\r    ) external;\r\r    function setBonusEndBlock(uint256 _bonusEndBlock) external;\r\r    function setDevFundDivRate(uint256 _devFundDivRate) external;\r\r    function setsushiPerBlock(uint256 _sushiPerBlock) external;\r\r    function startBlock() external view returns (uint256);\r\r    function totalAllocPoint() external view returns (uint256);\r\r    function transferOwnership(address newOwner) external;\r\r    function updatePool(uint256 _pid) external;\r\r    function userInfo(uint256, address)\r        external\r        view\r        returns (uint256 amount, uint256 rewardDebt);\r\r    function withdraw(uint256 _pid, uint256 _amount) external;\r}\r\r////// src/interfaces/uniswapv2.sol\r// SPDX-License-Identifier: MIT\r\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.2; */\r\rinterface UniswapRouterV2 {\r    function swapExactTokensForTokens(\r        uint256 amountIn,\r        uint256 amountOutMin,\r        address[] calldata path,\r        address to,\r        uint256 deadline\r    ) external returns (uint256[] memory amounts);\r\r    function addLiquidity(\r        address tokenA,\r        address tokenB,\r        uint256 amountADesired,\r        uint256 amountBDesired,\r        uint256 amountAMin,\r        uint256 amountBMin,\r        address to,\r        uint256 deadline\r    )\r        external\r        returns (\r            uint256 amountA,\r            uint256 amountB,\r            uint256 liquidity\r        );\r\r    function addLiquidityETH(\r        address token,\r        uint256 amountTokenDesired,\r        uint256 amountTokenMin,\r        uint256 amountETHMin,\r        address to,\r        uint256 deadline\r    )\r        external\r        payable\r        returns (\r            uint256 amountToken,\r            uint256 amountETH,\r            uint256 liquidity\r        );\r\r    function removeLiquidity(\r        address tokenA,\r        address tokenB,\r        uint256 liquidity,\r        uint256 amountAMin,\r        uint256 amountBMin,\r        address to,\r        uint256 deadline\r    ) external returns (uint256 amountA, uint256 amountB);\r\r    function getAmountsOut(uint256 amountIn, address[] calldata path)\r        external\r        view\r        returns (uint256[] memory amounts);\r\r    function getAmountsIn(uint256 amountOut, address[] calldata path)\r        external\r        view\r        returns (uint256[] memory amounts);\r\r    function swapETHForExactTokens(\r        uint256 amountOut,\r        address[] calldata path,\r        address to,\r        uint256 deadline\r    ) external payable returns (uint256[] memory amounts);\r\r    function swapExactETHForTokens(\r        uint256 amountOutMin,\r        address[] calldata path,\r        address to,\r        uint256 deadline\r    ) external payable returns (uint256[] memory amounts);\r}\r\rinterface IUniswapV2Pair {\r    event Approval(\r        address indexed owner,\r        address indexed spender,\r        uint256 value\r    );\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    function name() external pure returns (string memory);\r\r    function symbol() external pure returns (string memory);\r\r    function decimals() external pure returns (uint8);\r\r    function totalSupply() external view returns (uint256);\r\r    function balanceOf(address owner) external view returns (uint256);\r\r    function allowance(address owner, address spender)\r        external\r        view\r        returns (uint256);\r\r    function approve(address spender, uint256 value) external returns (bool);\r\r    function transfer(address to, uint256 value) external returns (bool);\r\r    function transferFrom(\r        address from,\r        address to,\r        uint256 value\r    ) external returns (bool);\r\r    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\r    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\r    function nonces(address owner) external view returns (uint256);\r\r    function permit(\r        address owner,\r        address spender,\r        uint256 value,\r        uint256 deadline,\r        uint8 v,\r        bytes32 r,\r        bytes32 s\r    ) external;\r\r    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r    event Burn(\r        address indexed sender,\r        uint256 amount0,\r        uint256 amount1,\r        address indexed to\r    );\r    event Swap(\r        address indexed sender,\r        uint256 amount0In,\r        uint256 amount1In,\r        uint256 amount0Out,\r        uint256 amount1Out,\r        address indexed to\r    );\r    event Sync(uint112 reserve0, uint112 reserve1);\r\r    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\r    function factory() external view returns (address);\r\r    function token0() external view returns (address);\r\r    function token1() external view returns (address);\r\r    function getReserves()\r        external\r        view\r        returns (\r            uint112 reserve0,\r            uint112 reserve1,\r            uint32 blockTimestampLast\r        );\r\r    function price0CumulativeLast() external view returns (uint256);\r\r    function price1CumulativeLast() external view returns (uint256);\r\r    function kLast() external view returns (uint256);\r\r    function mint(address to) external returns (uint256 liquidity);\r\r    function burn(address to)\r        external\r        returns (uint256 amount0, uint256 amount1);\r\r    function swap(\r        uint256 amount0Out,\r        uint256 amount1Out,\r        address to,\r        bytes calldata data\r    ) external;\r\r    function skim(address to) external;\r\r    function sync() external;\r}\r\rinterface IUniswapV2Factory {\r    event PairCreated(\r        address indexed token0,\r        address indexed token1,\r        address pair,\r        uint256\r    );\r\r    function getPair(address tokenA, address tokenB)\r        external\r        view\r        returns (address pair);\r\r    function allPairs(uint256) external view returns (address pair);\r\r    function allPairsLength() external view returns (uint256);\r\r    function feeTo() external view returns (address);\r\r    function feeToSetter() external view returns (address);\r\r    function createPair(address tokenA, address tokenB)\r        external\r        returns (address pair);\r}\r\r////// src/strategies/strategy-base.sol\r/* pragma solidity ^0.6.7; */\r\r/* import \"../lib/erc20.sol\"; */\r/* import \"../lib/safe-math.sol\"; */\r\r/* import \"../interfaces/jar.sol\"; */\r/* import \"../interfaces/staking-rewards.sol\"; */\r/* import \"../interfaces/masterchef.sol\"; */\r/* import \"../interfaces/uniswapv2.sol\"; */\r/* import \"../interfaces/controller.sol\"; */\r\r// Strategy Contract Basics\r\rabstract contract StrategyBase {\r    using SafeERC20 for IERC20_1;\r    using Address for address;\r    using SafeMath for uint256;\r\r    // Perfomance fees - start with 20%\r    uint256 public performanceTreasuryFee = 2000;\r    uint256 public constant performanceTreasuryMax = 10000;\r\r    uint256 public performanceDevFee = 0;\r    uint256 public constant performanceDevMax = 10000;\r\r    // Withdrawal fee 0%\r    // - 0% to treasury\r    // - 0% to dev fund\r    uint256 public withdrawalTreasuryFee = 0;\r    uint256 public constant withdrawalTreasuryMax = 100000;\r\r    uint256 public withdrawalDevFundFee = 0;\r    uint256 public constant withdrawalDevFundMax = 100000;\r\r    // Tokens\r    address public want;\r    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\r    // User accounts\r    address public governance;\r    address public controller;\r    address public strategist;\r    address public timelock;\r\r    // Dex\r    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\r    constructor(\r        address _want,\r        address _governance,\r        address _strategist,\r        address _controller,\r        address _timelock\r    ) public {\r        require(_want != address(0));\r        require(_governance != address(0));\r        require(_strategist != address(0));\r        require(_controller != address(0));\r        require(_timelock != address(0));\r\r        want = _want;\r        governance = _governance;\r        strategist = _strategist;\r        controller = _controller;\r        timelock = _timelock;\r    }\r\r    // **** Modifiers **** //\r\r    modifier onlyBenevolent {\r        require(\r            msg.sender == tx.origin ||\r                msg.sender == governance ||\r                msg.sender == strategist\r        );\r        _;\r    }\r\r    // **** Views **** //\r\r    function balanceOfWant() public view returns (uint256) {\r        return IERC20_1(want).balanceOf(address(this));\r    }\r\r    function balanceOfPool() public virtual view returns (uint256);\r\r    function balanceOf() public view returns (uint256) {\r        return balanceOfWant().add(balanceOfPool());\r    }\r\r    function getName() external virtual pure returns (string memory);\r\r    // **** Setters **** //\r\r    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\r        require(msg.sender == timelock, \"!timelock\");\r        withdrawalDevFundFee = _withdrawalDevFundFee;\r    }\r\r    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\r        require(msg.sender == timelock, \"!timelock\");\r        withdrawalTreasuryFee = _withdrawalTreasuryFee;\r    }\r\r    function setPerformanceDevFee(uint256 _performanceDevFee) external {\r        require(msg.sender == timelock, \"!timelock\");\r        performanceDevFee = _performanceDevFee;\r    }\r\r    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\r        external\r    {\r        require(msg.sender == timelock, \"!timelock\");\r        performanceTreasuryFee = _performanceTreasuryFee;\r    }\r\r    function setStrategist(address _strategist) external {\r        require(msg.sender == governance, \"!governance\");\r        strategist = _strategist;\r    }\r\r    function setGovernance(address _governance) external {\r        require(msg.sender == governance, \"!governance\");\r        governance = _governance;\r    }\r\r    function setTimelock(address _timelock) external {\r        require(msg.sender == timelock, \"!timelock\");\r        timelock = _timelock;\r    }\r\r    function setController(address _controller) external {\r        require(msg.sender == timelock, \"!timelock\");\r        controller = _controller;\r    }\r\r    // **** State mutations **** //\r    function deposit() public virtual;\r\r    // Controller only function for creating additional rewards from dust\r    function withdraw(IERC20_1 _asset) external returns (uint256 balance) {\r        require(msg.sender == controller, \"!controller\");\r        require(want != address(_asset), \"want\");\r        balance = _asset.balanceOf(address(this));\r        _asset.safeTransfer(controller, balance);\r    }\r\r    // Withdraw partial funds, normally used with a jar withdrawal\r    function withdraw(uint256 _amount) external {\r        require(msg.sender == controller, \"!controller\");\r        uint256 _balance = IERC20_1(want).balanceOf(address(this));\r        if (_balance < _amount) {\r            _amount = _withdrawSome(_amount.sub(_balance));\r            _amount = _amount.add(_balance);\r        }\r\r        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\r            withdrawalDevFundMax\r        );\r        IERC20_1(want).safeTransfer(IController(controller).devfund(), _feeDev);\r\r        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\r            withdrawalTreasuryMax\r        );\r        IERC20_1(want).safeTransfer(\r            IController(controller).treasury(),\r            _feeTreasury\r        );\r\r        address _jar = IController(controller).jars(address(want));\r        require(_jar != address(0), \"!jar\"); // additional protection so we don't burn the funds\r\r        IERC20_1(want).safeTransfer(_jar, _amount.sub(_feeDev).sub(_feeTreasury));\r    }\r\r    // Withdraw funds, used to swap between strategies\r    function withdrawForSwap(uint256 _amount)\r        external\r        returns (uint256 balance)\r    {\r        require(msg.sender == controller, \"!controller\");\r        _withdrawSome(_amount);\r\r        balance = IERC20_1(want).balanceOf(address(this));\r\r        address _jar = IController(controller).jars(address(want));\r        require(_jar != address(0), \"!jar\");\r        IERC20_1(want).safeTransfer(_jar, balance);\r    }\r\r    // Withdraw all funds, normally used when migrating strategies\r    function withdrawAll() external returns (uint256 balance) {\r        require(msg.sender == controller, \"!controller\");\r        _withdrawAll();\r\r        balance = IERC20_1(want).balanceOf(address(this));\r\r        address _jar = IController(controller).jars(address(want));\r        require(_jar != address(0), \"!jar\"); // additional protection so we don't burn the funds\r        IERC20_1(want).safeTransfer(_jar, balance);\r    }\r\r    function _withdrawAll() internal {\r        _withdrawSome(balanceOfPool());\r    }\r\r    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\r    function harvest() public virtual;\r\r    // **** Emergency functions ****\r\r    function execute(address _target, bytes memory _data)\r        public\r        payable\r        returns (bytes memory response)\r    {\r        require(msg.sender == timelock, \"!timelock\");\r        require(_target != address(0), \"!target\");\r\r        // call contract in current context\r        assembly {\r            let succeeded := delegatecall(\r                sub(gas(), 5000),\r                _target,\r                add(_data, 0x20),\r                mload(_data),\r                0,\r                0\r            )\r            let size := returndatasize()\r\r            response := mload(0x40)\r            mstore(\r                0x40,\r                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r            )\r            mstore(response, size)\r            returndatacopy(add(response, 0x20), 0, size)\r\r            switch iszero(succeeded)\r                case 1 {\r                    // throw if delegatecall failed\r                    revert(add(response, 0x20), size)\r                }\r        }\r    }\r\r    // **** Internal functions ****\r    function _swapUniswap(\r        address _from,\r        address _to,\r        uint256 _amount\r    ) internal {\r        require(_to != address(0));\r\r        // Swap with uniswap\r        IERC20_1(_from).safeApprove(univ2Router2, 0);\r        IERC20_1(_from).safeApprove(univ2Router2, _amount);\r\r        address[] memory path;\r\r        if (_from == weth || _to == weth) {\r            path = new address[](2);\r            path[0] = _from;\r            path[1] = _to;\r        } else {\r            path = new address[](3);\r            path[0] = _from;\r            path[1] = weth;\r            path[2] = _to;\r        }\r\r        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\r            _amount,\r            0,\r            path,\r            address(this),\r            now.add(60)\r        );\r    }\r\r    function _swapSushiswap(\r        address _from,\r        address _to,\r        uint256 _amount\r    ) internal {\r        require(_to != address(0));\r\r        // Swap with uniswap\r        IERC20_1(_from).safeApprove(sushiRouter, 0);\r        IERC20_1(_from).safeApprove(sushiRouter, _amount);\r\r        address[] memory path;\r\r        if (_from == weth || _to == weth) {\r            path = new address[](2);\r            path[0] = _from;\r            path[1] = _to;\r        } else {\r            path = new address[](3);\r            path[0] = _from;\r            path[1] = weth;\r            path[2] = _to;\r        }\r\r        UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\r            _amount,\r            0,\r            path,\r            address(this),\r            now.add(60)\r        );\r    }\r\r    function _distributePerformanceFeesAndDeposit() internal {\r        uint256 _want = IERC20_1(want).balanceOf(address(this));\r\r        if (_want > 0) {\r            // Treasury fees\r            IERC20_1(want).safeTransfer(\r                IController(controller).treasury(),\r                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\r            );\r\r            // Performance fee\r            IERC20_1(want).safeTransfer(\r                IController(controller).devfund(),\r                _want.mul(performanceDevFee).div(performanceDevMax)\r            );\r\r            deposit();\r        }\r    }\r}\r\r////// src/strategies/strategy-sushi-farm-base.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.7; */\r\r/* import \"./strategy-base.sol\"; */\r/* import \"../interfaces/sushi-chef.sol\"; */\r\rabstract contract StrategySushiFarmBase is StrategyBase {\r    // Token addresses\r    address public constant sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\r    address public constant masterChef = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\r\r    // WETH/<token1> pair\r    address public token1;\r\r    // How much SUSHI tokens to keep?\r    uint256 public keepSUSHI = 0;\r    uint256 public constant keepSUSHIMax = 10000;\r\r    uint256 public poolId;\r\r    constructor(\r        address _token1,\r        uint256 _poolId,\r        address _lp,\r        address _governance,\r        address _strategist,\r        address _controller,\r        address _timelock\r    )\r        public\r        StrategyBase(\r            _lp,\r            _governance,\r            _strategist,\r            _controller,\r            _timelock\r        )\r    {\r        poolId = _poolId;\r        token1 = _token1;\r    }\r    \r    function balanceOfPool() public override view returns (uint256) {\r        (uint256 amount, ) = ISushiChef(masterChef).userInfo(poolId, address(this));\r        return amount;\r    }\r\r    function getHarvestable() external view returns (uint256) {\r        return ISushiChef(masterChef).pendingSushi(poolId, address(this));\r    }\r\r    // **** Setters ****\r\r    function deposit() public override {\r        uint256 _want = IERC20_1(want).balanceOf(address(this));\r        if (_want > 0) {\r            IERC20_1(want).safeApprove(masterChef, 0);\r            IERC20_1(want).safeApprove(masterChef, _want);\r            ISushiChef(masterChef).deposit(poolId, _want);\r        }\r    }\r\r    function _withdrawSome(uint256 _amount)\r        internal\r        override\r        returns (uint256)\r    {\r        ISushiChef(masterChef).withdraw(poolId, _amount);\r        return _amount;\r    }\r\r    // **** Setters ****\r\r    function setKeepSUSHI(uint256 _keepSUSHI) external {\r        require(msg.sender == timelock, \"!timelock\");\r        keepSUSHI = _keepSUSHI;\r    }\r\r    // **** State Mutations ****\r\r    function harvest() public override onlyBenevolent {\r        // Anyone can harvest it at any given time.\r        // I understand the possibility of being frontrun\r        // But ETH is a dark forest, and I wanna see how this plays out\r        // i.e. will be be heavily frontrunned?\r        //      if so, a new strategy will be deployed.\r\r        // Collects SUSHI tokens\r        ISushiChef(masterChef).deposit(poolId, 0);\r        uint256 _sushi = IERC20_1(sushi).balanceOf(address(this));\r        if (_sushi > 0) {\r            // 10% is locked up for future gov\r            uint256 _keepSUSHI = _sushi.mul(keepSUSHI).div(keepSUSHIMax);\r            IERC20_1(sushi).safeTransfer(\r                IController(controller).treasury(),\r                _keepSUSHI\r            );\r            _swapSushiswap(sushi, weth, _sushi.sub(_keepSUSHI));\r        }\r\r        // Swap half WETH for DAI\r        uint256 _weth = IERC20_1(weth).balanceOf(address(this));\r        if (_weth > 0) {\r            _swapSushiswap(weth, token1, _weth.div(2));\r        }\r\r        // Adds in liquidity for ETH/DAI\r        _weth = IERC20_1(weth).balanceOf(address(this));\r        uint256 _token1 = IERC20_1(token1).balanceOf(address(this));\r        if (_weth > 0 && _token1 > 0) {\r            IERC20_1(weth).safeApprove(sushiRouter, 0);\r            IERC20_1(weth).safeApprove(sushiRouter, _weth);\r\r            IERC20_1(token1).safeApprove(sushiRouter, 0);\r            IERC20_1(token1).safeApprove(sushiRouter, _token1);\r\r            UniswapRouterV2(sushiRouter).addLiquidity(\r                weth,\r                token1,\r                _weth,\r                _token1,\r                0,\r                0,\r                address(this),\r                now + 60\r            );\r\r            // Donates DUST\r            IERC20_1(weth).transfer(\r                IController(controller).treasury(),\r                IERC20_1(weth).balanceOf(address(this))\r            );\r            IERC20_1(token1).safeTransfer(\r                IController(controller).treasury(),\r                IERC20_1(token1).balanceOf(address(this))\r            );\r        }\r\r        // We want to get back SUSHI LP tokens\r        _distributePerformanceFeesAndDeposit();\r    }\r}\r\r////// src/strategies/sushiswap/strategy-sushi-eth-wbtc-lp.sol\r// SPDX-License-Identifier: MIT\r/* pragma solidity ^0.6.7; */\r\r/* import \"../strategy-sushi-farm-base.sol\"; */\r\rcontract StrategySushiEthWBtcLp is StrategySushiFarmBase {\r    // Token/ETH pool id in MasterChef contract\r    uint256 public sushi_wbtc_poolId = 21;\r    // Token addresses\r    address public sushi_eth_wbtc_lp = 0xCEfF51756c56CeFFCA006cD410B03FFC46dd3a58;\r    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\r    constructor(\r        address _governance,\r        address _strategist,\r        address _controller,\r        address _timelock\r    )\r        public\r        StrategySushiFarmBase(\r            wbtc,\r            sushi_wbtc_poolId,\r            sushi_eth_wbtc_lp,\r            _governance,\r            _strategist,\r            _controller,\r            _timelock\r        )\r    {}\r\r    // **** Views ****\r\r    function getName() external override pure returns (string memory) {\r        return \"StrategySushiEthWBtcLp\";\r    }\r}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepSUSHI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepSUSHIMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepSUSHI\",\"type\":\"uint256\"}],\"name\":\"setKeepSUSHI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceDevFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDevFundFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi_eth_wbtc_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi_wbtc_poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20_1\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategySushiEthWBtcLp","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000d92c7faa0ca0e6ae4918f3a83d9832d9caeaa0d30000000000000000000000001cbf903de5d688eda7d6d895ea2f0a8f2a521e990000000000000000000000006847259b2b3a4c17e7c43c54409810af48ba5210000000000000000000000000d92c7faa0ca0e6ae4918f3a83d9832d9caeaa0d3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}