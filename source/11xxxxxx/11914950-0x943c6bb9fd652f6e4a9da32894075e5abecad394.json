{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.7;\r\n\r\ninterface DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) external view returns (bool);\r\n}\r\n\r\nabstract contract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        virtual\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        virtual\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) virtual internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/// GebProxyActions.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract CollateralLike {\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public;\r\n    function transferFrom(address, address, uint) virtual public;\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n}\r\n\r\nabstract contract ManagerLike {\r\n    function safeCan(address, uint, address) virtual public view returns (uint);\r\n    function collateralTypes(uint) virtual public view returns (bytes32);\r\n    function ownsSAFE(uint) virtual public view returns (address);\r\n    function safes(uint) virtual public view returns (address);\r\n    function safeEngine() virtual public view returns (address);\r\n    function openSAFE(bytes32, address) virtual public returns (uint);\r\n    function transferSAFEOwnership(uint, address) virtual public;\r\n    function allowSAFE(uint, address, uint) virtual public;\r\n    function allowHandler(address, uint) virtual public;\r\n    function modifySAFECollateralization(uint, int, int) virtual public;\r\n    function transferCollateral(uint, address, uint) virtual public;\r\n    function transferInternalCoins(uint, address, uint) virtual public;\r\n    function quitSystem(uint, address) virtual public;\r\n    function enterSystem(address, uint) virtual public;\r\n    function moveSAFE(uint, uint) virtual public;\r\n    function protectSAFE(uint, address, address) virtual public;\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function canModifySAFE(address, address) virtual public view returns (uint);\r\n    function collateralTypes(bytes32) virtual public view returns (uint, uint, uint, uint, uint);\r\n    function coinBalance(address) virtual public view returns (uint);\r\n    function safes(bytes32, address) virtual public view returns (uint, uint);\r\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\r\n    function approveSAFEModification(address) virtual public;\r\n    function transferInternalCoins(address, address, uint) virtual public;\r\n}\r\n\r\nabstract contract CollateralJoinLike {\r\n    function decimals() virtual public returns (uint);\r\n    function collateral() virtual public returns (CollateralLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\nabstract contract GNTJoinLike {\r\n    function bags(address) virtual public view returns (address);\r\n    function make(address) virtual public returns (address);\r\n}\r\n\r\nabstract contract DSTokenLike {\r\n    function balanceOf(address) virtual public view returns (uint);\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public returns (bool);\r\n    function transferFrom(address, address, uint) virtual public returns (bool);\r\n}\r\n\r\nabstract contract WethLike {\r\n    function balanceOf(address) virtual public view returns (uint);\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public;\r\n    function transferFrom(address, address, uint) virtual public;\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n}\r\n\r\nabstract contract CoinJoinLike {\r\n    function safeEngine() virtual public returns (SAFEEngineLike);\r\n    function systemCoin() virtual public returns (DSTokenLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\nabstract contract ApproveSAFEModificationLike {\r\n    function approveSAFEModification(address) virtual public;\r\n    function denySAFEModification(address) virtual public;\r\n}\r\n\r\nabstract contract GlobalSettlementLike {\r\n    function collateralCashPrice(bytes32) virtual public view returns (uint);\r\n    function redeemCollateral(bytes32, uint) virtual public;\r\n    function freeCollateral(bytes32) virtual public;\r\n    function prepareCoinsForRedeeming(uint) virtual public;\r\n    function processSAFE(bytes32, address) virtual public;\r\n}\r\n\r\nabstract contract TaxCollectorLike {\r\n    function taxSingle(bytes32) virtual public returns (uint);\r\n}\r\n\r\nabstract contract CoinSavingsAccountLike {\r\n    function savings(address) virtual public view returns (uint);\r\n    function updateAccumulatedRate() virtual public returns (uint);\r\n    function deposit(uint) virtual public;\r\n    function withdraw(uint) virtual public;\r\n}\r\n\r\nabstract contract ProxyRegistryLike {\r\n    function proxies(address) virtual public view returns (address);\r\n    function build(address) virtual public returns (address);\r\n}\r\n\r\nabstract contract ProxyLike {\r\n    function owner() virtual public view returns (address);\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    // Internal functions\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    function _coinJoin_join(address apt, address safeHandler, uint wad) internal {\r\n        // Approves adapter to take the COIN amount\r\n        CoinJoinLike(apt).systemCoin().approve(apt, wad);\r\n        // Joins COIN into the safeEngine\r\n        CoinJoinLike(apt).join(safeHandler, wad);\r\n    }\r\n\r\n    // Public functions\r\n    function coinJoin_join(address apt, address safeHandler, uint wad) public {\r\n        // Gets COIN from the user's wallet\r\n        CoinJoinLike(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\r\n\r\n        _coinJoin_join(apt, safeHandler, wad);\r\n    }\r\n}\r\n\r\ncontract BasicActions is Common {\r\n    // Internal functions\r\n\r\n    /// @notice Safe subtraction\r\n    /// @dev Reverts on overflows\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    /// @notice Safe conversion uint -> int\r\n    /// @dev Reverts on overflows\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    /// @notice Converts a wad (18 decimal places) to rad (45 decimal places)\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = multiply(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(address collateralJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have other than 18 decimals precision we need to do the conversion before passing to modifySAFECollateralization function\r\n        // Adapters will automatically handle the difference of precision\r\n        uint decimals = CollateralJoinLike(collateralJoin).decimals();\r\n        wad = amt;\r\n        if (decimals < 18) {\r\n          wad = multiply(\r\n              amt,\r\n              10 ** (18 - decimals)\r\n          );\r\n        } else if (decimals > 18) {\r\n          wad = amt / 10 ** (decimals - 18);\r\n        }\r\n    }\r\n\r\n    /// @notice Gets delta debt generated (Total Safe debt minus available safeHandler COIN balance)\r\n    /// @param safeEngine address\r\n    /// @param taxCollector address\r\n    /// @param safeHandler address\r\n    /// @param collateralType bytes32\r\n    /// @return deltaDebt\r\n    function _getGeneratedDeltaDebt(\r\n        address safeEngine,\r\n        address taxCollector,\r\n        address safeHandler,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) internal returns (int deltaDebt) {\r\n        // Updates stability fee rate\r\n        uint rate = TaxCollectorLike(taxCollector).taxSingle(collateralType);\r\n        require(rate > 0, \"invalid-collateral-type\");\r\n\r\n        // Gets COIN balance of the handler in the safeEngine\r\n        uint coin = SAFEEngineLike(safeEngine).coinBalance(safeHandler);\r\n\r\n        // If there was already enough COIN in the safeEngine balance, just exits it without adding more debt\r\n        if (coin < multiply(wad, RAY)) {\r\n            // Calculates the needed deltaDebt so together with the existing coins in the safeEngine is enough to exit wad amount of COIN tokens\r\n            deltaDebt = toInt(subtract(multiply(wad, RAY), coin) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei (for the given COIN wad amount)\r\n            deltaDebt = multiply(uint(deltaDebt), rate) < multiply(wad, RAY) ? deltaDebt + 1 : deltaDebt;\r\n        }\r\n    }\r\n\r\n    /// @notice Gets repaid delta debt generated (rate adjusted debt)\r\n    /// @param safeEngine address\r\n    /// @param coin uint amount\r\n    /// @param safe uint - safeId\r\n    /// @param collateralType bytes32\r\n        /// @return deltaDebt\r\n    function _getRepaidDeltaDebt(\r\n        address safeEngine,\r\n        uint coin,\r\n        address safe,\r\n        bytes32 collateralType\r\n    ) internal view returns (int deltaDebt) {\r\n        // Gets actual rate from the safeEngine\r\n        (, uint rate,,,) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\r\n        require(rate > 0, \"invalid-collateral-type\");\r\n\r\n        // Gets actual generatedDebt value of the safe\r\n        (, uint generatedDebt) = SAFEEngineLike(safeEngine).safes(collateralType, safe);\r\n\r\n        // Uses the whole coin balance in the safeEngine to reduce the debt\r\n        deltaDebt = toInt(coin / rate);\r\n        // Checks the calculated deltaDebt is not higher than safe.generatedDebt (total debt), otherwise uses its value\r\n        deltaDebt = uint(deltaDebt) <= generatedDebt ? - deltaDebt : - toInt(generatedDebt);\r\n    }\r\n\r\n    /// @notice Gets repaid debt (rate adjusted rate minus COIN balance available in usr's address)\r\n    /// @param safeEngine address\r\n    /// @param usr address\r\n    /// @param safe uint\r\n    /// @param collateralType address\r\n    /// @return wad\r\n    function _getRepaidAlDebt(\r\n        address safeEngine,\r\n        address usr,\r\n        address safe,\r\n        bytes32 collateralType\r\n    ) internal view returns (uint wad) {\r\n        // Gets actual rate from the safeEngine\r\n        (, uint rate,,,) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\r\n        // Gets actual generatedDebt value of the safe\r\n        (, uint generatedDebt) = SAFEEngineLike(safeEngine).safes(collateralType, safe);\r\n        // Gets actual coin amount in the safe\r\n        uint coin = SAFEEngineLike(safeEngine).coinBalance(usr);\r\n\r\n        uint rad = subtract(multiply(generatedDebt, rate), coin);\r\n        wad = rad / RAY;\r\n\r\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\r\n        wad = multiply(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\r\n\r\n    /// @notice Generates Debt (and sends coin balance to address to)\r\n    /// @param manager address\r\n    /// @param taxCollector address\r\n    /// @param coinJoin address\r\n    /// @param safe uint\r\n    /// @param wad uint - amount of debt to be generated\r\n    /// @param to address - receiver of the balance of generated COIN\r\n    function _generateDebt(address manager, address taxCollector, address coinJoin, uint safe, uint wad, address to) internal {\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        // Generates debt in the SAFE\r\n        modifySAFECollateralization(manager, safe, 0, _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, wad));\r\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\r\n        transferInternalCoins(manager, safe, address(this), toRad(wad));\r\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\r\n        if (SAFEEngineLike(safeEngine).canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            SAFEEngineLike(safeEngine).approveSAFEModification(coinJoin);\r\n        }\r\n        // Exits COIN to this contract\r\n        CoinJoinLike(coinJoin).exit(to, wad);\r\n    }\r\n\r\n    /// @notice Generates Debt (and sends coin balance to address to)\r\n    /// @param manager address\r\n    /// @param ethJoin address\r\n    /// @param safe uint\r\n    /// @param value uint - amount of ETH to be locked in the Safe.\r\n    /// @dev Proxy needs to have enough balance (> value), public functions should handle this.\r\n    function _lockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint safe,\r\n        uint value\r\n    ) internal {\r\n        // Receives ETH amount, converts it to WETH and joins it into the safeEngine\r\n        ethJoin_join(ethJoin, address(this), value);\r\n        // Locks WETH amount into the SAFE\r\n        SAFEEngineLike(ManagerLike(manager).safeEngine()).modifySAFECollateralization(\r\n            ManagerLike(manager).collateralTypes(safe),\r\n            ManagerLike(manager).safes(safe),\r\n            address(this),\r\n            address(this),\r\n            toInt(value),\r\n            0\r\n        );\r\n    }\r\n\r\n    /// @notice Repays debt\r\n    /// @param manager address\r\n    /// @param coinJoin address\r\n    /// @param safe uint\r\n    /// @param wad uint - amount of debt to be repayed\r\n    function _repayDebt(\r\n        address manager,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint wad,\r\n        bool transferFromCaller\r\n    ) internal {\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n\r\n        address own = ManagerLike(manager).ownsSAFE(safe);\r\n        if (own == address(this) || ManagerLike(manager).safeCan(own, safe, address(this)) == 1) {\r\n            // Joins COIN amount into the safeEngine\r\n            if (transferFromCaller) coinJoin_join(coinJoin, safeHandler, wad);\r\n            else _coinJoin_join(coinJoin, safeHandler, wad);\r\n            // // Paybacks debt to the SAFE\r\n            modifySAFECollateralization(manager, safe, 0, _getRepaidDeltaDebt(safeEngine, SAFEEngineLike(safeEngine).coinBalance(safeHandler), safeHandler, collateralType));\r\n        } else {\r\n             // Joins COIN amount into the safeEngine\r\n            if (transferFromCaller) coinJoin_join(coinJoin, address(this), wad);\r\n            else _coinJoin_join(coinJoin, address(this), wad);\r\n            // Paybacks debt to the SAFE\r\n            SAFEEngineLike(safeEngine).modifySAFECollateralization(\r\n                collateralType,\r\n                safeHandler,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safeHandler, collateralType)\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Repays debt and frees collateral ETH\r\n    /// @param manager address\r\n    /// @param ethJoin address\r\n    /// @param coinJoin address\r\n    /// @param safe uint\r\n    /// @param collateralWad uint - amount of ETH to free\r\n    /// @param deltaWad uint - amount of debt to be repayed\r\n    /// @param transferFromCaller True if transferring coin from caller, false if balance in the proxy\r\n    function _repayDebtAndFreeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralWad,\r\n        uint deltaWad,\r\n        bool transferFromCaller\r\n    ) internal {\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        // Joins COIN amount into the safeEngine\r\n        if (transferFromCaller) coinJoin_join(coinJoin, safeHandler, deltaWad);\r\n        else _coinJoin_join(coinJoin, safeHandler, deltaWad);\r\n        // Paybacks debt to the SAFE and unlocks WETH amount from it\r\n        modifySAFECollateralization(\r\n            manager,\r\n            safe,\r\n            -toInt(collateralWad),\r\n            _getRepaidDeltaDebt(ManagerLike(manager).safeEngine(), SAFEEngineLike(ManagerLike(manager).safeEngine()).coinBalance(safeHandler), safeHandler, ManagerLike(manager).collateralTypes(safe))\r\n        );\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), collateralWad);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), collateralWad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(collateralWad);\r\n    }\r\n\r\n    // Public functions\r\n\r\n    /// @notice ERC20 transfer\r\n    /// @param collateral address - address of ERC20 collateral\r\n    /// @param dst address - Transfer destination\r\n    /// @param amt address - Amount to transfer\r\n    function transfer(address collateral, address dst, uint amt) external {\r\n        CollateralLike(collateral).transfer(dst, amt);\r\n    }\r\n\r\n    /// @notice Joins the system with the full msg.value\r\n    /// @param apt address - Address of the adapter\r\n    /// @param safe uint - Safe Id\r\n    function ethJoin_join(address apt, address safe) external payable {\r\n        ethJoin_join(apt, safe, msg.value);\r\n    }\r\n\r\n    /// @notice Joins the system with the a specified value\r\n    /// @param apt address - Address of the adapter\r\n    /// @param safe uint - Safe Id\r\n    /// @param value uint - Value to join\r\n    function ethJoin_join(address apt, address safe, uint value) public payable {\r\n        // Wraps ETH in WETH\r\n        CollateralJoinLike(apt).collateral().deposit{value: value}();\r\n        // Approves adapter to take the WETH amount\r\n        CollateralJoinLike(apt).collateral().approve(address(apt), value);\r\n        // Joins WETH collateral into the safeEngine\r\n        CollateralJoinLike(apt).join(safe, value);\r\n    }\r\n\r\n    /// @notice Approves an address to modify the Safe\r\n    /// @param safeEngine address\r\n    /// @param usr address - Address allowed to modify Safe\r\n    function approveSAFEModification(\r\n        address safeEngine,\r\n        address usr\r\n    ) external {\r\n        ApproveSAFEModificationLike(safeEngine).approveSAFEModification(usr);\r\n    }\r\n\r\n    /// @notice Denies an address to modify the Safe\r\n    /// @param safeEngine address\r\n    /// @param usr address - Address disallowed to modify Safe\r\n    function denySAFEModification(\r\n        address safeEngine,\r\n        address usr\r\n    ) external {\r\n        ApproveSAFEModificationLike(safeEngine).denySAFEModification(usr);\r\n    }\r\n\r\n    /// @notice Opens a brand new Safe\r\n    /// @param manager address - Safe Manager\r\n    /// @param collateralType bytes32 - collateral type\r\n    /// @param usr address - Owner of the safe\r\n    function openSAFE(\r\n        address manager,\r\n        bytes32 collateralType,\r\n        address usr\r\n    ) public returns (uint safe) {\r\n        safe = ManagerLike(manager).openSAFE(collateralType, usr);\r\n    }\r\n\r\n    /// @notice Transfer the ownership of a proxy owned Safe\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param usr address - Owner of the safe\r\n    function transferSAFEOwnership(\r\n        address manager,\r\n        uint safe,\r\n        address usr\r\n    ) public {\r\n        ManagerLike(manager).transferSAFEOwnership(safe, usr);\r\n    }\r\n\r\n    /// @notice Transfer the ownership to a new proxy owned by a different address\r\n    /// @param proxyRegistry address - Safe Manager\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param dst address - Owner of the new proxy\r\n    function transferSAFEOwnershipToProxy(\r\n        address proxyRegistry,\r\n        address manager,\r\n        uint safe,\r\n        address dst\r\n    ) external {\r\n        // Gets actual proxy address\r\n        address proxy = ProxyRegistryLike(proxyRegistry).proxies(dst);\r\n        // Checks if the proxy address already existed and dst address is still the owner\r\n        if (proxy == address(0) || ProxyLike(proxy).owner() != dst) {\r\n            uint csize;\r\n            assembly {\r\n                csize := extcodesize(dst)\r\n            }\r\n            // We want to avoid creating a proxy for a contract address that might not be able to handle proxies, then losing the SAFE\r\n            require(csize == 0, \"dst-is-a-contract\");\r\n            // Creates the proxy for the dst address\r\n            proxy = ProxyRegistryLike(proxyRegistry).build(dst);\r\n        }\r\n        // Transfers SAFE to the dst proxy\r\n        transferSAFEOwnership(manager, safe, proxy);\r\n    }\r\n\r\n    /// @notice Allow/disallow a usr address to manage the safe\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param usr address - usr address\r\n    /// uint ok - 1 for allowed\r\n    function allowSAFE(\r\n        address manager,\r\n        uint safe,\r\n        address usr,\r\n        uint ok\r\n    ) external {\r\n        ManagerLike(manager).allowSAFE(safe, usr, ok);\r\n    }\r\n\r\n    /// @notice Allow/disallow a usr address to quit to the sender handler\r\n    /// @param manager address - Safe Manager\r\n    /// @param usr address - usr address\r\n    /// uint ok - 1 for allowed\r\n    function allowHandler(\r\n        address manager,\r\n        address usr,\r\n        uint ok\r\n    ) external {\r\n        ManagerLike(manager).allowHandler(usr, ok);\r\n    }\r\n\r\n    /// @notice Transfer wad amount of safe collateral from the safe address to a dst address.\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param dst address - destination address\r\n    /// uint wad - amount\r\n    function transferCollateral(\r\n        address manager,\r\n        uint safe,\r\n        address dst,\r\n        uint wad\r\n    ) public {\r\n        ManagerLike(manager).transferCollateral(safe, dst, wad);\r\n    }\r\n\r\n    /// @notice Transfer rad amount of COIN from the safe address to a dst address.\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param dst address - destination address\r\n    /// uint rad - amount\r\n    function transferInternalCoins(\r\n        address manager,\r\n        uint safe,\r\n        address dst,\r\n        uint rad\r\n    ) public {\r\n        ManagerLike(manager).transferInternalCoins(safe, dst, rad);\r\n    }\r\n\r\n\r\n    /// @notice Modify a SAFE's collateralization ratio while keeping the generated COIN or collateral freed in the SAFE handler address.\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param deltaCollateral - int\r\n    /// @param deltaDebt - int\r\n    function modifySAFECollateralization(\r\n        address manager,\r\n        uint safe,\r\n        int deltaCollateral,\r\n        int deltaDebt\r\n    ) public {\r\n        ManagerLike(manager).modifySAFECollateralization(safe, deltaCollateral, deltaDebt);\r\n    }\r\n\r\n    /// @notice Quit the system, migrating the safe (lockedCollateral, generatedDebt) to a different dst handler\r\n    /// @param manager address - Safe Manager\r\n    /// @param safe uint - Safe Id\r\n    /// @param dst - destination handler\r\n    function quitSystem(\r\n        address manager,\r\n        uint safe,\r\n        address dst\r\n    ) external {\r\n        ManagerLike(manager).quitSystem(safe, dst);\r\n    }\r\n\r\n    /// @notice Import a position from src handler to the handler owned by safe\r\n    /// @param manager address - Safe Manager\r\n    /// @param src - source handler\r\n    /// @param safe uint - Safe Id\r\n    function enterSystem(\r\n        address manager,\r\n        address src,\r\n        uint safe\r\n    ) external {\r\n        ManagerLike(manager).enterSystem(src, safe);\r\n    }\r\n\r\n    /// @notice Move a position from safeSrc handler to the safeDst handler\r\n    /// @param manager address - Safe Manager\r\n    /// @param safeSrc uint - Source Safe Id\r\n    /// @param safeDst uint - Destination Safe Id\r\n    function moveSAFE(\r\n        address manager,\r\n        uint safeSrc,\r\n        uint safeDst\r\n    ) external {\r\n        ManagerLike(manager).moveSAFE(safeSrc, safeDst);\r\n    }\r\n\r\n    /// @notice Lock ETH (msg.value) as collateral in safe\r\n    /// @param manager address - Safe Manager\r\n    /// @param ethJoin address\r\n    /// @param safe uint - Safe Id\r\n    function lockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint safe\r\n    ) public payable {\r\n        _lockETH(manager, ethJoin, safe, msg.value);\r\n    }\r\n\r\n    /// @notice Free ETH (wad) from safe and sends it to msg.sender\r\n    /// @param manager address - Safe Manager\r\n    /// @param ethJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param wad uint - Amount\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint safe,\r\n        uint wad\r\n    ) public {\r\n        // Unlocks WETH amount from the SAFE\r\n        modifySAFECollateralization(manager, safe, -toInt(wad), 0);\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), wad);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n\r\n    /// @notice Exits ETH (wad) from balance available in the handler\r\n    /// @param manager address - Safe Manager\r\n    /// @param ethJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param wad uint - Amount\r\n    function exitETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint safe,\r\n        uint wad\r\n    ) external {\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), wad);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    /// @notice Generates debt and sends COIN amount to msg.sender\r\n    /// @param manager address\r\n    /// @param taxCollector address\r\n    /// @param coinJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param wad uint - Amount\r\n    function generateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint wad\r\n    ) public {\r\n        _generateDebt(manager, taxCollector, coinJoin, safe, wad, msg.sender);\r\n    }\r\n\r\n    /// @notice Repays debt\r\n    /// @param manager address\r\n    /// @param coinJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param wad uint - Amount\r\n    function repayDebt(\r\n        address manager,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint wad\r\n    ) public {\r\n        _repayDebt(manager, coinJoin, safe, wad, true);\r\n    }\r\n\r\n    /// @notice Locks Eth, generates debt and sends COIN amount (deltaWad) to msg.sender\r\n    /// @param manager address\r\n    /// @param taxCollector address\r\n    /// @param ethJoin address\r\n    /// @param coinJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param deltaWad uint - Amount\r\n    function lockETHAndGenerateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint deltaWad\r\n    ) public payable {\r\n        _lockETH(manager, ethJoin, safe, msg.value);\r\n        _generateDebt(manager, taxCollector, coinJoin, safe, deltaWad, msg.sender);\r\n    }\r\n\r\n    /// @notice Opens Safe, locks Eth, generates debt and sends COIN amount (deltaWad) to msg.sender\r\n    /// @param manager address\r\n    /// @param taxCollector address\r\n    /// @param ethJoin address\r\n    /// @param coinJoin address\r\n    /// @param deltaWad uint - Amount\r\n    function openLockETHAndGenerateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint deltaWad\r\n    ) external payable returns (uint safe) {\r\n        safe = openSAFE(manager, collateralType, address(this));\r\n        lockETHAndGenerateDebt(manager, taxCollector, ethJoin, coinJoin, safe, deltaWad);\r\n    }\r\n\r\n    /// @notice Repays debt and frees ETH (sends it to msg.sender)\r\n    /// @param manager address\r\n    /// @param ethJoin address\r\n    /// @param coinJoin address\r\n    /// @param safe uint - Safe Id\r\n    /// @param collateralWad uint - Amount of collateral to free\r\n    /// @param deltaWad uint - Amount of debt to repay\r\n    function repayDebtAndFreeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralWad,\r\n        uint deltaWad\r\n    ) external {\r\n        _repayDebtAndFreeETH(manager, ethJoin, coinJoin, safe, collateralWad, deltaWad, true);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(collateralWad);\r\n    }    \r\n}\r\n\r\ncontract GebProxyActions is BasicActions {\r\n\r\n    function tokenCollateralJoin_join(address apt, address safe, uint amt, bool transferFrom) public {\r\n        // Only executes for tokens that have approval/transferFrom implementation\r\n        if (transferFrom) {\r\n            // Gets token from the user's wallet\r\n            CollateralJoinLike(apt).collateral().transferFrom(msg.sender, address(this), amt);\r\n            // Approves adapter to take the token amount\r\n            CollateralJoinLike(apt).collateral().approve(apt, amt);\r\n        }\r\n        // Joins token collateral into the safeEngine\r\n        CollateralJoinLike(apt).join(safe, amt);\r\n    }\r\n\r\n    function protectSAFE(\r\n        address manager,\r\n        uint safe,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) public {\r\n        ManagerLike(manager).protectSAFE(safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function makeCollateralBag(\r\n        address collateralJoin\r\n    ) public returns (address bag) {\r\n        bag = GNTJoinLike(collateralJoin).make(address(this));\r\n    }\r\n\r\n    function safeLockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint safe,\r\n        address owner\r\n    ) public payable {\r\n        require(ManagerLike(manager).ownsSAFE(safe) == owner, \"owner-missmatch\");\r\n        lockETH(manager, ethJoin, safe);\r\n    }\r\n\r\n    function lockTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        uint safe,\r\n        uint amt,\r\n        bool transferFrom\r\n    ) public {\r\n        // Takes token amount from user's wallet and joins into the safeEngine\r\n        tokenCollateralJoin_join(collateralJoin, address(this), amt, transferFrom);\r\n        // Locks token amount into the SAFE\r\n        SAFEEngineLike(ManagerLike(manager).safeEngine()).modifySAFECollateralization(\r\n            ManagerLike(manager).collateralTypes(safe),\r\n            ManagerLike(manager).safes(safe),\r\n            address(this),\r\n            address(this),\r\n            toInt(convertTo18(collateralJoin, amt)),\r\n            0\r\n        );\r\n    }\r\n\r\n    function safeLockTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        uint safe,\r\n        uint amt,\r\n        bool transferFrom,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).ownsSAFE(safe) == owner, \"owner-missmatch\");\r\n        lockTokenCollateral(manager, collateralJoin, safe, amt, transferFrom);\r\n    }\r\n\r\n    function freeTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        uint safe,\r\n        uint amt\r\n    ) public {\r\n        uint wad = convertTo18(collateralJoin, amt);\r\n        // Unlocks token amount from the SAFE\r\n        modifySAFECollateralization(manager, safe, -toInt(wad), 0);\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), wad);\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n\r\n    function exitTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        uint safe,\r\n        uint amt\r\n    ) public {\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), convertTo18(collateralJoin, amt));\r\n\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n\r\n    function generateDebtAndProtectSAFE(\r\n        address manager,\r\n        address taxCollector,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint wad,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) external {\r\n        generateDebt(manager, taxCollector, coinJoin, safe, wad);\r\n        protectSAFE(manager, safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function safeRepayDebt(\r\n        address manager,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint wad,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).ownsSAFE(safe) == owner, \"owner-missmatch\");\r\n        repayDebt(manager, coinJoin, safe, wad);\r\n    }\r\n\r\n    function repayAllDebt(\r\n        address manager,\r\n        address coinJoin,\r\n        uint safe\r\n    ) public {\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        (, uint generatedDebt) = SAFEEngineLike(safeEngine).safes(collateralType, safeHandler);\r\n\r\n        address own = ManagerLike(manager).ownsSAFE(safe);\r\n        if (own == address(this) || ManagerLike(manager).safeCan(own, safe, address(this)) == 1) {\r\n            // Joins COIN amount into the safeEngine\r\n            coinJoin_join(coinJoin, safeHandler, _getRepaidAlDebt(safeEngine, safeHandler, safeHandler, collateralType));\r\n            // Paybacks debt to the SAFE\r\n            modifySAFECollateralization(manager, safe, 0, -int(generatedDebt));\r\n        } else {\r\n            // Joins COIN amount into the safeEngine\r\n            coinJoin_join(coinJoin, address(this), _getRepaidAlDebt(safeEngine, address(this), safeHandler, collateralType));\r\n            // Paybacks debt to the SAFE\r\n            SAFEEngineLike(safeEngine).modifySAFECollateralization(\r\n                collateralType,\r\n                safeHandler,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                -int(generatedDebt)\r\n            );\r\n        }\r\n    }\r\n\r\n    function safeRepayAllDebt(\r\n        address manager,\r\n        address coinJoin,\r\n        uint safe,\r\n        address owner\r\n    ) public {\r\n        require(ManagerLike(manager).ownsSAFE(safe) == owner, \"owner-missmatch\");\r\n        repayAllDebt(manager, coinJoin, safe);\r\n    }\r\n\r\n    function openLockETHGenerateDebtAndProtectSAFE(\r\n        address manager,\r\n        address taxCollector,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint deltaWad,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) public payable returns (uint safe) {\r\n        safe = openSAFE(manager, collateralType, address(this));\r\n        lockETHAndGenerateDebt(manager, taxCollector, ethJoin, coinJoin, safe, deltaWad);\r\n        protectSAFE(manager, safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function lockTokenCollateralAndGenerateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralAmount,\r\n        uint deltaWad,\r\n        bool transferFrom\r\n    ) public {\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        // Takes token amount from user's wallet and joins into the safeEngine\r\n        tokenCollateralJoin_join(collateralJoin, safeHandler, collateralAmount, transferFrom);\r\n        // Locks token amount into the SAFE and generates debt\r\n        modifySAFECollateralization(manager, safe, toInt(convertTo18(collateralJoin, collateralAmount)), _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad));\r\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\r\n        transferInternalCoins(manager, safe, address(this), toRad(deltaWad));\r\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\r\n        if (SAFEEngineLike(safeEngine).canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            SAFEEngineLike(safeEngine).approveSAFEModification(coinJoin);\r\n        }\r\n        // Exits COIN to the user's wallet as a token\r\n        CoinJoinLike(coinJoin).exit(msg.sender, deltaWad);\r\n    }\r\n\r\n    function lockTokenCollateralGenerateDebtAndProtectSAFE(\r\n        address manager,\r\n        address taxCollector,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralAmount,\r\n        uint deltaWad,\r\n        bool transferFrom,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) public {\r\n        lockTokenCollateralAndGenerateDebt(\r\n          manager,\r\n          taxCollector,\r\n          collateralJoin,\r\n          coinJoin,\r\n          safe,\r\n          collateralAmount,\r\n          deltaWad,\r\n          transferFrom\r\n        );\r\n        protectSAFE(manager, safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function openLockTokenCollateralAndGenerateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint collateralAmount,\r\n        uint deltaWad,\r\n        bool transferFrom\r\n    ) public returns (uint safe) {\r\n        safe = openSAFE(manager, collateralType, address(this));\r\n        lockTokenCollateralAndGenerateDebt(manager, taxCollector, collateralJoin, coinJoin, safe, collateralAmount, deltaWad, transferFrom);\r\n    }\r\n\r\n    function openLockTokenCollateralGenerateDebtAndProtectSAFE(\r\n        address manager,\r\n        address taxCollector,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint collateralAmount,\r\n        uint deltaWad,\r\n        bool transferFrom,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) public returns (uint safe) {\r\n        safe = openSAFE(manager, collateralType, address(this));\r\n        lockTokenCollateralAndGenerateDebt(manager, taxCollector, collateralJoin, coinJoin, safe, collateralAmount, deltaWad, transferFrom);\r\n        protectSAFE(manager, safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function openLockGNTAndGenerateDebt(\r\n        address manager,\r\n        address taxCollector,\r\n        address gntJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint collateralAmount,\r\n        uint deltaWad\r\n    ) public returns (address bag, uint safe) {\r\n        // Creates bag (if doesn't exist) to hold GNT\r\n        bag = GNTJoinLike(gntJoin).bags(address(this));\r\n        if (bag == address(0)) {\r\n            bag = makeCollateralBag(gntJoin);\r\n        }\r\n        // Transfer funds to the funds which previously were sent to the proxy\r\n        CollateralLike(CollateralJoinLike(gntJoin).collateral()).transfer(bag, collateralAmount);\r\n        safe = openLockTokenCollateralAndGenerateDebt(manager, taxCollector, gntJoin, coinJoin, collateralType, collateralAmount, deltaWad, false);\r\n    }\r\n\r\n    function openLockGNTGenerateDebtAndProtectSAFE(\r\n        address manager,\r\n        address taxCollector,\r\n        address gntJoin,\r\n        address coinJoin,\r\n        bytes32 collateralType,\r\n        uint collateralAmount,\r\n        uint deltaWad,\r\n        address liquidationEngine,\r\n        address saviour\r\n    ) public returns (address bag, uint safe) {\r\n        (bag, safe) = openLockGNTAndGenerateDebt(\r\n          manager,\r\n          taxCollector,\r\n          gntJoin,\r\n          coinJoin,\r\n          collateralType,\r\n          collateralAmount,\r\n          deltaWad\r\n        );\r\n        protectSAFE(manager, safe, liquidationEngine, saviour);\r\n    }\r\n\r\n    function repayAllDebtAndFreeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralWad\r\n    ) public {\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        (, uint generatedDebt) = SAFEEngineLike(safeEngine).safes(collateralType, safeHandler);\r\n\r\n        // Joins COIN amount into the safeEngine\r\n        coinJoin_join(coinJoin, safeHandler, _getRepaidAlDebt(safeEngine, safeHandler, safeHandler, collateralType));\r\n        // Paybacks debt to the SAFE and unlocks WETH amount from it\r\n        modifySAFECollateralization(\r\n            manager,\r\n            safe,\r\n            -toInt(collateralWad),\r\n            -int(generatedDebt)\r\n        );\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), collateralWad);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), collateralWad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(collateralWad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(collateralWad);\r\n    }\r\n\r\n    function repayDebtAndFreeTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralAmount,\r\n        uint deltaWad\r\n    ) external {\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        // Joins COIN amount into the safeEngine\r\n        coinJoin_join(coinJoin, safeHandler, deltaWad);\r\n        uint collateralWad = convertTo18(collateralJoin, collateralAmount);\r\n        // Paybacks debt to the SAFE and unlocks token amount from it\r\n        modifySAFECollateralization(\r\n            manager,\r\n            safe,\r\n            -toInt(collateralWad),\r\n            _getRepaidDeltaDebt(ManagerLike(manager).safeEngine(), SAFEEngineLike(ManagerLike(manager).safeEngine()).coinBalance(safeHandler), safeHandler, ManagerLike(manager).collateralTypes(safe))\r\n        );\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), collateralWad);\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, collateralAmount);\r\n    }\r\n\r\n    function repayAllDebtAndFreeTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        address coinJoin,\r\n        uint safe,\r\n        uint collateralAmount\r\n    ) public {\r\n        address safeEngine = ManagerLike(manager).safeEngine();\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        (, uint generatedDebt) = SAFEEngineLike(safeEngine).safes(collateralType, safeHandler);\r\n\r\n        // Joins COIN amount into the safeEngine\r\n        coinJoin_join(coinJoin, safeHandler, _getRepaidAlDebt(safeEngine, safeHandler, safeHandler, collateralType));\r\n        uint collateralWad = convertTo18(collateralJoin, collateralAmount);\r\n        // Paybacks debt to the SAFE and unlocks token amount from it\r\n        modifySAFECollateralization(\r\n            manager,\r\n            safe,\r\n            -toInt(collateralWad),\r\n            -int(generatedDebt)\r\n        );\r\n        // Moves the amount from the SAFE handler to proxy's address\r\n        transferCollateral(manager, safe, address(this), collateralWad);\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, collateralAmount);\r\n    }\r\n}\r\n\r\ncontract GebProxyActionsGlobalSettlement is Common {\r\n\r\n    // Internal functions\r\n    function _freeCollateral(\r\n        address manager,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) internal returns (uint lockedCollateral) {\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        SAFEEngineLike safeEngine = SAFEEngineLike(ManagerLike(manager).safeEngine());\r\n        uint generatedDebt;\r\n        (lockedCollateral, generatedDebt) = safeEngine.safes(collateralType, safeHandler);\r\n\r\n        // If SAFE still has debt, it needs to be paid\r\n        if (generatedDebt > 0) {\r\n            GlobalSettlementLike(globalSettlement).processSAFE(collateralType, safeHandler);\r\n            (lockedCollateral,) = safeEngine.safes(collateralType, safeHandler);\r\n        }\r\n        // Approves the manager to transfer the position to proxy's address in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(manager)) == 0) {\r\n            safeEngine.approveSAFEModification(manager);\r\n        }\r\n        // Transfers position from SAFE to the proxy address\r\n        ManagerLike(manager).quitSystem(safe, address(this));\r\n        // Frees the position and recovers the collateral in the safeEngine registry\r\n        GlobalSettlementLike(globalSettlement).freeCollateral(collateralType);\r\n    }\r\n\r\n    // Public functions\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) external {\r\n        uint wad = _freeCollateral(manager, globalSettlement, safe);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) public {\r\n        uint amt = _freeCollateral(manager, globalSettlement, safe) / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n\r\n    function prepareCoinsForRedeeming(\r\n        address coinJoin,\r\n        address globalSettlement,\r\n        uint wad\r\n    ) public {\r\n        coinJoin_join(coinJoin, address(this), wad);\r\n        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\r\n        // Approves the globalSettlement to take out COIN from the proxy's balance in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(globalSettlement)) == 0) {\r\n            safeEngine.approveSAFEModification(globalSettlement);\r\n        }\r\n        GlobalSettlementLike(globalSettlement).prepareCoinsForRedeeming(wad);\r\n    }\r\n\r\n    function redeemETH(\r\n        address ethJoin,\r\n        address globalSettlement,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) public {\r\n        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\r\n        uint collateralWad = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY;\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), collateralWad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(collateralWad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(collateralWad);\r\n    }\r\n\r\n    function redeemTokenCollateral(\r\n        address collateralJoin,\r\n        address globalSettlement,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) public {\r\n        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\r\n        // Exits token amount to the user's wallet as a token\r\n        uint amt = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n}\r\n\r\ncontract GebProxyActionsCoinSavingsAccount is Common {\r\n\r\n    function deposit(\r\n        address coinJoin,\r\n        address coinSavingsAccount,\r\n        uint wad\r\n    ) public {\r\n        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\r\n        // Executes updateAccumulatedRate to get the accumulatedRates updated to latestUpdateTime == now, otherwise join will fail\r\n        uint accumulatedRates = CoinSavingsAccountLike(coinSavingsAccount).updateAccumulatedRate();\r\n        // Joins wad amount to the safeEngine balance\r\n        coinJoin_join(coinJoin, address(this), wad);\r\n        // Approves the coinSavingsAccount to take out COIN from the proxy's balance in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(coinSavingsAccount)) == 0) {\r\n            safeEngine.approveSAFEModification(coinSavingsAccount);\r\n        }\r\n        // Joins the savings value (equivalent to the COIN wad amount) in the coinSavingsAccount\r\n        CoinSavingsAccountLike(coinSavingsAccount).deposit(multiply(wad, RAY) / accumulatedRates);\r\n    }\r\n\r\n    function withdraw(\r\n        address coinJoin,\r\n        address coinSavingsAccount,\r\n        uint wad\r\n    ) public {\r\n        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\r\n        // Executes updateAccumulatedRate to count the savings accumulated until this moment\r\n        uint accumulatedRates = CoinSavingsAccountLike(coinSavingsAccount).updateAccumulatedRate();\r\n        // Calculates the savings value in the coinSavingsAccount equivalent to the COIN wad amount\r\n        uint savings = multiply(wad, RAY) / accumulatedRates;\r\n        // Exits COIN from the coinSavingsAccount\r\n        CoinSavingsAccountLike(coinSavingsAccount).withdraw(savings);\r\n        // Checks the actual balance of COIN in the safeEngine after the coinSavingsAccount exit\r\n        uint bal = CoinJoinLike(coinJoin).safeEngine().coinBalance(address(this));\r\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            safeEngine.approveSAFEModification(coinJoin);\r\n        }\r\n        // It is necessary to check if due rounding the exact wad amount can be exited by the adapter.\r\n        // Otherwise it will do the minimum COIN balance in the safeEngine\r\n        CoinJoinLike(coinJoin).exit(\r\n            msg.sender,\r\n            bal >= multiply(wad, RAY) ? wad : bal / RAY\r\n        );\r\n    }\r\n\r\n    function withdrawAll(\r\n        address coinJoin,\r\n        address coinSavingsAccount\r\n    ) public {\r\n        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\r\n        // Executes updateAccumulatedRate to count the savings accumulated until this moment\r\n        uint accumulatedRates = CoinSavingsAccountLike(coinSavingsAccount).updateAccumulatedRate();\r\n        // Gets the total savings belonging to the proxy address\r\n        uint savings = CoinSavingsAccountLike(coinSavingsAccount).savings(address(this));\r\n        // Exits COIN from the coinSavingsAccount\r\n        CoinSavingsAccountLike(coinSavingsAccount).withdraw(savings);\r\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            safeEngine.approveSAFEModification(coinJoin);\r\n        }\r\n        // Exits the COIN amount corresponding to the value of savings\r\n        CoinJoinLike(coinJoin).exit(msg.sender, multiply(accumulatedRates, savings) / RAY);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// GebProxyAuctionActions.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nabstract contract AccountingEngineLike {\r\n    function debtAuctionHouse() external virtual returns (address);\r\n    function surplusAuctionHouse() external virtual returns (address);\r\n    function auctionDebt() external virtual returns (uint256);\r\n    function auctionSurplus() external virtual returns (uint256);\r\n}\r\n\r\nabstract contract DebtAuctionHouseLike {\r\n    function bids(uint) external virtual returns (uint, uint, address, uint48, uint48);\r\n    function decreaseSoldAmount(uint256, uint256, uint256) external virtual;\r\n    function restartAuction(uint256) external virtual;\r\n    function settleAuction(uint256) external virtual;\r\n    function protocolToken() external virtual returns (address);\r\n}\r\n\r\nabstract contract SurplusAuctionHouseLike {\r\n    function bids(uint) external virtual returns (uint, uint, address, uint48, uint48);\r\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external virtual;\r\n    function restartAuction(uint256) external virtual;\r\n    function settleAuction(uint256) external virtual;\r\n    function protocolToken() external virtual returns (address);\r\n}\r\n\r\ncontract AuctionCommon {\r\n\r\n    /// @notice Claims the full balance of any ERC20 token from the proxy\r\n    /// @param tokenAddress Address of the token\r\n    function claimProxyFunds(address tokenAddress) public {\r\n        DSTokenLike token = DSTokenLike(tokenAddress);\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Claims the full balance of several ERC20 tokens from the proxy\r\n    /// @param tokenAddresses Addresses of the tokens\r\n    function claimProxyFunds(address[] memory tokenAddresses) public {\r\n        for (uint i = 0; i < tokenAddresses.length; i++)\r\n            claimProxyFunds(tokenAddresses[i]);\r\n    }\r\n\r\n    // --- Utils ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    function toWad(uint rad) internal pure returns (uint wad) {\r\n        wad = rad / 10**27;\r\n    }\r\n}\r\n\r\ncontract GebProxyDebtAuctionActions is Common, AuctionCommon {\r\n\r\n    /// @notice Starts auction and bids\r\n    /// @param coinJoin CoinJoin contract\r\n    /// @param accountingEngineAddress AccountingEngine contract\r\n    /// @param amountToBuy Amount to buy\r\n    function startAndDecreaseSoldAmount(address coinJoin, address accountingEngineAddress, uint amountToBuy) public {\r\n        AccountingEngineLike accountingEngine = AccountingEngineLike(accountingEngineAddress);\r\n        DebtAuctionHouseLike debtAuctionHouse = DebtAuctionHouseLike(accountingEngine.debtAuctionHouse());\r\n        SAFEEngineLike safeEngine = SAFEEngineLike(CoinJoinLike(coinJoin).safeEngine());\r\n\r\n        // Starts auction\r\n        uint auctionId = accountingEngine.auctionDebt();\r\n        (uint bidAmount,,,,) = debtAuctionHouse.bids(auctionId);\r\n        // Joins system coins\r\n        coinJoin_join(coinJoin, address(this), toWad(bidAmount));\r\n        // Allows auction house to access to proxy's COIN balance in the SAFEEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(debtAuctionHouse)) == 0) {\r\n            safeEngine.approveSAFEModification(address(debtAuctionHouse));\r\n        }\r\n        // Bid\r\n        debtAuctionHouse.decreaseSoldAmount(auctionId, amountToBuy, bidAmount);\r\n    }\r\n\r\n    /// @notice Bids in auction. Restarts the auction if necessary\r\n    /// @param coinJoin CoinJoin contract\r\n    /// @param auctionHouse Auction house address\r\n    /// @param auctionId Auction ID\r\n    /// @param amountToBuy Amount to buy\r\n    function decreaseSoldAmount(address coinJoin, address auctionHouse, uint auctionId, uint amountToBuy) public {\r\n        DebtAuctionHouseLike debtAuctionHouse = DebtAuctionHouseLike(auctionHouse);\r\n        SAFEEngineLike safeEngine = SAFEEngineLike(CoinJoinLike(coinJoin).safeEngine());\r\n\r\n        (uint bidAmount,,, uint48 bidExpiry, uint48 auctionDeadline) = debtAuctionHouse.bids(auctionId);\r\n        // Joins system coins\r\n        coinJoin_join(coinJoin, address(this), toWad(bidAmount));\r\n        // Allows auction house to access to proxy's COIN balance in the SAFEEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(debtAuctionHouse)) == 0) {\r\n            safeEngine.approveSAFEModification(address(debtAuctionHouse));\r\n        }\r\n        // Restarts auction if inactive\r\n        if (both(auctionDeadline < now, bidExpiry == 0)) {\r\n            debtAuctionHouse.restartAuction(auctionId);\r\n        }\r\n        // Bid\r\n        debtAuctionHouse.decreaseSoldAmount(auctionId, amountToBuy, bidAmount);\r\n    }\r\n\r\n    /// @notice Mints protocol tokens for your proxy and then the proxy sends all of its balance to msg.sender\r\n    /// @param coinJoin CoinJoin\r\n    /// @param auctionHouse Auction house address\r\n    /// @param auctionId Auction ID\r\n    function settleAuction(address coinJoin, address auctionHouse, uint auctionId) public {\r\n        DebtAuctionHouseLike debtAuctionHouse = DebtAuctionHouseLike(auctionHouse);\r\n        debtAuctionHouse.settleAuction(auctionId);\r\n        claimProxyFunds(address(CoinJoinLike(coinJoin).systemCoin()));\r\n        claimProxyFunds(debtAuctionHouse.protocolToken());\r\n    }\r\n\r\n    /// @notice Exits Coin to proxy owner\r\n    /// @param coinJoin CoinJoin\r\n    /// @param wad Amount to exit\r\n    function exitCoin(address coinJoin, uint wad) public {\r\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\r\n        if (CoinJoinLike(coinJoin).safeEngine().canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            CoinJoinLike(coinJoin).safeEngine().approveSAFEModification(coinJoin);\r\n        }\r\n        CoinJoinLike(coinJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    /// @notice Exits full Coin balance to proxy owner\r\n    /// @param coinJoin CoinJoin\r\n    function exitAllCoin(address coinJoin) public {\r\n        exitCoin(coinJoin, CoinJoinLike(coinJoin).safeEngine().coinBalance(address(this)) / RAY);\r\n    }\r\n}\r\n\r\ncontract GebProxySurplusAuctionActions is Common, AuctionCommon {\r\n\r\n    /// @notice Starts surplus auction and bids\r\n    /// @param accountingEngineAddress AccountingEngine contract\r\n    /// @param bidSize Bid size\r\n    function startAndIncreaseBidSize(address accountingEngineAddress, uint bidSize) public {\r\n        AccountingEngineLike accountingEngine = AccountingEngineLike(accountingEngineAddress);\r\n        SurplusAuctionHouseLike surplusAuctionHouse = SurplusAuctionHouseLike(accountingEngine.surplusAuctionHouse());\r\n        DSTokenLike protocolToken = DSTokenLike(surplusAuctionHouse.protocolToken());\r\n\r\n        // Starts auction\r\n        uint auctionId = accountingEngine.auctionSurplus();\r\n        require(protocolToken.transferFrom(msg.sender, address(this), bidSize), \"geb-proxy-auction-actions/transfer-from-failed\");\r\n        protocolToken.approve(address(surplusAuctionHouse), bidSize);\r\n        (, uint amountToSell,,,) = surplusAuctionHouse.bids(auctionId);\r\n        // Bids\r\n        surplusAuctionHouse.increaseBidSize(auctionId, amountToSell, bidSize);\r\n    }\r\n\r\n    /// @notice Bids in auction. Restarts the auction if necessary\r\n    /// @param auctionHouse Auction house address\r\n    /// @param auctionId Auction ID\r\n    /// @param bidSize Bid size\r\n    function increaseBidSize(address auctionHouse, uint auctionId, uint bidSize) public {\r\n        SurplusAuctionHouseLike surplusAuctionHouse = SurplusAuctionHouseLike(auctionHouse);\r\n        DSTokenLike protocolToken = DSTokenLike(surplusAuctionHouse.protocolToken());\r\n\r\n        require(protocolToken.transferFrom(msg.sender, address(this), bidSize), \"geb-proxy-auction-actions/transfer-from-failed\");\r\n        protocolToken.approve(address(surplusAuctionHouse), bidSize);\r\n        // Restarts auction if inactive\r\n        (, uint amountToSell,, uint48 bidExpiry, uint48 auctionDeadline) = surplusAuctionHouse.bids(auctionId);\r\n        if (auctionDeadline < now && bidExpiry == 0) {\r\n            surplusAuctionHouse.restartAuction(auctionId);\r\n        }\r\n        // Bid\r\n        surplusAuctionHouse.increaseBidSize(auctionId, amountToSell, bidSize);\r\n    }\r\n\r\n    /// @notice Mints system coins for your proxy and then the proxy sends all of its balance to msg.sender\r\n    /// @param coinJoin CoinJoin contract\r\n    /// @param auctionHouse Auction house address\r\n    /// @param auctionId Auction ID\r\n    function settleAuction(address coinJoin, address auctionHouse, uint auctionId) public {\r\n        SurplusAuctionHouseLike surplusAuctionHouse = SurplusAuctionHouseLike(auctionHouse);\r\n        SAFEEngineLike safeEngine = SAFEEngineLike(CoinJoinLike(coinJoin).safeEngine());\r\n        (, uint amountToBuy,,,) = surplusAuctionHouse.bids(auctionId);\r\n        // Settle auction\r\n        surplusAuctionHouse.settleAuction(auctionId);\r\n        // Allows coinJoin to access to proxy's COIN balance in the SAFEEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(coinJoin)) == 0) {\r\n            safeEngine.approveSAFEModification(address(coinJoin));\r\n        }\r\n        // Sends system coins and protocol tokens to the owner\r\n        CoinJoinLike(coinJoin).exit(msg.sender, toWad(amountToBuy));\r\n        claimProxyFunds(surplusAuctionHouse.protocolToken());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimProxyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"claimProxyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"coinJoin_join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionHouse\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"decreaseSoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"}],\"name\":\"exitAllCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionHouse\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"startAndDecreaseSoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GebProxyDebtAuctionActions","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bf52deebd9d0780221b3be8b1fb0a1152c67c833c8f14ad0413ecec79866867e"}]}