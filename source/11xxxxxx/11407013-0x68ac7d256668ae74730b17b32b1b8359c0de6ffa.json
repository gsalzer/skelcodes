{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/Initializable.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.24 <0.7.0;\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n// File: contracts/MasterRegistry.sol\r\n// SPDX-License-Identifier: UNLICENSED\r\n/**\r\n@title Master Registry Contract\r\n@author Filipe Soccol\r\n*/\r\ncontract MasterRegistry is Initializable, OwnableUpgradeable {\r\n    event RecordChanged(address indexed series, uint16 indexed key, address value);\r\n    event ContentChanged(address indexed series, uint16 indexed key, string value);\r\n    // Mapping PluginID => Pluggin contract address\r\n    mapping(uint16=>address) private plugins;\r\n    // Mapping Series Address => PluginID => Deployd Contract Address \r\n    mapping(address=>mapping(uint16=>address)) private records;\r\n    // Mapping Series Address => PluginID => Content\r\n    mapping(address=>mapping(uint16=>string)) private contents;\r\n    /**\r\n    @notice Modifier that only allow the following entities change content:\r\n    - Series owners\r\n    - Plugin itself in case of empty series record\r\n    - Current module itself addressed by record\r\n    @param _series The plugin index to update.\r\n    @param _key The new address where remains the plugin.\r\n     */\r\n    modifier authorizedRecord(address _series, uint16 _key) {\r\n        require(isSeriesOwner(_series) ||\r\n        isRecordItself(_series, _key) || \r\n        isRecordPlugin(_series, _key), \"Not Authorized: Caller is not series owner, plugin or record itself\");\r\n        _;\r\n    }\r\n    /**\r\n     * @notice Modifier to allow only series owners to change content.\r\n     * @param _series The plugin index to update.\r\n     * @param _key The new address where remains the plugin.\r\n     */\r\n    modifier onlySeriesOwner(address _series, uint16 _key) {\r\n        require(isSeriesOwner(_series), \"Not Authorized: Caller is not series owner\");\r\n        _;\r\n    }\r\n    function initialize(address[] calldata previousSeries, address[] calldata previousTokens) external {\r\n        require(previousSeries.length == previousTokens.length, 'Previous series size different than previous tokens size.');\r\n        __Ownable_init();\r\n        // Migrating previous tokens\r\n        for (uint i = 0; i < previousSeries.length; i++ ) {\r\n            records[previousSeries[i]][1] = previousTokens[i];\r\n            emit RecordChanged(previousSeries[i], 1, previousTokens[i]);\r\n        }\r\n    }\r\n    /**\r\n    @notice Sets the module contract associated with an Series and record.\r\n    May only be called by the owner of that series, module itself or record plugin itself.\r\n    @param series The series to update.\r\n    @param key The key to set.\r\n    @param value The text data value to set.\r\n     */\r\n    function setRecord(address series, uint16 key, address value) public authorizedRecord(series, key) {\r\n        records[series][key] = value;\r\n        emit RecordChanged(series, key, value);\r\n    }\r\n    /**\r\n    @notice Returns the data associated with an record Series and Key.\r\n    @param series The series node to query.\r\n    @param key The text data key to query.\r\n    @return The associated text data.\r\n     */\r\n    function getRecord(address series, uint16 key) public view returns (address) {\r\n        return records[series][key];\r\n    }\r\n    /**\r\n    @notice Sets the content data associated with an Series and key.\r\n    May only be called by the owner of that series.\r\n    @param series The series to update.\r\n    @param key The key to set.\r\n    @param value The text data value to set.\r\n     */\r\n    function setContent(address series, uint16 key, string memory value) public onlySeriesOwner(series, key) {\r\n        contents[series][key] = value;\r\n        emit ContentChanged(series, key, value);\r\n    }\r\n    /**\r\n     @notice Returns the content associated with an content Series and Key.\r\n     @param series The series node to query.\r\n     @param key The text data key to query.\r\n     @return The associated text data.\r\n     */\r\n    function getContent(address series, uint16 key) public view returns (string memory) {\r\n        return contents[series][key];\r\n    }\r\n    /**\r\n     @notice Sets the plugin that controls specific entry on records.\r\n     Only owner of this contract has permission.\r\n     @param pluginID The plugin index to update.\r\n     @param pluginAddress The new address where remains the plugin.\r\n     */\r\n    function setPluginController(uint16 pluginID, address pluginAddress) public onlyOwner {\r\n        plugins[pluginID] = pluginAddress;\r\n    }\r\n    /**\r\n     @notice Check if sender is the series owner.\r\n     @param _series Referenced Series to check.\r\n     */\r\n    function isSeriesOwner(address _series) private view returns (bool) {\r\n        return OwnableUpgradeable(_series).owner() == _msgSender();\r\n    }\r\n    /**\r\n     @notice Check if sender is the Record stored itself. E.g.: A multisig stored could change multisig key referenced.\r\n     @param _series Referenced Series to check.\r\n     @param _key Key relate to the entry.\r\n     */\r\n    function isRecordItself(address _series, uint16 _key) private view returns (bool) {\r\n        return records[_series][_key] == _msgSender();\r\n    }\r\n    /**\r\n     @notice Check if sender is the Plugin related to the key. This is only valid for new entries, not to replace existing ones.\r\n     @param _series Referenced Series to check.\r\n     @param _key Key relate to the entry.\r\n     */\r\n    function isRecordPlugin(address _series, uint16 _key) private view returns (bool) {\r\n        return _msgSender() == plugins[_key] && records[_series][_key] == address(0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"ContentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"RecordChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"}],\"name\":\"getContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"}],\"name\":\"getRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"previousSeries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"previousTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pluginID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"name\":\"setPluginController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"series\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"key\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterRegistry","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79befd351382d67e5d349cabc5f44165e1e5aeb52e5e7e330c2ec81cfbbc22fe"}]}