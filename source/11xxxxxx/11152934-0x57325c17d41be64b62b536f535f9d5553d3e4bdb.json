{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/RotBalanceUtils.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n// this contract is a read only utility to calculate rot balances faster on the website\r\n\r\ncontract RotBalanceUtils {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public rotten;\r\n    IZombieChef public zombieChef;\r\n\r\n    constructor(IERC20 _rotten, IZombieChef _zombieChef) public {\r\n        rotten = _rotten;\r\n        zombieChef = _zombieChef;\r\n    }\r\n\r\n    function rotBalance(address _user) external view returns (uint256) {\r\n        return rotten.balanceOf(_user);\r\n    }\r\n\r\n    function rotBalancePendingHarvest(address _user) public view returns (uint256) {\r\n        uint256 totalPendingRot = 0;\r\n        uint256 poolCount = zombieChef.poolLength();\r\n        for (uint256 pid = 0; pid < poolCount; ++pid) {\r\n            (IERC20 lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = zombieChef.poolInfo(pid);\r\n            (uint256 amount, uint256 rewardDebt) = zombieChef.userInfo(pid, _user);\r\n            uint256 lpSupply = lpToken.balanceOf(address(zombieChef));\r\n            if (block.number > lastRewardBlock && lpSupply != 0) {\r\n                uint256 multiplier = zombieChef.getMultiplier(lastRewardBlock, block.number);\r\n                uint256 rottenReward = multiplier.mul(zombieChef.sushiPerBlock()).mul(allocPoint).div(zombieChef.totalAllocPoint());\r\n                accSushiPerShare = accSushiPerShare.add(rottenReward.mul(1e12).div(lpSupply));\r\n            }\r\n            totalPendingRot = totalPendingRot.add(amount.mul(accSushiPerShare).div(1e12).sub(rewardDebt));\r\n        }\r\n        return totalPendingRot;\r\n    }\r\n\r\n    function rotBalanceStaked(address _user) public view returns (uint256) {\r\n        uint256 totalRotStaked = 0;\r\n        uint256 poolCount = zombieChef.poolLength();\r\n        for (uint256 pid = 0; pid < poolCount; ++pid) {\r\n            (uint256 amount, uint256 rewardDebt) = zombieChef.userInfo(pid, _user);\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n            (IERC20 lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = zombieChef.poolInfo(pid);\r\n            uint256 uniswapPairRotBalance = rotten.balanceOf(address(lpToken));\r\n            if (uniswapPairRotBalance == 0) {\r\n                continue;\r\n            }\r\n            uint256 userPercentOfLpOwned = amount.mul(1e12).div(lpToken.totalSupply());\r\n            totalRotStaked = totalRotStaked.add(uniswapPairRotBalance.mul(userPercentOfLpOwned).div(1e12));\r\n        }\r\n        return totalRotStaked;\r\n    }\r\n\r\n    function rotBalanceAll(address _user) external view returns (uint256) {\r\n        return rotten.balanceOf(_user).add(rotBalanceStaked(_user)).add(rotBalancePendingHarvest(_user));\r\n    }\r\n}\r\n\r\ninterface IZombieChef {\r\n    function poolInfo(uint256 pid) external view returns (IERC20 lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShar);\r\n    function userInfo(uint256 pid, address user) external view returns (uint256 amount, uint256 rewardDebt);\r\n    function sushiPerBlock() external view returns (uint256);\r\n    function totalAllocPoint() external view returns (uint256);\r\n    function poolLength() external view returns (uint256);\r\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rotten\",\"type\":\"address\"},{\"internalType\":\"contract IZombieChef\",\"name\":\"_zombieChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rotBalanceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rotBalancePendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rotBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rotten\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieChef\",\"outputs\":[{\"internalType\":\"contract IZombieChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RotBalanceUtils","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d04785c4d8195e4a54d9dec3a9043872875ae9e2000000000000000000000000577af3dce5aaa89510135d7f6e095e33c06b8b1f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d303404723f460c3a8ac7d0eb873577245118b03447a5cbdb6af18c770e65db"}]}