{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-30\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2016, Adrià Massanet\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    Checked results with FIPS test vectors\r\n    https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/dss/186-2rsatestvectors.zip\r\n    file SigVer15_186-3.rsp\r\n\r\n */\r\ncontract SolRsaVerify {\r\n\r\n    function memcpy(uint _dest, uint _src, uint _len) pure internal {\r\n        // Copy word-length chunks while possible\r\n        for ( ;_len >= 32; _len -= 32) {\r\n            assembly {\r\n                mstore(_dest, mload(_src))\r\n            }\r\n            _dest += 32;\r\n            _src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - _len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(_src), not(mask))\r\n            let destpart := and(mload(_dest), mask)\r\n            mstore(_dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n\r\n    function join(\r\n        bytes memory _s, bytes memory _e, bytes memory _m\r\n    ) pure internal returns (bytes memory) {\r\n        uint inputLen = 0x60+_s.length+_e.length+_m.length;\r\n\r\n        uint slen = _s.length;\r\n        uint elen = _e.length;\r\n        uint mlen = _m.length;\r\n        uint sptr;\r\n        uint eptr;\r\n        uint mptr;\r\n        uint inputPtr;\r\n\r\n        bytes memory input = new bytes(inputLen);\r\n        assembly {\r\n            sptr := add(_s,0x20)\r\n            eptr := add(_e,0x20)\r\n            mptr := add(_m,0x20)\r\n            mstore(add(input,0x20),slen)\r\n            mstore(add(input,0x40),elen)\r\n            mstore(add(input,0x60),mlen)\r\n            inputPtr := add(input,0x20)\r\n        }\r\n        memcpy(inputPtr+0x60,sptr,_s.length);\r\n        memcpy(inputPtr+0x60+_s.length,eptr,_e.length);\r\n        memcpy(inputPtr+0x60+_s.length+_e.length,mptr,_m.length);\r\n\r\n        return input;\r\n    }\r\n\r\n    /** @dev Verifies a PKCSv1.5 SHA256 signature\r\n      * @param _sha256 is the sha256 of the data\r\n      * @param _s is the signature\r\n      * @param _e is the exponent\r\n      * @param _m is the modulus\r\n      * @return 0 if success, >0 otherwise\r\n    */\r\n    function pkcs1Sha256Verify(\r\n        bytes32 _sha256,\r\n        bytes memory _s, bytes memory _e, bytes memory _m\r\n    ) public view returns (uint) {\r\n\r\n        uint8[19] memory sha256Prefix = [\r\n        0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20\r\n        ];\r\n\r\n        require(_m.length >= sha256Prefix.length+_sha256.length+11);\r\n\r\n        uint i;\r\n\r\n        /// decipher\r\n        bytes memory input = join(_s,_e,_m);\r\n        uint inputlen = input.length;\r\n\r\n        uint decipherlen = _m.length;\r\n        bytes memory decipher = new bytes(decipherlen);\r\n        assembly {\r\n            pop(staticcall(sub(gas(), 2000), 5, add(input,0x20), inputlen, add(decipher,0x20), decipherlen))\r\n        }\r\n\r\n        /// 0x00 || 0x01 || PS || 0x00 || DigestInfo\r\n        /// PS is padding filled with 0xff\r\n        //  DigestInfo ::= SEQUENCE {\r\n        //     digestAlgorithm AlgorithmIdentifier,\r\n        //     digest OCTET STRING\r\n        //  }\r\n\r\n        uint paddingLen = decipherlen - 3 - sha256Prefix.length - 32;\r\n\r\n        if (decipher[0] != 0 || uint8(decipher[1]) != 1) {\r\n            return 1;\r\n        }\r\n        for (i = 2;i<2+paddingLen;i++) {\r\n            if (decipher[i] != 0xff) {\r\n                return 2;\r\n            }\r\n        }\r\n        if (decipher[2+paddingLen] != 0) {\r\n            return 3;\r\n        }\r\n        for (i = 0;i<sha256Prefix.length;i++) {\r\n            if (uint8(decipher[3+paddingLen+i])!=sha256Prefix[i]) {\r\n                return 4;\r\n            }\r\n        }\r\n        for (i = 0;i<_sha256.length;i++) {\r\n            if (decipher[3+paddingLen+sha256Prefix.length+i]!=_sha256[i]) {\r\n                return 5;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /** @dev Verifies a PKCSv1.5 SHA256 signature\r\n      * @param _data to verify\r\n      * @param _s is the signature\r\n      * @param _e is the exponent\r\n      * @param _m is the modulus\r\n      * @return 0 if success, >0 otherwise\r\n    */\r\n    function pkcs1Sha256VerifyRaw(\r\n        bytes memory _data,\r\n        bytes memory _s, bytes memory _e, bytes memory _m\r\n    ) public view returns (uint) {\r\n        return pkcs1Sha256Verify(sha256(_data),_s,_e,_m);\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMilk2Token {\r\n\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    function burn(address _to, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\ncontract MultiplierMath {\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n\r\n    function getInterval(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a > b ? a - b : 0;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\ncontract ShadowStaking is Ownable, SolRsaVerify, MultiplierMath {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 rewardDebt;\r\n        uint256 lastBlock;\r\n    }\r\n\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken;\r\n        uint256 allocPointAmount;\r\n        uint256 blockCreation;\r\n    }\r\n\r\n\r\n    struct KeyInfo{\r\n        bytes keyModule;\r\n        bytes exponent;\r\n        bool keyStatus;\r\n    }\r\n\r\n    IMilk2Token public milk;\r\n\r\n    mapping (address => UserInfo) private userInfo;\r\n\r\n    address[] internal users;\r\n\r\n\r\n    PoolInfo[] private poolInfo;\r\n\r\n    KeyInfo[] private keyInfo;\r\n\r\n\r\n    uint256 private totalPoints;\r\n\r\n    uint256[5] internal epochs;\r\n\r\n    uint256[5] internal multipliers;\r\n\r\n\r\n    event Harvest(address sender, uint256 amount, uint256 blockNumber);\r\n    event AddNewPool(address token, uint256 pid);\r\n    event PoolUpdate(uint256 poolPid, uint256 previusPoints, uint256 newPoints);\r\n    event AddNewKey(bytes keyHash, uint256 id);\r\n\r\n\r\n    constructor(IMilk2Token _milk, uint256[5] memory _epochs, uint256[5] memory _multipliers) public {\r\n        milk = _milk;\r\n        epochs = _epochs;\r\n        multipliers = _multipliers;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Add a new lp to the pool.\r\n      *\r\n      * @param _lpToken - address of ERC-20 LP token\r\n       * @param _newPoints - share in the total amount of rewards\r\n      * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n      * Can only be called by the current owner.\r\n      */\r\n    function addNewPool(IERC20 _lpToken, uint256 _newPoints) public onlyOwner {\r\n        totalPoints = totalPoints.add(_newPoints);\r\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPointAmount: _newPoints, blockCreation:block.number}));\r\n        emit AddNewPool(address(_lpToken), _newPoints);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Update lp address to the pool.\r\n     *\r\n     * @param _poolPid - number of pool\r\n     * @param _newPoints - new amount of allocation points\r\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setPoll(uint256 _poolPid, uint256 _newPoints) public onlyOwner {\r\n        PoolInfo memory _poolInfo = poolInfo[_poolPid];\r\n        uint256 _previousPoints = poolInfo[_poolPid].allocPointAmount;\r\n        _poolInfo.allocPointAmount = _newPoints;\r\n\r\n        totalPoints = totalPoints.sub(poolInfo[_poolPid].allocPointAmount).add(_newPoints);\r\n        emit PoolUpdate(_poolPid, _previousPoints, _newPoints);\r\n    }\r\n\r\n\r\n    \r\n    function getPool(uint256 _poolPid) public view returns(address _lpToken, uint256 _block, uint256 _weight) {\r\n        PoolInfo memory _poolInfo = poolInfo[_poolPid];\r\n        _lpToken = address(_poolInfo.lpToken);\r\n        _block = _poolInfo.blockCreation;\r\n        _weight = _poolInfo.allocPointAmount;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev - return Number of keys\r\n      */\r\n    function getPoolsCount() public view returns(uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    /**\r\n      * @dev - return info about current user's reward\r\n      * @param _user - user's address\r\n      */\r\n    function getRewards(address _user) public view returns(uint256) {\r\n        return  userInfo[_user].rewardDebt;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev - return info about user's last block with update\r\n      *\r\n      * @param _user - user's address\r\n      */\r\n    function getLastBlock(address _user) public view returns(uint256) {\r\n        return userInfo[_user].lastBlock;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev - return total allocation points\r\n    */\r\n    function getTotalPoints() public view returns(uint256) {\r\n        return totalPoints;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Update the given pool's allocation point. Can only be called by the owner.\r\n      *\r\n      * @param _keyId - unique id key in contract storage\r\n      * @param _amount -\r\n      * @param _lastBlockNumber - last update number of block\r\n      * @param _currentBlockNumber - last update block in Ethereum mainnet\r\n      * @param _sign - bytes32 signature\r\n      */\r\n    function withdraw(  uint256 _keyId,\r\n                        uint256 _amount,\r\n                        uint256 _lastBlockNumber,\r\n                        uint256 _currentBlockNumber,\r\n                        bytes memory _sign) public {\r\n        require(_keyId < keyInfo.length , \"This key is not exist\");\r\n        require(keyInfo[_keyId].keyStatus, \"This key is disable\");\r\n        require(_currentBlockNumber < block.number, \"currentBlockNumber cannot be larger than the last block\");\r\n        require(pkcs1Sha256Verify(getData(_amount, _lastBlockNumber, _currentBlockNumber, msg.sender), _sign, keyInfo[_keyId].exponent, keyInfo[_keyId].keyModule) == 0, \"Incorrect data\");\r\n\r\n        UserInfo storage _userInfo = userInfo[msg.sender];\r\n        require(_userInfo.lastBlock == _lastBlockNumber, \"lastBlockNumber must be equal to the value in the storage\");\r\n\r\n        if (_lastBlockNumber == 0) {\r\n            _lastBlockNumber = block.number;\r\n            _currentBlockNumber = block.number;\r\n            users.push(msg.sender);\r\n        }\r\n        _userInfo.rewardDebt = _userInfo.rewardDebt.add(_amount);\r\n        _userInfo.lastBlock = _currentBlockNumber;\r\n        if (_amount > 0) {\r\n            milk.mint(msg.sender, _amount);\r\n        }\r\n        emit Harvest(msg.sender, _amount, _currentBlockNumber);\r\n    }\r\n\r\n\r\n    function getData(uint256 _amount, uint256 _lastBlockNumber, uint256 _currentBlockNumber, address _sender) public pure returns(bytes32) {\r\n        return sha256(abi.encode(_amount, _lastBlockNumber, _currentBlockNumber, _sender));\r\n    }\r\n    \r\n    \r\n    /**\r\n      * @dev\r\n      *\r\n      * @param _newModule - new module of key\r\n      * @param _keyExponent - new exponent of key\r\n      * Can only be called by the current owner.\r\n      */\r\n    function addNewKey(bytes memory _newModule, bytes memory _keyExponent) public onlyOwner returns(uint256) {\r\n        keyInfo.push(KeyInfo({keyModule: _newModule, exponent: _keyExponent, keyStatus: true}));\r\n        emit AddNewKey(_newModule, keyInfo.length - 1);\r\n        return keyInfo.length - 1;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev\r\n      *\r\n      * @param _keyId - available public key for signing.\r\n      * Can only be called by the current owner.\r\n      */\r\n    function enableKey(uint256 _keyId) public onlyOwner {\r\n        require(!keyInfo[_keyId].keyStatus, \"This key already enable\");\r\n        keyInfo[_keyId].keyStatus = true;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev\r\n      *\r\n      * @param _keyId - available public key for signing.\r\n      * Can only be called by the current owner.\r\n      */\r\n    function disableKey(uint256 _keyId) public onlyOwner {\r\n        require(keyInfo[_keyId].keyStatus, \"This key already disable\");\r\n        keyInfo[_keyId].keyStatus = false;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Return info about available key\r\n      * @param _keyId - available public key for signing\r\n      */\r\n    function getKeyInfo(uint256 _keyId) public view returns(bytes memory _key, bytes memory _exponent, bool _status) {\r\n        _key = keyInfo[_keyId].keyModule;\r\n        _exponent = keyInfo[_keyId].exponent;\r\n        _status = keyInfo[_keyId].keyStatus;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev - return Number of keys\r\n      */\r\n    function getKeyCount() public view returns(uint256) {\r\n        return keyInfo.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev - return Number of users\r\n     */\r\n    function getUsersCount() public view returns(uint256) {\r\n        return users.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev - return address of user\r\n     * @param - _userId - unique number of user in array\r\n     */\r\n    function getUser(uint256 _userId) public view returns(address) {\r\n        return users[_userId];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev - return total rewards\r\n     */\r\n    function getTotalRewards(address _user) public view returns(uint256) {\r\n        return userInfo[_user].rewardDebt;\r\n    }\r\n\r\n\r\n    /**\r\n    * @param - _id - multiplier's id (0-4)\r\n    * @dev - return value of multiplier\r\n    */\r\n    function getValueMultiplier(uint256 _id) public view returns(uint256) {\r\n        return multipliers[_id];\r\n    }\r\n\r\n\r\n    /**\r\n    * @param - _id - epoch's id(0-4)\r\n    * @dev - return value of epoch\r\n    */\r\n    function getValueEpoch(uint256 _id) public view returns(uint256) {\r\n        return epochs[_id];\r\n    }\r\n\r\n\r\n    function getMultiplier(uint256 f, uint256 t) public view returns(uint256) {\r\n        return getInterval(min(t, epochs[1]), max(f, epochs[0])) * multipliers[0] +\r\n        getInterval(min(t, epochs[2]), max(f, epochs[1])) * multipliers[1] +\r\n        getInterval(min(t, epochs[3]), max(f, epochs[2])) * multipliers[2] +\r\n        getInterval(min(t, epochs[4]), max(f, epochs[3])) * multipliers[3] +\r\n        getInterval(max(t, epochs[4]), max(f, epochs[4])) * multipliers[4];\r\n    }\r\n\r\n\r\n    function getCurrentMultiplier() public view returns(uint256) {\r\n        if (block.number < epochs[0]) {\r\n            return 0;\r\n        }\r\n        if (block.number < epochs[1]) {\r\n            return multipliers[0];\r\n        }\r\n        if (block.number < epochs[2]) {\r\n            return multipliers[1];\r\n        }\r\n        if (block.number < epochs[3]) {\r\n            return multipliers[2];\r\n        }\r\n        if (block.number < epochs[4]) {\r\n            return multipliers[3];\r\n        }\r\n        if (block.number > epochs[4]) {\r\n            return multipliers[4];\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMilk2Token\",\"name\":\"_milk\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"_epochs\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_multipliers\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddNewKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddNewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previusPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoints\",\"type\":\"uint256\"}],\"name\":\"PoolUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newModule\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_keyExponent\",\"type\":\"bytes\"}],\"name\":\"addNewKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPoints\",\"type\":\"uint256\"}],\"name\":\"addNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"}],\"name\":\"disableKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"}],\"name\":\"enableKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"}],\"name\":\"getKeyInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_exponent\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolPid\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getValueEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getValueMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milk\",\"outputs\":[{\"internalType\":\"contract IMilk2Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sha256\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_s\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_e\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_m\",\"type\":\"bytes\"}],\"name\":\"pkcs1Sha256Verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_s\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_e\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_m\",\"type\":\"bytes\"}],\"name\":\"pkcs1Sha256VerifyRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPoints\",\"type\":\"uint256\"}],\"name\":\"setPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShadowStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e00edf07bbab7f9e7a93ffbffdd4c16c5dbc6b030000000000000000000000000000000000000000000000000000000000aa47680000000000000000000000000000000000000000000000000000000000aa95880000000000000000000000000000000000000000000000000000000000aabc980000000000000000000000000000000000000000000000000000000000aad0200000000000000000000000000000000000000000000000000000000000aad7f0000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000005","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://28f0a4a1d1fd2f62392eba2ac6de40043b56ad756032acf75002ccfb7422b163"}]}