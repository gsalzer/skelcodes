{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.5;\r\ncontract SafeMath { //standard safemath library\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return safeSub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function safeSub(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\r\n        require(b <= a, error);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return safeDiv(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function safeDiv(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\r\n        require(b > 0, error);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function safeExponent(uint256 a,uint256 b) internal pure returns (uint256) {\r\n      uint256 result;\r\n      assembly {\r\n          result:=exp(a, b)\r\n      }\r\n      return result;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function slash(uint256 value) external returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    address payable public newOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        _trasnferOwnership(msg.sender);\r\n    }\r\n    function _trasnferOwnership(address payable _whom) internal {\r\n        emit OwnershipTransferred(owner,_whom);\r\n        owner = _whom;\r\n    }\r\n}\r\n\r\n\r\ncontract SURGEStaking is SafeMath {\r\n    uint256 public constant DECIMAL_NOMINATOR = 10**18;\r\n    uint256 public constant rewardBreakingPoint = 30;\r\n    uint256 public constant beforeBreakPoint = 100;    // used in 100 mulitipliction\r\n    uint256 public constant aterBreakPoint = 150;    // used in 100 mulitipliction\r\n    uint256 private totalSurgeBalance;\r\n    uint256 public rewardsAllocated;\r\n    bool public enabled = false;\r\n    IERC20 public constant SurgeToken = IERC20(0x38B27df57d2C1b92bd88B582BbE88816354a7f62);//UPATE WITH ADDRESS FROM MAINNET\r\n    IERC20 public constant StakingToken = IERC20(0x38B27df57d2C1b92bd88B582BbE88816354a7f62); //UPATE WITH ADDRESS FROM MAINNET\r\n    address public owner;\r\n\r\n    mapping(address => uint256) public stakedAmount;\r\n    mapping(address => uint256) public lastStack;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n\r\n    constructor() {\r\n    owner = msg.sender;\r\n    SurgeToken.approve(address(this),115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n    StakingToken.approve(address(this),115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n    }\r\n\r\n    // To stake token user will call this method\r\n    // user can stake only once while\r\n    function stake(uint256 amount) external returns (bool) {\r\n        require(enabled == true);\r\n        require(amount <= 115792089237316195423570985008687907853269984665640564039457584007913129639935, \"Overflow\");\r\n        if (stakedAmount[msg.sender] == 0) {\r\n                bool isOk = IERC20(StakingToken).transferFrom(msg.sender,address(this),amount);\r\n                require(isOk, \"TOKEN_TRANSFER_FAIL\");\r\n                stakedAmount[msg.sender] = safeSub(amount, SurgeToken.slash(amount)); //// Subtracting slash amount only when staking SURG\r\n                //stakedAmount[msg.sender] = amount //use this for tokens other than SURG (does not support burn-on-transfer tokens)\r\n                emit Staked(msg.sender, amount);\r\n                lastStack[msg.sender] = block.timestamp;\r\n                return true;\r\n        }\r\n            else {\r\n                bool isOk = IERC20(StakingToken).transferFrom(msg.sender,address(this),amount);\r\n                require(isOk, \"TOKEN_TRANSFER_FAIL\");\r\n                stakedAmount[msg.sender] = safeSub(safeAdd(stakedAmount[msg.sender], amount), SurgeToken.slash(amount)); //// Subtracting slash amount only when staking SURG\r\n                //stakedAmount[msg.sender] = safeAdd(stakedAmount[msg.sender], amount); //// Subtracting slash amount only when staking SURG\r\n                emit Staked(msg.sender, amount);\r\n                lastStack[msg.sender] = block.timestamp;\r\n                return true;\r\n        }\r\n    }\r\n\r\n    // To unstake token user will call this method\r\n    // user get daily rewards according to calulation\r\n    //  for first 30 days we give 1.0% rewards per day\r\n    //  after 31 day reward is 1.5% per day\r\n    function unStake() external returns (bool) {\r\n        require(stakedAmount[msg.sender] != 0, \"ERR_NOT_STACKED\");\r\n        uint256 lastStackTime = lastStack[msg.sender];\r\n        uint256 amount = stakedAmount[msg.sender];\r\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\r\n        uint256 totalReward = 0;\r\n\r\n        if (_days > rewardBreakingPoint) {\r\n            totalReward = safeMul(safeDiv(safeMul(amount, aterBreakPoint), 10000), safeSub(_days, rewardBreakingPoint));\r\n            _days = rewardBreakingPoint;\r\n        }\r\n\r\n        totalReward = safeAdd(totalReward, safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days));\r\n        totalReward = safeAdd(totalReward, 1);\r\n\r\n        SurgeToken.mint(msg.sender, totalReward);\r\n        StakingToken.transfer(msg.sender, amount);\r\n\r\n        emit Unstaked(msg.sender, amount);\r\n\r\n        stakedAmount[msg.sender] = 0;\r\n        lastStack[msg.sender] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    // user can check how many day passed untill they stake\r\n    function checkDays(address _whom) external view returns (uint256) {\r\n        uint256 lastStackTime = lastStack[_whom];\r\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\r\n        return _days;\r\n    }\r\n\r\n    // user can check balance if they unstake now\r\n    function balanceOf(address _whom) external view returns (uint256) {\r\n        uint256 lastStackTime = lastStack[_whom];\r\n        uint256 amount = stakedAmount[_whom];\r\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\r\n\r\n        uint256 totalReward = 0;\r\n\r\n        if (_days > rewardBreakingPoint) {\r\n            totalReward = safeMul(\r\n                safeDiv(safeMul(amount, aterBreakPoint), 10000),\r\n                safeSub(_days, rewardBreakingPoint)\r\n            );\r\n            _days = rewardBreakingPoint;\r\n        }\r\n\r\n        totalReward = safeAdd(\r\n            totalReward,\r\n            safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days)\r\n        );\r\n\r\n        uint256 recivedAmount = safeAdd(amount, totalReward);\r\n        return recivedAmount;\r\n    }\r\n\r\n    function enable() public {\r\n        require(msg.sender == owner);\r\n        enabled = true;\r\n    }\r\n\r\n    function disable() public {\r\n        require(msg.sender == owner);\r\n        enabled = false;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_NOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SurgeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aterBreakPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeBreakPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"checkDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBreakingPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SURGEStaking","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77780f078955a699feefc48599695e241d6b013288f3d90e7226c810d8c4fcfa"}]}