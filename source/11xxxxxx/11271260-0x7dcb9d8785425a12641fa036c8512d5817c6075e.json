{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental ABIEncoderV2;\r\npragma solidity ^0.4.24;\r\n\r\ncontract AddressSignatureVerifier {\r\n    struct Wallet {\r\n        address wallet;\r\n        string message;\r\n    }\r\n\r\n    string private constant WALLET_TYPE = \"Wallet(address wallet,string message)\";\r\n    bytes32 private constant WALLET_TYPEHASH = keccak256(abi.encodePacked(WALLET_TYPE));\r\n\r\n    uint256 constant chainId = 1;\r\n    string private constant EIP712_DOMAIN = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\r\n    bytes32 private constant DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            EIP712_DOMAIN_TYPEHASH,\r\n            keccak256(\"POAP.app\"),\r\n            keccak256(\"1\"),\r\n            chainId,\r\n            address(this)\r\n        ));\r\n\r\n    function hashWallet(Wallet memory wallet) private pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(\r\n                    WALLET_TYPEHASH,\r\n                    wallet.wallet,\r\n                    keccak256(wallet.message)\r\n                ))\r\n            ));\r\n    }\r\n\r\n    function verify(Wallet memory wallet, bytes32 r, bytes32 s, uint8 v) public pure returns (address) {\r\n        return ecrecover(hashWallet(wallet), v, r, s);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"AddressSignatureVerifier","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e31a679ad251332ff10e150f47d956f87d725568f42520f10251d4fa3b507dda"}]}