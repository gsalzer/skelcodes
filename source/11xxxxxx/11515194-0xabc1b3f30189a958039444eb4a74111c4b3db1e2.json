{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/PErc20Delegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ProxyWithRegistry.sol\\\";\\r\\nimport \\\"./RegistryInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DeFiPie's PErc20Delegator Contract\\r\\n * @notice PTokens which wrap an EIP-20 underlying and delegate to an implementation\\r\\n * @author DeFiPie\\r\\n */\\r\\ncontract PErc20Delegator is ProxyWithRegistry {\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param controller_ The address of the Controller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param initialReserveFactorMantissa_ The initial reserve factor, scaled by 1e18\\r\\n     * @param name_ ERC-20 name of this token\\r\\n     * @param symbol_ ERC-20 symbol of this token\\r\\n     * @param decimals_ ERC-20 decimal precision of this token\\r\\n     * @param registry_ The address of the registry contract\\r\\n     */\\r\\n    constructor(\\r\\n        address underlying_,\\r\\n        address controller_,\\r\\n        address interestRateModel_,\\r\\n        uint initialExchangeRateMantissa_,\\r\\n        uint initialReserveFactorMantissa_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        address registry_\\r\\n    ) {\\r\\n        // Set registry\\r\\n        _setRegistry(registry_);\\r\\n\\r\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\r\\n        delegateTo(_pTokenImplementation(), abi.encodeWithSignature(\\\"initialize(address,address,address,address,uint256,uint256,string,string,uint8)\\\",\\r\\n                                                            underlying_,\\r\\n                                                            registry_,\\r\\n                                                            controller_,\\r\\n                                                            interestRateModel_,\\r\\n                                                            initialExchangeRateMantissa_,\\r\\n                                                            initialReserveFactorMantissa_,\\r\\n                                                            name_,\\r\\n                                                            symbol_,\\r\\n                                                            decimals_));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to delegate execution to another contract\\r\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n     * @param callee The contract to delegatecall\\r\\n     * @param data The raw data to delegatecall\\r\\n     * @return The returned bytes from the delegatecall\\r\\n     */\\r\\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                revert(add(returnData, 0x20), returndatasize())\\r\\n            }\\r\\n        }\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function delegateAndReturn() internal returns (bytes memory) {\\r\\n        (bool success, ) = _pTokenImplementation().delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n            let free_mem_ptr := mload(0x40)\\r\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n            switch success\\r\\n            case 0 { revert(free_mem_ptr, returndatasize()) }\\r\\n            default { return(free_mem_ptr, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates execution to an implementation contract\\r\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        require(msg.value == 0,\\\"PErc20Delegator:fallback: cannot send value to fallback\\\");\\r\\n\\r\\n        // delegate all other functions to current implementation\\r\\n        delegateAndReturn();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.value == 0,\\\"PErc20Delegator:receive: cannot send value to receive\\\");\\r\\n    }\\r\\n}\\r\\n\",\r\n      \"keccak256\": \"0xa814b47e90fac831e6735899de92dadfc0ff7c08a7ca11940bed288b220d1f49\"\r\n    },\r\n    \"contracts/ProxyWithRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./RegistryInterface.sol\\\";\\r\\n\\r\\ncontract ProxyWithRegistryStorage {\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the registry contract\\r\\n     */\\r\\n    address public registry;\\r\\n}\\r\\n\\r\\nabstract contract ProxyWithRegistryInterface is ProxyWithRegistryStorage {\\r\\n    function _setRegistry(address _registry) internal virtual;\\r\\n    function _pTokenImplementation() internal view virtual returns (address);\\r\\n}\\r\\n\\r\\ncontract ProxyWithRegistry is ProxyWithRegistryInterface {\\r\\n    /**\\r\\n     *  Returns actual address of the implementation contract from current registry\\r\\n     *  @return registry Address of the registry\\r\\n     */\\r\\n    function _pTokenImplementation() internal view override returns (address) {\\r\\n        return RegistryInterface(registry).pTokenImplementation();\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address _registry) internal override {\\r\\n        registry = _registry;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ImplementationStorage {\\r\\n\\r\\n    address public implementation;\\r\\n\\r\\n    function _setImplementation(address implementation_) internal {\\r\\n        implementation = implementation_;\\r\\n    }\\r\\n}\",\r\n      \"keccak256\": \"0xbca7f4ac024754179b7448e1a6d76ad3c029c1544e0c128e1d5000eea7f30b8a\"\r\n    },\r\n    \"contracts/RegistryInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.4;\\r\\n\\r\\ninterface RegistryInterface {\\r\\n\\r\\n    /**\\r\\n     *  Returns admin address for cToken contracts\\r\\n     *  @return admin address\\r\\n     */\\r\\n    function admin() external view returns (address payable);\\r\\n\\r\\n    /**\\r\\n     *  Returns address of actual PToken implementation contract\\r\\n     *  @return Address of contract\\r\\n     */\\r\\n    function pTokenImplementation() external view returns (address);\\r\\n\\r\\n    function addPToken(address underlying, address pToken) external returns(uint);\\r\\n    function addPETH(address pETH_) external returns(uint);\\r\\n    function addPPIE(address pPIE_) external returns(uint);\\r\\n}\\r\\n\",\r\n      \"keccak256\": \"0x445e9bfc9f8cbd6c5c9107048c1e78fe646636826696aefbba726911afe7fb87\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReserveFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PErc20Delegator","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000036de5bbc618a04c9b471208ef52ee2b1f536e92d000000000000000000000000d47d39a66bb4912d127fbfc1b90884fcb35461370000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000120000000000000000000000001135270bbb0627e769a7a2e24f2b2c7f14b3d83a0000000000000000000000000000000000000000000000000000000000000012446546695069652054657468657220555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057055534454000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0x897540454fe376a747e009189d2912f1ce110949","SwarmSource":""}]}