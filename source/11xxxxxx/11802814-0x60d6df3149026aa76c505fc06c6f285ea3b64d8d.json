{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Constants {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _launchSupply = 60450 * 10**9;\r\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\r\n\r\n    uint256 private constant _baseExpansionFactor = 100;\r\n    uint256 private constant _baseContractionFactor = 100;\r\n    uint256 private constant _baseUtilityFee = 50;\r\n    uint256 private constant _baseContractionCap = 1000;\r\n\r\n    uint256 private constant _stabilizerFee = 250;\r\n    uint256 private constant _stabilizationLowerBound = 50;\r\n    uint256 private constant _stabilizationLowerReset = 75;\r\n    uint256 private constant _stabilizationUpperBound = 150;\r\n    uint256 private constant _stabilizationUpperReset = 125;\r\n    uint256 private constant _stabilizePercent = 10;\r\n\r\n    uint256 private constant _treasuryFee = 250;\r\n\r\n    uint256 private constant _presaleMinIndividualCap = 1 ether;\r\n    uint256 private constant _presaleMaxIndividualCap = 4 ether;\r\n    uint256 private constant _presaleCap = 37200 * 10**9; \r\n    uint256 private constant _maxPresaleGas = 200000000000;\r\n\r\n    uint256 private constant _epochLength = 4 hours;\r\n\r\n    uint256 private constant _liquidityReward = 2 * 10**9;\r\n    uint256 private constant _minForLiquidity = 10 * 10**9;\r\n    uint256 private constant _minForCallerLiquidity = 10 * 10**9;\r\n\r\n    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address payable private constant _deployerAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\r\n    address private constant _treasuryAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\r\n\r\n    uint256 private constant _presaleRate = 31000;\r\n    uint256 private constant _listingRate = 29063;\r\n\r\n    string private constant _name = \"YFStable\";\r\n    string private constant _symbol = \"YFST\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    /****** Getters *******/\r\n    function getPresaleRate() internal pure returns (uint256) {\r\n        return _presaleRate;\r\n    }\r\n     function getListingRate() internal pure returns (uint256) {\r\n        return _listingRate;\r\n    }\r\n    function getLaunchSupply() internal pure returns (uint256) {\r\n        return _launchSupply;\r\n    }\r\n    function getLargeTotal() internal pure returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getPresaleCap() internal pure returns (uint256) {\r\n        return _presaleCap;\r\n    }\r\n    function getPresaleMinIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMinIndividualCap;\r\n    }\r\n    function getPresaleMaxIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMaxIndividualCap;\r\n    }\r\n    function getMaxPresaleGas() internal pure returns (uint256) {\r\n        return _maxPresaleGas;\r\n    }\r\n    function getBaseExpansionFactor() internal pure returns (uint256) {\r\n        return _baseExpansionFactor;\r\n    }\r\n    function getBaseContractionFactor() internal pure returns (uint256) {\r\n        return _baseContractionFactor;\r\n    }\r\n    function getBaseContractionCap() internal pure returns (uint256) {\r\n        return _baseContractionCap;\r\n    }\r\n    function getBaseUtilityFee() internal pure returns (uint256) {\r\n        return _baseUtilityFee;\r\n    }\r\n    function getStabilizerFee() internal pure returns (uint256) {\r\n        return _stabilizerFee;\r\n    }\r\n    function getStabilizationLowerBound() internal pure returns (uint256) {\r\n        return _stabilizationLowerBound;\r\n    }\r\n    function getStabilizationLowerReset() internal pure returns (uint256) {\r\n        return _stabilizationLowerReset;\r\n    }\r\n    function getStabilizationUpperBound() internal pure returns (uint256) {\r\n        return _stabilizationUpperBound;\r\n    }\r\n    function getStabilizationUpperReset() internal pure returns (uint256) {\r\n        return _stabilizationUpperReset;\r\n    }\r\n    function getStabilizePercent() internal pure returns (uint256) {\r\n        return _stabilizePercent;\r\n    }\r\n    function getTreasuryFee() internal pure returns (uint256) {\r\n        return _treasuryFee;\r\n    }\r\n    function getEpochLength() internal pure returns (uint256) {\r\n        return _epochLength;\r\n    }\r\n    function getLiquidityReward() internal pure returns (uint256) {\r\n        return _liquidityReward;\r\n    }\r\n    function getMinForLiquidity() internal pure returns (uint256) {\r\n        return _minForLiquidity;\r\n    }\r\n    function getMinForCallerLiquidity() internal pure returns (uint256) {\r\n        return _minForCallerLiquidity;\r\n    }\r\n    function getRouterAdd() internal pure returns (address) {\r\n        return _routerAddress;\r\n    }\r\n    function getFactoryAdd() internal pure returns (address) {\r\n        return _factoryAddress;\r\n    }\r\n    function getDeployerAdd() internal pure returns (address payable) {\r\n        return _deployerAddress;\r\n    }\r\n    function getTreasuryAdd() internal pure returns (address) {\r\n        return _treasuryAddress;\r\n    }\r\n    function getName() internal pure returns (string memory)  {\r\n        return _name;\r\n    }\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\ninterface IYFStable {\r\n    function isPresaleDone() external view returns (bool);\r\n    function mint(address to, uint256 amount) external;\r\n    function setPresaleDone() external payable;\r\n}\r\ncontract YFStablePresale is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IYFStable token;\r\n    // Presale stuff below\r\n    uint256 private _presaleMint;\r\n    uint256 public presaleTime = now;\r\n    uint256 public presalePrice;\r\n    mapping (address => uint256) private _presaleParticipation;\r\n    bool public presale = false;\r\n\r\n    constructor (address tokenAdd) public {\r\n        token = IYFStable(tokenAdd);\r\n        presaleTime;\r\n        presalePrice = Constants.getPresaleRate();\r\n    }\r\n\r\n    function setPresaleTime(uint256 time) external onlyOwner() {\r\n        require(token.isPresaleDone() == false, \"This cannot be modified after the presale is done\");\r\n        presaleTime = time;\r\n    }\r\n\r\n    function setPresaleFlag(bool flag) external onlyOwner() {\r\n        require(!token.isPresaleDone(), \"This cannot be modified after the presale is done\");\r\n        if (flag == true) {\r\n            require(presalePrice > 0, \"Sale price has to be greater than 0\");\r\n        }\r\n        presale = flag;\r\n    }\r\n    \r\n\r\n    function setPresalePrice(uint256 priceInWei) external onlyOwner() {\r\n        require(!presale && !token.isPresaleDone(),\"Can only be set before presale starts\");\r\n        presalePrice = priceInWei;\r\n    }\r\n\r\n    // Presale function\r\n    receive() external payable {\r\n        require(presale, \"Presale is inactive\");\r\n        require(!token.isPresaleDone(), \"Presale is already completed\");\r\n        require(presaleTime <= now, \"Presale hasn't started yet\");\r\n        uint256 invest = _presaleParticipation[_msgSender()].add(msg.value);\r\n        require(invest <= Constants.getPresaleMaxIndividualCap() && invest >= Constants.getPresaleMinIndividualCap(), \"Crossed individual cap\");\r\n        require(presalePrice != 0, \"Presale price is not set\");\r\n        require(msg.value > 1, \"Cannot buy without sending at least 1 eth mate!\");\r\n        require(!Address.isContract(_msgSender()),\"no contracts\");\r\n        require(tx.gasprice <= Constants.getMaxPresaleGas(),\"gas price above limit\");\r\n        uint256 amountToMint = msg.value.div(10**11).mul(presalePrice);\r\n        require(_presaleMint.add(amountToMint) <= Constants.getPresaleCap(), \"Presale max cap already reached\");\r\n        token.mint(_msgSender(),amountToMint);\r\n        _presaleParticipation[_msgSender()] = _presaleParticipation[_msgSender()].add(msg.value);\r\n        _presaleMint = _presaleMint.add(amountToMint);\r\n    }\r\n\r\n    function presaleDone() external onlyOwner() {\r\n        require(!token.isPresaleDone(), \"Presale is already completed\");\r\n        token.setPresaleDone{value:address(this).balance}();\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyOwner() {\r\n        require(!token.isPresaleDone(), \"Presale is already completed\");\r\n        _msgSender().transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setPresaleFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"YFStablePresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c39922971c1fedb5b18dd5d15a5424264c24d38a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fff745cb44b77e8d6a19a8139e414ad2ce964e27cc21747e0c74b1714673bc43"}]}