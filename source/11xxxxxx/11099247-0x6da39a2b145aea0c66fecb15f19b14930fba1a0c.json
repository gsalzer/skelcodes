{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n}\r\n\r\ncontract LcoreSale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSold;\r\n  ERC20 public Token;\r\n  address payable public owner;\r\n  uint256 public collectedETH;\r\n  uint256 public startDate;\r\n  bool private presaleClosed = false;\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender;\r\n    Token = ERC20(_wallet);\r\n  }\r\n\r\n  uint256 amount;\r\n \r\n  receive () external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(Token.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 50 ether);\r\n    require(!presaleClosed);\r\n\r\n    if (totalSold <= 2000) {\r\n       amount = msg.value.mul(10);\r\n    } else if(totalSold <= 3000) {\r\n       amount = msg.value.mul(4);\r\n    } else {\r\n       amount = msg.value.mul(20);\r\n       amount = amount.div(7);\r\n    }\r\n    \r\n    require(amount <= Token.balanceOf(address(this)));\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    Token.transfer(msg.sender, amount);\r\n  }\r\n\r\n  function contribute() external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(Token.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 50 ether);\r\n    require(!presaleClosed);\r\n     \r\n    if (totalSold <= 2000) {\r\n       amount = msg.value.mul(10);\r\n    } else if(totalSold <= 3000) {\r\n       amount = msg.value.mul(4);\r\n    } else {\r\n       amount = msg.value.mul(20);\r\n       amount = amount.div(7);\r\n    }\r\n    \r\n    require(amount <= Token.balanceOf(address(this)));\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    Token.transfer(msg.sender, amount);\r\n  }\r\n\r\n  function withdrawETH() public {\r\n    require(now.sub(startDate) >= 7 days || totalSold >= 3850);\r\n    require(msg.sender == owner);\r\n    require(presaleClosed == true);\r\n    owner.transfer(collectedETH);\r\n  }\r\n\r\n  function endPresale() public {\r\n    require(msg.sender == owner);\r\n    require(now.sub(startDate) >= 7 days || totalSold >= 3850);\r\n    presaleClosed = true;\r\n  }\r\n\r\n  function burn() public {\r\n    require(msg.sender == owner && Token.balanceOf(address(this)) > 0 && now.sub(startDate) >= 7 days);\r\n    Token.transfer(address(0), Token.balanceOf(address(this)));\r\n  }\r\n\r\n  function startSale() public {\r\n    require(msg.sender == owner && startDate == 0);\r\n    startDate = now;\r\n  }\r\n\r\n  function availableTokens() public view returns(uint256) {\r\n    return Token.balanceOf(address(this));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LcoreSale","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003540350cc04eefebbf6a4994f8b088fc94410008","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://45e9e77087a1bdab5f3fc731bd20a81e8f96bb444c0ed4dab9a1ad64297e8bf7"}]}