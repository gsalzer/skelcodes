{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LIZS is Ownable{\r\n    using SafeMath for uint;\r\n    uint256 public totalStake;\r\n    uint[5] public totalVipStake = [0,0,0,0,0];\r\n    uint32[5] public totalVipCount = [0,0,0,0,0];   //每个级别的VIP人数\r\n\r\n    uint256 public vipBuyPool;  //VIP买入池\r\n    uint256 public vipBuyPoolOut; //管理员已提取的eth\r\n    uint256 public stakePool;  //质押池\r\n    uint256 public stakeFee;  //退质押产生fee,归管理员\r\n    uint32 public currentVipCount;\r\n    uint32 public currentUserCount;\r\n    uint8  public governanceRate = 12;\r\n    uint public vipMaxStake = 32 ether;\r\n\r\n    mapping (address => uint8) public vipPowerMap;\r\n    mapping (address => address) public vipLevelToUp;\r\n    mapping (address => address[]) public vipLevelToDown;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint) public vipBuyProfit;\r\n\r\n    event NewOrAddVip(address indexed from, uint256 amount);\r\n    event VipLevelPro(address indexed from, address indexed to,uint256 amount, uint8 level);\r\n    event Deposit(address indexed from, uint256 amount);\r\n    event AddAdviser(address indexed down, address indexed up);\r\n    event Withdraw(address indexed to, uint256 value);\r\n    event GovWithdrawFee(address indexed to, uint256 value);\r\n    event GovWithdrawVipPool(address indexed to, uint256 value);\r\n\r\n    uint constant private minInvestmentLimit = 10 finney;\r\n    uint constant private vipBasePrice = 1 ether;\r\n    uint constant private vipExtraStakeRate = 10 ether; //每级VIP额外送算力\r\n\r\n    constructor()public {\r\n    }\r\n\r\n    function buyVipWithAdviser(address _adviser) public payable{\r\n        require(_adviser != address(0) , \"zero address input\");\r\n        if(vipPowerMap[msg.sender] == 0){\r\n            if( _adviser != msg.sender && isVip(_adviser)){\r\n                vipLevelToUp[msg.sender] = _adviser;\r\n                emit AddAdviser(msg.sender,_adviser);\r\n            }\r\n        }\r\n        buyVip();\r\n    }\r\n\r\n    function buyVip() public payable{\r\n        uint8 addP = uint8(msg.value/vipBasePrice);\r\n        uint8 oldP = vipPowerMap[msg.sender];\r\n        uint8 newP = oldP + addP;\r\n        require(newP > 0, \"vip level over min\");\r\n        require(newP <= 5, \"vip level over max\");\r\n        require(addP*vipBasePrice == msg.value, \"1 to 5 ether only\");\r\n\r\n        uint balance = balanceOf(msg.sender);\r\n        totalVipStake[newP-1] = totalVipStake[newP-1].add(balance);\r\n        totalVipCount[newP-1] = totalVipCount[newP-1] + 1;\r\n        if(oldP==0){\r\n            currentVipCount++;\r\n        }else{\r\n            totalVipStake[oldP-1] = totalVipStake[oldP-1].sub(balance);\r\n            totalVipCount[oldP-1] = totalVipCount[oldP-1] - 1;\r\n        }\r\n\r\n        vipBuyPool = vipBuyPool + msg.value;\r\n        vipPowerMap[msg.sender] = newP;\r\n        doVipLevelProfit(oldP);\r\n\r\n        emit NewOrAddVip(msg.sender, msg.value);\r\n    }\r\n    function doVipLevelProfit(uint8 oldP) private {\r\n        address current = msg.sender;\r\n        for(uint8 i = 1;i<=3;i++){\r\n            address upper = vipLevelToUp[current];\r\n            if(upper == address(0)){\r\n                return;\r\n            }\r\n            if(oldP == 0){\r\n                vipLevelToDown[upper].push(msg.sender);\r\n            }\r\n            uint profit = vipBasePrice.mul(3*i).div(100);\r\n            _balances[upper] = _balances[upper].add(profit);\r\n            vipBuyProfit[upper] = vipBuyProfit[upper].add(profit);\r\n\r\n            emit VipLevelPro(msg.sender,upper,profit,i);\r\n            current = upper;\r\n        }\r\n    }\r\n\r\n    function deposit() private {\r\n        require(msg.value > 0, \"!value\");\r\n        if(_balances[msg.sender] == 0){\r\n            require(msg.value >= minInvestmentLimit,\"!deposit limit\");\r\n            currentUserCount++;\r\n        }\r\n\r\n        totalStake = totalStake.add(msg.value);\r\n        uint8 vipPower = vipPowerMap[msg.sender];\r\n        if(vipPower > 0){\r\n            require(_balances[msg.sender].add(msg.value) < vipMaxStake);\r\n            totalVipStake[vipPower-1] = totalVipStake[vipPower-1].add(msg.value);\r\n        }\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\r\n        emit Deposit(msg.sender,msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n        require(_amount > 0, \"!value\");\r\n        uint reduceAmount = _amount;\r\n        if(governanceRate > 0){\r\n            reduceAmount = _amount.mul(100).div(100-governanceRate);\r\n            stakeFee = stakeFee.add(reduceAmount).sub(_amount);\r\n        }\r\n        _balances[msg.sender] = _balances[msg.sender].sub(reduceAmount, \"withdraw amount exceeds balance\");\r\n        totalStake = totalStake.sub(reduceAmount);\r\n\r\n        uint8 vipPower = vipPowerMap[msg.sender];\r\n        if(vipPower > 0){\r\n            totalVipStake[vipPower-1] = totalVipStake[vipPower-1] - reduceAmount;\r\n        }\r\n        msg.sender.transfer(_amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdrawFee(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        stakeFee = stakeFee.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdrawFee(msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdrawVipPool(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        vipBuyPoolOut = vipBuyPoolOut.add(_amount);\r\n        require(vipBuyPoolOut <= vipBuyPool, \"!vip pool limit\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdrawVipPool(msg.sender, _amount);\r\n    }\r\n\r\n    function changeRate(uint8 _rate)onlyOwner public {\r\n        require(100 > _rate, \"governanceRate big than 100\");\r\n        governanceRate = _rate;\r\n    }\r\n\r\n    function vitailk(uint _newMax)onlyOwner public {\r\n        vipMaxStake = _newMax;\r\n    }\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function isVip(address account) public view returns (bool) {\r\n        return vipPowerMap[account]>0;\r\n    }\r\n\r\n    function vipPower(address account) public view returns (uint) {\r\n        return vipPowerMap[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function vipBuySubCountOf(address account) public view returns (uint) {\r\n        return vipLevelToDown[account].length;\r\n    }\r\n\r\n    function vipBuyProfitOf(address account) public view returns (uint) {\r\n        return vipBuyProfit[account];\r\n    }\r\n\r\n    function totalPowerStake() public view returns (uint) {\r\n        uint vipAdd = 0;\r\n        for(uint8 i = 0;i<5;i++){\r\n            vipAdd = vipAdd+vipExtraStakeRate*totalVipCount[i]*(i+1);\r\n        }\r\n        return vipAdd+totalStake+totalVipStake[0]/10+totalVipStake[1]*2/10+totalVipStake[2]*3/10+totalVipStake[3]*4/10+totalVipStake[4]*5/10;\r\n    }\r\n\r\n    function powerStakeOf(address account) public view returns (uint) {\r\n        uint8 p = vipPowerMap[account];\r\n        return _balances[account]+_balances[account]*p/10+p*vipExtraStakeRate;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"down\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"}],\"name\":\"AddAdviser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawVipPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewOrAddVip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"VipLevelPro\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyVip\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adviser\",\"type\":\"address\"}],\"name\":\"buyVipWithAdviser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rate\",\"type\":\"uint8\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVipCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawVipPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governanceRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"powerStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPowerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalVipCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalVipStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipBuyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipBuyPoolOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBuyProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipBuyProfitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipBuySubCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipLevelToDown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipLevelToUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipMaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipPowerMap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"vitailk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LIZS","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://87646ad6fdaf563499a6425fbc20b8df8d507d23a15addc4b1eafed5d7572dd9"}]}