{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.1;\r\n\r\n// File: contracts/staking/StakingInterface.sol\r\n\r\ninterface StakingInterface {\r\n    function stake(address token, uint128 amount) external;\r\n\r\n    function withdraw(address token, uint128 amount) external;\r\n\r\n    function receiveReward(address token) external returns (uint256 rewards);\r\n\r\n    function changeStakeTarget(\r\n        address oldTarget,\r\n        address newTarget,\r\n        uint128 amount\r\n    ) external;\r\n\r\n    function getStakingTokenAddress() external view returns (address);\r\n\r\n    function getTokenInfo(address token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentTerm,\r\n            uint256 latestTerm,\r\n            uint256 totalRemainingRewards,\r\n            uint256 currentReward,\r\n            uint256 nextTermRewards,\r\n            uint128 currentStaking,\r\n            uint128 nextTermStaking\r\n        );\r\n\r\n    function getConfigs() external view returns (uint256 startTimestamp, uint256 termInterval);\r\n\r\n    function getStakingDestinations(address account) external view returns (address[] memory);\r\n\r\n    function getTermInfo(address token, uint256 term)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 stakeAdd,\r\n            uint128 stakeSum,\r\n            uint256 rewardSum\r\n        );\r\n\r\n    function getAccountInfo(address token, address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 userTerm,\r\n            uint256 stakeAmount,\r\n            uint128 nextAddedStakeAmount,\r\n            uint256 currentReward,\r\n            uint256 nextLatestTermUserRewards,\r\n            uint128 depositAmount,\r\n            uint128 withdrawableStakingAmount\r\n        );\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/staking/StakingVote.sol\r\n\r\n\r\ncontract StakingVote {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address internal _governanceAddress;\r\n    mapping(address => uint256) internal _voteNum;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event LogUpdateGovernanceAddress(address newAddress);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address governanceAddress) {\r\n        _governanceAddress = governanceAddress;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier isGovernance(address account) {\r\n        require(account == _governanceAddress, \"sender must be governance address\");\r\n        _;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice `_governanceAddress` can be updated by the current governance address.\r\n     * @dev Executed only once when initially set the governance address\r\n     * as the governance contract does not have the function to call this function.\r\n     */\r\n    function updateGovernanceAddress(address newGovernanceAddress)\r\n        external\r\n        isGovernance(msg.sender)\r\n    {\r\n        _governanceAddress = newGovernanceAddress;\r\n\r\n        emit LogUpdateGovernanceAddress(newGovernanceAddress);\r\n    }\r\n\r\n    function voteDeposit(address account, uint256 amount) external isGovernance(msg.sender) {\r\n        _updVoteSub(account, amount);\r\n    }\r\n\r\n    function voteWithdraw(address account, uint256 amount) external isGovernance(msg.sender) {\r\n        _updVoteAdd(account, amount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _updVoteAdd(address account, uint256 amount) internal {\r\n        require(_voteNum[account] + amount >= amount, \"overflow the amount of votes\");\r\n        _voteNum[account] += amount;\r\n    }\r\n\r\n    function _updVoteSub(address account, uint256 amount) internal {\r\n        require(_voteNum[account] >= amount, \"underflow the amount of votes\");\r\n        _voteNum[account] -= amount;\r\n    }\r\n\r\n    /* ========== CALL FUNCTIONS ========== */\r\n\r\n    function getGovernanceAddress() external view returns (address) {\r\n        return _governanceAddress;\r\n    }\r\n\r\n    function getVoteNum(address account) external view returns (uint256) {\r\n        return _voteNum[account];\r\n    }\r\n}\r\n\r\n// File: contracts/util/AddressList.sol\r\n\r\nlibrary AddressList {\r\n    /**\r\n     * @dev Inserts token address in addressList except for zero address.\r\n     */\r\n    function insert(address[] storage addressList, address token) internal {\r\n        if (token == address(0)) {\r\n            return;\r\n        }\r\n\r\n        for (uint256 i = 0; i < addressList.length; i++) {\r\n            if (addressList[i] == address(0)) {\r\n                addressList[i] = token;\r\n                return;\r\n            }\r\n        }\r\n\r\n        addressList.push(token);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes token address from addressList except for zero address.\r\n     */\r\n    function remove(address[] storage addressList, address token) internal returns (bool success) {\r\n        if (token == address(0)) {\r\n            return true;\r\n        }\r\n\r\n        for (uint256 i = 0; i < addressList.length; i++) {\r\n            if (addressList[i] == token) {\r\n                delete addressList[i];\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses included in addressList except for zero address.\r\n     */\r\n    function get(address[] storage addressList)\r\n        internal\r\n        view\r\n        returns (address[] memory denseAddressList)\r\n    {\r\n        uint256 numOfElements = 0;\r\n        for (uint256 i = 0; i < addressList.length; i++) {\r\n            if (addressList[i] != address(0)) {\r\n                numOfElements++;\r\n            }\r\n        }\r\n\r\n        denseAddressList = new address[](numOfElements);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < addressList.length; i++) {\r\n            if (addressList[i] != address(0)) {\r\n                denseAddressList[j] = addressList[i];\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/staking/StakingDestinations.sol\r\n\r\n\r\ncontract StakingDestinations {\r\n    using AddressList for address[];\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    /**\r\n     * @dev mapping from user address to staking token addresses\r\n     */\r\n    mapping(address => address[]) internal _stakingDestinations;\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @dev Inserts token address in _stakingDestinations[account] except for ETH (= address(0)).\r\n     */\r\n    function _addDestinations(address account, address token) internal {\r\n        return _stakingDestinations[account].insert(token);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes token address from _stakingDestinations[account] except for ETH (= address(0)).\r\n     */\r\n    function _removeDestinations(address account, address token) internal returns (bool success) {\r\n        return _stakingDestinations[account].remove(token);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses included in _stakingDestinations[account] except for zero address.\r\n     */\r\n    function _getStakingDestinations(address account) internal view returns (address[] memory) {\r\n        return _stakingDestinations[account].get();\r\n    }\r\n}\r\n\r\n// File: contracts/util/TransferETH.sol\r\n\r\ncontract TransferETH {\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice transfer `amount` ETH to the `recipient` account with emitting log\r\n     */\r\n    function _transferETH(\r\n        address payable recipient,\r\n        uint256 amount,\r\n        string memory errorMessage\r\n    ) internal {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, errorMessage);\r\n    }\r\n\r\n    function _transferETH(address payable recipient, uint256 amount) internal {\r\n        _transferETH(recipient, amount, \"Transfer amount exceeds balance\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/staking/Staking.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Staking is\r\n    StakingInterface,\r\n    ReentrancyGuard,\r\n    StakingVote,\r\n    StakingDestinations,\r\n    TransferETH\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n    using SafeCast for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== CONSTANT VARIABLES ========== */\r\n\r\n    address internal constant ETH_ADDRESS = address(0);\r\n    uint256 internal constant MAX_TERM = 1000;\r\n\r\n    IERC20 internal immutable _stakingToken;\r\n    uint256 internal immutable _startTimestamp; // timestamp of the term 0\r\n    uint256 internal immutable _termInterval; // time interval between terms in second\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    struct AccountInfo {\r\n        uint128 stakeAmount; // active stake amount of the user at userTerm\r\n        uint128 added; // the added amount of stake which will be merged to stakeAmount at the term+1.\r\n        uint256 userTerm; // the term when the user executed any function last time (all the terms before the term has been already settled)\r\n        uint256 rewards; // the total amount of rewards until userTerm\r\n    }\r\n\r\n    /**\r\n     * @dev token => account => data\r\n     */\r\n    mapping(address => mapping(address => AccountInfo)) internal _accountInfo;\r\n\r\n    struct TermInfo {\r\n        uint128 stakeAdd; // the total added amount of stake which will be merged to stakeSum at the term+1\r\n        uint128 stakeSum; // the total staking amount at the term\r\n        uint256 rewardSum; // the total amount of rewards at the term\r\n    }\r\n\r\n    /**\r\n     * @dev token => term => data\r\n     */\r\n    mapping(address => mapping(uint256 => TermInfo)) internal _termInfo;\r\n\r\n    mapping(address => uint256) internal _currentTerm; // (token => term); the current term (all the info prior to this term is fixed)\r\n    mapping(address => uint256) internal _totalRemainingRewards; // (token => amount); total unsettled amount of rewards\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(address indexed token, uint256 reward);\r\n    event Staked(address indexed token, address indexed account, uint128 amount);\r\n    event Withdrawn(address indexed token, address indexed account, uint128 amount);\r\n    event RewardPaid(address indexed token, address indexed account, uint256 reward);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address stakingTokenAddress,\r\n        address governance,\r\n        uint256 startTimestamp,\r\n        uint256 termInterval\r\n    ) StakingVote(governance) {\r\n        require(startTimestamp <= block.timestamp, \"startTimestamp should be past time\");\r\n        _stakingToken = IERC20(stakingTokenAddress);\r\n        _startTimestamp = startTimestamp;\r\n        _termInterval = termInterval;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    /**\r\n     * @dev Calc total rewards of the account until the current term.\r\n     */\r\n    modifier updateReward(address token, address account) {\r\n        AccountInfo memory accountInfo = _accountInfo[token][account];\r\n        uint256 startTerm = accountInfo.userTerm;\r\n        // When the loop count exceeds MAX_TERM, stop processing in order not to reach to the block gas limit\r\n        for (\r\n            uint256 term = accountInfo.userTerm;\r\n            term < _currentTerm[token] && term < startTerm + MAX_TERM;\r\n            term++\r\n        ) {\r\n            TermInfo memory termInfo = _termInfo[token][term];\r\n            if (termInfo.stakeSum != 0) {\r\n                accountInfo.rewards = accountInfo.rewards.add(\r\n                    accountInfo.stakeAmount.mul(termInfo.rewardSum).div(termInfo.stakeSum)\r\n                ); // `(your stake amount) / (total stake amount) * total rewards` in each term\r\n            }\r\n            accountInfo.stakeAmount = accountInfo.stakeAmount.add(accountInfo.added).toUint128();\r\n            accountInfo.added = 0;\r\n            accountInfo.userTerm = term + 1; // calculated until this term\r\n            if (accountInfo.stakeAmount == 0) {\r\n                accountInfo.userTerm = _currentTerm[token];\r\n                break; // skip unnecessary term\r\n            }\r\n        }\r\n        _accountInfo[token][account] = accountInfo;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the info up to the current term.\r\n     */\r\n    modifier updateTerm(address token) {\r\n        if (_currentTerm[token] < _getLatestTerm()) {\r\n            uint256 currentBalance = (token == ETH_ADDRESS)\r\n                ? address(this).balance\r\n                : IERC20(token).balanceOf(address(this));\r\n            uint256 nextRewardSum = currentBalance.sub(_totalRemainingRewards[token]);\r\n\r\n            TermInfo memory currentTermInfo = _termInfo[token][_currentTerm[token]];\r\n            uint128 nextStakeSum = currentTermInfo\r\n                .stakeSum\r\n                .add(currentTermInfo.stakeAdd)\r\n                .toUint128();\r\n            uint256 carriedReward = currentTermInfo.stakeSum == 0 ? currentTermInfo.rewardSum : 0; // if stakeSum is 0, carried forward until someone stakes\r\n            uint256 nextTerm = nextStakeSum == 0 ? _getLatestTerm() : _currentTerm[token] + 1; // if next stakeSum is 0, skip to latest term\r\n            _termInfo[token][nextTerm] = TermInfo({\r\n                stakeAdd: 0,\r\n                stakeSum: nextStakeSum,\r\n                rewardSum: nextRewardSum.add(carriedReward)\r\n            });\r\n\r\n            // write total stake amount since (nextTerm + 1) until _getLatestTerm()\r\n            if (nextTerm < _getLatestTerm()) {\r\n                // assert(_termInfo[token][nextTerm].stakeSum != 0 && _termInfo[token][nextTerm].stakeAdd == 0);\r\n                _termInfo[token][_getLatestTerm()] = TermInfo({\r\n                    stakeAdd: 0,\r\n                    stakeSum: nextStakeSum,\r\n                    rewardSum: 0\r\n                });\r\n            }\r\n\r\n            _totalRemainingRewards[token] = currentBalance; // total amount of unpaid reward\r\n            _currentTerm[token] = _getLatestTerm();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice Stake the staking token for the token to be paid as reward.\r\n     */\r\n    function stake(address token, uint128 amount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        updateTerm(token)\r\n        updateReward(token, msg.sender)\r\n    {\r\n        if (_accountInfo[token][msg.sender].userTerm < _currentTerm[token]) {\r\n            return;\r\n        }\r\n\r\n        require(amount != 0, \"staking amount should be positive number\");\r\n\r\n        _updVoteAdd(msg.sender, amount);\r\n        _stake(msg.sender, token, amount);\r\n        _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the staking token for the token to be paid as reward.\r\n     */\r\n    function withdraw(address token, uint128 amount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        updateTerm(token)\r\n        updateReward(token, msg.sender)\r\n    {\r\n        if (_accountInfo[token][msg.sender].userTerm < _currentTerm[token]) {\r\n            return;\r\n        }\r\n\r\n        require(amount != 0, \"withdrawing amount should be positive number\");\r\n\r\n        _updVoteSub(msg.sender, amount);\r\n        _withdraw(msg.sender, token, amount);\r\n        _stakingToken.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Receive the reward for your staking in the token.\r\n     */\r\n    function receiveReward(address token)\r\n        external\r\n        override\r\n        nonReentrant\r\n        updateTerm(token)\r\n        updateReward(token, msg.sender)\r\n        returns (uint256 rewards)\r\n    {\r\n        rewards = _accountInfo[token][msg.sender].rewards;\r\n        if (rewards != 0) {\r\n            _totalRemainingRewards[token] = _totalRemainingRewards[token].sub(rewards); // subtract the total unpaid reward\r\n            _accountInfo[token][msg.sender].rewards = 0;\r\n            if (token == ETH_ADDRESS) {\r\n                _transferETH(msg.sender, rewards);\r\n            } else {\r\n                IERC20(token).safeTransfer(msg.sender, rewards);\r\n            }\r\n            emit RewardPaid(token, msg.sender, rewards);\r\n        }\r\n    }\r\n\r\n    function changeStakeTarget(\r\n        address oldTarget,\r\n        address newTarget,\r\n        uint128 amount\r\n    )\r\n        external\r\n        override\r\n        nonReentrant\r\n        updateTerm(oldTarget)\r\n        updateReward(oldTarget, msg.sender)\r\n        updateTerm(newTarget)\r\n        updateReward(newTarget, msg.sender)\r\n    {\r\n        if (\r\n            _accountInfo[oldTarget][msg.sender].userTerm < _currentTerm[oldTarget] ||\r\n            _accountInfo[newTarget][msg.sender].userTerm < _currentTerm[newTarget]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        require(amount != 0, \"transfering amount should be positive number\");\r\n\r\n        _withdraw(msg.sender, oldTarget, amount);\r\n        _stake(msg.sender, newTarget, amount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _stake(\r\n        address account,\r\n        address token,\r\n        uint128 amount\r\n    ) internal {\r\n        AccountInfo memory accountInfo = _accountInfo[token][account];\r\n        if (accountInfo.stakeAmount == 0 && accountInfo.added == 0) {\r\n            _addDestinations(account, token);\r\n        }\r\n\r\n        _accountInfo[token][account].added = accountInfo.added.add(amount).toUint128(); // added when the term is shifted (the user)\r\n\r\n        uint256 term = _currentTerm[token];\r\n        _termInfo[token][term].stakeAdd = _termInfo[token][term].stakeAdd.add(amount).toUint128(); // added when the term is shifted (global)\r\n\r\n        emit Staked(token, account, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        address account,\r\n        address token,\r\n        uint128 amount\r\n    ) internal {\r\n        AccountInfo memory accountInfo = _accountInfo[token][account];\r\n        require(\r\n            accountInfo.stakeAmount.add(accountInfo.added) >= amount,\r\n            \"exceed withdrawable amount\"\r\n        );\r\n\r\n        if (accountInfo.stakeAmount + accountInfo.added == amount) {\r\n            _removeDestinations(account, token);\r\n        }\r\n\r\n        uint256 currentTerm = _currentTerm[token];\r\n        TermInfo memory termInfo = _termInfo[token][currentTerm];\r\n        if (accountInfo.added > amount) {\r\n            accountInfo.added -= amount;\r\n            termInfo.stakeAdd -= amount;\r\n        } else {\r\n            termInfo.stakeSum = termInfo.stakeSum.sub(amount - accountInfo.added).toUint128();\r\n            termInfo.stakeAdd = termInfo.stakeAdd.sub(accountInfo.added).toUint128();\r\n            accountInfo.stakeAmount = accountInfo\r\n                .stakeAmount\r\n                .sub(amount - accountInfo.added)\r\n                .toUint128();\r\n            accountInfo.added = 0;\r\n        }\r\n\r\n        _accountInfo[token][account] = accountInfo;\r\n        _termInfo[token][currentTerm] = termInfo;\r\n\r\n        emit Withdrawn(token, account, amount);\r\n    }\r\n\r\n    function _getNextTermReward(address token) internal view returns (uint256 rewards) {\r\n        // as the term at current+1 has not been settled\r\n        uint256 currentBalance = (token == ETH_ADDRESS)\r\n            ? address(this).balance\r\n            : IERC20(token).balanceOf(address(this));\r\n        return\r\n            (currentBalance > _totalRemainingRewards[token])\r\n                ? currentBalance - _totalRemainingRewards[token]\r\n                : 0;\r\n    }\r\n\r\n    function _getLatestTerm() internal view returns (uint256) {\r\n        return (block.timestamp - _startTimestamp) / _termInterval;\r\n    }\r\n\r\n    /* ========== CALL FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @return stakingTokenAddress is the token locked for staking\r\n     */\r\n    function getStakingTokenAddress() external view override returns (address stakingTokenAddress) {\r\n        return address(_stakingToken);\r\n    }\r\n\r\n    /**\r\n     * @return startTimestamp is the time when this contract was deployed\r\n     * @return termInterval is the duration of a term\r\n     */\r\n    function getConfigs()\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 startTimestamp, uint256 termInterval)\r\n    {\r\n        startTimestamp = _startTimestamp;\r\n        termInterval = _termInterval;\r\n    }\r\n\r\n    /**\r\n     * @return the ERC20 token addresses in staking\r\n     */\r\n    function getStakingDestinations(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        return _getStakingDestinations(account);\r\n    }\r\n\r\n    /**\r\n     * @param token is the token address to stake for\r\n     * @return currentTerm is the current latest term\r\n     * @return latestTerm is the potential latest term\r\n     * @return totalRemainingRewards is the as-of remaining rewards\r\n     * @return currentReward is the total rewards at the current term\r\n     * @return nextTermRewards is the as-of total rewards to be paid at the next term\r\n     * @return currentStaking is the total active staking amount\r\n     * @return nextTermStaking is the total staking amount\r\n     */\r\n    function getTokenInfo(address token)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 currentTerm,\r\n            uint256 latestTerm,\r\n            uint256 totalRemainingRewards,\r\n            uint256 currentReward,\r\n            uint256 nextTermRewards,\r\n            uint128 currentStaking,\r\n            uint128 nextTermStaking\r\n        )\r\n    {\r\n        currentTerm = _currentTerm[token];\r\n        latestTerm = _getLatestTerm();\r\n        totalRemainingRewards = _totalRemainingRewards[token];\r\n        currentReward = _termInfo[token][currentTerm].rewardSum;\r\n        nextTermRewards = _getNextTermReward(token);\r\n        TermInfo memory termInfo = _termInfo[token][_currentTerm[token]];\r\n        currentStaking = termInfo.stakeSum;\r\n        nextTermStaking = termInfo.stakeSum.add(termInfo.stakeAdd).toUint128();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns _termInfo[token][term].\r\n     */\r\n    function getTermInfo(address token, uint256 term)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint128 stakeAdd,\r\n            uint128 stakeSum,\r\n            uint256 rewardSum\r\n        )\r\n    {\r\n        TermInfo memory termInfo = _termInfo[token][term];\r\n        stakeAdd = termInfo.stakeAdd;\r\n        stakeSum = termInfo.stakeSum;\r\n        if (term == _currentTerm[token] + 1) {\r\n            rewardSum = _getNextTermReward(token);\r\n        } else {\r\n            rewardSum = termInfo.rewardSum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return userTerm is the latest term the user has updated to\r\n     * @return stakeAmount is the latest amount of staking from the user has updated to\r\n     * @return nextAddedStakeAmount is the next amount of adding to stake from the user has updated to\r\n     * @return currentReward is the latest reward getting by the user has updated to\r\n     * @return nextLatestTermUserRewards is the as-of user rewards to be paid at the next term\r\n     * @return depositAmount is the staking amount\r\n     * @return withdrawableStakingAmount is the withdrawable staking amount\r\n     */\r\n    function getAccountInfo(address token, address account)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 userTerm,\r\n            uint256 stakeAmount,\r\n            uint128 nextAddedStakeAmount,\r\n            uint256 currentReward,\r\n            uint256 nextLatestTermUserRewards,\r\n            uint128 depositAmount,\r\n            uint128 withdrawableStakingAmount\r\n        )\r\n    {\r\n        AccountInfo memory accountInfo = _accountInfo[token][account];\r\n        userTerm = accountInfo.userTerm;\r\n        stakeAmount = accountInfo.stakeAmount;\r\n        nextAddedStakeAmount = accountInfo.added;\r\n        currentReward = accountInfo.rewards;\r\n        uint256 currentTerm = _currentTerm[token];\r\n        TermInfo memory termInfo = _termInfo[token][currentTerm];\r\n        uint256 nextLatestTermRewards = _getNextTermReward(token);\r\n        nextLatestTermUserRewards = termInfo.stakeSum.add(termInfo.stakeAdd) == 0\r\n            ? 0\r\n            : nextLatestTermRewards.mul(accountInfo.stakeAmount.add(accountInfo.added)) /\r\n                (termInfo.stakeSum + termInfo.stakeAdd);\r\n        depositAmount = accountInfo.stakeAmount.add(accountInfo.added).toUint128();\r\n        uint128 availableForVoting = _voteNum[account].toUint128();\r\n        withdrawableStakingAmount = depositAmount < availableForVoting\r\n            ? depositAmount\r\n            : availableForVoting;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LogUpdateGovernanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"changeStakeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"nextAddedStakeAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"currentReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextLatestTermUserRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawableStakingAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakingDestinations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"getTermInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakeAdd\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stakeSum\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rewardSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRemainingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTermRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentStaking\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nextTermStaking\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVoteNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"receiveReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceAddress\",\"type\":\"address\"}],\"name\":\"updateGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staking","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"0000000000000000000000009d5a091da8f69c7bcf3542c1e04264fab646ab47000000000000000000000000a5d3097a1e68defc72619e2e51f3b66236a71fd8000000000000000000000000000000000000000000000000000000005fc6d9000000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2e4af2a7afdccb0d1c4207bda02edb410269f6321baa3683ef732ce92d25398"}]}