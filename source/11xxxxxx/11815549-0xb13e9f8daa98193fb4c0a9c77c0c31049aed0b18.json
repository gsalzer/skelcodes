{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.1;\n\n// Global Enums and Structs\n\n\n\nstruct LockAmount{\n        uint unlockTime;\n        uint amount;\n    }\n\n// Part: IERC20\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n}\n\n// Part: ITun\n\ninterface ITun {\n    function borPledgeInfo(address user) external view returns (uint);\n    function lockInfo(address user, uint index) external view returns (LockAmount memory);\n    function userLockLength(address account) external view returns (uint);\n}\n\n// Part: IUniswapV2Pair\n\ninterface IUniswapV2Pair {\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\n// File: BoringDAOVotingShare.sol\n\ncontract BoringDAOVotingShare {\n    IERC20 constant bor = IERC20(0x3c9d6c1C73b31c837832c72E04D3152f051fc1A9);    \n    ITun constant tunnel = ITun(0x258a1eb6537Ae84Cf612f06B557B6d53f49cC9A1);\n\n    IUniswapV2Pair constant uniBor = IUniswapV2Pair(0xc9ca10d36441B5b45d5E63480139105f037972e0);\n    IUniswapV2Pair constant sushiBor = IUniswapV2Pair(0x44D34985826578e5ba24ec78c93bE968549BB918);\n\n\n    \n    function decimals() external pure returns (uint8) {\n        return uint8(18);\n    }\n\n    function name() external pure returns (string memory) {\n        return \"BoringDAO Voting Share\";\n    }\n\n    function symbol() external pure returns (string memory) {\n        return \"BoringDAO VS\";\n    }\n\n    function totalSupply() external view returns (uint) {\n        return bor.totalSupply();\n    }\n\n    function uni(address account) public view returns (uint) {\n        (uint112 borAmount,,) = uniBor.getReserves();\n        uint lpAccount = uniBor.balanceOf(account);\n        uint lpTotal = uniBor.totalSupply();\n        return uint(borAmount) * lpAccount / lpTotal;\n    }\n\n    function sushi(address account) public view returns (uint) {\n        (uint112 borAmount,,) = sushiBor.getReserves();\n        uint lpAccount = sushiBor.balanceOf(account);\n        uint lpTotal = sushiBor.totalSupply();\n        return uint(borAmount) * lpAccount / lpTotal;\n    }\n\n    function tunnelBor(address _voter) public view returns (uint) {\n        uint bor2 = tunnel.borPledgeInfo(_voter);\n        uint lock;\n        uint unlock;\n        for (uint i; i < tunnel.userLockLength(_voter); i++) {\n            if(block.timestamp >= tunnel.lockInfo(_voter,i).unlockTime) {\n                unlock = unlock + tunnel.lockInfo(_voter, i).amount;\n            } else {\n                lock = lock + tunnel.lockInfo(_voter, i).amount;\n            }\n        }\n        return bor2+lock+unlock;\n    }\n\n    function balanceOf(address _voter) external view returns (uint) {\n        uint bor1 = bor.balanceOf(_voter) / 2;\n        uint bor2 = tunnelBor(_voter);\n        uint bor3 = uni(_voter);\n        uint bor4 = sushi(_voter);\n\n        return bor1+bor2+bor3+bor4;\n    }\n\n    constructor() {}\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"tunnelBor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BoringDAOVotingShare","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}