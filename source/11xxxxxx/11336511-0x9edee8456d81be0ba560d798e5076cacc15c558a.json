{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DevTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract DevTreasury is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Developer wallet\\n    address payable public devWallet;\\n\\n    /// @dev SDVD contract address\\n    address public sdvd;\\n\\n    /// @dev Uniswap router\\n    IUniswapV2Router02 uniswapRouter;\\n\\n    /// @dev Uniswap factory\\n    IUniswapV2Factory uniswapFactory;\\n\\n    /// @dev WETH address\\n    address weth;\\n\\n    /// @dev Uniswap LP address\\n    address public pairAddress;\\n\\n    /// @notice Release balance every 1 hour to dev wallet\\n    uint256 public releaseThreshold = 1 hours;\\n\\n    /// @dev Last release timestamp\\n    uint256 public releaseTime;\\n\\n    constructor (address _uniswapRouter, address _sdvd) public {\\n        // Set dev wallet\\n        devWallet = msg.sender;\\n        // Set uniswap router\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        // Set uniswap factory\\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\\n        // Get weth address\\n        weth = uniswapRouter.WETH();\\n        // Set SDVD address\\n        sdvd = _sdvd;\\n        // Approve uniswap router to spend sdvd\\n        IERC20(sdvd).approve(_uniswapRouter, uint256(- 1));\\n        // Set initial release time\\n        releaseTime = block.timestamp;\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    function init() external onlyOwner {\\n        // Get pair address after init because we wait until pair created in lord of coin\\n        pairAddress = uniswapFactory.getPair(sdvd, weth);\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Release SDVD to market regardless the price so dev doesn't own any SDVD from 0.5% fee.\\n    /// This is to protect SDVD holders.\\n    function release() external {\\n        _release();\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    function _release() internal {\\n        if (releaseTime.add(releaseThreshold) <= block.timestamp) {\\n            // Update release time\\n            releaseTime = block.timestamp;\\n\\n            // Get SDVD balance\\n            uint256 sdvdBalance = IERC20(sdvd).balanceOf(address(this));\\n\\n            // If there is SDVD in this contract\\n            // and there is enough liquidity to swap\\n            if (sdvdBalance > 0 && IERC20(sdvd).balanceOf(pairAddress) >= sdvdBalance) {\\n                address[] memory path = new address[](2);\\n                path[0] = sdvd;\\n                path[1] = weth;\\n\\n                // Swap SDVD to ETH on uniswap\\n                // uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\n                uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    sdvdBalance,\\n                    0,\\n                    path,\\n                    devWallet,\\n                    block.timestamp.add(30 minutes)\\n                );\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/TradingTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ILordOfCoin.sol\\\";\\nimport \\\"./interfaces/IBPool.sol\\\";\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract TradingTreasury is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Received(address indexed from, uint256 amount);\\n\\n    /// @dev Lord of coin address\\n    address public controller;\\n\\n    /// @dev Uniswap router\\n    IUniswapV2Router02 uniswapRouter;\\n\\n    /// @dev Uniswap factory\\n    IUniswapV2Factory uniswapFactory;\\n\\n    /// @dev Balancer pool WETH-MUSD\\n    address balancerPool;\\n\\n    /// @dev WETH address\\n    address weth;\\n\\n    /// @dev mUSD contract address\\n    address musd;\\n\\n    /// @dev SDVD contract address\\n    address public sdvd;\\n\\n    /// @dev Uniswap LP address\\n    address public pairAddress;\\n\\n    /// @notice Release balance as sharing pool profit every 1 hour\\n    uint256 public releaseThreshold = 1 hours;\\n\\n    /// @dev Last release timestamp\\n    uint256 public releaseTime;\\n\\n    constructor (address _uniswapRouter, address _balancerPool, address _sdvd, address _musd) public {\\n        // Set uniswap router\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        // Set uniswap factory\\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\\n        // Get weth address\\n        weth = uniswapRouter.WETH();\\n        // Set balancer pool\\n        balancerPool = _balancerPool;\\n        // Set SDVD address\\n        sdvd = _sdvd;\\n        // Set mUSD address\\n        musd = _musd;\\n        // Approve uniswap to spend SDVD\\n        IERC20(sdvd).approve(_uniswapRouter, uint256(- 1));\\n        // Approve balancer to spend WETH\\n        IERC20(weth).approve(balancerPool, uint256(- 1));\\n        // Set initial release time\\n        releaseTime = block.timestamp;\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    function init(address _controller) external onlyOwner {\\n        // Set Lord of coin address\\n        controller = _controller;\\n        // Get pair address\\n        pairAddress = ILordOfCoin(controller).sdvdEthPairAddress();\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Release SDVD to be added as profit\\n    function release() external {\\n        _release();\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    function _release() internal {\\n        if (releaseTime.add(releaseThreshold) <= block.timestamp) {\\n            // Update release time\\n            releaseTime = block.timestamp;\\n\\n            // Get SDVD balance\\n            uint256 sdvdBalance = IERC20(sdvd).balanceOf(address(this));\\n\\n            // If there is SDVD in this contract\\n            // and there is enough liquidity to swap\\n            if (sdvdBalance > 0 && IERC20(sdvd).balanceOf(pairAddress) >= sdvdBalance) {\\n                // Use uniswap since this contract is registered as no fee address for swapping SDVD to ETH\\n                // Swap path\\n                address[] memory path = new address[](2);\\n                path[0] = sdvd;\\n                path[1] = weth;\\n\\n                // Swap SDVD to ETH on uniswap\\n                // uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\n                uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    sdvdBalance,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp.add(30 minutes)\\n                );\\n\\n                // Get all ETH in this contract\\n                uint256 ethAmount = address(this).balance;\\n\\n                // Convert ETH to WETH\\n                IWETH(weth).deposit{ value: ethAmount }();\\n                // Swap WETH to mUSD\\n                (uint256 musdAmount,) = IBPool(balancerPool).swapExactAmountIn(weth, ethAmount, musd, 0, uint256(-1));\\n                // Send it to Lord of Coin\\n                IERC20(musd).safeTransfer(controller, musdAmount);\\n                // Deposit profit\\n                ILordOfCoin(controller).depositTradingProfit(musdAmount);\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILordOfCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILordOfCoin {\\n\\n    function marketOpenTime() external view returns (uint256);\\n\\n    function dvd() external view returns (address);\\n\\n    function sdvd() external view returns (address);\\n\\n    function sdvdEthPairAddress() external view returns (address);\\n\\n    function buy(uint256 musdAmount) external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function buyTo(address recipient, uint256 musdAmount) external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function buyFromETH() payable external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function sell(uint256 dvdAmount) external returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function sellTo(address recipient, uint256 dvdAmount) external returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function sellToETH(uint256 dvdAmount) external returns (uint256 returnedETH, uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\\n\\n    function claimDividend() external returns (uint256 net, uint256 fee);\\n\\n    function claimDividendTo(address recipient) external returns (uint256 net, uint256 fee);\\n\\n    function claimDividendETH() external returns (uint256 net, uint256 fee, uint256 receivedETH);\\n\\n    function checkSnapshot() external;\\n\\n    function releaseTreasury() external;\\n\\n    function depositTradingProfit(uint256 amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IBPool {\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function isBound(address t) external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function getFinalTokens() external view returns (address[] memory tokens);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function getNormalizedWeight(address token) external view returns (uint);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function setSwapFee(uint swapFee) external;\\n\\n    function setController(address manager) external;\\n\\n    function setPublicSwap(bool public_) external;\\n\\n    function finalize() external;\\n\\n    function bind(address token, uint balance, uint denorm) external;\\n\\n    function rebind(address token, uint balance, uint denorm) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\\n\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\\n\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        address tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint maxAmountIn,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    ) external returns (uint poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    ) external returns (uint tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    ) external returns (uint tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    ) external returns (uint poolAmountIn);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address whom) external view returns (uint);\\n\\n    function allowance(address src, address dst) external view returns (uint);\\n\\n    function approve(address dst, uint amt) external returns (bool);\\n\\n    function transfer(address dst, uint amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src, address dst, uint amt\\n    ) external returns (bool);\\n\\n    function calcSpotPrice(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint swapFee\\n    ) external returns (uint spotPrice);\\n\\n    function calcOutGivenIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    ) external returns (uint tokenAmountOut);\\n\\n    function calcInGivenOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    ) external returns (uint tokenAmountIn);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    ) external returns (uint poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    ) external returns (uint tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    ) external returns (uint tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    ) external returns (uint poolAmountIn);\\n\\n}\"\r\n    },\r\n    \"contracts/LordOfCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport './interfaces/IERC20Snapshot.sol';\\nimport './interfaces/ITreasury.sol';\\nimport './interfaces/IVault.sol';\\nimport './interfaces/IMasset.sol';\\nimport './interfaces/IDvd.sol';\\nimport './interfaces/ISDvd.sol';\\nimport './interfaces/IPool.sol';\\nimport './interfaces/IBPool.sol';\\nimport './utils/MathUtils.sol';\\n\\n/// @title Lord of Coin\\n/// @notice Lord of Coin finds the money, for you - to spend it.\\n/// @author Lord Nami\\n// Special thanks to TRIB as inspiration.\\n// Special thanks to Lord Nami mods @AspieJames, @defimoon, @tectumor, @downsin, @ghost, @LordFes, @converge, @cryptycreepy, @cryptpower, @jonsnow\\n// and everyone else who support this project by spreading the words on social media.\\ncontract LordOfCoin is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Bought(address indexed sender, address indexed recipient, uint256 musdAmount, uint256 dvdReceived);\\n    event Sold(address indexed sender, address indexed recipient, uint256 dvdAmount, uint256 musdReceived);\\n    event SoldToETH(address indexed sender, address indexed recipient, uint256 dvdAmount, uint256 ethReceived);\\n\\n    event DividendClaimed(address indexed recipient, uint256 musdReceived);\\n    event DividendClaimedETH(address indexed recipient, uint256 ethReceived);\\n    event Received(address indexed from, uint256 amount);\\n\\n    /// @notice Applied to every buy or sale of DVD.\\n    /// @dev Tax denominator\\n    uint256 public constant CURVE_TAX_DENOMINATOR = 10;\\n\\n    /// @notice Applied to every buy of DVD before bonding curve tax.\\n    /// @dev Tax denominator\\n    uint256 public constant BUY_TAX_DENOMINATOR = 20;\\n\\n    /// @notice Applied to every sale of DVD after bonding curve tax.\\n    /// @dev Tax denominator\\n    uint256 public constant SELL_TAX_DENOMINATOR = 10;\\n\\n    /// @notice The slope of the bonding curve.\\n    uint256 public constant DIVIDER = 1000000; // 1 / multiplier 0.000001 (so that we don't deal with decimals)\\n\\n    /// @notice Address in which DVD are sent to be burned.\\n    /// These DVD can't be redeemed by the reserve.\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @dev Uniswap router\\n    IUniswapV2Router02 uniswapRouter;\\n\\n    /// @dev WETH token address\\n    address weth;\\n\\n    /// @dev Balancer pool WETH-MUSD\\n    address balancerPool;\\n\\n    /// @dev mUSD token mStable address.\\n    address musd;\\n\\n    /// @notice Dvd token instance.\\n    address public dvd;\\n\\n    /// @notice SDvd token instance.\\n    address public sdvd;\\n\\n    /// @notice Pair address for SDVD-ETH on uniswap\\n    address public sdvdEthPairAddress;\\n\\n    /// @notice SDVD-ETH farming pool.\\n    address public sdvdEthPool;\\n\\n    /// @notice DVD farming pool.\\n    address public dvdPool;\\n\\n    /// @notice Dev treasury.\\n    address public devTreasury;\\n\\n    /// @notice Pool treasury.\\n    address public poolTreasury;\\n\\n    /// @notice Trading treasury.\\n    address public tradingTreasury;\\n\\n    /// @notice Total dividend earned since the contract deployment.\\n    uint256 public totalDividendClaimed;\\n\\n    /// @notice Total reserve value that backs all DVD in circulation.\\n    /// @dev Area below the bonding curve.\\n    uint256 public totalReserve;\\n\\n    /// @notice Interface for integration with mStable.\\n    address public vault;\\n\\n    /// @notice Current state of the application.\\n    /// Either already open (true) or not yet (false).\\n    bool public isMarketOpen = false;\\n\\n    /// @notice Market will be open on this timestamp\\n    uint256 public marketOpenTime;\\n\\n    /// @notice Current snapshot id\\n    /// Can be thought as week index, since snapshot is increased per week\\n    uint256 public snapshotId;\\n\\n    /// @notice Snapshot timestamp.\\n    uint256 public snapshotTime;\\n\\n    /// @notice Snapshot duration.\\n    uint256 public SNAPSHOT_DURATION = 1 weeks;\\n\\n    /// @dev Total profits on each snapshot id.\\n    mapping(uint256 => uint256) private _totalProfitSnapshots;\\n\\n    /// @dev Dividend paying SDVD supply on each snapshot id.\\n    mapping(uint256 => uint256) private _dividendPayingSDVDSupplySnapshots;\\n\\n    /// @dev Flag to determine if account has claim their dividend on each snapshot id.\\n    mapping(address => mapping(uint256 => bool)) private _isDividendClaimedSnapshots;\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _uniswapRouter,\\n        address _balancerPool,\\n        address _dvd,\\n        address _sdvd,\\n        address _sdvdEthPool,\\n        address _dvdPool,\\n        address _devTreasury,\\n        address _poolTreasury,\\n        address _tradingTreasury,\\n        uint256 _marketOpenTime\\n    ) public {\\n        // Set vault\\n        vault = _vault;\\n        // mUSD instance\\n        musd = IVault(vault).musd();\\n        // Approve vault to manage mUSD in this contract\\n        _approveMax(musd, vault);\\n\\n        // Set uniswap router\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        // Set balancer pool\\n        balancerPool = _balancerPool;\\n\\n        // Set weth address\\n        weth = uniswapRouter.WETH();\\n\\n        // Approve balancer pool to manage mUSD in this contract\\n        _approveMax(musd, balancerPool);\\n        // Approve balancer pool to manage WETH in this contract\\n        _approveMax(weth, balancerPool);\\n        // Approve self to spend mUSD in this contract (used to buy from ETH / sell to ETH)\\n        _approveMax(musd, address(this));\\n\\n        dvd = _dvd;\\n        sdvd = _sdvd;\\n        sdvdEthPool = _sdvdEthPool;\\n        dvdPool = _dvdPool;\\n        devTreasury = _devTreasury;\\n        poolTreasury = _poolTreasury;\\n        tradingTreasury = _tradingTreasury;\\n\\n        // Create SDVD ETH pair\\n        sdvdEthPairAddress = IUniswapV2Factory(uniswapRouter.factory()).createPair(sdvd, weth);\\n\\n        // Set open time\\n        marketOpenTime = _marketOpenTime;\\n        // Set initial snapshot timestamp\\n        snapshotTime = _marketOpenTime;\\n    }\\n\\n    /* ========== Modifier ========== */\\n\\n    modifier marketOpen() {\\n        require(isMarketOpen, 'Market not open');\\n        _;\\n    }\\n\\n    modifier onlyTradingTreasury() {\\n        require(msg.sender == tradingTreasury, 'Only treasury');\\n        _;\\n    }\\n\\n    /* ========== Trading Treasury Only ========== */\\n\\n    /// @notice Deposit trading profit to vault\\n    function depositTradingProfit(uint256 amount) external onlyTradingTreasury {\\n        // Deposit mUSD to vault\\n        IVault(vault).deposit(amount);\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Exchanges mUSD to DVD.\\n    /// @dev mUSD to be exchanged needs to be approved first.\\n    /// @param musdAmount mUSD amount to be exchanged.\\n    function buy(uint256 musdAmount) external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        return _buy(msg.sender, msg.sender, musdAmount);\\n    }\\n\\n    /// @notice Exchanges mUSD to DVD.\\n    /// @dev mUSD to be exchanged needs to be approved first.\\n    /// @param recipient Recipient of DVD token.\\n    /// @param musdAmount mUSD amount to be exchanged.\\n    function buyTo(address recipient, uint256 musdAmount) external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        return _buy(msg.sender, recipient, musdAmount);\\n    }\\n\\n    /// @notice Exchanges ETH to DVD.\\n    function buyFromETH() payable external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        return _buy(address(this), msg.sender, _swapETHToMUSD(address(this), msg.value));\\n    }\\n\\n    /// @notice Exchanges DVD to mUSD.\\n    /// @param dvdAmount DVD amount to be exchanged.\\n    function sell(uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        return _sell(msg.sender, msg.sender, dvdAmount);\\n    }\\n\\n    /// @notice Exchanges DVD to mUSD.\\n    /// @param recipient Recipient of mUSD.\\n    /// @param dvdAmount DVD amount to be exchanged.\\n    function sellTo(address recipient, uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        return _sell(msg.sender, recipient, dvdAmount);\\n    }\\n\\n    /// @notice Exchanges DVD to ETH.\\n    /// @param dvdAmount DVD amount to be exchanged.\\n    function sellToETH(uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedETH, uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        // Sell DVD and receive mUSD in this contract\\n        (returnedMUSD, marketTax, curveTax, taxedDVD) = _sell(msg.sender, address(this), dvdAmount);\\n        // Swap received mUSD dividend for ether and send it back to sender\\n        returnedETH = _swapMUSDToETH(msg.sender, returnedMUSD);\\n\\n        emit SoldToETH(msg.sender, msg.sender, dvdAmount, returnedETH);\\n    }\\n\\n    /// @notice Claim dividend in mUSD.\\n    function claimDividend() external nonReentrant marketOpen returns (uint256 dividend) {\\n        return _claimDividend(msg.sender, msg.sender);\\n    }\\n\\n    /// @notice Claim dividend in mUSD.\\n    /// @param recipient Recipient of mUSD.\\n    function claimDividendTo(address recipient) external nonReentrant marketOpen returns (uint256 dividend) {\\n        return _claimDividend(msg.sender, recipient);\\n    }\\n\\n    /// @notice Claim dividend in ETH.\\n    function claimDividendETH() external nonReentrant marketOpen returns (uint256 dividend, uint256 receivedETH) {\\n        // Claim dividend to this contract\\n        dividend = _claimDividend(msg.sender, address(this));\\n        // Swap received mUSD dividend for ether and send it back to sender\\n        receivedETH = _swapMUSDToETH(msg.sender, dividend);\\n\\n        emit DividendClaimedETH(msg.sender, receivedETH);\\n    }\\n\\n    /// @notice Check if we need to create new snapshot.\\n    function checkSnapshot() public {\\n        if (isMarketOpen) {\\n            // If time has passed for 1 week since last snapshot\\n            // and market is open\\n            if (snapshotTime.add(SNAPSHOT_DURATION) <= block.timestamp) {\\n                // Update snapshot timestamp\\n                snapshotTime = block.timestamp;\\n                // Take new snapshot\\n                snapshotId = ISDvd(sdvd).snapshot();\\n                // Save the interest\\n                _totalProfitSnapshots[snapshotId] = totalProfit();\\n                // Save dividend paying supply\\n                _dividendPayingSDVDSupplySnapshots[snapshotId] = dividendPayingSDVDSupply();\\n            }\\n            // If something wrong / there is no interest, lets try again.\\n            if (snapshotId > 0 && _totalProfitSnapshots[snapshotId] == 0) {\\n                _totalProfitSnapshots[snapshotId] = totalProfit();\\n            }\\n        }\\n    }\\n\\n    /// @notice Release treasury.\\n    function releaseTreasury() public {\\n        if (isMarketOpen) {\\n            ITreasury(devTreasury).release();\\n            ITreasury(poolTreasury).release();\\n            ITreasury(tradingTreasury).release();\\n        }\\n    }\\n\\n    /* ========== View ========== */\\n\\n    /// @notice Get claimable dividend for address.\\n    /// @param account Account address.\\n    /// @return dividend Dividend in mUSD.\\n    function claimableDividend(address account) public view returns (uint256 dividend) {\\n        // If there is no snapshot or already claimed\\n        if (snapshotId == 0 || isDividendClaimedAt(account, snapshotId)) {\\n            return 0;\\n        }\\n\\n        // Get sdvd balance at snapshot\\n        uint256 sdvdBalance = IERC20Snapshot(sdvd).balanceOfAt(account, snapshotId);\\n        if (sdvdBalance == 0) {\\n            return 0;\\n        }\\n\\n        // Get dividend in mUSD based on SDVD balance\\n        dividend = sdvdBalance\\n        .mul(claimableProfitAt(snapshotId))\\n        .div(dividendPayingSDVDSupplyAt(snapshotId));\\n    }\\n\\n    /// @notice Total mUSD that is now forever locked in the protocol.\\n    function totalLockedReserve() external view returns (uint256) {\\n        return _calculateReserveFromSupply(dvdBurnedAmount());\\n    }\\n\\n    /// @notice Total claimable profit.\\n    /// @return Total claimable profit in mUSD.\\n    function claimableProfit() public view returns (uint256) {\\n        return totalProfit().div(2);\\n    }\\n\\n    /// @notice Total claimable profit in snapshot.\\n    /// @return Total claimable profit in mUSD.\\n    function claimableProfitAt(uint256 _snapshotId) public view returns (uint256) {\\n        return totalProfitAt(_snapshotId).div(2);\\n    }\\n\\n    /// @notice Total profit.\\n    /// @return Total profit in MUSD.\\n    function totalProfit() public view returns (uint256) {\\n        uint256 vaultBalance = IVault(vault).getBalance();\\n        // Sometimes mStable returns a value lower than the\\n        // deposit because their exchange rate gets updated after the deposit.\\n        if (vaultBalance < totalReserve) {\\n            vaultBalance = totalReserve;\\n        }\\n        return vaultBalance.sub(totalReserve);\\n    }\\n\\n    /// @notice Total profit in snapshot.\\n    /// @param _snapshotId Snapshot id.\\n    /// @return Total profit in MUSD.\\n    function totalProfitAt(uint256 _snapshotId) public view returns (uint256) {\\n        return _totalProfitSnapshots[_snapshotId];\\n    }\\n\\n    /// @notice Check if dividend already claimed by account.\\n    /// @return Is dividend claimed.\\n    function isDividendClaimedAt(address account, uint256 _snapshotId) public view returns (bool) {\\n        return _isDividendClaimedSnapshots[account][_snapshotId];\\n    }\\n\\n    /// @notice Total supply of DVD. This includes burned DVD.\\n    /// @return Total supply of DVD in wei.\\n    function dvdTotalSupply() public view returns (uint256) {\\n        return IERC20(dvd).totalSupply();\\n    }\\n\\n    /// @notice Total DVD that have been burned.\\n    /// @dev These DVD are still in circulation therefore they\\n    /// are still considered on the bonding curve formula.\\n    /// @return Total burned DVD in wei.\\n    function dvdBurnedAmount() public view returns (uint256) {\\n        return IERC20(dvd).balanceOf(BURN_ADDRESS);\\n    }\\n\\n    /// @notice DVD price in wei according to the bonding curve formula.\\n    /// @return Current DVD price in wei.\\n    function dvdPrice() external view returns (uint256) {\\n        // price = supply * multiplier\\n        return dvdTotalSupply().roundedDiv(DIVIDER);\\n    }\\n\\n    /// @notice DVD price floor in wei according to the bonding curve formula.\\n    /// @return Current DVD price floor in wei.\\n    function dvdPriceFloor() external view returns (uint256) {\\n        return dvdBurnedAmount().roundedDiv(DIVIDER);\\n    }\\n\\n    /// @notice Total supply of Dividend-paying SDVD.\\n    /// @return Total supply of SDVD in wei.\\n    function dividendPayingSDVDSupply() public view returns (uint256) {\\n        // Get total supply\\n        return IERC20(sdvd).totalSupply()\\n        // Get sdvd in uniswap pair balance\\n        .sub(IERC20(sdvd).balanceOf(sdvdEthPairAddress))\\n        // Get sdvd in SDVD-ETH pool\\n        .sub(IERC20(sdvd).balanceOf(sdvdEthPool))\\n        // Get sdvd in DVD pool\\n        .sub(IERC20(sdvd).balanceOf(dvdPool))\\n        // Get sdvd in pool treasury\\n        .sub(IERC20(sdvd).balanceOf(poolTreasury))\\n        // Get sdvd in dev treasury\\n        .sub(IERC20(sdvd).balanceOf(devTreasury))\\n        // Get sdvd in trading treasury\\n        .sub(IERC20(sdvd).balanceOf(tradingTreasury));\\n    }\\n\\n    /// @notice Total supply of Dividend-paying SDVD in snapshot.\\n    /// @return Total supply of SDVD in wei.\\n    function dividendPayingSDVDSupplyAt(uint256 _snapshotId) public view returns (uint256) {\\n        return _dividendPayingSDVDSupplySnapshots[_snapshotId];\\n    }\\n\\n    /// @notice Calculates the amount of DVD in exchange for reserve after applying bonding curve tax.\\n    /// @param reserveAmount Reserve value in wei to use in the conversion.\\n    /// @return Token amount in wei after the 10% tax has been applied.\\n    function reserveToDVDTaxed(uint256 reserveAmount) external view returns (uint256) {\\n        if (reserveAmount == 0) {\\n            return 0;\\n        }\\n        uint256 tax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\\n        uint256 totalDVD = reserveToDVD(reserveAmount);\\n        uint256 taxedDVD = reserveToDVD(tax);\\n        return totalDVD.sub(taxedDVD);\\n    }\\n\\n    /// @notice Calculates the amount of reserve in exchange for DVD after applying bonding curve tax.\\n    /// @param tokenAmount Token value in wei to use in the conversion.\\n    /// @return Reserve amount in wei after the 10% tax has been applied.\\n    function dvdToReserveTaxed(uint256 tokenAmount) external view returns (uint256) {\\n        if (tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 reserveAmount = dvdToReserve(tokenAmount);\\n        uint256 tax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\\n        return reserveAmount.sub(tax);\\n    }\\n\\n    /// @notice Calculates the amount of DVD in exchange for reserve.\\n    /// @param reserveAmount Reserve value in wei to use in the conversion.\\n    /// @return Token amount in wei.\\n    function reserveToDVD(uint256 reserveAmount) public view returns (uint256) {\\n        return _calculateReserveToDVD(reserveAmount, totalReserve, dvdTotalSupply());\\n    }\\n\\n    /// @notice Calculates the amount of reserve in exchange for DVD.\\n    /// @param tokenAmount Token value in wei to use in the conversion.\\n    /// @return Reserve amount in wei.\\n    function dvdToReserve(uint256 tokenAmount) public view returns (uint256) {\\n        return _calculateDVDToReserve(tokenAmount, dvdTotalSupply(), totalReserve);\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice Check if market can be opened\\n    function _checkOpenMarket() internal {\\n        require(marketOpenTime <= block.timestamp, 'Market not open');\\n        if (!isMarketOpen) {\\n            // Set flag\\n            isMarketOpen = true;\\n        }\\n    }\\n\\n    /// @notice Exchanges mUSD to DVD.\\n    /// @dev mUSD to be exchanged needs to be approved first.\\n    /// @param sender Address that has mUSD token.\\n    /// @param recipient Address that will receive DVD token.\\n    /// @param musdAmount mUSD amount to be exchanged.\\n    function _buy(address sender, address recipient, uint256 musdAmount) internal returns (uint256 returnedDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        _checkOpenMarket();\\n        checkSnapshot();\\n        releaseTreasury();\\n\\n        require(musdAmount > 0, 'Cannot buy 0');\\n\\n        // Tax to be included as profit\\n        marketTax = musdAmount.div(BUY_TAX_DENOMINATOR);\\n        // Get amount after market tax\\n        uint256 inAmount = musdAmount.sub(marketTax);\\n\\n        // Calculate bonding curve tax in mUSD\\n        curveTax = inAmount.div(CURVE_TAX_DENOMINATOR);\\n\\n        // Convert mUSD amount to DVD amount\\n        uint256 totalDVD = reserveToDVD(inAmount);\\n        // Convert tax to DVD amount\\n        taxedDVD = reserveToDVD(curveTax);\\n        // Calculate DVD for recipient\\n        returnedDVD = totalDVD.sub(taxedDVD);\\n\\n        // Transfer mUSD from sender to this contract\\n        IERC20(musd).safeTransferFrom(sender, address(this), musdAmount);\\n\\n        // Deposit mUSD to vault\\n        IVault(vault).deposit(musdAmount);\\n        // Increase mUSD total reserve\\n        totalReserve = totalReserve.add(inAmount);\\n\\n        // Send taxed DVD to burn address\\n        IDvd(dvd).mint(BURN_ADDRESS, taxedDVD);\\n        // Increase recipient DVD balance\\n        IDvd(dvd).mint(recipient, returnedDVD);\\n        // Increase user DVD Shareholder point\\n        IDvd(dvd).increaseShareholderPoint(recipient, returnedDVD);\\n\\n        emit Bought(sender, recipient, musdAmount, returnedDVD);\\n    }\\n\\n    /// @notice Exchanges DVD to mUSD.\\n    /// @param sender Address that has DVD token.\\n    /// @param recipient Address that will receive mUSD token.\\n    /// @param dvdAmount DVD amount to be exchanged.\\n    function _sell(address sender, address recipient, uint256 dvdAmount) internal returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\\n        checkSnapshot();\\n        releaseTreasury();\\n\\n        require(dvdAmount <= IERC20(dvd).balanceOf(sender), 'Insufficient balance');\\n        require(dvdAmount > 0, 'Cannot sell 0');\\n        require(IDvd(dvd).shareholderPointOf(sender) >= dvdAmount, 'Insufficient shareholder points');\\n\\n        // Convert number of DVD amount that user want to sell to mUSD amount\\n        uint256 reserveAmount = dvdToReserve(dvdAmount);\\n        // Calculate tax in mUSD\\n        curveTax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\\n        // Make sure fee is enough\\n        require(curveTax >= 1, 'Insufficient tax');\\n\\n        // Get net amount\\n        uint256 net = reserveAmount.sub(curveTax);\\n\\n        // Calculate taxed DVD\\n        taxedDVD = _calculateReserveToDVD(\\n            curveTax,\\n            totalReserve.sub(reserveAmount),\\n            dvdTotalSupply().sub(dvdAmount)\\n        );\\n\\n        // Tax to be included as profit\\n        marketTax = net.div(SELL_TAX_DENOMINATOR);\\n        // Get musd amount for recipient\\n        returnedMUSD = net.sub(marketTax);\\n\\n        // Decrease total reserve\\n        totalReserve = totalReserve.sub(net);\\n\\n        // Reduce user DVD balance\\n        IDvd(dvd).burn(sender, dvdAmount);\\n        // Send taxed DVD to burn address\\n        IDvd(dvd).mint(BURN_ADDRESS, taxedDVD);\\n        // Decrease sender DVD Shareholder point\\n        IDvd(dvd).decreaseShareholderPoint(sender, dvdAmount);\\n\\n        // Redeem mUSD from vault\\n        IVault(vault).redeem(returnedMUSD);\\n        // Send mUSD to recipient\\n        IERC20(musd).safeTransfer(recipient, returnedMUSD);\\n\\n        emit Sold(sender, recipient, dvdAmount, returnedMUSD);\\n    }\\n\\n    /// @notice Claim dividend in mUSD.\\n    /// @param sender Address that has SDVD token.\\n    /// @param recipient Address that will receive mUSD dividend.\\n    function _claimDividend(address sender, address recipient) internal returns (uint256 dividend) {\\n        checkSnapshot();\\n        releaseTreasury();\\n\\n        // Get dividend in mUSD based on SDVD balance\\n        dividend = claimableDividend(sender);\\n        require(dividend > 0, 'No dividend');\\n\\n        // Set dividend as claimed\\n        _isDividendClaimedSnapshots[sender][snapshotId] = true;\\n\\n        // Redeem mUSD from vault\\n        IVault(vault).redeem(dividend);\\n        // Send dividend mUSD to user\\n        IERC20(musd).safeTransfer(recipient, dividend);\\n\\n        emit DividendClaimed(recipient, dividend);\\n    }\\n\\n    /// @notice Swap ETH to mUSD in this contract.\\n    /// @param amount ETH amount.\\n    /// @return musdAmount returned mUSD amount.\\n    function _swapETHToMUSD(address recipient, uint256 amount) internal returns (uint256 musdAmount) {\\n        // Convert ETH to WETH\\n        IWETH(weth).deposit{ value: amount }();\\n        // Swap WETH to mUSD\\n        (musdAmount,) = IBPool(balancerPool).swapExactAmountIn(weth, amount, musd, 0, uint256(-1));\\n        // Send mUSD\\n        if (recipient != address(this)) {\\n            IERC20(musd).safeTransfer(recipient, musdAmount);\\n        }\\n    }\\n\\n    /// @notice Swap mUSD to ETH in this contract.\\n    /// @param amount mUSD Amount.\\n    /// @return ethAmount returned ETH amount.\\n    function _swapMUSDToETH(address recipient, uint256 amount) internal returns (uint256 ethAmount) {\\n        // Swap mUSD to WETH\\n        (ethAmount,) = IBPool(balancerPool).swapExactAmountIn(musd, amount, weth, 0, uint256(-1));\\n        // Convert WETH to ETH\\n        IWETH(weth).withdraw(ethAmount);\\n        // Send ETH\\n        if (recipient != address(this)) {\\n            payable(recipient).transfer(ethAmount);\\n        }\\n    }\\n\\n    /// @notice Approve maximum value to spender\\n    function _approveMax(address tkn, address spender) internal {\\n        uint256 max = uint256(- 1);\\n        IERC20(tkn).safeApprove(spender, max);\\n    }\\n\\n    /**\\n     * Supply (s), reserve (r) and token price (p) are in a relationship defined by the bonding curve:\\n     *      p = m * s\\n     * The reserve equals to the area below the bonding curve\\n     *      r = s^2 / 2\\n     * The formula for the supply becomes\\n     *      s = sqrt(2 * r / m)\\n     *\\n     * In solidity computations, we are using divider instead of multiplier (because its an integer).\\n     * All values are decimals with 18 decimals (represented as uints), which needs to be compensated for in\\n     * multiplications and divisions\\n     */\\n\\n    /// @notice Computes the increased supply given an amount of reserve.\\n    /// @param _reserveDelta The amount of reserve in wei to be used in the calculation.\\n    /// @param _totalReserve The current reserve state to be used in the calculation.\\n    /// @param _supply The current supply state to be used in the calculation.\\n    /// @return _supplyDelta token amount in wei.\\n    function _calculateReserveToDVD(\\n        uint256 _reserveDelta,\\n        uint256 _totalReserve,\\n        uint256 _supply\\n    ) internal pure returns (uint256 _supplyDelta) {\\n        uint256 _reserve = _totalReserve;\\n        uint256 _newReserve = _reserve.add(_reserveDelta);\\n        // s = sqrt(2 * r / m)\\n        uint256 _newSupply = MathUtils.sqrt(\\n            _newReserve\\n            .mul(2)\\n            .mul(DIVIDER) // inverse the operation (Divider instead of multiplier)\\n            .mul(1e18) // compensation for the squared unit\\n        );\\n\\n        _supplyDelta = _newSupply.sub(_supply);\\n    }\\n\\n    /// @notice Computes the decrease in reserve given an amount of DVD.\\n    /// @param _supplyDelta The amount of DVD in wei to be used in the calculation.\\n    /// @param _supply The current supply state to be used in the calculation.\\n    /// @param _totalReserve The current reserve state to be used in the calculation.\\n    /// @return _reserveDelta Reserve amount in wei.\\n    function _calculateDVDToReserve(\\n        uint256 _supplyDelta,\\n        uint256 _supply,\\n        uint256 _totalReserve\\n    ) internal pure returns (uint256 _reserveDelta) {\\n        require(_supplyDelta <= _supply, 'Token amount must be less than the supply');\\n\\n        uint256 _newSupply = _supply.sub(_supplyDelta);\\n        uint256 _newReserve = _calculateReserveFromSupply(_newSupply);\\n        _reserveDelta = _totalReserve.sub(_newReserve);\\n    }\\n\\n    /// @notice Calculates reserve given a specific supply.\\n    /// @param _supply The token supply in wei to be used in the calculation.\\n    /// @return _reserve Reserve amount in wei.\\n    function _calculateReserveFromSupply(uint256 _supply) internal pure returns (uint256 _reserve) {\\n        // r = s^2 * m / 2\\n        _reserve = _supply\\n        .mul(_supply)\\n        .div(DIVIDER) // inverse the operation (Divider instead of multiplier)\\n        .div(2)\\n        .roundedDiv(1e18);\\n        // correction of the squared unit\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Snapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IERC20Snapshot {\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ITreasury {\\n\\n    function release() external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IVault {\\n\\n    function savingsContract() external view returns (address);\\n\\n    function musd() external view returns (address);\\n\\n    function deposit(uint256) external;\\n\\n    function redeem(uint256) external;\\n\\n    function getBalance() external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { MassetStructs } from \\\"./MassetStructs.sol\\\";\\n\\n///\\n/// @title IMasset\\n/// @dev   (Internal) Interface for interacting with Masset\\n///       VERSION: 1.0\\n///       DATE:    2020-05-05\\n\\ninterface IMasset is MassetStructs {\\n\\n    /// @dev Calc interest\\n    function collectInterest() external returns (uint256 massetMinted, uint256 newTotalSupply);\\n\\n    /// @dev Minting\\n    function mint(address _basset, uint256 _bassetQuantity)\\n        external returns (uint256 massetMinted);\\n    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\\n        external returns (uint256 massetMinted);\\n    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\\n        external returns (uint256 massetMinted);\\n\\n    /// @dev Swapping\\n    function swap( address _input, address _output, uint256 _quantity, address _recipient)\\n        external returns (uint256 output);\\n    function getSwapOutput( address _input, address _output, uint256 _quantity)\\n        external view returns (bool, string memory, uint256 output);\\n\\n    /// @dev Redeeming\\n    function redeem(address _basset, uint256 _bassetQuantity)\\n        external returns (uint256 massetRedeemed);\\n    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\\n        external returns (uint256 massetRedeemed);\\n    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\\n        external returns (uint256 massetRedeemed);\\n    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\\n\\n    /// @dev Setters for the Manager or Gov to update module info\\n    function upgradeForgeValidator(address _newForgeValidator) external;\\n\\n    /// @dev Setters for Gov to set system params\\n    function setSwapFee(uint256 _swapFee) external;\\n\\n    /// @dev Getters\\n    function getBasketManager() external view returns(address);\\n    function forgeValidator() external view returns (address);\\n    function totalSupply() external view returns (uint256);\\n    function swapFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDvd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IDvd is IERC20 {\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function increaseShareholderPoint(address account, uint256 amount) external;\\n\\n    function decreaseShareholderPoint(address account, uint256 amount) external;\\n\\n    function shareholderPointOf(address account) external view returns (uint256);\\n\\n    function totalShareholderPoint() external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISDvd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ISDvd is IERC20 {\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function setMinter(address account, bool value) external;\\n\\n    function setNoFeeAddress(address account, bool value) external;\\n\\n    function setPairAddress(address _pairAddress) external;\\n\\n    function snapshot() external returns (uint256);\\n\\n    function syncPairTokenTotalSupply() external returns (bool isPairTokenBurned);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IPool {\\n\\n    function openFarm() external;\\n\\n    function distributeBonusRewards(uint256 amount) external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function stakeTo(address recipient, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawTo(address recipient, uint256 amount) external;\\n\\n    function claimReward() external;\\n\\n    function claimRewardTo(address recipient) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16 <0.7.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n\\n    /// @notice Calculates the square root of a given value.\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n\\n    /// @notice Rounds a division result.\\n    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'div by 0');\\n\\n        uint256 halfB = (b.mod(2) == 0) ? (b.div(2)) : (b.div(2).add(1));\\n        return (a.mod(b) >= halfB) ? (a.div(b).add(1)) : (a.div(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MassetStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n//\\n// @title   MassetStructs\\n// @author  Stability Labs Pty. Ltd.\\n// @notice  Structs used in the Masset contract and associated Libs\\n\\ninterface MassetStructs {\\n\\n    // Stores high level basket info\\n    struct Basket {\\n\\n        // Array of Bassets currently active\\n        Basset[] bassets;\\n\\n        // Max number of bAssets that can be present in any Basket\\n        uint8 maxBassets;\\n\\n        // Some bAsset is undergoing re-collateralisation\\n        bool undergoingRecol;\\n\\n        //\\n        // In the event that we do not raise enough funds from the auctioning of a failed Basset,\\n        // The Basket is deemed as failed, and is undercollateralised to a certain degree.\\n        // The collateralisation ratio is used to calc Masset burn rate.\\n        \\n        bool failed;\\n        uint256 collateralisationRatio;\\n\\n    }\\n\\n    // Stores bAsset info. The struct takes 5 storage slots per Basset\\n    struct Basset {\\n\\n        // Address of the bAsset\\n        address addr;\\n\\n        // Status of the basset, \\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\\n\\n        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\\n        bool isTransferFeeCharged; // takes a byte in storage\\n\\n        //\\n        // 1 Basset * ratio / ratioScale == x Masset (relative value)\\n        //      If ratio == 10e8 then 1 bAsset = 10 mAssets\\n        //      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\n        \\n        uint256 ratio;\\n\\n        // Target weights of the Basset (100% == 1e18)\\n        uint256 maxWeight;\\n\\n        // Amount of the Basset that is held in Collateral\\n        uint256 vaultBalance;\\n\\n    }\\n\\n    // Status of the Basset - has it broken its peg?\\n    enum BassetStatus {\\n        Default,\\n        Normal,\\n        BrokenBelowPeg,\\n        BrokenAbovePeg,\\n        Blacklisted,\\n        Liquidating,\\n        Liquidated,\\n        Failed\\n    }\\n\\n    // Internal details on Basset\\n    struct BassetDetails {\\n        Basset bAsset;\\n        address integrator;\\n        uint8 index;\\n    }\\n\\n    // All details needed to Forge with multiple bAssets\\n    struct ForgePropsMulti {\\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\\n        Basset[] bAssets;\\n        address[] integrators;\\n        uint8[] indexes;\\n    }\\n\\n    // All details needed for proportionate Redemption\\n    struct RedeemPropsMulti {\\n        uint256 colRatio;\\n        Basset[] bAssets;\\n        address[] integrators;\\n        uint8[] indexes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LordLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport './MathUtils.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nlibrary LordLib {\\n\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n\\n    /// @notice The slope of the bonding curve.\\n    uint256 public constant DIVIDER = 1000000; // 1 / multiplier 0.000001 (so that we don't deal with decimals)\\n\\n    /**\\n     * Supply (s), reserve (r) and token price (p) are in a relationship defined by the bonding curve:\\n     *      p = m * s\\n     * The reserve equals to the area below the bonding curve\\n     *      r = s^2 / 2\\n     * The formula for the supply becomes\\n     *      s = sqrt(2 * r / m)\\n     *\\n     * In solidity computations, we are using divider instead of multiplier (because its an integer).\\n     * All values are decimals with 18 decimals (represented as uints), which needs to be compensated for in\\n     * multiplications and divisions\\n     */\\n\\n    /// @notice Computes the increased supply given an amount of reserve.\\n    /// @param _reserveDelta The amount of reserve in wei to be used in the calculation.\\n    /// @param _totalReserve The current reserve state to be used in the calculation.\\n    /// @param _supply The current supply state to be used in the calculation.\\n    /// @return token amount in wei.\\n    function calculateReserveToTokens(\\n        uint256 _reserveDelta,\\n        uint256 _totalReserve,\\n        uint256 _supply\\n    ) internal pure returns (uint256) {\\n        uint256 _reserve = _totalReserve;\\n        uint256 _newReserve = _reserve.add(_reserveDelta);\\n        // s = sqrt(2 * r / m)\\n        uint256 _newSupply = MathUtils.sqrt(\\n            _newReserve\\n            .mul(2)\\n            .mul(DIVIDER) // inverse the operation (Divider instead of multiplier)\\n            .mul(1e18) // compensation for the squared unit\\n        );\\n\\n        uint256 _supplyDelta = _newSupply.sub(_supply);\\n        return _supplyDelta;\\n    }\\n\\n    /// @notice Computes the decrease in reserve given an amount of tokens.\\n    /// @param _supplyDelta The amount of tokens in wei to be used in the calculation.\\n    /// @param _supply The current supply state to be used in the calculation.\\n    /// @param _totalReserve The current reserve state to be used in the calculation.\\n    /// @return Reserve amount in wei.\\n    function calculateTokensToReserve(\\n        uint256 _supplyDelta,\\n        uint256 _supply,\\n        uint256 _totalReserve\\n    ) internal pure returns (uint256) {\\n        require(_supplyDelta <= _supply, 'Token amount must be less than the supply');\\n\\n        uint256 _newSupply = _supply.sub(_supplyDelta);\\n\\n        uint256 _newReserve = calculateReserveFromSupply(_newSupply);\\n\\n        uint256 _reserveDelta = _totalReserve.sub(_newReserve);\\n\\n        return _reserveDelta;\\n    }\\n\\n    /// @notice Calculates reserve given a specific supply.\\n    /// @param _supply The token supply in wei to be used in the calculation.\\n    /// @return Reserve amount in wei.\\n    function calculateReserveFromSupply(uint256 _supply) internal pure returns (uint256) {\\n        // r = s^2 * m / 2\\n        uint256 _reserve = _supply\\n        .mul(_supply)\\n        .div(DIVIDER) // inverse the operation (Divider instead of multiplier)\\n        .div(2);\\n\\n        return _reserve.roundedDiv(1e18);\\n        // correction of the squared unit\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport './interfaces/IVault.sol';\\nimport './interfaces/IMStable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract Vault is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event FundMigration(uint256 value);\\n\\n    /// @notice mStable governance proxy contract.\\n    /// It should not change.\\n    address public nexusGovernance;\\n\\n    /// @notice mStable savingsContract contract.\\n    /// It can be changed through governance.\\n    address public savingsContract;\\n\\n    /// @notice mUSD address.\\n    address public musd;\\n\\n    /// @notice LoC address\\n    address public controller;\\n\\n    constructor(address _musd, address _nexus) public {\\n        // Set mUSD address\\n        musd = _musd;\\n        // Set nexus governance address\\n        nexusGovernance = _nexus;\\n        // Get mStable savings contract\\n        savingsContract = _fetchMStableSavings();\\n        // Approve savings contract to spend mUSD on this contract\\n        _approveMax(musd, savingsContract);\\n    }\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyController {\\n        require(msg.sender == controller, 'Controller only');\\n        _;\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    /// @notice Setup for the first time after deploy and renounce ownership immediately.\\n    function init(address _controller) external onlyOwner {\\n        // Set Lord of coin\\n        controller = _controller;\\n\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Controller Only ========== */\\n\\n    /// @notice Deposits reserve into savingsAccount.\\n    /// @dev It is part of Vault's interface.\\n    /// @param amount Value to be deposited.\\n    function deposit(uint256 amount) external onlyController {\\n        require(amount > 0, 'Cannot deposit 0');\\n\\n        // Transfer mUSD from sender to this contract\\n        IERC20(musd).safeTransferFrom(msg.sender, address(this), amount);\\n        // Send to savings account\\n        IMStable(savingsContract).depositSavings(amount);\\n    }\\n\\n    /// @notice Redeems reserve from savingsAccount.\\n    /// @dev It is part of Vault's interface.\\n    /// @param amount Value to be redeemed.\\n    function redeem(uint256 amount) external onlyController {\\n        require(amount > 0, 'Cannot redeem 0');\\n\\n        // Redeem the amount in credits\\n        uint256 credited = IMStable(savingsContract).redeem(_getRedeemInput(amount));\\n        // Send credited amount to sender\\n        IERC20(musd).safeTransfer(msg.sender, credited);\\n    }\\n\\n    /* ========== View ========== */\\n\\n    /// @notice Returns balance in reserve from the savings contract.\\n    /// @dev It is part of Vault's interface.\\n    /// @return balance Reserve amount in the savings contract.\\n    function getBalance() public view returns (uint256 balance) {\\n        // Get balance in credits amount\\n        balance = IMStable(savingsContract).creditBalances(address(this));\\n        // Convert credits to reserve amount\\n        if (balance > 0) {\\n            balance = balance.mul(IMStable(savingsContract).exchangeRate()).div(1e18);\\n        }\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Allows anyone to migrate all reserve to new savings contract.\\n    /// @dev Only use if the savingsContract has been changed by governance.\\n    function migrateSavings() external {\\n        address currentSavingsContract = _fetchMStableSavings();\\n        require(currentSavingsContract != savingsContract, 'Already on latest contract');\\n        _swapSavingsContract();\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice Convert amount to mStable credits amount for redeem.\\n    function _getRedeemInput(uint256 amount) internal view returns (uint256 credits) {\\n        // Add 1 because the amounts always round down\\n        // e.g. i have 51 credits, e4 10 = 20.4\\n        // to withdraw 20 i need 20*10/4 = 50 + 1\\n        credits = amount.mul(1e18).div(IMStable(savingsContract).exchangeRate()).add(1);\\n    }\\n\\n    /// @notice Approve spender to max.\\n    function _approveMax(address token, address spender) internal {\\n        uint256 max = uint256(- 1);\\n        IERC20(token).safeApprove(spender, max);\\n    }\\n\\n    /// @notice Gets the current mStable Savings Contract address.\\n    /// @return address of mStable Savings Contract.\\n    function _fetchMStableSavings() internal view returns (address) {\\n        address manager = IMStable(nexusGovernance).getModule(keccak256('SavingsManager'));\\n        return IMStable(manager).savingsContracts(musd);\\n    }\\n\\n    /// @notice Worker function that swaps the reserve to a new savings contract.\\n    function _swapSavingsContract() internal {\\n        // Get all savings balance\\n        uint256 balance = getBalance();\\n        // Redeem the amount in credits\\n        uint256 credited = IMStable(savingsContract).redeem(_getRedeemInput(balance));\\n\\n        // Get new savings contract\\n        savingsContract = _fetchMStableSavings();\\n        // Approve new savings contract as mUSD spender\\n        _approveMax(musd, savingsContract);\\n\\n        // Send to new savings account\\n        IMStable(savingsContract).depositSavings(credited);\\n\\n        // Emit event\\n        emit FundMigration(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMStable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IMStable {\\n    // Nexus\\n    function getModule(bytes32) external view returns (address);\\n\\n    // Savings Manager\\n    function savingsContracts(address) external view returns (address);\\n\\n    // Savings Contract\\n    function exchangeRate() external view returns (uint256);\\n\\n    function creditBalances(address) external view returns (uint256);\\n\\n    function depositSavings(uint256) external;\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function depositInterest(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/SDvd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Snapshot.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/ILordOfCoin.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract SDvd is ERC20Snapshot, Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    /// @notice Minter address. DVD-ETH Pool, DVD Pool.\\n    mapping(address => bool) public minters;\\n    /// @dev No fee address. SDVD-ETH Pool, DVD Pool.\\n    mapping(address => bool) public noFeeAddresses;\\n    /// @notice Lord of Coin\\n    address public controller;\\n\\n    address public devTreasury;\\n    address public poolTreasury;\\n    address public tradingTreasury;\\n\\n    /// @dev SDVD-ETH pair address\\n    address public pairAddress;\\n    /// @dev SDVD-ETH pair token\\n    IUniswapV2Pair pairToken;\\n    /// @dev Used to check LP removal\\n    uint256 lastPairTokenTotalSupply;\\n\\n    constructor() public ERC20('Stock dvd.finance', 'SDVD') {\\n    }\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyMinter {\\n        require(minters[msg.sender], 'Minter only');\\n        _;\\n    }\\n\\n    modifier onlyController {\\n        require(msg.sender == controller, 'Controller only');\\n        _;\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    /// @notice Setup for the first time after deploy and renounce ownership immediately\\n    function init(\\n        address _controller,\\n        address _pairAddress,\\n        address _sdvdEthPool,\\n        address _dvdPool,\\n        address _devTreasury,\\n        address _poolTreasury,\\n        address _tradingTreasury\\n    ) external onlyOwner {\\n        controller = _controller;\\n\\n        // Create uniswap pair for SDVD-ETH pool\\n        pairAddress = _pairAddress;\\n        // Set pair token\\n        pairToken = IUniswapV2Pair(pairAddress);\\n\\n        devTreasury = _devTreasury;\\n        poolTreasury = _poolTreasury;\\n        tradingTreasury = _tradingTreasury;\\n\\n        // Add pools as SDVD minter\\n        _setMinter(_sdvdEthPool, true);\\n        _setMinter(_dvdPool, true);\\n\\n        // Add no fees address\\n        _setNoFeeAddress(_sdvdEthPool, true);\\n        _setNoFeeAddress(_dvdPool, true);\\n        _setNoFeeAddress(devTreasury, true);\\n        _setNoFeeAddress(poolTreasury, true);\\n        _setNoFeeAddress(tradingTreasury, true);\\n\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Minter Only ========== */\\n\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    /* ========== Controller Only ========== */\\n\\n    function snapshot() external onlyController returns (uint256) {\\n        return _snapshot();\\n    }\\n\\n    /* ========== Public ========== */\\n\\n    function syncPairTokenTotalSupply() public returns (bool isPairTokenBurned) {\\n        // Get LP token total supply\\n        uint256 pairTokenTotalSupply = pairToken.totalSupply();\\n        // If last total supply > current total supply,\\n        // It means LP token is burned by uniswap, which means someone removing liquidity\\n        isPairTokenBurned = lastPairTokenTotalSupply > pairTokenTotalSupply;\\n        // Save total supply\\n        lastPairTokenTotalSupply = pairTokenTotalSupply;\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    function _setMinter(address account, bool value) internal {\\n        minters[account] = value;\\n    }\\n\\n    function _setNoFeeAddress(address account, bool value) internal {\\n        noFeeAddresses[account] = value;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        // Check uniswap liquidity removal\\n        _checkUniswapLiquidityRemoval(sender);\\n\\n        if (noFeeAddresses[sender] || noFeeAddresses[recipient]) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            // 0.5% for dev\\n            uint256 devFee = amount.div(200);\\n            // 1% for farmers in pool\\n            uint256 poolFee = devFee.mul(2);\\n            // 1% to goes as sharing profit\\n            uint256 tradingFee = poolFee;\\n\\n            // Get net amount\\n            uint256 net = amount\\n            .sub(devFee)\\n            .sub(poolFee)\\n            .sub(tradingFee);\\n\\n            super._transfer(sender, recipient, net);\\n            super._transfer(sender, devTreasury, devFee);\\n            super._transfer(sender, poolTreasury, poolFee);\\n            super._transfer(sender, tradingTreasury, tradingFee);\\n        }\\n    }\\n\\n    function _checkUniswapLiquidityRemoval(address sender) internal {\\n        bool isPairTokenBurned = syncPairTokenTotalSupply();\\n\\n        // If from uniswap LP address\\n        if (sender == pairAddress) {\\n            // Check if liquidity removed\\n            require(isPairTokenBurned == false, 'LP removal disabled');\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Snapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Arrays.sol\\\";\\nimport \\\"../../utils/Counters.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using SafeMath for uint256;\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping (address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _currentSnapshotId.current();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n      super._beforeTokenTransfer(from, to, amount);\\n\\n      if (from == address(0)) {\\n        // mint\\n        _updateAccountSnapshot(to);\\n        _updateTotalSupplySnapshot();\\n      } else if (to == address(0)) {\\n        // burn\\n        _updateAccountSnapshot(from);\\n        _updateTotalSupplySnapshot();\\n      } else {\\n        // transfer\\n        _updateAccountSnapshot(from);\\n        _updateAccountSnapshot(to);\\n      }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\\n        private view returns (bool, uint256)\\n    {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(snapshotId <= _currentSnapshotId.current(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _currentSnapshotId.current();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILordOfCoin.sol\\\";\\nimport \\\"./interfaces/IDvd.sol\\\";\\nimport \\\"./interfaces/ISDvd.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\nabstract contract Pool is ReentrancyGuard, Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Staked(address indexed sender, address indexed recipient, uint256 amount);\\n    event Withdrawn(address indexed sender, address indexed recipient, uint256 amount);\\n    event Claimed(address indexed sender, address indexed recipient, uint256 net, uint256 tax, uint256 total);\\n    event Halving(uint256 amount);\\n\\n    /// @dev Token will be DVD or SDVD-ETH UNI-V2\\n    address public stakedToken;\\n    ISDvd public sdvd;\\n\\n    /// @notice Flag to determine if farm is open\\n    bool public isFarmOpen = false;\\n    /// @notice Farming will be open on this timestamp\\n    uint256 public farmOpenTime;\\n\\n    uint256 public rewardAllocation;\\n    uint256 public rewardRate;\\n    uint256 public rewardDuration = 1460 days;  // halving per 4 years\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public finishTime;\\n\\n    uint256 public bonusRewardAllocation;\\n    uint256 public bonusRewardRate;\\n    uint256 public bonusRewardDuration = 1 days; //  Reward bonus distributed every day, must be the same value with pool treasury release threshold\\n    uint256 public bonusLastUpdateTime;\\n    uint256 public bonusRewardPerTokenStored;\\n    uint256 public bonusRewardFinishTime;\\n\\n    struct AccountInfo {\\n        // Staked token balance\\n        uint256 balance;\\n        // Normal farming reward\\n        uint256 reward;\\n        uint256 rewardPerTokenPaid;\\n        // Bonus reward from transaction fee\\n        uint256 bonusReward;\\n        uint256 bonusRewardPerTokenPaid;\\n    }\\n\\n    /// @dev Account info\\n    mapping(address => AccountInfo) public accountInfos;\\n\\n    /// @dev Total supply of staked tokens\\n    uint256 private _totalSupply;\\n\\n    /// @notice Total rewards minted from this pool\\n    uint256 public totalRewardMinted;\\n\\n    // @dev Lord of Coin\\n    address controller;\\n\\n    // @dev Pool treasury\\n    address poolTreasury;\\n\\n    constructor(address _poolTreasury, uint256 _farmOpenTime) public {\\n        poolTreasury = _poolTreasury;\\n        farmOpenTime = _farmOpenTime;\\n    }\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyController {\\n        require(msg.sender == controller, 'Controller only');\\n        _;\\n    }\\n\\n    modifier onlyPoolTreasury {\\n        require(msg.sender == poolTreasury, 'Treasury only');\\n        _;\\n    }\\n\\n    modifier farmOpen {\\n        require(isFarmOpen, 'Farm not open');\\n        _;\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    /// @notice Setup for the first time after deploy and renounce ownership immediately\\n    function init(address _controller, address _stakedToken) external onlyOwner {\\n        controller = _controller;\\n        stakedToken = _stakedToken;\\n        sdvd = ISDvd(ILordOfCoin(_controller).sdvd());\\n\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Pool Treasury Only ========== */\\n\\n    /// @notice Distribute bonus rewards to farmers\\n    /// @dev Can only be called by pool treasury\\n    function distributeBonusRewards(uint256 amount) external onlyPoolTreasury {\\n        // Set bonus reward allocation\\n        bonusRewardAllocation = amount;\\n        // Calculate bonus reward rate\\n        bonusRewardRate = bonusRewardAllocation.div(bonusRewardDuration);\\n        // Set finish time\\n        bonusRewardFinishTime = block.timestamp.add(bonusRewardDuration);\\n        // Set last update time\\n        bonusLastUpdateTime = block.timestamp;\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Stake token.\\n    /// @dev Need to approve staked token first.\\n    /// @param amount Token amount.\\n    function stake(uint256 amount) external nonReentrant {\\n        _stake(msg.sender, msg.sender, amount);\\n    }\\n\\n    /// @notice Stake token.\\n    /// @dev Need to approve staked token first.\\n    /// @param recipient Address who receive staked token balance.\\n    /// @param amount Token amount.\\n    function stakeTo(address recipient, uint256 amount) external nonReentrant {\\n        _stake(msg.sender, recipient, amount);\\n    }\\n\\n    /// @notice Withdraw token.\\n    /// @param amount Token amount.\\n    function withdraw(uint256 amount) external nonReentrant farmOpen {\\n        _withdraw(msg.sender, msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraw token.\\n    /// @param recipient Address who receive staked token.\\n    /// @param amount Token amount.\\n    function withdrawTo(address recipient, uint256 amount) external nonReentrant farmOpen {\\n        _withdraw(msg.sender, recipient, amount);\\n    }\\n\\n    /// @notice Claim SDVD reward\\n    /// @return Reward net amount\\n    /// @return Reward tax amount\\n    /// @return Total Reward amount\\n    function claimReward() external nonReentrant farmOpen returns(uint256, uint256, uint256) {\\n        return _claimReward(msg.sender, msg.sender);\\n    }\\n\\n    /// @notice Claim SDVD reward\\n    /// @param recipient Address who receive reward.\\n    /// @return Reward net amount\\n    /// @return Reward tax amount\\n    /// @return Total Reward amount\\n    function claimRewardTo(address recipient) external nonReentrant farmOpen returns(uint256, uint256, uint256) {\\n        return _claimReward(msg.sender, recipient);\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    function _updateReward(address account) internal {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            accountInfos[account].reward = earned(account);\\n            accountInfos[account].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n    }\\n\\n    function _updateBonusReward(address account) internal {\\n        bonusRewardPerTokenStored = bonusRewardPerToken();\\n        bonusLastUpdateTime = lastTimeBonusRewardApplicable();\\n        if (account != address(0)) {\\n            accountInfos[account].bonusReward = bonusEarned(account);\\n            accountInfos[account].bonusRewardPerTokenPaid = bonusRewardPerTokenStored;\\n        }\\n    }\\n\\n    /// @notice Stake staked token\\n    /// @param sender address. Address who have the token.\\n    /// @param recipient address. Address who receive staked token balance.\\n    function _stake(address sender, address recipient, uint256 amount) internal virtual {\\n        _checkOpenFarm();\\n        _checkHalving();\\n        _updateReward(recipient);\\n        _updateBonusReward(recipient);\\n        _notifyController();\\n\\n        require(amount > 0, 'Cannot stake 0');\\n\\n        IERC20(stakedToken).safeTransferFrom(sender, address(this), amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        accountInfos[recipient].balance = accountInfos[recipient].balance.add(amount);\\n\\n        emit Staked(sender, recipient, amount);\\n    }\\n\\n    /// @notice Withdraw staked token\\n    /// @param sender address. Address who have stake the token.\\n    /// @param recipient address. Address who receive the staked token.\\n    function _withdraw(address sender, address recipient, uint256 amount) internal virtual {\\n        _checkHalving();\\n        _updateReward(sender);\\n        _updateBonusReward(sender);\\n        _notifyController();\\n\\n        require(amount > 0, 'Cannot withdraw 0');\\n        require(accountInfos[sender].balance >= amount, 'Insufficient balance');\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        accountInfos[sender].balance = accountInfos[sender].balance.sub(amount);\\n        IERC20(stakedToken).safeTransfer(recipient, amount);\\n\\n        emit Withdrawn(sender, recipient, amount);\\n    }\\n\\n    /// @notice Claim reward\\n    /// @param sender address. Address who have stake the token.\\n    /// @param recipient address. Address who receive the reward.\\n    /// @return totalNetReward Total net SDVD reward.\\n    /// @return totalTaxReward Total taxed SDVD reward.\\n    /// @return totalReward Total SDVD reward.\\n    function _claimReward(address sender, address recipient) internal virtual returns(uint256 totalNetReward, uint256 totalTaxReward, uint256 totalReward) {\\n        _checkHalving();\\n        _updateReward(sender);\\n        _updateBonusReward(sender);\\n        _notifyController();\\n\\n        uint256 reward = accountInfos[sender].reward;\\n        uint256 bonusReward = accountInfos[sender].bonusReward;\\n        totalReward = reward.add(bonusReward);\\n        require(totalReward > 0, 'No reward to claim');\\n        if (reward > 0) {\\n            // Reduce reward first\\n            accountInfos[sender].reward = 0;\\n\\n            // Apply tax\\n            uint256 tax = reward.div(claimRewardTaxDenominator());\\n            uint256 net = reward.sub(tax);\\n\\n            // Mint SDVD as reward to recipient\\n            sdvd.mint(recipient, net);\\n            // Mint SDVD tax to pool treasury\\n            sdvd.mint(address(poolTreasury), tax);\\n\\n            // Increase total\\n            totalNetReward = totalNetReward.add(net);\\n            totalTaxReward = totalTaxReward.add(tax);\\n            // Set stats\\n            totalRewardMinted = totalRewardMinted.add(reward);\\n        }\\n        if (bonusReward > 0) {\\n            // Reduce bonus reward first\\n            accountInfos[sender].bonusReward = 0;\\n            // Get balance and check so we doesn't overrun\\n            uint256 balance = sdvd.balanceOf(address(this));\\n            if (bonusReward > balance) {\\n                bonusReward = balance;\\n            }\\n\\n            // Apply tax\\n            uint256 tax = bonusReward.div(claimRewardTaxDenominator());\\n            uint256 net = bonusReward.sub(tax);\\n\\n            // Send bonus reward to recipient\\n            IERC20(sdvd).safeTransfer(recipient, net);\\n            // Send tax to treasury\\n            IERC20(sdvd).safeTransfer(address(poolTreasury), tax);\\n\\n            // Increase total\\n            totalNetReward = totalNetReward.add(net);\\n            totalTaxReward = totalTaxReward.add(tax);\\n        }\\n        if (totalReward > 0) {\\n            emit Claimed(sender, recipient, totalNetReward, totalTaxReward, totalReward);\\n        }\\n    }\\n\\n    /// @notice Check if farm can be open\\n    function _checkOpenFarm() internal {\\n        require(farmOpenTime <= block.timestamp, 'Farm not open');\\n        if (!isFarmOpen) {\\n            // Set flag\\n            isFarmOpen = true;\\n\\n            // Initialize\\n            lastUpdateTime = block.timestamp;\\n            finishTime = block.timestamp.add(rewardDuration);\\n            rewardRate = rewardAllocation.div(rewardDuration);\\n\\n            // Initialize bonus\\n            bonusLastUpdateTime = block.timestamp;\\n            bonusRewardFinishTime = block.timestamp.add(bonusRewardDuration);\\n            bonusRewardRate = bonusRewardAllocation.div(bonusRewardDuration);\\n        }\\n    }\\n\\n    /// @notice Check and do halving when finish time reached\\n    function _checkHalving() internal {\\n        if (block.timestamp >= finishTime) {\\n            // Halving reward\\n            rewardAllocation = rewardAllocation.div(2);\\n            // Calculate reward rate\\n            rewardRate = rewardAllocation.div(rewardDuration);\\n            // Set finish time\\n            finishTime = block.timestamp.add(rewardDuration);\\n            // Set last update time\\n            lastUpdateTime = block.timestamp;\\n            // Emit event\\n            emit Halving(rewardAllocation);\\n        }\\n    }\\n\\n    /// @notice Check if need to increase snapshot in lord of coin\\n    function _notifyController() internal {\\n        ILordOfCoin(controller).checkSnapshot();\\n        ILordOfCoin(controller).releaseTreasury();\\n    }\\n\\n    /* ========== View ========== */\\n\\n    /// @notice Get staked token total supply\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get staked token balance\\n    function balanceOf(address account) external view returns (uint256) {\\n        return accountInfos[account].balance;\\n    }\\n\\n    /// @notice Get full earned amount and bonus\\n    /// @dev Combine earned\\n    function fullEarned(address account) external view returns (uint256) {\\n        return earned(account).add(bonusEarned(account));\\n    }\\n\\n    /// @notice Get full reward rate\\n    /// @dev Combine reward rate\\n    function fullRewardRate() external view returns (uint256) {\\n        return rewardRate.add(bonusRewardRate);\\n    }\\n\\n    /// @notice Get claim reward tax\\n    function claimRewardTaxDenominator() public view returns (uint256) {\\n        if (block.timestamp < farmOpenTime.add(365 days)) {\\n            // 50% tax\\n            return 2;\\n        } else if (block.timestamp < farmOpenTime.add(730 days)) {\\n            // 33% tax\\n            return 3;\\n        } else if (block.timestamp < farmOpenTime.add(1095 days)) {\\n            // 25% tax\\n            return 4;\\n        } else if (block.timestamp < farmOpenTime.add(1460 days)) {\\n            // 20% tax\\n            return 5;\\n        } else {\\n            // 10% tax\\n            return 10;\\n        }\\n    }\\n\\n    /// Normal rewards\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, finishTime);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return rewardPerTokenStored.add(\\n            lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\\n        );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return accountInfos[account].balance.mul(\\n            rewardPerToken().sub(accountInfos[account].rewardPerTokenPaid)\\n        )\\n        .div(1e18)\\n        .add(accountInfos[account].reward);\\n    }\\n\\n    /// Bonus\\n\\n    function lastTimeBonusRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, bonusRewardFinishTime);\\n    }\\n\\n    function bonusRewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return bonusRewardPerTokenStored;\\n        }\\n        return bonusRewardPerTokenStored.add(\\n            lastTimeBonusRewardApplicable().sub(bonusLastUpdateTime).mul(bonusRewardRate).mul(1e18).div(_totalSupply)\\n        );\\n    }\\n\\n    function bonusEarned(address account) public view returns (uint256) {\\n        return accountInfos[account].balance.mul(\\n            bonusRewardPerToken().sub(accountInfos[account].bonusRewardPerTokenPaid)\\n        )\\n        .div(1e18)\\n        .add(accountInfos[account].bonusReward);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/SDvdEthPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IDvd.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract SDvdEthPool is Pool {\\n\\n    event StakedETH(address indexed account, uint256 amount);\\n    event ClaimedAndStaked(address indexed account, uint256 amount);\\n\\n    /// @dev Uniswap router\\n    IUniswapV2Router02 uniswapRouter;\\n\\n    /// @dev Uniswap factory\\n    IUniswapV2Factory uniswapFactory;\\n\\n    /// @dev WETH address\\n    address weth;\\n\\n    /// @notice LGE state\\n    bool public isLGEActive = true;\\n\\n    /// @notice Max initial deposit cap\\n    uint256 public LGE_INITIAL_DEPOSIT_CAP = 5 ether;\\n\\n    /// @notice Amount in SDVD. After hard cap reached, stake ETH will function as normal staking.\\n    uint256 public LGE_HARD_CAP = 200 ether;\\n\\n    /// @dev Initial price multiplier\\n    uint256 public LGE_INITIAL_PRICE_MULTIPLIER = 2;\\n\\n    constructor(address _poolTreasury, address _uniswapRouter, uint256 _farmOpenTime) public Pool(_poolTreasury, _farmOpenTime) {\\n        rewardAllocation = 240000 * 1e18;\\n        rewardAllocation = rewardAllocation.sub(LGE_HARD_CAP.div(2));\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\\n        weth = uniswapRouter.WETH();\\n    }\\n\\n    /// @dev Added to receive ETH when swapping on Uniswap\\n    receive() external payable {\\n    }\\n\\n    /// @notice Stake token using ETH conveniently.\\n    function stakeETH() external payable nonReentrant {\\n        _stakeETH(msg.value);\\n    }\\n\\n    /// @notice Stake token using SDVD and ETH conveniently.\\n    /// @dev User must approve SDVD first\\n    function stakeSDVD(uint256 amountToken) external payable nonReentrant farmOpen {\\n        require(isLGEActive == false, 'LGE still active');\\n\\n        uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\\n        uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\\n        uint256 amountETH = amountToken.mul(pairETHBalance).div(pairSDVDBalance);\\n\\n        // Make sure received eth is enough\\n        require(msg.value >= amountETH, 'Not enough ETH');\\n        // Check if there is excess eth\\n        uint256 excessETH = msg.value.sub(amountETH);\\n        // Send back excess eth\\n        if (excessETH > 0) {\\n            msg.sender.transfer(excessETH);\\n        }\\n\\n        // Transfer sdvd from sender to this contract\\n        IERC20(sdvd).safeTransferFrom(msg.sender, address(this), amountToken);\\n\\n        // Approve uniswap router to spend SDVD\\n        IERC20(sdvd).approve(address(uniswapRouter), amountToken);\\n        // Add liquidity\\n        (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountToken, 0, 0, address(this), block.timestamp.add(30 minutes));\\n\\n        // Approve self\\n        IERC20(stakedToken).approve(address(this), liquidity);\\n        // Stake LP token for sender\\n        _stake(address(this), msg.sender, liquidity);\\n    }\\n\\n    /// @notice Claim reward and re-stake conveniently.\\n    function claimRewardAndStake() external nonReentrant farmOpen {\\n        require(isLGEActive == false, 'LGE still active');\\n\\n        // Claim SDVD reward to this address\\n        (uint256 totalNetReward,,) = _claimReward(msg.sender, address(this));\\n\\n        // Split total reward to be swapped\\n        uint256 swapAmountSDVD = totalNetReward.div(2);\\n\\n        // Swap path\\n        address[] memory path = new address[](2);\\n        path[0] = address(sdvd);\\n        path[1] = weth;\\n\\n        // Approve uniswap router to spend sdvd\\n        IERC20(sdvd).approve(address(uniswapRouter), swapAmountSDVD);\\n        // Swap SDVD to ETH\\n        // Param: uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForETH(swapAmountSDVD, 0, path, address(this), block.timestamp.add(30 minutes));\\n        // Get received ETH amount from swap\\n        uint256 amountETHReceived = amounts[1];\\n\\n        // Get pair address and balance\\n        uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\\n        uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\\n\\n        // Get available SDVD\\n        uint256 amountSDVD = totalNetReward.sub(swapAmountSDVD);\\n        // Calculate how much ETH needed to provide liquidity\\n        uint256 amountETH = amountSDVD.mul(pairETHBalance).div(pairSDVDBalance);\\n\\n        // If required ETH amount to add liquidity is bigger than what we have\\n        // Then we need to reduce SDVD amount\\n        if (amountETH > amountETHReceived) {\\n            // Set ETH amount\\n            amountETH = amountETHReceived;\\n            // Get amount SDVD needed to add liquidity\\n            uint256 amountSDVDRequired = amountETH.mul(pairSDVDBalance).div(pairETHBalance);\\n            // Send dust\\n            if (amountSDVD > amountSDVDRequired) {\\n                IERC20(sdvd).safeTransfer(msg.sender, amountSDVD.sub(amountSDVDRequired));\\n            }\\n            // Set SDVD amount\\n            amountSDVD = amountSDVDRequired;\\n        }\\n        // Else if we have too much ETH\\n        else if (amountETHReceived > amountETH) {\\n            // Send excess\\n            msg.sender.transfer(amountETHReceived.sub(amountETH));\\n        }\\n\\n        // Approve uniswap router to spend SDVD\\n        IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\\n        // Add liquidity\\n        (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\\n\\n        // Approve self\\n        IERC20(stakedToken).approve(address(this), liquidity);\\n        // Stake LP token for sender\\n        _stake(address(this), msg.sender, liquidity);\\n\\n        emit ClaimedAndStaked(msg.sender, liquidity);\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice Stake ETH\\n    /// @param value Value in ETH\\n    function _stakeETH(uint256 value) internal {\\n        // If in LGE\\n        if (isLGEActive) {\\n            // SDVD-ETH pair address\\n            uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\\n\\n            if (pairSDVDBalance == 0) {\\n                require(msg.value <= LGE_INITIAL_DEPOSIT_CAP, 'Initial deposit cap reached');\\n            }\\n\\n            uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\\n            uint256 amountETH = msg.value;\\n\\n            // If SDVD balance = 0 then set initial price\\n            uint256 amountSDVD = pairSDVDBalance == 0 ? amountETH.mul(LGE_INITIAL_PRICE_MULTIPLIER) : amountETH.mul(pairSDVDBalance).div(pairETHBalance);\\n\\n            uint256 excessETH = 0;\\n            // If amount token to be minted pass the hard cap\\n            if (pairSDVDBalance.add(amountSDVD) > LGE_HARD_CAP) {\\n                // Get excess token\\n                uint256 excessToken = pairSDVDBalance.add(amountSDVD).sub(LGE_HARD_CAP);\\n                // Reduce it\\n                amountSDVD = amountSDVD.sub(excessToken);\\n                // Get excess ether\\n                excessETH = excessToken.mul(pairETHBalance).div(pairSDVDBalance);\\n                // Reduce amount ETH to be put on uniswap liquidity\\n                amountETH = amountETH.sub(excessETH);\\n            }\\n\\n            // Mint LGE SDVD\\n            ISDvd(sdvd).mint(address(this), amountSDVD);\\n\\n            // Add liquidity in uniswap and send the LP token to this contract\\n            IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\\n            (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\\n\\n            // Recheck the SDVD in pair address\\n            pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\\n            // Set LGE active state\\n            isLGEActive = pairSDVDBalance < LGE_HARD_CAP;\\n\\n            // Approve self\\n            IERC20(stakedToken).approve(address(this), liquidity);\\n            // Stake LP token for sender\\n            _stake(address(this), msg.sender, liquidity);\\n\\n            // If there is excess ETH\\n            if (excessETH > 0) {\\n                _stakeETH(excessETH);\\n            }\\n        } else {\\n            // Split ETH sent\\n            uint256 amountETH = value.div(2);\\n\\n            // Swap path\\n            address[] memory path = new address[](2);\\n            path[0] = weth;\\n            path[1] = address(sdvd);\\n\\n            // Swap ETH to SDVD using uniswap\\n            // Param: uint amountOutMin, address[] calldata path, address to, uint deadline\\n            uint256[] memory amounts = uniswapRouter.swapExactETHForTokens{value : amountETH}(\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp.add(30 minutes)\\n            );\\n            // Get SDVD amount\\n            uint256 amountSDVDReceived = amounts[1];\\n\\n            // Get pair address balance\\n            uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\\n            uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\\n\\n            // Get available ETH\\n            amountETH = value.sub(amountETH);\\n            // Calculate amount of SDVD needed to add liquidity\\n            uint256 amountSDVD = amountETH.mul(pairSDVDBalance).div(pairETHBalance);\\n\\n            // If required SDVD amount to add liquidity is bigger than what we have\\n            // Then we need to reduce ETH amount\\n            if (amountSDVD > amountSDVDReceived) {\\n                // Set SDVD amount\\n                amountSDVD = amountSDVDReceived;\\n                // Get amount ETH needed to add liquidity\\n                uint256 amountETHRequired = amountSDVD.mul(pairETHBalance).div(pairSDVDBalance);\\n                // Send dust back to sender\\n                if (amountETH > amountETHRequired) {\\n                    msg.sender.transfer(amountETH.sub(amountETHRequired));\\n                }\\n                // Set ETH amount\\n                amountETH = amountETHRequired;\\n            }\\n            // Else if we have too much SDVD\\n            else if (amountSDVDReceived > amountSDVD) {\\n                // Send dust\\n                IERC20(sdvd).transfer(msg.sender, amountSDVDReceived.sub(amountSDVD));\\n            }\\n\\n            // Approve uniswap router to spend SDVD\\n            IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\\n            // Add liquidity\\n            (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\\n            // Sync total token supply\\n            ISDvd(sdvd).syncPairTokenTotalSupply();\\n\\n            // Approve self\\n            IERC20(stakedToken).approve(address(this), liquidity);\\n            // Stake LP token for sender\\n            _stake(address(this), msg.sender, liquidity);\\n        }\\n\\n        emit StakedETH(msg.sender, msg.value);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Mock is IERC20 {\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function mockMint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function mockBurn(address account, uint256 amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/PoolTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract PoolTreasury is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev SDVD ETH pool address\\n    address public sdvdEthPool;\\n\\n    /// @dev DVD pool address\\n    address public dvdPool;\\n\\n    /// @dev SDVD contract address\\n    address public sdvd;\\n\\n    /// @dev Distribute reward every 1 day to pool\\n    uint256 public releaseThreshold = 1 days;\\n\\n    /// @dev Last release timestamp\\n    uint256 public releaseTime;\\n\\n    /// @notice Swap reward distribution numerator when this time reached\\n    uint256 public numeratorSwapTime;\\n\\n    /// @notice How long we should wait before swap numerator\\n    uint256 public NUMERATOR_SWAP_WAIT = 4383 days;  // 12 normal years + 3 leap days;\\n\\n    constructor(address _sdvd) public {\\n        sdvd = _sdvd;\\n        releaseTime = block.timestamp;\\n        numeratorSwapTime = block.timestamp.add(NUMERATOR_SWAP_WAIT);\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    /// @notice Setup for the first time after deploy and renounce ownership immediately\\n    function init(address _sdvdEthPool, address _dvdPool) external onlyOwner {\\n        sdvdEthPool = _sdvdEthPool;\\n        dvdPool = _dvdPool;\\n\\n        // Renounce ownership after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Release pool treasury to pool and give rewards for farmers.\\n    function release() external {\\n        _release();\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice Release pool treasury to pool\\n    function _release() internal {\\n        if (releaseTime.add(releaseThreshold) <= block.timestamp) {\\n            // Update release time\\n            releaseTime = block.timestamp;\\n            // Check balance\\n            uint256 balance = IERC20(sdvd).balanceOf(address(this));\\n\\n            // If there is balance\\n            if (balance > 0) {\\n                // Get numerator\\n                uint256 numerator = block.timestamp <= numeratorSwapTime ? 4 : 6;\\n\\n                // Distribute reward to pools\\n                uint dvdPoolReward = balance.div(10).mul(numerator);\\n                IERC20(sdvd).transfer(dvdPool, dvdPoolReward);\\n                IPool(dvdPool).distributeBonusRewards(dvdPoolReward);\\n\\n                uint256 sdvdEthPoolReward = balance.sub(dvdPoolReward);\\n                IERC20(sdvd).transfer(sdvdEthPool, sdvdEthPoolReward);\\n                IPool(sdvdEthPool).distributeBonusRewards(sdvdEthPoolReward);\\n            }\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/DvdPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IDvd.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract DvdPool is Pool {\\n\\n    event StakedETH(address indexed account, uint256 amount);\\n    event WithdrawnETH(address indexed account, uint256 amount);\\n    event ClaimedAndStaked(address indexed account, uint256 amount);\\n\\n    /// @dev mUSD instance\\n    address public musd;\\n\\n    /// @dev Uniswap router\\n    IUniswapV2Router02 uniswapRouter;\\n\\n    /// @dev Uniswap factory\\n    IUniswapV2Factory uniswapFactory;\\n\\n    /// @dev WETH address\\n    address weth;\\n\\n    /// @dev SDVD ETH pool address\\n    address public sdvdEthPool;\\n\\n    constructor(address _poolTreasury, address _musd, address _uniswapRouter, address _sdvdEthPool, uint256 _farmOpenTime) public Pool(_poolTreasury, _farmOpenTime) {\\n        rewardAllocation = 360000 * 1e18;\\n        musd = _musd;\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\\n        weth = uniswapRouter.WETH();\\n        sdvdEthPool = _sdvdEthPool;\\n    }\\n\\n    /// @dev Added to receive ETH when swapping on Uniswap\\n    receive() external payable {\\n    }\\n\\n    /// @notice Stake token using ETH conveniently.\\n    function stakeETH() external payable nonReentrant {\\n        // Buy DVD using ETH\\n        (uint256 dvdAmount,,,) = ILordOfCoin(controller).buyFromETH{value : msg.value}();\\n\\n        // Approve self\\n        IERC20(stakedToken).approve(address(this), dvdAmount);\\n        // Stake user DVD\\n        _stake(address(this), msg.sender, dvdAmount);\\n\\n        emit StakedETH(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Withdraw token to ETH conveniently.\\n    /// @param amount Number of staked DVD token.\\n    /// @dev Need to approve DVD token first.\\n    function withdrawETH(uint256 amount) external nonReentrant farmOpen {\\n        // Call withdraw to this address\\n        _withdraw(msg.sender, address(this), amount);\\n        // Approve LoC to spend DVD\\n        IERC20(stakedToken).approve(controller, amount);\\n        // Sell received DVD to ETH\\n        (uint256 receivedETH,,,,) = ILordOfCoin(controller).sellToETH(amount);\\n        // Send received ETH to sender\\n        msg.sender.transfer(receivedETH);\\n\\n        emit WithdrawnETH(msg.sender, receivedETH);\\n    }\\n\\n    /// @notice Claim reward and re-stake conveniently.\\n    function claimRewardAndStake() external nonReentrant farmOpen {\\n        // Claim SDVD reward to this address\\n        (uint256 totalNetReward,,) = _claimReward(msg.sender, address(this));\\n\\n        // Split total reward to be swapped\\n        uint256 swapAmountSDVD = totalNetReward.div(2);\\n\\n        // Swap path\\n        address[] memory path = new address[](2);\\n        path[0] = address(sdvd);\\n        path[1] = weth;\\n\\n        // Approve uniswap router to spend sdvd\\n        IERC20(sdvd).approve(address(uniswapRouter), swapAmountSDVD);\\n        // Swap SDVD to ETH\\n        // Param: uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForETH(swapAmountSDVD, 0, path, address(this), block.timestamp.add(30 minutes));\\n        // Get received ETH amount from swap\\n        uint256 amountETHReceived = amounts[1];\\n\\n        // Get pair address and balance\\n        address pairAddress = uniswapFactory.getPair(address(sdvd), weth);\\n        uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(pairAddress);\\n        uint256 pairETHBalance = IERC20(weth).balanceOf(pairAddress);\\n\\n        // Get available SDVD\\n        uint256 amountSDVD = totalNetReward.sub(swapAmountSDVD);\\n        // Calculate how much ETH needed to provide liquidity\\n        uint256 amountETH = amountSDVD.mul(pairETHBalance).div(pairSDVDBalance);\\n\\n        // If required ETH amount to add liquidity is bigger than what we have\\n        // Then we need to reduce SDVD amount\\n        if (amountETH > amountETHReceived) {\\n            // Set ETH amount\\n            amountETH = amountETHReceived;\\n            // Get amount SDVD needed to add liquidity\\n            uint256 amountSDVDRequired = amountETH.mul(pairSDVDBalance).div(pairETHBalance);\\n            // Send dust\\n            if (amountSDVD > amountSDVDRequired) {\\n                IERC20(sdvd).safeTransfer(msg.sender, amountSDVD.sub(amountSDVDRequired));\\n            }\\n            // Set SDVD amount\\n            amountSDVD = amountSDVDRequired;\\n        }\\n        // Else if we have too much ETH\\n        else if (amountETHReceived > amountETH) {\\n            // Send dust\\n            msg.sender.transfer(amountETHReceived.sub(amountETH));\\n        }\\n\\n        // Approve uniswap router to spend SDVD\\n        IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\\n        // Add liquidity\\n        (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\\n\\n        // Approve SDVD ETH pool to spend LP token\\n        IERC20(pairAddress).approve(sdvdEthPool, liquidity);\\n        // Stake LP token for sender\\n        IPool(sdvdEthPool).stakeTo(msg.sender, liquidity);\\n\\n        emit ClaimedAndStaked(msg.sender, liquidity);\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice Override stake function to check shareholder points\\n    /// @param amount Number of DVD token to be staked.\\n    function _stake(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(IDvd(stakedToken).shareholderPointOf(sender) >= amount, 'Insufficient shareholder points');\\n        super._stake(sender, recipient, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Dvd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './DvdShareholderPoint.sol';\\n\\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\\n/// The only owner function is `init` which is to setup for the first time after deployment.\\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\\ncontract Dvd is ERC20, DvdShareholderPoint, Ownable {\\n\\n    /// @notice Minter for DVD token. This value will be Lord of Coin address.\\n    address public minter;\\n    /// @notice Controller. This value will be Lord of Coin address.\\n    address public controller;\\n    /// @dev DVD pool address.\\n    address public dvdPool;\\n\\n    constructor() public ERC20('Dvd.finance', 'DVD') {\\n    }\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyMinter {\\n        require(msg.sender == minter, 'Minter only');\\n        _;\\n    }\\n\\n    modifier onlyController {\\n        require(msg.sender == controller, 'Controller only');\\n        _;\\n    }\\n\\n    /* ========== Owner Only ========== */\\n\\n    /// @notice Setup for the first time after deploy and renounce ownership immediately\\n    function init(address _controller, address _dvdPool) external onlyOwner {\\n        controller = _controller;\\n        minter = _controller;\\n        dvdPool = _dvdPool;\\n\\n        // Renounce ownership immediately after init\\n        renounceOwnership();\\n    }\\n\\n    /* ========== Minter Only ========== */\\n\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    /* ========== Controller Only ========== */\\n\\n    /// @notice Increase shareholder point.\\n    /// @dev Can only be called by the LoC contract.\\n    /// @param account Account address\\n    /// @param amount The amount to increase.\\n    function increaseShareholderPoint(address account, uint256 amount) external onlyController {\\n        _increaseShareholderPoint(account, amount);\\n    }\\n\\n    /// @notice Decrease shareholder point.\\n    /// @dev Can only be called by the LoC contract.\\n    /// @param account Account address\\n    /// @param amount The amount to decrease.\\n    function decreaseShareholderPoint(address account, uint256 amount) external onlyController {\\n        _decreaseShareholderPoint(account, amount);\\n    }\\n\\n    /* ========== Internal ========== */\\n\\n    /// @notice ERC20 Before token transfer hook\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        // If transfer between two accounts\\n        if (from != address(0) && to != address(0)) {\\n            // Remove shareholder point from account\\n            _decreaseShareholderPoint(from, Math.min(amount, shareholderPointOf(from)));\\n        }\\n        // If transfer is from DVD pool (This occurs when user withdraw their stake, or using convenient stake ETH)\\n        // Give back their shareholder point.\\n        if (from == dvdPool) {\\n            _increaseShareholderPoint(to, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DvdShareholderPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract DvdShareholderPoint {\\n\\n    using SafeMath for uint256;\\n\\n    event ShareholderPointIncreased(address indexed account, uint256 amount, uint256 totalShareholderPoint);\\n    event ShareholderPointDecreased(address indexed account, uint256 amount, uint256 totalShareholderPoint);\\n\\n    /// @dev Our shareholder point tracker\\n    /// Shareholder point will determine how much token one account can use to farm SDVD\\n    /// This point can only be increased/decreased by LoC buy/sell function to prevent people trading DVD on exchange and don't pay their taxes\\n    mapping(address => uint256) private _shareholderPoints;\\n    uint256 private _totalShareholderPoint;\\n\\n    /// @notice Get shareholder point of an account\\n    /// @param account address.\\n    function shareholderPointOf(address account) public view returns (uint256) {\\n        return _shareholderPoints[account];\\n    }\\n\\n    /// @notice Get total shareholder points\\n    function totalShareholderPoint() public view returns (uint256) {\\n        return _totalShareholderPoint;\\n    }\\n\\n    /// @notice Increase shareholder point\\n    /// @param amount The amount to increase.\\n    function _increaseShareholderPoint(address account, uint256 amount) internal {\\n        // If account is burn address then skip\\n        if (account != address(0)) {\\n            _totalShareholderPoint = _totalShareholderPoint.add(amount);\\n            _shareholderPoints[account] = _shareholderPoints[account].add(amount);\\n\\n            emit ShareholderPointIncreased(account, amount, _shareholderPoints[account]);\\n        }\\n    }\\n\\n    /// @notice Decrease shareholder point.\\n    /// @param amount The amount to decrease.\\n    function _decreaseShareholderPoint(address account, uint256 amount) internal {\\n        // If account is burn address then skip\\n        if (account != address(0)) {\\n            _totalShareholderPoint = _totalShareholderPoint.sub(amount);\\n            _shareholderPoints[account] = _shareholderPoints[account] > amount ? _shareholderPoints[account].sub(amount) : 0;\\n\\n            emit ShareholderPointDecreased(account, amount, _shareholderPoints[account]);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StableMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16 <0.7.0;\\n\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n/**\\n * @title   StableMath\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  A library providing safe mathematical operations to multiply and\\n *          divide with standardised precision.\\n * @dev     Derives from OpenZeppelin's SafeMath lib and uses generic system\\n *          wide variables for managing precision.\\n */\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /**\\n     * @dev Token Ratios are used when converting between units of bAsset, mAsset and MTA\\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\\n     * @dev bAsset ratio unit for use in exact calculations,\\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\\n     */\\n    uint256 private constant RATIO_SCALE = 1e8;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Provides an interface to the ratio unit\\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\\n     */\\n    function getRatioScale() internal pure returns (uint256) {\\n        return RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\\n        return x.mul(FULL_SCALE);\\n    }\\n\\n    /***************************************\\n                PRECISE ARITHMETIC\\n      ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n\\n    /***************************************\\n                    RATIO FUNCS\\n      ****************************************/\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\\n     */\\n    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, rounding up the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              ratio scale, rounded up to the closest base unit.\\n     */\\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\\n        // e.g. How much mAsset should I burn for this bAsset (x)?\\n        // 1e18 * 1e8 = 1e26\\n        uint256 scaled = x.mul(ratio);\\n        // 1e26 + 9.99e7 = 100..00.999e8\\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\\n        // return 100..00.999e8 / 1e8 = 1e18\\n        return ceil.div(RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\\n     *      i.e. How much bAsset is this mAsset worth?\\n     * @param x     Left hand operand in division\\n     * @param ratio bAsset ratio\\n     * @return c    Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        // e.g. 1e14 * 1e8 = 1e22\\n        uint256 y = x.mul(RATIO_SCALE);\\n        // return 1e22 / 1e12 = 1e10\\n        return y.div(ratio);\\n    }\\n\\n    /***************************************\\n                      HELPERS\\n      ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sdvd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdvd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DevTreasury","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000fc387cdf684f9276370dfae1f7cc13323dc2b1ec","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}