{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address, uint) external returns (bool);\r\n    function balanceOf(address _owner) external returns (uint256 balance) ;\r\n}\r\n\r\ncontract DFSocial_Game1 is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    \r\n    event joined( address dir, uint level);\r\n    event refCodeUsed( string code);\r\n    event eventStarted();\r\n    event RewardTransferred( address dir, uint amount);\r\n    \r\n    \r\n    address private constant tokenAddress = 0x54ee01beB60E745329E6a8711Ad2D6cb213e38d7;  \r\n    \r\n    uint public TOTAL_REWARD ;\r\n    uint public amountToPlay ;\r\n    uint public timeToJoin ; \r\n    uint public timeToFinish ; \r\n    uint public maxPlayers ; \r\n    uint public amountToBonus;\r\n    uint public bonusInLevels;\r\n    \r\n    EnumerableSet.AddressSet private gamers;\r\n    uint public totalDiff;\r\n    bool public started;\r\n    uint public startTime;\r\n    \r\n    \r\n    mapping (address => uint) public levelStart;\r\n    mapping (address => uint) public levelEnd;\r\n    mapping (address => uint) public diff;\r\n    mapping (address => uint) public share;\r\n    mapping (address => uint) public reward;\r\n    mapping (address => bool) public bonus;\r\n    \r\n    \r\n    mapping (address => string) public names;\r\n    mapping (address => uint) public position;\r\n    mapping (address => string) public region; \r\n    mapping (address => string) public ref;\r\n             \r\n    // Times in seconds\r\n    function startEvent(uint _total_reward, uint _amountToPlay, uint _timeToJoin, uint _timeToFinish, uint _maxPlayers, uint _amountToBonus, uint _bonusInLevels) public onlyOwner{ \r\n        require(!started );\r\n        while(gamers.length() >0 ){\r\n            address actual = gamers.at(0);\r\n            gamers.remove(actual);\r\n            levelStart[actual] = 0;\r\n            levelEnd[actual] = 0;\r\n            diff[actual] = 0;\r\n            share[actual] = 0;\r\n            reward[actual] = 0;\r\n            names[actual] = \"\";\r\n            region[actual] = \"\";\r\n            position[actual] = 0;\r\n            bonus[actual] = false;\r\n            ref[actual] = \"\";\r\n            \r\n            \r\n            \r\n        }\r\n        totalDiff = 0;\r\n        started = true;\r\n        startTime = block.timestamp;\r\n        \r\n        TOTAL_REWARD = _total_reward;\r\n        amountToPlay = _amountToPlay;\r\n        timeToJoin = _timeToJoin;\r\n        timeToFinish = _timeToFinish;\r\n        maxPlayers = _maxPlayers;\r\n        amountToBonus  = _amountToBonus;\r\n        bonusInLevels = _bonusInLevels;\r\n        \r\n        emit eventStarted();\r\n    }     \r\n\r\n    function timeToFinishJoins() public view returns (uint){\r\n        \r\n        uint returnTime;\r\n        \r\n        if(startTime == 0 ){\r\n            returnTime = 0;\r\n        }else{\r\n            returnTime = startTime.add(timeToJoin);\r\n        }\r\n        \r\n       \r\n        return returnTime;\r\n    }\r\n    \r\n    function timeToFinishGame() public view returns (uint){\r\n        \r\n        uint returnTime;\r\n        \r\n        if(startTime == 0 ){\r\n            returnTime = 0;\r\n        }else{\r\n            returnTime = startTime.add(timeToFinish);\r\n        }\r\n        \r\n       \r\n        return returnTime;\r\n    }\r\n        \r\n    function join(string memory _name,  uint _levelStart, string memory _region) public{\r\n        require(block.timestamp.sub(startTime) < timeToJoin, \"Joins deadline finished\");\r\n        require(!gamers.contains(msg.sender), \"You are already playing\");\r\n        require(gamers.length() < maxPlayers, \"Max players reached\");\r\n        \r\n        uint amount = Token(tokenAddress).balanceOf(msg.sender);\r\n        require(amount >= amountToPlay, \"Not enought DFSocial\");\r\n        if(amount >= amountToBonus){\r\n            bonus[msg.sender] = true;\r\n        }\r\n        \r\n        gamers.add(msg.sender);\r\n        names[msg.sender] = _name;\r\n        levelStart[msg.sender] = _levelStart;\r\n        region[msg.sender] = _region;\r\n        ref[msg.sender] = \"\";\r\n        emit joined(msg.sender, _levelStart);\r\n    }\r\n    \r\n    function joinWithRef(string memory _name,  uint _levelStart, string memory _region, string memory _ref) public{\r\n        require(block.timestamp.sub(startTime) < timeToJoin, \"Joins deadline finished\");\r\n        require(!gamers.contains(msg.sender), \"You are already playing\");\r\n        require(gamers.length() < maxPlayers, \"Max players reached\");\r\n        \r\n        uint amount = Token(tokenAddress).balanceOf(msg.sender);\r\n        require(amount >= amountToPlay, \"Not enought DFSocial\");\r\n        if(amount >= amountToBonus){\r\n            bonus[msg.sender] = true;\r\n        }\r\n        \r\n        gamers.add(msg.sender);\r\n        names[msg.sender] = _name;\r\n        levelStart[msg.sender] = _levelStart;\r\n        region[msg.sender] = _region;\r\n        ref[msg.sender] = _ref;\r\n        emit joined(msg.sender, _levelStart);\r\n        emit refCodeUsed(_ref);\r\n    }\r\n    \r\n    \r\n    function setlevelEnd(uint _levelEnd) public    {\r\n        require(gamers.contains(msg.sender), \"You're not playing\");\r\n        require(block.timestamp.sub(startTime) > timeToJoin, \"Not yet\"); \r\n        require(block.timestamp.sub(startTime) < timeToFinish, \"Event finished\");\r\n        \r\n        uint amount = Token(tokenAddress).balanceOf(msg.sender);\r\n        require(amount >= amountToPlay, \"Not enought DFSocial\");\r\n        if(amount >= amountToBonus && bonus[msg.sender] == true){\r\n            levelEnd[msg.sender] = _levelEnd.add(bonusInLevels);\r\n        }else{\r\n            bonus[msg.sender] = false;\r\n            levelEnd[msg.sender] = _levelEnd;   \r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    function end() public onlyOwner    {\r\n        require(started, \"Game didn't start! \");\r\n        require(block.timestamp.sub(startTime) > timeToFinish, \"Not yet\");\r\n        started = false;\r\n        \r\n        address actual;\r\n        for(uint i = 0; i < gamers.length() ; i = i.add(1)){\r\n            actual = gamers.at(i);\r\n            if(levelEnd[actual] > levelStart[actual]){\r\n                diff[actual] = levelEnd[actual].sub(levelStart[actual]);\r\n                totalDiff=totalDiff.add(diff[actual]);\r\n            }else{\r\n                diff[actual] = 0;\r\n            }\r\n           \r\n        }\r\n        for(uint j = 0; j < gamers.length() ; j = j.add(1)){\r\n            actual = gamers.at(j);\r\n            share[actual] = diff[actual].mul(1e20).div(totalDiff);  // % * 1e18\r\n            reward[actual] = TOTAL_REWARD.mul(share[actual]).div(1e20);\r\n        }\r\n        \r\n        //Update updatePositions\r\n        address[] memory jugadores = new address[](gamers.length()) ;\r\n        \r\n        uint nivelMaximo = 0;\r\n        uint indice = 0;\r\n        uint l;\r\n        uint posicion = 1;\r\n        \r\n        \r\n        for(uint k = 0; k< gamers.length(); k = k.add(1)){\r\n            jugadores[k] = gamers.at(k);\r\n        }\r\n        uint aux = gamers.length();\r\n        while(aux > 0){\r\n            nivelMaximo = 0;\r\n            indice = 0;\r\n            for( l = 0; l< aux; l = l.add(1)){\r\n                \r\n                if(diff[jugadores[l]] > nivelMaximo){\r\n                    nivelMaximo = diff[jugadores[l]];\r\n                    indice = l;\r\n                }\r\n                \r\n            }\r\n            \r\n            /*Guardar el maximo */\r\n           \r\n            position[jugadores[indice]]=posicion;\r\n            posicion = posicion.add(1);\r\n            \r\n            /* Borrar el maximo */\r\n            jugadores[indice] = jugadores[aux - 1];\r\n            aux=aux.sub(1);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function claim() public{\r\n        require(gamers.contains(msg.sender), \"You're not playing\");\r\n        require(reward[msg.sender] > 0, \"Nothing to claim\");\r\n        if(bonus[msg.sender]){\r\n            require(Token(tokenAddress).balanceOf(msg.sender) >= amountToBonus, \"Not enought DFSocial (5)\");\r\n        }else{\r\n            require(Token(tokenAddress).balanceOf(msg.sender) >= amountToPlay, \"Not enought DFSocial (1)\");\r\n        }\r\n        \r\n        \r\n        uint _rew = reward[msg.sender];\r\n        reward[msg.sender] = 0;\r\n        require(Token(tokenAddress).transfer(msg.sender, _rew), \"Could not transfer tokens.\");\r\n        emit RewardTransferred (msg.sender, _rew);\r\n        \r\n    }\r\n    \r\n    function getIsGamer(address dir) public view returns (bool){\r\n        return gamers.contains(dir);\r\n    }\r\n    \r\n    function getName(address player) public view returns (string memory )  {\r\n        return names[player];\r\n    }\r\n    \r\n    function aaGetInfo(address player) public view returns (string memory, string memory )  {\r\n        return (names[player], region[player]);\r\n    }\r\n\r\n    function getlevelStart() public view returns (uint)  {\r\n        return levelStart[msg.sender];\r\n    }\r\n    \r\n    function getlevelEnd() public view returns (uint)  {\r\n        return levelEnd[msg.sender];\r\n    }\r\n    \r\n    function getNumGamers() public view returns (uint){\r\n        return gamers.length();\r\n    }\r\n    function getStakersList() \r\n        public \r\n        view\r\n        onlyOwner\r\n        returns (address[] memory,\r\n                 uint[] memory,\r\n                 uint[] memory) {\r\n        \r\n        uint length = gamers.length();\r\n        address[] memory _players = new address[](length);\r\n        uint[] memory niveles = new uint[](length);\r\n        uint[] memory nivelesFin = new uint[](length);\r\n        \r\n        for (uint i = 0; i < length; i = i.add(1)) {\r\n            address gamer = gamers.at(i);\r\n            _players[i] = gamer;\r\n            niveles[i] = levelStart[gamer];\r\n            nivelesFin[i] = levelEnd[gamer];\r\n            \r\n        }\r\n        \r\n        return (_players, niveles, nivelesFin);\r\n    }\r\n    \r\n    \r\n    function deletePlayer(address _player) public onlyOwner{\r\n        require(gamers.contains(_player));\r\n        gamers.remove(_player);\r\n        \r\n        \r\n        levelStart[_player] = 0;\r\n        levelEnd[_player] = 0;\r\n        diff[_player] = 0;\r\n        share[_player] = 0;\r\n        reward[_player] = 0;\r\n        names[_player] = \"\";\r\n        region[_player] = \"\";\r\n        position[_player] = 0;\r\n        bonus[_player] = false;\r\n        ref[_player] = \"\";\r\n        \r\n        \r\n    }\r\n    \r\n    function deletePlayers (address[] memory _players) public onlyOwner{\r\n        for(uint i=0; i < _players.length; i=i.add(1)){\r\n            if(gamers.contains(_players[i])){\r\n                gamers.remove(_players[i]);\r\n                \r\n                levelStart[_players[i]] = 0;\r\n                levelEnd[_players[i]] = 0;\r\n                diff[_players[i]] = 0;\r\n                share[_players[i]] = 0;\r\n                reward[_players[i]] = 0;\r\n                names[_players[i]] = \"\";\r\n                region[_players[i]] = \"\";\r\n                position[_players[i]] = 0;\r\n                bonus[_players[i]] = false;\r\n                ref[_players[i]] = \"\";\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getGamer(uint pos) public view returns (address){\r\n        return gamers.at(pos);\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dir\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"eventStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dir\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"refCodeUsed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"aaGetInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToPlay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusInLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"deletePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"deletePlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"diff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getGamer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dir\",\"type\":\"address\"}],\"name\":\"getIsGamer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumGamers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlevelEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlevelStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_levelStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_levelStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ref\",\"type\":\"string\"}],\"name\":\"joinWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ref\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"region\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelEnd\",\"type\":\"uint256\"}],\"name\":\"setlevelEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPlay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToJoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusInLevels\",\"type\":\"uint256\"}],\"name\":\"startEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToFinishGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToFinishJoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DFSocial_Game1","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ea36ef8cadbaed638e8e5e3fe17cc2763dc5859d9dc4bfdd9ffea92e694a17db"}]}