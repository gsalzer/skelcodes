{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ONXConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./modules/ConfigNames.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ninterface IERC20 {\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\\ninterface IONXPool {\\n\\tfunction collateralToken() external view returns (address);\\n}\\n\\ninterface IAETH {\\n\\tfunction ratio() external view returns (uint256);\\n}\\n\\ncontract ONXConfig is Initializable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeMath for uint8;\\n\\taddress public owner;\\n\\taddress public platform;\\n\\taddress public factory;\\n\\taddress public token;\\n\\taddress public WETH;\\n\\tuint256 public lastPriceBlock;\\n\\tuint256 public DAY = 6400;\\n\\tuint256 public HOUR = 267;\\n\\n\\tstruct ConfigItem {\\n\\t\\t\\tuint min;\\n\\t\\t\\tuint max;\\n\\t\\t\\tuint value;\\n\\t}\\n\\t\\n\\tmapping (address => mapping (bytes32 => ConfigItem)) public poolParams;\\n\\tmapping (bytes32 => ConfigItem) public params;\\n\\tmapping(bytes32 => address) public wallets;\\n\\tmapping(address => uint256) public prices;\\n\\tevent PriceChange(address token, uint256 value);\\n\\tevent ParameterChange(bytes32 key, uint256 value);\\n\\tevent PoolParameterChange(bytes32 key, uint256 value);\\n\\n\\tconstructor() public {\\n\\t\\towner = msg.sender;\\n\\t\\tuint256 id;\\n\\t\\tassembly {\\n\\t\\t\\tid := chainid()\\n\\t\\t}\\n\\t\\tif (id != 1) {\\n\\t\\t\\tDAY = 28800;\\n\\t\\t\\tHOUR = 1200;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress _platform,\\n\\t\\taddress _factory,\\n\\t\\taddress _token,\\n\\t\\taddress _WETH\\n\\t) external initializer {\\n\\t\\trequire(msg.sender == owner, \\\"ONX: Config FORBIDDEN\\\");\\n\\t\\tplatform = _platform;\\n\\t\\tfactory = _factory;\\n\\t\\ttoken = _token;\\n\\t\\tWETH = _WETH;\\n\\n\\t\\tinitParameter();\\n\\t}\\n\\n\\tfunction setWallets(bytes32[] calldata _names, address[] calldata _wallets) external {\\n\\t\\trequire(msg.sender == owner, \\\"ONX: ONLY ONWER\\\");\\n\\t\\trequire(_names.length == _wallets.length, \\\"ONX: WALLETS LENGTH MISMATCH\\\");\\n\\t\\tfor (uint256 i = 0; i < _names.length; i++) {\\n\\t\\t\\twallets[_names[i]] = _wallets[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initParameter() internal {\\n\\t\\t\\trequire(msg.sender == owner, \\\"ONX: Config FORBIDDEN\\\");\\n\\t\\t\\t_setParams(ConfigNames.STAKE_LOCK_TIME, 0, 7 * DAY, 0);\\n\\t\\t\\t_setParams(ConfigNames.CHANGE_PRICE_DURATION, 0, 500, 0);\\n\\t\\t\\t_setParams(ConfigNames.CHANGE_PRICE_PERCENT, 1, 100, 20);\\n\\t\\t\\t_setParams(ConfigNames.DEPOSIT_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.WITHDRAW_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.BORROW_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.REPAY_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.LIQUIDATION_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.REINVEST_ENABLE, 0, 1, 1);\\n\\t\\t\\t_setParams(ConfigNames.POOL_REWARD_RATE, 0, 1e18, 5e16);\\n\\t\\t\\t_setParams(ConfigNames.POOL_ARBITRARY_RATE, 0, 1e18, 9e16);\\n\\t}\\n\\n\\tfunction initPoolParams(address _pool) external {\\n\\t\\t\\trequire(msg.sender == factory, \\\"Config FORBIDDEN\\\");\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_BASE_INTERESTS, 0, 1e18, 2e17);\\t\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_MARKET_FRENZY, 0, 1e18, 2e17);\\t\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_PLEDGE_RATE, 0, 1e18, 75e16);\\t\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_LIQUIDATION_RATE, 0, 1e18, 9e17);\\t\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_MINT_POWER, 0, 100000, 10000);\\t\\n\\t\\t\\t_setPoolParams(_pool, ConfigNames.POOL_MINT_BORROW_PERCENT, 0, 10000, 5000);\\n\\t}\\n\\n\\tfunction _setPoolValue(address _pool, bytes32 _key, uint256 _value) internal {\\n\\t\\tpoolParams[_pool][_key].value = _value;\\n\\t\\temit PoolParameterChange(_key, _value);\\n\\t}\\n\\n\\tfunction _setParams(bytes32 _key, uint _min, uint _max, uint _value) internal {\\n\\t\\tparams[_key] = ConfigItem(_min, _max, _value);\\n\\t\\temit ParameterChange(_key, _value);\\n\\t}\\n\\n\\tfunction _setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _value) internal {\\n\\t\\tpoolParams[_pool][_key] = ConfigItem(_min, _max, _value);\\n\\t\\temit PoolParameterChange(_key, _value);\\n\\t}\\n\\n\\tfunction _setPrice(address _token, uint256 _value) internal {\\n\\t\\tprices[_token] = _value;\\n\\t\\temit PriceChange(_token, _value);\\n\\t}\\n\\n\\tfunction setTokenPrice(address[] calldata _tokens, uint256[] calldata _prices) external {\\n\\t\\tuint256 duration = params[ConfigNames.CHANGE_PRICE_DURATION].value;\\n\\t\\tuint256 maxPercent = params[ConfigNames.CHANGE_PRICE_PERCENT].value;\\n\\t\\trequire(block.number >= lastPriceBlock.add(duration), \\\"ONX: Price Duration\\\");\\n\\t\\trequire(msg.sender == wallets[bytes32(\\\"price\\\")], \\\"ONX: Config FORBIDDEN\\\");\\n\\t\\trequire(_tokens.length == _prices.length, \\\"ONX: PRICES LENGTH MISMATCH\\\");\\n\\t\\tfor (uint256 i = 0; i < _tokens.length; i++) {\\n\\t\\t\\tif (prices[_tokens[i]] == 0) {\\n\\t\\t\\t\\t_setPrice(_tokens[i], _prices[i]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256 currentPrice = prices[_tokens[i]];\\n\\t\\t\\t\\tif (_prices[i] > currentPrice) {\\n\\t\\t\\t\\t\\tuint256 maxPrice = currentPrice.add(currentPrice.mul(maxPercent).div(10000));\\n\\t\\t\\t\\t\\t_setPrice(_tokens[i], _prices[i] > maxPrice ? maxPrice : _prices[i]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuint256 minPrice = currentPrice.sub(currentPrice.mul(maxPercent).div(10000));\\n\\t\\t\\t\\t\\t_setPrice(_tokens[i], _prices[i] < minPrice ? minPrice : _prices[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlastPriceBlock = block.number;\\n\\t}\\n\\n\\tfunction setValue(bytes32 _key, uint256 _value) external {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner,\\n\\t\\t\\t\\\"ONX: ONLY OWNER\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_value <= params[_key].max && params[_key].min <= _value,\\n\\t\\t\\t\\\"ONX: EXCEEDED RANGE\\\"\\n\\t\\t);\\n\\t\\tparams[_key].value = _value;\\n\\t\\temit ParameterChange(_key, _value);\\n\\t}\\n\\n\\tfunction setPoolValue(address _pool, bytes32 _key, uint256 _value) external {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner || msg.sender == platform,\\n\\t\\t\\t\\\"ONX: FORBIDDEN\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_value <= params[_key].max && params[_key].min <= _value,\\n\\t\\t\\t\\\"ONX: EXCEEDED RANGE\\\"\\n\\t\\t);\\n\\t\\t_setPoolValue(_pool, _key, _value);\\n\\t}\\n\\n\\tfunction getValue(bytes32 _key) external view returns (uint256) {\\n\\t\\treturn params[_key].value;\\n\\t}\\n\\n\\tfunction getPoolValue(address _pool, bytes32 _key) external view returns (uint256) {\\n\\t\\treturn poolParams[_pool][_key].value;\\n\\t}\\n\\n\\tfunction setParams(bytes32 _key, uint _min, uint _max, uint _value) external {\\n\\t\\t\\trequire(msg.sender == owner || msg.sender == platform, \\\"ONX: FORBIDDEN\\\");\\n\\t\\t\\t_setParams(_key, _min, _max, _value);\\n\\t}\\n\\n\\tfunction setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _value) external {\\n\\t\\t\\trequire(msg.sender == owner || msg.sender == platform, \\\"ONX: FORBIDDEN\\\");\\n\\t\\t\\t_setPoolParams(_pool, _key, _min, _max, _value);\\n\\t}\\n\\n\\tfunction getParams(bytes32 _key)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\tConfigItem memory item = params[_key];\\n\\t\\treturn (item.min, item.max, item.value);\\n\\t}\\n\\n\\tfunction getPoolParams(address _pool, bytes32 _key)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\tConfigItem memory item = poolParams[_pool][_key];\\n\\t\\treturn (item.min, item.max, item.value);\\n\\t}\\n\\n\\tfunction convertTokenAmount(\\n\\t\\taddress _fromToken,\\t\\t\\t////// usually collateral token\\n\\t\\taddress _toToken,\\t\\t\\t////// usually lend token\\n\\t\\tuint256 _fromAmount\\n\\t) external view returns (uint256 toAmount) {\\n\\t\\t// use original price calculation on other token\\n\\t\\t// use ratio for aETH\\n\\t\\tif (address(WETH) == address(_toToken)) {\\n\\t\\t\\ttoAmount = _fromAmount.mul(1e18).div(IAETH(_fromToken).ratio());\\n\\t\\t} else {\\n\\t\\t\\tuint256 fromPrice = prices[_fromToken];\\n\\t\\t\\tuint256 toPrice = prices[_toToken];\\n\\t\\t\\tuint8 fromDecimals = IERC20(_fromToken).decimals();\\n\\t\\t\\tuint8 toDecimals = IERC20(_toToken).decimals();\\n\\t\\t\\ttoAmount = _fromAmount.mul(fromPrice).div(toPrice);\\n\\t\\t\\tif (fromDecimals > toDecimals) {\\n\\t\\t\\t\\ttoAmount = toAmount.div(10**(fromDecimals.sub(toDecimals)));\\n\\t\\t\\t} else if (toDecimals > fromDecimals) {\\n\\t\\t\\t\\ttoAmount = toAmount.mul(10**(toDecimals.sub(fromDecimals)));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\tuint256 c = a - b;\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\tuint256 c = a / b;\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts with custom message when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/modules/ConfigNames.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\nlibrary ConfigNames {\\n\\t//GOVERNANCE\\n\\tbytes32 public constant STAKE_LOCK_TIME = bytes32(\\\"STAKE_LOCK_TIME\\\");\\n\\tbytes32 public constant CHANGE_PRICE_DURATION = bytes32(\\\"CHANGE_PRICE_DURATION\\\");\\n\\tbytes32 public constant CHANGE_PRICE_PERCENT = bytes32(\\\"CHANGE_PRICE_PERCENT\\\"); // POOL\\n\\tbytes32 public constant POOL_BASE_INTERESTS = bytes32(\\\"POOL_BASE_INTERESTS\\\");\\n\\tbytes32 public constant POOL_MARKET_FRENZY = bytes32(\\\"POOL_MARKET_FRENZY\\\");\\n\\tbytes32 public constant POOL_PLEDGE_RATE = bytes32(\\\"POOL_PLEDGE_RATE\\\");\\n\\tbytes32 public constant POOL_LIQUIDATION_RATE = bytes32(\\\"POOL_LIQUIDATION_RATE\\\");\\n\\tbytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32(\\\"POOL_MINT_BORROW_PERCENT\\\");\\n\\tbytes32 public constant POOL_MINT_POWER = bytes32(\\\"POOL_MINT_POWER\\\");\\n\\tbytes32 public constant POOL_REWARD_RATE = bytes32(\\\"POOL_REWARD_RATE\\\");\\n\\tbytes32 public constant POOL_ARBITRARY_RATE = bytes32(\\\"POOL_ARBITRARY_RATE\\\");\\n\\n\\t//NOT GOVERNANCE\\n\\tbytes32 public constant DEPOSIT_ENABLE = bytes32(\\\"DEPOSIT_ENABLE\\\");\\n\\tbytes32 public constant WITHDRAW_ENABLE = bytes32(\\\"WITHDRAW_ENABLE\\\");\\n\\tbytes32 public constant BORROW_ENABLE = bytes32(\\\"BORROW_ENABLE\\\");\\n\\tbytes32 public constant REPAY_ENABLE = bytes32(\\\"REPAY_ENABLE\\\");\\n\\tbytes32 public constant LIQUIDATION_ENABLE = bytes32(\\\"LIQUIDATION_ENABLE\\\");\\n\\tbytes32 public constant REINVEST_ENABLE = bytes32(\\\"REINVEST_ENABLE\\\");\\n\\tbytes32 public constant POOL_PRICE = bytes32(\\\"POOL_PRICE\\\"); //wallet\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PoolParameterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"convertTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPoolParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"poolParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPoolValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ONXConfig","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}