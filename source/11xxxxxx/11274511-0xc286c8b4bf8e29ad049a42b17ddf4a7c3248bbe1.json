{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract ExchangeDomainV1 {\r\n\r\n    enum AssetType {ETH, ERC20, ERC1155, ERC721, ERC721Deprecated}\r\n\r\n    struct Asset {\r\n        address token;\r\n        uint tokenId;\r\n        AssetType assetType;\r\n    }\r\n\r\n    struct OrderKey {\r\n        /* who signed the order */\r\n        address owner;\r\n        /* random number */\r\n        uint salt;\r\n\r\n        /* what has owner */\r\n        Asset sellAsset;\r\n\r\n        /* what wants owner */\r\n        Asset buyAsset;\r\n    }\r\n\r\n    struct Order {\r\n        OrderKey key;\r\n\r\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint selling;\r\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint buying;\r\n\r\n        /* fee for selling */\r\n        uint sellerFee;\r\n    }\r\n\r\n    /* An ECDSA signature. */\r\n    struct Sig {\r\n        /* v parameter */\r\n        uint8 v;\r\n        /* r parameter */\r\n        bytes32 r;\r\n        /* s parameter */\r\n        bytes32 s;\r\n    }\r\n}\r\n\r\ncontract ExchangeOrdersHolderV1 {\r\n\r\n    mapping(bytes32 => OrderParams) internal orders;\r\n\r\n    struct OrderParams {\r\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint selling;\r\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint buying;\r\n\r\n        /* fee for selling */\r\n        uint sellerFee;\r\n    }\r\n\r\n    function add(ExchangeDomainV1.Order calldata order) external {\r\n        require(msg.sender == order.key.owner, \"order could be added by owner only\");\r\n        bytes32 key = prepareKey(order);\r\n        orders[key] = OrderParams(order.selling, order.buying, order.sellerFee);\r\n    }\r\n\r\n    function exists(ExchangeDomainV1.Order calldata order) external view returns (bool) {\r\n        bytes32 key = prepareKey(order);\r\n        OrderParams memory params = orders[key];\r\n        return params.buying == order.buying && params.selling == order.selling && params.sellerFee == order.sellerFee;\r\n    }\r\n\r\n    function prepareKey(ExchangeDomainV1.Order memory order) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                order.key.sellAsset.token,\r\n                order.key.sellAsset.tokenId,\r\n                order.key.owner,\r\n                order.key.buyAsset.token,\r\n                order.key.buyAsset.tokenId,\r\n                order.key.salt\r\n            ));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExchangeOrdersHolderV1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b16c6b72e7ca769c175d42e2cc6e94fcae2628da897a6980872531275fa1280c"}]}