{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 < 0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    mapping (address => bool) internal _admins;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AdminAdded(address indexed newAdmin);\r\n    event AdminDelet(address indexed dropAdmin);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract\r\n     * to the sender account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        _admins[_owner] = true;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit AdminAdded(_owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns (bool) {\r\n        return _admins[addr];\r\n    }\r\n\r\n    function addAdmin(address admin) public onlyOwner returns (bool) {\r\n        _admins[admin] = true;\r\n        emit AdminAdded(admin);\r\n        return true;\r\n    }\r\n\r\n    function delAdmin(address admin) public onlyOwner returns (bool) {\r\n        _admins[admin] = false;\r\n        emit AdminDelet(admin);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\r\n     * @param receiver The address of the receiver\r\n     * @param amount uint256\r\n     */\r\n    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(receiver != address(0));\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance >= amount);\r\n        assert(_token.transfer(receiver, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     */\r\n    function withdrawEther(address to, uint256 amount) external payable onlyOwner {\r\n        require(to != address(0));\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount);\r\n        to.transfer(amount);\r\n    }\r\n}\r\n\r\nlibrary ERC20AsmFn {\r\n\r\n    function isContract(address addr) internal view {\r\n        assembly {\r\n            if iszero(extcodesize(addr)) { revert(0, 0) }\r\n        }\r\n    }\r\n\r\n    function handleReturnData() internal pure returns (bool result) {\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(address _erc20Addr, address _to, uint256 _value) internal returns (bool result) {\r\n\r\n        // Must be a contract addr first!\r\n        isContract(_erc20Addr);\r\n\r\n        // call return false when something wrong\r\n        require(_erc20Addr.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _value));\r\n\r\n        // handle returndata\r\n        return handleReturnData();\r\n    }\r\n\r\n    function asmTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal returns (bool result) {\r\n\r\n        // Must be a contract addr first!\r\n        isContract(_erc20Addr);\r\n\r\n        // call return false when something wrong\r\n        require(_erc20Addr.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _from, _to, _value));\r\n\r\n        // handle returndata\r\n        return handleReturnData();\r\n    }\r\n\r\n    function asmApprove(address _erc20Addr, address _spender, uint256 _value) internal returns (bool result) {\r\n\r\n        // Must be a contract addr first!\r\n        isContract(_erc20Addr);\r\n\r\n        // call return false when something wrong\r\n        require(_erc20Addr.call(bytes4(keccak256(\"approve(address,uint256)\")), _spender, _value));\r\n\r\n        // handle returndata\r\n        return handleReturnData();\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable{\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20{\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract smartANT is Ownable, Pausable {\r\n    using ERC20AsmFn for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        uint pendingReward;\r\n        uint pendingAntDex;\r\n\r\n        \r\n        mapping (uint8 => Matrix) activeMatrix;\r\n        // mapping(uint8 => bool) activePartners;\r\n    }\r\n    \r\n    struct Matrix {\r\n        bool blocked;\r\n        uint purchased;\r\n        address[] referrals;\r\n    }\r\n    \r\n    uint public lastUserId = 2;\r\n    \r\n    address public rootAddress;\r\n    \r\n    address internal _defaultToken;\r\n    address internal _defaultAntToken;\r\n    \r\n    mapping(uint8 => uint) public matrixPrice;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    // mapping(uint => address) public userIds;\r\n\r\n    \r\n    uint antRate = 10;\r\n    uint antPercentage = 50;\r\n    \r\n    /// @dev event\r\n    event Donate(address indexed donator, uint indexed value);\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event UsdtReward(address indexed from, address indexed receiver, uint8 matrix, uint reward);\r\n    event AntReward(address indexed from, address indexed receiver, uint8 matrix, uint reward);\r\n    \r\n    constructor(address _rootAddress, uint[] memory _matrixPrice, uint _decimals) public {\r\n        uint _len = _matrixPrice.length;\r\n        for (uint8 _i=0; _i<_len; _i++) {\r\n            matrixPrice[_i+1] = _matrixPrice[_i] * 10**_decimals;\r\n        }\r\n        \r\n        rootAddress = _rootAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0),\r\n            pendingReward: uint(0),\r\n            pendingAntDex: uint(0)\r\n        });\r\n        \r\n        users[_rootAddress] = user;\r\n        idToAddress[1] = _rootAddress;\r\n \r\n    }\r\n    \r\n    function() external payable {\r\n        // donate\r\n        emit Donate(msg.sender, msg.value);\r\n    }\r\n    \r\n    function SetUsdtAddress(address token) public onlyAdmin returns (bool) {\r\n        _defaultToken = token;\r\n        return true;\r\n    }\r\n    \r\n    function usdtToken() public view returns(address) {\r\n        return _defaultToken;\r\n    }\r\n    \r\n    function SetAntAddress(address token) public onlyAdmin returns (bool) {\r\n        _defaultAntToken = token;\r\n        return true;\r\n    }\r\n    \r\n    function antToken() public view returns(address) {\r\n        return _defaultAntToken;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function registrationExt(address referrerAddress, uint8 matrix) external {\r\n        require(matrix>0 && matrix<4, \"matrix error\");\r\n        registration(msg.sender, referrerAddress, matrix);\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress, uint8 matrix) private {\r\n        require(!isUserExists(userAddress), \"user exist\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        IERC20 _token = IERC20(_defaultToken);\r\n        require(_token.asmTransferFrom(userAddress, address(this), matrixPrice[matrix]),  \"registration cost insufficient usdt\");\r\n        \r\n        // ensure  !contractAddress \r\n        uint _size;\r\n        assembly {\r\n            _size := extcodesize(userAddress)\r\n        }\r\n        require (_size == 0, \"User address can not be contract address.\");\r\n        \r\n        // init user\r\n        User memory user = User ({\r\n            id:lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0,\r\n            pendingReward: uint(0),\r\n            pendingAntDex: uint(0)\r\n        });\r\n        users[userAddress] = user;\r\n        users[userAddress].activeMatrix[matrix].purchased = users[userAddress].activeMatrix[matrix].purchased.add(matrixPrice[matrix]);\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[referrerAddress].activeMatrix[matrix].referrals.push(userAddress);\r\n        users[referrerAddress].partnersCount += 1;\r\n\r\n        doProfit(userAddress, matrix);\r\n        \r\n        lastUserId += 1;\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n        \r\n\r\n    }\r\n    \r\n    function buyNewMatrix(uint8 matrix) external {\r\n        require(isUserExists(msg.sender), \"user not exist\");\r\n        require(matrix>0 && matrix<4, \"matrix error\");\r\n        IERC20 _token = IERC20(_defaultToken);\r\n        require(_token.asmTransferFrom(msg.sender, address(this), matrixPrice[matrix]),  \"registration cost insufficient usdt\");\r\n\r\n        // 购买matrix\r\n        users[msg.sender].activeMatrix[matrix].purchased = users[msg.sender].activeMatrix[matrix].purchased.add(matrixPrice[matrix]);\r\n        doProfit(msg.sender, matrix);\r\n    }\r\n\r\n    function doProfit(address user, uint8 matrix) private {\r\n        address _receiver = findReceiver(user);\r\n        sendDividends(user, _receiver, matrix);\r\n        sendDividends(user, user, matrix);\r\n    }\r\n\r\n    function pendingRewards(address user) public view returns (uint, uint) {\r\n        return (users[user].pendingReward,\r\n                users[user].pendingAntDex);\r\n    }\r\n\r\n    function usersMatrix(address user, uint8 matrix) public view returns(bool, uint, address[] memory) {\r\n        return (users[user].activeMatrix[matrix].blocked,\r\n                users[user].activeMatrix[matrix].purchased,\r\n                users[user].activeMatrix[matrix].referrals);\r\n    }\r\n\r\n    function findReceiver(address user) private view returns(address) {\r\n        return users[user].referrer;\r\n    }\r\n    \r\n    function sendDividends(address user, address receiver, uint8 matrix) private returns (bool) {\r\n        uint _usdtReward = 0;\r\n        uint _antReward  = 0;\r\n        IERC20 _token = IERC20(_defaultToken);\r\n        IERC20 _antToken = IERC20(_defaultAntToken);\r\n        \r\n        require(user != address(0), \"address invalid.\");\r\n        require(receiver != address(0), \"address invalid.\");\r\n\r\n        if (user  == receiver) {\r\n            _antReward = matrixPrice[matrix].mul(antRate);\r\n            if (matrix != 1) _antReward = _antReward.mul(40).div(100);\r\n            if (paused) {\r\n                users[receiver].pendingAntDex = users[receiver].pendingAntDex.add(_antReward);\r\n            } else {\r\n                require(_antToken.asmTransfer(receiver, _antReward),  \"insufficient usdt\");\r\n            }\r\n\r\n            emit AntReward(user, receiver, matrix, _antReward);\r\n            return true;\r\n        } else {\r\n            uint _count = users[receiver].partnersCount;\r\n            uint _reward = 0;\r\n            if (_count>0 && _count<5) _reward = matrixPrice[matrix].mul(40).div(100);\r\n            if (_count>4 && _count<10) _reward = matrixPrice[matrix].mul(45).div(100);\r\n            if (_count>9) _reward = matrixPrice[matrix].mul(50).div(100);\r\n\r\n            _usdtReward = _reward.mul(uint(100).sub(antPercentage)).div(100);\r\n            _antReward = _reward.mul(antPercentage).div(100).mul(antRate);\r\n\r\n            if (paused) {\r\n                users[receiver].pendingReward = users[receiver].pendingReward.add(_usdtReward);\r\n                users[receiver].pendingAntDex = users[receiver].pendingAntDex.add(_antReward);\r\n            } else {\r\n                // UsdtReward\r\n                require(_token.asmTransfer(receiver, _usdtReward),  \"insufficient usdt\");\r\n                // AntReward\r\n                require(_antToken.asmTransfer(receiver, _antReward),  \"insufficient ant\");\r\n            }\r\n\r\n            emit UsdtReward(user, receiver, matrix, _usdtReward);\r\n            emit AntReward(user, receiver, matrix, _antReward);\r\n        }\r\n    }\r\n\r\n    function withdrawUsdt(uint value) public returns (bool) {\r\n        require(users[msg.sender].pendingReward >= value, \"insufficient usdt\");\r\n        IERC20 _token = IERC20(_defaultToken);\r\n        require(_token.asmTransfer(msg.sender, value),  \"registration cost insufficient usdt\");\r\n        users[msg.sender].pendingReward = users[msg.sender].pendingReward.sub(value);\r\n        return true;\r\n    }\r\n\r\n    function withdrawAnt(uint value) public returns (bool) {\r\n        require(users[msg.sender].pendingAntDex >= value, \"insufficient ant\");\r\n        IERC20 _token = IERC20(_defaultAntToken);\r\n        require(_token.asmTransfer(msg.sender, value),  \"registration cost insufficient ant\");\r\n        users[msg.sender].pendingAntDex = users[msg.sender].pendingAntDex.sub(value);\r\n        return true;\r\n    }\r\n\r\n    function setAntRate(uint8 newRate) public onlyAdmin returns (bool) {\r\n        require(newRate > 0, \"Rate illegal\");\r\n        antRate = newRate;\r\n        return true;\r\n    }\r\n\r\n    function setAntPercentage(uint8 newPercentage) public onlyAdmin returns (bool) {\r\n        require(newPercentage > 0, \"Percentage illegal\");\r\n        antPercentage = newPercentage;\r\n        return true;\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"matrix\",\"type\":\"uint8\"}],\"name\":\"buyNewMatrix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentage\",\"type\":\"uint8\"}],\"name\":\"setAntPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint8\"}],\"name\":\"setAntRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetAntAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetUsdtAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawAnt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"},{\"name\":\"matrix\",\"type\":\"uint8\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"matrixPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"name\":\"pendingAntDex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"matrix\",\"type\":\"uint8\"}],\"name\":\"usersMatrix\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rootAddress\",\"type\":\"address\"},{\"name\":\"_matrixPrice\",\"type\":\"uint256[]\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"UsdtReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AntReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dropAdmin\",\"type\":\"address\"}],\"name\":\"AdminDelet\",\"type\":\"event\"}]","ContractName":"smartANT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fe0f64e316f48a09827e5cc20b36e68c92478981000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d5c059e44036010bcad50175f5a9175f4937db3c8695d426970b75724300bf2"}]}