{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/helpers/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.6.8;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/IUniswapV2Pair.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.6.8;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/abstract/OracleSimple.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.6.8;\r\n\r\n\r\n/**\r\n * @title OracleSimple\r\n * @author Unit Protocol: Artem Zakharov (az@unit.xyz), Alexander Ponomorev (@bcngod)\r\n **/\r\nabstract contract OracleSimple {\r\n    // returns Q112-encoded value\r\n    function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}\r\n}\r\n\r\n\r\n/**\r\n * @title OracleSimplePoolToken\r\n * @author Unit Protocol: Artem Zakharov (az@unit.xyz), Alexander Ponomorev (@bcngod)\r\n **/\r\nabstract contract OracleSimplePoolToken is OracleSimple {\r\n    ChainlinkedOracleSimple public oracleMainAsset;\r\n}\r\n\r\n\r\n/**\r\n * @title ChainlinkedOracleSimple\r\n * @author Unit Protocol: Artem Zakharov (az@unit.xyz), Alexander Ponomorev (@bcngod)\r\n **/\r\nabstract contract ChainlinkedOracleSimple is OracleSimple {\r\n    address public WETH;\r\n    // returns ordinary value\r\n    function ethToUsd(uint ethAmount) public virtual view returns (uint) {}\r\n\r\n    // returns Q112-encoded value\r\n    function assetToEth(address asset, uint amount) public virtual view returns (uint) {}\r\n}\r\n\r\n// File: contracts/impl/ChainlinkedKeep3rV10OraclePoolToken.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ChainlinkedKeep3rV1OraclePoolToken\r\n * @author Unit Protocol: Artem Zakharov (az@unit.xyz), Alexander Ponomorev (@bcngod)\r\n * @dev Calculates the USD price of Uniswap LP tokens\r\n **/\r\ncontract ChainlinkedKeep3rV1OraclePoolToken is OracleSimplePoolToken {\r\n    using SafeMath for uint;\r\n\r\n    uint public immutable Q112 = 2 ** 112;\r\n\r\n    constructor(address _keep3rOracleMainAsset) public {\r\n        oracleMainAsset = ChainlinkedOracleSimple(_keep3rOracleMainAsset);\r\n    }\r\n\r\n    /**\r\n     * @notice This function implements flashloan-resistant logic to determine USD price of Uniswap LP tokens\r\n     * @notice Pair must be registered at Keep3rV1Oracle\r\n     * @param asset The LP token address\r\n     * @param amount Amount of asset\r\n     * @return Q112 encoded price of asset in USD\r\n     **/\r\n    function assetToUsd(\r\n        address asset,\r\n        uint amount\r\n    )\r\n        public\r\n        override\r\n        view\r\n        returns (uint)\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(asset);\r\n        address underlyingAsset;\r\n        if (pair.token0() == oracleMainAsset.WETH()) {\r\n            underlyingAsset = pair.token1();\r\n        } else if (pair.token1() == oracleMainAsset.WETH()) {\r\n            underlyingAsset = pair.token0();\r\n        } else {\r\n            revert(\"Unit Protocol: NOT_REGISTERED_PAIR\");\r\n        }\r\n\r\n        // average price of 1 token in ETH\r\n        uint eAvg = oracleMainAsset.assetToEth(underlyingAsset, 1);\r\n\r\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\r\n        uint aPool; // current asset pool\r\n        uint ePool; // current WETH pool\r\n        if (pair.token0() == underlyingAsset) {\r\n            aPool = uint(_reserve0);\r\n            ePool = uint(_reserve1);\r\n        } else {\r\n            aPool = uint(_reserve1);\r\n            ePool = uint(_reserve0);\r\n        }\r\n\r\n        uint eCurr = ePool.mul(Q112).div(aPool); // current price of 1 token in WETH\r\n        uint ePoolCalc; // calculated WETH pool\r\n\r\n        if (eCurr < eAvg) {\r\n            // flashloan buying WETH\r\n            uint sqrtd = ePool.mul((ePool).mul(9).add(\r\n                aPool.mul(3988000).mul(eAvg).div(Q112)\r\n            ));\r\n            uint eChange = sqrt(sqrtd).sub(ePool.mul(1997)).div(2000);\r\n            ePoolCalc = ePool.add(eChange);\r\n        } else {\r\n            // flashloan selling WETH\r\n            uint a = aPool.mul(eAvg);\r\n            uint b = a.mul(9).div(Q112);\r\n            uint c = ePool.mul(3988000);\r\n            uint sqRoot = sqrt(a.div(Q112).mul(b.add(c)));\r\n            uint d = a.mul(3).div(Q112);\r\n            uint eChange = ePool.sub(d.add(sqRoot).div(2000));\r\n            ePoolCalc = ePool.sub(eChange);\r\n        }\r\n\r\n        uint num = ePoolCalc.mul(2).mul(amount).mul(Q112);\r\n        uint priceInEth = num.div(pair.totalSupply());\r\n\r\n        return oracleMainAsset.ethToUsd(priceInEth);\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        if (x > 3) {\r\n            uint z = x / 2 + 1;\r\n            y = x;\r\n            while (z < y) {\r\n                y = z;\r\n                z = (x / z + z) / 2;\r\n            }\r\n        } else if (x != 0) {\r\n            y = 1;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rOracleMainAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleMainAsset\",\"outputs\":[{\"internalType\":\"contract ChainlinkedOracleSimple\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkedKeep3rV1OraclePoolToken","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc5e2cccf2ee61ef84893ca1e6cbb5636753c21b","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://46cd01fffa3e842940cfde22a983c91525a30dc93c09e0c590e6e4a3b8daeb38"}]}