{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev provides information about the current execution context, including the\r\n * sender of the transaction and its data. while these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with gsn meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * this contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * this module is used through inheritance. it will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not beeg\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev leaves the contract without owner. it will not be possible to call\r\n     * `onlyOwner` functions anymore. can only be called by the current owner.\r\n     *\r\n     * smol note: renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers ownership of the contract to a new account (`newOwner`).\r\n     * can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"new beeg is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev interface of the erc20 standard as defined in the eip. does not include\r\n * the optional functions; to access them see {erc20detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. this is\r\n     * zero by default.\r\n     *\r\n     * this value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * rly beeg ting here: be aware that changing an allowance with this method brings\r\n     * the risk that someone may use both the old and the new allowance by\r\n     * unfortunate transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title roles\r\n * @dev library for managing addresses assigned to a role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"smol guy does not have beeg role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title safemath\r\n * @dev unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // gas optimization: this is cheeper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // see: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"safemath#mul: OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"safemath#div: DIVISION_BY_ZERO\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // there is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"safemath#sub: UNDERFLOW\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"safemath#add: OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"safemath#mod: DIVISION_BY_ZERO\");\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * copyright 2018 zeroex intl.\r\n * licensed under the apache license, version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * you may obtain a copy of the License at\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n * unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * see the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n    /**\r\n     * returns whether the target address is a contract\r\n     * @dev this function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        // XXX currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // see https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // todo check this again before the serenity release, because all addresses will be\r\n        // contracts then.\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n}\r\n\r\ncontract CanTransferRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CanTransferAdded(address indexed account);\r\n    event CanTransferRemoved(address indexed account);\r\n\r\n    Roles.Role private _canTransfer;\r\n\r\n    constructor () internal {\r\n        _addCanTransfer(_msgSender());\r\n    }\r\n\r\n    modifier onlyCanTransfer() {\r\n        require(canTransfer(_msgSender()), \"cant: caller is too smol\");\r\n        _;\r\n    }\r\n\r\n    function canTransfer(address account) public view returns (bool) {\r\n        return _canTransfer.has(account);\r\n    }\r\n\r\n    function addCanTransfer(address account) public onlyCanTransfer {\r\n        _addCanTransfer(account);\r\n    }\r\n\r\n    function renounceCanTransfer() public {\r\n        _removeCanTransfer(_msgSender());\r\n    }\r\n\r\n    function _addCanTransfer(address account) internal {\r\n        _canTransfer.add(account);\r\n        emit CanTransferAdded(account);\r\n    }\r\n\r\n    function _removeCanTransfer(address account) internal {\r\n        _canTransfer.remove(account);\r\n        emit CanTransferRemoved(account);\r\n    }\r\n}\r\n\r\ncontract SmolTing is Ownable, MinterRole, CanTransferRole {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalClaimed;\r\n    string public name = \"smol ting\";\r\n    string public symbol = \"TING\";\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * @dev total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // returns the total claimed smol\r\n    // this is just purely used to display the total smol claimed by users on the frontend\r\n    function totalClaimed() public view returns (uint256) {\r\n        return _totalClaimed;\r\n    }\r\n\r\n    // add smol claimed\r\n    function addClaimed(uint256 _amount) public onlyCanTransfer {\r\n        _totalClaimed = _totalClaimed.add(_amount);\r\n    }\r\n\r\n    // set smol claimed to a custom value, for if we wanna reset the counter anytime\r\n    function setClaimed(uint256 _amount) public onlyCanTransfer {\r\n        require(_amount >= 0, \"cannot be negative\");\r\n        _totalClaimed = _amount;\r\n    }\r\n\r\n    // as this token is non tradable, only minters are allowed to transfer tokens between accounts\r\n    function transfer(address receiver, uint numTokens) public onlyCanTransfer returns (bool) {\r\n        require(numTokens <= _balances[msg.sender]);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(numTokens);\r\n        _balances[receiver] = _balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // as this token is non tradable, only minters are allowed to transfer tokens between accounts\r\n    function transferFrom(address owner, address buyer, uint numTokens) public onlyCanTransfer returns (bool) {\r\n        require(numTokens <= _balances[owner]);\r\n\r\n        _balances[owner] = _balances[owner].sub(numTokens);\r\n        _balances[buyer] = _balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the balance of the specified address.\r\n     * @param owner the address to query the balance of.\r\n     * @return a uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(address _account, uint256 value) public onlyCanTransfer {\r\n        require(_balances[_account] >= value, \"nope, cannot burn more than address has\");\r\n        _burn(_account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function that mints an amount of the token and assigns it to\r\n     * an account. this encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account the account that will receive the created tokens.\r\n     * @param value the amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"erc20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account the account whose tokens will be burnt.\r\n     * @param value the amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"erc20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\n/*\r\n* @dev Contract from where the multiplier is taken.\r\n*/\r\ninterface SmolMuseum {\r\n    function getBoosterForUser(address _address, uint256 _pid) external view returns (uint256);\r\n}\r\n\r\ncontract SmolTingPot is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // how many tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // we do some fancy math here. basically, any point in time, the amount of TINGs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accTingPerShare) - user.rewardDebt\r\n        //\r\n        // whenever a user deposits or withdraws tokens to a pool. Here's what happens:\r\n        //   1. user's pending reward is minted to his/her address.\r\n        //   2. user's `amount` gets updated.\r\n        //   3. user's `lastUpdate` gets updated.\r\n    }\r\n\r\n    // info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 token; // address of token contract.\r\n        uint256 tingsPerDay; // the amount of TINGs per day generated for each token staked\r\n        uint256 maxStake; // the maximum amount of tokens which can be staked in this pool\r\n        uint256 lastUpdateTime; // last timestamp that TINGs distribution occurs.\r\n        uint256 accTingPerShare; // accumulated TINGs per share, times 1e12. See below.\r\n    }\r\n\r\n    // treasury address.\r\n    address public treasuryAddr;\r\n    // info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // record whether the pair has been added.\r\n    mapping(address => uint256) public tokenPID;\r\n\r\n    SmolTing public Ting;\r\n    SmolMuseum public Museum;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(SmolTing _tingAddress, SmolMuseum _smolMuseumAddress, address _treasuryAddr) public {\r\n        Ting = _tingAddress;\r\n        Museum = _smolMuseumAddress;\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // add a new token to the pool. can only be called by the owner.\r\n    // XXX DO NOT add the same token more than once. rewards will be messed up if you do.\r\n    function add(IERC20 _token, uint256 _tingsPerDay, uint256 _maxStake) public onlyOwner {\r\n        require(tokenPID[address(_token)] == 0, \"smoltingpot:duplicate add.\");\r\n        require(address(_token) != address(Ting), \"cannot add ting as a pool\" );\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: _token,\r\n                maxStake: _maxStake,\r\n                tingsPerDay: _tingsPerDay,\r\n                lastUpdateTime: block.timestamp,\r\n                accTingPerShare: 0\r\n            })\r\n        );\r\n        tokenPID[address(_token)] = poolInfo.length;\r\n    }\r\n\r\n    // set a new max stake. value must be greater than previous one,\r\n    // to not give an unfair advantage to people who already staked > new max\r\n    function setMaxStake(uint256 pid, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"max stake cannot be negative\");\r\n        poolInfo[pid].maxStake = amount;\r\n    }\r\n\r\n    // set the amount of TINGs generated per day for each token staked\r\n    function setTingsPerDay(uint256 pid, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"hey smol tings per day cannot be negative\");\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 tingReward = blockTime.sub(pool.lastUpdateTime).mul(pool.tingsPerDay);\r\n\r\n        pool.accTingPerShare = pool.accTingPerShare.add(tingReward.mul(1e12).div(86400));\r\n        pool.lastUpdateTime = block.timestamp;\r\n        pool.tingsPerDay = amount;\r\n    }\r\n\r\n    function _userPoolState(uint256 _pid, address _user) internal view returns (uint256[2] memory) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 accTing = pool.accTingPerShare;\r\n\r\n        uint256 tingReward = blockTime.sub(pool.lastUpdateTime).mul(pool.tingsPerDay);\r\n        accTing = accTing.add(tingReward.mul(1e12).div(86400));                    \r\n    \r\n        uint256 pending = user.amount.mul(accTing).div(1e12).sub(user.rewardDebt);\r\n        return [pending, accTing];\r\n    }\r\n\r\n    // view function to see pending TINGs on frontend.\r\n    function pendingTing(uint256 _pid, address _user) public view returns (uint256) {\r\n        uint256 pending = _userPoolState(_pid, _user)[0];\r\n\t\tuint256 booster = Museum.getBoosterForUser(_user, _pid);\t\t\r\n        if ( booster > 0) \r\n\t\t{\r\n\t\t\tpending = pending.mul(booster.add(1e5));\r\n\t\t\tpending = pending.div(1e5);\r\n\t\t}\r\n        return pending;\r\n    }\r\n\r\n\r\n    // view function to calculate the total pending TINGs of address across all pools\r\n    function totalPendingTing(address _user) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            total = total.add(pendingTing(pid, _user));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    // harvest pending TINGs of a list of pools.\r\n    // be careful of beeg gas spending if you try to harvest a big number of pools\r\n    // might be worth it checking in the frontend for the pool IDs with pending ting for this address and only harvest those\r\n    function rugPull(uint256[] memory _pids) public {\r\n        for (uint i=0; i < _pids.length; i++) {\r\n            withdraw(_pids[i], 0, msg.sender);\r\n        }\r\n    }\r\n\r\n\r\n    // deposit LP tokens to pool for TING allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(_amount.add(user.amount) <= pool.maxStake, \"cannot stake beyond max stake value\");\r\n\r\n        uint256 pending = _userPoolState(_pid, msg.sender)[0];\r\n        uint256 accTing = _userPoolState(_pid, msg.sender)[1];\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(accTing).div(1e12);\r\n\t\t\r\n\t\tuint256 booster = Museum.getBoosterForUser(msg.sender, _pid).add(1e5);\r\n\t\tuint256 pendingWithBooster = pending.mul(booster).div(1e5);\r\n        if (pendingWithBooster > 0) {\r\n            Ting.mint(treasuryAddr, pendingWithBooster.div(40)); // 2.5% TING for the treasury \r\n            Ting.mint(msg.sender, pendingWithBooster);\r\n            Ting.addClaimed(pendingWithBooster);\r\n        }\r\n\t\t\r\n        pool.token.transferFrom(address(msg.sender), address(this), _amount);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // withdraw tokens from pool.\r\n    function withdraw(uint256 _pid, uint256 _amount, address _staker) public {\r\n        address staker = _staker;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][staker];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        require(msg.sender == staker || _amount == 0);\r\n\t\t\r\n\t\tuint256 pending = _userPoolState(_pid, staker)[0];\r\n        uint256 accTing = _userPoolState(_pid, staker)[1];\r\n\r\n        // in case the maxstake has been lowered and address is above maxstake, we force it to withdraw what is above current maxstake\r\n        // user can delay his/her withdraw/harvest to take advantage of a reducing of maxstake,\r\n        // if he/she entered the pool at maxstake before the maxstake reducing occured\r\n        uint256 leftAfterWithdraw = user.amount.sub(_amount);\r\n        if (leftAfterWithdraw > pool.maxStake) {\r\n            _amount = _amount.add(leftAfterWithdraw - pool.maxStake);\r\n        }\r\n\t\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(accTing).div(1e12);\r\n\t\t\r\n\t\tuint256 booster = Museum.getBoosterForUser(staker, _pid).add(1e5);\r\n\t\tuint256 pendingWithBooster = pending.mul(booster).div(1e5);\r\n        if(pendingWithBooster > 0)\r\n        {\r\n            Ting.mint(treasuryAddr, pendingWithBooster.div(40));\r\n            Ting.mint(staker, pendingWithBooster);\r\n            Ting.addClaimed(pendingWithBooster);\r\n        }\r\n\r\n        pool.token.transfer(address(staker), _amount);\r\n        emit Withdraw(staker, _pid, _amount);\r\n    }\r\n\r\n    // withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"emergncy withdrawal not good\");\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.token.transfer(address(msg.sender), _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n\r\n    // update dev address by the previous dev.\r\n    function treasury(address _treasuryAddr) public {\r\n        require(msg.sender == treasuryAddr, \"must be called from current treasury address\");\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    // update Museum address if the booster logic changed.\r\n    function updateSmolMuseumAddress(SmolMuseum _smolMuseumAddress) public onlyOwner{\r\n        Museum = _smolMuseumAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SmolTing\",\"name\":\"_tingAddress\",\"type\":\"address\"},{\"internalType\":\"contract SmolMuseum\",\"name\":\"_smolMuseumAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"Museum\",\"outputs\":[{\"internalType\":\"contract SmolMuseum\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Ting\",\"outputs\":[{\"internalType\":\"contract SmolTing\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tingsPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tingsPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTingPerShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"rugPull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTingsPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalPendingTing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract SmolMuseum\",\"name\":\"_smolMuseumAddress\",\"type\":\"address\"}],\"name\":\"updateSmolMuseumAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmolTingPot","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000006d699fd31abcb651f2f49a4526160f9281076d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca600000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000006d699fd31abcb651f2f49a4526160f9281076d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://03320546cf6f225e673d2c9fcf4f1a170dd99818962a1878708bb36640dbee80"}]}