{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CreamETH2Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.11;\\n\\ninterface PoolInterface {\\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\\n}\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint);\\n    function allowance(address, address) external view returns (uint);\\n    function approve(address, uint) external returns (bool);\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\\ncontract CreamETH2Proxy {\\n\\n    TokenInterface public WETH;\\n    TokenInterface public CRETH2;\\n    PoolInterface public POOL;\\n\\n    constructor(address _WETH, address _CRETH2, address _POOL) public {\\n        WETH = TokenInterface(_WETH);\\n        CRETH2 = TokenInterface(_CRETH2);\\n        POOL = PoolInterface(_POOL);\\n    }\\n\\n    function swapExactAmountIn(\\n        uint minAmountOut,\\n        uint maxPrice\\n    ) external payable returns (uint tokenAmountOut, uint spotPriceAfter) {\\n        WETH.deposit{value: msg.value}();\\n        if (WETH.allowance(address(this), address(POOL)) > 0) {\\n            WETH.approve(address(POOL), 0);\\n        }\\n        WETH.approve(address(POOL), msg.value);\\n\\n        (tokenAmountOut, spotPriceAfter) = POOL.swapExactAmountIn(\\n                                    address(WETH),\\n                                    msg.value,\\n                                    address(CRETH2),\\n                                    minAmountOut,\\n                                    maxPrice\\n                                );\\n\\n        transferAll(CRETH2, tokenAmountOut);\\n        transferAll(WETH, WETH.balanceOf(address(this)));\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    ) external payable returns (uint tokenAmountIn, uint spotPriceAfter) {\\n        WETH.deposit{value: msg.value}();\\n        if (WETH.allowance(address(this), address(POOL)) > 0) {\\n            WETH.approve(address(POOL), 0);\\n        }\\n        WETH.approve(address(POOL), msg.value);\\n\\n        (tokenAmountIn, spotPriceAfter) = POOL.swapExactAmountOut(\\n                                            address(WETH),\\n                                            msg.value,\\n                                            address(CRETH2),\\n                                            tokenAmountOut,\\n                                            maxPrice\\n                                        );\\n\\n        transferAll(CRETH2, tokenAmountOut);\\n        transferAll(WETH, WETH.balanceOf(address(this)));\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (address(token) == address(WETH)) {\\n            WETH.withdraw(amount);\\n            (bool xfer,) = msg.sender.call{value: amount}(\\\"\\\");\\n            require(xfer, \\\"ERR_ETH_FAILED\\\");\\n        } else {\\n            require(token.transfer(msg.sender, amount), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == address(WETH)); // only accept ETH via fallback from the WETH contract\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CRETH2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_POOL\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CRETH2\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract PoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"swapExactAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"swapExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CreamETH2Proxy","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000cbc1065255cbc3ab41a6868c22d1f1c573ab89fd000000000000000000000000bc338ca728a5d60df7bc5e3af5b6df9db697d942","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}