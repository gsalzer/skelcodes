{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n\r\ninterface cETHInterface {\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function redeem(uint256 amount) external returns (uint256);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n}\r\n\r\n\r\ninterface cETHRedeemerInterface {\r\n    function redeem(uint256 amount) external returns (uint256 receivedEther);\r\n    function redeemUnderlying(uint256 amount) external returns (uint256 redeemedCEth);\r\n    function redeemFor(address from, address to, uint256 amount) external returns (uint256 receivedEther);\r\n    function redeemUnderlyingFor(address from, address to, uint256 amount) external returns (uint256 redeemedCEth);\r\n}\r\n\r\n\r\n/// Redeem cETH for ETH in cases where ETH payments cannot be accepted due to\r\n/// the 2300 gas stipend used for ETH transfers on cETH. Approve this contract\r\n/// to move cETH before calling.\r\n/// @author 0age\r\ncontract cETHRedeemer is cETHRedeemerInterface {\r\n\tcETHInterface public constant cETH = cETHInterface(\r\n\t\t0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5\r\n\t);\r\n\r\n    receive() external payable {\r\n    \tif (msg.sender != address(cETH)) {\r\n    \t\trevert(\"Only cETH can send Ether to this contract.\");\r\n    \t}\r\n    }\r\n\r\n    function redeem(\r\n    \tuint256 amount\r\n    ) external override returns (uint256 receivedEther) {\r\n    \treceivedEther = _redeemFor(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    function redeemUnderlying(\r\n    \tuint256 amount\r\n    ) external override returns (uint256 redeemedCEth) {\r\n     \tredeemedCEth = _convertEthToCEth(amount);\r\n    \t_redeemFor(msg.sender, msg.sender, redeemedCEth);\r\n    }\r\n\r\n    function redeemFor(\r\n    \taddress from, address to, uint256 amount\r\n    ) external override returns (uint256 receivedEther) {\r\n    \treceivedEther = _redeemFor(from, to, amount);\r\n    }\r\n\r\n    function redeemUnderlyingFor(\r\n    \taddress from, address to, uint256 amount\r\n    ) external override returns (uint256 redeemedCEth) {\r\n    \tredeemedCEth = _convertEthToCEth(amount);\r\n    \t_redeemFor(from, to, redeemedCEth);\r\n    }\r\n\r\n    function _redeemFor(\r\n    \taddress from, address to, uint256 amount\r\n    ) internal returns (uint256 receivedEther) {\r\n    \trequire(\r\n    \t\tcETH.transferFrom(from, address(this), amount),\r\n    \t\t\"Transfer in failed... is allowance set on cETH for this contract?\"\r\n    \t);\r\n    \trequire(\r\n    \t\tcETH.redeem(amount) == 0,\r\n    \t\t\"Redeeming cETH failed.\"\r\n    \t);\r\n\r\n    \treceivedEther = address(this).balance;\r\n        (bool ok, ) = to.call{value: receivedEther}(\"\");\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    function _convertEthToCEth(uint256 ethAmount) internal returns (uint256 cETHAmount) {\r\n    \tcETHAmount = (ethAmount * 1e18) / cETH.exchangeRateCurrent();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"contract cETHInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedEther\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedEther\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedCEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlyingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedCEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"cETHRedeemer","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e686f21ed858c8faaaafac671dfb179d1d0c3d722cd576ed3c64b9a6e200088"}]}