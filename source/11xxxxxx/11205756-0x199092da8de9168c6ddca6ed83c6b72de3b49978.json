{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AirdropToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport './interfaces/IJDFIStakingPool.sol';\\n\\ncontract AirdropToken is ERC20 {\\n  address private immutable _deployer;\\n  address private _jdfiStakingPool;\\n\\n  constructor () ERC20('JusDeFi Airdrop', 'JDFI/A') {\\n    _deployer = msg.sender;\\n    _mint(msg.sender, 10020 ether);\\n  }\\n\\n  /**\\n   * @notice set the JDFIStakingPool address once it is deployed\\n   * @param jdfiStakingPool JDFIStakingPool address\\n   */\\n  function setJDFIStakingPool (address jdfiStakingPool) external {\\n    require(msg.sender == _deployer, 'JusDeFi: sender must be deployer');\\n    require(_jdfiStakingPool == address(0), 'JusDeFi: JDFI Staking Pool contract has already been set');\\n    _jdfiStakingPool = jdfiStakingPool;\\n  }\\n\\n  /**\\n   * @notice airdrop tokens to given accounts in given quantities\\n   * @dev _mint and _burn are used in place of _transfer due to gas considerations\\n   * @param accounts airdrop recipients\\n   * @param amounts airdrop quantities\\n   */\\n  function airdrop (address[] calldata accounts, uint[] calldata amounts) external {\\n    require(accounts.length == amounts.length, 'JusDeFi: array lengths do not match');\\n\\n    uint length = accounts.length;\\n    uint initialSupply = totalSupply();\\n\\n    for (uint i; i < length; i++) {\\n      _mint(accounts[i], amounts[i]);\\n    }\\n\\n    _burn(msg.sender, totalSupply() - initialSupply);\\n  }\\n\\n  /**\\n   * @notice exchange tokens for locked JDFI/S\\n   * @dev JDFI/S is locked in JDFIStakingPool _beforeTokenTransfer hook\\n   */\\n  function exchange () external {\\n    uint amount = balanceOf(msg.sender);\\n    _burn(msg.sender, amount);\\n    IJDFIStakingPool(_jdfiStakingPool).stake(amount);\\n    IJDFIStakingPool(_jdfiStakingPool).transfer(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJDFIStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport './IStakingPool.sol';\\n\\ninterface IJDFIStakingPool is IStakingPool {\\n  function stake (uint amount) external;\\n  function unstake (uint amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStakingPool is IERC20 {\\n  function distributeRewards (uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/JusDeFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport '@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol';\\n\\nimport './interfaces/IJusDeFi.sol';\\nimport './interfaces/IStakingPool.sol';\\nimport './interfaces/IJDFIStakingPool.sol';\\nimport './FeePool.sol';\\nimport './DevStakingPool.sol';\\nimport './JDFIStakingPool.sol';\\nimport './UNIV2StakingPool.sol';\\n\\ncontract JusDeFi is IJusDeFi, ERC20 {\\n  using FixedPoint for FixedPoint.uq112x112;\\n  using FixedPoint for FixedPoint.uq144x112;\\n  using SafeMath for uint;\\n\\n  // _weth and _uniswapPair cannot be immutable because they are referenced in _beforeTokenTransfer\\n  address private _weth;\\n  address private immutable _uniswapRouter;\\n  address public _uniswapPair;\\n\\n  address payable override public _feePool;\\n  address public immutable _devStakingPool;\\n  address public immutable _jdfiStakingPool;\\n  address public immutable _univ2StakingPool;\\n\\n  uint private constant LIQUIDITY_EVENT_PERIOD = 3 days;\\n  bool public _liquidityEventOpen;\\n  uint public immutable _liquidityEventClosedAt;\\n\\n  mapping (address => bool) private _implicitApprovalWhitelist;\\n\\n  uint private constant RESERVE_TEAM = 1980 ether;\\n  uint private constant RESERVE_JUSTICE = 10020 ether;\\n  uint private constant RESERVE_LIQUIDITY_EVENT = 10000 ether;\\n  uint private constant REWARDS_SEED = 2000 ether;\\n\\n  uint private constant JDFI_PER_ETH = 4;\\n\\n  uint private constant ORACLE_PERIOD = 5 minutes;\\n\\n  FixedPoint.uq112x112 private _priceAverage;\\n  uint private _priceCumulativeLast;\\n  uint32 private _blockTimestampLast;\\n\\n  constructor (\\n    address airdropToken,\\n    address uniswapRouter\\n  )\\n    ERC20('JusDeFi', 'JDFI')\\n  {\\n    address weth = IUniswapV2Router02(uniswapRouter).WETH();\\n    _weth = weth;\\n\\n    address uniswapPair = IUniswapV2Factory(\\n      IUniswapV2Router02(uniswapRouter).factory()\\n    ).createPair(weth, address(this));\\n\\n    _uniswapRouter = uniswapRouter;\\n    _uniswapPair = uniswapPair;\\n\\n    address devStakingPool = address(new DevStakingPool(weth));\\n    _devStakingPool = devStakingPool;\\n    address jdfiStakingPool = address(new JDFIStakingPool(airdropToken, RESERVE_LIQUIDITY_EVENT, weth, devStakingPool));\\n    _jdfiStakingPool = jdfiStakingPool;\\n    address univ2StakingPool = address(new UNIV2StakingPool(uniswapPair, uniswapRouter));\\n    _univ2StakingPool = univ2StakingPool;\\n\\n    // mint staked JDFI after-the-fact to match minted JDFI/S\\n    _mint(jdfiStakingPool, RESERVE_LIQUIDITY_EVENT);\\n\\n    // mint JDFI for conversion to locked JDFI/S\\n    _mint(airdropToken, RESERVE_JUSTICE);\\n\\n    // mint team JDFI\\n    _mint(msg.sender, RESERVE_TEAM);\\n\\n    // transfer all minted JDFI/E to sender\\n    IStakingPool(devStakingPool).transfer(msg.sender, IStakingPool(devStakingPool).balanceOf(address(this)));\\n\\n    _liquidityEventClosedAt = block.timestamp + LIQUIDITY_EVENT_PERIOD;\\n    _liquidityEventOpen = true;\\n\\n    // enable trusted addresses to transfer tokens without approval\\n    _implicitApprovalWhitelist[jdfiStakingPool] = true;\\n    _implicitApprovalWhitelist[univ2StakingPool] = true;\\n    _implicitApprovalWhitelist[uniswapRouter] = true;\\n  }\\n\\n  /**\\n   * @notice get average JDFI price over the last ORACLE_PERIOD\\n   * @dev adapted from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\\n   * @param amount quantity of ETH used for purchase\\n   * @return uint quantity of JDFI purchased, or zero if ORACLE_PERIOD has passed since las tupdate\\n   */\\n  function consult (uint amount) override external view returns (uint) {\\n    if (block.timestamp - uint(_blockTimestampLast) > ORACLE_PERIOD) {\\n      return 0;\\n    } else {\\n      return _priceAverage.mul(amount).decode144();\\n    }\\n  }\\n\\n  /**\\n   * @notice OpenZeppelin ERC20#transferFrom: enable transfers by staking pools without allowance\\n   * @param from sender\\n   * @param to recipient\\n   * @param amount quantity transferred\\n   */\\n  function transferFrom (address from, address to, uint amount) override(IERC20, ERC20) public returns (bool) {\\n    if (_implicitApprovalWhitelist[msg.sender]) {\\n      _transfer(from, to, amount);\\n      return true;\\n    } else {\\n      return super.transferFrom(from, to, amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice burn tokens held by sender\\n   * @param amount quantity of tokens to burn\\n   */\\n  function burn (uint amount) override external {\\n    _burn(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice transfer tokens, deducting fee\\n   * @param account recipient of transfer\\n   * @param amount quantity of tokens to transfer, before deduction\\n   */\\n  function burnAndTransfer (address account, uint amount) override external {\\n    uint withheld = FeePool(_feePool).calculateWithholding(amount);\\n    _transfer(msg.sender, _feePool, withheld);\\n    _burn(_feePool, withheld / 2);\\n    _transfer(msg.sender, account, amount - withheld);\\n  }\\n\\n  /**\\n   * @notice deposit ETH to receive JDFI/S at rate of 1:4\\n   */\\n  function liquidityEventDeposit () external payable {\\n    require(_liquidityEventOpen, 'JusDeFi: liquidity event has closed');\\n\\n    try IStakingPool(_jdfiStakingPool).transfer(msg.sender, msg.value * JDFI_PER_ETH) returns (bool) {} catch {\\n      revert('JusDeFi: deposit amount surpasses available supply');\\n    }\\n  }\\n\\n  /**\\n   * @notice close liquidity event, add Uniswap liquidity, burn undistributed JDFI\\n   */\\n  function liquidityEventClose () external {\\n    require(block.timestamp >= _liquidityEventClosedAt, 'JusDeFi: liquidity event still in progress');\\n    require(_liquidityEventOpen, 'JusDeFi: liquidity event has already ended');\\n    _liquidityEventOpen = false;\\n\\n    uint remaining = IStakingPool(_jdfiStakingPool).balanceOf(address(this));\\n    uint distributed = RESERVE_LIQUIDITY_EVENT - remaining;\\n\\n    // require minimum deposit to avoid nonspecific Uniswap error: ds-math-sub-underflow\\n    require(distributed >= 1 ether, 'JusDeFi: insufficient liquidity added');\\n\\n    // prepare Uniswap for minting my FeePool\\n    IUniswapV2Pair pair = IUniswapV2Pair(_uniswapPair);\\n\\n    address weth = _weth;\\n    IWETH(weth).deposit{ value: distributed / JDFI_PER_ETH }();\\n    IWETH(weth).transfer(address(pair), distributed / JDFI_PER_ETH);\\n    _mint(address(pair), distributed);\\n\\n    _feePool = payable(new FeePool(\\n      _jdfiStakingPool,\\n      _univ2StakingPool,\\n      _uniswapRouter,\\n      _uniswapPair\\n    ));\\n\\n    // UNI-V2 has been minted, so price is available\\n    _priceCumulativeLast =  address(this) > _weth ? pair.price0CumulativeLast() : pair.price1CumulativeLast();\\n    _blockTimestampLast = UniswapV2OracleLibrary.currentBlockTimestamp();\\n\\n    // unstake and burn (including fee accrued on unstaking)\\n    IJDFIStakingPool(_jdfiStakingPool).unstake(remaining);\\n    _burn(address(this), balanceOf(address(this)));\\n    _burn(_feePool, balanceOf(_feePool));\\n\\n    // seed staking pools\\n    _mint(_feePool, REWARDS_SEED);\\n  }\\n\\n  /**\\n   * @notice OpenZeppelin ERC20 hook: prevent transfers during liquidity event, update oracle price\\n   * @dev adapted from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\\n   * @param from sender\\n   * @param to recipient\\n   * @param amount quantity transferred\\n   */\\n  function _beforeTokenTransfer (address from, address to, uint amount) override internal {\\n    require(!_liquidityEventOpen, 'JusDeFi: liquidity event still in progress');\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    address pair = _uniswapPair;\\n\\n    if (from == pair || (to == pair && from != address(0))) {\\n      (\\n        uint price0Cumulative,\\n        uint price1Cumulative,\\n        uint32 blockTimestamp\\n      ) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n\\n      uint32 timeElapsed = blockTimestamp - _blockTimestampLast; // overflow is desired\\n\\n      // only store the ETH -> JDFI price\\n      uint priceCumulative = address(this) > _weth ? price0Cumulative : price1Cumulative;\\n\\n      if (timeElapsed >= ORACLE_PERIOD) {\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        _priceAverage = FixedPoint.uq112x112(uint224((priceCumulative - _priceCumulativeLast) / timeElapsed));\\n\\n        _priceCumulativeLast = priceCumulative;\\n        _blockTimestampLast = blockTimestamp;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/FixedPoint.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJusDeFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IJusDeFi is IERC20 {\\n  function consult (uint amount) external view returns (uint);\\n  function burn (uint amount) external;\\n  function burnAndTransfer (address account, uint amount) external;\\n  function _feePool () external view returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/FeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\nimport './interfaces/IJusDeFi.sol';\\nimport './interfaces/IStakingPool.sol';\\n\\ncontract FeePool {\\n  address private immutable _jusdefi;\\n\\n  address private immutable _uniswapRouter;\\n  address private immutable _uniswapPair;\\n\\n  address public immutable _jdfiStakingPool;\\n  address public immutable _univ2StakingPool;\\n\\n  // fee specified in basis points\\n  uint public _fee; // initialized at 0; not set until #liquidityEventClose\\n  uint private constant FEE_BASE = 1000;\\n  uint private constant BP_DIVISOR = 10000;\\n\\n  // allow slippage of 0.6%\\n  uint private constant BUYBACK_SLIPPAGE = 60;\\n\\n  uint private constant UNIV2_STAKING_MULTIPLIER = 3;\\n\\n  uint private immutable _initialUniTotalSupply;\\n\\n  uint public _votesIncrease;\\n  uint public _votesDecrease;\\n\\n  uint private _lastBuybackAt;\\n  uint private _lastRebaseAt;\\n\\n  constructor (\\n    address jdfiStakingPool,\\n    address univ2StakingPool,\\n    address uniswapRouter,\\n    address uniswapPair\\n  ) {\\n    _jusdefi = msg.sender;\\n    _jdfiStakingPool = jdfiStakingPool;\\n    _univ2StakingPool = univ2StakingPool;\\n    _uniswapRouter = uniswapRouter;\\n    _uniswapPair = uniswapPair;\\n\\n    // approve router to handle UNI-V2 for buybacks\\n    IUniswapV2Pair(uniswapPair).approve(uniswapRouter, type(uint).max);\\n\\n    _initialUniTotalSupply = IUniswapV2Pair(uniswapPair).mint(address(this)) + IUniswapV2Pair(uniswapPair).MINIMUM_LIQUIDITY();\\n    _fee = FEE_BASE;\\n  }\\n\\n  receive () external payable {\\n    require(msg.sender == _uniswapRouter || msg.sender == _jdfiStakingPool, 'JusDeFi: invalid ETH deposit');\\n  }\\n\\n  /**\\n   * @notice calculate quantity of JDFI to withhold (burned and as rewards) on unstake\\n   * @param amount quantity untsaked\\n   * @return unt quantity withheld\\n   */\\n  function calculateWithholding (uint amount) external view returns (uint) {\\n    return amount * _fee / BP_DIVISOR;\\n  }\\n\\n  /**\\n   * @notice vote for weekly fee changes by sending ETH\\n   * @param increase whether vote is to increase or decrease the fee\\n   */\\n  function vote (bool increase) external payable {\\n    if (increase) {\\n      _votesIncrease += msg.value;\\n    } else {\\n      _votesDecrease += msg.value;\\n    }\\n  }\\n\\n  /**\\n   * @notice withdraw Uniswap liquidity in excess of initial amount, purchase and burn JDFI\\n   */\\n  function buyback () external {\\n    require(block.timestamp / (1 days) % 7 == 1, 'JusDeFi: buyback must take place on Friday (UTC)');\\n    require(block.timestamp - _lastBuybackAt > 1 days, 'JusDeFi: buyback already called this week');\\n    _lastBuybackAt = block.timestamp;\\n\\n    address[] memory path = new address[](2);\\n    path[0] = IUniswapV2Router02(_uniswapRouter).WETH();\\n    path[1] = _jusdefi;\\n\\n    // check output to fail fast if price has changed beyond allowed limits\\n\\n    uint[] memory outputs = IUniswapV2Router02(_uniswapRouter).getAmountsOut(\\n      1e9,\\n      path\\n    );\\n\\n    uint requiredOutput = IJusDeFi(_jusdefi).consult(1e9);\\n\\n    require(outputs[1] * (BP_DIVISOR + BUYBACK_SLIPPAGE) / BP_DIVISOR  >= requiredOutput, 'JusDeFi: buyback price slippage too high');\\n\\n    uint initialBalance = IJusDeFi(_jusdefi).balanceOf(address(this));\\n\\n    // remove liquidity in excess of original amount\\n\\n    uint initialUniTotalSupply = _initialUniTotalSupply;\\n    uint uniTotalSupply = IUniswapV2Pair(_uniswapPair).totalSupply();\\n\\n    if (uniTotalSupply > initialUniTotalSupply) {\\n      uint delta = Math.min(\\n        IUniswapV2Pair(_uniswapPair).balanceOf(address(this)),\\n        uniTotalSupply - initialUniTotalSupply\\n      );\\n\\n      if (delta > 0) {\\n        // minimum output not relevant due to earlier check\\n        IUniswapV2Router02(_uniswapRouter).removeLiquidityETH(\\n          _jusdefi,\\n          delta,\\n          0,\\n          0,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n\\n    // buyback JDFI using ETH from withdrawn liquidity and fee votes\\n\\n    if (address(this).balance > 0) {\\n      // minimum output not relevant due to earlier check\\n      IUniswapV2Router02(_uniswapRouter).swapExactETHForTokens{\\n        value: address(this).balance\\n      }(\\n        0,\\n        path,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    IJusDeFi(_jusdefi).burn(IJusDeFi(_jusdefi).balanceOf(address(this)) - initialBalance);\\n  }\\n\\n  /**\\n   * @notice distribute collected fees to staking pools\\n   */\\n  function rebase () external {\\n    require(block.timestamp / (1 days) % 7 == 3, 'JusDeFi: rebase must take place on Sunday (UTC)');\\n    require(block.timestamp - _lastRebaseAt > 1 days, 'JusDeFi: rebase already called this week');\\n    _lastRebaseAt = block.timestamp;\\n\\n    // skim to prevent manipulation of JDFI reserve\\n    IUniswapV2Pair(_uniswapPair).skim(address(this));\\n    uint rewards = IJusDeFi(_jusdefi).balanceOf(address(this));\\n\\n    uint jdfiStakingPoolStaked = IERC20(_jdfiStakingPool).totalSupply();\\n    uint univ2StakingPoolStaked = IJusDeFi(_jusdefi).balanceOf(_uniswapPair) * IERC20(_univ2StakingPool).totalSupply() / IUniswapV2Pair(_uniswapPair).totalSupply();\\n\\n    uint weight = jdfiStakingPoolStaked + univ2StakingPoolStaked * UNIV2_STAKING_MULTIPLIER;\\n\\n    // if weight is zero, staked amounts are also zero, avoiding zero-division error\\n\\n    if (jdfiStakingPoolStaked > 0) {\\n      IStakingPool(_jdfiStakingPool).distributeRewards(\\n        rewards * jdfiStakingPoolStaked / weight\\n      );\\n    }\\n\\n    if (univ2StakingPoolStaked > 0) {\\n      IStakingPool(_univ2StakingPool).distributeRewards(\\n        rewards * univ2StakingPoolStaked * UNIV2_STAKING_MULTIPLIER / weight\\n      );\\n    }\\n\\n    // set fee for the next week\\n\\n    uint increase = _votesIncrease;\\n    uint decrease = _votesDecrease;\\n\\n    if (increase > decrease) {\\n      _fee = FEE_BASE + _sigmoid(increase - decrease);\\n    } else if (increase < decrease) {\\n      _fee = FEE_BASE - _sigmoid(decrease - increase);\\n    } else {\\n      _fee = FEE_BASE;\\n    }\\n\\n    _votesIncrease = 0;\\n    _votesDecrease = 0;\\n  }\\n\\n  /**\\n   * @notice calculate fee offset based on net votes\\n   * @dev input is a uint, therefore sigmoid is only implemented for positive values\\n   * @return uint fee offset from FEE_BASE\\n   */\\n  function _sigmoid (uint net) private pure returns (uint) {\\n    return FEE_BASE * net / (3 ether + net);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DevStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './StakingPool.sol';\\n\\ncontract DevStakingPool is StakingPool {\\n  address private immutable _weth;\\n\\n  constructor (address weth) ERC20('JDFI ETH Fund', 'JDFI/E') {\\n    _weth = weth;\\n    _ignoreWhitelist();\\n    _mint(msg.sender, 10000 ether);\\n  }\\n\\n  /**\\n   * @notice withdraw earned WETH rewards\\n   */\\n  function withdraw () external {\\n    IERC20(_weth).transfer(msg.sender, rewardsOf(msg.sender));\\n    _clearRewards(msg.sender);\\n  }\\n\\n  /**\\n   * @notice distribute rewards to stakers\\n   * @param amount quantity to distribute\\n   */\\n  function distributeRewards (uint amount) override external {\\n    IERC20(_weth).transferFrom(msg.sender, address(this), amount);\\n    _distributeRewards(amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/JDFIStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\n\\nimport './interfaces/IJusDeFi.sol';\\nimport './interfaces/IJDFIStakingPool.sol';\\nimport './StakingPool.sol';\\n\\ncontract JDFIStakingPool is IJDFIStakingPool, StakingPool {\\n  using Address for address payable;\\n\\n  address private immutable _jusdefi;\\n  // _airdropToken cannot be immutable because it is referenced in _beforeTokenTransfer\\n  address private _airdropToken;\\n  address private immutable _weth;\\n  address private immutable _devStakingPool;\\n\\n  mapping (address => uint) private _lockedBalances;\\n\\n  uint private constant JDFI_PER_ETH = 4;\\n\\n  constructor (\\n    address airdropToken,\\n    uint initialSupply,\\n    address weth,\\n    address devStakingPool\\n  ) ERC20('Staked JDFI', 'JDFI/S') {\\n    _jusdefi = msg.sender;\\n    _airdropToken = airdropToken;\\n    _weth = weth;\\n    _devStakingPool = devStakingPool;\\n\\n    _addToWhitelist(airdropToken);\\n    _addToWhitelist(msg.sender);\\n\\n    // initialSupply is minted before receipt of JDFI; see JusDeFi constructor\\n    _mint(msg.sender, initialSupply);\\n\\n    // approve devStakingPool to spend WETH\\n    IERC20(weth).approve(devStakingPool, type(uint).max);\\n  }\\n\\n  /**\\n   * @notice query locked balance of an address\\n   * @param account address to query\\n   * @return uint locked balance of account\\n   */\\n  function lockedBalanceOf (address account) public view returns (uint) {\\n    return _lockedBalances[account];\\n  }\\n\\n  /**\\n   * @notice stake earned rewards without incurring burns\\n   */\\n  function compound () external {\\n    uint amount = rewardsOf(msg.sender);\\n    _clearRewards(msg.sender);\\n    _mint(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice deposit and stake JDFI\\n   * @param amount quantity of JDFI to stake\\n   */\\n  function stake (uint amount) override external {\\n    IJusDeFi(_jusdefi).transferFrom(msg.sender, address(this), amount);\\n    _mint(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice unstake and withdraw JDFI\\n   * @param amount quantity of tokens to unstake\\n   */\\n  function unstake (uint amount) override external {\\n    _burn(msg.sender, amount);\\n    IJusDeFi(_jusdefi).burnAndTransfer(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice withdraw earned JDFI rewards\\n   */\\n  function withdraw () external {\\n    IJusDeFi(_jusdefi).burnAndTransfer(msg.sender, rewardsOf(msg.sender));\\n    _clearRewards(msg.sender);\\n  }\\n\\n  /**\\n   * @notice deposit ETH to free locked token balance, at a rate of 1:4\\n   */\\n  function unlock () external payable {\\n    // fee pool address not available at deployment time, so fetch dynamically\\n    address payable feePool = IJusDeFi(_jusdefi)._feePool();\\n    require(feePool != address(0), 'JusDeFi: liquidity event still in progress');\\n\\n    uint amount = msg.value * JDFI_PER_ETH;\\n    require(_lockedBalances[msg.sender] >= amount, 'JusDeFi: insufficient locked balance');\\n    _lockedBalances[msg.sender] -= amount;\\n\\n    uint dev = msg.value / 2;\\n\\n    // staking pool contract designed to work with ERC20, so convert to WETH\\n    IWETH(_weth).deposit{ value: dev }();\\n    IStakingPool(_devStakingPool).distributeRewards(dev);\\n\\n    feePool.sendValue(address(this).balance);\\n  }\\n\\n  /**\\n   * @notice distribute rewards to stakers\\n   * @param amount quantity to distribute\\n   */\\n  function distributeRewards (uint amount) override external {\\n    IJusDeFi(_jusdefi).transferFrom(msg.sender, address(this), amount);\\n    _distributeRewards(amount);\\n  }\\n\\n  /**\\n   * @notice OpenZeppelin ERC20 hook: prevent transfer of locked tokens\\n   * @param from sender\\n   * @param to recipient\\n   * @param amount quantity transferred\\n   */\\n  function _beforeTokenTransfer (address from, address to, uint amount) override internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    uint locked = lockedBalanceOf(from);\\n\\n    require(\\n      locked == 0 || balanceOf(from) - locked >= amount,\\n      'JusDeFi: amount exceeds unlocked balance'\\n    );\\n\\n    if (from == _airdropToken) {\\n      _lockedBalances[to] += amount;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/UNIV2StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\nimport './interfaces/IJusDeFi.sol';\\nimport './StakingPool.sol';\\n\\ncontract UNIV2StakingPool is StakingPool {\\n  using Address for address payable;\\n\\n  address private immutable _jusdefi;\\n  address private immutable _uniswapPair;\\n  address private immutable _uniswapRouter;\\n\\n  constructor (\\n    address uniswapPair,\\n    address uniswapRouter\\n  )\\n    ERC20('Staked JDFI/WETH UNI-V2', 'JDFI-WETH-UNI-V2/S')\\n  {\\n    _jusdefi = msg.sender;\\n    _uniswapPair = uniswapPair;\\n    _uniswapRouter = uniswapRouter;\\n\\n    IERC20(uniswapPair).approve(uniswapRouter, type(uint).max);\\n\\n    _addToWhitelist(msg.sender);\\n  }\\n\\n  receive () external payable {\\n    require(msg.sender == _uniswapRouter, 'JusDeFi: invalid ETH deposit');\\n  }\\n\\n  /**\\n   * @notice deposit earned JDFI and sent ETH to Uniswap and stake without incurring burns\\n   * @param amountETHMin minimum quantity of ETH to stake, despite price depreciation\\n   */\\n  function compound (uint amountETHMin) external payable {\\n    uint rewards = rewardsOf(msg.sender);\\n    _clearRewards(msg.sender);\\n\\n    (\\n      ,\\n      uint amountETH,\\n      uint liquidity\\n    ) = IUniswapV2Router02(_uniswapRouter).addLiquidityETH{\\n      value: msg.value\\n    }(\\n      _jusdefi,\\n      rewards,\\n      rewards,\\n      amountETHMin,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // return remaining ETH to sender\\n    msg.sender.sendValue(msg.value - amountETH);\\n\\n    _mint(msg.sender, liquidity);\\n  }\\n\\n  /**\\n   * @notice deposit and stake preexisting Uniswap liquidity tokens\\n   * @param amount quantity of Uniswap liquidity tokens to stake\\n   */\\n  function stake (uint amount) external {\\n    IERC20(_uniswapPair).transferFrom(msg.sender, address(this), amount);\\n    _mint(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice deposit JDFI and ETH to Uniswap and stake\\n   * @dev params passed directly to IUniswapV2Router02#addLiquidityETH\\n   * @param amountJDFIDesired quantity of JDFI to stake if price depreciates\\n   * @param amountJDFIMin minimum quantity of JDFI to stake, despite price appreciation\\n   * @param amountETHMin minimum quantity of ETH to stake, despite price depreciation\\n   */\\n  function stake (\\n    uint amountJDFIDesired,\\n    uint amountJDFIMin,\\n    uint amountETHMin\\n  ) external payable {\\n    IERC20(_jusdefi).transferFrom(msg.sender, address(this), amountJDFIDesired);\\n\\n    // prevent possible theft of rounding error\\n    require(amountJDFIDesired >= amountJDFIMin, 'JusDeFi: minimum JDFI must not exceed desired JDFI');\\n    require(msg.value >= amountETHMin, 'JusDeFi: minimum ETH must not exceed message value');\\n\\n    (\\n      uint amountJDFI,\\n      uint amountETH,\\n      uint liquidity\\n    ) = IUniswapV2Router02(_uniswapRouter).addLiquidityETH{\\n      value: msg.value\\n    }(\\n      _jusdefi,\\n      amountJDFIDesired,\\n      amountJDFIMin,\\n      amountETHMin,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // return remaining JDFI and ETH to sender\\n    IERC20(_jusdefi).transfer(msg.sender, amountJDFIDesired - amountJDFI);\\n    msg.sender.sendValue(msg.value - amountETH);\\n\\n    _mint(msg.sender, liquidity);\\n  }\\n\\n  /**\\n   * @notice remove Uniswap liquidity and withdraw and unstake underlying JDFI and ETH\\n   * @param amount quantity of tokens to unstake\\n   * @param amountJDFIMin minimum quantity of JDFI to unstake, despite price appreciate\\n   * @param amountETHMin minimum quantity of ETH to unstake, despite price depreciation\\n   */\\n  function unstake (\\n    uint amount,\\n    uint amountJDFIMin,\\n    uint amountETHMin\\n  ) external {\\n    _burn(msg.sender, amount);\\n\\n    (\\n      uint amountJDFI,\\n      uint amountETH\\n    ) = IUniswapV2Router02(_uniswapRouter).removeLiquidityETH(\\n      _jusdefi,\\n      amount,\\n      amountJDFIMin,\\n      amountETHMin,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    IJusDeFi(_jusdefi).burnAndTransfer(msg.sender, amountJDFI);\\n    msg.sender.sendValue(amountETH);\\n  }\\n\\n  /**\\n   * @notice withdraw earned JDFI rewards\\n   */\\n  function withdraw () external {\\n    IJusDeFi(_jusdefi).burnAndTransfer(msg.sender, rewardsOf(msg.sender));\\n    _clearRewards(msg.sender);\\n  }\\n\\n  /**\\n   * @notice distribute rewards to stakers\\n   * @param amount quantity to distribute\\n   */\\n  function distributeRewards (uint amount) override external {\\n    IJusDeFi(_jusdefi).transferFrom(msg.sender, address(this), amount);\\n    _distributeRewards(amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport './interfaces/IStakingPool.sol';\\n\\nabstract contract StakingPool is IStakingPool, ERC20 {\\n  uint private constant REWARD_SCALAR = 1e18;\\n\\n  // values scaled by REWARD_SCALAR\\n  uint private _cumulativeRewardPerToken;\\n  mapping (address => uint) private _rewardsExcluded;\\n  mapping (address => uint) private _rewardsReserved;\\n\\n  mapping (address => bool) private _transferWhitelist;\\n  bool private _skipWhitelist;\\n\\n  /**\\n   * @notice get rewards of given account available for withdrawal\\n   * @param account owner of rewards\\n   * @return uint quantity of rewards available\\n   */\\n  function rewardsOf (address account) public view returns (uint) {\\n    return (\\n      balanceOf(account) * _cumulativeRewardPerToken\\n      + _rewardsReserved[account]\\n      - _rewardsExcluded[account]\\n    ) / REWARD_SCALAR;\\n  }\\n\\n  /**\\n   * @notice distribute rewards proportionally to stake holders\\n   * @param amount quantity of rewards to distribute\\n   */\\n  function _distributeRewards (uint amount) internal {\\n    uint supply = totalSupply();\\n    require(supply > 0, 'StakingPool: supply must be greater than zero');\\n    _cumulativeRewardPerToken += amount * REWARD_SCALAR / supply;\\n  }\\n\\n  /**\\n   * @notice remove pending rewards associated with account\\n   * @param account owner of rewards\\n   */\\n  function _clearRewards (address account) internal {\\n    _rewardsExcluded[account] = balanceOf(account) * _cumulativeRewardPerToken;\\n    delete _rewardsReserved[account];\\n  }\\n\\n  /**\\n   * @notice add address to transfer whitelist to allow it to execute transfers\\n   * @param account address to add to whitelist\\n   */\\n  function _addToWhitelist (address account) internal {\\n    _transferWhitelist[account] = true;\\n  }\\n\\n  /**\\n   * @notice disregard transfer whitelist\\n   */\\n  function _ignoreWhitelist () internal {\\n    _skipWhitelist = true;\\n  }\\n\\n  /**\\n   * @notice OpenZeppelin ERC20 hook: prevent manual transfers, maintain reward distribution when tokens are transferred\\n   * @param from sender\\n   * @param to recipient\\n   * @param amount quantity transferred\\n   */\\n  function _beforeTokenTransfer (address from, address to, uint amount) virtual override internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    if (from != address(0) && to != address(0)) {\\n      require(_transferWhitelist[msg.sender] || _skipWhitelist, 'JusDeFi: staked tokens are non-transferrable');\\n    }\\n\\n    uint delta = amount * _cumulativeRewardPerToken;\\n\\n    if (from != address(0)) {\\n      uint excluded = balanceOf(from) * _cumulativeRewardPerToken;\\n      _rewardsReserved[from] += excluded - _rewardsExcluded[from];\\n      _rewardsExcluded[from] = excluded - delta;\\n    }\\n\\n    if (to != address(0)) {\\n      _rewardsExcluded[to] += delta;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/test/JusDeFiMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '../JusDeFi.sol';\\nimport '../interfaces/IStakingPool.sol';\\n\\ncontract JusDeFiMock is JusDeFi {\\n  constructor (address airdropToken, address uniswapRouter) JusDeFi(airdropToken, uniswapRouter) {}\\n\\n  function mint (address account, uint amount) external {\\n    _mint(account, amount);\\n  }\\n\\n  function distributeJDFIStakingPoolRewards (uint amount) external {\\n    _mint(address(this), amount);\\n    IStakingPool(_jdfiStakingPool).distributeRewards(amount);\\n  }\\n\\n  function distributeUNIV2StakingPoolRewards (uint amount) external {\\n    _mint(address(this), amount);\\n    IStakingPool(_univ2StakingPool).distributeRewards(amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/StakingPoolMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.4;\\n\\nimport '../StakingPool.sol';\\n\\ncontract StakingPoolMock is StakingPool {\\n  constructor () ERC20('', '') {}\\n\\n  function mint (address account, uint amount) external {\\n    _mint(account, amount);\\n  }\\n\\n  // override needed for IStakingPool interface\\n  function distributeRewards (uint amount) override external {\\n    _distributeRewards(amount);\\n  }\\n\\n  function clearRewards (address account) external {\\n    _clearRewards(account);\\n  }\\n\\n  function addToWhitelist (address account) external {\\n    _addToWhitelist(account);\\n  }\\n\\n  function ignoreWhitelist () external {\\n    _ignoreWhitelist();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountJDFIDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountJDFIMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountJDFIMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UNIV2StakingPool","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aa53df90b6ce10fed75d76415db10ccd35a599d20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}