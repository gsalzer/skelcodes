{"status":"1","message":"OK","result":[{"SourceCode":"{\"Admin.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminInterface.sol\\\";\\n\\n/**\\n * @title Admin\\n * @author Paul Razvan Berg\\n * @notice Contract module which provides a basic access control mechanism, where there is\\n * an account (an admin) that can be granted exclusive access to specific functions.\\n *\\n * By default, the admin account will be the one that deploys the contract. This can later\\n * be changed with {transferAdmin}.\\n *\\n * This module is used through inheritance. It will make available the modifier `onlyAdmin`,\\n * which can be applied to your functions to restrict their use to the admin.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/access/Ownable.sol\\n */\\nabstract contract Admin is AdminInterface {\\n    /**\\n     * @notice Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"ERR_NOT_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract setting the deployer as the initial admin.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        admin = msgSender;\\n        emit TransferAdmin(address(0x00), msgSender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without admin, so it will not be possible to call\\n     * `onlyAdmin` functions anymore.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the administrator.\\n     *\\n     * WARNING: Doing this will leave the contract without an admin,\\n     * thereby removing any functionality that is only available to the admin.\\n     */\\n    function _renounceAdmin() external virtual override onlyAdmin {\\n        emit TransferAdmin(admin, address(0x00));\\n        admin = address(0x00);\\n    }\\n\\n    /**\\n     * @notice Transfers the admin of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     * @param newAdmin The acount of the new admin.\\n     */\\n    function _transferAdmin(address newAdmin) external virtual override onlyAdmin {\\n        require(newAdmin != address(0x00), \\\"ERR_SET_ADMIN_ZERO_ADDRESS\\\");\\n        emit TransferAdmin(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n}\\n\"},\"AdminInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminStorage.sol\\\";\\n\\n/**\\n * @title AdminInterface\\n * @author Paul Razvan Berg\\n */\\nabstract contract AdminInterface is AdminStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function _renounceAdmin() external virtual;\\n\\n    function _transferAdmin(address newAdmin) external virtual;\\n\\n    /**\\n     * EVENTS\\n     */\\n    event TransferAdmin(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\"},\"AdminStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nabstract contract AdminStorage {\\n    /**\\n     * @notice The address of the administrator account or contract.\\n     */\\n    address public admin;\\n}\\n\"},\"AggregatorV3Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title AggregatorV3Interface\\n * @author Hifi\\n * @dev Forked from Chainlink\\n * https://github.com/smartcontractkit/chainlink/blob/v0.9.9/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\n */\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    /*\\n     * getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n     * if they do not have data to report, instead of returning unset values\\n     * which could be misinterpreted as actual reported values.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"},\"BalanceSheetInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalanceSheetStorage.sol\\\";\\n\\n/**\\n * @title BalanceSheetInterface\\n * @author Hifi\\n */\\nabstract contract BalanceSheetInterface is BalanceSheetStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function getClutchableCollateral(FyTokenInterface fyToken, uint256 repayAmount)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getCurrentCollateralizationRatio(FyTokenInterface fyToken, address borrower)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getHypotheticalCollateralizationRatio(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 lockedCollateral,\\n        uint256 debt\\n    ) public view virtual returns (uint256);\\n\\n    function getVault(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getVaultDebt(FyTokenInterface fyToken, address borrower) external view virtual returns (uint256);\\n\\n    function getVaultLockedCollateral(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function isAccountUnderwater(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    function isVaultOpen(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function clutchCollateral(\\n        FyTokenInterface fyToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 clutchedCollateralAmount\\n    ) external virtual returns (bool);\\n\\n    function depositCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function freeCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function lockCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function openVault(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setVaultDebt(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 newVaultDebt\\n    ) external virtual returns (bool);\\n\\n    function withdrawCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    event ClutchCollateral(\\n        FyTokenInterface indexed fyToken,\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event DepositCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event FreeCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event LockCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event OpenVault(FyTokenInterface indexed fyToken, address indexed borrower);\\n\\n    event SetVaultDebt(FyTokenInterface indexed fyToken, address indexed borrower, uint256 oldDebt, uint256 newDebt);\\n\\n    event WithdrawCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n}\\n\"},\"BalanceSheetStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title BalanceSheetStorage\\n * @author Hifi\\n */\\nabstract contract BalanceSheetStorage {\\n    struct Vault {\\n        uint256 debt;\\n        uint256 freeCollateral;\\n        uint256 lockedCollateral;\\n        bool isOpen;\\n    }\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @dev One vault for each fyToken for each account.\\n     */\\n    mapping(address =\\u003e mapping(address =\\u003e Vault)) internal vaults;\\n\\n    /**\\n     * @notice Indicator that this is a BalanceSheet contract, for inspection.\\n     */\\n    bool public constant isBalanceSheet = true;\\n}\\n\"},\"CarefulMath.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Possible error codes that can be returned.\\n */\\nenum MathError { NO_ERROR, DIVISION_BY_ZERO, INTEGER_OVERFLOW, INTEGER_UNDERFLOW, MODULO_BY_ZERO }\\n\\n/**\\n * @title CarefulMath\\n * @author Paul Razvan Berg\\n * @notice Exponential module for storing fixed-precision decimals.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CarefulMath.sol\\n */\\nabstract contract CarefulMath {\\n    /**\\n     * @notice Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c \\u003e= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add `a` and `b` and then subtract `c`.\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n\\n    /**\\n     * @notice Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @notice Returns the remainder of dividing two numbers.\\n     * @dev Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     */\\n    function modUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.MODULO_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a % b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b \\u003c= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n}\\n\"},\"ChainlinkOperatorInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./ChainlinkOperatorStorage.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorInterface\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorInterface is ChainlinkOperatorStorage {\\n    /**\\n     * EVENTS\\n     */\\n    event DeleteFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    event SetFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    /**\\n     * CONSTANT FUNCTIONS.\\n     */\\n    function getAdjustedPrice(string memory symbol) external view virtual returns (uint256);\\n\\n    function getFeed(string memory symbol)\\n        external\\n        view\\n        virtual\\n        returns (\\n            Erc20Interface,\\n            AggregatorV3Interface,\\n            bool\\n        );\\n\\n    function getPrice(string memory symbol) public view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS.\\n     */\\n    function deleteFeed(string memory symbol) external virtual returns (bool);\\n\\n    function setFeed(Erc20Interface asset, AggregatorV3Interface feed) external virtual returns (bool);\\n}\\n\"},\"ChainlinkOperatorStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorStorage\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorStorage {\\n    struct Feed {\\n        Erc20Interface asset;\\n        AggregatorV3Interface id;\\n        bool isSet;\\n    }\\n\\n    /**\\n     * @dev Mapping between Erc20 symbols and Feed structs.\\n     */\\n    mapping(string =\\u003e Feed) internal feeds;\\n\\n    /**\\n     * @notice Chainlink price precision for USD-quoted data.\\n     */\\n    uint256 public constant pricePrecision = 8;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the Chainlink price precision (1e8).\\n     */\\n    uint256 public constant pricePrecisionScalar = 1.0e10;\\n}\\n\"},\"Erc20Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Storage.sol\\\";\\n\\n/**\\n * @title Erc20Interface\\n * @author Paul Razvan Berg\\n * @notice Interface of the Erc20 standard\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.2.0/contracts/token/ERC20/IERC20.sol\\n */\\nabstract contract Erc20Interface is Erc20Storage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Burn(address indexed holder, uint256 burnAmount);\\n\\n    event Mint(address indexed beneficiary, uint256 mintAmount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n}\\n\"},\"Erc20Storage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Erc20 contract.\\n */\\nabstract contract Erc20Storage {\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of\\n     * the name.\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n}\\n\"},\"Exponential.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialStorage.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals.\\n * @author Paul Razvan Berg\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n * Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is: `Exp({mantissa: 5100000000000000000})`.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.6/contracts/Exponential.sol\\n */\\nabstract contract Exponential is\\n    CarefulMath, /* no dependency */\\n    ExponentialStorage /* no dependency */\\n{\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     * (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b.\\n     * NOTE: Returns an error if (`num` * 10e18) \\u003e MAX_INT, or if `denom` is zero.\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(a.mantissa, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, b.mantissa);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        /*\\n         * We add half the scale before dividing so that we get rounding instead of truncation.\\n         * See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n         * Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n         */\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        /* The only possible error `div` is MathError.DIVISION_BY_ZERO but we control `expScale` and it\\u0027s not zero. */\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n}\\n\"},\"ExponentialStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Exponential contract.\\n */\\nabstract contract ExponentialStorage {\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev In Exponential denomination, 1e18 is 1.\\n     */\\n    uint256 internal constant expScale = 1e18;\\n    uint256 internal constant halfExpScale = expScale / 2;\\n    uint256 internal constant mantissaOne = expScale;\\n}\\n\"},\"Fintroller.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\n\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\n/**\\n * @notice Fintroller\\n * @author Hifi\\n * @notice Controls the financial permissions and risk parameters for all fyTokens.\\n */\\ncontract Fintroller is\\n    FintrollerInterface, /* one dependency */\\n    Admin /* two dependencies */\\n{\\n    /* solhint-disable-next-line no-empty-blocks */\\n    constructor() Admin() {\\n        /* Set a default value of 110% for the liquidation incentive. */\\n        liquidationIncentiveMantissa = 1.1e18;\\n    }\\n\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Reads the storage properties of the bond.\\n     * @dev It is not an error to provide an invalid fyToken address. The returned values would all be zero.\\n     * @param fyToken The address of the bond contract.\\n     */\\n    function getBond(FyTokenInterface fyToken)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 collateralizationRatioMantissa,\\n            uint256 debtCeiling,\\n            bool isBorrowAllowed,\\n            bool isDepositCollateralAllowed,\\n            bool isLiquidateBorrowAllowed,\\n            bool isListed,\\n            bool isRedeemFyTokenAllowed,\\n            bool isRepayBorrowAllowed,\\n            bool isSupplyUnderlyingAllowed\\n        )\\n    {\\n        collateralizationRatioMantissa = bonds[fyToken].collateralizationRatio.mantissa;\\n        debtCeiling = bonds[fyToken].debtCeiling;\\n        isBorrowAllowed = bonds[fyToken].isBorrowAllowed;\\n        isDepositCollateralAllowed = bonds[fyToken].isDepositCollateralAllowed;\\n        isLiquidateBorrowAllowed = bonds[fyToken].isLiquidateBorrowAllowed;\\n        isListed = bonds[fyToken].isListed;\\n        isRedeemFyTokenAllowed = bonds[fyToken].isRedeemFyTokenAllowed;\\n        isRepayBorrowAllowed = bonds[fyToken].isRepayBorrowAllowed;\\n        isSupplyUnderlyingAllowed = bonds[fyToken].isSupplyUnderlyingAllowed;\\n    }\\n\\n    /**\\n     * @notice Reads the collateralization ratio of the given bond.\\n     * @dev It is not an error to provide an invalid fyToken address.\\n     * @param fyToken The address of the bond contract.\\n     * @return The collateralization ratio as a mantissa, or zero if an invalid address was provided.\\n     */\\n    function getBondCollateralizationRatio(FyTokenInterface fyToken) external view override returns (uint256) {\\n        return bonds[fyToken].collateralizationRatio.mantissa;\\n    }\\n\\n    /**\\n     * @notice Reads the debt ceiling of the given bond.\\n     * @dev It is not an error to provide an invalid fyToken address.\\n     * @param fyToken The address of the bond contract.\\n     * @return The debt ceiling as a uint256, or zero if an invalid address was provided.\\n     */\\n    function getBondDebtCeiling(FyTokenInterface fyToken) external view override returns (uint256) {\\n        return bonds[fyToken].debtCeiling;\\n    }\\n\\n    /**\\n     * @notice Check if the account should be allowed to borrow fyTokens.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getBorrowAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isBorrowAllowed;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to deposit collateral.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getDepositCollateralAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isDepositCollateralAllowed;\\n    }\\n\\n    /**\\n     * @notice Check if the account should be allowed to liquidate fyToken borrows.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getLiquidateBorrowAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isLiquidateBorrowAllowed;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem the underlying asset from the Redemption Pool.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getRedeemFyTokensAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isRedeemFyTokenAllowed;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay borrows.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getRepayBorrowAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isRepayBorrowAllowed;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to the supply underlying asset to the Redemption Pool.\\n     * @dev The bond must be listed.\\n     * @param fyToken The bond to make the check against.\\n     * @return bool true = allowed, false = not allowed.\\n     */\\n    function getSupplyUnderlyingAllowed(FyTokenInterface fyToken) external view override returns (bool) {\\n        Bond memory bond = bonds[fyToken];\\n        require(bond.isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        return bond.isSupplyUnderlyingAllowed;\\n    }\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Marks the bond as listed in this Fintroller\\u0027s registry. It is not an error to list a bond twice.\\n     *\\n     * @dev Emits a {ListBond} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The fyToken must pass the inspection.\\n     *\\n     * @param fyToken The fyToken contract to list.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function listBond(FyTokenInterface fyToken) external override onlyAdmin returns (bool) {\\n        require(fyToken.isFyToken(), \\\"ERR_LIST_BOND_FYTOKEN_INSPECTION\\\");\\n        bonds[fyToken] = Bond({\\n            collateralizationRatio: Exp({ mantissa: defaultCollateralizationRatioMantissa }),\\n            debtCeiling: 0,\\n            isBorrowAllowed: true,\\n            isDepositCollateralAllowed: true,\\n            isLiquidateBorrowAllowed: true,\\n            isListed: true,\\n            isRedeemFyTokenAllowed: true,\\n            isRepayBorrowAllowed: true,\\n            isSupplyUnderlyingAllowed: true\\n        });\\n        emit ListBond(admin, fyToken);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the bond\\u0027s collateralization ratio.\\n     *\\n     * @dev Emits a {SetBondCollateralizationRatio} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     * - The new collateralization ratio cannot be higher than the maximum collateralization ratio.\\n     * - The new collateralization ratio cannot be lower than the minimum collateralization ratio.\\n     *\\n     * @param fyToken The bond for which to update the collateralization ratio.\\n     * @param newCollateralizationRatioMantissa The new collateralization ratio as a mantissa.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setBondCollateralizationRatio(FyTokenInterface fyToken, uint256 newCollateralizationRatioMantissa)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        /* Checks: bond is listed. */\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n\\n        /* Checks: new collateralization ratio is within the accepted bounds. */\\n        require(\\n            newCollateralizationRatioMantissa \\u003c= collateralizationRatioUpperBoundMantissa,\\n            \\\"ERR_SET_BOND_COLLATERALIZATION_RATIO_UPPER_BOUND\\\"\\n        );\\n        require(\\n            newCollateralizationRatioMantissa \\u003e= collateralizationRatioLowerBoundMantissa,\\n            \\\"ERR_SET_BOND_COLLATERALIZATION_RATIO_LOWER_BOUND\\\"\\n        );\\n\\n        /* Effects: update storage. */\\n        uint256 oldCollateralizationRatioMantissa = bonds[fyToken].collateralizationRatio.mantissa;\\n        bonds[fyToken].collateralizationRatio = Exp({ mantissa: newCollateralizationRatioMantissa });\\n\\n        emit SetBondCollateralizationRatio(\\n            admin,\\n            fyToken,\\n            oldCollateralizationRatioMantissa,\\n            newCollateralizationRatioMantissa\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the debt ceiling, which limits how much debt can be created in the bond market.\\n     *\\n     * @dev Emits a {SetBondDebtCeiling} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     * - The debt ceiling cannot be zero.\\n     * - The debt ceiling cannot fall below the current total supply of fyTokens.\\n     *\\n     * @param fyToken The bond for which to update the debt ceiling.\\n     * @param newDebtCeiling The uint256 value of the new debt ceiling, specified in the bond\\u0027s decimal system.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setBondDebtCeiling(FyTokenInterface fyToken, uint256 newDebtCeiling)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        /* Checks: bond is listed. */\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n\\n        /* Checks: the zero edge case. */\\n        require(newDebtCeiling \\u003e 0, \\\"ERR_SET_BOND_DEBT_CEILING_ZERO\\\");\\n\\n        /* Checks: above total supply of fyTokens. */\\n        uint256 totalSupply = fyToken.totalSupply();\\n        require(newDebtCeiling \\u003e= totalSupply, \\\"ERR_SET_BOND_DEBT_CEILING_UNDERFLOW\\\");\\n\\n        /* Effects: update storage. */\\n        uint256 oldDebtCeiling = bonds[fyToken].debtCeiling;\\n        bonds[fyToken].debtCeiling = newDebtCeiling;\\n\\n        emit SetBondDebtCeiling(admin, fyToken, oldDebtCeiling, newDebtCeiling);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the fyToken before a borrow.\\n     *\\n     * @dev Emits a {SetBorrowAllowed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setBorrowAllowed(FyTokenInterface fyToken, bool state) external override onlyAdmin returns (bool) {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isBorrowAllowed = state;\\n        emit SetBorrowAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the fyToken before a collateral deposit.\\n     *\\n     * @dev Emits a {SetDepositCollateralAllowed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setDepositCollateralAllowed(FyTokenInterface fyToken, bool state)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isDepositCollateralAllowed = state;\\n        emit SetDepositCollateralAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the fyToken before a liquidate borrow.\\n     *\\n     * @dev Emits a {SetLiquidateBorrowAllowed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setLiquidateBorrowAllowed(FyTokenInterface fyToken, bool state)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isLiquidateBorrowAllowed = state;\\n        emit SetLiquidateBorrowAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a new value for the liquidation incentive, which is applicable\\n     * to all listed bonds.\\n     *\\n     * @dev Emits a {SetLiquidationIncentive} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The new liquidation incentive cannot be higher than the maximum liquidation incentive.\\n     * - The new liquidation incentive cannot be lower than the minimum liquidation incentive.\\n\\n     * @param newLiquidationIncentiveMantissa The new liquidation incentive as a mantissa.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        /* Checks: new collateralization ratio is within the accepted bounds. */\\n        require(\\n            newLiquidationIncentiveMantissa \\u003c= liquidationIncentiveUpperBoundMantissa,\\n            \\\"ERR_SET_LIQUIDATION_INCENTIVE_UPPER_BOUND\\\"\\n        );\\n        require(\\n            newLiquidationIncentiveMantissa \\u003e= liquidationIncentiveLowerBoundMantissa,\\n            \\\"ERR_SET_LIQUIDATION_INCENTIVE_LOWER_BOUND\\\"\\n        );\\n\\n        /* Effects: update storage. */\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        emit SetLiquidationIncentive(admin, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the oracle contract\\u0027s address saved in storage.\\n     *\\n     * @dev Emits a {SetOracle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The new address cannot be the zero address.\\n     *\\n     * @param newOracle The new oracle contract.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setOracle(ChainlinkOperatorInterface newOracle) external override onlyAdmin returns (bool) {\\n        require(address(newOracle) != address(0x00), \\\"ERR_SET_ORACLE_ZERO_ADDRESS\\\");\\n        address oldOracle = address(oracle);\\n        oracle = newOracle;\\n        emit SetOracle(admin, oldOracle, address(newOracle));\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the Redemption Pool before a redemption of underlying.\\n     *\\n     * @dev Emits a {SetRedeemFyTokensAllowed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setRedeemFyTokensAllowed(FyTokenInterface fyToken, bool state) external override onlyAdmin returns (bool) {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isRedeemFyTokenAllowed = state;\\n        emit SetRedeemFyTokensAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the fyToken before a repay borrow.\\n     *\\n     * @dev Emits a {SetRepayBorrowAllowed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The bond must be listed.\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setRepayBorrowAllowed(FyTokenInterface fyToken, bool state) external override onlyAdmin returns (bool) {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isRepayBorrowAllowed = state;\\n        emit SetRepayBorrowAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the state of the permission accessed by the Redemption Pool before a supply of underlying.\\n     *\\n     * @dev Emits a {SetSupplyUnderlyingAllowed} event.\\n     *\\n     * Requirements:\\n     * - The caller must be the admin\\n     *\\n     * @param fyToken The fyToken contract to update the permission for.\\n     * @param state The new state to put in storage.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function setSupplyUnderlyingAllowed(FyTokenInterface fyToken, bool state)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(bonds[fyToken].isListed, \\\"ERR_BOND_NOT_LISTED\\\");\\n        bonds[fyToken].isSupplyUnderlyingAllowed = state;\\n        emit SetSupplyUnderlyingAllowed(admin, fyToken, state);\\n        return true;\\n    }\\n}\\n\"},\"FintrollerInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerStorage.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\nabstract contract FintrollerInterface is FintrollerStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    function getBond(FyTokenInterface fyToken)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 debtCeiling,\\n            uint256 collateralizationRatioMantissa,\\n            bool isBorrowAllowed,\\n            bool isDepositCollateralAllowed,\\n            bool isLiquidateBorrowAllowed,\\n            bool isListed,\\n            bool isRedeemFyTokenAllowed,\\n            bool isRepayBorrowAllowed,\\n            bool isSupplyUnderlyingAllowed\\n        );\\n\\n    function getBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getBondCollateralizationRatio(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getBondDebtCeiling(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getDepositCollateralAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getLiquidateBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRedeemFyTokensAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRepayBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getSupplyUnderlyingAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function listBond(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setBondCollateralizationRatio(FyTokenInterface fyToken, uint256 newCollateralizationRatioMantissa)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function setBondDebtCeiling(FyTokenInterface fyToken, uint256 newDebtCeiling) external virtual returns (bool);\\n\\n    function setBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setDepositCollateralAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidateBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external virtual returns (bool);\\n\\n    function setOracle(ChainlinkOperatorInterface newOracle) external virtual returns (bool);\\n\\n    function setRedeemFyTokensAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setRepayBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setSupplyUnderlyingAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event ListBond(address indexed admin, FyTokenInterface indexed fyToken);\\n\\n    event SetBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetBondCollateralizationRatio(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldCollateralizationRatio,\\n        uint256 newCollateralizationRatio\\n    );\\n\\n    event SetBondDebtCeiling(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldDebtCeiling,\\n        uint256 newDebtCeiling\\n    );\\n\\n    event SetDepositCollateralAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidateBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidationIncentive(\\n        address indexed admin,\\n        uint256 oldLiquidationIncentive,\\n        uint256 newLiquidationIncentive\\n    );\\n\\n    event SetRedeemFyTokensAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetRepayBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetOracle(address indexed admin, address oldOracle, address newOracle);\\n\\n    event SetSupplyUnderlyingAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n}\\n\"},\"FintrollerStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Exponential.sol\\\";\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\n/**\\n * @title FintrollerStorage\\n * @author Hifi\\n */\\nabstract contract FintrollerStorage is Exponential {\\n    struct Bond {\\n        Exp collateralizationRatio;\\n        uint256 debtCeiling;\\n        bool isBorrowAllowed;\\n        bool isDepositCollateralAllowed;\\n        bool isLiquidateBorrowAllowed;\\n        bool isListed;\\n        bool isRedeemFyTokenAllowed;\\n        bool isRepayBorrowAllowed;\\n        bool isSupplyUnderlyingAllowed;\\n    }\\n\\n    /**\\n     * @dev Maps the fyToken address to the Bond structs.\\n     */\\n    mapping(FyTokenInterface =\\u003e Bond) internal bonds;\\n\\n    /**\\n     * @notice The contract that provides price data for the collateral and the underlying asset.\\n     */\\n    ChainlinkOperatorInterface public oracle;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives.\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @dev The threshold below which the collateralization ratio cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant collateralizationRatioLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the collateralization ratio cannot be set, equivalent to 10,000%.\\n     */\\n    uint256 internal constant collateralizationRatioUpperBoundMantissa = 1.0e20;\\n\\n    /**\\n     * @dev The dafault collateralization ratio set when a new bond is listed, equivalent to 150%.\\n     */\\n    uint256 internal constant defaultCollateralizationRatioMantissa = 1.5e18;\\n\\n    /**\\n     * @dev The threshold below which the liquidation incentive cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant liquidationIncentiveLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the liquidation incentive cannot be set, equivalent to 150%.\\n     */\\n    uint256 internal constant liquidationIncentiveUpperBoundMantissa = 1.5e18;\\n\\n    /**\\n     * @notice Indicator that this is a Fintroller contract, for inspection.\\n     */\\n    bool public constant isFintroller = true;\\n}\\n\"},\"FyTokenInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./FyTokenStorage.sol\\\";\\n\\n/**\\n * @title FyTokenInterface\\n * @author Hifi\\n */\\nabstract contract FyTokenInterface is\\n    FyTokenStorage, /* no dependency */\\n    Erc20Interface /* one dependency */\\n{\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function isMatured() public view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function borrow(uint256 borrowAmount) external virtual returns (bool);\\n\\n    function burn(address holder, uint256 burnAmount) external virtual returns (bool);\\n\\n    function liquidateBorrow(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function mint(address beneficiary, uint256 mintAmount) external virtual returns (bool);\\n\\n    function repayBorrow(uint256 repayAmount) external virtual returns (bool);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function _setFintroller(FintrollerInterface newFintroller) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Borrow(address indexed borrower, uint256 borrowAmount);\\n\\n    event LiquidateBorrow(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event RepayBorrow(address indexed payer, address indexed borrower, uint256 repayAmount, uint256 newDebt);\\n\\n    event SetFintroller(address indexed admin, FintrollerInterface oldFintroller, FintrollerInterface newFintroller);\\n}\\n\"},\"FyTokenStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./BalanceSheetInterface.sol\\\";\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./RedemptionPoolInterface.sol\\\";\\n\\n/**\\n * @title FyTokenStorage\\n * @author Hifi\\n */\\nabstract contract FyTokenStorage {\\n    /**\\n     * STORAGE PROPERTIES\\n     */\\n\\n    /**\\n     * @notice The global debt registry.\\n     */\\n    BalanceSheetInterface public balanceSheet;\\n\\n    /**\\n     * @notice The Erc20 asset that backs the borrows of this fyToken.\\n     */\\n    Erc20Interface public collateral;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the collateral precision.\\n     */\\n    uint256 public collateralPrecisionScalar;\\n\\n    /**\\n     * @notice Unix timestamp in seconds for when this token expires.\\n     */\\n    uint256 public expirationTime;\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The unique Redemption Pool associated with this contract.\\n     */\\n    RedemptionPoolInterface public redemptionPool;\\n\\n    /**\\n     * @notice The Erc20 underlying, or target, asset for this fyToken.\\n     */\\n    Erc20Interface public underlying;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the underlying precision.\\n     */\\n    uint256 public underlyingPrecisionScalar;\\n\\n    /**\\n     * @notice Indicator that this is a FyToken contract, for inspection.\\n     */\\n    bool public constant isFyToken = true;\\n}\\n\"},\"RedemptionPoolInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./RedemptionPoolStorage.sol\\\";\\n\\n/**\\n * @title RedemptionPoolInterface\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolInterface is RedemptionPoolStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function redeemFyTokens(uint256 fyTokenAmount) external virtual returns (bool);\\n\\n    function supplyUnderlying(uint256 underlyingAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event RedeemFyTokens(address indexed account, uint256 fyTokenAmount, uint256 underlyingAmount);\\n\\n    event SupplyUnderlying(address indexed account, uint256 underlyingAmount, uint256 fyTokenAmount);\\n}\\n\"},\"RedemptionPoolStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title RedemptionPoolStorage\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolStorage {\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The amount of the underlying asset available to be redeemed after maturation.\\n     */\\n    uint256 public totalUnderlyingSupply;\\n\\n    /**\\n     * The unique fyToken associated with this Redemption Pool.\\n     */\\n    FyTokenInterface public fyToken;\\n\\n    /**\\n     * @notice Indicator that this is a Redemption Pool contract, for inspection.\\n     */\\n    bool public constant isRedemptionPool = true;\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"ListBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralizationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"SetBondCollateralizationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"SetBondDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetBorrowAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetDepositCollateralAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetLiquidateBorrowAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"SetLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetRedeemFyTokensAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetRepayBorrowAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetSupplyUnderlyingAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralizationRatioMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrowAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDepositCollateralAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidateBorrowAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRedeemFyTokenAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRepayBorrowAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSupplyUnderlyingAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getBondCollateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getBondDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getDepositCollateralAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getLiquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getRedeemFyTokensAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getRepayBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getSupplyUnderlyingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFintroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"listBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ChainlinkOperatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralizationRatioMantissa\",\"type\":\"uint256\"}],\"name\":\"setBondCollateralizationRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"setBondDebtCeiling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setDepositCollateralAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setLiquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ChainlinkOperatorInterface\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setRedeemFyTokensAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setRepayBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSupplyUnderlyingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fintroller","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2eaf39cbd966e77d3fc3746468dd5fad8ab51ad15df2327cdeb0712fffef42a0"}]}