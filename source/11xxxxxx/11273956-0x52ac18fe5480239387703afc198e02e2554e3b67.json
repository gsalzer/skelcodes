{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// @title Multisig ERC20 and Ether contract\r\n// @dev Allows multisig management of Ether and ERC20 funds, requiring 50% of owners (rounded up)\r\n//   to approve any withdrawal or change in ownership\r\n// (c) 2020 NFT Platform Inc. All Rights Reserved. This code is not open source.\r\ncontract Multisig {\r\n\r\n  address[] public owners;\r\n\r\n  mapping (address => mapping(address => uint)) withdrawalRequests;\r\n  mapping (address => mapping(address => address[])) withdrawalApprovals;\r\n\r\n  mapping (address => address[]) ownershipAdditions;\r\n  mapping (address => address[]) ownershipRemovals;\r\n\r\n  event ApproveNewOwner(address indexed approver, address indexed subject);\r\n  event ApproveRemovalOfOwner(address indexed approver, address indexed subject);\r\n  event OwnershipChange(address indexed owner, bool indexed isAddition, bool indexed isRemoved);\r\n  event Deposit(address indexed tokenContract, address indexed sender, uint amount);\r\n  event Withdrawal(address indexed tokenContract, address indexed recipient, uint amount);\r\n  event WithdrawalRequest(address indexed tokenContract, address indexed recipient, uint amount);\r\n  event WithdrawalApproval(address indexed tokenContract, address indexed approver, address indexed recipient, uint amount);\r\n\r\n  function getOwners()\r\n    public\r\n    view\r\n  returns(address[] memory) {\r\n    return owners;\r\n  }\r\n\r\n  function getOwnershipAdditions(address _account)\r\n    public\r\n    view\r\n  returns(address[] memory) {\r\n    return ownershipAdditions[_account];\r\n  }\r\n\r\n  function getOwnershipRemovals(address _account)\r\n    public\r\n    view\r\n  returns(address[] memory) {\r\n    return ownershipRemovals[_account];\r\n  }\r\n\r\n  function getWithdrawalApprovals(address _erc20, address _account)\r\n    public\r\n    view\r\n  returns(uint amount, address[] memory approvals) {\r\n    amount = withdrawalRequests[_erc20][_account];\r\n    approvals = withdrawalApprovals[_erc20][_account];\r\n  }\r\n\r\n  function getMinimumApprovals()\r\n    public\r\n    view\r\n  returns(uint approvalCount) {\r\n    approvalCount = (owners.length + 1) / 2;\r\n  }\r\n\r\n  modifier isOwner(address _test) {\r\n    require(_isOwner(_test) == true, \"address must be an owner\");\r\n    _;\r\n  }\r\n\r\n  modifier isNotOwner(address _test) {\r\n    require(_isOwner(_test) == false, \"address must NOT be an owner\");\r\n    _;\r\n  }\r\n\r\n  modifier isNotMe(address _test) {\r\n    require(msg.sender != _test, \"test must not be sender\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _owner2, address _owner3, address _owner4)\r\n    public\r\n  {\r\n    owners.push(msg.sender);\r\n    owners.push(_owner2);\r\n    owners.push(_owner3);\r\n    owners.push(_owner4);\r\n  }\r\n\r\n  function _isOwner(address _test)\r\n    internal\r\n    view\r\n  returns(bool) {\r\n    for(uint i = 0; i < owners.length; i++) {\r\n      if(_test == owners[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // @dev Requests, or approves an ownership addition. The new owner is NOT automatically added.\r\n  // @param _address - the address of the owner to add.\r\n  function approveOwner(address _address)\r\n    public\r\n    isOwner(msg.sender)\r\n    isNotOwner(_address)\r\n    isNotMe(_address)\r\n  {\r\n    require(owners.length < 10, \"no more than 10 owners\");\r\n    for(uint i = 0; i < ownershipAdditions[_address].length; i++) {\r\n      require(ownershipAdditions[_address][i] != msg.sender, \"sender has not already approved this removal\");\r\n    }\r\n    ownershipAdditions[_address].push(msg.sender);\r\n    emit ApproveNewOwner(msg.sender, _address);\r\n  }\r\n\r\n  // @dev After being approved for ownership, the new owner must call this function to become an owner.\r\n  function acceptOwnership()\r\n    external\r\n    isNotOwner(msg.sender)\r\n  {\r\n    require(\r\n      ownershipAdditions[msg.sender].length >= getMinimumApprovals(),\r\n      \"sender doesn't have enough ownership approvals\");\r\n    owners.push(msg.sender);\r\n    delete ownershipAdditions[msg.sender];\r\n    emit OwnershipChange(msg.sender, true, false);\r\n  }\r\n\r\n  // @dev Requests, or approves a ownership removal. Once enough approvals are given, the owner is\r\n  //   automatically removed.\r\n  // @param _address - the address of the owner to be removed.\r\n  function removeOwner(address _address)\r\n    public\r\n    isOwner(msg.sender)\r\n    isOwner(_address)\r\n    isNotMe(_address)\r\n  {\r\n    require(owners.length > 3, \"can't remove below 3 owners - add a new owner first\");\r\n    uint i;\r\n    for(i = 0; i < ownershipRemovals[_address].length; i++) {\r\n      require(ownershipRemovals[_address][i] != msg.sender, \"sender must not have already approved this removal\");\r\n    }\r\n    emit ApproveRemovalOfOwner(msg.sender, _address);\r\n    ownershipRemovals[_address].push(msg.sender);\r\n    // owners.length / 2 is the number of approvals required AFTER this account is removed.\r\n    // This guarantees there are still enough active approvers left.\r\n    if(ownershipRemovals[_address].length >= getMinimumApprovals()) {\r\n      for(i = 0; i < owners.length; i++) {\r\n        if(owners[i] == _address) {\r\n          uint lastSlot = owners.length - 1;\r\n          owners[i] = owners[lastSlot];\r\n          owners[lastSlot] = address(0);\r\n          owners.length = lastSlot;\r\n          break;\r\n        }\r\n      }\r\n      delete ownershipRemovals[_address];\r\n      emit OwnershipChange(_address, false, true);\r\n    }\r\n  }\r\n\r\n  // @dev Cancels a ownership removal. Only requires one owner to call this,\r\n  //   but the subject of the removal cannot call it themselves.\r\n  // @param _address - the address of the owner to be removed.\r\n  function vetoRemoval(address _address)\r\n    public\r\n    isOwner(msg.sender)\r\n    isOwner(_address)\r\n    isNotMe(_address)\r\n  {\r\n    delete ownershipRemovals[_address];\r\n  }\r\n\r\n  // @dev Cancels a ownership addition. Only requires one owner to call this.\r\n  // @param _address - the address of the owner to be added.\r\n  function vetoOwnership(address _address)\r\n    public\r\n    isOwner(msg.sender)\r\n    isNotMe(_address)\r\n  {\r\n    delete ownershipAdditions[_address];\r\n  }\r\n\r\n  // @dev Cancels a withdrawal. Only requires one owner to call this.\r\n  // @param _tokenContract - the contract of the erc20 token to withdraw (or, use the zero address for ETH)\r\n  // @param _amount - the amount to withdraw. Amount must match the approved withdrawal amount.\r\n  function vetoWithdrawal(address _tokenContract, address _requestor)\r\n    public\r\n    isOwner(msg.sender)\r\n  {\r\n    delete withdrawalRequests[_tokenContract][_requestor];\r\n    delete withdrawalApprovals[_tokenContract][_requestor];\r\n  }\r\n\r\n  // @dev allows any owner to deposit any ERC20 token in this contract.\r\n  // @dev Once the ERC20 token is deposited, it can only be withdrawn if enough accounts allow it.\r\n  // @param _tokenContract - the contract of the erc20 token to deposit\r\n  // @param _amount - the amount to deposit.\r\n  // @notice For this function to work, you have to already have set an allowance for the transfer\r\n  // @notice You CANNOT deposit Ether using this function. Use depositEth() instead.\r\n  function depositERC20(address _tokenContract, uint _amount)\r\n    public\r\n    isOwner(msg.sender)\r\n  {\r\n    ERC20Interface erc20 = ERC20Interface(_tokenContract);\r\n    emit Deposit(_tokenContract, msg.sender, _amount);\r\n    erc20.transferFrom(msg.sender, address(this), _amount);\r\n  }\r\n\r\n  // @dev allows any owner to deposit Ether in this contract.\r\n  // @dev Once ether is deposited, it can only be withdrawn if enough accounts allow it.\r\n  function depositEth()\r\n    public\r\n    payable\r\n    isOwner(msg.sender)\r\n  {\r\n    emit Deposit(address(0), msg.sender, msg.value);\r\n  }\r\n\r\n\r\n  // @dev Requests a withdrawal, changes a withdrawal request, or approves an existing withdrawal request.\r\n  // To request or change, set _recipient to msg.sender. Changes wipe all approvals.\r\n  // To approve, set _recipient to the previously requested account, and send from another owner account\r\n  // @param _tokenContract - the contract of the erc20 token to withdraw (or, use the zero address for ETH)\r\n  // @param _recipient - the account which will receive the withdrawal.\r\n  // @param _amount - the amount to withdraw. Amount must match the approved withdrawal amount.\r\n  function approveWithdrawal(address _tokenContract, address _recipient, uint _amount)\r\n    public\r\n    isOwner(msg.sender)\r\n  {\r\n    ERC20Interface erc20 = ERC20Interface(_tokenContract);\r\n    // If Withdrawer == msg.sender, this is a new request. Cancel all previous approvals.\r\n    require(_amount > 0, \"can't withdraw zero\");\r\n    if (_recipient == msg.sender) {\r\n      if(_tokenContract == address(0)) {\r\n        require(_amount <= address(this).balance, \"can't withdraw more ETH than the balance\");\r\n      } else {\r\n        require(_amount <= erc20.balanceOf(address(this)), \"can't withdraw more erc20 tokens than balance\");\r\n      }\r\n      delete withdrawalApprovals[_tokenContract][_recipient];\r\n      withdrawalRequests[_tokenContract][_recipient] = _amount;\r\n      withdrawalApprovals[_tokenContract][_recipient].push(msg.sender);\r\n      emit WithdrawalRequest(_tokenContract, _recipient, _amount);\r\n    } else {\r\n      require(\r\n        withdrawalApprovals[_tokenContract][_recipient].length >= 1,\r\n        \"you can't initiate a withdrawal request for another user\");\r\n      require(\r\n        withdrawalRequests[_tokenContract][_recipient] == _amount,\r\n        \"approval amount must exactly match withdrawal request\");\r\n      for(uint i = 0; i < withdrawalApprovals[_tokenContract][_recipient].length; i++) {\r\n        require(\r\n          withdrawalApprovals[_tokenContract][_recipient][i] != msg.sender,\r\n          \"sender has not already approved this withdrawal\");\r\n      }\r\n      withdrawalApprovals[_tokenContract][_recipient].push(msg.sender);\r\n    }\r\n    emit WithdrawalApproval(_tokenContract, msg.sender, _recipient, _amount);\r\n  }\r\n\r\n  // @dev Completes an approved withdrawal, transferring the erc20 tokens or Ether to the withdrawing account\r\n  // @param _tokenContract - the contract of the erc20 token to withdraw (or, use the zero address for ETH)\r\n  // @param _amount - the amount to withdraw. Amount must match the approved withdrawal amount.\r\n  function completeWithdrawal(address _tokenContract, uint _amount)\r\n    external\r\n    isOwner(msg.sender)\r\n  {\r\n    require(\r\n      withdrawalApprovals[_tokenContract][msg.sender].length >= getMinimumApprovals(),\r\n      \"insufficient approvals to complete this withdrawal\");\r\n    require(withdrawalRequests[_tokenContract][msg.sender] == _amount, \"incorrect withdrawal amount specified\");\r\n    delete withdrawalRequests[_tokenContract][msg.sender];\r\n    delete withdrawalApprovals[_tokenContract][msg.sender];\r\n    emit Withdrawal(_tokenContract, msg.sender, _amount);\r\n    if(_tokenContract == address(0)) {\r\n      require(_amount <= address(this).balance, \"can't withdraw more ETH than the balance\");\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20Interface erc20 = ERC20Interface(_tokenContract);\r\n      require(_amount <= erc20.balanceOf(address(this)), \"can't withdraw more erc20 tokens than balance\");\r\n      erc20.transfer(msg.sender, _amount);\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner4\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"ApproveNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"ApproveRemovalOfOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAddition\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"}],\"name\":\"OwnershipChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"approveOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"completeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approvalCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getOwnershipAdditions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getOwnershipRemovals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWithdrawalApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"approvals\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vetoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vetoRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"vetoWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Multisig","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e6553446a951aad47d64fb8c16b305a37f4b17e6000000000000000000000000b2268baf49504e84c8d6a1222d20e2139d5660be000000000000000000000000da1a941f2256469411f18170794bfc770078171b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e3377dd7a666eefd8690d8f0f582597e3f97029f6fa61a12feae641f9c40ca0e"}]}