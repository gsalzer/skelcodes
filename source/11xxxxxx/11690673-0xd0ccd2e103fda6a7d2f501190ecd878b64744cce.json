{"status":"1","message":"OK","result":[{"SourceCode":"/***\n *    ██████╗ ███████╗ ██████╗  ██████╗ \n *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\n *    ██║  ██║█████╗  ██║  ███╗██║   ██║\n *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\n *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\n *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \n *    \n * https://dego.finance\n                                  \n* MIT License\n* ===========\n*\n* Copyright (c) 2020 dego\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/// File: @openzeppelin/contracts/math/Math.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/introspection/IERC165.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n// File: contracts/interface/IERC20.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    // add mint interface by dego\n    function mint(address account, uint amount) external;\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/interface/IUniswapV2Router01.sol\n\npragma solidity ^0.5.5;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: contracts/interface/IUniswapV2Pair.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/library/UniswapV2Library.sol\n\npragma solidity >=0.5.0;\n\n\n\nlibrary UniswapV2Library {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex'd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66' // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB)\n        )\n            .getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(\n            reserveA > 0 && reserveB > 0,\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1]\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i]\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/library/SafeERC20.sol\n\npragma solidity ^0.5.5;\n\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/library/ReentrancyGuard.sol\n\npragma solidity ^0.5.0;\n\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    function initReentrancyStatus() internal {\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/market/NFTMarketV2.sol\n\npragma solidity ^0.5.5;\n\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\n\n\ncontract NFTMarketV2 is IERC721Receiver,  ReentrancyGuard {\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // --- Data ---\n    bool private initialized; // Flag of initialize data\n\n    IERC20 public _dandy = IERC20(0x0);\n\n    struct SalesObject {\n        uint256 id;\n        uint256 tokenId;\n        uint256 startTime;\n        uint256 durationTime;\n        uint256 maxPrice;\n        uint256 minPrice;\n        uint256 finalPrice;\n        uint8 status;\n        address payable seller;\n        address payable buyer;\n        IERC721 nft;\n    }\n\n    uint256 public _salesAmount = 0;\n\n    SalesObject[] _salesObjects;\n\n    uint256 public _minDurationTime = 5 minutes;\n\n    mapping(address => bool) public _seller;\n    mapping(address => bool) public _verifySeller;\n    mapping(address => bool) public _supportNft;\n    bool public _isStartUserSales;\n\n    bool public _isRewardSellerDandy = false;\n    bool public _isRewardBuyerDandy = false;\n\n    uint256 public _sellerRewardDandy = 1e15;\n    uint256 public _buyerRewardDandy = 1e15;\n\n    uint256 public _tipsFeeRate = 20;\n    uint256 public _baseRate = 1000;\n    address payable _tipsFeeWallet;\n\n    event eveSales(\n        uint256 indexed id, \n        uint256 tokenId,\n        address buyer, \n        uint256 finalPrice, \n        uint256 tipsFee\n    );\n\n    event eveNewSales(\n        uint256 indexed id,\n        uint256 tokenId, \n        address seller, \n        address nft,\n        address buyer, \n        uint256 startTime,\n        uint256 durationTime,\n        uint256 maxPrice, \n        uint256 minPrice,\n        uint256 finalPrice\n    );\n\n    event eveCancelSales(\n        uint256 indexed id,\n        uint256 tokenId\n    );\n\n    event eveNFTReceived(address operator, address from, uint256 tokenId, bytes data);\n\n    address public _governance;\n\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n\n    mapping(uint256 => address) public _saleOnCurrency;\n\n\n    mapping(address => bool) public _supportCurrency;\n\n\n    mapping(address => SupportBuyCurrency) public _supportBuyCurrency;\n\n\n    mapping(uint256=>uint256) public deflationBaseRates;\n    mapping(uint256=>address) public routers;\n    // IUniswapV2Router01[] public routers;\n\n    struct SupportBuyCurrency {\n        bool status;\n        bool isDeflation;\n        uint256 deflationRate;\n    }\n\n    \n    \n    \n    event eveSupportCurrency(\n        address currency, \n        bool support\n    );\n\n    event eveSupportBuyCurrency(\n        address currency, \n        bool status,\n        bool isDeflation,\n        uint256 deflationRate\n    );\n\n    event eveDeflationBaseRate(\n        uint256 deflationBaseRate\n    );\n\n    constructor() public {\n        _governance = tx.origin;\n    }\n    function() external payable {}\n    // --- Init ---\n    function initialize(\n        address payable tipsFeeWallet,\n        uint256 minDurationTime,\n        uint256 tipsFeeRate,\n        uint256 baseRate\n    ) public {\n        require(!initialized, \"initialize: Already initialized!\");\n        _governance = msg.sender;\n        _tipsFeeWallet = tipsFeeWallet;\n        _minDurationTime = minDurationTime;\n        _tipsFeeRate = tipsFeeRate;\n        _baseRate = baseRate;\n        initReentrancyStatus();\n        initialized = true;\n    }\n\n\n    modifier onlyGovernance {\n        require(msg.sender == _governance, \"not governance\");\n        _;\n    }\n\n    function setGovernance(address governance)  public  onlyGovernance\n    {\n        require(governance != address(0), \"new governance the zero address\");\n        emit GovernanceTransferred(_governance, governance);\n        _governance = governance;\n    }\n\n\n    /**\n     * check address\n     */\n    modifier validAddress( address addr ) {\n        require(addr != address(0x0));\n        _;\n    }\n\n    modifier checkindex(uint index) {\n        require(index <= _salesObjects.length, \"overflow\");\n        _;\n    }\n\n    modifier checkSupportBuyCurrendy(address currency) {\n        SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[currency];\n        require(supportBuyCurrency.status == true, \"not support currency\");\n        _;\n    }\n\n    modifier checkTime(uint index) {\n        require(index <= _salesObjects.length, \"overflow\");\n        SalesObject storage obj = _salesObjects[index];\n        require(obj.startTime <= now, \"!open\");\n        _;\n    }\n\n\n    modifier mustNotSellingOut(uint index) {\n        require(index <= _salesObjects.length, \"overflow\");\n        SalesObject storage obj = _salesObjects[index];\n        require(obj.buyer == address(0x0) && obj.status == 0, \"sry, selling out\");\n        _;\n    }\n\n    modifier onlySalesOwner(uint index) {\n        require(index <= _salesObjects.length, \"overflow\");\n        SalesObject storage obj = _salesObjects[index];\n        require(obj.seller == msg.sender || msg.sender == _governance, \"author & governance\");\n        _;\n    }\n\n    function seize(IERC20 asset) external onlyGovernance returns (uint256 balance) {\n        balance = asset.balanceOf(address(this));\n        asset.safeTransfer(_governance, balance);\n    }\n\n\n    function setIUniswapV2Router01(address router_) public onlyGovernance {\n        routers[0] = router_;\n    }\n\n    function setSellerRewardDandy(uint256 rewardDandy) public onlyGovernance {\n        _sellerRewardDandy = rewardDandy;\n    }\n\n    function setBuyerRewardDandy(uint256 rewardDandy) public onlyGovernance {\n        _buyerRewardDandy = rewardDandy;\n    }\n\n    function addSupportNft(address nft) public onlyGovernance validAddress(nft) {\n        _supportNft[nft] = true;\n    }\n\n    function removeSupportNft(address nft) public onlyGovernance validAddress(nft) {\n        _supportNft[nft] = false;\n    }\n\n    function addSeller(address seller) public onlyGovernance validAddress(seller) {\n        _seller[seller] = true;\n    }\n\n    function removeSeller(address seller) public onlyGovernance validAddress(seller) {\n        _seller[seller] = false;\n    }\n    \n    function addSupportCurrency(address erc20) public onlyGovernance {\n        require(_supportCurrency[erc20] == false, \"the currency have support\");\n        _supportCurrency[erc20] = true;\n        emit eveSupportCurrency(erc20, true);\n    }\n\n    function removeSupportCurrency(address erc20) public onlyGovernance {\n        require(_supportCurrency[erc20], \"the currency can not remove\");\n        _supportCurrency[erc20] = false;\n        emit eveSupportCurrency(erc20, false);\n    }\n\n\n    function setSupportBuyCurrency(address erc20,bool status,bool isDeflation,uint256 deflationRate ) public onlyGovernance {\n        if (isDeflation) {\n            require(deflationRate >0, \"deflationRate 0\");\n        }\n        _supportBuyCurrency[erc20] = SupportBuyCurrency(status,isDeflation,deflationRate);\n        emit eveSupportBuyCurrency(erc20,status,isDeflation,deflationRate);\n    }\n\n    function setDeflationBaseRate(uint256 deflationRate_) public onlyGovernance {\n        deflationBaseRates[0] = deflationRate_;\n        emit eveDeflationBaseRate(deflationRate_);\n    }\n\n\n    function addVerifySeller(address seller) public onlyGovernance validAddress(seller) {\n        _verifySeller[seller] = true;\n    }\n\n    function removeVerifySeller(address seller) public onlyGovernance validAddress(seller) {\n        _verifySeller[seller] = false;\n    }\n\n    function setIsStartUserSales(bool isStartUserSales) public onlyGovernance {\n        _isStartUserSales = isStartUserSales;\n    }\n\n    function setIsRewardSellerDandy(bool isRewardSellerDandy) public onlyGovernance {\n        _isRewardSellerDandy = isRewardSellerDandy;\n    }\n\n    function setIsRewardBuyerDandy(bool isRewardBuyerDandy) public onlyGovernance {\n        _isRewardBuyerDandy = isRewardBuyerDandy;\n    }\n\n    function setMinDurationTime(uint256 durationTime) public onlyGovernance {\n        _minDurationTime = durationTime;\n    }\n\n    function setTipsFeeWallet(address payable wallet) public onlyGovernance {\n        _tipsFeeWallet = wallet;\n    }\n\n    function setDandyAddress(address addr) external onlyGovernance validAddress(addr) {\n        _dandy = IERC20(addr);\n    }\n\n    function setBaseRate(uint256 rate) external onlyGovernance {\n        _baseRate = rate;\n    }\n\n    function setTipsFeeRate(uint256 rate) external onlyGovernance {\n        _tipsFeeRate = rate;\n    }\n\n\n\n    function getSalesEndTime(uint index) \n        external\n        view\n        checkindex(index)\n        returns (uint256) \n    {\n        SalesObject storage obj = _salesObjects[index];\n        return obj.startTime.add(obj.durationTime);\n    }\n\n    function getSales(uint index) external view checkindex(index) returns(SalesObject memory) {\n        return _salesObjects[index];\n    }\n\n    function getSalesPrice(uint index)\n        external\n        view\n        checkindex(index)\n        returns (uint256)\n    {\n        SalesObject storage obj = _salesObjects[index];\n        if(obj.buyer != address(0x0) || obj.status == 1) {\n            return obj.finalPrice;\n        } else {\n            if(obj.startTime.add(obj.durationTime) < now) {\n                return obj.minPrice;\n            } else if (obj.startTime >= now) {\n                return obj.maxPrice;\n            } else {\n                uint256 per = obj.maxPrice.sub(obj.minPrice).div(obj.durationTime);\n                return obj.maxPrice.sub(now.sub(obj.startTime).mul(per));\n            }\n        }\n    }\n\n    \n\n    function isVerifySeller(uint index) public view checkindex(index) returns(bool) {\n        SalesObject storage obj = _salesObjects[index];\n        return _verifySeller[obj.seller];\n    }\n\n    function cancelSales(uint index) external checkindex(index) onlySalesOwner(index) mustNotSellingOut(index) nonReentrant {\n        require(_isStartUserSales || _seller[msg.sender] == true, \"cannot sales\");\n        SalesObject storage obj = _salesObjects[index];\n        obj.status = 2;\n        obj.nft.safeTransferFrom(address(this), obj.seller, obj.tokenId);\n\n        emit eveCancelSales(index, obj.tokenId);\n    }\n\n    function startSales(uint256 tokenId,\n                        uint256 maxPrice, \n                        uint256 minPrice,\n                        uint256 startTime, \n                        uint256 durationTime,\n                        address nft,\n                        address currency)\n        external \n        nonReentrant\n        validAddress(nft)\n        returns(uint)\n    {\n        require(tokenId != 0, \"invalid token\");\n        require(startTime.add(durationTime) > now, \"invalid start time\");\n        require(durationTime >= _minDurationTime, \"invalid duration\");\n        require(maxPrice >= minPrice, \"invalid price\");\n        require(_isStartUserSales || _seller[msg.sender] == true || _supportNft[nft] == true, \"cannot sales\");\n        require(_supportCurrency[currency] == true, \"not support currency\");\n\n        IERC721(nft).safeTransferFrom(msg.sender, address(this), tokenId);\n\n        _salesAmount++;\n        SalesObject memory obj;\n\n        obj.id = _salesAmount;\n        obj.tokenId = tokenId;\n        obj.seller = msg.sender;\n        obj.nft = IERC721(nft);\n        obj.buyer = address(0x0);\n        obj.startTime = startTime;\n        obj.durationTime = durationTime;\n        obj.maxPrice = maxPrice;\n        obj.minPrice = minPrice;\n        obj.finalPrice = 0;\n        obj.status = 0;\n        \n        _saleOnCurrency[obj.id] = currency;\n        \n        if (_salesObjects.length == 0) {\n            SalesObject memory zeroObj;\n            zeroObj.tokenId = 0;\n            zeroObj.seller = address(0x0);\n            zeroObj.nft = IERC721(0x0);\n            zeroObj.buyer = address(0x0);\n            zeroObj.startTime = 0;\n            zeroObj.durationTime = 0;\n            zeroObj.maxPrice = 0;\n            zeroObj.minPrice = 0;\n            zeroObj.finalPrice = 0;\n            zeroObj.status = 2;\n            _salesObjects.push(zeroObj);\n        }\n\n        _salesObjects.push(obj);\n\n        if(_isRewardSellerDandy || _verifySeller[msg.sender]) {\n            _dandy.mint(msg.sender, _sellerRewardDandy);\n        }\n        \n        uint256 tmpMaxPrice = maxPrice;\n        uint256 tmpMinPrice = minPrice;\n        emit eveNewSales(obj.id, tokenId, msg.sender, nft, address(0x0), startTime, durationTime, tmpMaxPrice, tmpMinPrice, 0);\n        return _salesAmount;\n    }\n\n    function buy(uint index, address currency_)\n        public\n        nonReentrant\n        mustNotSellingOut(index)\n        checkTime(index)\n        checkSupportBuyCurrendy(currency_)\n        payable \n    {\n        SalesObject storage obj = _salesObjects[index];\n        require(_isStartUserSales || _seller[msg.sender] == true, \"cannot sales\");\n        address currencyAddr = _saleOnCurrency[obj.id];\n        uint256 price = this.getSalesPrice(index);\n        uint256 tipsFee = price.mul(_tipsFeeRate).div(_baseRate);\n        uint256 purchase = price.sub(tipsFee);\n        if (address(currencyAddr) == currency_){\n            if (currencyAddr == address(0x0)){\n                require (msg.value >= this.getSalesPrice(index), \"umm.....  your price is too low\");\n                uint256 returnBack = msg.value.sub(price);\n                if(returnBack > 0) {\n                    msg.sender.transfer(returnBack);\n                }\n                if(tipsFee > 0) {\n                    _tipsFeeWallet.transfer(tipsFee);\n                }\n                obj.seller.transfer(purchase);\n            }else{\n                IERC20(currencyAddr).safeTransferFrom(msg.sender, _tipsFeeWallet, tipsFee);\n                IERC20(currencyAddr).safeTransferFrom(msg.sender, obj.seller, purchase);\n            }\n        }else{\n            if (currencyAddr == address(0x0)){\n                uint256 ethAmount = tokenToEth(currency_, price);\n                // uint256 ethAmount = 0;\n                // SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[currency_];\n                // if (supportBuyCurrency.isDeflation) {\n                //     ethAmount = exactTokenToEth(currency_, price);\n                // } else {\n                //     ethAmount = tokenToExactEth(currency_, price);\n                // }\n                require (ethAmount >= price, \"umm.....  your price is too low\");\n                uint256 returnBack = ethAmount.sub(price).add(msg.value);\n                if(returnBack > 0) {\n                    msg.sender.transfer(returnBack);\n                }\n                if(tipsFee > 0) {\n                    _tipsFeeWallet.transfer(tipsFee);\n                }\n                obj.seller.transfer(purchase);\n            }else{\n                // transfer\n                require(false, \"not support token\");\n            }\n        }\n\n        if(_isRewardBuyerDandy || _verifySeller[obj.seller]) {\n            _dandy.mint(msg.sender, _buyerRewardDandy);\n        }\n\n        obj.nft.safeTransferFrom(address(this), msg.sender, obj.tokenId);\n        \n        obj.buyer = msg.sender;\n        obj.finalPrice = price;\n\n        obj.status = 1;\n\n        // fire event\n        emit eveSales(index, obj.tokenId, msg.sender, price, tipsFee);\n    }\n\n\n\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4) {\n        //only receive the _nft staff\n        if(address(this) != operator) {\n            //invalid from nft\n            return 0;\n        }\n\n        //success\n        emit eveNFTReceived(operator, from, tokenId, data);\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n    }\n    // function exactTokenToEth(address erc20Token_, uint256 amountOutMin) internal returns (uint256) {\n    //     address erc20Token = erc20Token_;\n    //     SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[erc20Token];\n\n    //     address[] memory path = new address[](2);\n    //     path[0] = erc20Token;\n    //     path[1] = getRouter().WETH();\n\n    //     uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOutMin, path);\n    //     uint256 amountInMax = amounts[0];\n        \n    //     uint256 amountIn = amountInMax.mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate).mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate);\n\n    //     uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\n    //     IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountIn);\n    //     uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\n    //     amountIn = balanceAfter.sub(balanceBefore);\n    //     IERC20(erc20Token).approve(address(getRouter()), amountIn);\n\n    //     uint256 ethBefore = address(this).balance;\n     \n    //     getRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\n    //     uint256 ethAfter = address(this).balance;\n\n    //     uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\n    //     uint256 supAmount = balanceLast.sub(balanceBefore);\n    //     if (supAmount>0){\n    //         IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\n    //     }\n\n    //     return ethAfter.sub(ethBefore);\n    // }\n\n    // function tokenToExactEth(address erc20Token, uint256 amountOut) internal returns (uint256) {\n    //     address[] memory path = new address[](2);\n    //     path[0] = erc20Token;\n    //     path[1] = getRouter().WETH();\n       \n    //     uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOut, path);\n    //     uint256 amountInMax = amounts[0];\n        \n    //     uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\n    //     IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountInMax);\n    //     uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\n    //     amountInMax = balanceAfter.sub(balanceBefore);\n    //     IERC20(erc20Token).approve(address(getRouter()), amountInMax);\n\n    //     uint256 ethBefore = address(this).balance;\n    //     getRouter().swapTokensForExactETH(amountOut, amountInMax, path, address(this), block.timestamp);\n    //     uint256 ethAfter = address(this).balance;\n\n    //     uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\n    //     uint256 supAmount = balanceLast.sub(balanceBefore);\n    //     if (supAmount>0){\n    //         IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\n    //     }\n    //     return ethAfter.sub(ethBefore);\n    // }\n    function tokenToEth(address erc20Token, uint256 amountOut) private returns(uint256) {\n        address[] memory path = new address[](2);\n        path[0] = erc20Token;\n        path[1] = getRouter().WETH();\n       \n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOut, path);\n        uint256 amountIn = amounts[0];\n        \n        SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[erc20Token];\n        if (supportBuyCurrency.isDeflation) {\n            amountIn = amountIn.mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate).mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate);\n        }\n\n        uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\n        IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountIn);\n        uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\n        amountIn = balanceAfter.sub(balanceBefore);\n        IERC20(erc20Token).approve(address(getRouter()), amountIn);\n        \n        uint256 ethBefore = address(this).balance;\n        if (supportBuyCurrency.isDeflation) {\n            getRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\n        } else {\n            getRouter().swapTokensForExactETH(amountOut, amountIn, path, address(this), block.timestamp);\n        }\n        uint256 ethAfter = address(this).balance;\n\n        uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\n        uint256 supAmount = balanceLast.sub(balanceBefore);\n        if (supAmount>0){\n            IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\n        }\n        return ethAfter.sub(ethBefore);\n    }\n\n    function getDeflationBaseRate() public view returns(uint256) {\n        return deflationBaseRates[0];\n    }\n    function getRouter() public view returns(IUniswapV2Router01) {\n        return IUniswapV2Router01(routers[0]);\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setIUniswapV2Router01\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_sellerRewardDandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isRewardSellerDandy\",\"type\":\"bool\"}],\"name\":\"setIsRewardSellerDandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"removeSupportCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_buyerRewardDandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBaseRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportNft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_isRewardBuyerDandy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTipsFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"durationTime\",\"type\":\"uint256\"}],\"name\":\"setMinDurationTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportBuyCurrency\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"isDeflation\",\"type\":\"bool\"},{\"name\":\"deflationRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_isRewardSellerDandy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isRewardBuyerDandy\",\"type\":\"bool\"}],\"name\":\"setIsRewardBuyerDandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tipsFeeWallet\",\"type\":\"address\"},{\"name\":\"minDurationTime\",\"type\":\"uint256\"},{\"name\":\"tipsFeeRate\",\"type\":\"uint256\"},{\"name\":\"baseRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSalesPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deflationBaseRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_seller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewardDandy\",\"type\":\"uint256\"}],\"name\":\"setSellerRewardDandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSales\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"durationTime\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_isStartUserSales\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"removeSupportNft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"removeSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minDurationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"currency_\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewardDandy\",\"type\":\"uint256\"}],\"name\":\"setBuyerRewardDandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_salesAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDandyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTipsFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"addSupportCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeflationBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"addVerifySeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"isDeflation\",\"type\":\"bool\"},{\"name\":\"deflationRate\",\"type\":\"uint256\"}],\"name\":\"setSupportBuyCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_saleOnCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"removeVerifySeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tipsFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isStartUserSales\",\"type\":\"bool\"}],\"name\":\"setIsStartUserSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"addSupportNft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_verifySeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deflationRate_\",\"type\":\"uint256\"}],\"name\":\"setDeflationBaseRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"addSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isVerifySeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"durationTime\",\"type\":\"uint256\"},{\"name\":\"nft\",\"type\":\"address\"},{\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"startSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSalesEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dandy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tipsFee\",\"type\":\"uint256\"}],\"name\":\"eveSales\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"durationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint256\"}],\"name\":\"eveNewSales\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"eveCancelSales\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eveNFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"eveSupportCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isDeflation\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"deflationRate\",\"type\":\"uint256\"}],\"name\":\"eveSupportBuyCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deflationBaseRate\",\"type\":\"uint256\"}],\"name\":\"eveDeflationBaseRate\",\"type\":\"event\"}]","ContractName":"NFTMarketV2","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}