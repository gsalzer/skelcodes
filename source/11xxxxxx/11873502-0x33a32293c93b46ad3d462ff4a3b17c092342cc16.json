{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n         return 0;\r\n      }\r\n      c = a * b;  \r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      // uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return a / b;\r\n   }\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n}\r\ncontract Token {\r\n   using SafeMath for uint256;\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   mapping(address => uint256) balances;\r\n   uint256 totalSupply_;\r\n   function totalSupply() public view returns (uint256) {\r\n      return totalSupply_;\r\n   }\r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(_value <= balances[msg.sender], \"balance of msg.sender insufficient\");\r\n      require(_to != address(0));\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n   }\r\n   function balanceOf(address _owner) public view returns (uint256) {\r\n      return balances[_owner];\r\n   }\r\n   mapping (address => mapping (address => uint256)) internal allowed;\r\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n      require(_to != address(0));\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n   }\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n   }\r\n   function allowance(address _owner,address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n   }\r\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n      allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);   \r\n   }\r\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n      uint256 oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue >= oldValue) {\r\n         allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n   }\r\n}\r\n\r\ncontract ChurroCoin is Token {\r\n   string public name = 'Churro Coin';\r\n   string public symbol = 'CHRR';\r\n   uint256 public decimals = 10;\r\n   uint256 public totalSupply = 1000e16;\r\n   address public crowdsaleAddress;\r\n   address public owner;\r\n   \r\n   modifier onlyCrowdsale {\r\n      require(msg.sender == crowdsaleAddress);\r\n      _;\r\n   }\r\n   modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n   }\r\n   constructor () public Token() {\r\n      owner = msg.sender;\r\n      balances[msg.sender] = 900e16;\r\n   }\r\n   function setCrowdsale(address _crowdsaleAddress) public onlyOwner {\r\n      require(_crowdsaleAddress != address(0));\r\n      crowdsaleAddress = _crowdsaleAddress;\r\n      balances[_crowdsaleAddress] = 100e16;\r\n   }\r\n   function buyTokens(address _receiver, uint256 _amount) public onlyCrowdsale {\r\n      require(_receiver != address(0));\r\n      require(_amount > 0);\r\n      \r\n      transfer(_receiver, _amount);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ChurroCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://de3d228f2e4b69c3db7646f1cdf16c2ba06707b5bdaf97ffcf04d394a69ead32"}]}