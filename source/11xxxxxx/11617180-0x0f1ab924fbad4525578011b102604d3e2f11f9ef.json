{"status":"1","message":"OK","result":[{"SourceCode":"{\"AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.7.0;\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  function latestTimestamp() external view returns (uint256);\\r\\n  function latestRound() external view returns (uint256);\\r\\n  function getAnswer(uint256 roundId) external view returns (int256);\\r\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\r\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\r\\n}\"},\"DataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c=0.8.0;\\r\\n\\r\\nimport \\\"./ExternalAccessible.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract DataStorage is ExternalAccessible {\\r\\n    using SafeMath for *;\\r\\n    uint256 public _totalSupply;\\r\\n    mapping(address =\\u003e uint256) public _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public _allowed;\\r\\n    \\r\\n    constructor(address m) {\\r\\n        masterContract = m;\\r\\n        // 200k - 50k giveaway, 150k staking bonus\\r\\n        _balances[address(0x7FB4eCD5b8E234fA5863bFa2799EA25D8819F42d)] = 200000.mul(10.pow(18));\\r\\n        _totalSupply = 200000.mul(10.pow(18));\\r\\n    }\\r\\n    \\r\\n     function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256) {\\r\\n        return _balances[_owner];\\r\\n    }\\r\\n    \\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n    \\r\\n    function updateSupply(uint256 val) external hasAccess {\\r\\n        _totalSupply = val;\\r\\n    }\\r\\n    \\r\\n    function updateBalance(address user, uint256 balances) external hasAccess {\\r\\n        _balances[user] = balances;\\r\\n    }\\r\\n    \\r\\n    function updateAllowed(address _from, address to, uint256 allowed) external hasAccess {\\r\\n        _allowed[_from][to] = allowed;\\r\\n    }\\r\\n}\\r\\n\"},\"ExternalAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c=0.8.0;\\r\\n\\r\\ncontract HasMaster {\\r\\n    address public masterContract;\\r\\n    \\r\\n    function newMaster(address addy) external view returns (bool) {\\r\\n        require(msg.sender == masterContract);\\r\\n        masterContract == addy;\\r\\n        assert(addy == masterContract);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ExternalAccessible is HasMaster {\\r\\n\\r\\n    function checkAccess() public returns (bool) {\\r\\n        bytes memory payload = abi.encodeWithSignature(\\\"checkAccessAddy(address)\\\", msg.sender);\\r\\n        (bool success, bytes memory returnData) = masterContract.call(payload);\\r\\n        bool data = abi.decode(returnData, (bool));\\r\\n        require(data);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n//    function checkAccess() public view returns (bool) {\\r\\n//        bytes memory payload = abi.encodeWithSignature(\\\"checkAccessAddy\\\", msg.sender);\\r\\n//        (bool success, bytes memory returnData) = masterContract.call(payload);\\r\\n//        require(success);\\r\\n//        return true;\\r\\n//    }\\r\\n\\r\\n    modifier hasAccess() {\\r\\n        require(checkAccess());\\r\\n        _;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c=0.8.0;\\r\\n\\r\\n/** Taken from the OpenZeppelin github\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n       \\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n    \\r\\n    function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {\\r\\n    if (exponent == 0) {\\r\\n        return 1;\\r\\n    }\\r\\n    else if (exponent == 1) {\\r\\n        return base;\\r\\n    }\\r\\n    else if (base == 0 \\u0026\\u0026 exponent != 0) {\\r\\n        return 0;\\r\\n    }\\r\\n    else {\\r\\n        uint256 z = base;\\r\\n        for (uint256 i = 1; i \\u003c exponent; i++)\\r\\n            z = mul(z, base);\\r\\n        return z;\\r\\n    }\\r\\n}\\r\\n}\"},\"wXEQ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c=0.8.0;\\r\\nimport \\\"./AggregatorInterface.sol\\\";\\r\\nimport \\\"./DataStorage.sol\\\";\\r\\nimport \\\"./ExternalAccessible.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract wXEQ is ExternalAccessible {\\r\\n\\r\\n    using SafeMath for *;\\r\\n\\r\\n    struct mintXEQStruct {\\r\\n        address addr;\\r\\n        uint amount;\\r\\n        string xeqAddress;\\r\\n    }\\r\\n\\r\\n    struct TxStorage {\\r\\n        string hash;\\r\\n        uint amountMinted;\\r\\n    }\\r\\n\\r\\n    string public _name;\\r\\n    string public _symbol;\\r\\n    address public contractCreator;\\r\\n    uint8 public _decimals;\\r\\n    DataStorage dataStorage;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    constructor (address d, address _masterContract) {\\r\\n        dataStorage = DataStorage(d);\\r\\n        _decimals = 18;\\r\\n        _name = \\\"Wrapped Equilibria\\\";\\r\\n        _symbol = \\\"wXEQ\\\";\\r\\n        contractCreator = msg.sender;\\r\\n        masterContract = _masterContract;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return dataStorage.totalSupply();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256) {\\r\\n        return dataStorage.balanceOf(_owner);\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return dataStorage.allowance(_owner, _spender);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        require(value \\u003c= dataStorage.balanceOf(msg.sender));\\r\\n        require(to != address(0));\\r\\n        uint256 bal = dataStorage.balanceOf(msg.sender);\\r\\n        dataStorage.updateBalance(msg.sender, bal.sub(value));\\r\\n        assert(dataStorage.balanceOf(msg.sender).add(value) == bal);\\r\\n        bal = dataStorage.balanceOf(to);\\r\\n        dataStorage.updateBalance(to, bal.add(value));\\r\\n        assert(dataStorage.balanceOf(to).sub(value) == bal);\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        require(dataStorage.balanceOf(msg.sender) \\u003e= value);\\r\\n        dataStorage.updateAllowed(msg.sender, spender, value);\\r\\n        assert(allowance(msg.sender, spender) == value);\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        uint256 allow = allowance(msg.sender, spender);\\r\\n        dataStorage.updateAllowed(msg.sender, spender, allow.sub(subtractedValue));\\r\\n        assert(allow.sub(subtractedValue) == allowance(msg.sender, spender));\\r\\n        emit Approval(msg.sender, spender, allowance(msg.sender, spender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from,address to,uint256 value) public returns (bool){\\r\\n        require(to != address(0));\\r\\n        require(value \\u003c= dataStorage.balanceOf(_from));\\r\\n        require(value \\u003c= allowance(_from, msg.sender));\\r\\n\\r\\n        dataStorage.updateBalance(_from, dataStorage.balanceOf(_from).sub(value));\\r\\n        dataStorage.updateBalance(to, dataStorage.balanceOf(to).add(value));\\r\\n        dataStorage.updateAllowed(_from, msg.sender, allowance(_from, msg.sender).sub(value));\\r\\n        emit Transfer(_from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        uint256 allow = allowance(msg.sender, spender);\\r\\n        require(allow.add(addedValue) \\u003c= dataStorage.balanceOf(msg.sender));\\r\\n        dataStorage.updateAllowed(msg.sender, spender, allow.add(addedValue));\\r\\n        assert(allow.add(addedValue) == allowance(msg.sender, spender));\\r\\n        emit Approval(msg.sender, spender, allowance(msg.sender, spender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) public hasAccess {\\r\\n        require(amount \\u003c= dataStorage.balanceOf(account));\\r\\n        uint256 supply = dataStorage.totalSupply();\\r\\n        dataStorage.updateSupply(supply.sub(amount));\\r\\n        assert(supply == dataStorage.totalSupply().add(amount));\\r\\n        uint256 bal = dataStorage.balanceOf(account);\\r\\n        dataStorage.updateBalance(account, bal.sub(amount));\\r\\n        assert(bal == dataStorage.balanceOf(account).add(amount));\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address account, uint256 amount) public {\\r\\n        require(amount \\u003c= allowance(account, msg.sender));\\r\\n        uint256 allow = allowance(account, msg.sender);\\r\\n        dataStorage.updateAllowed(account, msg.sender, allow.sub(amount));\\r\\n        assert(allow.sub(amount) == allowance(account, msg.sender));\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public hasAccess {\\r\\n        uint256 supp = dataStorage.totalSupply();\\r\\n        dataStorage.updateSupply(supp.add(amount));\\r\\n        assert(dataStorage.totalSupply().sub(amount) == supp);\\r\\n        uint256 bal = dataStorage.balanceOf(account);\\r\\n        dataStorage.updateBalance(account, bal.add(amount));\\r\\n        assert(dataStorage.balanceOf(account).sub(amount) == bal);\\r\\n        emit Transfer(msg.sender, account, amount);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"newMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"wXEQ","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000febdcd746934b4feffdc4858f7e97315e18849dc0000000000000000000000006a1f1763bc95dc9ea2a0511d789d09bbebc1045a","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c05b02218cfaa7d76dfd0b31b89581176e8fc9cbe388dfd183843d3c339909e"}]}