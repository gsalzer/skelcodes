{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DRFLord.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IDRF.sol\\\";\\n\\ncontract DRFLord is ReentrancyGuard, Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Staked(address indexed account, uint256 ethAmount, uint256 lpAmount);\\n    event Withdrawn(address indexed account, uint256 drfAmount, uint256 ethAmount, uint256 lpAmount);\\n    event Claimed(address indexed account, uint256 ethAmount, uint256 lpAmount);\\n    event Halved(uint256 rewardAllocation);\\n    event Rebalanced();\\n    event SwappedSDRF(uint256 amount);\\n\\n    bool private _initialized;\\n\\n    IUniswapV2Factory uniswapFactory;\\n    IUniswapV2Router02 uniswapRouter;\\n    address weth;\\n    address drf;\\n    address sdrf;\\n    address sdrfFarm;\\n    address payable devTreasury;\\n    address pairAddress;\\n\\n    bool public isFarmOpen = false;\\n    uint256 public farmOpenTime;\\n\\n    uint256 private constant MAX = uint256(- 1);\\n    uint256 public constant INITIAL_PRICE = 4000;\\n    uint256 public maxStake = 25 ether;\\n\\n    uint256 public rewardAllocation;\\n    uint256 public rewardRate;\\n    uint256 public constant rewardDuration = 15 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public finishTime;\\n\\n    struct AccountInfo {\\n        uint256 balance;\\n        uint256 peakBalance;\\n        uint256 withdrawTime;\\n        uint256 reward;\\n        uint256 rewardPerTokenPaid;\\n    }\\n\\n    /// @notice Account info\\n    mapping(address => AccountInfo) public accountInfos;\\n\\n    /// @notice Peak LP token balance\\n    uint256 public peakPairTokenBalance;\\n\\n    /// @dev Total staked token\\n    uint256 private _totalSupply;\\n\\n    /// @notice Principal supply is used to generate perpetual yield\\n    /// @dev Used to give liquidity provider in liquidity pair rewards\\n    /// If this value is not zero, it means the principal is not used, and still exist in lord contract\\n    uint256 public principalSupply;\\n\\n    /// @notice Marketing funds\\n    uint256 public marketingSupply;\\n\\n    /// @notice Sale supply\\n    uint256 public saleSupply;\\n\\n    /// @notice Lend supply\\n    uint256 public lendSupply;\\n\\n    /// @notice Swappable DRF for sDRF\\n    uint256 public swappableSupply;\\n\\n    /// @notice Deposited DRF from SDRF Farm\\n    uint256 public sdrfFarmDepositSupply;\\n\\n    /// @notice Burned supply that locked forever\\n    uint256 public burnSupply;\\n\\n    /// @notice Drift liquidity threshold\\n    uint256 public driftThreshold = 75;\\n\\n    /// @notice Brake liquidity threshold\\n    uint256 public brakeThreshold = 50;\\n\\n    /// @notice Last rebalance time\\n    uint256 public rebalanceTime;\\n\\n    /// @notice rebalance waiting time\\n    uint256 public rebalanceWaitingTime = 1 hours;\\n\\n    /// @notice Min balance to receive reward as rebalance caller\\n    uint256 public rebalanceRewardMinBalance = 1000e18;\\n\\n    enum State {Normal, Drift, Brake}\\n    struct StateInfo {\\n        uint256 reflectFeeDenominator;\\n        uint256 buyTxFeeDenominator;\\n        uint256 sellTxFeeDenominator;\\n        uint256 buyBonusDenominator;\\n        uint256 sellFeeDenominator;\\n        uint256 rebalanceRewardDenominator;\\n        uint256 buyBackDenominator;\\n    }\\n\\n    /// @notice Current state\\n    State public state;\\n    /// @notice State info\\n    mapping(State => StateInfo) public stateInfo;\\n    /// @notice Last state time\\n    uint256 public stateActivatedTime;\\n\\n    /// @notice Token to pair with DRF when generating liquidity\\n    address public liquidityToken;\\n    /// @notice If set, LP provider for this liquidity will receive rewards.\\n    /// Usually DRF-PartnerToken\\n    address public liquidityPairToken;\\n\\n    /// @dev Added to receive ETH when remove liquidity on Uniswap\\n    receive() external payable {\\n    }\\n\\n    constructor(address _uniswapRouter, address _drf, address _sdrf, uint256 _farmOpenTime) public {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\\n        weth = uniswapRouter.WETH();\\n        drf = _drf;\\n        sdrf = _sdrf;\\n        pairAddress = uniswapFactory.createPair(drf, weth);\\n        farmOpenTime = _farmOpenTime;\\n        devTreasury = msg.sender;\\n        liquidityToken = weth;\\n\\n        // 5% from total supply\\n        principalSupply = 500000e18;\\n        // 5% from total supply\\n        marketingSupply = 500000e18;\\n        // Sale supply\\n        saleSupply = 4000000e18;\\n        // Lend supply for lp provider\\n        lendSupply = 2000000e18;\\n        // Farming allocation / 2\\n        rewardAllocation = 1500000e18;\\n\\n        // Approve uniswap router to spend weth\\n        approveUniswap(weth);\\n        // Approve uniswap router to spend drf\\n        approveUniswap(drf);\\n        // Approve uniswap router to spend lp token\\n        approveUniswap(pairAddress);\\n\\n        // Initialize\\n        lastUpdateTime = farmOpenTime;\\n        finishTime = farmOpenTime.add(rewardDuration);\\n        rewardRate = rewardAllocation.div(rewardDuration);\\n        rebalanceTime = farmOpenTime;\\n    }\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlySDRFFarm {\\n        require(msg.sender == sdrfFarm, 'Only farm');\\n        _;\\n    }\\n\\n    modifier farmOpen {\\n        require(isFarmOpen, 'Farm not open');\\n        _;\\n    }\\n\\n    modifier checkOpenFarm()  {\\n        require(farmOpenTime <= block.timestamp, 'Farm not open');\\n        if (!isFarmOpen) {\\n            // Set flag\\n            isFarmOpen = true;\\n        }\\n        _;\\n    }\\n\\n    modifier checkHalving() {\\n        if (block.timestamp >= finishTime) {\\n            // Halved reward\\n            rewardAllocation = rewardAllocation.div(2);\\n            // Calculate reward rate\\n            rewardRate = rewardAllocation.div(rewardDuration);\\n            // Set finish time\\n            finishTime = block.timestamp.add(rewardDuration);\\n            // Set last update time\\n            lastUpdateTime = block.timestamp;\\n            // Emit event\\n            emit Halved(rewardAllocation);\\n        }\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            accountInfos[account].reward = earned(account);\\n            accountInfos[account].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== Only Owner ========== */\\n\\n    function init(address _sdrfFarm) external onlyOwner {\\n        // Make sure we can only init one time\\n        if (!_initialized) {\\n            // Set flag\\n            _initialized = true;\\n            // Set farm\\n            sdrfFarm = _sdrfFarm;\\n            // 1.5% reflect, 0.5% buy reserve, 0.5% sell reserve, 4% buy bonus, 2% sell fee, (5% lock liquidity reward from reserve), 12.5% buy back\\n            setStateInfo(State.Normal, 67, 200, 200, 25, 50, 20, 8, false);\\n            // 1% reflect, 1% buy reserve, 1% sell reserve, 6.25% buy bonus, 2% sell fee, (4% lock liquidity reward from reserve), 20% buy back\\n            setStateInfo(State.Drift, 100, 100, 100, 16, 50, 25, 5, false);\\n            // 1% reflect, 1% buy reserve, 5% sell reserve, 8% buy bonus, 2% sell fee, (3% lock liquidity reward from reserve), 50% buy back\\n            setStateInfo(State.Brake, 100, 100, 20, 12, 50, 33, 2, false);\\n            // Apply fee\\n            _applyStateFee();\\n        }\\n    }\\n\\n    function setStateInfo(\\n        State _state,\\n        uint256 _reflectFeeDenominator,\\n        uint256 _buyTxFeeDenominator,\\n        uint256 _sellTxFeeDenominator,\\n        uint256 _buyBonusDenominator,\\n        uint256 _sellFeeDenominator,\\n        uint256 _rebalanceRewardDenominator,\\n        uint256 _buyBackDenominator,\\n        bool applyImmediately\\n    ) public onlyOwner {\\n        // Make sure fee is valid\\n        require(_reflectFeeDenominator >= 10, 'Invalid denominator');\\n        require(_buyTxFeeDenominator >= 10, 'Invalid denominator');\\n        require(_sellTxFeeDenominator >= 10, 'Invalid denominator');\\n        require(_buyBonusDenominator >= 10, 'Invalid denominator');\\n        require(_sellFeeDenominator >= 10, 'Invalid denominator');\\n        require(_rebalanceRewardDenominator >= 10, 'Invalid denominator');\\n        require(_buyBackDenominator > 0, 'Invalid denominator');\\n\\n        stateInfo[_state].reflectFeeDenominator = _reflectFeeDenominator;\\n        stateInfo[_state].buyTxFeeDenominator = _buyTxFeeDenominator;\\n        stateInfo[_state].sellTxFeeDenominator = _sellTxFeeDenominator;\\n        stateInfo[_state].buyBonusDenominator = _buyBonusDenominator;\\n        stateInfo[_state].sellFeeDenominator = _sellFeeDenominator;\\n        stateInfo[_state].rebalanceRewardDenominator = _rebalanceRewardDenominator;\\n        stateInfo[_state].buyBackDenominator = _buyBackDenominator;\\n\\n        if (applyImmediately) {\\n            _applyStateFee();\\n        }\\n    }\\n\\n    function setMaxStake(uint256 _maxStake) external onlyOwner {\\n        maxStake = _maxStake;\\n    }\\n\\n    function setStateThreshold(uint256 _driftThreshold, uint256 _brakeThreshold) external onlyOwner {\\n        driftThreshold = _driftThreshold;\\n        brakeThreshold = _brakeThreshold;\\n    }\\n\\n    function setRebalanceWaitingTime(uint256 _waitingTime) external onlyOwner {\\n        rebalanceWaitingTime = _waitingTime;\\n    }\\n\\n    function setRebalanceRewardMinBalance(uint256 _minBalance) external onlyOwner {\\n        rebalanceRewardMinBalance = _minBalance;\\n    }\\n\\n    function setLiquidityToken(address _liquidityToken) external onlyOwner {\\n        liquidityToken = _liquidityToken;\\n    }\\n\\n    function setLiquidityPairAddress(address _liquidityPairToken) external onlyOwner {\\n        liquidityPairToken = _liquidityPairToken;\\n    }\\n\\n    function depositPrincipalSupply() public onlyOwner {\\n        if (principalSupply > 0) {\\n            IDRF(drf).depositPrincipalSupply(principalSupply);\\n            principalSupply = 0;\\n        }\\n    }\\n\\n    function withdrawPrincipalSupply() public onlyOwner {\\n        if (principalSupply == 0) {\\n            principalSupply = IDRF(drf).withdrawPrincipalSupply();\\n        }\\n    }\\n\\n    function withdrawMarketingSupply(address recipient, uint256 amount) external onlyOwner {\\n        require(marketingSupply > 0, 'No supply');\\n        marketingSupply = marketingSupply.sub(amount);\\n        IERC20(drf).transfer(recipient, amount);\\n    }\\n\\n    function approveUniswap(address token) public onlyOwner {\\n        IERC20(token).approve(address(uniswapRouter), MAX);\\n    }\\n\\n    function connectLiquidityToken(address _liquidityToken, address _liquidityPairToken) external onlyOwner {\\n        liquidityToken = _liquidityToken;\\n        liquidityPairToken = _liquidityPairToken;\\n        depositPrincipalSupply();\\n\\n        // Approve uniswap to spend liquidity token\\n        approveUniswap(liquidityToken);\\n        approveUniswap(liquidityPairToken);\\n    }\\n\\n    function disconnectLiquidityToken() external onlyOwner {\\n        liquidityToken = weth;\\n        liquidityPairToken = address(0);\\n        withdrawPrincipalSupply();\\n    }\\n\\n    /* ========== Only SDRF Farm ========== */\\n\\n    function depositFromSDRFFarm(address sender, uint256 amount) external onlySDRFFarm {\\n        // Transfer from sender\\n        IERC20(drf).transferFrom(sender, address(this), amount);\\n        // Increase deposit\\n        sdrfFarmDepositSupply = sdrfFarmDepositSupply.add(amount);\\n    }\\n\\n    function redeemFromSDRFFarm(address recipient, uint256 amount) external onlySDRFFarm {\\n        require(sdrfFarmDepositSupply >= amount, 'Insufficient supply');\\n        // Reduce first\\n        sdrfFarmDepositSupply = sdrfFarmDepositSupply.sub(amount);\\n        // Transfer to recipient\\n        IERC20(drf).transfer(recipient, amount);\\n    }\\n\\n    /* ========== Mutative ========== */\\n\\n    /// @notice Stake ETH.\\n    function stake() external payable nonReentrant checkOpenFarm checkHalving updateReward(msg.sender) {\\n        _stake(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Stake ETH.\\n    function stakeTo(address recipient) external payable nonReentrant checkOpenFarm checkHalving updateReward(msg.sender) {\\n        _stake(recipient, msg.value);\\n    }\\n\\n    /// @notice Withdraw LP.\\n    function withdraw(uint256 amount) external nonReentrant farmOpen checkHalving updateReward(msg.sender) {\\n        _withdraw(msg.sender, msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraw LP.\\n    function withdrawTo(address payable recipient, uint256 amount) external nonReentrant farmOpen checkHalving updateReward(msg.sender) {\\n        _withdraw(msg.sender, recipient, amount);\\n    }\\n\\n    /// @notice Claim reward\\n    function claimReward() external nonReentrant farmOpen checkHalving updateReward(msg.sender) returns (uint256 net, uint256 tax) {\\n        (net, tax) = _claimReward(msg.sender, msg.sender);\\n    }\\n\\n    /// @notice Claim reward\\n    function claimRewardTo(address recipient) external nonReentrant farmOpen checkHalving updateReward(msg.sender) returns (uint256 net, uint256 tax) {\\n        (net, tax) = _claimReward(msg.sender, recipient);\\n    }\\n\\n    /// @notice Rebalance\\n    function rebalance() external {\\n        // Let's wait before releasing liquidity\\n        require(rebalanceTime.add(rebalanceWaitingTime) <= block.timestamp, 'Too soon');\\n        // Update time\\n        rebalanceTime = block.timestamp;\\n\\n        // If there is no principal in this contract, it means the principal is actually being used\\n        if (principalSupply == 0) {\\n            // Distribute principal rewards for liquidity provider or reserve supply\\n            IDRF(drf).distributePrincipalRewards(liquidityPairToken);\\n        }\\n\\n        // Get reserve supply to be locked as liquidity\\n        uint256 liquiditySupply = IDRF(drf).reserveSupply();\\n        // If there is supply\\n        if (liquiditySupply > 0) {\\n            // If sender has required DRF, give reward\\n            if (IERC20(drf).balanceOf(msg.sender) >= rebalanceRewardMinBalance) {\\n                // Calc reward for msg sender\\n                uint256 senderReward = liquiditySupply.div(stateInfo[state].rebalanceRewardDenominator);\\n                // Reduce first\\n                liquiditySupply = liquiditySupply.sub(senderReward);\\n                // Send reward\\n                IERC20(drf).transfer(msg.sender, senderReward);\\n            }\\n\\n            // If we are not in brake state, we can provide other token liquidity\\n            // otherwise enforce DRF-ETH\\n            address token = state != State.Brake ? liquidityToken : weth;\\n\\n            uint256 drfDust;\\n            // Add liquidity DRF-Token. Default is DRF-WETH\\n            if (token == weth) {\\n                (drfDust,) = _addLiquidityDRFETH(liquiditySupply);\\n                // Adjust reserve supply\\n                IDRF(drf).setReserveSupply(drfDust);\\n                // Check if should change state\\n                _checkState();\\n            } else {\\n                uint256 tokenDust;\\n                (drfDust, tokenDust,) = _addLiquidityToken(drf, token, liquiditySupply);\\n                // Adjust reserve supply\\n                IDRF(drf).setReserveSupply(drfDust);\\n                // Send dust out\\n                IERC20(liquidityToken).transfer(devTreasury, tokenDust);\\n            }\\n        }\\n\\n        // If we have good amount of ETH\\n        if (address(this).balance > 0.01 ether) {\\n            // Buy back and burn\\n            _buyBack();\\n        }\\n\\n        emit Rebalanced();\\n    }\\n\\n    /// @notice Swap SDRF to DRF\\n    function swap(uint256 amount) external {\\n        require(state != State.Brake, 'Swap disabled');\\n        require(swappableSupply >= amount, 'Insufficient supply');\\n\\n        // Reduce swappable supply\\n        swappableSupply = swappableSupply.sub(amount);\\n        // Receive sDRF\\n        IERC20(sdrf).transferFrom(msg.sender, address(this), amount);\\n        // Transfer DRF\\n        IERC20(drf).transfer(msg.sender, amount);\\n        // Emit event\\n        emit SwappedSDRF(amount);\\n    }\\n\\n    /* ========== Private ========== */\\n\\n    function _stake(address recipient, uint256 ethAmount) private {\\n        require(ethAmount > 0, 'Cannot stake 0');\\n        require(ethAmount <= maxStake, 'Max stake reached');\\n\\n        // 10% compensation fee\\n        uint256 fee = ethAmount.div(10);\\n        ethAmount = ethAmount.sub(fee);\\n        devTreasury.transfer(fee);\\n\\n        uint256 pairETHBalance = IERC20(weth).balanceOf(pairAddress);\\n        uint256 pairDRFBalance = IERC20(drf).balanceOf(pairAddress);\\n        // If eth amount = 0 then set initial price\\n        uint256 drfAmount = pairETHBalance == 0 ? ethAmount.mul(INITIAL_PRICE) : ethAmount.mul(pairDRFBalance).div(pairETHBalance);\\n\\n        // If there is still sale supply\\n        if (saleSupply > 0) {\\n            // Get sale amount\\n            uint256 saleAmount = drfAmount > saleSupply ? saleSupply : drfAmount;\\n            // Reduce sale supply\\n            saleSupply = saleSupply.sub(saleAmount);\\n            // Send DRF to recipient\\n            IERC20(drf).transfer(recipient, saleAmount);\\n        }\\n\\n        drfAmount = drfAmount.div(2);\\n        uint256 pairTokenAmount;\\n\\n        if (lendSupply >= drfAmount) {\\n            // Use half of eth\\n            ethAmount = ethAmount.div(2);\\n            // Reduce DRF can be lend\\n            lendSupply = lendSupply.sub(drfAmount);\\n            // Add liquidity in uniswap\\n            (,, pairTokenAmount) = uniswapRouter.addLiquidityETH{value : ethAmount}(drf, drfAmount, 0, 0, address(this), MAX);\\n        } else {\\n            uint256 wethDust;\\n            IWETH(weth).deposit{value : ethAmount}();\\n            (wethDust,, pairTokenAmount) = _addLiquidityToken(weth, drf, ethAmount);\\n            IWETH(weth).withdraw(wethDust);\\n        }\\n\\n        // Add to balance\\n        accountInfos[recipient].balance = accountInfos[recipient].balance.add(pairTokenAmount);\\n        // Set peak balance\\n        if (accountInfos[recipient].balance > accountInfos[recipient].peakBalance) {\\n            accountInfos[recipient].peakBalance = accountInfos[recipient].balance;\\n        }\\n        // Set stake timestamp as withdraw time to prevent withdraw immediately after first staking\\n        if (accountInfos[recipient].withdrawTime == 0) {\\n            accountInfos[recipient].withdrawTime = block.timestamp;\\n        }\\n\\n        // Increase total supply\\n        _totalSupply = _totalSupply.add(pairTokenAmount);\\n        // Set peak pair token balance\\n        uint256 pairTokenBalance = IERC20(pairAddress).balanceOf(address(this));\\n        if (pairTokenBalance > peakPairTokenBalance) {\\n            peakPairTokenBalance = pairTokenBalance;\\n        }\\n\\n        // Check if should change state\\n        _checkState();\\n\\n        emit Staked(recipient, ethAmount, pairTokenAmount);\\n    }\\n\\n    function _withdraw(address sender, address payable recipient, uint256 amount) private {\\n        require(state != State.Brake, 'Withdraw disabled');\\n        require(amount > 0 && amount <= maxWithdrawOf(sender), 'Invalid withdraw');\\n        require(amount <= accountInfos[sender].balance, 'Insufficient balance');\\n\\n        // Reduce balance\\n        accountInfos[sender].balance = accountInfos[sender].balance.sub(amount);\\n        // Set withdraw time\\n        accountInfos[sender].withdrawTime = block.timestamp;\\n        // Reduce total supply\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        // Remove liquidity in uniswap\\n        (uint256 drfAmount, uint256 ethAmount) = uniswapRouter.removeLiquidity(drf, weth, amount, 0, 0, address(this), MAX);\\n        // Send DRF to recipient\\n        IERC20(drf).transfer(recipient, drfAmount);\\n        // Withdraw ETH and send to recipient\\n        IWETH(weth).withdraw(ethAmount);\\n        recipient.transfer(ethAmount);\\n\\n        // Check if should change state\\n        _checkState();\\n\\n        emit Withdrawn(recipient, drfAmount, ethAmount, amount);\\n    }\\n\\n    function _claimReward(address sender, address recipient) private returns (uint256 net, uint256 tax) {\\n        uint256 reward = accountInfos[sender].reward;\\n        require(reward > 0, 'No reward');\\n\\n        // Reduce reward first\\n        accountInfos[sender].reward = 0;\\n\\n        // Calculate tax and net\\n        tax = taxForReward(reward);\\n        net = reward.sub(tax);\\n\\n        // Add tax to swappable reserve\\n        swappableSupply = swappableSupply.add(tax);\\n\\n        // Send drf as reward\\n        IDRF(drf).transfer(recipient, net);\\n\\n        emit Claimed(recipient, net, tax);\\n    }\\n\\n    /// @notice Check if should change state based on liquidity\\n    function _checkState() private {\\n        uint256 pairTokenBalance = IERC20(pairAddress).balanceOf(address(this));\\n        uint256 baseThreshold = peakPairTokenBalance.div(100);\\n        uint256 driftStateThreshold = baseThreshold.mul(driftThreshold);\\n        uint256 brakeStateThreshold = baseThreshold.mul(brakeThreshold);\\n\\n        // If drift state already run for 1 day, and liquidity high enough\\n        if (state == State.Drift && stateActivatedTime.add(1 days) <= block.timestamp && pairTokenBalance > driftStateThreshold) {\\n            state = State.Normal;\\n            stateActivatedTime = block.timestamp;\\n            _applyStateFee();\\n        }\\n        // If brake state already run for 1 day, and liquidity high enough\\n        else if (state == State.Brake && stateActivatedTime.add(1 days) <= block.timestamp && pairTokenBalance > brakeStateThreshold) {\\n            state = State.Drift;\\n            stateActivatedTime = block.timestamp;\\n            _applyStateFee();\\n        }\\n        // If liquidity reached drift state from normal state\\n        else if (state == State.Normal && pairTokenBalance <= driftStateThreshold) {\\n            state = State.Drift;\\n            stateActivatedTime = block.timestamp;\\n            _applyStateFee();\\n        }\\n        // If liquidity reached brake state from drift state\\n        else if (state == State.Drift && pairTokenBalance <= brakeStateThreshold) {\\n            state = State.Brake;\\n            stateActivatedTime = block.timestamp;\\n            _applyStateFee();\\n        }\\n    }\\n\\n    /// @notice Apply fee to DRF token\\n    function _applyStateFee() private {\\n        IDRF(drf).setFee(\\n            stateInfo[state].reflectFeeDenominator,\\n            stateInfo[state].buyTxFeeDenominator,\\n            stateInfo[state].sellTxFeeDenominator,\\n            stateInfo[state].buyBonusDenominator,\\n            stateInfo[state].sellFeeDenominator\\n        );\\n    }\\n\\n    /// @notice Add liquidity to DRF-ETH pair using DRF amount\\n    function _addLiquidityDRFETH(uint256 drfAmount) private returns (uint256 drfDust, uint256 ethDust) {\\n        uint256 drfToSwapForETH = drfAmount.div(2);\\n        uint256 drfToAddLiquidity = drfAmount.sub(drfToSwapForETH);\\n        uint256 ethBalanceBeforeSwap = address(this).balance;\\n\\n        // Swap path\\n        address[] memory path = new address[](2);\\n        path[0] = drf;\\n        path[1] = weth;\\n\\n        // Swap DRF for ETH\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            drfToSwapForETH,\\n            0,\\n            path,\\n            address(this),\\n            MAX\\n        );\\n\\n        uint256 ethToAddLiquidity = address(this).balance.sub(ethBalanceBeforeSwap);\\n\\n        // Add liquidity\\n        (uint256 drfUsed, uint256 ethUsed,) = uniswapRouter.addLiquidityETH{value : ethToAddLiquidity}(\\n            drf,\\n            drfToAddLiquidity,\\n            0,\\n            0,\\n            address(this),\\n            MAX\\n        );\\n\\n        drfDust = drfAmount.sub(drfToSwapForETH);\\n        drfDust = drfDust > drfUsed ? drfDust.sub(drfUsed) : 0;\\n        ethDust = ethToAddLiquidity > ethUsed ? ethToAddLiquidity.sub(ethUsed) : 0;\\n    }\\n\\n    /// @notice Add liquidity using token A amount\\n    function _addLiquidityToken(address tokenA, address tokenB, uint256 tokenAAmount) private returns (uint256 tokenADust, uint256 tokenBDust, uint256 pairTokenAmount) {\\n        uint256 tokenAToSwap = tokenAAmount.div(2);\\n        uint256 tokenAToAddLiquidity = tokenAAmount.sub(tokenAToSwap);\\n        uint256 tokenBBalanceBeforeSwap = IERC20(tokenB).balanceOf(address(this));\\n\\n        // Swap path\\n        address[] memory path = new address[](2);\\n        path[0] = tokenA;\\n        path[1] = tokenB;\\n\\n        // Swap DRF for token\\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAToSwap,\\n            0,\\n            path,\\n            address(this),\\n            MAX\\n        );\\n\\n        uint256 tokenBToAddLiquidity = IERC20(tokenB).balanceOf(address(this)).sub(tokenBBalanceBeforeSwap);\\n\\n        // Add liquidity\\n        (uint256 tokenAUsed, uint256 tokenBUsed, uint256 liquidity) = uniswapRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            tokenAToAddLiquidity,\\n            tokenBToAddLiquidity,\\n            0,\\n            0,\\n            address(this),\\n            MAX\\n        );\\n\\n        tokenADust = tokenAAmount.sub(tokenAToSwap);\\n        tokenADust = tokenADust > tokenAUsed ? tokenADust.sub(tokenAUsed) : 0;\\n        tokenBDust = tokenBToAddLiquidity > tokenBUsed ? tokenBToAddLiquidity.sub(tokenBUsed) : 0;\\n        pairTokenAmount = liquidity;\\n    }\\n\\n    /// @notice Buy back and burn DRF\\n    function _buyBack() private {\\n        // Swap path\\n        address[] memory path = new address[](2);\\n        path[0] = weth;\\n        path[1] = drf;\\n\\n        // Use ETH to market buy\\n        uint[] memory amounts = uniswapRouter.swapExactETHForTokens{value : address(this).balance.div(stateInfo[state].buyBackDenominator)}\\n        (0, path, address(this), MAX);\\n\\n        // Add as burned supply\\n        burnSupply = burnSupply.add(amounts[1]);\\n    }\\n\\n    /* ========== View ========== */\\n\\n    /// @notice Get staked token total supply\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get staked token balance\\n    function balanceOf(address account) public view returns (uint256) {\\n        return accountInfos[account].balance;\\n    }\\n\\n    /// @notice Get account max withdraw\\n    function maxWithdrawOf(address account) public view returns (uint256) {\\n        // Get how many day already passes\\n        uint256 dayCount = block.timestamp.sub(accountInfos[account].withdrawTime).add(1).div(1 days);\\n        // If already 10 days passes\\n        if (dayCount >= 10) {\\n            return Math.min(accountInfos[account].peakBalance, balanceOf(account));\\n        } else {\\n            return Math.min(accountInfos[account].peakBalance.div(10).mul(dayCount), balanceOf(account));\\n        }\\n    }\\n\\n    /// @notice Get reward tax percentage\\n    function rewardTaxPercentage() public view returns (uint256) {\\n        return state == State.Brake ? 80 : 10;\\n    }\\n\\n    /// @notice Get claim reward tax\\n    function taxForReward(uint256 reward) public view returns (uint256 tax) {\\n        tax = reward.div(100).mul(rewardTaxPercentage());\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, finishTime);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return rewardPerTokenStored.add(\\n            lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\\n        );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return accountInfos[account].balance.mul(\\n            rewardPerToken().sub(accountInfos[account].rewardPerTokenPaid)\\n        )\\n        .div(1e18)\\n        .add(accountInfos[account].reward);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IDRF is IERC20 {\\n\\n    function reserveSupply() external returns (uint256);\\n\\n    function bonusSupply() external returns (uint256);\\n\\n    function lockedSupply() external returns (uint256);\\n\\n    function setFee(uint256 _reflectFeeDenominator, uint256 _buyTxFeeDenominator, uint256 _sellTxFeeDenominator, uint256 _buyBonusDenominator, uint256 _sellFeeDenominator) external;\\n\\n    function setReserveSupply(uint256 amount) external;\\n\\n    function depositPrincipalSupply(uint256 amount) external;\\n\\n    function withdrawPrincipalSupply() external returns(uint256);\\n\\n    function distributePrincipalRewards(address _pairAddress) external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sdrf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_farmOpenTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAllocation\",\"type\":\"uint256\"}],\"name\":\"Halved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwappedSDRF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drfAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"peakBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brakeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"net\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewardTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"net\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityPairToken\",\"type\":\"address\"}],\"name\":\"connectLiquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFromSDRFFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPrincipalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disconnectLiquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driftThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmOpenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdrfFarm\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFarmOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxWithdrawOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peakPairTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceRewardMinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceWaitingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemFromSDRFFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdrfFarmDepositSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityPairToken\",\"type\":\"address\"}],\"name\":\"setLiquidityPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"setLiquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setRebalanceRewardMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waitingTime\",\"type\":\"uint256\"}],\"name\":\"setRebalanceWaitingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DRFLord.State\",\"name\":\"_state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_reflectFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTxFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTxFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBonusDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebalanceRewardDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"applyImmediately\",\"type\":\"bool\"}],\"name\":\"setStateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_driftThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brakeThreshold\",\"type\":\"uint256\"}],\"name\":\"setStateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"stakeTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum DRFLord.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateActivatedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DRFLord.State\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTxFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTxFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBonusDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceRewardDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"taxForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMarketingSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrincipalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DRFLord","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000002a834c4d2d50cafdca530211581165026ee49ab9000000000000000000000000487dc6fd819dc99959474f6ff5bb91790766b0cb000000000000000000000000000000000000000000000000000000005fe37790","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}