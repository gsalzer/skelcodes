{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n}\n\nlibrary UInt256Lib {\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\n\n    /**\n     * @dev Safely converts a uint256 to an int256.\n     */\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\n        require(a <= MAX_INT256);\n        return int256(a);\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IFeeCollector {\n    function collectTransferFee(uint256 _amount)\n        external\n        returns (uint256 amountAfterFee);\n\n    function collectTransferAndStakingFees(uint256 _amount)\n        external\n        returns (uint256 amountAfterFee);\n\n    function calculateTransferAndStakingFee(uint256 _amount)\n        external\n        view\n        returns (\n            uint256 totalFeeAmount,\n            uint256 transferFeeAmount,\n            uint256 stakingFeeAmount,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        );\n\n    function calculateTransferFee(uint256 _amount)\n        external\n        view\n        returns (\n            uint256 feeToCharge,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        );\n}\n\ninterface IOracle {\n    function getData() external returns (uint256, bool);\n\n    function update() external;\n\n    function consult() external view returns (uint256 exchangeRate);\n}\n\ninterface IRocketV2 is IERC20 {\n    function setMonetaryPolicy(IMonetaryPolicy _monetaryPolicy) external;\n\n    function rebase(uint256 epoch, int256 supplyDelta)\n        external\n        returns (uint256 supplyAfterRebase);\n\n    function setFeeCollector(IFeeCollector _feeCollector) external;\n\n    function isFeeChargingEnabled() external view returns (bool stakingEnabled);\n\n    function transferFromWithoutCollectingFee(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool success);\n\n    function claim(uint256 rocketV1Amount) external;\n\n    function calculateClaim(uint256 rocketV1AmountToSend)\n        external\n        view\n        returns (uint256 rocketV2AmountToReceive);\n}\n\ninterface IMonetaryPolicy {\n    function rebase() external;\n\n    function setMarketOracle(IOracle _marketOracle) external;\n\n    function setRocket(IRocketV2 _rocket) external;\n\n    function setDeviationThreshold(uint256 _deviationThreshold) external;\n\n    function setRebaseLag(uint256 _rebaseLag) external;\n\n    function setRebaseTimingParameters(\n        uint256 _minRebaseTimeIntervalSec,\n        uint256 _rebaseWindowOffsetSec,\n        uint256 _rebaseWindowLengthSec\n    ) external;\n\n    function inRebaseWindow() external view returns (bool);\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @title Rocket Monetary Supply Policy\n * @dev This is an implementation of the Rocket Ideal Money protocol.\n *      Rocket operates symmetrically on expansion and contraction. It will both split and\n *      combine coins to maintain a stable unit price.\n *\n *      This component regulates the token supply of the Rocket ERC20 token in response to\n *      market oracles.\n */\ncontract MonetaryPolicy is IMonetaryPolicy, OwnableUpgradeSafe {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using UInt256Lib for uint256;\n\n    event RocketRebased(\n        uint256 indexed epoch,\n        uint256 exchangeRate,\n        int256 requestedSupplyAdjustment,\n        uint256 timestampSec\n    );\n    event LogMarketOracleUpdated(address marketOracle);\n    event RocketUpdated(address rocket);\n\n    IRocketV2 public rocket;\n\n    IOracle public marketOracle;\n\n    // If the current exchange rate is within this fractional distance from the target, no supply\n    // update is performed. Fixed point number--same format as the rate.\n    // (ie) abs(rate - targetPrice) / targetPrice < deviationThreshold, then no supply change.\n    // DECIMALS Fixed point number.\n    uint256 public deviationThreshold;\n\n    // The rebase lag parameter, used to dampen the applied supply adjustment by 1 / rebaseLag\n    // Check setRebaseLag comments for more details.\n    // Natural number, no decimal places.\n    uint256 public rebaseLag;\n\n    // More than this much time must pass between rebase operations.\n    uint256 public minRebaseTimeIntervalSec;\n\n    // Block timestamp of last rebase operation\n    uint256 public lastRebaseTimestampSec;\n\n    // The rebase window begins this many seconds into the minRebaseTimeInterval period.\n    // For example if minRebaseTimeInterval is 1 Week, it represents the time of Week in seconds.\n    uint256 public rebaseWindowOffsetSec;\n\n    // The length of the time window where a rebase operation is allowed to execute, in seconds.\n    uint256 public rebaseWindowLengthSec;\n\n    // The number of rebase cycles since inception\n    uint256 public epoch;\n\n    uint256 public increasePerRebase;\n\n    uint256 private constant DECIMALS = 18;\n\n    // $0.025\n    uint256 private constant INCREASE_PER_WEEK = 25 * 10**(DECIMALS - 3);\n\n    // Due to the expression in _computeSupplyDelta(), MAX_RATE * MAX_SUPPLY must fit into an int256.\n    // Both are 18 decimals fixed point numbers.\n    uint256 private constant MAX_RATE = 10**6 * 10**DECIMALS;\n    // MAX_SUPPLY = MAX_INT256 / MAX_RATE\n    uint256 private constant MAX_SUPPLY = ~(uint256(1) << 255) / MAX_RATE;\n\n    function initialize(IRocketV2 _rocket, IOracle _marketOracle)\n        external\n        initializer\n    {\n        OwnableUpgradeSafe.__Ownable_init();\n        deviationThreshold = 5 * 10**(DECIMALS - 2);\n\n        rebaseLag = 10;\n        minRebaseTimeIntervalSec = 1 days;\n        rebaseWindowOffsetSec = 72000; // 8PM UTC\n        rebaseWindowLengthSec = 15 minutes;\n        lastRebaseTimestampSec = 0;\n        epoch = 0;\n        increasePerRebase = INCREASE_PER_WEEK.mul(minRebaseTimeIntervalSec).div(\n            1 weeks\n        );\n\n        rocket = _rocket;\n        marketOracle = _marketOracle;\n    }\n\n    function setMarketOracle(IOracle _marketOracle)\n        external\n        override\n        onlyOwner\n    {\n        marketOracle = _marketOracle;\n        emit LogMarketOracleUpdated(address(_marketOracle));\n    }\n\n    function setRocket(IRocketV2 _rocket) external override onlyOwner {\n        rocket = _rocket;\n        emit RocketUpdated(address(_rocket));\n    }\n\n    function setDeviationThreshold(uint256 _deviationThreshold)\n        external\n        override\n        onlyOwner\n    {\n        deviationThreshold = _deviationThreshold;\n    }\n\n    /**\n     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n     */\n    function rebase() external override {\n        require(\n            inRebaseWindow(),\n            \"MonetaryPolicy: Cannot rebase, out of rebase window (1)\"\n        );\n\n        // This comparison also ensures there is no reentrancy.\n        require(\n            lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now,\n            \"MonetaryPolicy: Cannot rebase, out of rebase window (2)\"\n        );\n\n        // Snap the rebase time to the start of this window.\n        lastRebaseTimestampSec = now.sub(now.mod(minRebaseTimeIntervalSec)).add(\n            rebaseWindowOffsetSec\n        );\n\n        epoch = epoch.add(1);\n\n        uint256 targetPrice = uint256(1.25 ether).add(\n            epoch.mul(increasePerRebase)\n        );\n\n        uint256 exchangeRate;\n        bool rateValid;\n        (exchangeRate, rateValid) = marketOracle.getData();\n        require(rateValid, \"MonetaryPolicy: invalid data from Market Oracle\");\n\n        if (exchangeRate > MAX_RATE) {\n            exchangeRate = MAX_RATE;\n        }\n\n        int256 supplyDelta = _computeSupplyDelta(\n            rocket.totalSupply(),\n            exchangeRate,\n            targetPrice\n        );\n\n        supplyDelta = supplyDelta.div(rebaseLag.toInt256Safe());\n\n        if (\n            supplyDelta > 0 &&\n            rocket.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY\n        ) {\n            supplyDelta = (MAX_SUPPLY.sub(rocket.totalSupply())).toInt256Safe();\n        }\n\n        uint256 supplyAfterRebase = rocket.rebase(epoch, supplyDelta);\n        assert(supplyAfterRebase <= MAX_SUPPLY);\n        emit RocketRebased(epoch, exchangeRate, supplyDelta, now);\n    }\n\n    function rebaseStakings() private {}\n\n    function setRebaseLag(uint256 _rebaseLag) external override onlyOwner {\n        require(_rebaseLag > 0, \"MonetaryPolicy: rebaseLag should be > 0\");\n        rebaseLag = _rebaseLag;\n    }\n\n    function setRebaseTimingParameters(\n        uint256 _minRebaseTimeIntervalSec,\n        uint256 _rebaseWindowOffsetSec,\n        uint256 _rebaseWindowLengthSec\n    ) external override onlyOwner {\n        require(\n            _minRebaseTimeIntervalSec > 0,\n            \"MonetaryPolicy: minRebaseTimeIntervalSec should be > 0\"\n        );\n        require(\n            _rebaseWindowOffsetSec < _minRebaseTimeIntervalSec,\n            \"MonetaryPolicy: rebaseWindowOffsetSec should be < minRebaseTimeIntervalSec\"\n        );\n\n        minRebaseTimeIntervalSec = _minRebaseTimeIntervalSec;\n        rebaseWindowOffsetSec = _rebaseWindowOffsetSec;\n        rebaseWindowLengthSec = _rebaseWindowLengthSec;\n    }\n\n    function inRebaseWindow() public override view returns (bool) {\n        return (now.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\n            now.mod(minRebaseTimeIntervalSec) <\n            (rebaseWindowOffsetSec.add(rebaseWindowLengthSec)));\n    }\n\n    function _computeSupplyDelta(\n        uint256 totalSupply,\n        uint256 _rate,\n        uint256 _targetPrice\n    ) private view returns (int256) {\n        if (_withinDeviationThreshold(_rate, _targetPrice)) {\n            return 0;\n        }\n\n        int256 targetPriceSigned = _targetPrice.toInt256Safe();\n        return\n            totalSupply\n                .toInt256Safe()\n                .mul(_rate.toInt256Safe().sub(targetPriceSigned))\n                .div(targetPriceSigned);\n    }\n\n    function _withinDeviationThreshold(uint256 _rate, uint256 _targetPrice)\n        private\n        view\n        returns (bool)\n    {\n        uint256 absoluteDeviationThreshold = _targetPrice\n            .mul(deviationThreshold)\n            .div(10**DECIMALS);\n\n        return\n            (_rate >= _targetPrice &&\n                _rate.sub(_targetPrice) < absoluteDeviationThreshold) ||\n            (_rate < _targetPrice &&\n                _targetPrice.sub(_rate) < absoluteDeviationThreshold);\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"LogMarketOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"requestedSupplyAdjustment\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"}],\"name\":\"RocketRebased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rocket\",\"type\":\"address\"}],\"name\":\"RocketUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRebaseWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePerRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRocketV2\",\"name\":\"_rocket\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_marketOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestampSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRebaseTimeIntervalSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseLag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowLengthSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowOffsetSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocket\",\"outputs\":[{\"internalType\":\"contract IRocketV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deviationThreshold\",\"type\":\"uint256\"}],\"name\":\"setDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_marketOracle\",\"type\":\"address\"}],\"name\":\"setMarketOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseLag\",\"type\":\"uint256\"}],\"name\":\"setRebaseLag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRebaseTimeIntervalSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseWindowOffsetSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseWindowLengthSec\",\"type\":\"uint256\"}],\"name\":\"setRebaseTimingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRocketV2\",\"name\":\"_rocket\",\"type\":\"address\"}],\"name\":\"setRocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonetaryPolicy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}