{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/falconfree/Projects/Curio/capital-dex-core/contracts/whitelist/DexWhitelist.sol\": {\r\n      \"content\": \"/*\\n * Capital DEX\\n *\\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\\n * Incorporated and registered in Liechtenstein.\\n *\\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\\n * Incorporated and registered in Zug, Switzerland.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"./traits/Managed.sol\\\";\\nimport \\\"./traits/Pausable.sol\\\";\\nimport \\\"./interfaces/ICarTokenController.sol\\\";\\n\\n/**\\n * @title DexWhitelist\\n *\\n * @dev The contract stores a whitelist of users (investors) and allows to\\n * manage it. The contract also provides for a separate whitelist for tokens addresses.\\n * It is possible to check the whitelisted status of users from the whitelist\\n * located in the separate CarTokenController contract (part of security token contracts).\\n * All user/tokens checks can be disabled by owner.\\n *\\n * CarTokenController contract source: https://github.com/CurioTeam/security-token-contracts/blob/dd5c82e566d24d0e87639316a9420afdb9b30e71/contracts/CarTokenController.sol\\n */\\ncontract DexWhitelist is Initializable, Managed, Pausable {\\n    ICarTokenController public controller;\\n\\n    struct Investor {\\n        address addr;\\n        bool active;\\n    }\\n\\n    /**\\n     * @dev Whitelist of users (investors)\\n     */\\n    mapping(bytes32 => Investor) public investors;\\n    mapping(address => bytes32) public keyOfInvestor;\\n\\n    /**\\n     * @dev Whitelist of tokens\\n     */\\n    mapping(address => bool) public tokens;\\n\\n    /**\\n     * @dev Enable/disable whitelist's statuses for several groups of operations.\\n     *\\n     * 'liquidity wl' - for operations with liquidity pools\\n     * 'swap wl' - for operations with swap mechanism\\n     * 'farm wl' - for operations with farming mechanism\\n     * 'token wl' - for whitelist of supported tokens\\n     */\\n    bool public isLiquidityWlActive;\\n    bool public isSwapWlActive;\\n    bool public isFarmWlActive;\\n    bool public isTokenWlActive;\\n\\n    event SetController(address indexed controller);\\n\\n    event AddNewInvestor(bytes32 indexed key, address indexed addr);\\n    event SetInvestorActive(bytes32 indexed key, bool active);\\n    event ChangeInvestorAddress(\\n        address indexed sender,\\n        bytes32 indexed key,\\n        address indexed oldAddr,\\n        address newAddr\\n    );\\n\\n    event SetLiquidityWlActive(bool active);\\n    event SetSwapWlActive(bool active);\\n    event SetFarmWlActive(bool active);\\n    event SetTokenWlActive(bool active);\\n\\n    event SetTokenAddressActive(address indexed token, bool active);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @dev Checks if an investor's account is whitelisted. Check is done\\n     * in the whitelist of the contract and also in the CarTokenController.\\n     *\\n     * @param _addr The address of investor's account to check.\\n     */\\n    function isInvestorAddressActive(address _addr) public view returns (bool) {\\n        return\\n            investors[keyOfInvestor[_addr]].active ||\\n            (\\n                address(controller) != address(0)\\n                    ? controller.isInvestorAddressActive(_addr)\\n                    : false\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns true if address is in investor's whitelist\\n     * or liquidity whitelist is not active.\\n     *\\n     * @param _addr The address of investor's account to check.\\n     */\\n    function isLiquidityAddressActive(address _addr)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return !isLiquidityWlActive || isInvestorAddressActive(_addr);\\n    }\\n\\n    /**\\n     * @dev Returns true if address is in investor's whitelist\\n     * or swap whitelist is not active.\\n     *\\n     * @param _addr The address of investor's account to check.\\n     */\\n    function isSwapAddressActive(address _addr) public view returns (bool) {\\n        return !isSwapWlActive || isInvestorAddressActive(_addr);\\n    }\\n\\n    /**\\n     * @dev Returns true if address is in investor's whitelist\\n     * or farm whitelist is not active.\\n     *\\n     * @param _addr The address of investor's account to check.\\n     */\\n    function isFarmAddressActive(address _addr) public view returns (bool) {\\n        return !isFarmWlActive || isInvestorAddressActive(_addr);\\n    }\\n\\n    /**\\n     * @dev Returns true if address is in token's whitelist\\n     * or token's whitelist is not active.\\n     *\\n     * @param _addr The address of token to check.\\n     */\\n    function isTokenAddressActive(address _addr) public view returns (bool) {\\n        return !isTokenWlActive || tokens[_addr];\\n    }\\n\\n    /**\\n     * @dev Allows the msg.sender change your address in whitelist.\\n     *\\n     * Requirements:\\n     * - the contract must not be paused.\\n     *\\n     * @param _investorKey The key of investor.\\n     * @param _newAddr The address of investor's account.\\n     */\\n    function changeMyAddress(bytes32 _investorKey, address _newAddr)\\n        external\\n        whenNotPaused\\n    {\\n        require(\\n            investors[_investorKey].addr == msg.sender,\\n            \\\"Investor address and msg.sender does not match\\\"\\n        );\\n\\n        _changeInvestorAddress(_investorKey, _newAddr);\\n    }\\n\\n    /**\\n     * @dev Allows the admin or manager to add new investors\\n     * to whitelist.\\n     *\\n     * Requirements:\\n     * - lengths of keys and address arrays should be equal.\\n     *\\n     * @param _keys The keys of investors.\\n     * @param _addrs The addresses of investors accounts.\\n     */\\n    function addNewInvestors(\\n        bytes32[] calldata _keys,\\n        address[] calldata _addrs\\n    ) external onlyAdminOrManager {\\n        uint256 len = _keys.length;\\n        require(\\n            len == _addrs.length,\\n            \\\"Lengths of keys and address does not match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            _setInvestorAddress(_keys[i], _addrs[i]);\\n\\n            emit AddNewInvestor(_keys[i], _addrs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows the admin or manager to change investor's\\n     * whitelisted status.\\n     *\\n     * Emits a {SetInvestorActive} event with investor's key and new status.\\n     *\\n     * Requirements:\\n     * - the investor must be added to whitelist.\\n     *\\n     * @param _key The keys of investor.\\n     * @param _active The new status of investor's account.\\n     */\\n    function setInvestorActive(bytes32 _key, bool _active)\\n        external\\n        onlyAdminOrManager\\n    {\\n        require(investors[_key].addr != address(0), \\\"Investor does not exists\\\");\\n        investors[_key].active = _active;\\n\\n        emit SetInvestorActive(_key, _active);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to change investor's address.\\n     *\\n     * @param _investorKey The keys of investor.\\n     * @param _newAddr The new address of investor's account.\\n     */\\n    function changeInvestorAddress(bytes32 _investorKey, address _newAddr)\\n        external\\n        onlyAdmin\\n    {\\n        _changeInvestorAddress(_investorKey, _newAddr);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set token's whitelisted status.\\n     *\\n     * @param _token The address of token.\\n     * @param _active The token status.\\n     */\\n    function setTokenAddressActive(address _token, bool _active)\\n        external\\n        onlyAdmin\\n    {\\n        _setTokenAddressActive(_token, _active);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set tokens as whitelisted or not.\\n     *\\n     * Requirements:\\n     * - lengths of tokens and statuses arrays should be equal.\\n     *\\n     * @param _tokens The addresses of tokens.\\n     * @param _active The tokens statuses.\\n     */\\n    function setTokenAddressesActive(\\n        address[] calldata _tokens,\\n        bool[] calldata _active\\n    ) external onlyAdmin {\\n        uint256 len = _tokens.length;\\n        require(\\n            len == _active.length,\\n            \\\"Lengths of tokens and active does not match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            _setTokenAddressActive(_tokens[i], _active[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set CarTokenController contract.\\n     *\\n     * Emits a {SetController} event with `controller` set to\\n     * CarTokenController contract's address.\\n     *\\n     * @param _controller The address of CarTokenController contract.\\n     */\\n    function setController(ICarTokenController _controller) external onlyOwner {\\n        controller = _controller;\\n        emit SetController(address(_controller));\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enable/disable investors whitelist functionality\\n     * for operations with liquidity pools.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function setLiquidityWlActive(bool _active) external onlyOwner {\\n        _setLiquidityWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enable/disable investors whitelist functionality\\n     * for operations with swap.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function setSwapWlActive(bool _active) external onlyOwner {\\n        _setSwapWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enable/disable investors whitelist functionality\\n     * for operations with farming mechanism.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function setFarmWlActive(bool _active) external onlyOwner {\\n        _setFarmWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enable/disable tokens whitelist functionality.\\n     *\\n     * @param _active Tokens whitelist check status.\\n     */\\n    function setTokenWlActive(bool _active) external onlyOwner {\\n        _setTokenWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enable/disable investors and tokens whitelist\\n     * for all groups of operations in single transaction.\\n     *\\n     * @param _liquidityWlActive Investors whitelist check status for liquidity pools operations.\\n     * @param _swapWlActive Investors whitelist check status for swap operations.\\n     * @param _farmWlActive Investors whitelist check status for farming operations.\\n     * @param _tokenWlActive Tokens whitelist check status.\\n     */\\n    function setWlActive(\\n        bool _liquidityWlActive,\\n        bool _swapWlActive,\\n        bool _farmWlActive,\\n        bool _tokenWlActive\\n    ) external onlyOwner {\\n        _setLiquidityWlActive(_liquidityWlActive);\\n        _setSwapWlActive(_swapWlActive);\\n        _setFarmWlActive(_farmWlActive);\\n        _setTokenWlActive(_tokenWlActive);\\n    }\\n\\n\\n    /**\\n     * @dev Saves the investor's key and address and sets the status as whitelisted.\\n     *\\n     * Requirements:\\n     * - key and address must be empty.\\n     *\\n     * @param _key The key of investor.\\n     * @param _addr The address of investor.\\n     */\\n    function _setInvestorAddress(bytes32 _key, address _addr) internal {\\n        require(investors[_key].addr == address(0), \\\"Investor already exists\\\");\\n        require(keyOfInvestor[_addr] == bytes32(0), \\\"Address already claimed\\\");\\n\\n        investors[_key] = Investor(_addr, true);\\n        keyOfInvestor[_addr] = _key;\\n    }\\n\\n    /**\\n     * @dev Changes the address of the investor with the given key.\\n     *\\n     * Emits a {ChangeInvestorAddress} event with parameters: `sender` as msg.sender,\\n     * `key`, `oldAddr`, `newAddr`.\\n     *\\n     * Requirements:\\n     * - the new address must be different from the old one.\\n     *\\n     * @param _investorKey The key of investor.\\n     * @param _newAddr The new address of investor.\\n     */\\n    function _changeInvestorAddress(bytes32 _investorKey, address _newAddr)\\n        internal\\n    {\\n        address oldAddress = investors[_investorKey].addr;\\n        require(oldAddress != _newAddr, \\\"Old address and new address the same\\\");\\n\\n        keyOfInvestor[investors[_investorKey].addr] = bytes32(0);\\n        investors[_investorKey] = Investor(address(0), false);\\n\\n        _setInvestorAddress(_investorKey, _newAddr);\\n\\n        emit ChangeInvestorAddress(\\n            msg.sender,\\n            _investorKey,\\n            oldAddress,\\n            _newAddr\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets token's whitelisted status.\\n     *\\n     * Emits a {SetTokenAddressActive} event token's address and new status.\\n     *\\n     * @param _token The address of token.\\n     * @param _active Token's whitelisted status.\\n     */\\n    function _setTokenAddressActive(address _token, bool _active) internal {\\n        tokens[_token] = _active;\\n        emit SetTokenAddressActive(_token, _active);\\n    }\\n\\n    /**\\n     * @dev Sets status of enable/disable of investors whitelist\\n     * for operations with liquidity pools.\\n     *\\n     * Emits a {SetLiquidityWlActive} event with new status.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function _setLiquidityWlActive(bool _active) internal {\\n        isLiquidityWlActive = _active;\\n        emit SetLiquidityWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Sets status of enable/disable of investors whitelist\\n     * for operations with swap.\\n     *\\n     * Emits a {SetSwapWlActive} event with new status.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function _setSwapWlActive(bool _active) internal {\\n        isSwapWlActive = _active;\\n        emit SetSwapWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Sets status of enable/disable of investors whitelist\\n     * for operations with farming.\\n     *\\n     * Emits a {SetFarmWlActive} event with new status.\\n     *\\n     * @param _active Investors whitelist check status.\\n     */\\n    function _setFarmWlActive(bool _active) internal {\\n        isFarmWlActive = _active;\\n        emit SetFarmWlActive(_active);\\n    }\\n\\n    /**\\n     * @dev Sets status of enable/disable of tokens whitelist.\\n     *\\n     * Emits a {SetTokenWlActive} event with new status.\\n     *\\n     * @param _active Tokens whitelist check status.\\n     */\\n    function _setTokenWlActive(bool _active) internal {\\n        isTokenWlActive = _active;\\n        emit SetTokenWlActive(_active);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/falconfree/Projects/Curio/capital-dex-core/contracts/whitelist/interfaces/ICarTokenController.sol\": {\r\n      \"content\": \"/*\\n * Capital DEX\\n *\\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\\n * Incorporated and registered in Liechtenstein.\\n *\\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\\n * Incorporated and registered in Zug, Switzerland.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of CarTokenController (part of security token contracts).\\n *\\n * CarTokenController contract source: https://github.com/CurioTeam/security-token-contracts/blob/dd5c82e566d24d0e87639316a9420afdb9b30e71/contracts/CarTokenController.sol\\n */\\ninterface ICarTokenController {\\n    function isInvestorAddressActive(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/falconfree/Projects/Curio/capital-dex-core/contracts/whitelist/traits/Administrated.sol\": {\r\n      \"content\": \"/*\\n * Capital DEX\\n *\\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\\n * Incorporated and registered in Liechtenstein.\\n *\\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\\n * Incorporated and registered in Zug, Switzerland.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Administrated\\n *\\n * @dev Contract provides a basic access control mechanism for Admin role.\\n */\\ncontract Administrated is Initializable, OwnableUpgradeSafe {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event AddAdmin(address indexed admin);\\n    event RemoveAdmin(address indexed admin);\\n\\n    EnumerableSet.AddressSet internal admins;\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"Administrated: sender is not admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if an account is admin.\\n     * @param _admin The address of admin account to check.\\n     */\\n    function isAdmin(address _admin) public view returns (bool) {\\n        return admins.contains(_admin);\\n    }\\n\\n    /**\\n     * @dev Returns count of added admins accounts.\\n     */\\n    function getAdminCount() external view returns (uint256) {\\n        return admins.length();\\n    }\\n\\n    /**\\n     * @dev Allows the owner to add admin account.\\n     *\\n     * Emits a {AddAdmin} event with `admin` set to new added admin address.\\n     *\\n     * @param _admin The address of admin account to add.\\n     */\\n    function addAdmin(address _admin) external onlyOwner {\\n        admins.add(_admin);\\n        emit AddAdmin(_admin);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to remove admin account.\\n     *\\n     * Emits a {RemoveAdmin} event with `admin` set to removed admin address.\\n     *\\n     * @param _admin The address of admin account to remove.\\n     */\\n    function removeAdmin(address _admin) external onlyOwner {\\n        admins.remove(_admin);\\n        emit RemoveAdmin(_admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/falconfree/Projects/Curio/capital-dex-core/contracts/whitelist/traits/Managed.sol\": {\r\n      \"content\": \"/*\\n * Capital DEX\\n *\\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\\n * Incorporated and registered in Liechtenstein.\\n *\\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\\n * Incorporated and registered in Zug, Switzerland.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"./Administrated.sol\\\";\\n\\n/**\\n * @title Managed\\n *\\n * @dev Contract provides a basic access control mechanism for Manager role.\\n * The contract also includes control of access rights for Admin and Manager roles both.\\n */\\ncontract Managed is Initializable, Administrated {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event AddManager(address indexed manager, address indexed admin);\\n    event RemoveManager(address indexed manager, address indexed admin);\\n\\n    EnumerableSet.AddressSet internal managers;\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin or manager.\\n     */\\n    modifier onlyAdminOrManager() {\\n        require(\\n            isAdmin(msg.sender) || isManager(msg.sender),\\n            \\\"Managered: sender is not admin or manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(isManager(msg.sender), \\\"Managered: sender is not manager\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev Checks if an account is manager.\\n     * @param _manager The address of manager account to check.\\n     */\\n    function isManager(address _manager) public view returns (bool) {\\n        return managers.contains(_manager);\\n    }\\n\\n    /**\\n     * @dev Returns count of added managers accounts.\\n     */\\n    function getManagerCount() external view returns (uint256) {\\n        return managers.length();\\n    }\\n\\n    /**\\n     * @dev Allows the admin to add manager account.\\n     *\\n     * Emits a {AddManager} event with `manager` set to new added manager address\\n     * and `admin` to who added it.\\n     *\\n     * @param _manager The address of manager account to add.\\n     */\\n    function addManager(address _manager) external onlyAdmin {\\n        managers.add(_manager);\\n        emit AddManager(_manager, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to remove manager account.\\n     *\\n     * Emits a {removeManager} event with `manager` set to removed manager address\\n     * and `admin` to who removed it.\\n     *\\n     * @param _manager The address of manager account to remove.\\n     */\\n    function removeManager(address _manager) external onlyAdmin {\\n        managers.remove(_manager);\\n        emit RemoveManager(_manager, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/falconfree/Projects/Curio/capital-dex-core/contracts/whitelist/traits/Pausable.sol\": {\r\n      \"content\": \"/*\\n * Capital DEX\\n *\\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\\n * Incorporated and registered in Liechtenstein.\\n *\\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\\n * Incorporated and registered in Zug, Switzerland.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Pausable\\n *\\n * @dev Contract provides a stop emergency mechanism.\\n */\\ncontract Pausable is Initializable, OwnableUpgradeSafe {\\n    event Paused();\\n    event Unpaused();\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to pause, triggers stopped state.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() public onlyOwner whenNotPaused {\\n        _paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Allows the owner to do unpause, returns to normal state.\\n     *\\n     * Emits a {Unpaused} event.\\n     */\\n    function unpause() public onlyOwner whenPaused {\\n        _paused = false;\\n        emit Unpaused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"ChangeInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetFarmWlActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetInvestorActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetLiquidityWlActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetSwapWlActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetTokenAddressActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetTokenWlActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addNewInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeInvestorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeMyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract ICarTokenController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFarmAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFarmWlActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isInvestorAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isLiquidityAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityWlActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSwapAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapWlActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isTokenAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenWlActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyOfInvestor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICarTokenController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setFarmWlActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setInvestorActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setLiquidityWlActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setSwapWlActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setTokenAddressActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_active\",\"type\":\"bool[]\"}],\"name\":\"setTokenAddressesActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setTokenWlActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_liquidityWlActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_swapWlActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_farmWlActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_tokenWlActive\",\"type\":\"bool\"}],\"name\":\"setWlActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DexWhitelist","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}