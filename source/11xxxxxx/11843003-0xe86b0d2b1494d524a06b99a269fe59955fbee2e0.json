{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.2 <0.8.0;\r\n\r\ncontract State {\r\n\r\n    mapping (address => uint256) _largeBalances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    // Supported pools and data for measuring mint & burn factors\r\n    struct PoolCounter {\r\n        address pairToken;\r\n        uint256 tokenBalance;\r\n        uint256 pairTokenBalance;\r\n        uint256 lpBalance;\r\n        uint256 startTokenBalance;\r\n        uint256 startPairTokenBalance;\r\n    }\r\n    address[] _supportedPools;\r\n    mapping (address => PoolCounter) _poolCounters;\r\n    mapping (address => bool) _isSupportedPool;\r\n    address _mainPool;\r\n\r\n    uint256 _currentEpoch;\r\n    \r\n    //Creating locked balances\r\n    struct LockBox {\r\n        address beneficiary;\r\n        uint256 lockedBalance;\r\n        uint256 unlockTime;\r\n        bool locked;\r\n    }\r\n    LockBox[] _lockBoxes;\r\n    mapping(address => uint256) _lockedBalance;\r\n    mapping(address => bool) _hasLockedBalance;\r\n    uint256 _totalLockedBalance;\r\n \r\n    uint256 _largeTotal;\r\n    uint256 _totalSupply;\r\n\r\n    address _liquidityReserve;\r\n    address _stabilizer;\r\n\r\n    bool _presaleDone;\r\n    address _presaleCon;\r\n    \r\n    bool _paused;\r\n    \r\n    bool _taxLess;\r\n    mapping(address=>bool) _isTaxlessSetter;\r\n}\r\n\r\n\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary Constants {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private constant _launchSupply = 9500 * 10 ** uint256(_decimals);\r\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\r\n\r\n    uint256 private constant _baseExpansionFactor = 100;\r\n    uint256 private constant _baseContractionFactor = 100;\r\n    uint256 private constant _incentivePot = 50;\r\n    uint256 private constant _baseUtilityFee = 50;\r\n    uint256 private constant _baseContractionCap = 1000;\r\n\r\n    uint256 private constant _stabilizerFee = 250;\r\n    uint256 private constant _stabilizationLowerBound = 50;\r\n    uint256 private constant _stabilizationLowerReset = 75;\r\n    uint256 private constant _stabilizationUpperBound = 150;\r\n    uint256 private constant _stabilizationUpperReset = 125;\r\n    uint256 private constant _stabilizePercent = 10;\r\n\r\n    uint256 private constant _treasuryFee = 250;\r\n\r\n    uint256 private constant _epochLength = 4 hours;\r\n\r\n    uint256 private constant _liquidityReward = 25 * 10**uint256(_decimals);\r\n    uint256 private constant _minForLiquidity = 500 * 10**uint256(_decimals);\r\n    uint256 private constant _minForCallerLiquidity = 500 * 10**uint256(_decimals);\r\n\r\n    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    string private constant _name = \"gxs-protocol.net\";\r\n    string private constant _symbol = \"GXS\";\r\n\r\n    /****** Getters *******/\r\n    function getLaunchSupply() internal pure returns (uint256) {\r\n        return _launchSupply;\r\n    }\r\n    function getLargeTotal() internal pure returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getBaseExpansionFactor() internal pure returns (uint256) {\r\n        return _baseExpansionFactor;\r\n    }\r\n    function getBaseContractionFactor() internal pure returns (uint256) {\r\n        return _baseContractionFactor;\r\n    }\r\n    function getIncentivePot() internal pure returns (uint256) {\r\n        return _incentivePot;\r\n    }\r\n    function getBaseContractionCap() internal pure returns (uint256) {\r\n        return _baseContractionCap;\r\n    }\r\n    function getBaseUtilityFee() internal pure returns (uint256) {\r\n        return _baseUtilityFee;\r\n    }\r\n    function getStabilizerFee() internal pure returns (uint256) {\r\n        return _stabilizerFee;\r\n    }\r\n    function getStabilizationLowerBound() internal pure returns (uint256) {\r\n        return _stabilizationLowerBound;\r\n    }\r\n    function getStabilizationLowerReset() internal pure returns (uint256) {\r\n        return _stabilizationLowerReset;\r\n    }\r\n    function getStabilizationUpperBound() internal pure returns (uint256) {\r\n        return _stabilizationUpperBound;\r\n    }\r\n    function getStabilizationUpperReset() internal pure returns (uint256) {\r\n        return _stabilizationUpperReset;\r\n    }\r\n    function getStabilizePercent() internal pure returns (uint256) {\r\n        return _stabilizePercent;\r\n    }\r\n    function getTreasuryFee() internal pure returns (uint256) {\r\n        return _treasuryFee;\r\n    }\r\n    function getEpochLength() internal pure returns (uint256) {\r\n        return _epochLength;\r\n    }\r\n    function getLiquidityReward() internal pure returns (uint256) {\r\n        return _liquidityReward;\r\n    }\r\n    function getMinForLiquidity() internal pure returns (uint256) {\r\n        return _minForLiquidity;\r\n    }\r\n    function getMinForCallerLiquidity() internal pure returns (uint256) {\r\n        return _minForCallerLiquidity;\r\n    }\r\n    function getRouterAdd() internal pure returns (address) {\r\n        return _routerAddress;\r\n    }\r\n    function getFactoryAdd() internal pure returns (address) {\r\n        return _factoryAddress;\r\n    }\r\n    function getName() internal pure returns (string memory)  {\r\n        return _name;\r\n    }\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract Getters is State {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\r\n        PoolCounter memory pc = _poolCounters[pool];\r\n        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\r\n    }\r\n    function isTaxlessSetter(address account) public view returns (bool) {\r\n        return _isTaxlessSetter[account];\r\n    }\r\n    function getUniswapRouter() public view returns (IUniswapV2Router02) {\r\n        return IUniswapV2Router02(Constants.getRouterAdd());\r\n    }\r\n    function getUniswapFactory() public view returns (IUniswapV2Factory) {\r\n        return IUniswapV2Factory(Constants.getFactoryAdd());\r\n    }\r\n    function getFactor() public view returns(uint256) {\r\n        if (_presaleDone) {\r\n            return _largeTotal.div(_totalSupply);\r\n        } else {\r\n            return _largeTotal.div(Constants.getLaunchSupply());\r\n        }\r\n    }\r\n    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\r\n        uint256 lpBalance = IERC20(pool).totalSupply();\r\n        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\r\n        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\r\n        return (tokenBalance, pairTokenBalance, lpBalance);\r\n    }\r\n    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256, uint256) {\r\n        uint256 mintAmount = amount.mul(1).div(100);\r\n        return (0,0,mintAmount);\r\n    }\r\n\r\n    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 burnAmount = amount.mul(5).div(1000);\r\n        return (burnAmount, burnAmount.mul(currentFactor));\r\n    }\r\n\r\n    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 utilityFee = amount.mul(5).div(100);\r\n        return (utilityFee, utilityFee.mul(currentFactor));\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}pragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract Setters is State, Getters {\r\n    function updatePresaleAddress(address presaleAddress) internal {\r\n        _presaleCon = presaleAddress;\r\n    }\r\n    function setAllowances(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n    function addToAccount(address account, uint256 amount) internal {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        _largeBalances[account] = _largeBalances[account].add(largeAmount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function addToAll(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function initializeEpoch() internal {\r\n        _currentEpoch = now;\r\n    }\r\n    function updateEpoch() internal {\r\n        initializeEpoch();\r\n        for (uint256 i=0; i<_supportedPools.length; i++) {\r\n            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\r\n            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\r\n        }\r\n    }\r\n    function initializeLargeTotal() internal {\r\n        _largeTotal = Constants.getLargeTotal();\r\n    }\r\n    function syncPair(address pool) internal returns(bool) {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n        return (lpBurn);\r\n    }\r\n    function silentSyncPair(address pool) public {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n    }\r\n    function addSupportedPool(address pool, address pairToken) internal {\r\n        require(!_isSupportedPool[pool],\"This pool is already supported\");\r\n        _isSupportedPool[pool] = true;\r\n        _supportedPools.push(pool);\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\r\n        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\r\n        uint z;\r\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUpgradeable for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n}\r\n\r\ncontract GXS is Setters, Initializable, IERC20Upgradeable, OwnableUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n    \r\n    mapping(address => uint256) public refunds;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) public bots;\r\n\r\n    \r\n    uint256 public refundCooldown = 5 minutes;\r\n    uint256 public minEthThreshold = 0.3 ether;\r\n    uint256 public gasPrice = 100e9;\r\n    uint256 public refundFrac = 50;\r\n    uint256 public minRefund = 0.001 ether;\r\n    uint256 public maxRefund = 0.025 ether;\r\n    uint256 public gasRefund = 0.025 ether;\r\n    uint256 public lastFund = 0;\r\n    uint256 public fundCooldown = 5 minutes;\r\n    uint256 public minFundThreshold = 0;\r\n    uint256 public holdLimit = 200 * 10 ** 18;\r\n    uint256 public botCount = 5;\r\n    uint256 public botDelay = 45 minutes;\r\n    bool public limitHold = true;\r\n    bool public delayQuick = true;\r\n    bool public delayWhitelist = true;\r\n    \r\n\r\n    address public uniswapPair;\r\n    // address public stub;\r\n\r\n    bool public isThisToken0;\r\n\r\n    /// @notice last TWAP update time\r\n    uint32 public blockTimestampLast;\r\n\r\n    /// @notice last TWAP cumulative price\r\n    uint256 public priceCumulativeLast;\r\n\r\n    /// @notice last TWAP average price\r\n    uint256 public priceAverageLast;\r\n\r\n    /// @notice TWAP min delta (10-min)\r\n    uint256 public minDeltaTwap;\r\n    \r\n    bool private _inInternalSell = false;\r\n\r\n    event TwapUpdated(uint256 priceCumulativeLast, uint256 blockTimestampLast, uint256 priceAverageLast);\r\n    event GasRefunded(address to, uint256 amount);\r\n\r\n    modifier setInternalSell {\r\n        _inInternalSell = true;\r\n        _;\r\n        _inInternalSell = false;\r\n    }\r\n\r\n    modifier onlyTaxless {\r\n        require(isTaxlessSetter(msg.sender),\"not taxless\");\r\n        _;\r\n    }\r\n    modifier onlyPresale {\r\n        require(msg.sender==_presaleCon,\"not presale\");\r\n        require(!_presaleDone, \"Presale over\");\r\n        _;\r\n    }\r\n    modifier pausable {\r\n        require(!_paused, \"Paused\");\r\n        _;\r\n    }\r\n    modifier taxlessTx {\r\n        _taxLess = true;\r\n        _;\r\n        _taxLess = false;\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return Constants.getName();\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return Constants.getSymbol();\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return Constants.getDecimals();\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function circulatingSupply() public view returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        return _totalSupply.sub(_totalLockedBalance.div(currentFactor)).sub(balanceOf(address(this))).sub(balanceOf(_stabilizer));\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        if (_hasLockedBalance[account]) return (_largeBalances[account].add(_lockedBalance[account]).div(currentFactor));\r\n        return _largeBalances[account].div(currentFactor);\r\n    }\r\n    \r\n    function unlockedBalanceOf(address account) public view returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        return _largeBalances[account].div(currentFactor); \r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyPresale {\r\n        addToAccount(to,amount);\r\n        emit Transfer(address(0),to,amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        setAllowances(owner, spender, amount);\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(amount <= balanceOf(sender),\"Amount exceeds balance\");\r\n        require(amount <= unlockedBalanceOf(sender),\"Amount exceeds unlocked balance\");\r\n        require(_presaleDone,\"Presale yet to close\");\r\n        uint256 startGas = gasleft();\r\n        bool takeFunds = owner() != sender && owner() != recipient && !_inInternalSell;\r\n        bool funded = false;\r\n        \r\n        if (blockTimestampLast == 0 && balanceOf(uniswapPair) > 0) {\r\n            initializeTwap();\r\n        }\r\n        \r\n        if (delayWhitelist && whitelist[sender]) {\r\n            revert('GXS: hold');\r\n        }\r\n        \r\n        if (sender == address(this)) {\r\n            basicTransfer(sender,recipient,amount);\r\n            return;\r\n        }\r\n        \r\n        if (delayQuick) {\r\n            if (sender == uniswapPair) {\r\n               if (botCount > 0) {\r\n                   botCount -= 1;\r\n                   bots[recipient] = block.timestamp;\r\n               }\r\n                \r\n            } else if (recipient == uniswapPair && block.timestamp - bots[sender] < botDelay) {\r\n                revert('GXS: too quick');\r\n            }\r\n        }\r\n        \r\n        if (limitHold && uniswapPair == sender) {\r\n            if (balanceOf(recipient) + amount > holdLimit) {\r\n                revert('GXS: too much');\r\n            }\r\n        }\r\n        \r\n        if (!_inInternalSell && sender != uniswapPair && now - lastFund > fundCooldown && balanceOf(_stabilizer) > minFundThreshold) {\r\n            lastFund = now;\r\n            funded = true;\r\n            fundTreasury();\r\n        }\r\n        \r\n        if (now > _currentEpoch.add(Constants.getEpochLength())) updateEpoch();\r\n        uint256 currentFactor = getFactor();\r\n        uint256 txType;\r\n        if (_taxLess || sender == owner()) {\r\n            txType = 3;\r\n        } else {\r\n            bool lpBurn;\r\n            if (_isSupportedPool[sender]) {\r\n                lpBurn = syncPair(sender);\r\n            } else if (_isSupportedPool[recipient]){\r\n                silentSyncPair(recipient);\r\n            } else {\r\n                silentSyncPair(_mainPool);\r\n            }\r\n            txType = _getTxType(sender, recipient, lpBurn);\r\n        }\r\n\r\n        // Buy Transaction from supported pools - requires mint, no utility fee\r\n        if (txType == 1) {\r\n            (uint256 stabilizerMint, uint256 treasuryMint, uint256 totalMint) = getMintValue(sender, amount);\r\n            uint256 treasuryFee = amount.mul(4).div(100);\r\n            uint256 actualTransferAmount = amount.sub(treasuryFee);\r\n\r\n            basicTransfer(sender, recipient, actualTransferAmount);\r\n            \r\n            treasuryFee = treasuryFee.add(stabilizerMint).add(treasuryMint);\r\n            _largeBalances[_stabilizer] = _largeBalances[_stabilizer].add(treasuryFee.mul(currentFactor));\r\n            _totalSupply = _totalSupply.add(totalMint);\r\n            emit Transfer(sender, recipient, actualTransferAmount);\r\n            emit Transfer(address(0),_stabilizer,treasuryFee);\r\n        }\r\n        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\r\n        else if (txType == 2) {\r\n            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\r\n            (uint256 utilityFee, uint256 largeUtilityFee) = getUtilityFee(amount);\r\n            uint256 actualTransferAmount = amount.sub(burnSize).sub(utilityFee);\r\n            basicTransfer(sender, recipient, actualTransferAmount);\r\n            _largeBalances[_stabilizer] = _largeBalances[_stabilizer].add(largeUtilityFee);\r\n            _totalSupply = _totalSupply.sub(burnSize);\r\n            _largeTotal = _largeTotal.sub(largeBurnSize);\r\n            emit Transfer(sender, recipient, actualTransferAmount);\r\n            emit Transfer(sender, address(0), burnSize);\r\n        } \r\n        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\r\n        else if (txType == 3) {\r\n            basicTransfer(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        \r\n        if (!_inInternalSell && owner() != sender && !funded) {\r\n            if (shouldRefundGas(sender, recipient, amount)) {\r\n                uint256 gasUsed = startGas.sub(gasleft());\r\n                refundGas(gasUsed);\r\n            }\r\n            \r\n            _updateTwap();\r\n        }\r\n    }\r\n\r\n    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\r\n        uint256 txType = 2;\r\n        if (_isSupportedPool[sender]) {\r\n            if (lpBurn) {\r\n                txType = 3;\r\n            } else {\r\n                txType = 1;\r\n            }\r\n        } else if (sender == Constants.getRouterAdd()) {\r\n            txType = 3;\r\n        }\r\n        return txType;\r\n    }\r\n\r\n    function setPresale(address presaleAdd) public onlyOwner() {\r\n        require(!_presaleDone, \"Presale is already completed\");\r\n        updatePresaleAddress(presaleAdd);\r\n    }\r\n    function setDelayQuicksell(bool flag) external onlyOwner() {\r\n        delayQuick = flag;\r\n    }\r\n    function setDelayWhitelist(bool flag) external onlyOwner() {\r\n        delayWhitelist = flag;\r\n    }\r\n    function setLimitHold(bool flag) external onlyOwner() {\r\n        limitHold = flag;\r\n    }\r\n    function setRefundPolicy(\r\n    uint256 _minEth, \r\n    uint256 _gasPrice,\r\n    uint256 _refundFrac,\r\n    uint256 _minRefund,\r\n    uint256 _maxRefund,\r\n    uint256 _gasRefund) external onlyOwner() {\r\n         minEthThreshold = _minEth;\r\n         gasPrice = _gasPrice;\r\n         refundFrac = _refundFrac;\r\n         minRefund = _minRefund;\r\n         maxRefund = _maxRefund;\r\n         gasRefund = _gasRefund;\r\n    }\r\n\r\n    function setPresaleDone() public payable onlyPresale {\r\n        require(!_presaleDone);\r\n        _presaleDone = true;\r\n        createEthPool();\r\n    }\r\n\r\n    function createEthPool() private onlyOwner() taxlessTx {\r\n        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\r\n        IUniswapV2Factory uniswapFactory = getUniswapFactory();\r\n        address tokenUniswapPair;\r\n        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\r\n            tokenUniswapPair = uniswapFactory.createPair(\r\n            address(uniswapRouterV2.WETH()), address(this));\r\n        } else {\r\n            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\r\n        }\r\n        _approve(msg.sender, address(uniswapRouterV2), ~uint256(0));\r\n        \r\n        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\r\n        _mainPool = tokenUniswapPair;\r\n    }\r\n\r\n    function setTaxlessSetter(address cont) external onlyOwner() {\r\n        require(!isTaxlessSetter(cont),\"already setter\");\r\n        _isTaxlessSetter[cont] = true;\r\n    }\r\n\r\n    function setTaxless(bool flag) public onlyTaxless {\r\n        _taxLess = flag;\r\n    }\r\n\r\n    function removeTaxlessSetter(address cont) external onlyOwner() {\r\n        require(isTaxlessSetter(cont),\"not setter\");\r\n        _isTaxlessSetter[cont] = false;\r\n    }\r\n\r\n\r\n    function setStabilizer(address reserve) external onlyOwner() taxlessTx {\r\n        _isTaxlessSetter[_stabilizer] = false;\r\n        uint256 oldBalance = balanceOf(_stabilizer);\r\n        if (oldBalance > 0) {\r\n            _transfer(_stabilizer, reserve, oldBalance);\r\n            emit Transfer(_stabilizer, reserve, oldBalance);\r\n        }\r\n        _stabilizer = reserve;\r\n        _isTaxlessSetter[reserve] = true;\r\n        _approve(_stabilizer, address(this), ~uint256(0));\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Min time elapsed before twap is updated.\r\n     */\r\n    function setMinDeltaTwap(uint256 _minDeltaTwap) public onlyOwner {\r\n        minDeltaTwap = _minDeltaTwap;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the TWAP cumulative values for the burn curve.\r\n     */\r\n    function initializeTwap() public {\r\n        require(blockTimestampLast == 0, \"twap already initialized\");\r\n        require(balanceOf(uniswapPair) > 0);\r\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = \r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n\r\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n        \r\n        blockTimestampLast = blockTimestamp;\r\n        priceCumulativeLast = priceCumulative;\r\n    }\r\n\r\n    function _initializePair() internal {\r\n        (address token0, address token1) = UniswapV2Library.sortTokens(address(this), address(getUniswapRouter().WETH()));\r\n        isThisToken0 = (token0 == address(this));\r\n        uniswapPair = UniswapV2Library.pairFor(address(getUniswapFactory()), token0, token1);\r\n    }\r\n    \r\n    \r\n    function _updateTwap() internal virtual returns (uint256) {\r\n        if (blockTimestampLast == 0 && balanceOf(uniswapPair) == 0) {\r\n            // we are not initialized yet\r\n            return 0;\r\n        }\r\n\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed > minDeltaTwap) {\r\n            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n\r\n            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n                uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\r\n            );\r\n\r\n            priceCumulativeLast = priceCumulative;\r\n            blockTimestampLast = blockTimestamp;\r\n\r\n            priceAverageLast = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\r\n\r\n            emit TwapUpdated(priceCumulativeLast, blockTimestampLast, priceAverageLast);\r\n        }\r\n\r\n        return priceAverageLast;\r\n    }\r\n\r\n    function shouldRefundGas(address from, address to, uint256 amount) private view returns(bool) {\r\n        if (uniswapPair != from) {\r\n            return false;\r\n        }\r\n        \r\n        if (now - refunds[to] < refundCooldown) {\r\n            return false;\r\n        }\r\n        \r\n        uint256 currentPrice = getCurrentTwap();\r\n        uint256 ethVal = amount.mul(1 ether).div(currentPrice);\r\n        \r\n        if (ethVal < minEthThreshold) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function refundGas(uint256 gasUsed) private setInternalSell {\r\n        uint256 refund = gasRefund;\r\n        if (address(this).balance < refund) {\r\n            refund = address(this).balance.div(10);\r\n        }\r\n        \r\n        if (refund > maxRefund) {\r\n            refund = maxRefund;\r\n        }\r\n        \r\n        if (refund < minRefund) {\r\n            return;\r\n        }\r\n        \r\n        tx.origin.transfer(refund);\r\n        refunds[tx.origin] = now;\r\n        \r\n        emit GasRefunded(tx.origin, refund);\r\n    }\r\n\r\n    function getCurrentTwap() public view returns (uint256) {\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n\r\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\r\n        );\r\n\r\n        return FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\r\n    }\r\n\r\n    function getLastTwap() public view returns (uint256) {\r\n        return priceAverageLast;\r\n    }\r\n    \r\n    function basicTransfer(address from, address to, uint256 amount) private {\r\n        uint256 largeAmount = getFactor().mul(amount);\r\n        _largeBalances[from] = _largeBalances[from].sub(largeAmount);\r\n        _largeBalances[to] = _largeBalances[to].add(largeAmount);\r\n    }\r\n    \r\n    function fundTreasury() private setInternalSell {\r\n        address payable stab = payable(_stabilizer);\r\n        uint256 tokenAmount = balanceOf(stab);\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        \r\n        basicTransfer(stab, address(this), tokenAmount);\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = getUniswapRouter().WETH();\r\n\r\n        getUniswapRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 treasuryFee = address(this).balance;\r\n        if (treasuryFee > 0 && stab != address(0)) {\r\n            treasuryFee = treasuryFee.mul(7).div(10);\r\n            stab.transfer(treasuryFee);\r\n        }\r\n    }\r\n    \r\n    function multiTransfer(address[] memory addresses, uint256 amount) external {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            basicTransfer(msg.sender, addresses[i], amount);\r\n            emit Transfer(msg.sender, addresses[i], amount);\r\n        }\r\n    }\r\n\r\n    function multiWhitelistAdd(address[] memory addresses) external onlyOwner {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            whitelist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function multiWhitelistRemove(address[] memory addresses) external onlyOwner {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            whitelist[addresses[i]] = false;\r\n        }\r\n    }\r\n    \r\n    constructor() public {\r\n        __Ownable_init();\r\n        updateEpoch();\r\n        initializeLargeTotal();\r\n        setPresale(owner());\r\n        \r\n        _stabilizer = 0x9f8fEd32E39A957b8108480555839cB0e2C05d0E;\r\n        \r\n        setMinDeltaTwap(2 minutes);\r\n        _initializePair();\r\n \r\n        // Skip uniswap approve\r\n        _approve(owner(), address(getUniswapRouter()), ~uint256(0));\r\n        _approve(address(this), address(getUniswapRouter()), ~uint256(0));\r\n\r\n        \r\n        // Allow this contract to handle stab\r\n        _approve(_stabilizer, address(this), ~uint256(0));\r\n        \r\n        uint256 tokens = Constants.getLaunchSupply();\r\n        addToAccount(msg.sender, tokens);\r\n        emit Transfer(address(0),msg.sender,tokens);\r\n    }\r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestampLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAverageLast\",\"type\":\"uint256\"}],\"name\":\"TwapUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayQuick\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCounters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"getUpdatedPoolCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxlessSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isThisToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeltaTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiWhitelistAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiWhitelistRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverageLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundFrac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"removeTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setDelayQuicksell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setDelayWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setLimitHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeltaTwap\",\"type\":\"uint256\"}],\"name\":\"setMinDeltaTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAdd\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleDone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundFrac\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefund\",\"type\":\"uint256\"}],\"name\":\"setRefundPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"setTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"silentSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GXS","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e04555bac8bd6781b7c9f30a9aef594e66eb1f743949c2bbbb9f24dd095fdc6"}]}