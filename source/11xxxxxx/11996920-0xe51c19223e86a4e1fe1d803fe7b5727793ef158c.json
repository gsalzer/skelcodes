{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/boardoom/core/VaultBoardroom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/contracts/token/ERC20/IERC20.sol';\\nimport {IVault} from '../../interfaces/IVault.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/contracts/math/SafeMath.sol';\\nimport {ContractGuard} from '../../utils/ContractGuard.sol';\\nimport {BaseBoardroom} from './BaseBoardroom.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract VaultBoardroom is ContractGuard, BaseBoardroom {\\n    using SafeMath for uint256;\\n\\n    // The vault which has state of the stakes.\\n    IVault public vault;\\n    uint256 public currentEpoch = 1;\\n\\n    mapping(address => mapping(uint256 => BondingSnapshot))\\n        public bondingHistory;\\n\\n    mapping(address => mapping(uint256 => uint256)) directorBalanceForEpoch;\\n    mapping(address => uint256) balanceCurrentEpoch;\\n    mapping(address => uint256) balanceLastEpoch;\\n    mapping(address => uint256) balanceBeforeLaunch;\\n\\n    modifier directorExists {\\n        require(\\n            vault.balanceOf(msg.sender) > 0,\\n            'Boardroom: The director does not exist'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVault {\\n        require(msg.sender == address(vault), 'Boardroom: not vault');\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 token_,\\n        IVault vault_,\\n        address owner,\\n        address operator\\n    ) BaseBoardroom(token_) {\\n        vault = vault_;\\n\\n        BoardSnapshot memory genesisSnapshot =\\n            BoardSnapshot({\\n                number: block.number,\\n                time: 0,\\n                rewardReceived: 0,\\n                rewardPerShare: 0\\n            });\\n        boardHistory.push(genesisSnapshot);\\n\\n        transferOperator(operator);\\n        transferOwnership(owner);\\n    }\\n\\n    function getBoardhistory(uint256 i)\\n        public\\n        view\\n        returns (BoardSnapshot memory)\\n    {\\n        return boardHistory[i];\\n    }\\n\\n    function getBondingHistory(address who, uint256 epoch)\\n        public\\n        view\\n        returns (BondingSnapshot memory)\\n    {\\n        return bondingHistory[who][epoch];\\n    }\\n\\n    // returns the balance as per the last epoch; if the user deposits/withdraws\\n    // in the current epoch, this value will not change unless another epoch passes\\n    function getBalanceFromLastEpoch(address who)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // console.log('getBalanceFromLastEpoch who %s', who);\\n        // console.log('getBalanceFromLastEpoch currentEpoch %s', currentEpoch);\\n        if (currentEpoch == 1) return 0;\\n\\n        // console.log(\\n        //     'getBalanceFromLastEpoch balanceLastEpoch[who] %s',\\n        //     balanceLastEpoch[who]\\n        // );\\n        // console.log(\\n        //     'getBalanceFromLastEpoch balanceCurrentEpoch[who] %s',\\n        //     balanceCurrentEpoch[who]\\n        // );\\n\\n        if (balanceCurrentEpoch[who] == 0) {\\n            // console.log(\\n            //     'getBalanceFromLastEpoch balanceOf(who) %s',\\n            //     balanceOf(who)\\n            // );\\n            return balanceOf(who);\\n        }\\n\\n        uint256 currentBalance =\\n            getBondingHistory(who, balanceCurrentEpoch[who]).balance;\\n\\n        if (balanceCurrentEpoch[who] == currentEpoch) {\\n            // if boardroom was disconnected before then just return the old balance\\n            if (balanceLastEpoch[who] == 0) return balanceBeforeLaunch[who];\\n            return getBondingHistory(who, balanceLastEpoch[who]).balance;\\n        }\\n\\n        if (balanceCurrentEpoch[who] < currentEpoch) {\\n            return currentBalance;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function claimAndReinvestReward(IVault _vault) external virtual {\\n        uint256 reward = _claimReward(msg.sender);\\n        _vault.bondFor(msg.sender, reward);\\n    }\\n\\n    function rewardPerShare() public view override returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function balanceOf(address who) public view returns (uint256) {\\n        uint256 unbondingAmount = vault.getStakedAmount(who);\\n        return vault.balanceOf(who).sub(unbondingAmount);\\n    }\\n\\n    function earned(address director)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\\n\\n        return\\n            getBalanceFromLastEpoch(director)\\n                .mul(latestRPS.sub(storedRPS))\\n                .div(1e18)\\n                .add(directors[director].rewardEarnedCurrEpoch);\\n    }\\n\\n    function claimReward()\\n        public\\n        virtual\\n        override\\n        directorExists\\n        returns (uint256)\\n    {\\n        return _claimReward(msg.sender);\\n    }\\n\\n    function allocateSeigniorage(uint256 amount)\\n        external\\n        override\\n        onlyOneBlock\\n        onlyOperator\\n    {\\n        require(amount > 0, 'Boardroom: Cannot allocate 0');\\n\\n        uint256 totalSupply = vault.totalBondedSupply();\\n\\n        // 'Boardroom: Cannot allocate when totalSupply is 0'\\n        if (totalSupply == 0) return;\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply));\\n\\n        BoardSnapshot memory snap =\\n            BoardSnapshot({\\n                number: block.number,\\n                time: block.timestamp,\\n                rewardReceived: amount,\\n                rewardPerShare: nextRPS\\n            });\\n        boardHistory.push(snap);\\n\\n        // console.log('allocateSeigniorage totalSupply: %s', totalSupply);\\n        // console.log('allocateSeigniorage time: %s', block.timestamp);\\n        // console.log('allocateSeigniorage rewardReceived: %s', amount);\\n        // console.log('allocateSeigniorage rewardPerShare: %s', nextRPS);\\n\\n        token.transferFrom(msg.sender, address(this), amount);\\n        currentEpoch = currentEpoch.add(1);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    function updateReward(address director)\\n        external\\n        virtual\\n        override\\n        onlyVault\\n    {\\n        _updateBalance(director);\\n    }\\n\\n    function _claimReward(address who) internal returns (uint256) {\\n        _updateReward(who);\\n\\n        uint256 reward = directors[who].rewardEarnedCurrEpoch;\\n\\n        if (reward > 0) {\\n            directors[who].rewardEarnedCurrEpoch = 0;\\n            token.transfer(who, reward);\\n            emit RewardPaid(who, reward);\\n\\n            if (balanceLastEpoch[who] == 0) {\\n                balanceBeforeLaunch[who] = balanceOf(who);\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n    function setVault(IVault _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    function _updateReward(address director) internal {\\n        Boardseat memory seat = directors[director];\\n        seat.rewardEarnedCurrEpoch = earned(director);\\n        seat.lastSnapshotIndex = latestSnapshotIndex();\\n        directors[director] = seat;\\n    }\\n\\n    function _updateBalance(address who) internal {\\n        // console.log('updating balance for director at epoch: %s', currentEpoch);\\n\\n        BondingSnapshot memory snap =\\n            BondingSnapshot({\\n                epoch: currentEpoch,\\n                when: block.timestamp,\\n                balance: balanceOf(who)\\n            });\\n\\n        bondingHistory[who][currentEpoch] = snap;\\n\\n        // update epoch counters if they need updating\\n        if (balanceCurrentEpoch[who] != currentEpoch) {\\n            balanceLastEpoch[who] = balanceCurrentEpoch[who];\\n            balanceCurrentEpoch[who] = currentEpoch;\\n        }\\n\\n        // if (balanceLastEpoch[who] == 0) {\\n        //     require(\\n        //         earned(who) == 0,\\n        //         'Claim rewards once before depositing again'\\n        //     );\\n        // }\\n\\n        if (balanceLastEpoch[who] == 0) {\\n            balanceLastEpoch[who] = 1;\\n        }\\n\\n        _updateReward(who);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function totalBondedSupply() external view returns (uint256);\\n\\n    function balanceWithoutBonded(address who) external view returns (uint256);\\n\\n    function bond(uint256 amount) external;\\n\\n    function bondFor(address who, uint256 amount) external;\\n\\n    function unbond(uint256 amount) external;\\n\\n    function withdraw() external;\\n\\n    function getStakedAmount(address who) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ContractGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(\\n            !checkSameOriginReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n        require(\\n            !checkSameSenderReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/boardoom/core/BaseBoardroom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/contracts/token/ERC20/IERC20.sol';\\nimport {IVault} from '../../interfaces/IVault.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/contracts/math/SafeMath.sol';\\nimport {Safe112} from '../../lib/Safe112.sol';\\nimport {ContractGuard} from '../../utils/ContractGuard.sol';\\nimport {Operator} from '../../owner/Operator.sol';\\nimport {IBoardroom} from '../../interfaces/IBoardroom.sol';\\nimport {IBasisAsset} from '../../interfaces/IBasisAsset.sol';\\nimport {IVaultBoardroom} from '../../interfaces/IVaultBoardroom.sol';\\n\\nabstract contract BaseBoardroom is Operator, IBoardroom {\\n    using Safe112 for uint112;\\n    using SafeMath for uint256;\\n\\n    IERC20 public token;\\n\\n    BoardSnapshot[] public boardHistory;\\n    mapping(address => Boardseat) public directors;\\n\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n\\n    constructor(IERC20 token_) {\\n        token = token_;\\n    }\\n\\n    function getDirector(address who)\\n        external\\n        view\\n        override\\n        returns (Boardseat memory)\\n    {\\n        return directors[who];\\n    }\\n\\n    function getLastSnapshotIndexOf(address director)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return directors[director].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address director)\\n        public\\n        view\\n        returns (BoardSnapshot memory)\\n    {\\n        return boardHistory[directors[director].lastSnapshotIndex];\\n    }\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() public view returns (BoardSnapshot memory) {\\n        return boardHistory[latestSnapshotIndex()];\\n    }\\n\\n    function rewardPerShare() public view virtual returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function refundReward() external onlyOwner {\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Safe112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Safe112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'Safe112: addition overflow');\\n\\n        return c;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return sub(a, b, 'Safe112: subtraction overflow');\\n    }\\n\\n    function sub(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        require(b <= a, errorMessage);\\n        uint112 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint112 a, uint112 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'Safe112: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    function div(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return div(a, b, 'Safe112: division by zero');\\n    }\\n\\n    function div(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint112 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return mod(a, b, 'Safe112: modulo by zero');\\n    }\\n\\n    function mod(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/owner/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/contracts/GSN/Context.sol';\\nimport '@openzeppelin/contracts/contracts/access/Ownable.sol';\\nimport {IOperator} from '../interfaces/IOperator.sol';\\n\\nabstract contract Operator is Context, Ownable, IOperator {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() {\\n        _operator = _msgSender();\\n\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view override returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            'operator: caller is not the operator'\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view override returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public override onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            'operator: zero address given for new operator'\\n        );\\n\\n        emit OperatorTransferred(address(0), newOperator_);\\n\\n        _operator = newOperator_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBoardroom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IOperator} from './IOperator.sol';\\n\\ninterface IBoardroom is IOperator {\\n    struct Boardseat {\\n        uint256 rewardClaimed;\\n        uint256 lastRPS;\\n        uint256 firstRPS;\\n        uint256 lastBoardSnapshotIndex;\\n        // // Pending reward from the previous epochs.\\n        // uint256 rewardPending;\\n        // Total reward earned in this epoch.\\n        uint256 rewardEarnedCurrEpoch;\\n        // Last time reward was claimed(not bound by current epoch).\\n        uint256 lastClaimedOn;\\n        // // The reward claimed in vesting period of this epoch.\\n        // uint256 rewardClaimedCurrEpoch;\\n        // // Snapshot of boardroom state when last epoch claimed.\\n        uint256 lastSnapshotIndex;\\n        // // Rewards claimable now in the current/next claim.\\n        // uint256 rewardClaimableNow;\\n        // // keep track of the current rps\\n        // uint256 claimedRPS;\\n        bool isFirstVaultActivityBeforeFirstEpoch;\\n        uint256 firstEpochWhenDoingVaultActivity;\\n    }\\n\\n    struct BoardSnapshot {\\n        // Block number when recording a snapshot.\\n        uint256 number;\\n        // Block timestamp when recording a snapshot.\\n        uint256 time;\\n        // Amount of funds received.\\n        uint256 rewardReceived;\\n        // Equivalent amount per share staked.\\n        uint256 rewardPerShare;\\n    }\\n\\n    struct BondingSnapshot {\\n        uint256 epoch;\\n        // Time when first bonding was made.\\n        uint256 when;\\n        // The snapshot index of when first bonded.\\n        uint256 balance;\\n    }\\n\\n    // function updateReward(address director) external;\\n\\n    function allocateSeigniorage(uint256 amount) external;\\n\\n    function getDirector(address who) external view returns (Boardseat memory);\\n\\n    function getLastSnapshotIndexOf(address director)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function earned(address director) external view returns (uint256);\\n\\n    function claimReward() external returns (uint256);\\n\\n    function updateReward(address director) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasisAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {IERC20} from '@openzeppelin/contracts/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBasisAsset is IERC20 {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultBoardroom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IBoardroom} from './IBoardroom.sol';\\n\\ninterface IVaultBoardroom is IBoardroom {\\n    function bondingHistory(address who, uint256 epoch)\\n        external\\n        view\\n        returns (BondingSnapshot memory);\\n\\n    function directors(address who) external view returns (Boardseat memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IEpoch} from './IEpoch.sol';\\n\\ninterface IOperator {\\n    function operator() external view returns (address);\\n\\n    function isOperator() external view returns (bool);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEpoch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IEpoch {\\n    function callable() external view returns (bool);\\n\\n    function getLastEpoch() external view returns (uint256);\\n\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    function getNextEpoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getPeriod() external view returns (uint256);\\n\\n    function getStartTime() external view returns (uint256);\\n\\n    function setPeriod(uint256 _period) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boardHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claimAndReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstRPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBoardSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarnedCurrEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFirstVaultActivityBeforeFirstEpoch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"firstEpochWhenDoingVaultActivity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getBalanceFromLastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getBoardhistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoardroom.BoardSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getBondingHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoardroom.BondingSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getDirector\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstRPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBoardSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarnedCurrEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFirstVaultActivityBeforeFirstEpoch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"firstEpochWhenDoingVaultActivity\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoardroom.Boardseat\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"getLastSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"getLastSnapshotOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoardroom.BoardSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoardroom.BoardSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultBoardroom","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e3cc2c4fb9252d17d07c67135e48536071735d900000000000000000000000044811eff0f4dd2d7cb093a6d33bb6202eb2edf06000000000000000000000000ecce08c2636820a81fc0c805dbdc7d846636bbc40000000000000000000000002806e2e25480856432edb151e2975b6a49a5e079","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}