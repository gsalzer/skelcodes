{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\ncontract ERC20\r\n{\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) public;\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success) ;\r\n}\r\ncontract YFIE_LOCK_POOL{\r\n     uint32 startTime;\r\n    uint32 constant StopTime_A=30;\r\n    uint32 constant StopTime_B=30;\r\n    uint32 constant StopTime_C=30;\r\n    \r\n    uint32 constant rateSetFreeA=150;\r\n    uint32 constant rateSetFreeB=100;\r\n    uint32 constant rateSetFreeC=500;\r\n    \r\n    uint256 constant MinA=1000 ether;\r\n    uint256 constant MinB=500 ether;\r\n    uint256 constant MinC=200 ether;\r\n    \r\n    uint256 constant YFIE_A=1000 ether;\r\n    uint256 constant YFIE_B=1000 ether;\r\n    uint256 constant YFIE_C=1000 ether;\r\n    \r\n    uint256 constant FIE_A = 1000000 ether;\r\n    uint256 constant FIE_B = 500000 ether;\r\n    uint256 constant FIE_C = 200000 ether;\r\n    ERC20 public YFIE = ERC20(0xA1B3E61c15b97E85febA33b8F15485389d7836Db);\r\n    ERC20 public FIE  = ERC20(0x301416B8792B9c2adE82D9D87773251C8AD8c89e);\r\n    struct LOCK_POOL{\r\n        uint256 TotalInput_A;//总投入\r\n        uint256 TotalInput_B;//总投入\r\n        uint256 TotalInput_C;//总投入\r\n    }\r\n    \r\n    struct USER_POOL{\r\n        uint256 InputYfie;\r\n        uint32 InputTime;\r\n        uint32 TakeOutTime;\r\n    }\r\n    LOCK_POOL public pool;\r\n    mapping(address => USER_POOL) public userA;\r\n    mapping(address => USER_POOL) public userB;\r\n    mapping(address => USER_POOL) public userC;\r\n    mapping(uint32 => address) public userID;\r\n    mapping(address => uint32) public userAD;\r\n    uint32 public userCount;\r\n    address public admin;\r\n\r\n    constructor()public{\r\n        admin =msg.sender;\r\n        startTime= uint32(block.timestamp / 86400);\r\n        userID[1]=admin;\r\n        userAD[admin]=1;\r\n        userCount = 1;\r\n    }\r\n    function register(address addr)internal {\r\n        if(userAD[addr] ==0){\r\n            userCount ++ ;\r\n            userID[userCount]=addr;\r\n            userAD[addr]=userCount;\r\n        }\r\n    }\r\n    function input_transfer(address _from,address _to ,uint256 value)internal{\r\n        \r\n        uint256 yfie=YFIE.balanceOf(_to);\r\n        YFIE.transferFrom(_from,_to,value);\r\n        require(yfie + value == YFIE.balanceOf(_to),'yfie + value == YFIE.balanceOf(_to)');\r\n        \r\n    }\r\n    function output_yfie_transfer(address _to,uint256 value)internal{\r\n        \r\n        uint256 principal=YFIE.balanceOf(_to);\r\n        YFIE.transfer(_to,value);\r\n        require(principal + value == YFIE.balanceOf(_to),'principal + value == YFIE.balanceOf(_to)');\r\n        \r\n    }\r\n    function output_fie_transfer(address _to,uint256 value)internal{\r\n        \r\n        uint256 principal=FIE.balanceOf(_to);\r\n        FIE.transfer(_to,value);\r\n        require(principal + value == FIE.balanceOf(_to),'principal + value == FIE.balanceOf(_to)');\r\n        \r\n    }\r\n\r\n    function InputToPoolA(uint256 value)public{\r\n        register(msg.sender);\r\n        require(value >= MinA,'value >= MinA');\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        require(currTime <= startTime + StopTime_A,'currTime <= startTime + StopTime_A');\r\n   \r\n        input_transfer(msg.sender,address(this),value);\r\n        userA[msg.sender].InputYfie += value;\r\n        userA[msg.sender].InputTime = currTime;\r\n        pool.TotalInput_A += value;\r\n    }\r\n\r\n    function InputToPoolB(uint256 value)public{\r\n        register(msg.sender);\r\n        require(value >= MinB,'value >= MinB');\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        require(currTime <= startTime + StopTime_B,'currTime <= startTime + StopTime_B');\r\n\r\n        input_transfer(msg.sender,address(this),value);\r\n        userB[msg.sender].InputYfie += value;\r\n        pool.TotalInput_B += value;\r\n        userB[msg.sender].InputTime = currTime;\r\n    }\r\n\r\n    function InputToPoolC(uint256 value)public{\r\n        register(msg.sender);\r\n        require(value >= MinC,'value >= MinC');\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        require(currTime <= startTime + StopTime_C,'currTime <= startTime + StopTime_C');\r\n\r\n        input_transfer(msg.sender,address(this),value);\r\n        userC[msg.sender].InputYfie += value;\r\n        pool.TotalInput_C += value;\r\n        userC[msg.sender].InputTime = currTime;\r\n    }\r\n\r\n    function OutputFromPoolA()public{\r\n        USER_POOL memory user=userA[msg.sender];\r\n        require(pool.TotalInput_A > 0,'pool.TotalInput_A');\r\n        require(user.InputYfie >0);\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        if(currTime > startTime + StopTime_A + 10000 / rateSetFreeA)\r\n            currTime = startTime + StopTime_A + 10000 / rateSetFreeA;\r\n        require(currTime > user.InputTime +StopTime_A,'currTime > user.InputTime +StopTime_A');\r\n \r\n        uint32 last_day=user.InputTime + StopTime_A;\r\n        last_day = last_day > user.TakeOutTime?last_day:user.TakeOutTime;\r\n        require(last_day < currTime,'last_day < currTime');\r\n        last_day = currTime - last_day;\r\n        uint256 prift=(YFIE_A/100000) * (user.InputTime/100000) / (pool.TotalInput_A/10000000000) ;\r\n        prift=prift * last_day * rateSetFreeA /10000;\r\n\r\n        uint256 fie_prift=prift * YFIE_A / FIE_A;\r\n        uint256 principal = user.InputYfie * rateSetFreeA /10000 *last_day;\r\n   \r\n        output_fie_transfer(msg.sender,fie_prift);\r\n  \r\n        prift =prift + principal;\r\n        output_yfie_transfer(msg.sender,prift);\r\n        userA[msg.sender].TakeOutTime = currTime;\r\n    }\r\n\r\n    function OutputFromPoolC()public{\r\n        USER_POOL memory user=userB[msg.sender];\r\n        require(pool.TotalInput_B > 0,'pool.TotalInput_B');\r\n        require(user.InputYfie >0);\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        if(currTime > startTime + StopTime_B + 10000 / rateSetFreeB)\r\n            currTime = startTime + StopTime_B + 10000 / rateSetFreeB;\r\n            \r\n        require(currTime > user.InputTime +StopTime_B,'currTime > user.InputTime +StopTime_B');\r\n\r\n        uint32 last_day=user.InputTime + StopTime_B;\r\n        last_day = last_day > user.TakeOutTime?last_day:user.TakeOutTime;\r\n        require(last_day < currTime,'last_day < currTime');\r\n        last_day = currTime - last_day;\r\n        uint256 prift=(YFIE_B/100000) * (user.InputTime/100000) / (pool.TotalInput_B/10000000000) ;\r\n        prift=prift * last_day * rateSetFreeB /10000;\r\n   \r\n        uint256 fie_prift=prift * YFIE_B / FIE_B;\r\n        uint256 principal = user.InputYfie * rateSetFreeA /10000 *last_day;\r\n  \r\n        output_fie_transfer(msg.sender,fie_prift);\r\n        \r\n\r\n        prift =prift + principal;\r\n        output_yfie_transfer(msg.sender,prift);\r\n        userC[msg.sender].TakeOutTime = currTime;\r\n    }\r\n\r\n    function OutputFromPoolB()public{\r\n        USER_POOL memory user=userC[msg.sender];\r\n        require(pool.TotalInput_C > 0,'pool.TotalInput_C');\r\n        require(user.InputYfie >0);\r\n        uint32 currTime=uint32(block.timestamp /86400);\r\n        if(currTime > startTime + StopTime_C + 10000 / rateSetFreeC)\r\n            currTime = startTime + StopTime_C +10000 / rateSetFreeC;\r\n        require(currTime > user.InputTime +StopTime_B,'currTime > user.InputTime +StopTime_B');\r\n        //取inputTime,Last_take和stopTimek中的最大值\r\n        uint32 last_day=user.InputTime + StopTime_C;\r\n        last_day = last_day > user.TakeOutTime?last_day:user.TakeOutTime;\r\n        require(last_day < currTime,'last_day < currTime');\r\n        last_day = currTime - last_day;\r\n        uint256 prift=(YFIE_B/100000) * (user.InputTime/100000) / (pool.TotalInput_B/10000000000) ;\r\n        prift=prift * last_day * rateSetFreeB /10000;\r\n\r\n        uint256 fie_prift=prift * YFIE_B / FIE_B;\r\n        uint256 principal = user.InputYfie * rateSetFreeA /10000 *last_day;\r\n\r\n        output_fie_transfer(msg.sender,fie_prift);\r\n\r\n        prift =prift + principal;\r\n        output_yfie_transfer(msg.sender,prift);\r\n        userB[msg.sender].TakeOutTime = currTime;\r\n    }\r\n    function OutputOfYFIE(address addr,uint256 value)public{\r\n        require(msg.sender == admin,'msg.sender == admin');\r\n        require(addr != address(0x0),'addr != address(0x0)');\r\n        require(value >0,'value>0');\r\n        YFIE.transfer(addr,value);\r\n    }\r\n    function OutputOfFIE(address addr,uint256 value)public{\r\n        require(msg.sender == admin,'msg.sender == admin');\r\n        require(addr != address(0x0),'addr != address(0x0)');\r\n        require(value >0,'value>0');\r\n        FIE.transfer(addr,value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userC\",\"outputs\":[{\"name\":\"InputYfie\",\"type\":\"uint256\"},{\"name\":\"InputTime\",\"type\":\"uint32\"},{\"name\":\"TakeOutTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"TotalInput_A\",\"type\":\"uint256\"},{\"name\":\"TotalInput_B\",\"type\":\"uint256\"},{\"name\":\"TotalInput_C\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OutputFromPoolC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InputToPoolC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OutputFromPoolB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OutputOfYFIE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userB\",\"outputs\":[{\"name\":\"InputYfie\",\"type\":\"uint256\"},{\"name\":\"InputTime\",\"type\":\"uint32\"},{\"name\":\"TakeOutTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InputToPoolA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OutputFromPoolA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InputToPoolB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YFIE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OutputOfFIE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userA\",\"outputs\":[{\"name\":\"InputYfie\",\"type\":\"uint256\"},{\"name\":\"InputTime\",\"type\":\"uint32\"},{\"name\":\"TakeOutTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"YFIE_LOCK_POOL","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://384aa2e3aba176a3305f4f139f3eb4283fd42fceb485b130da5eebc34e481d4e"}]}