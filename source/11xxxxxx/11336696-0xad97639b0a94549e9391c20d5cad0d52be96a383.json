{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\utils\\Withdrawable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n/**\r\n    Ensures that any contract that inherits from this contract is able to\r\n    withdraw funds that are accidentally received or stuck.\r\n */\r\n \r\ncontract Withdrawable is Ownable {\r\n    using SafeERC20 for ERC20;\r\n    address constant ETHER = address(0);\r\n\r\n    event LogWithdraw(\r\n        address indexed _from,\r\n        address indexed _assetAddress,\r\n        uint amount\r\n    );\r\n\r\n    /**\r\n     * @dev Withdraw asset.\r\n     * @param _assetAddress Asset to be withdrawn.\r\n     */\r\n    function withdraw(address _assetAddress) public onlyOwner {\r\n        uint assetBalance;\r\n        if (_assetAddress == ETHER) {\r\n            address self = address(this); // workaround for a possible solidity bug\r\n            assetBalance = self.balance;\r\n            msg.sender.transfer(assetBalance);\r\n        } else {\r\n            assetBalance = ERC20(_assetAddress).balanceOf(address(this));\r\n            ERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\r\n        }\r\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtLimit;\r\n    uint256 rateLimit;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /*\r\n     * View how much the Vault would increase this strategy's borrow limit,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault expect this strategy to return at the current block,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /*\r\n     * This is the main contact point where the strategy interacts with the Vault.\r\n     * It is critical that this call is handled as intended by the Strategy.\r\n     * Therefore, this function will be called by BaseStrategy to make sure the\r\n     * integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /*\r\n     * This function is used in the scenario where there is a newer strategy that\r\n     * would hold the same positions as this one, and those positions are easily\r\n     * transferrable to the newer strategy. These positions must be able to be\r\n     * transferred at the moment this call is made, if any prep is required to\r\n     * execute a full transfer in one transaction, that must be accounted for\r\n     * separately from this call.\r\n     */\r\n    function migrateStrategy(address _newStrategy) external;\r\n\r\n    /*\r\n     * This function should only be used in the scenario where the strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits it's position as fast as possible, such as a sudden change in market\r\n     * conditions leading to losses, or an imminent failure in an external\r\n     * dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /*\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     *\r\n     */\r\n    function governance() external view returns (address);\r\n}\r\n\r\n/*\r\n * This interface is here for the keeper bot to use\r\n */\r\ninterface StrategyAPI {\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit);\r\n}\r\n\r\n/*\r\n * BaseStrategy implements all of the required functionality to interoperate closely\r\n * with the core protocol. This contract should be inherited and the abstract methods\r\n * implemented to adapt the strategy to the particular needs it has to create a return.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n\r\n    // Version of this contract's StrategyAPI (must match Vault)\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.2.0\";\r\n    }\r\n\r\n    // Name of this contract's Strategy (Must override!)\r\n    // NOTE: You can use this field to manage the \"version\" of this strategy\r\n    //       e.g. `StrategySomethingOrOtherV1`. It's up to you!\r\n    function name() external virtual pure returns (string memory);\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit);\r\n\r\n    // The minimum number of seconds between harvest calls\r\n    // NOTE: Override this value with your own, or set dynamically below\r\n    uint256 public minReportDelay = 86400; // ~ once a day\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to be \"justifiable\"\r\n    // NOTE: Override this value with your own, or set dynamically below\r\n    uint256 public profitFactor = 100;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a harvest trigger\r\n    uint256 public debtThreshold = 0;\r\n\r\n    bool public emergencyExit;\r\n\r\n    constructor(address _vault) public {\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = msg.sender;\r\n        rewards = msg.sender;\r\n        keeper = msg.sender;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function setRewards(address _rewards) external {\r\n        require(msg.sender == strategist, \"!authorized\");\r\n        rewards = _rewards;\r\n    }\r\n\r\n    function setMinReportDelay(uint256 _delay) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        minReportDelay = _delay;\r\n    }\r\n\r\n    function setProfitFactor(uint256 _profitFactor) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        profitFactor = _profitFactor;\r\n    }\r\n\r\n    function setDebtThreshold(uint256 _debtThreshold) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        debtThreshold = _debtThreshold;\r\n    }\r\n\r\n    /*\r\n     * Resolve governance address from Vault contract, used to make\r\n     * assertions on protected functions in the Strategy\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /*\r\n     * Provide an accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\r\n     * This total should be \"realizable\" e.g. the total value that could *actually* be\r\n     * obtained from this strategy if it were to divest it's entire position based on\r\n     * current on-chain conditions.\r\n     *\r\n     * NOTE: care must be taken in using this function, since it relies on external\r\n     *       systems, which could be manipulated by the attacker to give an inflated\r\n     *       (or reduced) value produced by this function, based on current on-chain\r\n     *       conditions (e.g. this function is possible to influence through flashloan\r\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\r\n     *\r\n     * NOTE: It is up to governance to use this function to correctly order this strategy\r\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\r\n     *       based on sudden withdrawals. This value should be higher than the total debt of\r\n     *       the strategy and higher than it's expected value to be \"safe\".\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /*\r\n     * Perform any strategy unwinding or other calls necessary to capture the \"free return\"\r\n     * this strategy has generated since the last time it's core position(s) were adjusted.\r\n     * Examples include unwrapping extra rewards. This call is only used during \"normal operation\"\r\n     * of a Strategy, and should be optimized to minimize losses as much as possible. This method\r\n     * returns any realized profits and/or realized losses incurred, and should return the total\r\n     * amounts of profits/losses/debt payments (in `want` tokens) for the Vault's accounting\r\n     * (e.g. `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`. It is okay for it\r\n     *       to be less than `_debtOutstanding`, as that should only used as a guide for how much\r\n     *       is left to pay back. Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /*\r\n     * Perform any adjustments to the core position(s) of this strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * strategy. Note that all \"free capital\" in the strategy after the report\r\n     * was made is available for reinvestment. Also note that this number could\r\n     * be 0, and you should handle that scenario accordingly.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed, since when this method is called the strategist is no longer receiving\r\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\r\n     * while not suffering exorbitant losses. This function is used during emergency exit\r\n     * instead of `prepareReturn()`. This method returns any realized losses incurred, and\r\n     * should also return the amount of `want` tokens available to repay outstanding debt\r\n     * to the Vault.\r\n     */\r\n    function exitPosition() internal virtual returns (uint256 _loss, uint256 _debtPayment);\r\n\r\n    /*\r\n     * Vault calls this function after shares are created during `Vault.report()`.\r\n     * You can customize this function to any share distribution mechanism you want.\r\n     */\r\n    function distributeRewards(uint256 _shares) external virtual {\r\n        // Send 100% of newly-minted shares to the rewards address.\r\n        vault.transfer(rewards, _shares);\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     */\r\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need active maintainence,\r\n        // overriding this function is how you would signal for that\r\n        return false;\r\n    }\r\n\r\n    function tend() external {\r\n        if (keeper != address(0)) {\r\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        }\r\n\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should trigger if hadn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\r\n        //       because the resulting change should be large (might not always be the case)\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > 0) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor * callCost < credit.add(profit));\r\n    }\r\n\r\n    function harvest() external {\r\n        if (keeper != address(0)) {\r\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        }\r\n\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            (loss, debtPayment) = exitPosition(); // Free up as much capital as possible\r\n            // NOTE: Don't take performance fee in this scenario\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract, which is\r\n        // the amount it has earned since the last time it reported to the Vault\r\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        emit Harvested(profit);\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\r\n\r\n    function withdraw(uint256 _amountNeeded) external {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amount`\r\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.transfer(msg.sender, amountFreed);\r\n    }\r\n\r\n    /*\r\n     * Do anything necesseary to prepare this strategy for migration, such\r\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    function setEmergencyExit() external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        emergencyExit = true;\r\n        exitPosition();\r\n        vault.revokeStrategy();\r\n    }\r\n\r\n    // Override this to add all tokens/tokenized positions this contract manages\r\n    // on a *persistant* basis (e.g. not just for swapping back to want ephemerally)\r\n    // NOTE: Do *not* include `want`, already included in `sweep` below\r\n    //\r\n    // Example:\r\n    //\r\n    //    function protectedTokens() internal override view returns (address[] memory) {\r\n    //      address[] memory protected = new address[](3);\r\n    //      protected[0] = tokenA;\r\n    //      protected[1] = tokenB;\r\n    //      protected[2] = tokenC;\r\n    //      return protected;\r\n    //    }\r\n    function protectedTokens() internal virtual view returns (address[] memory);\r\n\r\n    function sweep(address _token) external {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        require(_token != address(want), \"!want\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface nTrump is IERC20{\r\n    function claim(address _account) external;\r\n    function shareToken() external view returns (IShareToken);\r\n    function tokenId() external view returns (uint256);\r\n}\r\n\r\ninterface IShareToken {\r\n    function getMarket(uint256 outcome) external view returns (address);    \r\n}\r\n\r\ninterface IMarket {\r\n   \r\n    function getEndTime() external view returns (uint256);\r\n    function getWinningPayoutDistributionHash() external view returns (bytes32);\r\n    function getFinalizationTime() external view returns (uint256);\r\n    function getDisputePacingOn() external view returns (bool);\r\n    function isFinalizedAsInvalid() external view returns (bool);\r\n    function finalize() external returns (bool);\r\n    function isFinalized() external view returns (bool);\r\n    function doInitialReport(uint256[] memory _payoutNumerators, string memory _description, uint256 _additionalStake) external returns (bool);\r\n}\r\n\r\ninterface bPool{\r\n    function getSwapFee() external view returns (uint);\r\n    \r\n    function gulp(address token) external;\r\n    function getDenormalizedWeight(address token) external view returns (uint);\r\n    function getBalance(address token) external view returns (uint);\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n\r\n}\r\n\r\n\r\ncontract Strategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public minBuy = 1.2 ether;\r\n    uint256 public minSell = 1.01 ether;\r\n    uint256 public lotSizeBuy = 500 ether;\r\n    uint256 public lotSizeSell = 500 *1e15;  //15 decimals\r\n\r\n\r\n    uint256 public daiSpent = 0;\r\n\r\n    nTrump public constant ntrump = nTrump(0x44Ea84a85616F8e9cD719Fc843DE31D852ad7240);\r\n    bPool public bpool = bPool(0xEd0413D19cDf94759bBE3FE9981C4bd085b430Cf);\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {\r\n\r\n        require(address(want) == 0x6B175474E89094C44Da98b954EedeAC495271d0F, \"NOT DAI\"); \r\n       \r\n         minReportDelay = uint256(-1); // never call\r\n         profitFactor = uint256(-1)/2; // never call\r\n         debtThreshold = uint256(-1)/2;\r\n        \r\n\r\n        want.safeApprove(address(bpool), uint256(-1));\r\n        ntrump.approve(address(bpool), uint256(-1));\r\n\r\n    }\r\n    modifier management() {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");\r\n        _;\r\n    }\r\n\r\n    function setMinBuy(uint256 _minBuy) external management {\r\n        minBuy = _minBuy;\r\n        require(minSell < minBuy, \"Below MinSell\");\r\n    }\r\n    function setMinSell(uint256 _minSell) external management {\r\n        minSell = _minSell;\r\n        require(minSell < minBuy, \"Above MinBuy\");\r\n    }\r\n    function setLotBuy(uint256 _minLot) external management {\r\n        lotSizeBuy = _minLot;\r\n    }\r\n    function setLotSell(uint256 _minLot) external management {\r\n        lotSizeSell = _minLot;\r\n    }\r\n    function setBalPool(address _bal) external management {\r\n        want.safeApprove(_bal, uint256(-1));\r\n        bpool =  bPool(_bal);\r\n    }\r\n\r\n    function name() external override pure returns (string memory) {\r\n        return \"NTrumpAcquirer\";\r\n    }\r\n\r\n    \r\n    function estimatedTotalAssets() public override view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    function estimatedSettlementProfit() public view returns (uint256) {\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        uint256 assets = estimatedTotalAssets().add(nTrumpOwned().mul(1e3));\r\n        if(assets > debt){\r\n            return assets - debt;\r\n        }\r\n        \r\n    }\r\n\r\n    function averagePrice() public view returns (uint256) {\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        uint256 left = want.balanceOf(address(this));\r\n        if(left > debt) return 0;\r\n        uint256 spent = debt.sub(left);\r\n        uint256 assets = nTrumpOwned().mul(1e3);\r\n        if(assets > spent){\r\n            return assets.mul(1e18).div(spent);\r\n        }\r\n        \r\n    }\r\n\r\n    function nTrumpOwned() public view returns (uint256) {\r\n        return ntrump.balanceOf(address(this));\r\n    }\r\n\r\n   \r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        _loss; //we dont lose\r\n\r\n        \r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n\r\n        //if market is over. and we have ntrump. and ntrump has dai (means it won)\r\n        if(isFinalized() && ntrump.balanceOf(address(this)) > 0)\r\n        {\r\n            //if we have ntokens and market is finalised and there is no dai in ntrump we lost\r\n            if(want.balanceOf(address(ntrump)) > 0){\r\n                ntrump.claim(address(this));\r\n            }else{\r\n                _loss = debt.sub(want.balanceOf(address(this)));\r\n            }\r\n        }\r\n\r\n\r\n        uint256 wantBalance = want.balanceOf(address(this));\r\n\r\n        if(wantBalance > debt){\r\n            _profit = want.balanceOf(address(this)) - debt;\r\n        }\r\n\r\n        _debtPayment = Math.min(wantBalance - _profit, _debtOutstanding);\r\n\r\n    }\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        _debtOutstanding;\r\n\r\n        if(isFinalized())\r\n        {\r\n            return;\r\n        }\r\n\r\n        (bool buy, bool sell) = sellOrBuy();\r\n\r\n        uint256 ntrumpBal = ntrump.balanceOf(address(this));\r\n\r\n        if(buy && want.balanceOf(address(this)) > lotSizeBuy){\r\n            swap(address(want), address(ntrump), lotSizeBuy);\r\n\r\n        }else if (sell && ntrumpBal > 0) {\r\n            swap(address(ntrump), address(want), Math.min(ntrumpBal, lotSizeSell));\r\n        }\r\n\r\n    }\r\n\r\n    function sellOrBuy() public view returns (bool _buy, bool _sell){\r\n        uint256 weightD = bpool.getDenormalizedWeight(address(want));\r\n        uint256 weightN = bpool.getDenormalizedWeight(address(ntrump));\r\n        uint256 balanceD = bpool.getBalance(address(want));\r\n        uint256 balanceN = bpool.getBalance(address(ntrump));\r\n        uint256 swapFee = bpool.getSwapFee();\r\n\r\n        //dai to ntrump\r\n        uint256 outAmount = bpool.calcOutGivenIn(balanceD, weightD, balanceN, weightN, lotSizeBuy, swapFee);\r\n\r\n        //decimal changes make this harder. 1e21 = 18 + 18 - 15\r\n        if(outAmount >= lotSizeBuy.mul(minBuy).div(1e21)){\r\n            _buy = true;\r\n            //return(true,false);\r\n        }\r\n\r\n        //ntrump to dai\r\n        outAmount = bpool.calcOutGivenIn(balanceN, weightN, balanceD, weightD, lotSizeSell, swapFee);\r\n\r\n        //decimal changes make this harder. 1e21 = 18 + 18 - 15\r\n        if(outAmount.mul(minSell).div(1e21) >=  lotSizeSell){\r\n            _sell = true;\r\n             //return(false, true);\r\n        }\r\n    }\r\n\r\n    function isFinalized() public view returns (bool){\r\n         IShareToken shareToken = IShareToken(ntrump.shareToken());\r\n         IMarket market = IMarket(shareToken.getMarket(ntrump.tokenId()));\r\n        \r\n        return market.isFinalized();\r\n    }\r\n\r\n    function swap(\r\n        address _erc20ContractIn, address _erc20ContractOut, uint256 _numTokensToSupply\r\n    ) private returns (uint256) {\r\n\r\n        (uint256 a, ) = bpool.swapExactAmountIn(\r\n            _erc20ContractIn,_numTokensToSupply,_erc20ContractOut, 0,uint256(-1));\r\n\r\n        return a;\r\n       \r\n    }\r\n\r\n    \r\n    function exitPosition()\r\n        internal\r\n        override\r\n        returns (uint256 _loss, uint256 _debtPayment)\r\n    {\r\n        _loss;\r\n        _debtPayment; //suppress\r\n        require(false, \"Emergency Exit Disallowed\");\r\n    }\r\n\r\n    \r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _amountFreed)\r\n    {\r\n        _amountFreed = Math.min(want.balanceOf(address(this)), _amountNeeded);\r\n        \r\n\r\n    }\r\n\r\n    function harvestTrigger(uint256 callCost) public override view returns (bool) {\r\n        if(isFinalized() && ntrump.balanceOf(address(this)) > 0 && want.balanceOf(address(ntrump)) > 0){\r\n            return true;\r\n        }\r\n\r\n        return super.harvestTrigger(callCost);\r\n    }\r\n\r\n    function tendTrigger(uint256 callCost) public override view returns (bool) {\r\n        if(isFinalized()){\r\n            return false;\r\n        }\r\n\r\n        if(harvestTrigger(callCost)){\r\n            return false;\r\n        }\r\n       \r\n        (bool buy,bool sell) = sellOrBuy();\r\n\r\n        if(buy && want.balanceOf(address(this)) > lotSizeBuy){\r\n            return true;\r\n        }\r\n        \r\n        if (sell && ntrump.balanceOf(address(this)) > lotSizeSell){\r\n            return true;\r\n        }\r\n    }\r\n\r\n    \r\n    function prepareMigration(address _newStrategy) internal override {\r\n        \r\n\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n        ntrump.transfer(_newStrategy, ntrump.balanceOf(address(this)));\r\n    }\r\n\r\n    \r\n    function protectedTokens()\r\n        internal\r\n        override\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory protected = new address[](2);\r\n        protected[0] = address(want);\r\n        protected[1] = address(ntrump);\r\n        return protected;\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpool\",\"outputs\":[{\"internalType\":\"contract bPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedSettlementProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotSizeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotSizeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTrumpOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntrump\",\"outputs\":[{\"internalType\":\"contract nTrump\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"}],\"name\":\"setBalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLot\",\"type\":\"uint256\"}],\"name\":\"setLotBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLot\",\"type\":\"uint256\"}],\"name\":\"setLotSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"setMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSell\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba81fb02d5e7b94b341e82d1959c372590b852be","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3df205b2efb5df3eb87ee8581c0b508a4c6de2518c2e2655fb984a26c10811a7"}]}