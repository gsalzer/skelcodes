{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract StandardBearERC20 {\r\n    // 合约名称\r\n    string public constant name = \"BEAR\";\r\n    // 代币符号\r\n    string public constant symbol = \"BEAR\";\r\n    // 代币精度\r\n    uint8 public constant decimals = 6;\r\n    // 代币总供应量： 100 million ERC\r\n    uint private _totalSupply = 100000000e6; \r\n    \r\n    // 授权数量 \r\n    mapping (address => mapping (address => uint256)) internal allowances;\r\n    // 账户余额\r\n    mapping (address => uint256) internal balances;\r\n\r\n    address public owner;\r\n    address public burner;\r\n    \r\n    /**\r\n     * 构造一个代币合约实例\r\n     * @param account 使用account作为owner\r\n     */\r\n    constructor(address account) public {\r\n        owner = account;\r\n        balances[owner] = uint256(_totalSupply);\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * 查询代币总供应量\r\n     * @return 代币总供应量\r\n     */\r\n    function totalSupply() external view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * 查询指定地址的代币数量\r\n     * @param 账户地址\r\n     * @return 代币数量\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n    \r\n    /**\r\n     * 查询账户授权给指定合约的可交易代币数量\r\n     * @param account 指定用户\r\n     * @param spender 指定合约账户\r\n     * @return 授权数量\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * 授权给合约从自身发送一定数量的交易\r\n     * @param spender 授权目标合约\r\n     * @param amount 交易代币数量\r\n     * @return 交易是否成功\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 普通转账\r\n     * @param dst 目标地址\r\n     * @param 转账数量\r\n     * @return 转账是否成功\r\n     */\r\n    function transfer(address dst, uint256 amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice 调用合约转账，从src到dst，需要先对代币进行授权\r\n     * @param src 源头地址\r\n     * @param dst 目标地址\r\n     * @param 转账数量\r\n     * @return 转账是否成功\r\n     */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint256 spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != uint256(-1)) {\r\n            uint256 newAllowance = sub(spenderAllowance, amount, \"StandERC20::transferFrom: transfer amount exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint256 amount) internal {\r\n        require(src != address(0), \"StandERC20::_transferTokens: cannot transfer from the zero address\");\r\n        require(dst != address(0), \"StandERC20::_transferTokens: cannot transfer to the zero address\");\r\n\r\n        balances[src] = sub(balances[src], amount, \"StandERC20::_transferTokens: transfer amount exceeds balance\");\r\n        balances[dst] = add(balances[dst], amount, \"StandERC20::_transferTokens: transfer amount overflows\");\r\n        emit Transfer(src, dst, amount);\r\n    }\r\n    \r\n    // 设置销毁人员 \r\n    function setBurner(address newBurner) external returns (bool) {\r\n        require(msg.sender == owner, \"StandERC20Expend::setBurner: onlyOwner method called by non-owner\");\r\n        burner = newBurner;\r\n        return true;\r\n    }\r\n    \r\n    // 代币销毁 \r\n    function burn(uint256 amount) external returns (bool) {\r\n        require(msg.sender == burner, \"StandERC20Expend::burn: onlyBurner methods called by non-burner\");\r\n\r\n        balances[burner] = sub(balances[burner], amount, \"StandERC20Expend::burn: transfer amount exceeds balance\");\r\n        _totalSupply = sub(_totalSupply, amount, \"StandERC20Expend::burn: transfer amount exceeds balance\");\r\n        emit Burn(burner, amount);\r\n        return true;\r\n    }\r\n\r\n    // 转账事件，供需要监听的合约使用\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // 授权事件，供需要监听的合约使用\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    // 销毁事件，供需要监听的合约使用\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StandardBearERC20","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cec40bf48ed24c3907a57dc6d823d64869101f8d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f50736b36f1011efc912d35f4a06f5a816b4255861842929533f2f3dbe35c859"}]}