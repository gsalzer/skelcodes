{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OrFeedInterface {\r\n    function getExchangeRate ( string calldata fromSymbol, string calldata  toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n    function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n    function getTokenAddress ( string calldata  symbol ) external view returns ( address );\r\n    function getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 );\r\n    function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n    function arb(address  fundsReturnToAddress,  address liquidityProviderContractAddress, string[] calldata   tokens,  uint256 amount, string[] calldata  exchanges) external payable returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 digits);\r\n\r\n    function totalSupply() external view returns (uint256 supply);\r\n}\r\n\r\n\r\n// to support backward compatible contract name -- so function signature remains same\r\nabstract contract ERC20 is IERC20 {\r\n\r\n}\r\n\r\ninterface IKyberNetworkProxy {\r\n\r\n    event ExecuteTrade(\r\n        address indexed trader,\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        address destAddress,\r\n        uint256 actualSrcAmount,\r\n        uint256 actualDestAmount,\r\n        address platformWallet,\r\n        uint256 platformFeeBps\r\n    );\r\n\r\n    /// @notice backward compatible\r\n    function tradeWithHint(\r\n        ERC20 src,\r\n        uint256 srcAmount,\r\n        ERC20 dest,\r\n        address payable destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address payable walletId,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256);\r\n\r\n    function tradeWithHintAndFee(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address payable destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address payable platformWallet,\r\n        uint256 platformFeeBps,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256 destAmount);\r\n\r\n    function trade(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address payable destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address payable platformWallet\r\n    ) external payable returns (uint256);\r\n\r\n    /// @notice backward compatible\r\n    /// @notice Rate units (10 ** 18) => destQty (twei) / srcQty (twei) * 10 ** 18\r\n    function getExpectedRate(\r\n        ERC20 src,\r\n        ERC20 dest,\r\n        uint256 srcQty\r\n    ) external view returns (uint256 expectedRate, uint256 worstRate);\r\n\r\n    function getExpectedRateAfterFee(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty,\r\n        uint256 platformFeeBps,\r\n        bytes calldata hint\r\n    ) external view returns (uint256 expectedRate);\r\n\r\n}\r\n\r\n\r\n// ERC20 Token Smart Contract\r\ncontract oracleInfo {\r\n\r\n    address owner;\r\n    OrFeedInterface orfeed = OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n    address kyberProxyAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    IKyberNetworkProxy kyberProxy = IKyberNetworkProxy(kyberProxyAddress);\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n\r\n    }\r\n    \r\n    function getTokenPrice(string memory fromParam, string memory toParam, string memory venue, uint256 amount) public view returns (uint256) {\r\n         return orfeed.getExchangeRate(fromParam, toParam, venue, amount);\r\n\r\n    }\r\n\r\n    function getPriceFromOracle(string memory fromParam, string memory toParam, uint256 amount) public view returns (uint256){\r\n\r\n        address sellToken = orfeed.getTokenAddress(fromParam);\r\n        address buyToken = orfeed.getTokenAddress(toParam);\r\n\r\n        ERC20 sellToken1 = ERC20(sellToken);\r\n        ERC20 buyToken1 = ERC20(buyToken);\r\n\r\n        uint sellDecim = sellToken1.decimals();\r\n        uint buyDecim = buyToken1.decimals();\r\n\r\n        // uint base = 1^sellDecim;\r\n        // uint adding;\r\n        (uint256 price,) = kyberProxy.getExpectedRate(sellToken1, buyToken1, amount);\r\n\r\n\r\n        uint initResp = (((price * 1000000) / (10 ** 18)) * (amount)) / 1000000;\r\n        uint256 diff;\r\n        if (sellDecim > buyDecim) {\r\n            diff = sellDecim - buyDecim;\r\n            initResp = initResp / (10 ** diff);\r\n            return initResp;\r\n        }\r\n\r\n        else if (sellDecim < buyDecim) {\r\n            diff = buyDecim - sellDecim;\r\n            initResp = initResp * (10 ** diff);\r\n            return initResp;\r\n        }\r\n        else {\r\n            return initResp;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toParam\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"venue\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"oracleInfo","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be5bad988748db88cee9cd0bf4ef6437a9be96beda70dc718c8825754199fcd3"}]}