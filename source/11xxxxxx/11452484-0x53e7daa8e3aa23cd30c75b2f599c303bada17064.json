{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-03\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/shared/libraries/abdk-libraries/ABDKMathQuad.sol\r\n\r\n/*\r\n * ABDK Math Quad Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with IEEE 754\r\n * quadruple-precision binary floating-point numbers (quadruple precision\r\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\r\n * represented by bytes16 type.\r\n */\r\nlibrary ABDKMathQuad {\r\n  /*\r\n   * 0.\r\n   */\r\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\r\n\r\n  /*\r\n   * -0.\r\n   */\r\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * +Infinity.\r\n   */\r\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * -Infinity.\r\n   */\r\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * Canonical NaN value.\r\n   */\r\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 256-bit integer number\r\n   * rounding towards zero.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function toInt (bytes16 x) internal pure returns (int256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16638); // Overflow\r\n    if (exponent < 16383) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16495) result >>= 16495 - exponent;\r\n    else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n      return -int256 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int256 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      uint256 result = x;\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into unsigned 256-bit integer number\r\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\r\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\r\n   * without error, because they are rounded to zero.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function toUInt (bytes16 x) internal pure returns (uint256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    if (exponent < 16383) return 0; // Underflow\r\n\r\n    require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\r\n\r\n    require (exponent <= 16638); // Overflow\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16495) result >>= 16495 - exponent;\r\n    else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 128.128 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 128.128 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 128.128 bit fixed point number\r\n   */\r\n  function to128x128 (bytes16 x) internal pure returns (int256) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16510); // Overflow\r\n    if (exponent < 16255) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16367) result >>= 16367 - exponent;\r\n    else if (exponent > 16367) result <<= exponent - 16367;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n      return -int256 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int256 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 64.64 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from64x64 (int128 x) internal pure returns (bytes16) {\r\n    if (x == 0) return bytes16 (0);\r\n    else {\r\n      // We rely on overflow behavior here\r\n      uint256 result = uint128 (x > 0 ? x : -x);\r\n\r\n      uint256 msb = msb (result);\r\n      if (msb < 112) result <<= 112 - msb;\r\n      else if (msb > 112) result >>= msb - 112;\r\n\r\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\r\n      if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 64.64 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 64.64 bit fixed point number\r\n   */\r\n  function to64x64 (bytes16 x) internal pure returns (int128) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    require (exponent <= 16446); // Overflow\r\n    if (exponent < 16319) return 0; // Underflow\r\n\r\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n      0x10000000000000000000000000000;\r\n\r\n    if (exponent < 16431) result >>= 16431 - exponent;\r\n    else if (exponent > 16431) result <<= exponent - 16431;\r\n\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n      require (result <= 0x80000000000000000000000000000000);\r\n      return -int128 (result); // We rely on overflow behavior here\r\n    } else {\r\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert octuple precision number into quadruple precision number.\r\n   *\r\n   * @param x octuple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\r\n    bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\r\n\r\n    uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\r\n    uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFFF) {\r\n      if (significand > 0) return NaN;\r\n      else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n    }\r\n\r\n    if (exponent > 278526)\r\n      return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n    else if (exponent < 245649)\r\n      return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n    else if (exponent < 245761) {\r\n      significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\r\n      exponent = 0;\r\n    } else {\r\n      significand >>= 124;\r\n      exponent -= 245760;\r\n    }\r\n\r\n    uint128 result = uint128 (significand | exponent << 112);\r\n    if (negative) result |= 0x80000000000000000000000000000000;\r\n\r\n    return bytes16 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into octuple precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return octuple precision number\r\n   */\r\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n    uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\r\n    else if (exponent == 0) {\r\n      if (result > 0) {\r\n        uint256 msb = msb (result);\r\n        result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        exponent = 245649 + msb;\r\n      }\r\n    } else {\r\n      result <<= 124;\r\n      exponent += 245760;\r\n    }\r\n\r\n    result |= exponent << 236;\r\n    if (uint128 (x) >= 0x80000000000000000000000000000000)\r\n      result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    return bytes32 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert double precision number into quadruple precision number.\r\n   *\r\n   * @param x double precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\r\n    uint256 exponent = uint64 (x) >> 52 & 0x7FF;\r\n\r\n    uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\r\n    else if (exponent == 0) {\r\n      if (result > 0) {\r\n        uint256 msb = msb (result);\r\n        result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        exponent = 15309 + msb;\r\n      }\r\n    } else {\r\n      result <<= 60;\r\n      exponent += 15360;\r\n    }\r\n\r\n    result |= exponent << 112;\r\n    if (x & 0x8000000000000000 > 0)\r\n      result |= 0x80000000000000000000000000000000;\r\n\r\n    return bytes16 (uint128 (result));\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into double precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return double precision number\r\n   */\r\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\r\n    bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\r\n\r\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (exponent == 0x7FFF) {\r\n      if (significand > 0) return 0x7FF8000000000000; // NaN\r\n      else return negative ?\r\n          bytes8 (0xFFF0000000000000) : // -Infinity\r\n          bytes8 (0x7FF0000000000000); // Infinity\r\n    }\r\n\r\n    if (exponent > 17406)\r\n      return negative ?\r\n          bytes8 (0xFFF0000000000000) : // -Infinity\r\n          bytes8 (0x7FF0000000000000); // Infinity\r\n    else if (exponent < 15309)\r\n      return negative ?\r\n          bytes8 (0x8000000000000000) : // -0\r\n          bytes8 (0x0000000000000000); // 0\r\n    else if (exponent < 15361) {\r\n      significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\r\n      exponent = 0;\r\n    } else {\r\n      significand >>= 60;\r\n      exponent -= 15360;\r\n    }\r\n\r\n    uint64 result = uint64 (significand | exponent << 52);\r\n    if (negative) result |= 0x8000000000000000;\r\n\r\n    return bytes8 (result);\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is NaN, false otherwise\r\n   */\r\n  function isNaN (bytes16 x) internal pure returns (bool) {\r\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\r\n      0x7FFF0000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is positive or negative\r\n   * infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is positive or negative infinity, false otherwise\r\n   */\r\n  function isInfinity (bytes16 x) internal pure returns (bool) {\r\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\r\n      0x7FFF0000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\r\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @return sign of x\r\n   */\r\n  function sign (bytes16 x) internal pure returns (int8) {\r\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    if (absoluteX == 0) return 0;\r\n    else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\r\n    else return 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\r\n   * arguments are infinities of the same sign. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return sign (x - y)\r\n   */\r\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\r\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n    // Not infinities of the same sign\r\n    require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\r\n\r\n    if (x == y) return 0;\r\n    else {\r\n      bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\r\n      bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\r\n\r\n      if (negativeX) {\r\n        if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\r\n        else return -1; \r\n      } else {\r\n        if (negativeY) return 1;\r\n        else return absoluteX > absoluteY ? int8 (1) : -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\r\n   * anything. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return true if x equals to y, false otherwise\r\n   */\r\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\r\n    if (x == y) {\r\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\r\n        0x7FFF0000000000000000000000000000;\r\n    } else return false;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Special values behave in the following way:\r\n   *\r\n   * NaN + x = NaN for any x.\r\n   * Infinity + x = Infinity for any finite x.\r\n   * -Infinity + x = -Infinity for any finite x.\r\n   * Infinity + Infinity = Infinity.\r\n   * -Infinity + -Infinity = -Infinity.\r\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) { \r\n        if (x == y) return x;\r\n        else return NaN;\r\n      } else return x; \r\n    } else if (yExponent == 0x7FFF) return y;\r\n    else {\r\n      bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\r\n      else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\r\n      else {\r\n        int256 delta = int256 (xExponent) - int256 (yExponent);\r\n  \r\n        if (xSign == ySign) {\r\n          if (delta > 112) return x;\r\n          else if (delta > 0) ySignifier >>= uint256 (delta);\r\n          else if (delta < -112) return y;\r\n          else if (delta < 0) {\r\n            xSignifier >>= uint256 (-delta);\r\n            xExponent = yExponent;\r\n          }\r\n  \r\n          xSignifier += ySignifier;\r\n  \r\n          if (xSignifier >= 0x20000000000000000000000000000) {\r\n            xSignifier >>= 1;\r\n            xExponent += 1;\r\n          }\r\n  \r\n          if (xExponent == 0x7FFF)\r\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n          else {\r\n            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\r\n            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  \r\n            return bytes16 (uint128 (\r\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                (xExponent << 112) |\r\n                xSignifier)); \r\n          }\r\n        } else {\r\n          if (delta > 0) {\r\n            xSignifier <<= 1;\r\n            xExponent -= 1;\r\n          } else if (delta < 0) {\r\n            ySignifier <<= 1;\r\n            xExponent = yExponent - 1;\r\n          }\r\n\r\n          if (delta > 112) ySignifier = 1;\r\n          else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\r\n          else if (delta < -112) xSignifier = 1;\r\n          else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\r\n\r\n          if (xSignifier >= ySignifier) xSignifier -= ySignifier;\r\n          else {\r\n            xSignifier = ySignifier - xSignifier;\r\n            xSign = ySign;\r\n          }\r\n\r\n          if (xSignifier == 0)\r\n            return POSITIVE_ZERO;\r\n\r\n          uint256 msb = msb (xSignifier);\r\n\r\n          if (msb == 113) {\r\n            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            xExponent += 1;\r\n          } else if (msb < 112) {\r\n            uint256 shift = 112 - msb;\r\n            if (xExponent > shift) {\r\n              xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n              xExponent -= shift;\r\n            } else {\r\n              xSignifier <<= xExponent - 1;\r\n              xExponent = 0;\r\n            }\r\n          } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          if (xExponent == 0x7FFF)\r\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n          else return bytes16 (uint128 (\r\n              (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n              (xExponent << 112) |\r\n              xSignifier));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Special values behave in the following way:\r\n   *\r\n   * NaN - x = NaN for any x.\r\n   * Infinity - x = Infinity for any finite x.\r\n   * -Infinity - x = -Infinity for any finite x.\r\n   * Infinity - -Infinity = Infinity.\r\n   * -Infinity - Infinity = -Infinity.\r\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    return add (x, y ^ 0x80000000000000000000000000000000);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y.  Special values behave in the following way:\r\n   *\r\n   * NaN * x = NaN for any x.\r\n   * Infinity * x = Infinity for any finite positive x.\r\n   * Infinity * x = -Infinity for any finite negative x.\r\n   * -Infinity * x = -Infinity for any finite positive x.\r\n   * -Infinity * x = Infinity for any finite negative x.\r\n   * Infinity * 0 = NaN.\r\n   * -Infinity * 0 = NaN.\r\n   * Infinity * Infinity = Infinity.\r\n   * Infinity * -Infinity = -Infinity.\r\n   * -Infinity * Infinity = -Infinity.\r\n   * -Infinity * -Infinity = Infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) {\r\n        if (x == y) return x ^ y & 0x80000000000000000000000000000000;\r\n        else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\r\n        else return NaN;\r\n      } else {\r\n        if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return x ^ y & 0x80000000000000000000000000000000;\r\n      }\r\n    } else if (yExponent == 0x7FFF) {\r\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return y ^ x & 0x80000000000000000000000000000000;\r\n    } else {\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      xSignifier *= ySignifier;\r\n      if (xSignifier == 0)\r\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n            NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n      xExponent += yExponent;\r\n\r\n      uint256 msb =\r\n        xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\r\n        xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\r\n        msb (xSignifier);\r\n\r\n      if (xExponent + msb < 16496) { // Underflow\r\n        xExponent = 0;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb < 16608) { // Subnormal\r\n        if (xExponent < 16496)\r\n          xSignifier >>= 16496 - xExponent;\r\n        else if (xExponent > 16496)\r\n          xSignifier <<= xExponent - 16496;\r\n        xExponent = 0;\r\n      } else if (xExponent + msb > 49373) {\r\n        xExponent = 0x7FFF;\r\n        xSignifier = 0;\r\n      } else {\r\n        if (msb > 112)\r\n          xSignifier >>= msb - 112;\r\n        else if (msb < 112)\r\n          xSignifier <<= 112 - msb;\r\n\r\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        xExponent = xExponent + msb - 16607;\r\n      }\r\n\r\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n          xExponent << 112 | xSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y.  Special values behave in the following way:\r\n   *\r\n   * NaN / x = NaN for any x.\r\n   * x / NaN = NaN for any x.\r\n   * Infinity / x = Infinity for any finite non-negative x.\r\n   * Infinity / x = -Infinity for any finite negative x including -0.\r\n   * -Infinity / x = -Infinity for any finite non-negative x.\r\n   * -Infinity / x = Infinity for any finite negative x including -0.\r\n   * x / Infinity = 0 for any finite non-negative x.\r\n   * x / -Infinity = -0 for any finite non-negative x.\r\n   * x / Infinity = -0 for any finite non-negative x including -0.\r\n   * x / -Infinity = 0 for any finite non-negative x including -0.\r\n   * \r\n   * Infinity / Infinity = NaN.\r\n   * Infinity / -Infinity = -NaN.\r\n   * -Infinity / Infinity = -NaN.\r\n   * -Infinity / -Infinity = NaN.\r\n   *\r\n   * Division by zero behaves in the following way:\r\n   *\r\n   * x / 0 = Infinity for any finite positive x.\r\n   * x / -0 = -Infinity for any finite positive x.\r\n   * x / 0 = -Infinity for any finite negative x.\r\n   * x / -0 = Infinity for any finite negative x.\r\n   * 0 / 0 = NaN.\r\n   * 0 / -0 = NaN.\r\n   * -0 / 0 = NaN.\r\n   * -0 / -0 = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n    if (xExponent == 0x7FFF) {\r\n      if (yExponent == 0x7FFF) return NaN;\r\n      else return x ^ y & 0x80000000000000000000000000000000;\r\n    } else if (yExponent == 0x7FFF) {\r\n      if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\r\n      else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\r\n    } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\r\n      if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n      else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\r\n    } else {\r\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (yExponent == 0) yExponent = 1;\r\n      else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xExponent == 0) {\r\n        if (xSignifier != 0) {\r\n          uint shift = 226 - msb (xSignifier);\r\n\r\n          xSignifier <<= shift;\r\n\r\n          xExponent = 1;\r\n          yExponent += shift - 114;\r\n        }\r\n      }\r\n      else {\r\n        xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\r\n      }\r\n\r\n      xSignifier = xSignifier / ySignifier;\r\n      if (xSignifier == 0)\r\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n            NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n      assert (xSignifier >= 0x1000000000000000000000000000);\r\n\r\n      uint256 msb =\r\n        xSignifier >= 0x80000000000000000000000000000 ? msb (xSignifier) :\r\n        xSignifier >= 0x40000000000000000000000000000 ? 114 :\r\n        xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\r\n\r\n      if (xExponent + msb > yExponent + 16497) { // Overflow\r\n        xExponent = 0x7FFF;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb + 16380  < yExponent) { // Underflow\r\n        xExponent = 0;\r\n        xSignifier = 0;\r\n      } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\r\n        if (xExponent + 16380 > yExponent)\r\n          xSignifier <<= xExponent + 16380 - yExponent;\r\n        else if (xExponent + 16380 < yExponent)\r\n          xSignifier >>= yExponent - xExponent - 16380;\r\n\r\n        xExponent = 0;\r\n      } else { // Normal\r\n        if (msb > 112)\r\n          xSignifier >>= msb - 112;\r\n\r\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        xExponent = xExponent + msb + 16269 - yExponent;\r\n      }\r\n\r\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n          xExponent << 112 | xSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function neg (bytes16 x) internal pure returns (bytes16) {\r\n    return x ^ 0x80000000000000000000000000000000;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function abs (bytes16 x) internal pure returns (bytes16) {\r\n    return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  }\r\n\r\n  /**\r\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\r\n    if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\r\n    else {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      if (xExponent == 0x7FFF) return x;\r\n      else {\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n        bool oddExponent = xExponent & 0x1 == 0;\r\n        xExponent = xExponent + 16383 >> 1;\r\n\r\n        if (oddExponent) {\r\n          if (xSignifier >= 0x10000000000000000000000000000)\r\n            xSignifier <<= 113;\r\n          else {\r\n            uint256 msb = msb (xSignifier);\r\n            uint256 shift = (226 - msb) & 0xFE;\r\n            xSignifier <<= shift;\r\n            xExponent -= shift - 112 >> 1;\r\n          }\r\n        } else {\r\n          if (xSignifier >= 0x10000000000000000000000000000)\r\n            xSignifier <<= 112;\r\n          else {\r\n            uint256 msb = msb (xSignifier);\r\n            uint256 shift = (225 - msb) & 0xFE;\r\n            xSignifier <<= shift;\r\n            xExponent -= shift - 112 >> 1;\r\n          }\r\n        }\r\n\r\n        uint256 r = 0x10000000000000000000000000000;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1;\r\n        r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = xSignifier / r;\r\n        if (r1 < r) r = r1;\r\n\r\n        return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\r\n    if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\r\n    else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \r\n    else {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      if (xExponent == 0x7FFF) return x;\r\n      else {\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return NEGATIVE_INFINITY;\r\n\r\n        bool resultNegative;\r\n        uint256 resultExponent = 16495;\r\n        uint256 resultSignifier;\r\n\r\n        if (xExponent >= 0x3FFF) {\r\n          resultNegative = false;\r\n          resultSignifier = xExponent - 0x3FFF;\r\n          xSignifier <<= 15;\r\n        } else {\r\n          resultNegative = true;\r\n          if (xSignifier >= 0x10000000000000000000000000000) {\r\n            resultSignifier = 0x3FFE - xExponent;\r\n            xSignifier <<= 15;\r\n          } else {\r\n            uint256 msb = msb (xSignifier);\r\n            resultSignifier = 16493 - msb;\r\n            xSignifier <<= 127 - msb;\r\n          }\r\n        }\r\n\r\n        if (xSignifier == 0x80000000000000000000000000000000) {\r\n          if (resultNegative) resultSignifier += 1;\r\n          uint256 shift = 112 - msb (resultSignifier);\r\n          resultSignifier <<= shift;\r\n          resultExponent -= shift;\r\n        } else {\r\n          uint256 bb = resultNegative ? 1 : 0;\r\n          while (resultSignifier < 0x10000000000000000000000000000) {\r\n            resultSignifier <<= 1;\r\n            resultExponent -= 1;\r\n  \r\n            xSignifier *= xSignifier;\r\n            uint256 b = xSignifier >> 255;\r\n            resultSignifier += b ^ bb;\r\n            xSignifier >>= 127 + b;\r\n          }\r\n        }\r\n\r\n        return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\r\n            resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function ln (bytes16 x) internal pure returns (bytes16) {\r\n    return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\r\n  }\r\n\r\n  /**\r\n   * Calculate 2^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\r\n    bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\r\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n    uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\r\n    else if (xExponent > 16397)\r\n      return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\r\n    else if (xExponent < 16255)\r\n      return 0x3FFF0000000000000000000000000000;\r\n    else {\r\n      if (xExponent == 0) xExponent = 1;\r\n      else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n      if (xExponent > 16367)\r\n        xSignifier <<= xExponent - 16367;\r\n      else if (xExponent < 16367)\r\n        xSignifier >>= 16367 - xExponent;\r\n\r\n      if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\r\n        return POSITIVE_ZERO;\r\n\r\n      if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        return POSITIVE_INFINITY;\r\n\r\n      uint256 resultExponent = xSignifier >> 128;\r\n      xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n      if (xNegative && xSignifier != 0) {\r\n        xSignifier = ~xSignifier;\r\n        resultExponent += 1;\r\n      }\r\n\r\n      uint256 resultSignifier = 0x80000000000000000000000000000000;\r\n      if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n      if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\r\n      if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\r\n      if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\r\n      if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\r\n      if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\r\n      if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\r\n      if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\r\n      if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\r\n      if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\r\n      if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\r\n      if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\r\n      if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\r\n      if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\r\n      if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\r\n      if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\r\n      if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\r\n      if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\r\n      if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\r\n      if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\r\n      if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\r\n      if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\r\n      if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\r\n      if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\r\n      if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\r\n      if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\r\n      if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\r\n      if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\r\n      if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\r\n      if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\r\n      if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\r\n      if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\r\n      if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\r\n      if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\r\n      if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\r\n      if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\r\n      if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\r\n      if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\r\n      if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\r\n      if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\r\n      if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\r\n      if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\r\n      if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\r\n      if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\r\n      if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\r\n      if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\r\n      if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\r\n      if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\r\n      if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\r\n      if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\r\n      if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\r\n      if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\r\n      if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\r\n      if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\r\n      if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\r\n      if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\r\n      if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\r\n      if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\r\n      if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\r\n      if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\r\n      if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\r\n      if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\r\n      if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\r\n\r\n      if (!xNegative) {\r\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        resultExponent += 0x3FFF;\r\n      } else if (resultExponent <= 0x3FFE) {\r\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        resultExponent = 0x3FFF - resultExponent;\r\n      } else {\r\n        resultSignifier = resultSignifier >> resultExponent - 16367;\r\n        resultExponent = 0;\r\n      }\r\n\r\n      return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate e^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function exp (bytes16 x) internal pure returns (bytes16) {\r\n    return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\r\n  }\r\n\r\n  /**\r\n   * Get index of the most significant non-zero bit in binary representation of\r\n   * x.  Reverts if x is zero.\r\n   *\r\n   * @return index of the most significant non-zero bit in binary representation\r\n   *         of x\r\n   */\r\n  function msb (uint256 x) private pure returns (uint256) {\r\n    require (x > 0);\r\n\r\n    uint256 result = 0;\r\n\r\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\r\n    if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\r\n    if (x >= 0x100000000) { x >>= 32; result += 32; }\r\n    if (x >= 0x10000) { x >>= 16; result += 16; }\r\n    if (x >= 0x100) { x >>= 8; result += 8; }\r\n    if (x >= 0x10) { x >>= 4; result += 4; }\r\n    if (x >= 0x4) { x >>= 2; result += 2; }\r\n    if (x >= 0x2) result += 1; // No need to shift x anymore\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n// File: contracts/shared/libraries/Percentages.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title Percentage Helpers for Grant Contracts.\r\n * @dev   Used to offer pro-rata refunds and proportionate payment splitting among grantees\r\n *        without loss of precision when handling tokens with large supply.\r\n * @author @NoahMarconi\r\n */\r\nlibrary Percentages {\r\n\r\n    /**\r\n     * @dev Calculate quad point percentage from two uint256 values.\r\n     * @param numerator division numerator.\r\n     * @param denominator division denominator.\r\n     */\r\n    function percentage(uint256 numerator, uint256 denominator)\r\n        internal\r\n        pure\r\n        returns (bytes16)\r\n    {\r\n        bytes16 num = ABDKMathQuad.fromUInt(numerator);\r\n        bytes16 den = ABDKMathQuad.fromUInt(denominator);\r\n\r\n        return ABDKMathQuad.div(num, den);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply a quad point percentage by a uint256 value.\r\n     * @param percent percent of total.\r\n     * @param total total to get percent value from.\r\n     */\r\n    function percentTimesTotal(bytes16 percent, uint256 total)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        bytes16 tot = ABDKMathQuad.fromUInt(total);\r\n        bytes16 res = ABDKMathQuad.mul(tot, percent);\r\n\r\n        return ABDKMathQuad.toUInt(res);\r\n    }\r\n\r\n    /**\r\n     * @dev Determine the maxiumum allocation for a Donor or Grantee.\r\n     * @param contribution their contribution to total.\r\n     * @param totalPool total pool to derive percentage owed from.\r\n     * @param remainingPool remaining pool to split between Donors or Grantees.\r\n     */\r\n    function maxAllocation(uint256 contribution, uint256 totalPool, uint256 remainingPool)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        bytes16 contributionPercent = Percentages.percentage(\r\n            contribution,\r\n            totalPool\r\n        );\r\n\r\n        uint256 contributionMaxAllocation = Percentages.percentTimesTotal(\r\n            contributionPercent,\r\n            remainingPool\r\n        );\r\n\r\n        return contributionMaxAllocation;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/shared/interfaces/IGrantee.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grants Spec Abstract Contract.\r\n * @dev Grant request, funding, and management.\r\n * @author @NoahMarconi\r\n */\r\ninterface IGrantee {\r\n\r\n\r\n    /*----------  Global Variable Getters  ----------*/\r\n\r\n   /**\r\n     * @dev  Overall funding target for all grantees combined.\r\n     */\r\n    function getCumulativeTargetFunding()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev  Grantee amounts are percentage based (if true) or fixed (if false).\r\n     */\r\n    function getPercentageBased()\r\n        external\r\n        view\r\n        returns(bool);\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Get number of grantees.\r\n     * @return number of grantees.\r\n     */\r\n    function getGranteeReferenceLength()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Get grantee address by index.\r\n     * @param index index of grantee to get.\r\n     * @return grantee address.\r\n     */\r\n    function getGranteeReference(uint256 index)\r\n        external\r\n        view\r\n        returns(address);\r\n\r\n    /**\r\n     * @dev Get grantee target funding by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return target funding.\r\n     */\r\n    function getGranteeTargetFunding(address grantee)\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Get grantee total amount paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return total paid.\r\n     */\r\n    function getGranteeTotalPaid(address grantee)\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Get grantee payout approved paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return payout approved.\r\n     */\r\n    function getGranteePayoutApproved(address grantee)\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/shared/storage/Grantee.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grantee State Management Contract.\r\n * @dev State, getters, and setters for Grantees.\r\n * @author @NoahMarconi @ameensol @JFickel @ArnaudBrousseau\r\n */\r\nabstract contract Grantee is IGrantee {\r\n\r\n    /*----------  Globals  ----------*/\r\n\r\n    mapping(address => uint256) private granteeTargetFunding;  // Funding amount targeted for Grantee.\r\n    mapping(address => uint256) private granteeTotalPaid;      // Cumulative funding received by Grantee.\r\n    mapping(address => uint256) private granteePayoutApproved; // Pending payout approved by Manager.\r\n\r\n    address[] private granteeReference;                        // Reference to grantee addresses to allow for iterating over grantees.\r\n\r\n    uint256 private cumulativeTargetFunding;                   // Denominator for calculating grantee's percentage.\r\n    bool private percentageBased = false;                      // Grantee amounts are percentage based (if true) or fixed (if false).\r\n\r\n\r\n\r\n    /*----------  Global Variable Getters  ----------*/\r\n\r\n   /**\r\n     * @dev  Overall funding target for all grantees combined.\r\n     */\r\n    function getCumulativeTargetFunding()\r\n        public\r\n        view\r\n        override\r\n        returns(uint256)\r\n    {\r\n        return cumulativeTargetFunding;\r\n    }\r\n\r\n    /**\r\n     * @dev  Grantee amounts are percentage based (if true) or fixed (if false).\r\n     */\r\n    function getPercentageBased()\r\n        public\r\n        view\r\n        override\r\n        returns(bool)\r\n    {\r\n        return percentageBased;\r\n    }\r\n\r\n    /*----------  Global Variable Setters  ----------*/\r\n\r\n    /**\r\n     * @dev  Overall funding target for all grantees combined.\r\n     * @param value cumulative target funding to set.\r\n     */\r\n    function setPercentageBased(bool value)\r\n        internal\r\n    {\r\n        percentageBased = value;\r\n    }\r\n\r\n    /**\r\n     * @dev  Set grantee targets as either fixed or percentage based.\r\n     * @param value cumulative target funding to set.\r\n     */\r\n    function setCumulativeTargetFunding(uint256 value)\r\n        internal\r\n    {\r\n        cumulativeTargetFunding = value;\r\n    }\r\n\r\n\r\n    /*----------  Grantee Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Get number of grantees.\r\n     * @return number of grantees.\r\n     */\r\n    function getGranteeReferenceLength()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return granteeReference.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get grantee address by index.\r\n     * @param index index of grantee to get.\r\n     * @return grantee address.\r\n     */\r\n    function getGranteeReference(uint256 index)\r\n        public\r\n        override\r\n        view\r\n        returns(address)\r\n    {\r\n        return granteeReference[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Get grantee target funding by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return target funding.\r\n     */\r\n    function getGranteeTargetFunding(address grantee)\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return granteeTargetFunding[grantee];\r\n    }\r\n\r\n    /**\r\n     * @dev Get grantee total amount paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return total paid.\r\n     */\r\n    function getGranteeTotalPaid(address grantee)\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return granteeTotalPaid[grantee];\r\n    }\r\n\r\n    /**\r\n     * @dev Get grantee payout approved paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @return payout approved.\r\n     */\r\n    function getGranteePayoutApproved(address grantee)\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return granteePayoutApproved[grantee];\r\n    }\r\n\r\n    /*----------  Grantee Setters  ----------*/\r\n\r\n\r\n    /**\r\n     * @dev Add grantee address to reference array.\r\n     * @param grantee grantee address to add.\r\n     */\r\n    function addGranteeReference(address grantee)\r\n        internal\r\n    {\r\n        return granteeReference.push(grantee);\r\n    }\r\n\r\n    /**\r\n     * @dev Set grantee target funding by address.\r\n     * @param grantee address of grantee to set.\r\n     * @param value target funding to set.\r\n     */\r\n    function setGranteeTargetFunding(address grantee, uint256 value)\r\n        internal\r\n    {\r\n        granteeTargetFunding[grantee] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set grantee total amount paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @param value total paid to set.\r\n     */\r\n    function setGranteeTotalPaid(address grantee, uint256 value)\r\n        internal\r\n    {\r\n        granteeTotalPaid[grantee] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set grantee payout approved paid by address.\r\n     * @param grantee address of grantee to set.\r\n     * @param value payout approved to set.\r\n     */\r\n    function setGranteePayoutApproved(address grantee, uint256 value)\r\n        internal\r\n    {\r\n        granteePayoutApproved[grantee] = value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/shared/modules/GranteeConstructor.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract GranteeConstructor is Grantee {\r\n    using SafeMath for uint256;\r\n\r\n    /*----------  Constructor  ----------*/\r\n\r\n    /**\r\n     * @dev Grant creation function. May be called by donors, grantees, or any other relevant party.\r\n     * @param _grantees Sorted recipients of donated funds.\r\n     * @param _amounts Respective allocations for each Grantee (must follow sort order of _grantees).\r\n     * @param _percentageBased Grantee amounts are percentage based (if true) or fixed (if false).\r\n     */\r\n    constructor(\r\n        address[] memory _grantees,\r\n        uint256[] memory _amounts,\r\n        bool _percentageBased\r\n    )\r\n    {\r\n\r\n        require(\r\n            _grantees.length > 0,\r\n            \"constructor::Invalid Argument. Must have one or more grantees.\"\r\n        );\r\n\r\n        require(\r\n            _grantees.length == _amounts.length,\r\n            \"constructor::Invalid Argument. _grantees.length must equal _amounts.length\"\r\n        );\r\n\r\n\r\n        // Initialize Grantees.\r\n        address lastAddress = address(0);\r\n        uint256 _cumulativeTargetFunding = 0;\r\n        for (uint256 i = 0; i < _grantees.length; i++) {\r\n            address currentGrantee = _grantees[i];\r\n            uint256 currentAmount = _amounts[i];\r\n\r\n            require(\r\n                currentAmount > 0,\r\n                \"constructor::Invalid Argument. currentAmount must be greater than 0.\"\r\n            );\r\n\r\n            require(\r\n                currentGrantee != address(0),\r\n                \"constructor::Invalid Argument. grantee address cannot be a ADDRESS_ZERO.\"\r\n            );\r\n\r\n            require(\r\n                currentGrantee > lastAddress,\r\n                \"constructor::Invalid Argument. Duplicate or out of order _grantees.\"\r\n            );\r\n\r\n\r\n            lastAddress = currentGrantee;\r\n            setGranteeTargetFunding(currentGrantee, currentAmount);\r\n\r\n            _cumulativeTargetFunding = _cumulativeTargetFunding.add(currentAmount);\r\n\r\n            // Store address as reference.\r\n            addGranteeReference(currentGrantee);\r\n        }\r\n\r\n        setCumulativeTargetFunding(_cumulativeTargetFunding);\r\n        setPercentageBased(_percentageBased);\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/shared/interfaces/IFunding.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grants Spec Abstract Contract.\r\n * @dev Grant request, funding, and management.\r\n * @author @NoahMarconi\r\n */\r\ninterface IFunding {\r\n\r\n    /*----------  Events  ----------*/\r\n\r\n    /**\r\n     * @dev Funding target reached event.\r\n     */\r\n    event LogFundingComplete();\r\n\r\n    /**\r\n     * @dev Grant received funding.\r\n     * @param donor Address funding the grant.\r\n     * @param value Amount in WEI or ATOMIC_UNITS funded.\r\n     */\r\n    event LogFunding(address indexed donor, uint256 value);\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n\r\n}\r\n\r\n// File: contracts/shared/storage/Funding.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Total Funding.\r\n * @dev Handles state for tracking contract total amount funded.\r\n * @author @NoahMarconi @ameensol @JFickel @ArnaudBrousseau\r\n */\r\nabstract contract Funding is IFunding {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /*----------  Globals  ----------*/\r\n\r\n    /* solhint-disable max-line-length */\r\n    uint256 private totalFunding;                 // Cumulative funding donated by donors.\r\n    /* solhint-enable max-line-length */\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalFunding;\r\n    }\r\n\r\n\r\n    /*----------  Shared Setters  ----------*/\r\n\r\n    /**\r\n     * @dev Increase cumulative funding donated by donors.\r\n     * @param value amount to increase total funding by.\r\n     */\r\n    function increaseTotalFundingBy(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = totalFunding.add(value);\r\n    }\r\n\r\n    function setTotalFunding(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/shared/interfaces/IBaseGrant.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grants Spec Abstract Contract.\r\n * @dev Grant request, funding, and management.\r\n * @author @NoahMarconi\r\n */\r\ninterface IBaseGrant {\r\n\r\n    /*----------  Events  ----------*/\r\n\r\n    /**\r\n     * @dev Funding target reached event.\r\n     * implemented in IFunding\r\n     * event LogFundingComplete();\r\n     */\r\n\r\n    /**\r\n     * @dev Grant received funding.\r\n     * implemented in IFunding\r\n     * @param donor Address funding the grant.\r\n     * @param value Amount in WEI or ATOMIC_UNITS funded.\r\n     * event LogFunding(address indexed donor, uint256 value);\r\n     */\r\n\r\n    /**\r\n     * @dev Grant paying grantee.\r\n     * @param grantee Address receiving payment.\r\n     * @param value Amount in WEI or ATOMIC_UNITS paid.\r\n     */\r\n    event LogPayment(address indexed grantee, uint256 value);\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev URI for additional (off-chain) grant details such as description, milestones, etc.\r\n     */\r\n    function getUri()\r\n        external\r\n        view\r\n        returns(bytes32);\r\n\r\n    /**\r\n     * @dev If null, amount is in wei, otherwise address of ERC20-compliant contract.\r\n     */\r\n    function getCurrency()\r\n        external\r\n        view\r\n        returns(address);\r\n\r\n    /**\r\n     * @dev Funding threshold required to begin releasing funds.\r\n     */\r\n    function getTargetFunding()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Cumulative funding paid to grantees.\r\n     */\r\n    function getTotalPaid()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Date after which signal OR funds cannot be sent.\r\n     */\r\n    function getFundingDeadline()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Date after which payouts must be complete or anyone can trigger refunds.\r\n     */\r\n    function getContractExpiration()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    /**\r\n     * @dev Flag to indicate when grant is cancelled.\r\n     */\r\n    function getGrantCancelled()\r\n        external\r\n        view\r\n        returns(bool);\r\n\r\n}\r\n\r\n// File: contracts/shared/storage/BaseGrant.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Base Grant State Management Contract.\r\n * @dev State, getters, and setters for BaseGrant.\r\n * @author @NoahMarconi @ameensol @JFickel @ArnaudBrousseau\r\n */\r\nabstract contract BaseGrant is IBaseGrant {\r\n\r\n    /*----------  Globals  ----------*/\r\n\r\n    /* solhint-disable max-line-length */\r\n    bytes32 private uri;                            // URI for additional (off-chain) grant details such as description, milestones, etc.\r\n    address private currency;                     // (Optional) If null, amount is in wei, otherwise address of ERC20-compliant contract.\r\n    uint256 private targetFunding;                // (Optional) Funding threshold required to begin releasing funds.\r\n    uint256 private totalPaid;                    // Cumulative funding paid to grantees.\r\n    uint256 private fundingDeadline;              // (Optional) Date after which signal OR funds cannot be sent.\r\n    uint256 private contractExpiration;           // (Optional) Date after which payouts must be complete or anyone can trigger refunds.\r\n    bool private grantCancelled;                  // Flag to indicate when grant is cancelled.\r\n    /* solhint-enable max-line-length */\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    function getUri()\r\n        public\r\n        override\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        return uri;\r\n    }\r\n\r\n    function getContractExpiration()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return contractExpiration;\r\n    }\r\n\r\n    function getFundingDeadline()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return fundingDeadline;\r\n    }\r\n\r\n    function getTargetFunding()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return targetFunding;\r\n    }\r\n\r\n    function getTotalPaid()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalPaid;\r\n    }\r\n\r\n    function getGrantCancelled()\r\n        public\r\n        override\r\n        view\r\n        returns(bool)\r\n    {\r\n        return grantCancelled;\r\n    }\r\n\r\n    function getCurrency()\r\n        public\r\n        override\r\n        view\r\n        returns(address)\r\n    {\r\n        return currency;\r\n    }\r\n\r\n    /*----------  Shared Setters  ----------*/\r\n\r\n    function setTotalPaid(uint256 value)\r\n        internal\r\n    {\r\n        totalPaid = value;\r\n    }\r\n\r\n    function setUri(bytes32 value)\r\n        internal\r\n    {\r\n        uri = value;\r\n    }\r\n\r\n    function setGrantCancelled(bool value)\r\n        internal\r\n    {\r\n        grantCancelled = value;\r\n    }\r\n}\r\n\r\n// File: contracts/UnmanagedGrant.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grant for Eth2.\r\n * @dev Managed                     (n)\r\n *      Funding Deadline            (n)\r\n *      Contract expiry             (n)\r\n *      With Token                  (n)\r\n *      Percentage based allocation (y)\r\n *      Withdraw (pull payment)     (n)\r\n *      This is a simplified grant which behaves as a simple payment splitter.\r\n *      No refunds or managers; payment are immediately pushed.\r\n *      WARNING: vulnerable to sending to Gas Token generating addresses. Trust in grantees not doing so is required.\r\n * @author @NoahMarconi\r\n */\r\ncontract UnmanagedGrant is ReentrancyGuard, BaseGrant, GranteeConstructor, Funding {\r\n\r\n\r\n    /*----------  Constructor  ----------*/\r\n\r\n    /**\r\n     * @dev Grant creation function. May be called by grantors, grantees, or any other relevant party.\r\n     * @param _grantees Sorted recipients of unlocked funds.\r\n     * @param _amounts Respective allocations for each Grantee (must follow sort order of _grantees).\r\n     * @param _uri URI for additional (off-chain) grant details such as description, milestones, etc.\r\n     */\r\n    constructor(\r\n        address[] memory _grantees,\r\n        uint256[] memory _amounts,\r\n        bytes32 _uri\r\n    )\r\n        GranteeConstructor(_grantees, _amounts, true)\r\n    {\r\n\r\n        // Initialize globals.\r\n        setUri(_uri);\r\n\r\n    }\r\n\r\n\r\n    /*----------  Fallback  ----------*/\r\n\r\n    receive()\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n\r\n        require(\r\n            msg.value > 0,\r\n            \"fallback::Invalid Value. msg.value must be greater than 0.\"\r\n        );\r\n\r\n        uint256 numGrantees = getGranteeReferenceLength();\r\n        address lastGrantee = payable(getGranteeReference(numGrantees - 1));\r\n        for (uint256 i = 0; i < numGrantees; i++) {\r\n            address payable currentGrantee = payable(getGranteeReference(i));\r\n\r\n            uint256 eligiblePortion = Percentages.maxAllocation(\r\n                getGranteeTargetFunding(currentGrantee),\r\n                getCumulativeTargetFunding(),\r\n                msg.value\r\n            );\r\n\r\n            if (currentGrantee == lastGrantee) {\r\n                // Handle rounding of a few wei.\r\n                // @audit question for auditor, should we enforce this is within expected threshold?\r\n                eligiblePortion = address(this).balance;\r\n            }\r\n\r\n            if (eligiblePortion > 0) {\r\n                (bool success, ) = currentGrantee.call{ value: eligiblePortion}(\"\");\r\n                require(\r\n                    success,\r\n                    \"fallback::Transfer Error. Unable to send eligiblePortion to Grantee.\"\r\n                );\r\n                emit LogPayment(currentGrantee, eligiblePortion);\r\n            }\r\n\r\n        }\r\n\r\n        increaseTotalFundingBy(msg.value);\r\n\r\n        emit LogFunding(msg.sender, msg.value);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_grantees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_uri\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogFunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFundingComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getContractExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeTargetFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrantCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"getGranteePayoutApproved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGranteeReference\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGranteeReferenceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"getGranteeTargetFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"getGranteeTotalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentageBased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUri\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnmanagedGrant","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002808a19a5f26a440978dd48ac65cbcc386b1a60c4328c694c8d3361e7783404ed8b00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000c60c6ab49dc7a0ec91b6bc856b753afa072b3750000000000000000000000001d9e8279305677b5fb0dedeab3060873de4d43b400000000000000000000000025c4a76e7d118705e7ea2e9b7d8c59930d8acd3b00000000000000000000000070e47c843e0f6ab0991a3189c28f2957eb6d384200000000000000000000000078e9b1b63e9451f78d24220fdf7a2a16565d2d020000000000000000000000007e43574f04190521f86f4255dc93d609aee17afd0000000000000000000000008a00dee4195978bf330b5e4ba504dee48fc0a2d20000000000000000000000008d6caac1e75d8ad3341e9eb5984c677a811540ed00000000000000000000000094f3cdfc19763b3ad3b31925643174423c773a5f0000000000000000000000009b984d5a03980d8dc0a24506c968465424c81dbe000000000000000000000000b12d314ef27f7e7b928c9d6c715acfe7613d18ac000000000000000000000000b21c33de1fab3fa15499c62b59fe0cc3250020d1000000000000000000000000b4fa08c48b180fc944efbb3dba6d501338a74ea1000000000000000000000000efe20b5e1ec4fea7f0eeca974ed75ab328b45ca7000000000000000000000000f5441a1b900a1d93e4c06cb9c3fdba39f01469f0000000000000000000000000f966604b2647514912befc3af725b8e4c3d087740000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024f00000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000d15000000000000000000000000000000000000000000000000000000000000024f000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000001710000000000000000000000000000000000000000000000000000000000000069000000000000000000000000000000000000000000000000000000000000009e0000000000000000000000000000000000000000000000000000000000000157000000000000000000000000000000000000000000000000000000000000081500000000000000000000000000000000000000000000000000000000000001a6000000000000000000000000000000000000000000000000000000000000020f0000000000000000000000000000000000000000000000000000000000000051000000000000000000000000000000000000000000000000000000000000034b000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000b8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e359ce3af9b33be3973cdf8fcde49672f5e67bec1c2ad411774b420daf62ef9"}]}