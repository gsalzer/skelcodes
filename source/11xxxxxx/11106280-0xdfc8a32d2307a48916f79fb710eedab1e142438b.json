{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/oracleIterators/IOracleIterator.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IOracleIterator {\r\n    /// @notice Proof of oracle iterator contract\r\n    /// @dev Verifies that contract is a oracle iterator contract\r\n    /// @return true if contract is a oracle iterator contract\r\n    function isOracleIterator() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the oracle iterator\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    //  finds the value closest to a given timestamp\r\n    /// @param _oracle iteratable oracle through\r\n    /// @param _timestamp a given timestamp\r\n    /// @param _roundHints specified rounds for a given timestamp\r\n    /// @return the value closest to a given timestamp\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) external view returns(int);\r\n}\r\n\r\n// File: contracts/oracleIterators/ChainlinkOracleIterator.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract ChainlinkOracleIterator is IOracleIterator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant private PHASE_OFFSET = 64;\r\n    int public constant NEGATIVE_INFINITY = type(int256).min;\r\n\r\n    function isOracleIterator() external override pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return \"ChainlinkIterator\";\r\n    }\r\n\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) public override view returns(int) {\r\n        require(_timestamp > 0, \"Zero timestamp\");\r\n        require(_oracle != address(0), \"Zero oracle\");\r\n        require(_roundHints.length == 1, \"Wrong number of hints\");\r\n        AggregatorV3Interface oracle = AggregatorV3Interface(_oracle);\r\n\r\n        uint80 latestRoundId;\r\n        (latestRoundId,,,,) = oracle.latestRoundData();\r\n\r\n        uint256 phaseId;\r\n        (phaseId,) = parseIds(latestRoundId);\r\n\r\n        uint80 roundHint = uint80(_roundHints[0]);\r\n        require(roundHint > 0, \"Zero hint\");\r\n        requirePhaseFor(roundHint, phaseId);\r\n\r\n        int256 hintAnswer;\r\n        uint256 hintTimestamp;\r\n        (,hintAnswer,,hintTimestamp,) = oracle.getRoundData(roundHint);\r\n\r\n        if(hintTimestamp == 0 || hintTimestamp > _timestamp) {\r\n            revert('Incorrect hint');\r\n        }\r\n\r\n        uint256 timestampNext = 0;\r\n        if(roundHint + 1 <= latestRoundId) {\r\n            (,,,timestampNext,) = oracle.getRoundData(roundHint + 1);\r\n            if(timestampNext > 0 && timestampNext <= _timestamp) {\r\n                revert(\"Later round exists\");\r\n            }\r\n        }\r\n\r\n        if(timestampNext == 0 || (timestampNext > 0 && timestampNext > _timestamp)){\r\n            return hintAnswer;\r\n        }\r\n\r\n        return NEGATIVE_INFINITY;\r\n    }\r\n\r\n    function requirePhaseFor(uint80 _roundHint, uint256 _phase)\r\n    internal\r\n    pure\r\n    {\r\n        uint256 currentPhaseId;\r\n        (currentPhaseId,) = parseIds(_roundHint);\r\n        require(currentPhaseId == _phase, \"Wrong hint phase\");\r\n    }\r\n\r\n    function parseIds(\r\n        uint256 _roundId\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint16, uint64)\r\n    {\r\n        uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\r\n        uint64 aggregatorRoundId = uint64(_roundId);\r\n\r\n        return (phaseId, aggregatorRoundId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NEGATIVE_INFINITY\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_roundHints\",\"type\":\"uint256[]\"}],\"name\":\"getUnderlingValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOracleIterator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracleIterator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://35436a5ccf3a2ca46c8341a7c91b6085b459a36928c65d313e4f409f2b657da7"}]}