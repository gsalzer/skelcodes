{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/uniswap/IUniswapRouterV2.sol\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IUniswapRouterV2 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/badger/IBadgerGeyser.sol\r\n\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IBadgerGeyser {\r\n    function stake(address) external returns (uint256);\r\n\r\n    function signalTokenLock(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 durationSec,\r\n        uint256 startTime\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/sushi/ISushiChef.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface ISushiChef {\r\n    // ===== Write =====\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function add(\r\n        uint256 _allocPoint,\r\n        address _lpToken,\r\n        bool _withUpdate\r\n    ) external;\r\n\r\n    function updatePool(uint256 _pid) external;\r\n\r\n    // ===== Read =====\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function poolInfo(uint256 _pid)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/sushi/IxSushi.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface IxSushi {\r\n    function enter(uint256 _amount) external;\r\n    function leave(uint256 _shares) external;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/badger/IController.sol\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function earn(address, uint256) external;\r\n\r\n    function want(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vaults(address) external view returns (address);\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/badger/IMintr.sol\r\n\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IMintr {\r\n    function mint(address) external;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/badger/IStrategy.sol\r\n\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IStrategy {\r\n    function want() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address) external returns (uint256 balance);\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdraw(uint256) external;\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function getName() external pure returns (string memory);\r\n\r\n    function setStrategist(address _strategist) external;\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\r\n\r\n    function setGovernance(address _governance) external;\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\r\n\r\n\r\n// pragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/badger-sett/SettAccessControl.sol\r\n\r\n// pragma solidity ^0.6.11;\r\n\r\n// import \"deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/*\r\n    Common base for permissioned roles throughout Sett ecosystem\r\n*/\r\ncontract SettAccessControl is Initializable {\r\n    address public governance;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    // ===== MODIFIERS =====\r\n    function _onlyGovernance() internal view {\r\n        require(msg.sender == governance, \"onlyGovernance\");\r\n    }\r\n\r\n    function _onlyGovernanceOrStrategist() internal view {\r\n        require(msg.sender == strategist || msg.sender == governance, \"onlyGovernanceOrStrategist\");\r\n    }\r\n\r\n    function _onlyAuthorizedActors() internal view {\r\n        require(msg.sender == keeper || msg.sender == governance, \"onlyAuthorizedActors\");\r\n    }\r\n\r\n    // ===== PERMISSIONED ACTIONS =====\r\n\r\n    /// @notice Change strategist address\r\n    /// @notice Can only be changed by governance itself\r\n    function setStrategist(address _strategist) external {\r\n        _onlyGovernance();\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /// @notice Change keeper address\r\n    /// @notice Can only be changed by governance itself\r\n    function setKeeper(address _keeper) external {\r\n        _onlyGovernance();\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @notice Can only be changed by governance itself\r\n    function setGovernance(address _governance) public {\r\n        _onlyGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/badger-sett/strategies/BaseStrategy.sol\r\n\r\n\r\n// pragma solidity ^0.6.11;\r\n\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/uniswap/IUniswapRouterV2.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IController.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IStrategy.sol\";\r\n\r\n// import \"contracts/badger-sett/SettAccessControl.sol\";\r\n\r\nabstract contract BaseStrategy is PausableUpgradeable, SettAccessControl {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    event Withdraw(uint256 amount);\r\n    event WithdrawAll(uint256 balance);\r\n    event WithdrawOther(address token, uint256 amount);\r\n    event SetStrategist(address strategist);\r\n    event SetGovernance(address governance);\r\n    event SetController(address controller);\r\n    event SetWithdrawalFee(uint256 withdrawalFee);\r\n    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\r\n    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\r\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\r\n    event Tend(uint256 tended);\r\n\r\n    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\r\n\r\n    uint256 public performanceFeeGovernance;\r\n    uint256 public performanceFeeStrategist;\r\n    uint256 public withdrawalFee;\r\n\r\n    uint256 public constant MAX_FEE = 10000;\r\n    address public constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\r\n\r\n    address public controller;\r\n    address public guardian;\r\n\r\n    uint256 public withdrawalMaxDeviationThreshold;\r\n\r\n    function __BaseStrategy_init(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian\r\n    ) public initializer whenNotPaused {\r\n        __Pausable_init();\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        keeper = _keeper;\r\n        controller = _controller;\r\n        guardian = _guardian;\r\n        withdrawalMaxDeviationThreshold = 50;\r\n\r\n    }\r\n\r\n    // ===== Modifiers =====\r\n\r\n    function _onlyController() internal view {\r\n        require(msg.sender == controller, \"onlyController\");\r\n    }\r\n\r\n    function _onlyAuthorizedActorsOrController() internal view {\r\n        require(msg.sender == keeper || msg.sender == governance || msg.sender == controller, \"onlyAuthorizedActorsOrController\");\r\n    }\r\n\r\n    function _onlyAuthorizedPausers() internal view {\r\n        require(msg.sender == guardian || msg.sender == governance, \"onlyPausers\");\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n    function baseStrategyVersion() public view returns (string memory) {\r\n        return \"1.1\";\r\n    }\r\n\r\n    /// @notice Get the balance of want held idle in the Strategy\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20Upgradeable(want).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\r\n    function balanceOf() public view virtual returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    function isTendable() public view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Governance =====\r\n\r\n    function setGuardian(address _guardian) external {\r\n        _onlyGovernance();\r\n        guardian = _guardian;\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\r\n        _onlyGovernance();\r\n        require(_withdrawalFee <= MAX_FEE, \"base-strategy/excessive-withdrawal-fee\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external {\r\n        _onlyGovernance();\r\n        require(_performanceFeeStrategist <= MAX_FEE, \"base-strategy/excessive-strategist-performance-fee\");\r\n        performanceFeeStrategist = _performanceFeeStrategist;\r\n    }\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external {\r\n        _onlyGovernance();\r\n        require(_performanceFeeGovernance <= MAX_FEE, \"base-strategy/excessive-governance-performance-fee\");\r\n        performanceFeeGovernance = _performanceFeeGovernance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        _onlyGovernance();\r\n        controller = _controller;\r\n    }\r\n\r\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\r\n        _onlyGovernance();\r\n        require(_threshold <= MAX_FEE, \"base-strategy/excessive-max-deviation-threshold\");\r\n        withdrawalMaxDeviationThreshold = _threshold;\r\n    }\r\n\r\n    function deposit() public virtual whenNotPaused {\r\n        _onlyAuthorizedActorsOrController();\r\n        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            _deposit(_want);\r\n        }\r\n        _postDeposit();\r\n    }\r\n\r\n    // ===== Permissioned Actions: Controller =====\r\n\r\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdrawAll() external virtual whenNotPaused returns (uint256 balance) {\r\n        _onlyController();\r\n\r\n        _withdrawAll();\r\n\r\n        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\r\n    /// @notice Processes withdrawal fee if present\r\n    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\r\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\r\n        _onlyController();\r\n\r\n        uint256 _balance = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        uint256 _withdrawn = 0;\r\n        uint256 _postWithdraw = _balance;\r\n\r\n        // Withdraw some from activities if idle want is not sufficient to cover withdrawal\r\n        if (_balance < _amount) {\r\n            _withdrawn = _withdrawSome(_amount.sub(_balance));\r\n            _postWithdraw = _withdrawn.add(_balance);\r\n\r\n            // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\r\n            // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\r\n            if (_postWithdraw < _amount) {\r\n                uint256 diff = _diff(_amount, _postWithdraw);\r\n\r\n                // Require that difference between expected and actual values is less than the deviation threshold percentage\r\n                require(\r\n                    diff <= _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE),\r\n                    \"base-strategy/withdraw-exceed-max-deviation-threshold\"\r\n                );\r\n            }\r\n        }\r\n\r\n        // Return the amount actually withdrawn if less than amount requested\r\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\r\n\r\n        // Process withdrawal fee\r\n        uint256 _fee = _processWithdrawalFee(_toWithdraw);\r\n\r\n        // Transfer remaining to Vault to handle withdrawal\r\n        _transferToVault(_toWithdraw.sub(_fee));\r\n    }\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address _asset) external virtual whenNotPaused returns (uint256 balance) {\r\n        _onlyController();\r\n        _onlyNotProtectedTokens(_asset);\r\n\r\n        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\r\n        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\r\n\r\n    function pause() external {\r\n        _onlyAuthorizedPausers();\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _onlyGovernance();\r\n        _unpause();\r\n    }\r\n\r\n    /// ===== Internal Helper Functions =====\r\n\r\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\r\n    /// @return The withdrawal fee that was taken\r\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\r\n        if (withdrawalFee == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\r\n        IERC20Upgradeable(want).safeTransfer(IController(controller).rewards(), fee);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Helper function to process an arbitrary fee\r\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\r\n    /// @return The fee that was taken\r\n    function _processFee(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 feeBps,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        if (feeBps == 0) {\r\n            return 0;\r\n        }\r\n        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\r\n        IERC20Upgradeable(token).safeTransfer(recipient, fee);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Reset approval and approve exact amount\r\n    function _safeApproveHelper(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20Upgradeable(token).safeApprove(recipient, 0);\r\n        IERC20Upgradeable(token).safeApprove(recipient, amount);\r\n    }\r\n\r\n    function _transferToVault(uint256 _amount) internal {\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\r\n    }\r\n\r\n    /// @notice Swap specified balance of given token on Uniswap with given path\r\n    function _swap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthIn(uint256 balance, address[] memory path) internal {\r\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthOut(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForETH(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\r\n    function _add_max_liquidity_uniswap(address token0, address token1) internal virtual {\r\n        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\r\n        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\r\n\r\n        _safeApproveHelper(token0, uniswap, _token0Balance);\r\n        _safeApproveHelper(token1, uniswap, _token1Balance);\r\n\r\n        IUniswapRouterV2(uniswap).addLiquidity(token0, token1, _token0Balance, _token1Balance, 0, 0, address(this), block.timestamp);\r\n    }\r\n\r\n    /// @notice Utility function to diff two numbers, expects higher value in first position\r\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"diff/expected-higher-number-in-first-position\");\r\n        return a.sub(b);\r\n    }\r\n\r\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\r\n\r\n    /// @dev Internal deposit logic to be implemented by Stratgies\r\n    function _deposit(uint256 _want) internal virtual;\r\n\r\n    function _postDeposit() internal virtual {\r\n        //no-op by default\r\n    }\r\n\r\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\r\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\r\n\r\n    function getProtectedTokens() external view virtual returns (address[] memory);\r\n\r\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\r\n    function _withdrawAll() internal virtual;\r\n\r\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\r\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    /// @dev Realize returns from positions\r\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\r\n    /// @dev Performance fees should also be implemented in this function\r\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\r\n    // function harvest() external virtual;\r\n\r\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\r\n    function getName() external pure virtual returns (string memory);\r\n\r\n    /// @dev Balance of want currently held in strategy positions\r\n    function balanceOfPool() public view virtual returns (uint256);\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/badger-sett/strategies/BaseStrategySwapper.sol\r\n\r\n\r\n// pragma solidity ^0.6.11;\r\n\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/uniswap/IUniswapRouterV2.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IController.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IStrategy.sol\";\r\n\r\n// import \"contracts/badger-sett/SettAccessControl.sol\";\r\n// import \"contracts/badger-sett/strategies/BaseStrategy.sol\";\r\n\r\n/*\r\n    Expands swapping functionality over base strategy\r\n    - ETH in and ETH out Variants\r\n    - Sushiswap support in addition to Uniswap\r\n*/\r\nabstract contract BaseStrategyMultiSwapper is BaseStrategy {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    address public constant sushiswap = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // Sushiswap router\r\n\r\n    /// @notice Swap specified balance of given token on Uniswap with given path\r\n    function _swap_uniswap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    /// @notice Swap specified balance of given token on Uniswap with given path\r\n    function _swap_sushiswap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, sushiswap, balance);\r\n        IUniswapRouterV2(sushiswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthIn_uniswap(uint256 balance, address[] memory path) internal {\r\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthIn_sushiswap(uint256 balance, address[] memory path) internal {\r\n        IUniswapRouterV2(sushiswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthOut_uniswap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForETH(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthOut_sushiswap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, sushiswap, balance);\r\n        IUniswapRouterV2(sushiswap).swapExactTokensForETH(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\r\n    function _add_max_liquidity_sushiswap(address token0, address token1) internal {\r\n        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\r\n        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\r\n\r\n        _safeApproveHelper(token0, sushiswap, _token0Balance);\r\n        _safeApproveHelper(token1, sushiswap, _token1Balance);\r\n\r\n        IUniswapRouterV2(sushiswap).addLiquidity(token0, token1, _token0Balance, _token1Balance, 0, 0, address(this), block.timestamp);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: /Users/present/code/super-sett/interfaces/badger/IStakingRewardsSignalOnly.sol\r\n\r\n// pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IStakingRewardsSignalOnly {\r\n    function stakingToken() external view returns (address);\r\n\r\n    function rewardsToken() external view returns (address);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function getReward() external;\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function stake(uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function exit() external;\r\n}\r\n\r\n\r\n// Root file: contracts/badger-sett/strategies/sushi/StrategySushiBadgerWbtc.sol\r\n\r\n\r\npragma solidity ^0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/uniswap/IUniswapRouterV2.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IBadgerGeyser.sol\";\r\n\r\n// import \"/Users/present/code/super-sett/interfaces/sushi/ISushiChef.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/sushi/IxSushi.sol\";\r\n\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IController.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IMintr.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IStrategy.sol\";\r\n\r\n// import \"contracts/badger-sett/strategies/BaseStrategySwapper.sol\";\r\n// import \"/Users/present/code/super-sett/interfaces/badger/IStakingRewardsSignalOnly.sol\";\r\n\r\n/*\r\n    Strategy to compound badger rewards\r\n    - Deposit Badger into the vault to receive more from a special rewards pool\r\n*/\r\ncontract StrategySushiBadgerWbtc is BaseStrategyMultiSwapper {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    address public geyser;\r\n    address public badger; // BADGER Token\r\n    address public constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // WBTC Token\r\n    address public constant sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2; // SUSHI token\r\n    address public constant xsushi = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // xSUSHI token\r\n\r\n    address public constant chef = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd; // Master staking contract\r\n    uint256 public constant pid = 73; // LP token pool ID\r\n\r\n    address public badgerTree;\r\n\r\n    event HarvestState(\r\n        uint256 xSushiHarvested,\r\n        uint256 totalxSushi,\r\n        uint256 toStrategist,\r\n        uint256 toGovernance,\r\n        uint256 toBadgerTree,\r\n        uint256 timestamp,\r\n        uint256 blockNumber\r\n    );\r\n\r\n    event HarvestBadgerState(\r\n        uint256 badgerHarvested,\r\n        uint256 badgerConvertedToWbtc,\r\n        uint256 wtbcFromConversion,\r\n        uint256 lpGained,\r\n        uint256 timestamp,\r\n        uint256 blockNumber\r\n    );\r\n\r\n    struct HarvestData {\r\n        uint256 badgerHarvested;\r\n        uint256 xSushiHarvested;\r\n        uint256 totalxSushi;\r\n        uint256 toStrategist;\r\n        uint256 toGovernance;\r\n        uint256 toBadgerTree;\r\n        uint256 badgerConvertedToWbtc;\r\n        uint256 wtbcFromConversion;\r\n        uint256 lpGained;\r\n    }\r\n\r\n    struct TendData {\r\n        uint256 sushiTended;\r\n    }\r\n\r\n    event WithdrawState(uint256 toWithdraw, uint256 preWant, uint256 postWant, uint256 withdrawn);\r\n\r\n    function initialize(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian,\r\n        address[4] memory _wantConfig,\r\n        uint256[3] memory _feeConfig\r\n    ) public initializer whenNotPaused {\r\n        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);\r\n\r\n        want = _wantConfig[0];\r\n        geyser = _wantConfig[1];\r\n        badger = _wantConfig[2];\r\n        badgerTree = _wantConfig[3];\r\n\r\n        performanceFeeGovernance = _feeConfig[0];\r\n        performanceFeeStrategist = _feeConfig[1];\r\n        withdrawalFee = _feeConfig[2];\r\n\r\n        // Approve Chef and xSushi (aka SushiBar) to use our sushi\r\n        IERC20Upgradeable(want).approve(chef, uint256(-1));\r\n        IERC20Upgradeable(sushi).approve(xsushi, uint256(-1));\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n    function version() external pure returns (string memory) {\r\n        return \"1.1\";\r\n    }\r\n\r\n    function getName() external pure override returns (string memory) {\r\n        return \"StrategySushiBadgerWbtc\";\r\n    }\r\n\r\n    function balanceOfPool() public view override returns (uint256) {\r\n        // Note: Our want balance is actually in the SushiChef, but it is also tracked in the geyser, which is easier to read\r\n        return IStakingRewardsSignalOnly(geyser).balanceOf(address(this));\r\n    }\r\n\r\n    function getProtectedTokens() external view override returns (address[] memory) {\r\n        address[] memory protectedTokens = new address[](5);\r\n        protectedTokens[0] = want;\r\n        protectedTokens[1] = geyser;\r\n        protectedTokens[2] = badger;\r\n        protectedTokens[3] = sushi;\r\n        protectedTokens[4] = xsushi;\r\n        return protectedTokens;\r\n    }\r\n\r\n    function isTendable() public view override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// ===== Internal Core Implementations =====\r\n\r\n    function _onlyNotProtectedTokens(address _asset) internal override {\r\n        require(address(want) != _asset, \"want\");\r\n        require(address(sushi) != _asset, \"sushi\");\r\n        require(address(xsushi) != _asset, \"xsushi\");\r\n\r\n        require(address(geyser) != _asset, \"geyser\");\r\n        require(address(badger) != _asset, \"badger\");\r\n    }\r\n\r\n    /// @dev Deposit Badger into the staking contract\r\n    /// @dev Track balance in the StakingRewards\r\n    function _deposit(uint256 _want) internal override {\r\n        // Deposit all want in sushi chef\r\n        ISushiChef(chef).deposit(pid, _want);\r\n\r\n        // \"Deposit\" same want into personal staking rewards via signal (note: this is a SIGNAL ONLY - the staking rewards must be locked to just this account)\r\n        IStakingRewardsSignalOnly(geyser).stake(_want);\r\n    }\r\n\r\n    /// @dev Unroll from all strategy positions, and transfer non-core tokens to controller rewards\r\n    function _withdrawAll() internal override {\r\n        (uint256 staked, ) = ISushiChef(chef).userInfo(pid, address(this));\r\n\r\n        // Withdraw all want from Chef\r\n        ISushiChef(chef).withdraw(pid, staked);\r\n\r\n        // === Transfer extra token: Sushi ===\r\n\r\n        // Withdraw all sushi from SushiBar\r\n        uint256 _xsushi = IERC20Upgradeable(xsushi).balanceOf(address(this));\r\n        IxSushi(xsushi).leave(_xsushi);\r\n        uint256 _sushi = IERC20Upgradeable(sushi).balanceOf(address(this));\r\n\r\n        // Send all Sushi to controller rewards\r\n        IERC20Upgradeable(sushi).safeTransfer(IController(controller).rewards(), _sushi);\r\n\r\n        // === Transfer extra token: Badger ===\r\n\r\n        // \"Unstake\" from badger rewards source and hrvest all badger rewards\r\n        IStakingRewardsSignalOnly(geyser).exit();\r\n\r\n        // Send all badger rewards to controller rewards\r\n        uint256 _badger = IERC20Upgradeable(badger).balanceOf(address(this));\r\n        IERC20Upgradeable(badger).safeTransfer(IController(controller).rewards(), _badger);\r\n\r\n        // Note: All want is automatically withdrawn outside this \"inner hook\" in base strategy function\r\n    }\r\n\r\n    /// @dev Withdraw want from staking rewards, using earnings first\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        // Get idle want in the strategy\r\n        uint256 _preWant = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        // If we lack sufficient idle want, withdraw the difference from the strategy position\r\n        if (_preWant < _amount) {\r\n            uint256 _toWithdraw = _amount.sub(_preWant);\r\n\r\n            ISushiChef(chef).withdraw(pid, _toWithdraw);\r\n            // Note: Also signal withdraw from staking rewards\r\n            IStakingRewardsSignalOnly(geyser).withdraw(_toWithdraw);\r\n\r\n            // Note: Withdrawl process will earn sushi, this will be deposited into SushiBar on next tend()\r\n        }\r\n\r\n        // Confirm how much want we actually end up with\r\n        uint256 _postWant = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        // Return the actual amount withdrawn if less than requested\r\n        uint256 _withdrawn = MathUpgradeable.min(_postWant, _amount);\r\n\r\n        emit WithdrawState(_amount, _preWant, _postWant, _withdrawn);\r\n\r\n        return _withdrawn;\r\n    }\r\n\r\n    /// @notice Harvest sushi gains from Chef and deposit into SushiBar (xSushi) to increase gains\r\n    /// @notice Any excess Sushi sitting in the Strategy will be staked as well\r\n    /// @notice The more frequent the tend, the higher returns will be\r\n    function tend() external whenNotPaused returns (TendData memory) {\r\n        _onlyAuthorizedActors();\r\n\r\n        TendData memory tendData;\r\n\r\n        // Note: Deposit of zero harvests rewards balance.\r\n        ISushiChef(chef).deposit(pid, 0);\r\n\r\n        tendData.sushiTended = IERC20Upgradeable(sushi).balanceOf(address(this));\r\n\r\n        // Stake any harvested sushi in SushiBar to increase returns\r\n        if (tendData.sushiTended > 0) {\r\n            IxSushi(xsushi).enter(tendData.sushiTended);\r\n        }\r\n\r\n        emit Tend(tendData.sushiTended);\r\n        return tendData;\r\n    }\r\n\r\n    /// @dev Harvest accumulated badger rewards and convert them to LP tokens\r\n    /// @dev Harvest accumulated sushi and send to the controller\r\n    /// @dev Restake the gained LP tokens in the Geyser\r\n    function harvest() external whenNotPaused returns (HarvestData memory) {\r\n        _onlyAuthorizedActors();\r\n\r\n        HarvestData memory harvestData;\r\n\r\n        uint256 _beforexSushi = IERC20Upgradeable(xsushi).balanceOf(address(this));\r\n        uint256 _beforeLp = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        uint256 _beforeBadger = IERC20Upgradeable(badger).balanceOf(address(this));\r\n\r\n        // ===== Harvest sushi rewards from Chef =====\r\n\r\n        // Note: Deposit of zero harvests rewards balance, but go ahead and deposit idle want if we have it\r\n        ISushiChef(chef).deposit(pid, _beforeLp);\r\n\r\n        // Put all sushi into xsushi\r\n        uint256 _sushi = IERC20Upgradeable(sushi).balanceOf(address(this));\r\n\r\n        if (_sushi > 0) {\r\n            IxSushi(xsushi).enter(_sushi);\r\n        }\r\n\r\n        uint256 _xsushi = IERC20Upgradeable(xsushi).balanceOf(address(this));\r\n\r\n        //all xsushi is profit\r\n        harvestData.totalxSushi = _xsushi;\r\n        //harvested is the xsushi gain since last tend\r\n        harvestData.xSushiHarvested = _xsushi.sub(_beforexSushi);\r\n\r\n        // Process performance fees\r\n        //performance fees in xsushi\r\n        harvestData.toStrategist = _processFee(xsushi, harvestData.totalxSushi, performanceFeeStrategist, strategist);\r\n        harvestData.toGovernance = _processFee(xsushi, harvestData.totalxSushi, performanceFeeGovernance, IController(controller).rewards());\r\n\r\n        // Transfer remainder to Tree\r\n        //tree gets xsushi instead of sushi so it keeps compounding\r\n        harvestData.toBadgerTree = IERC20Upgradeable(xsushi).balanceOf(address(this));\r\n        IERC20Upgradeable(xsushi).safeTransfer(badgerTree, harvestData.toBadgerTree);\r\n\r\n        // ===== Harvest all Badger rewards: Sell to underlying (no performance fees) =====\r\n\r\n        IStakingRewardsSignalOnly(geyser).getReward();\r\n\r\n        uint256 _afterBadger = IERC20Upgradeable(badger).balanceOf(address(this));\r\n        harvestData.badgerHarvested = _afterBadger.sub(_beforeBadger);\r\n\r\n        // ===== Swap half of badger for wBTC in liquidity pool =====\r\n        if (harvestData.badgerHarvested > 0) {\r\n            harvestData.badgerConvertedToWbtc = harvestData.badgerHarvested.div(2);\r\n            if (harvestData.badgerConvertedToWbtc > 0) {\r\n                address[] memory path = new address[](2);\r\n                path[0] = badger; // Badger\r\n                path[1] = wbtc;\r\n\r\n                _swap_sushiswap(badger, harvestData.badgerConvertedToWbtc, path);\r\n\r\n                // Add Badger and wBTC as liquidity if any to add\r\n                _add_max_liquidity_sushiswap(badger, wbtc);\r\n            }\r\n        }\r\n\r\n        // ===== Deposit gained LP position into Chef & staking rewards =====\r\n        uint256 _afterLp = IERC20Upgradeable(want).balanceOf(address(this));\r\n        harvestData.lpGained = _afterLp.sub(_beforeLp);\r\n\r\n        if (harvestData.lpGained > 0) {\r\n            _deposit(harvestData.lpGained);\r\n        }\r\n\r\n        emit HarvestState(\r\n            harvestData.xSushiHarvested,\r\n            harvestData.totalxSushi,\r\n            harvestData.toStrategist,\r\n            harvestData.toGovernance,\r\n            harvestData.toBadgerTree,\r\n            block.timestamp,\r\n            block.number\r\n        );\r\n\r\n        emit HarvestBadgerState(\r\n            harvestData.badgerHarvested,\r\n            harvestData.badgerConvertedToWbtc,\r\n            harvestData.wtbcFromConversion,\r\n            harvestData.lpGained,\r\n            block.timestamp,\r\n            block.number\r\n        );\r\n\r\n        emit Harvest(harvestData.lpGained, block.number);\r\n\r\n        return harvestData;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badgerHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badgerConvertedToWbtc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wtbcFromConversion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpGained\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HarvestBadgerState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xSushiHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalxSushi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toStrategist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toGovernance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBadgerTree\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HarvestState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tended\",\"type\":\"uint256\"}],\"name\":\"Tend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawState\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgerTree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geyser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"badgerHarvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xSushiHarvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalxSushi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toStrategist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toGovernance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBadgerTree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badgerConvertedToWbtc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wtbcFromConversion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpGained\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategySushiBadgerWbtc.HarvestData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_wantConfig\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_feeConfig\",\"type\":\"uint256[3]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sushiTended\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategySushiBadgerWbtc.TendData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xsushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategySushiBadgerWbtc","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1039b6af8be11ed11705350bf4b2b95fe70efcb0de2683cc5e061485d905469e"}]}