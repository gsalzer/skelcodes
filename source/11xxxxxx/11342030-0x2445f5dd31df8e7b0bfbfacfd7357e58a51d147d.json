{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/tudorg/Desktop/projects/DeBa/contracts/deba/FeeRewardForwarder.sol\": {\r\n      \"content\": \"pragma solidity >0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./../../interfaces/deba/IRewardPool.sol\\\";\\nimport \\\"./../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\n\\ncontract FeeRewardForwarder {\\n  using SafeERC20 for IERC20;\\n\\n  /** \\n  *   These are tokens that we are integrating and are interested in.\\n  *   Tokens that are being used in our vaults/stragies.\\n  *   Keep & add only those relevant for specific Deba Vaults/Strategies.\\n  *   They are here in order to build the uniswap paths needed to trade them.\\n  */\\n  address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\\n  address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n  address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n  address constant public yfi = address(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e);\\n  address constant public link = address(0x514910771AF9Ca656af840dff83E8264EcF986CA);\\n  \\n  mapping (address => mapping (address => address[])) public uniswapRoutes;\\n\\n  /**\\n  * The targeted reward token to convert everything to (what the pool needs to receive).\\n  * This is the token tied to the RewardPool that this FeeRewardForwarder is \\n  * connected to at any point in time.\\n  * If the token that is sent to the Forwarder is the correct one, nothing happens.\\n  * If it isn't the `targetToken`, then it gets converted to the `targetToken` first.\\n   */\\n  address public targetToken; // Is always the RewardPool.rewardToken()\\n  address public profitSharingPool; // Address of the RewardPool.\\n\\n  address public uniswapRouterV2;\\n  \\n  address public governance;\\n\\n  event TokenPoolSet(address token, address pool);\\n\\n  /**\\n  *   Sets governance address.\\n  *   Sets the Uniswap router address.\\n  *   Builds the Uniswap paths.\\n  */\\n  constructor(address _storage, address _uniswapRouterV2) public {\\n    governance = msg.sender;\\n    require(_uniswapRouterV2 != address(0), \\\"uniswapRouterV2 not defined\\\");\\n    uniswapRouterV2 = _uniswapRouterV2;\\n    // these are for mainnet, but they won't impact Ropsten\\n    uniswapRoutes[ycrv][dai] = [ycrv, weth, dai];\\n    uniswapRoutes[link][dai] = [link, weth, dai];\\n    uniswapRoutes[weth][dai] = [weth, dai];\\n    uniswapRoutes[yfi][dai] = [yfi, weth, dai];\\n  }\\n\\n  function setGovernance(address _gov) external {\\n    require(msg.sender == governance, '!governance');\\n    governance = _gov;\\n  }\\n\\n  /*\\n  *   Sets the RewardPool that will receive the reward token.\\n  *   Sets the targetToken of this contract based on \\n  *   the address of the RewardPool.\\n  */\\n  function setTokenPool(address _pool) public {\\n    require(msg.sender == governance, '!governance');\\n    targetToken = IRewardPool(_pool).rewardToken();\\n    profitSharingPool = _pool;\\n    emit TokenPoolSet(targetToken, _pool);\\n  }\\n\\n  /**\\n  *   Sets the path for swapping tokens to the to address\\n  *   The `to` address is not validated to match the targetToken,\\n  *   so that we could first update the paths, and then,\\n  *   set the new target.\\n  */\\n  function setConversionPath(address from, address to, address[] memory _uniswapRoute) public {\\n    require(msg.sender == governance, '!governance');\\n    require(from == _uniswapRoute[0],\\n      \\\"The first token of the Uniswap route must be the from token\\\");\\n    require(to == _uniswapRoute[_uniswapRoute.length - 1],\\n      \\\"The last token of the Uniswap route must be the to token\\\");\\n    uniswapRoutes[from][to] = _uniswapRoute;\\n  }\\n\\n  /**\\n  * Main Function\\n  *\\n  * Forwards the funds from the msg.sender to the pool\\n  * under normal circumstances, msg.sender is the strategy.\\n  */\\n  function poolNotifyFixedTarget(address _token, uint256 _amount) external {\\n    if (targetToken == address(0)) {\\n      return; // a No-op if target pool is not set yet\\n    }\\n    if (_token == targetToken) {\\n      // this is already the right token\\n      IERC20(_token).safeTransferFrom(msg.sender, profitSharingPool, _amount);\\n      IRewardPool(profitSharingPool).notifyRewardAmount(_amount);\\n    } else {\\n      // we need to convert\\n      if (uniswapRoutes[_token][targetToken].length > 1) {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 balanceToSwap = IERC20(_token).balanceOf(address(this));\\n\\n        IERC20(_token).safeApprove(uniswapRouterV2, 0);\\n        IERC20(_token).safeApprove(uniswapRouterV2, balanceToSwap);\\n\\n        IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokens(\\n          balanceToSwap,\\n          1, // we will accept any amount\\n          uniswapRoutes[_token][targetToken],\\n          address(this),\\n          block.timestamp\\n        );\\n        // now we can send this token forward\\n        uint256 convertedRewardAmount = IERC20(targetToken).balanceOf(address(this));\\n        IERC20(targetToken).safeTransfer(profitSharingPool, convertedRewardAmount);\\n        IRewardPool(profitSharingPool).notifyRewardAmount(convertedRewardAmount);\\n      }\\n      // else the route does not exist for this token\\n      // do not take any fees\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/contracts/deba/ProfitNotifier.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./FeeRewardForwarder.sol\\\";\\n\\n\\ncontract ProfitNotifier {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public profitSharingNumerator;\\n  uint256 public profitSharingDenominator;\\n\\n  address public feeRewardForwarder; // Address of the `FeeRewardForwarder` contract.\\n\\n  event ProfitLog(\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  constructor() {\\n    // persist in the state for immutability of the fee\\n    // means fee = 30%\\n    profitSharingNumerator = 25; \\n    profitSharingDenominator = 100;\\n    require(profitSharingNumerator < profitSharingDenominator, \\\"invalid profit share\\\");\\n  }\\n\\n  /* \\n  / This fn takes in the old balance (pre-profit) and the new balance (after profit).\\n  / It uses this info to calculate the profit (old balance - new balance).\\n  / After computing the profit, it computes the fee (30% of profit in our case).\\n  / Finally it sends the fee amount to the `FeeRewardForwarder` contract and notifies it.\\n  */\\n  function notifyProfit(uint256 oldBalance, uint256 newBalance, address underlying) internal {\\n    if (newBalance > oldBalance) {\\n      uint256 profit = newBalance.sub(oldBalance);\\n      uint256 feeAmount = profit.mul(profitSharingNumerator).div(profitSharingDenominator);\\n      emit ProfitLog(oldBalance, newBalance, feeAmount, block.timestamp);\\n\\n      if (feeAmount > 0) {\\n        IERC20(underlying).safeApprove(feeRewardForwarder, 0);\\n        IERC20(underlying).safeApprove(feeRewardForwarder, feeAmount);\\n        require(feeRewardForwarder != address(0), 'burning porfits!');\\n        FeeRewardForwarder(feeRewardForwarder).poolNotifyFixedTarget(underlying, feeAmount);\\n      }\\n    } else {\\n      emit ProfitLog(oldBalance, newBalance, 0, block.timestamp);\\n    }\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/contracts/deba/strategies/sushilp.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./../../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./../../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./../../../interfaces/sushiswap/IMasterChef.sol\\\";\\n\\nimport \\\"./../ProfitNotifier.sol\\\";\\n\\ncontract sushiLPStrategy is ProfitNotifier {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public constant uniswapRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address public constant sushiRouter = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address public constant usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    address public vault;\\n    address public governance;\\n    address public agent;\\n    \\n    address public mainAsset;\\n    address public sushiRewardToken;\\n    address public masterChef;\\n    uint256 public rewardPoolId;\\n    address public lpToken0;\\n    address public lpToken1;\\n\\n    mapping(address => address[]) routes;\\n\\n    constructor(\\n        address _vault,\\n        address _mainAsset,\\n        address _sushiRewardToken,\\n        address _masterChef,\\n        uint256 _rpid,\\n        address _agent\\n        ) {\\n        vault = _vault;\\n        governance = msg.sender;\\n        agent = _agent;\\n\\n        mainAsset = _mainAsset;\\n        sushiRewardToken = _sushiRewardToken;\\n        masterChef = _masterChef;\\n        rewardPoolId = _rpid;\\n\\n        address _lptoken;\\n        (_lptoken,,,) = IMasterChef(masterChef).poolInfo(rewardPoolId);\\n        require(_lptoken == mainAsset, 'MasterChef reward pool does not exist!');\\n\\n        lpToken0 = IUniswapV2Pair(mainAsset).token0();\\n        lpToken1 = IUniswapV2Pair(mainAsset).token1();\\n\\n        routes[lpToken0] = [sushiRewardToken, weth, lpToken0];\\n        routes[lpToken1] = [sushiRewardToken, lpToken1];\\n    }\\n\\n    function setRewardForwarder(address _new) external {\\n        require(msg.sender == governance, '!governance');\\n        feeRewardForwarder = _new;\\n    }\\n\\n    function setProfitSharingDenominator(uint256 _new) external {\\n        require(msg.sender == governance, '!governance');\\n        profitSharingDenominator = _new;\\n    }\\n\\n    function setGovernance(address _gov) external {\\n        require(msg.sender == governance, '!governance');\\n        governance = _gov;\\n    }\\n\\n    function setAgent(address _agent) external {\\n        require(msg.sender == governance, '!governance');\\n        agent = _agent;\\n    }\\n\\n    function setVault(address _vault) external {\\n        require(msg.sender == governance, '!governance');\\n        vault = _vault;\\n    }\\n\\n    function setRoute(address _token, address[] memory route) external {\\n        require(msg.sender == governance, '!governance');\\n        routes[_token] = route;\\n    }\\n\\n    function underlyingBalanceStaked() public view returns(uint256){\\n        uint256 _balance;\\n        (_balance,) = IMasterChef(masterChef).userInfo(rewardPoolId, address(this));\\n        return _balance;\\n    }\\n\\n    function underlyingBalance() public view returns(uint256){\\n        return IERC20(mainAsset).balanceOf(address(this)).add(underlyingBalanceStaked());\\n    }\\n\\n    function _withdrawStrategy(uint256 _amount) internal returns(uint256) {\\n        uint256 _before = IERC20(mainAsset).balanceOf(address(this));\\n        IMasterChef(masterChef).withdraw(rewardPoolId, _amount);\\n        return IERC20(mainAsset).balanceOf(address(this)).sub(_before);\\n    }\\n\\n    function _withdrawStrategyAll() internal {\\n        uint256 _staked = underlyingBalanceStaked();\\n        IMasterChef(masterChef).withdraw(rewardPoolId, _staked);\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(msg.sender == vault || msg.sender == governance, '!governance');\\n        uint256 _balance = IERC20(mainAsset).balanceOf(address(this));\\n        if(_amount > _balance){\\n            _amount = _withdrawStrategy(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        require(vault != address(0), 'burning funds');\\n        IERC20(mainAsset).safeTransfer(vault, _amount);\\n    }\\n\\n    function liquidate() public {\\n        require(msg.sender == vault || msg.sender == governance, '!governance');\\n        // _harvestProfits();\\n        _withdrawStrategyAll();\\n\\n        uint256 _balance = IERC20(mainAsset).balanceOf(address(this));\\n        require(vault != address(0), 'burning funds');\\n        IERC20(mainAsset).safeTransfer(vault, _balance);\\n    }\\n\\n    function deposit() public {\\n        uint256 _balance = IERC20(mainAsset).balanceOf(address(this));\\n        if(_balance > 0){\\n            IERC20(mainAsset).safeApprove(masterChef, 0);\\n            IERC20(mainAsset).safeApprove(masterChef, _balance);\\n            IMasterChef(masterChef).deposit(rewardPoolId, _balance);\\n        }\\n    }\\n\\n    function _harvestProfits() internal {\\n        uint256 _before = IERC20(mainAsset).balanceOf(address(this));\\n        _withdrawStrategyAll();\\n        uint256 _sushiBalance = IERC20(sushiRewardToken).balanceOf(address(this));\\n        if(_sushiBalance > 0){\\n            notifyProfit(0, _sushiBalance, sushiRewardToken);\\n\\n            // Swap to lpTokens, then provide liquidity in exchange for mainAsset\\n            uint256 _remainingSushi = IERC20(sushiRewardToken).balanceOf(address(this));\\n            if(_remainingSushi > 0){\\n                IERC20(sushiRewardToken).safeApprove(uniswapRouter, 0);\\n                IERC20(sushiRewardToken).safeApprove(uniswapRouter, _remainingSushi);\\n\\n                IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(_remainingSushi.div(2), uint256(0), routes[lpToken0], address(this), block.timestamp.add(1800));\\n                _remainingSushi = IERC20(sushiRewardToken).balanceOf(address(this));\\n                IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(_remainingSushi, uint256(0), routes[lpToken1], address(this), block.timestamp.add(1800));\\n\\n                uint256 _token0bal = IERC20(lpToken0).balanceOf(address(this));\\n                uint256 _token1bal = IERC20(lpToken1).balanceOf(address(this));\\n\\n                IERC20(lpToken0).safeApprove(sushiRouter, 0);\\n                IERC20(lpToken0).safeApprove(sushiRouter, _token0bal);\\n                IERC20(lpToken1).safeApprove(sushiRouter, 0);\\n                IERC20(lpToken1).safeApprove(sushiRouter, _token1bal);\\n\\n                IUniswapV2Router02(sushiRouter).addLiquidity(lpToken0, lpToken1, _token0bal, _token1bal, 1, 1, address(this), block.timestamp.add(1800));\\n            }\\n        }\\n    }\\n\\n    function harvestProfits() public {\\n        require(msg.sender == agent || msg.sender == governance, '!governance');\\n        _harvestProfits();\\n        deposit();\\n    }\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/interfaces/deba/IRewardPool.sol\": {\r\n      \"content\": \"pragma solidity >0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Unifying the interface with the Synthetix Reward Pool \\ninterface IRewardPool {\\n  function rewardToken() external view returns (address);\\n  function lpToken() external view returns (address);\\n  function duration() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n  function rewardRate() external view returns (uint256);\\n  function rewardPerTokenStored() external view returns (uint256);\\n\\n  function stake(uint256 amountWei) external;\\n\\n  // `balanceOf` would give the amount staked. \\n  // As this is 1 to 1, this is also the holder's share\\n  function balanceOf(address holder) external view returns (uint256);\\n  // total shares & total lpTokens staked\\n  function totalSupply() external view returns(uint256);\\n\\n  function withdraw(uint256 amountWei) external;\\n  function exit() external;\\n\\n  // get claimed rewards\\n  function earned(address holder) external view returns (uint256);\\n\\n  // claim rewards\\n  function getReward() external;\\n\\n  // notify\\n  function notifyRewardAmount(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/interfaces/sushiswap/IMasterChef.sol\": {\r\n      \"content\": \"pragma solidity 0.7.0;\\n\\ninterface IMasterChef {\\n    function deposit(uint256, uint256) external;\\n    function withdraw(uint256, uint256) external;\\n    function userInfo(uint256, address) external view returns (uint256, uint256);\\n    function poolInfo(uint256) external view returns (address, uint256, uint256, uint256);\\n    function massUpdatePools() external;\\n    function pendingSushi(uint256, address) external view returns (uint256);\\n    function pendingPickle(uint256, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/interfaces/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/interfaces/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/DeBa/interfaces/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rpid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setProfitSharingDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setRewardForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"sushiLPStrategy","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000103a414713b430c7a2d1324b9f5a3f01a4b40768000000000000000000000000ceff51756c56ceffca006cd410b03ffc46dd3a580000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe2000000000000000000000000c2edad668740f1aa35e4d8f227fb8e17dca888cd000000000000000000000000000000000000000000000000000000000000001500000000000000000000000089dacfd0793750cf91a2cd7b27615862149b293b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}