{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/DeFiatPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./interfaces/IDeFiatPoints.sol\\\";\\r\\nimport \\\"./lib/@openzeppelin/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./utils/DeFiatGovernedUtils.sol\\\";\\r\\n\\r\\ncontract DeFiatPoints is ERC20(\\\"DeFiat Points v2\\\", \\\"DFTPv2\\\"), IDeFiatPoints, DeFiatGovernedUtils {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event DiscountUpdated(address indexed user, uint256 discount);\\r\\n    event TrancheUpdated(address indexed user, uint256 tranche, uint256 pointsNeeded);\\r\\n    event AllTranchesUpdated(address indexed user);\\r\\n    event TokenUpdated(address indexed user, address token);\\r\\n    event PointsUpdated(address indexed user, address indexed subject, uint256 amount);\\r\\n    event WhitelistedUpdated(address indexed user, address indexed subject, bool whitelist);\\r\\n    event RedirectionUpdated(address indexed user, address indexed subject, bool redirect);\\r\\n\\r\\n    address public token; // DFT ERC20 Token \\r\\n    \\r\\n    mapping (uint256 => uint256) public discountTranches; // mapping of DFTP needed for each discount tranche\\r\\n    mapping (address => uint256) private _discounts; // mapping of users to current discount, 100 = 100%\\r\\n    mapping (address => uint256) private _lastTx; // mapping of users last txn\\r\\n    mapping (address => bool) private _whitelisted; // mapping of addresses who are allowed to call addPoints\\r\\n    mapping (address => bool) private _redirection; // addresses where points should be redirected to tx.origin, i.e. uniswap\\r\\n    \\r\\n    constructor(address _governance) public {\\r\\n        _setGovernance(_governance);\\r\\n        _mint(msg.sender, 150000 * 1e18);\\r\\n    }\\r\\n\\r\\n    // Views\\r\\n\\r\\n    // Discounts - View the current % discount of the _address\\r\\n    function viewDiscountOf(address _address) public override view returns (uint256) {\\r\\n        return _discounts[_address];\\r\\n    }\\r\\n\\r\\n    // Discounts - View the discount level the _address is eligibile for\\r\\n    function viewEligibilityOf(address _address) public override view returns (uint256 tranche) {\\r\\n        uint256 balance = balanceOf(_address);\\r\\n        for (uint256 i = 0; i <= 9; i++) {\\r\\n            if (balance >= discountTranches[i]) { \\r\\n                tranche = i;\\r\\n            } else {\\r\\n                return tranche;\\r\\n            } \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Discounts - Check amount of points needed for _tranche\\r\\n    function discountPointsNeeded(uint256 _tranche) public override view returns (uint256 pointsNeeded) {\\r\\n        return (discountTranches[_tranche]);\\r\\n    }\\r\\n\\r\\n    // Points - Min amount \\r\\n    function viewTxThreshold() public override view returns (uint256) {\\r\\n        return IDeFiatGov(governance).viewTxThreshold();\\r\\n    }\\r\\n\\r\\n    // Points - view whitelisted address\\r\\n    function viewWhitelisted(address _address) public override view returns (bool) {\\r\\n        return _whitelisted[_address];\\r\\n    }\\r\\n\\r\\n    // Points - view redirection address\\r\\n    function viewRedirection(address _address) public override view returns (bool) {\\r\\n        return _redirection[_address];\\r\\n    }\\r\\n\\r\\n    // State-Changing Functions\\r\\n\\r\\n    // Discount - Update Discount internal function to control event on every update\\r\\n    function _updateDiscount(address user, uint256 discount) internal {\\r\\n        _discounts[user] = discount;\\r\\n        emit DiscountUpdated(user, discount);\\r\\n    }\\r\\n\\r\\n    // Discount - Update your discount if balance of DFTP is high enough\\r\\n    // Otherwise, throw to prevent unnecessary calls\\r\\n    function updateMyDiscount() public returns (bool) {\\r\\n        uint256 tranche = viewEligibilityOf(msg.sender);\\r\\n        uint256 discount = tranche * 10;\\r\\n        require(discount != _discounts[msg.sender], \\\"UpdateDiscount: No discount change\\\");\\r\\n\\r\\n        _updateDiscount(msg.sender, discount);\\r\\n    }\\r\\n\\r\\n    // Discount - Update the user discount directly, Governance-Only\\r\\n    function overrideDiscount(address user, uint256 discount) external onlyGovernor {\\r\\n        require(discount <= 100, \\\"OverrideDiscount: Must be in-bounds\\\");\\r\\n        require(_discounts[user] != discount, \\\"OverrideDiscount: No discount change\\\");\\r\\n\\r\\n        _updateDiscount(user, discount);\\r\\n    }\\r\\n    \\r\\n    // Tranches - Set an individual discount tranche\\r\\n    function setDiscountTranches(uint256 tranche, uint256 pointsNeeded) external onlyGovernor {\\r\\n        require(tranche < 10, \\\"SetTranche: Maximum tranche level exceeded\\\");\\r\\n        require(discountTranches[tranche] != pointsNeeded, \\\"SetTranche: No change detected\\\");\\r\\n\\r\\n        discountTranches[tranche] = pointsNeeded;\\r\\n        emit TrancheUpdated(msg.sender, tranche, pointsNeeded);\\r\\n    }\\r\\n    \\r\\n    // Tranches - Set all 10 discount tranches\\r\\n    function setAll10DiscountTranches(\\r\\n        uint256 _pointsNeeded1, uint256 _pointsNeeded2, uint256 _pointsNeeded3, uint256 _pointsNeeded4, \\r\\n        uint256 _pointsNeeded5, uint256 _pointsNeeded6, uint256 _pointsNeeded7, uint256 _pointsNeeded8, \\r\\n        uint256 _pointsNeeded9\\r\\n    ) external onlyGovernor {\\r\\n        discountTranches[0] = 0;\\r\\n        discountTranches[1] = _pointsNeeded1; // 10%\\r\\n        discountTranches[2] = _pointsNeeded2; // 20%\\r\\n        discountTranches[3] = _pointsNeeded3; // 30%\\r\\n        discountTranches[4] = _pointsNeeded4; // 40%\\r\\n        discountTranches[5] = _pointsNeeded5; // 50%\\r\\n        discountTranches[6] = _pointsNeeded6; // 60%\\r\\n        discountTranches[7] = _pointsNeeded7; // 70%\\r\\n        discountTranches[8] = _pointsNeeded8; // 80%\\r\\n        discountTranches[9] = _pointsNeeded9; // 90%\\r\\n\\r\\n        emit AllTranchesUpdated(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Points - Update the user DFTP balance, Governance-Only\\r\\n    function overrideLoyaltyPoints(address _address, uint256 _points) external override onlyGovernor {\\r\\n        uint256 balance = balanceOf(_address);\\r\\n        if (balance == _points) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _burn(_address, balance);\\r\\n\\r\\n        if (_points > 0) {\\r\\n            _mint(_address, _points);\\r\\n        }\\r\\n        emit PointsUpdated(msg.sender, _address, _points);\\r\\n    }\\r\\n    \\r\\n    // Points - Add points to the _address when the _txSize is greater than txThreshold\\r\\n    // Only callable by governors\\r\\n    function addPoints(address _address, uint256 _txSize, uint256 _points) external onlyGovernor {\\r\\n        if (!_whitelisted[msg.sender]) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        if(_txSize >= viewTxThreshold() && _lastTx[tx.origin] < block.number){\\r\\n            if (_redirection[_address]) {\\r\\n                _mint(tx.origin, _points);\\r\\n            } else {\\r\\n                _mint(_address, _points);\\r\\n            }\\r\\n            _lastTx[tx.origin] = block.number;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Points - Override to force update user discount on every transfer\\r\\n    // Note: minting/burning does not constitute as a transfer, so we must have the update function\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n        ERC20._transfer(sender, recipient, amount);\\r\\n\\r\\n        // force update discount if not governance\\r\\n        if (IDeFiatGov(governance).viewActorLevelOf(sender) == 0) {\\r\\n            uint256 tranche = viewEligibilityOf(sender);\\r\\n            _discounts[sender] = tranche * 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n     // Gov - Set whitelist address\\r\\n    function setWhitelisted(address _address, bool _whitelist) external override onlyGovernor {\\r\\n        require(_whitelisted[_address] != _whitelist, \\\"SetWhitelisted: No whitelist change\\\");\\r\\n\\r\\n        _whitelisted[_address] = _whitelist;\\r\\n        emit WhitelistedUpdated(msg.sender, _address, _whitelist);\\r\\n    }\\r\\n\\r\\n    // Gov - Set redirection address\\r\\n    function setRedirection(address _address, bool _redirect) external override onlyGovernor {\\r\\n        require(_redirection[_address] != _redirect, \\\"SetRedirection: No redirection change\\\");\\r\\n\\r\\n        _redirection[_address] = _redirect;\\r\\n        emit RedirectionUpdated(msg.sender, _address, _redirect);\\r\\n    }\\r\\n\\r\\n    // Gov - Update the DeFiat Token address\\r\\n    function setToken(address _token) external onlyGovernor {\\r\\n        require(_token != token, \\\"SetToken: No token change\\\");\\r\\n\\r\\n        token = _token;\\r\\n        emit TokenUpdated(msg.sender, token);\\r\\n    }\\r\\n} \\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeFiatGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IDeFiatGov {\\r\\n    function mastermind() external view returns (address);\\r\\n    function viewActorLevelOf(address _address) external view returns (uint256);\\r\\n    function viewFeeDestination() external view returns (address);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewBurnRate() external view returns (uint256);\\r\\n    function viewFeeRate() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeFiatPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IDeFiatPoints {\\r\\n    function viewDiscountOf(address _address) external view returns (uint256);\\r\\n    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\\r\\n    function discountPointsNeeded(uint256 _tranche) external view returns (uint256 pointsNeeded);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewWhitelisted(address _address) external view returns (bool);\\r\\n    function viewRedirection(address _address) external view returns (bool);\\r\\n    function setWhitelisted(address _address, bool _whitelist) external;\\r\\n    function setRedirection(address _address, bool _redirect) external;\\r\\n    function overrideLoyaltyPoints(address _address, uint256 _points) external;\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../../utils/Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\n\\r\\n// Standard ERC20\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor (string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/DeFiatGovernedUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./DeFiatUtils.sol\\\";\\r\\nimport \\\"../interfaces/IDeFiatGov.sol\\\";\\r\\n\\r\\nabstract contract DeFiatGovernedUtils is DeFiatUtils {\\r\\n    event GovernanceUpdated(address indexed user, address governance);\\r\\n\\r\\n    address public governance;\\r\\n\\r\\n    modifier onlyMastermind {\\r\\n        require(\\r\\n            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\\r\\n            \\\"Gov: Only Mastermind\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Governors\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPartner {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Partners\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setGovernance(address _governance) internal {\\r\\n        require(_governance != governance, \\\"SetGovernance: No governance change\\\");\\r\\n\\r\\n        governance = _governance;\\r\\n        emit GovernanceUpdated(msg.sender, governance);\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _governance) external onlyGovernor {\\r\\n        _setGovernance(_governance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/DeFiatUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"../lib/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../lib/@openzeppelin/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract DeFiatUtils is Ownable {\\r\\n    event TokenSweep(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\\r\\n    function sweep(address token) external onlyOwner {\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        require(amount > 0, \\\"Sweep: No token balance\\\");\\r\\n\\r\\n        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n\\r\\n        emit TokenSweep(msg.sender, token, amount);\\r\\n    }\\r\\n\\r\\n    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\\r\\n    function kill() external onlyOwner {\\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AllTranchesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"DiscountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"redirect\",\"type\":\"bool\"}],\"name\":\"RedirectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsNeeded\",\"type\":\"uint256\"}],\"name\":\"TrancheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"WhitelistedUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"addPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"}],\"name\":\"discountPointsNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pointsNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discountTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"overrideDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"overrideLoyaltyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pointsNeeded9\",\"type\":\"uint256\"}],\"name\":\"setAll10DiscountTranches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsNeeded\",\"type\":\"uint256\"}],\"name\":\"setDiscountTranches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_redirect\",\"type\":\"bool\"}],\"name\":\"setRedirection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMyDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewDiscountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewEligibilityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewRedirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeFiatPoints","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000efccb112270c3c197b86ff03d26340d82a087f6c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}