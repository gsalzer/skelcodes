{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/app/LIVE/file-storage/contracts/Files.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\r\\npragma solidity 0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\n\\r\\ncontract Files is OwnableUpgradeable {\\r\\n\\r\\n\\r\\n\\t// First Version of File Metadata:\\r\\n\\t// Title: Breaking the Chain\\r\\n\\t// Type: Audio/mp3 - Image/jpg\\r\\n\\t// Album: Living an Impossible Dream. OR [Series]: Runa Motorbike at Night\\r\\n\\t// Copyright: 2020 QMP (GnuPG ID FFE28038)\\r\\n\\t// Website: https://QuantumIndigo.org\\r\\n\\t// IPFS URL: (IPFS URL)\\r\\n\\t// Comment: The world's first decentralised media arts collective.\\r\\n\\t// Blockchain Date: [Date]\\r\\n\\t// SHA256: [sha256_hash]\\r\\n\\r\\n    struct FileOutput {\\r\\n\\t\\tstring separator;\\r\\n\\t\\tstring title;\\r\\n\\t\\tstring media_type;\\r\\n\\t\\tstring album_series;\\r\\n\\t\\tstring copyright;\\r\\n\\t\\tstring website;\\r\\n\\t\\tstring ipfs_hash;\\r\\n\\t\\tstring comment;\\r\\n\\t\\tstring blockchain_date;\\r\\n\\t\\tstring sha_hash;\\r\\n    }\\r\\n\\r\\n    uint256 private size;\\r\\n\\r\\n\\t// Searches will be done nased on IPFS hash and SHA256 Hash.\\r\\n\\r\\n    mapping(uint256 => string) filesIpfsHashIndex;\\r\\n    mapping(string => uint256[]) filesByIpfsHash;\\r\\n\\r\\n\\tmapping(uint256 => string) filesShaHashIndex;\\r\\n    mapping(string => uint256[]) filesByShaHash;\\r\\n\\r\\n  \\r\\n\\tmapping(uint256 => string) filesTitleIndex;\\r\\n\\tmapping(uint256 => string) filesMediaTypeIndex;\\r\\n    mapping(uint256 => string) filesAlbumSeriesIndex;\\r\\n\\tmapping(uint256 => string) filesCopyrightIndex;\\r\\n\\tmapping(uint256 => string) filesWebsiteIndex;\\r\\n\\tmapping(uint256 => string) filesCommentIndex;\\r\\n\\tmapping(uint256 => uint256) filesBlockchainDateIndex;\\r\\n    \\r\\n    function initialize() initializer public {\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    function addFile(string[] memory metadata) public onlyOwner returns (uint256) {\\r\\n\\r\\n        require( metadata.length == 8);\\r\\n\\r\\n\\t\\t// Data is pasted in FileOutput Order. Blockchain date is skipped because it will be added when the block is mined.\\r\\n\\t\\t// 8 Items in total\\r\\n\\r\\n        string memory _title = metadata[0];\\r\\n\\t    string memory _media_type = metadata[1];\\r\\n        string memory _album_series = metadata[2];\\r\\n\\t\\tstring memory _copyright = metadata[3];\\r\\n        string memory _website = metadata[4];\\r\\n\\t    string memory _ipfs_hash = metadata[5];\\r\\n        string memory _comment = metadata[6];\\r\\n\\t\\tstring memory _sha_hash = metadata[7];\\r\\n \\r\\n\\r\\n        filesTitleIndex[size] = _title;\\r\\n        filesMediaTypeIndex[size] = _media_type;\\r\\n        filesAlbumSeriesIndex[size] = _album_series;\\r\\n        filesCopyrightIndex[size] = _copyright;\\r\\n        filesWebsiteIndex[size] = _website;\\r\\n        filesIpfsHashIndex[size] = _ipfs_hash;\\r\\n        filesCommentIndex[size] = _comment;\\r\\n        filesBlockchainDateIndex[size] = block.timestamp;\\r\\n\\t\\tfilesShaHashIndex[size] = _sha_hash;\\r\\n\\r\\n\\r\\n        filesByIpfsHash[_ipfs_hash].push(size);\\r\\n        filesByShaHash[_sha_hash].push(size);\\r\\n\\r\\n        size = size + 1;\\r\\n        return size;\\r\\n    }\\r\\n\\r\\n    function findFilesByIpfsHash(string calldata ipfs_hash) view external returns (FileOutput[] memory) {\\r\\n        return findFilesByKey(1, ipfs_hash);\\r\\n    }\\r\\n\\r\\n    function findFilesByShaHash(string calldata sha_hash) view external returns (FileOutput[] memory) {\\r\\n        return findFilesByKey(2, sha_hash);\\r\\n    }\\r\\n\\r\\n    function findFilesByKey(int key, string memory hash) view internal returns (FileOutput[] memory) {\\r\\n        uint256 len;\\r\\n\\r\\n        if(key == 1){\\r\\n            len = filesByIpfsHash[hash].length;\\r\\n        } else {\\r\\n            len = filesByShaHash[hash].length;\\r\\n        }\\r\\n\\r\\n        string[] memory _title = new string[](len);\\r\\n        string[] memory _media_type = new string[](len);\\r\\n        string[] memory _album_series = new string[](len);\\r\\n        string[] memory _copyright = new string[](len);\\r\\n        string[] memory _website = new string[](len);\\r\\n        string[] memory _ipfs_hash = new string[](len);\\r\\n        string[] memory _comment = new string[](len);\\r\\n        string[] memory _blockchain_date = new string[](len);\\t\\t\\r\\n\\t\\tstring[] memory _sha_hash = new string[](len);\\t\\r\\n\\r\\n        for (uint256 index = 0; index < len; index++){\\r\\n            uint256 id;\\r\\n            if(key == 1){\\r\\n                id = filesByIpfsHash[hash][index];\\r\\n            } else {\\r\\n                id = filesByShaHash[hash][index];\\r\\n            }\\r\\n\\r\\n\\t\\t\\t(uint year, uint month, uint day) = timestampToDate(filesBlockchainDateIndex[id]);\\r\\n\\r\\n            _title[index] = filesTitleIndex[id];\\r\\n            _media_type[index] = filesMediaTypeIndex[id];\\r\\n            _album_series[index] = filesAlbumSeriesIndex[id];\\r\\n            _copyright[index] = filesCopyrightIndex[id];\\r\\n            _website[index] = filesWebsiteIndex[id];\\r\\n            _ipfs_hash[index] = filesIpfsHashIndex[id];\\r\\n            _comment[index] = filesCommentIndex[id];\\r\\n\\t\\t\\t_blockchain_date[index] = concat( StringsUpgradeable.toString(day),  \\\"-\\\",  StringsUpgradeable.toString(month), \\\"-\\\", StringsUpgradeable.toString(year) );\\r\\n\\t\\t\\t_sha_hash[index] = filesShaHashIndex[id];\\t\\r\\n\\r\\n        }\\r\\n\\r\\n        \\r\\n\\t\\tFileOutput[] memory outputs = new FileOutput[](_ipfs_hash.length);\\r\\n\\t\\tfor (uint256 index = 0; index < _ipfs_hash.length; index++) {\\r\\n\\r\\n            FileOutput memory output;\\r\\n            if (keccak256(abi.encodePacked(_media_type[index])) == keccak256(abi.encodePacked(\\\"Audio/mp3\\\"))) {\\r\\n                output = FileOutput(\\r\\n                            \\\"****\\\",\\r\\n                            concat(\\\"Title: \\\", _title[index]),\\r\\n                            concat(\\\"Type: \\\", _media_type[index]),\\r\\n                            concat(\\\"Album: \\\", _album_series[index]),\\r\\n                            concat(\\\"Copyright: \\\", _copyright[index]),\\r\\n                            concat(\\\"Website: \\\", _website[index]),\\r\\n                            concat(\\\"IPFS URL: https://ipfs.io/ipfs/\\\", _ipfs_hash[index]),\\r\\n                            concat(\\\"Comment: \\\", _comment[index]),\\r\\n                            concat(\\\"Blockchain Date: \\\", _blockchain_date[index]),\\r\\n                            concat(\\\"SHA256: \\\", _sha_hash[index])\\r\\n                        );\\r\\n            } else {\\r\\n                output = FileOutput(\\r\\n                            \\\"****\\\",\\r\\n                            concat(\\\"Title: \\\", _title[index]),\\r\\n                            concat(\\\"Type: \\\", _media_type[index]),\\r\\n                            concat(\\\"Series: \\\", _album_series[index]),\\r\\n                            concat(\\\"Copyright: \\\", _copyright[index]),\\r\\n                            concat(\\\"Website: \\\", _website[index]),\\r\\n                            concat(\\\"IPFS URL: https://ipfs.io/ipfs/\\\", _ipfs_hash[index]),\\r\\n                            concat(\\\"Comment: \\\", _comment[index]),\\r\\n                            concat(\\\"Blockchain Date: \\\", _blockchain_date[index]),\\r\\n                            concat(\\\"SHA256: \\\", _sha_hash[index])\\r\\n                        );\\r\\n            }\\r\\n\\r\\n\\t\\t\\toutputs[index] = output;\\r\\n\\t\\t}\\r\\n\\t\\treturn outputs;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction concat(string memory a, string memory b) private pure returns (string memory) {\\r\\n\\t\\treturn string(abi.encodePacked(a, b));\\r\\n\\t}\\r\\n\\r\\n\\tfunction timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / (24 * 60 * 60));\\r\\n    }\\r\\n\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + 2440588;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n\\tfunction concat(string memory a, string memory b, string memory c, string memory d, string memory e) private pure returns (string memory) {\\r\\n\\t\\treturn string(abi.encodePacked(a, b, c, d, e));\\r\\n\\t}\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"metadata\",\"type\":\"string[]\"}],\"name\":\"addFile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"}],\"name\":\"findFilesByIpfsHash\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"separator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"media_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"album_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"copyright\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha_hash\",\"type\":\"string\"}],\"internalType\":\"struct Files.FileOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sha_hash\",\"type\":\"string\"}],\"name\":\"findFilesByShaHash\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"separator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"media_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"album_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"copyright\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha_hash\",\"type\":\"string\"}],\"internalType\":\"struct Files.FileOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Files","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}