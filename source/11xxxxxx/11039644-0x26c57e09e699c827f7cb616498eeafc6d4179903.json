{"status":"1","message":"OK","result":[{"SourceCode":"// File: solidity/contracts/utility/interfaces/IOwned.sol\r\n\r\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ninterface IOwned {\r\n    // this function isn't since the compiler emits automatically generated getter functions as external\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address _newOwner) external;\r\n    function acceptOwnership() external;\r\n}\r\n\r\n// File: solidity/contracts/utility/Owned.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public override owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public override ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() override public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/Utils.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\n// File: solidity/contracts/utility/ContractRegistryClient.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\r\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\r\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n    bytes32 internal constant CHAINLINK_ORACLE_WHITELIST = \"ChainlinkOracleWhitelist\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        _only(_contractName);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _only(bytes32 _contractName) internal view {\r\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      *\r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\r\n\r\n        // get the new contract-registry\r\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = newRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      *\r\n      * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\r\n    */\r\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\r\n        // change the permission to update the contract-registry\r\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n      *\r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n  * @dev ReentrancyGuard\r\n  *\r\n  * The contract provides protection against re-entrancy - calling a function (directly or\r\n  * indirectly) from within itself.\r\n*/\r\ncontract ReentrancyGuard {\r\n    uint256 private constant UNLOCKED = 1;\r\n    uint256 private constant LOCKED = 2;\r\n\r\n    // LOCKED while protected code is being executed, UNLOCKED otherwise\r\n    uint256 private state = UNLOCKED;\r\n\r\n    /**\r\n      * @dev ensures instantiation only by sub-contracts\r\n    */\r\n    constructor() internal {}\r\n\r\n    // protects a function against reentrancy attacks\r\n    modifier protected() {\r\n        _protected();\r\n        state = LOCKED;\r\n        _;\r\n        state = UNLOCKED;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _protected() internal view {\r\n        require(state == UNLOCKED, \"ERR_REENTRANCY\");\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/SafeMath.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n  * @dev Library for basic math operations with overflow/underflow protection\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n      * @dev returns the sum of _x and _y, reverts if the calculation overflows\r\n      *\r\n      * @param _x   value 1\r\n      * @param _y   value 2\r\n      *\r\n      * @return sum\r\n    */\r\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        require(z >= _x, \"ERR_OVERFLOW\");\r\n        return z;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the difference of _x minus _y, reverts if the calculation underflows\r\n      *\r\n      * @param _x   minuend\r\n      * @param _y   subtrahend\r\n      *\r\n      * @return difference\r\n    */\r\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y, \"ERR_UNDERFLOW\");\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\r\n      *\r\n      * @param _x   factor 1\r\n      * @param _y   factor 2\r\n      *\r\n      * @return product\r\n    */\r\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        // gas optimization\r\n        if (_x == 0)\r\n            return 0;\r\n\r\n        uint256 z = _x * _y;\r\n        require(z / _x == _y, \"ERR_OVERFLOW\");\r\n        return z;\r\n    }\r\n\r\n    /**\r\n      * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n      *\r\n      * @param _x   dividend\r\n      * @param _y   divisor\r\n      *\r\n      * @return quotient\r\n    */\r\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_y > 0, \"ERR_DIVIDE_BY_ZERO\");\r\n        uint256 c = _x / _y;\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/Math.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n  * @dev Library for complex math operations\r\n*/\r\nlibrary Math {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n      * @dev returns the largest integer smaller than or equal to the square root of a positive integer\r\n      *\r\n      * @param _num a positive integer\r\n      *\r\n      * @return the largest integer smaller than or equal to the square root of the positive integer\r\n    */\r\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\r\n        uint256 x = _num / 2 + 1;\r\n        uint256 y = (x + _num / x) / 2;\r\n        while (x > y) {\r\n            x = y;\r\n            y = (x + _num / x) / 2;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n      * @dev computes a reduced-scalar ratio\r\n      *\r\n      * @param _n   ratio numerator\r\n      * @param _d   ratio denominator\r\n      * @param _max maximum desired scalar\r\n      *\r\n      * @return ratio's numerator and denominator\r\n    */\r\n    function reducedRatio(uint256 _n, uint256 _d, uint256 _max) internal pure returns (uint256, uint256) {\r\n        if (_n > _max || _d > _max)\r\n            return normalizedRatio(_n, _d, _max);\r\n        return (_n, _d);\r\n    }\r\n\r\n    /**\r\n      * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\r\n    */\r\n    function normalizedRatio(uint256 _a, uint256 _b, uint256 _scale) internal pure returns (uint256, uint256) {\r\n        if (_a == _b)\r\n            return (_scale / 2, _scale / 2);\r\n        if (_a < _b)\r\n            return accurateRatio(_a, _b, _scale);\r\n        (uint256 y, uint256 x) = accurateRatio(_b, _a, _scale);\r\n        return (x, y);\r\n    }\r\n\r\n    /**\r\n      * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a < b\".\r\n    */\r\n    function accurateRatio(uint256 _a, uint256 _b, uint256 _scale) internal pure returns (uint256, uint256) {\r\n        uint256 maxVal = uint256(-1) / _scale;\r\n        if (_a > maxVal) {\r\n            uint256 c = _a / (maxVal + 1) + 1;\r\n            _a /= c;\r\n            _b /= c;\r\n        }\r\n        uint256 x = roundDiv(_a * _scale, _a.add(_b));\r\n        uint256 y = _scale - x;\r\n        return (x, y);\r\n    }\r\n\r\n    /**\r\n      * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\r\n    */\r\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\r\n        return _n / _d + _n % _d / (_d - _d / 2);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the average number of decimal digits in a given list of positive integers\r\n      *\r\n      * @param _values  list of positive integers\r\n      *\r\n      * @return the average number of decimal digits in the given list of positive integers\r\n    */\r\n    function geometricMean(uint256[] memory _values) internal pure returns (uint256) {\r\n        uint256 numOfDigits = 0;\r\n        uint256 length = _values.length;\r\n        for (uint256 i = 0; i < length; i++)\r\n            numOfDigits += decimalLength(_values[i]);\r\n        return uint256(10) ** (roundDivUnsafe(numOfDigits, length) - 1);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the number of decimal digits in a given positive integer\r\n      *\r\n      * @param _x   positive integer\r\n      *\r\n      * @return the number of decimal digits in the given positive integer\r\n    */\r\n    function decimalLength(uint256 _x) internal pure returns (uint256) {\r\n        uint256 y = 0;\r\n        for (uint256 x = _x; x > 0; x /= 10)\r\n            y++;\r\n        return y;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the nearest integer to a given quotient\r\n      * the computation is overflow-safe assuming that the input is sufficiently small\r\n      *\r\n      * @param _n   quotient numerator\r\n      * @param _d   quotient denominator\r\n      *\r\n      * @return the nearest integer to the given quotient\r\n    */\r\n    function roundDivUnsafe(uint256 _n, uint256 _d) internal pure returns (uint256) {\r\n        return (_n + _d / 2) / _d;\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/token/interfaces/IERC20Token.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ninterface IERC20Token {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n}\r\n\r\n// File: solidity/contracts/utility/TokenHandler.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract TokenHandler {\r\n    bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256(\"approve(address,uint256)\"));\r\n    bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\r\n    bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `approve` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _spender approved address\r\n      * @param _value   allowance amount\r\n    */\r\n    function safeApprove(IERC20Token _token, address _spender, uint256 _value) internal {\r\n        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_APPROVE_FAILED');\r\n    }\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `transfer` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _to      target address\r\n      * @param _value   transfer amount\r\n    */\r\n    function safeTransfer(IERC20Token _token, address _to, uint256 _value) internal {\r\n       (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_TRANSFER_FAILED');\r\n    }\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `transferFrom` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _from    source address\r\n      * @param _to      target address\r\n      * @param _value   transfer amount\r\n    */\r\n    function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) internal {\r\n       (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ERR_TRANSFER_FROM_FAILED');\r\n    }\r\n}\r\n\r\n// File: solidity/contracts/utility/Types.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n  * @dev Provides types that can be used by various contracts\r\n*/\r\n\r\nstruct Fraction {\r\n    uint256 n;  // numerator\r\n    uint256 d;  // denominator\r\n}\r\n\r\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/*\r\n    Converter Anchor interface\r\n*/\r\ninterface IConverterAnchor is IOwned {\r\n}\r\n\r\n// File: solidity/contracts/token/interfaces/IDSToken.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/*\r\n    DSToken interface\r\n*/\r\ninterface IDSToken is IConverterAnchor, IERC20Token {\r\n    function issue(address _to, uint256 _amount) external;\r\n    function destroy(address _from, uint256 _amount) external;\r\n}\r\n\r\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionStore.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Liquidity Protection Store interface\r\n*/\r\ninterface ILiquidityProtectionStore is IOwned {\r\n    function addPoolToWhitelist(IConverterAnchor _anchor) external;\r\n    function removePoolFromWhitelist(IConverterAnchor _anchor) external;\r\n    function isPoolWhitelisted(IConverterAnchor _anchor) external view returns (bool);\r\n\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) external;\r\n\r\n    function protectedLiquidity(uint256 _id)\r\n        external\r\n        view\r\n        returns (address, IDSToken, IERC20Token, uint256, uint256, uint256, uint256, uint256);\r\n\r\n    function addProtectedLiquidity(\r\n        address _provider,\r\n        IDSToken _poolToken,\r\n        IERC20Token _reserveToken,\r\n        uint256 _poolAmount,\r\n        uint256 _reserveAmount,\r\n        uint256 _reserveRateN,\r\n        uint256 _reserveRateD,\r\n        uint256 _timestamp\r\n    ) external returns (uint256);\r\n\r\n    function updateProtectedLiquidityAmounts(uint256 _id, uint256 _poolNewAmount, uint256 _reserveNewAmount) external;\r\n    function removeProtectedLiquidity(uint256 _id) external;\r\n    \r\n    function lockedBalance(address _provider, uint256 _index) external view returns (uint256, uint256);\r\n    function lockedBalanceRange(address _provider, uint256 _startIndex, uint256 _endIndex) external view returns (uint256[] memory, uint256[] memory);\r\n\r\n    function addLockedBalance(address _provider, uint256 _reserveAmount, uint256 _expirationTime) external returns (uint256);\r\n    function removeLockedBalance(address _provider, uint256 _index) external;\r\n\r\n    function systemBalance(IERC20Token _poolToken) external view returns (uint256);\r\n    function incSystemBalance(IERC20Token _poolToken, uint256 _poolAmount) external;\r\n    function decSystemBalance(IERC20Token _poolToken, uint256 _poolAmount ) external;\r\n}\r\n\r\n// File: solidity/contracts/utility/interfaces/IWhitelist.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ninterface IWhitelist {\r\n    function isWhitelisted(address _address) external view returns (bool);\r\n}\r\n\r\n// File: solidity/contracts/converter/interfaces/IConverter.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter interface\r\n*/\r\ninterface IConverter is IOwned {\r\n    function converterType() external pure returns (uint16);\r\n    function anchor() external view returns (IConverterAnchor);\r\n    function isActive() external view returns (bool);\r\n\r\n    function targetAmountAndFee(IERC20Token _sourceToken, IERC20Token _targetToken, uint256 _amount) external view returns (uint256, uint256);\r\n    function convert(IERC20Token _sourceToken,\r\n                     IERC20Token _targetToken,\r\n                     uint256 _amount,\r\n                     address _trader,\r\n                     address payable _beneficiary) external payable returns (uint256);\r\n\r\n    function conversionWhitelist() external view returns (IWhitelist);\r\n    function conversionFee() external view returns (uint32);\r\n    function maxConversionFee() external view returns (uint32);\r\n    function reserveBalance(IERC20Token _reserveToken) external view returns (uint256);\r\n    receive() external payable;\r\n\r\n    function transferAnchorOwnership(address _newOwner) external;\r\n    function acceptAnchorOwnership() external;\r\n    function setConversionFee(uint32 _conversionFee) external;\r\n    function setConversionWhitelist(IWhitelist _whitelist) external;\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) external;\r\n    function withdrawETH(address payable _to) external;\r\n    function addReserve(IERC20Token _token, uint32 _ratio) external;\r\n\r\n    // deprecated, backward compatibility\r\n    function token() external view returns (IConverterAnchor);\r\n    function transferTokenOwnership(address _newOwner) external;\r\n    function acceptTokenOwnership() external;\r\n    function connectors(IERC20Token _address) external view returns (uint256, uint32, bool, bool, bool);\r\n    function getConnectorBalance(IERC20Token _connectorToken) external view returns (uint256);\r\n    function connectorTokens(uint256 _index) external view returns (IERC20Token);\r\n    function connectorTokenCount() external view returns (uint16);\r\n}\r\n\r\n// File: solidity/contracts/converter/interfaces/IConverterRegistry.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IConverterRegistry {\r\n    function getAnchorCount() external view returns (uint256);\r\n    function getAnchors() external view returns (address[] memory);\r\n    function getAnchor(uint256 _index) external view returns (IConverterAnchor);\r\n    function isAnchor(address _value) external view returns (bool);\r\n\r\n    function getLiquidityPoolCount() external view returns (uint256);\r\n    function getLiquidityPools() external view returns (address[] memory);\r\n    function getLiquidityPool(uint256 _index) external view returns (IConverterAnchor);\r\n    function isLiquidityPool(address _value) external view returns (bool);\r\n\r\n    function getConvertibleTokenCount() external view returns (uint256);\r\n    function getConvertibleTokens() external view returns (address[] memory);\r\n    function getConvertibleToken(uint256 _index) external view returns (IERC20Token);\r\n    function isConvertibleToken(address _value) external view returns (bool);\r\n\r\n    function getConvertibleTokenAnchorCount(IERC20Token _convertibleToken) external view returns (uint256);\r\n    function getConvertibleTokenAnchors(IERC20Token _convertibleToken) external view returns (address[] memory);\r\n    function getConvertibleTokenAnchor(IERC20Token _convertibleToken, uint256 _index) external view returns (IConverterAnchor);\r\n    function isConvertibleTokenAnchor(IERC20Token _convertibleToken, address _value) external view returns (bool);\r\n}\r\n\r\n// File: solidity/contracts/liquidity-protection/LiquidityProtection.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ILiquidityPoolV1Converter is IConverter {\r\n    function addLiquidity(IERC20Token[] memory _reserveTokens, uint256[] memory _reserveAmounts, uint256 _minReturn) external payable;\r\n    function removeLiquidity(uint256 _amount, IERC20Token[] memory _reserveTokens, uint256[] memory _reserveMinReturnAmounts) external;\r\n    function recentAverageRate(IERC20Token _reserveToken) external view returns (uint256, uint256);\r\n}\r\n\r\n/**\r\n  * @dev Liquidity Protection\r\n*/\r\ncontract LiquidityProtection is TokenHandler, ContractRegistryClient, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Math for *;\r\n\r\n    struct ProtectedLiquidity {\r\n        address provider;           // liquidity provider\r\n        IDSToken poolToken;         // pool token address\r\n        IERC20Token reserveToken;   // reserve token address\r\n        uint256 poolAmount;         // pool token amount\r\n        uint256 reserveAmount;      // reserve token amount\r\n        uint256 reserveRateN;       // rate of 1 protected reserve token in units of the other reserve token (numerator)\r\n        uint256 reserveRateD;       // rate of 1 protected reserve token in units of the other reserve token (denominator)\r\n        uint256 timestamp;          // timestamp\r\n    }\r\n\r\n    IERC20Token internal constant ETH_RESERVE_ADDRESS = IERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint32 internal constant PPM_RESOLUTION = 1000000;\r\n    uint256 internal constant MAX_UINT128 = 0xffffffffffffffffffffffffffffffff;\r\n\r\n    // the address of the whitelist administrator\r\n    address public whitelistAdmin;\r\n\r\n    ILiquidityProtectionStore public immutable store;\r\n    IDSToken public immutable networkToken;\r\n    IDSToken public immutable govToken;\r\n\r\n    // system network token balance limits\r\n    uint256 public maxSystemNetworkTokenAmount = 500000e18;\r\n    uint32 public maxSystemNetworkTokenRatio = 500000; // PPM units\r\n\r\n    // number of seconds until any protection is in effect\r\n    uint256 public minProtectionDelay = 30 days;\r\n\r\n    // number of seconds until full protection is in effect\r\n    uint256 public maxProtectionDelay = 100 days;\r\n\r\n    // minimum amount of network tokens the system can mint as compensation for base token losses, default = 0.01 network tokens\r\n    uint256 public minNetworkCompensation = 1e16;\r\n\r\n    // number of seconds from liquidation to full network token release\r\n    uint256 public lockDuration = 24 hours;\r\n\r\n    // true if the contract is currently adding/removing liquidity from a converter, used for accepting ETH\r\n    bool private updatingLiquidity = false;\r\n\r\n    /**\r\n      * @dev triggered when whitelist admin is updated\r\n      *\r\n      * @param _prevWhitelistAdmin  previous whitelist admin\r\n      * @param _newWhitelistAdmin   new whitelist admin\r\n    */\r\n    event WhitelistAdminUpdated(\r\n        address indexed _prevWhitelistAdmin,\r\n        address indexed _newWhitelistAdmin\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when the system network token balance limits are updated\r\n      *\r\n      * @param _prevMaxSystemNetworkTokenAmount  previous maximum absolute balance in a pool\r\n      * @param _newMaxSystemNetworkTokenAmount   new maximum absolute balance in a pool\r\n      * @param _prevMaxSystemNetworkTokenRatio   previos maximum balance out of the total balance in a pool\r\n      * @param _newMaxSystemNetworkTokenRatio    new maximum balance out of the total balance in a pool\r\n    */\r\n    event SystemNetworkTokenLimitsUpdated(\r\n        uint256 _prevMaxSystemNetworkTokenAmount,\r\n        uint256 _newMaxSystemNetworkTokenAmount,\r\n        uint256 _prevMaxSystemNetworkTokenRatio,\r\n        uint256 _newMaxSystemNetworkTokenRatio\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when the protection delays are updated\r\n      *\r\n      * @param _prevMinProtectionDelay  previous seconds until the protection starts\r\n      * @param _newMinProtectionDelay   new seconds until the protection starts\r\n      * @param _prevMaxProtectionDelay  previos seconds until full protection\r\n      * @param _newMaxProtectionDelay   new seconds until full protection\r\n    */\r\n    event ProtectionDelaysUpdated(\r\n        uint256 _prevMinProtectionDelay,\r\n        uint256 _newMinProtectionDelay,\r\n        uint256 _prevMaxProtectionDelay,\r\n        uint256 _newMaxProtectionDelay\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when the minimum network token compensation is updated\r\n      *\r\n      * @param _prevMinNetworkCompensation  previous minimum network token compensation\r\n      * @param _newMinNetworkCompensation   new minimum network token compensation\r\n    */\r\n    event MinNetworkCompensationUpdated(\r\n        uint256 _prevMinNetworkCompensation,\r\n        uint256 _newMinNetworkCompensation\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when the network token lock duration is updated\r\n      *\r\n      * @param _prevLockDuration  previous network token lock duration, in seconds\r\n      * @param _newLockDuration   new network token lock duration, in seconds\r\n    */\r\n    event LockDurationUpdated(\r\n        uint256 _prevLockDuration,\r\n        uint256 _newLockDuration\r\n    );\r\n\r\n    /**\r\n      * @dev initializes a new LiquidityProtection contract\r\n      *\r\n      * @param _store           liquidity protection store\r\n      * @param _networkToken    network token \r\n      * @param _govToken        governance token\r\n      * @param _registry        contract registry\r\n    */\r\n    constructor(\r\n        ILiquidityProtectionStore _store,\r\n        IDSToken _networkToken,\r\n        IDSToken _govToken,\r\n        IContractRegistry _registry)\r\n        ContractRegistryClient(_registry)\r\n        public\r\n        validAddress(address(_store))\r\n        validAddress(address(_networkToken))\r\n        validAddress(address(_govToken))\r\n        validAddress(address(_registry))\r\n        notThis(address(_store))\r\n        notThis(address(_networkToken))\r\n        notThis(address(_govToken))\r\n        notThis(address(_registry))\r\n    {\r\n        whitelistAdmin = msg.sender;\r\n        store = _store;\r\n        networkToken = _networkToken;\r\n        govToken = _govToken;\r\n    }\r\n\r\n    // ensures that the contract is currently removing liquidity from a converter\r\n    modifier updatingLiquidityOnly() {\r\n        _updatingLiquidityOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _updatingLiquidityOnly() internal view {\r\n        require(updatingLiquidity, \"ERR_NOT_UPDATING_LIQUIDITY\");\r\n    }\r\n\r\n    /**\r\n      * @dev accept ETH\r\n      * used when removing liquidity from ETH converters\r\n    */\r\n    receive() external payable updatingLiquidityOnly() {\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the ownership of the store\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    the new owner of the store\r\n    */\r\n    function transferStoreOwnership(address _newOwner) external ownerOnly {\r\n        store.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n      * @dev accepts the ownership of the store\r\n      * can only be called by the contract owner\r\n    */\r\n    function acceptStoreOwnership() external ownerOnly {\r\n        store.acceptOwnership();\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the ownership of the network token\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    the new owner of the network token\r\n    */\r\n    function transferNetworkTokenOwnership(address _newOwner) external ownerOnly {\r\n        networkToken.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n      * @dev accepts the ownership of the network token\r\n      * can only be called by the contract owner\r\n    */\r\n    function acceptNetworkTokenOwnership() external ownerOnly {\r\n        networkToken.acceptOwnership();\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the ownership of the governance token\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    the new owner of the governance token\r\n    */\r\n    function transferGovTokenOwnership(address _newOwner) external ownerOnly {\r\n        govToken.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n      * @dev accepts the ownership of the governance token\r\n      * can only be called by the contract owner\r\n    */\r\n    function acceptGovTokenOwnership() external ownerOnly {\r\n        govToken.acceptOwnership();\r\n    }\r\n\r\n    /**\r\n      * @dev set the address of the whitelist admin\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _whitelistAdmin  the address of the new whitelist admin\r\n    */\r\n    function setWhitelistAdmin(address _whitelistAdmin)\r\n        external\r\n        ownerOnly\r\n        validAddress(_whitelistAdmin)\r\n    {\r\n        emit WhitelistAdminUpdated(whitelistAdmin, _whitelistAdmin);\r\n\r\n        whitelistAdmin = _whitelistAdmin;\r\n    }\r\n\r\n    /**\r\n      * @dev updates the system network token balance limits\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _maxSystemNetworkTokenAmount  maximum absolute balance in a pool\r\n      * @param _maxSystemNetworkTokenRatio   maximum balance out of the total balance in a pool (in PPM units)\r\n    */\r\n    function setSystemNetworkTokenLimits(uint256 _maxSystemNetworkTokenAmount, uint32 _maxSystemNetworkTokenRatio) external ownerOnly {\r\n        require(_maxSystemNetworkTokenRatio <= PPM_RESOLUTION, \"ERR_INVALID_MAX_RATIO\");\r\n\r\n        emit SystemNetworkTokenLimitsUpdated(maxSystemNetworkTokenAmount, _maxSystemNetworkTokenAmount, maxSystemNetworkTokenRatio,\r\n            _maxSystemNetworkTokenRatio);\r\n\r\n        maxSystemNetworkTokenAmount = _maxSystemNetworkTokenAmount;\r\n        maxSystemNetworkTokenRatio = _maxSystemNetworkTokenRatio;\r\n    }\r\n\r\n    /**\r\n      * @dev updates the protection delays\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _minProtectionDelay  seconds until the protection starts\r\n      * @param _maxProtectionDelay  seconds until full protection\r\n    */\r\n    function setProtectionDelays(uint256 _minProtectionDelay, uint256 _maxProtectionDelay) external ownerOnly {\r\n        require(_minProtectionDelay < _maxProtectionDelay, \"ERR_INVALID_PROTECTION_DELAY\");\r\n\r\n        emit ProtectionDelaysUpdated(minProtectionDelay, _minProtectionDelay, maxProtectionDelay, _maxProtectionDelay);\r\n\r\n        minProtectionDelay = _minProtectionDelay;\r\n        maxProtectionDelay = _maxProtectionDelay;\r\n    }\r\n\r\n    /**\r\n      * @dev updates the minimum network token compensation\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _minCompensation new minimum compensation\r\n    */\r\n    function setMinNetworkCompensation(uint256 _minCompensation) external ownerOnly {\r\n        emit MinNetworkCompensationUpdated(minNetworkCompensation, _minCompensation);\r\n\r\n        minNetworkCompensation = _minCompensation;\r\n    }\r\n\r\n    /**\r\n      * @dev updates the network token lock duration\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _lockDuration    network token lock duration, in seconds\r\n    */\r\n    function setLockDuration(uint256 _lockDuration) external ownerOnly {\r\n        emit LockDurationUpdated(lockDuration, _lockDuration);\r\n\r\n        lockDuration = _lockDuration;\r\n    }\r\n\r\n    /**\r\n      * @dev adds a pool to the whitelist, or removes a pool from the whitelist\r\n      * note that when a pool is whitelisted, it's not possible to remove liquidity anymore\r\n      * removing a pool from the whitelist is an extreme measure in case of a base token compromise etc.\r\n      * can only be called by the whitelist admin\r\n      *\r\n      * @param _poolAnchor  anchor of the pool\r\n      * @param _add         true to add the pool to the whitelist, false to remove it from the whitelist\r\n    */\r\n    function whitelistPool(IConverterAnchor _poolAnchor, bool _add) external {\r\n        require(msg.sender == whitelistAdmin || msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n\r\n        // verify that the pool is supported\r\n        require(isPoolSupported(_poolAnchor), \"ERR_POOL_NOT_SUPPORTED\");\r\n\r\n        // add or remove the pool to/from the whitelist\r\n        if (_add)\r\n            store.addPoolToWhitelist(_poolAnchor);\r\n        else\r\n            store.removePoolFromWhitelist(_poolAnchor);\r\n    }\r\n\r\n    /**\r\n      * @dev checks if protection is supported for the given pool\r\n      * only standard pools are supported (2 reserves, 50%/50% weights)\r\n      * note that the pool should still be whitelisted\r\n      *\r\n      * @param _poolAnchor  anchor of the pool\r\n      * @return true if the pool is supported, false otherwise\r\n    */\r\n    function isPoolSupported(IConverterAnchor _poolAnchor) public view returns (bool) {\r\n        // verify that the pool exists in the registry\r\n        IConverterRegistry converterRegistry = IConverterRegistry(addressOf(CONVERTER_REGISTRY));\r\n        require(converterRegistry.isAnchor(address(_poolAnchor)), \"ERR_INVALID_ANCHOR\");\r\n\r\n        // get the converter\r\n        IConverter converter = IConverter(payable(_poolAnchor.owner()));\r\n\r\n        // verify that the converter has 2 reserves\r\n        if (converter.connectorTokenCount() != 2) {\r\n            return false;\r\n        }\r\n\r\n        // verify that one of the reserves is the network token\r\n        IERC20Token reserve0Token = converter.connectorTokens(0);\r\n        IERC20Token reserve1Token = converter.connectorTokens(1);\r\n        if (reserve0Token != networkToken && reserve1Token != networkToken) {\r\n            return false;\r\n        }\r\n\r\n        // verify that the reserve weights are exactly 50%/50%\r\n        if (converterReserveWeight(converter, reserve0Token) != PPM_RESOLUTION / 2 ||\r\n            converterReserveWeight(converter, reserve1Token) != PPM_RESOLUTION / 2) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @dev adds protection to existing pool tokens\r\n      * also mints new governance tokens for the caller\r\n      *\r\n      * @param _poolAnchor  anchor of the pool\r\n      * @param _amount      amount of pool tokens to protect\r\n    */\r\n    function protectLiquidity(IConverterAnchor _poolAnchor, uint256 _amount)\r\n        external\r\n        protected\r\n        greaterThanZero(_amount)\r\n    {\r\n        // verify that the pool is supported\r\n        require(isPoolSupported(_poolAnchor), \"ERR_POOL_NOT_SUPPORTED\");\r\n        require(store.isPoolWhitelisted(_poolAnchor), \"ERR_POOL_NOT_WHITELISTED\");\r\n\r\n        // get the converter\r\n        IConverter converter = IConverter(payable(_poolAnchor.owner()));\r\n\r\n        // get the reserves tokens\r\n        IERC20Token reserve0Token = converter.connectorTokens(0);\r\n        IERC20Token reserve1Token = converter.connectorTokens(1);\r\n\r\n        // get the pool token rates\r\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\r\n        Fraction memory reserve0Rate = poolTokenRate(poolToken, reserve0Token);\r\n        Fraction memory reserve1Rate = poolTokenRate(poolToken, reserve1Token);\r\n\r\n        // calculate the reserve balances based on the amount provided and the current pool token rate\r\n        uint256 protectedAmount0 = _amount / 2;\r\n        uint256 protectedAmount1 = _amount - protectedAmount0; // account for rounding errors\r\n        uint256 reserve0Amount = protectedAmount0.mul(reserve0Rate.n).div(reserve0Rate.d);\r\n        uint256 reserve1Amount = protectedAmount1.mul(reserve1Rate.n).div(reserve1Rate.d);\r\n\r\n        // add protected liquidity individually for each reserve\r\n        addProtectedLiquidity(msg.sender, poolToken, reserve0Token, protectedAmount0, reserve0Amount);\r\n        addProtectedLiquidity(msg.sender, poolToken, reserve1Token, protectedAmount1, reserve1Amount);\r\n\r\n        // mint governance tokens to the caller\r\n        if (reserve0Token == networkToken) {\r\n            govToken.issue(msg.sender, reserve0Amount);\r\n        }\r\n        else {\r\n            govToken.issue(msg.sender, reserve1Amount);\r\n        }\r\n\r\n        // transfer the pools tokens from the caller directly to the store\r\n        safeTransferFrom(poolToken, msg.sender, address(store), _amount);\r\n    }\r\n\r\n    /**\r\n      * @dev cancels the protection and returns the pool tokens to the caller\r\n      * also burns governance tokens from the caller\r\n      * must be called with the indices of both the base token and the network token protections\r\n      *\r\n      * @param _id1 id in the caller's list of protected liquidity\r\n      * @param _id2 matching id in the caller's list of protected liquidity\r\n    */\r\n    function unprotectLiquidity(uint256 _id1, uint256 _id2) external protected {\r\n        require(_id1 != _id2, \"ERR_SAME_ID\");\r\n\r\n        ProtectedLiquidity memory liquidity1 = protectedLiquidity(_id1);\r\n        ProtectedLiquidity memory liquidity2 = protectedLiquidity(_id2);\r\n\r\n        // verify input & permissions\r\n        require(liquidity1.provider == msg.sender && liquidity2.provider == msg.sender, \"ERR_ACCESS_DENIED\");\r\n\r\n        // verify that the two protections were added together (using `protect`)\r\n        require(\r\n            liquidity1.poolToken == liquidity2.poolToken &&\r\n            liquidity1.reserveToken != liquidity2.reserveToken &&\r\n            (liquidity1.reserveToken == networkToken || liquidity2.reserveToken == networkToken) &&\r\n            liquidity1.timestamp == liquidity2.timestamp &&\r\n            liquidity1.poolAmount <= liquidity2.poolAmount.add(1) &&\r\n            liquidity2.poolAmount <= liquidity1.poolAmount.add(1),\r\n            \"ERR_PROTECTIONS_MISMATCH\");\r\n\r\n        // burn the governance tokens from the caller\r\n        govToken.destroy(msg.sender, liquidity1.reserveToken == networkToken ? liquidity1.reserveAmount : liquidity2.reserveAmount);\r\n\r\n        // remove the protected liquidities from the store\r\n        store.removeProtectedLiquidity(_id1);\r\n        store.removeProtectedLiquidity(_id2);\r\n\r\n        // transfer the pool tokens back to the caller\r\n        store.withdrawTokens(liquidity1.poolToken, msg.sender, liquidity1.poolAmount.add(liquidity2.poolAmount));\r\n    }\r\n\r\n    /**\r\n      * @dev adds protected liquidity to a pool\r\n      * also mints new governance tokens for the caller if the caller adds network tokens\r\n      *\r\n      * @param _poolAnchor      anchor of the pool\r\n      * @param _reserveToken    reserve token to add to the pool\r\n      * @param _amount          amount of tokens to add to the pool\r\n      * @return new protected liquidity id\r\n    */\r\n    function addLiquidity(IConverterAnchor _poolAnchor, IERC20Token _reserveToken, uint256 _amount)\r\n        external\r\n        payable\r\n        protected\r\n        greaterThanZero(_amount)\r\n        returns (uint256)\r\n    {\r\n        // verify that the pool is supported & whitelisted\r\n        require(isPoolSupported(_poolAnchor), \"ERR_POOL_NOT_SUPPORTED\");\r\n        require(store.isPoolWhitelisted(_poolAnchor), \"ERR_POOL_NOT_WHITELISTED\");\r\n\r\n        if (_reserveToken == networkToken) {\r\n            require(msg.value == 0, \"ERR_ETH_AMOUNT_MISMATCH\");    \r\n            return addNetworkTokenLiquidity(_poolAnchor, _amount);\r\n        }\r\n\r\n        // verify that ETH was passed with the call if needed\r\n        uint256 val = _reserveToken == ETH_RESERVE_ADDRESS ? _amount : 0;\r\n        require(msg.value == val, \"ERR_ETH_AMOUNT_MISMATCH\");\r\n        return addBaseTokenLiquidity(_poolAnchor, _reserveToken, _amount);\r\n    }\r\n\r\n    /**\r\n      * @dev adds protected network token liquidity to a pool\r\n      * also mints new governance tokens for the caller\r\n      *\r\n      * @param _poolAnchor  anchor of the pool\r\n      * @param _amount      amount of tokens to add to the pool\r\n      * @return new protected liquidity id\r\n    */\r\n    function addNetworkTokenLiquidity(IConverterAnchor _poolAnchor, uint256 _amount) internal returns (uint256) {\r\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\r\n\r\n        // get the rate between the pool token and the reserve\r\n        Fraction memory tokenRate = poolTokenRate(poolToken, networkToken);\r\n\r\n        // calculate the amount of pool tokens based on the amount of reserve tokens\r\n        uint256 poolTokenAmount = _amount.mul(tokenRate.d).div(tokenRate.n);\r\n\r\n        // remove the pool tokens from the system's ownership (will revert if not enough tokens are available)\r\n        store.decSystemBalance(poolToken, poolTokenAmount);\r\n\r\n        // add protected liquidity for the caller\r\n        uint256 id = addProtectedLiquidity(msg.sender, poolToken, networkToken, poolTokenAmount, _amount);\r\n        \r\n        // burns the network tokens from the caller\r\n        networkToken.destroy(msg.sender, _amount);\r\n\r\n        // mint governance tokens to the caller\r\n        govToken.issue(msg.sender, _amount);\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n      * @dev adds protected base token liquidity to a pool\r\n      *\r\n      * @param _poolAnchor  anchor of the pool\r\n      * @param _baseToken   the base reserve token of the pool\r\n      * @param _amount      amount of tokens to add to the pool\r\n      * @return new protected liquidity id\r\n    */\r\n    function addBaseTokenLiquidity(IConverterAnchor _poolAnchor, IERC20Token _baseToken, uint256 _amount) internal returns (uint256) {\r\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\r\n\r\n        // get the reserve balances\r\n        ILiquidityPoolV1Converter converter = ILiquidityPoolV1Converter(payable(_poolAnchor.owner()));\r\n        uint256 reserveBalanceBase = converter.getConnectorBalance(_baseToken);\r\n        uint256 reserveBalanceNetwork = converter.getConnectorBalance(networkToken);\r\n\r\n        // calculate and mint the required amount of network tokens for adding liquidity\r\n        uint256 networkLiquidityAmount = _amount.mul(reserveBalanceNetwork).div(reserveBalanceBase);\r\n\r\n        // verify network token limits\r\n        // note that the amount is divided by 2 since it's not possible to liquidate one reserve only\r\n        Fraction memory poolRate = poolTokenRate(poolToken, networkToken);\r\n        uint256 newSystemBalance = store.systemBalance(poolToken);\r\n        newSystemBalance = (newSystemBalance.mul(poolRate.n).div(poolRate.d) / 2).add(networkLiquidityAmount);\r\n\r\n        require(newSystemBalance <= maxSystemNetworkTokenAmount, \"ERR_MAX_AMOUNT_REACHED\");\r\n        require(newSystemBalance.mul(PPM_RESOLUTION) <= newSystemBalance.add(reserveBalanceNetwork).mul(maxSystemNetworkTokenRatio), \"ERR_MAX_RATIO_REACHED\");\r\n\r\n        // issue new network tokens to the system\r\n        networkToken.issue(address(this), networkLiquidityAmount);\r\n\r\n        // transfer the base tokens from the caller and approve the converter\r\n        networkToken.approve(address(converter), networkLiquidityAmount);\r\n        if (_baseToken != ETH_RESERVE_ADDRESS) {\r\n            safeTransferFrom(_baseToken, msg.sender, address(this), _amount);\r\n            _baseToken.approve(address(converter), _amount);\r\n        }\r\n\r\n        // add liquidity\r\n        addLiquidity(converter, _baseToken, networkToken, _amount, networkLiquidityAmount, msg.value);\r\n\r\n        // transfer the new pool tokens to the store\r\n        uint256 poolTokenAmount = poolToken.balanceOf(address(this));\r\n        safeTransfer(poolToken, address(store), poolTokenAmount);\r\n\r\n        // the system splits the pool tokens with the caller\r\n        // increase the system's pool token balance and add protected liquidity for the caller\r\n        store.incSystemBalance(poolToken, poolTokenAmount - poolTokenAmount / 2); // account for rounding errors\r\n        return addProtectedLiquidity(msg.sender, poolToken, _baseToken, poolTokenAmount / 2, _amount);\r\n    }\r\n\r\n    /**\r\n      * @dev transfers protected liquidity to a new provider\r\n      *\r\n      * @param _id          protected liquidity id\r\n      * @param _newProvider new provider\r\n      * @return new protected liquidity id\r\n    */\r\n    function transferLiquidity(uint256 _id, address _newProvider)\r\n        external\r\n        protected\r\n        validAddress(_newProvider)\r\n        notThis(_newProvider)\r\n        returns (uint256)\r\n    {\r\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id);\r\n\r\n        // verify input & permissions\r\n        require(liquidity.provider == msg.sender, \"ERR_ACCESS_DENIED\");\r\n        \r\n        // remove the protected liquidity from the current provider\r\n        store.removeProtectedLiquidity(_id);\r\n\r\n        // add the protected liquidity to the new provider\r\n        return store.addProtectedLiquidity(\r\n            _newProvider,\r\n            liquidity.poolToken,\r\n            liquidity.reserveToken,\r\n            liquidity.poolAmount,\r\n            liquidity.reserveAmount,\r\n            liquidity.reserveRateN,\r\n            liquidity.reserveRateD,\r\n            liquidity.timestamp);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the expected/actual amounts the provider will receive for removing liquidity\r\n      * it's also possible to provide the remove liquidity time to get an estimation\r\n      * for the return at that given point\r\n      *\r\n      * @param _id              protected liquidity id\r\n      * @param _portion         portion of liquidity to remove, in PPM\r\n      * @param _removeTimestamp time at which the liquidity is removed\r\n      * @return expected return amount in the reserve token\r\n      * @return actual return amount in the reserve token\r\n      * @return compensation in the network token\r\n    */\r\n    function removeLiquidityReturn(\r\n        uint256 _id,\r\n        uint32 _portion,\r\n        uint256 _removeTimestamp\r\n    ) external view returns (uint256, uint256, uint256)\r\n    {\r\n        // verify input\r\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PERCENT\");\r\n\r\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id);\r\n\r\n        // verify input\r\n        require(liquidity.provider != address(0), \"ERR_INVALID_ID\");\r\n        require(_removeTimestamp >= liquidity.timestamp, \"ERR_INVALID_TIMESTAMP\");\r\n\r\n        // calculate the portion of the liquidity to remove\r\n        if (_portion != PPM_RESOLUTION) {\r\n            liquidity.poolAmount = liquidity.poolAmount.mul(_portion).div(PPM_RESOLUTION);\r\n            liquidity.reserveAmount = liquidity.reserveAmount.mul(_portion).div(PPM_RESOLUTION);\r\n        }\r\n\r\n        Fraction memory addRate = Fraction({ n: liquidity.reserveRateN, d: liquidity.reserveRateD });\r\n        Fraction memory removeRate = reserveTokenRate(liquidity.poolToken, liquidity.reserveToken);\r\n        uint256 targetAmount = removeLiquidityTargetAmount(\r\n            liquidity.poolToken,\r\n            liquidity.reserveToken,\r\n            liquidity.poolAmount,\r\n            liquidity.reserveAmount,\r\n            addRate,\r\n            removeRate,\r\n            liquidity.timestamp,\r\n            _removeTimestamp);\r\n\r\n        // for network token, the return amount is identical to the target amount\r\n        if (liquidity.reserveToken == networkToken) {\r\n            return (targetAmount, targetAmount, 0);\r\n        }\r\n\r\n        // handle base token return\r\n\r\n        // calculate the amount of pool tokens required for liquidation\r\n        // note that the amount is doubled since it's not possible to liquidate one reserve only\r\n        Fraction memory poolRate = poolTokenRate(liquidity.poolToken, liquidity.reserveToken);\r\n        uint256 poolAmount = targetAmount.mul(poolRate.d).mul(2).div(poolRate.n);\r\n\r\n        // limit the amount of pool tokens by the amount the system holds\r\n        uint256 systemBalance = store.systemBalance(liquidity.poolToken);\r\n        poolAmount = poolAmount > systemBalance ? systemBalance : poolAmount;\r\n\r\n        // calculate the base token amount received by liquidating the pool tokens\r\n        // note that the amount is divided by 2 since the pool amount represents both reserves\r\n        uint256 baseAmount = poolAmount.mul(poolRate.n).div(poolRate.d).div(2);\r\n        uint256 networkAmount = 0;\r\n\r\n        // calculate the compensation if still needed\r\n        if (baseAmount < targetAmount) {\r\n            uint256 delta = targetAmount - baseAmount;\r\n\r\n            // calculate the delta in network tokens\r\n            delta = delta.mul(removeRate.n).div(removeRate.d);\r\n\r\n            // the delta might be very small due to precision loss\r\n            // in which case no compensation will take place (gas optimization)\r\n            if (delta >= _minNetworkCompensation()) {\r\n                networkAmount = delta;\r\n            }\r\n        }\r\n\r\n        return (targetAmount, baseAmount, networkAmount);\r\n    }\r\n\r\n    /**\r\n      * @dev removes protected liquidity from a pool\r\n      * also burns governance tokens from the caller if the caller removes network tokens\r\n      *\r\n      * @param _id      id in the caller's list of protected liquidity\r\n      * @param _portion portion of liquidity to remove, in PPM\r\n    */\r\n    function removeLiquidity(uint256 _id, uint32 _portion) external protected {\r\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PERCENT\");\r\n\r\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id);\r\n        Fraction memory addRate = Fraction({ n: liquidity.reserveRateN, d: liquidity.reserveRateD });\r\n\r\n        // verify input & permissions\r\n        require(liquidity.provider == msg.sender, \"ERR_ACCESS_DENIED\");\r\n\r\n        // verify that the pool is whitelisted\r\n        require(store.isPoolWhitelisted(liquidity.poolToken), \"ERR_POOL_NOT_WHITELISTED\");\r\n\r\n        if (_portion == PPM_RESOLUTION) {\r\n            // remove the pool tokens from the provider\r\n            store.removeProtectedLiquidity(_id);\r\n        }\r\n        else {\r\n            // remove portion of the pool tokens from the provider\r\n            uint256 fullPoolAmount = liquidity.poolAmount;\r\n            uint256 fullReserveAmount = liquidity.reserveAmount;\r\n            liquidity.poolAmount = liquidity.poolAmount.mul(_portion).div(PPM_RESOLUTION);\r\n            liquidity.reserveAmount = liquidity.reserveAmount.mul(_portion).div(PPM_RESOLUTION);\r\n\r\n            store.updateProtectedLiquidityAmounts(_id, fullPoolAmount - liquidity.poolAmount, fullReserveAmount - liquidity.reserveAmount);\r\n        }\r\n\r\n        // add the pool tokens to the system\r\n        store.incSystemBalance(liquidity.poolToken, liquidity.poolAmount);\r\n\r\n        // if removing network token liquidity, burn the governance tokens from the caller\r\n        if (liquidity.reserveToken == networkToken) {\r\n            govToken.destroy(msg.sender, liquidity.reserveAmount);\r\n        }\r\n\r\n        // get the current rate between the reserves (recent average)\r\n        ILiquidityPoolV1Converter converter = ILiquidityPoolV1Converter(payable(liquidity.poolToken.owner()));\r\n        Fraction memory currentRate;\r\n        (currentRate.n, currentRate.d) = converter.recentAverageRate(liquidity.reserveToken);\r\n\r\n        // get the target token amount\r\n        uint256 targetAmount = removeLiquidityTargetAmount(\r\n            liquidity.poolToken,\r\n            liquidity.reserveToken,\r\n            liquidity.poolAmount,\r\n            liquidity.reserveAmount,\r\n            addRate,\r\n            currentRate,\r\n            liquidity.timestamp,\r\n            time());\r\n\r\n        // remove network token liquidity\r\n        if (liquidity.reserveToken == networkToken) {\r\n            // mint network tokens for the caller and lock them\r\n            networkToken.issue(address(store), targetAmount);\r\n            lockTokens(msg.sender, targetAmount);\r\n            return;\r\n        }\r\n\r\n        // remove base token liquidity\r\n\r\n        // calculate the amount of pool tokens required for liquidation\r\n        // note that the amount is doubled since it's not possible to liquidate one reserve only\r\n        Fraction memory poolRate = poolTokenRate(liquidity.poolToken, liquidity.reserveToken);\r\n        uint256 poolAmount = targetAmount.mul(poolRate.d).mul(2).div(poolRate.n);\r\n\r\n        // limit the amount of pool tokens by the amount the system holds\r\n        uint256 systemBalance = store.systemBalance(liquidity.poolToken);\r\n        poolAmount = poolAmount > systemBalance ? systemBalance : poolAmount;\r\n\r\n        // withdraw the pool tokens from the store\r\n        store.decSystemBalance(liquidity.poolToken, poolAmount);\r\n        store.withdrawTokens(liquidity.poolToken, address(this), poolAmount);\r\n\r\n        // remove liquidity\r\n        removeLiquidity(converter, poolAmount, liquidity.reserveToken, networkToken);\r\n\r\n        // transfer the base tokens to the caller\r\n        uint256 baseBalance;\r\n        if (liquidity.reserveToken == ETH_RESERVE_ADDRESS) {\r\n            baseBalance = address(this).balance;\r\n            msg.sender.transfer(baseBalance);\r\n        }\r\n        else {\r\n            baseBalance = liquidity.reserveToken.balanceOf(address(this));\r\n            safeTransfer(liquidity.reserveToken, msg.sender, baseBalance);\r\n        }\r\n        \r\n        // compensate the caller with network tokens if still needed\r\n        if (baseBalance < targetAmount) {\r\n            uint256 delta = targetAmount - baseBalance;\r\n\r\n            // calculate the delta in network tokens\r\n            delta = delta.mul(currentRate.n).div(currentRate.d);\r\n\r\n            // the delta might be very small due to precision loss\r\n            // in which case no compensation will take place (gas optimization)\r\n            if (delta >= _minNetworkCompensation()) {\r\n                // check if there's enough network token balance, otherwise mint more\r\n                uint256 networkBalance = networkToken.balanceOf(address(this));\r\n                if (networkBalance < delta) {\r\n                    networkToken.issue(address(this), delta - networkBalance);\r\n                }\r\n\r\n                // lock network tokens for the caller\r\n                safeTransfer(networkToken, address(store), delta);\r\n                lockTokens(msg.sender, delta);\r\n            }\r\n        }\r\n\r\n        // if the contract still holds network token, burn them\r\n        uint256 networkBalance = networkToken.balanceOf(address(this));\r\n        if (networkBalance > 0) {\r\n            networkToken.destroy(address(this), networkBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev returns the amount the provider will receive for removing liquidity\r\n      * it's also possible to provide the remove liquidity rate & time to get an estimation\r\n      * for the return at that given point\r\n      *\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n      * @param _poolAmount      pool token amount when the liquidity was added\r\n      * @param _reserveAmount   reserve token amount that was added\r\n      * @param _addRate         rate of 1 reserve token in the other reserve token units when the liquidity was added\r\n      * @param _removeRate      rate of 1 reserve token in the other reserve token units when the liquidity is removed\r\n      * @param _addTimestamp    time at which the liquidity was added\r\n      * @param _removeTimestamp time at which the liquidity is removed\r\n      * @return amount received for removing liquidity\r\n    */\r\n    function removeLiquidityTargetAmount(\r\n        IDSToken _poolToken,\r\n        IERC20Token _reserveToken,\r\n        uint256 _poolAmount,\r\n        uint256 _reserveAmount,\r\n        Fraction memory _addRate,\r\n        Fraction memory _removeRate,\r\n        uint256 _addTimestamp,\r\n        uint256 _removeTimestamp)\r\n        internal view returns (uint256)\r\n    {\r\n        // get the adjusted amount of pool tokens based on the exposure and rate changes\r\n        uint256 outputAmount = adjustedAmount(_poolToken, _reserveToken, _poolAmount, _addRate, _removeRate);\r\n\r\n        // calculate the protection level\r\n        Fraction memory level = protectionLevel(_addTimestamp, _removeTimestamp);\r\n\r\n        // no protection, return the amount as is\r\n        if (level.n == 0) {\r\n            return outputAmount;\r\n        }\r\n\r\n        // protection is in effect, calculate loss / compensation\r\n        Fraction memory loss = impLoss(_addRate, _removeRate);\r\n        (uint256 compN, uint256 compD) = Math.reducedRatio(loss.n.mul(level.n), loss.d.mul(level.d), MAX_UINT128);\r\n        return outputAmount.add(_reserveAmount.mul(compN).div(compD));\r\n    }\r\n\r\n    /**\r\n      * @dev allows the caller to claim network token balance that is no longer locked\r\n      * note that the function can revert if the range is too large\r\n      *\r\n      * @param _startIndex  start index in the caller's list of locked balances\r\n      * @param _endIndex    end index in the caller's list of locked balances (exclusive)\r\n    */\r\n    function claimBalance(uint256 _startIndex, uint256 _endIndex) external protected {\r\n        // get the locked balances from the store\r\n        (uint256[] memory amounts, uint256[] memory expirationTimes) = store.lockedBalanceRange(\r\n            msg.sender,\r\n            _startIndex,\r\n            _endIndex\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n        uint256 length = amounts.length;\r\n        assert(length == expirationTimes.length);\r\n\r\n        // reverse iteration since we're removing from the list\r\n        for (uint256 i = length; i > 0; i--) {\r\n            uint256 index = i - 1;\r\n            if (expirationTimes[index] > time()) {\r\n                continue;\r\n            }\r\n\r\n            // remove the locked balance item\r\n            store.removeLockedBalance(msg.sender, _startIndex + index);\r\n            totalAmount = totalAmount.add(amounts[index]);\r\n        }\r\n\r\n        if (totalAmount > 0) {\r\n            // transfer the tokens to the caller in a single call\r\n            store.withdrawTokens(networkToken, msg.sender, totalAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev returns the ROI for removing liquidity in the current state after providing liquidity with the given args\r\n      * the function assumes full protection is in effect\r\n      * return value is in PPM and can be larger than PPM_RESOLUTION for positive ROI, 1M = 0% ROI\r\n      *\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n      * @param _reserveAmount   reserve token amount that was added\r\n      * @param _poolRateN       rate of 1 pool token in reserve token units when the liquidity was added (numerator)\r\n      * @param _poolRateD       rate of 1 pool token in reserve token units when the liquidity was added (denominator)\r\n      * @param _reserveRateN    rate of 1 reserve token in the other reserve token units when the liquidity was added (numerator)\r\n      * @param _reserveRateD    rate of 1 reserve token in the other reserve token units when the liquidity was added (denominator)\r\n      * @return ROI in PPM\r\n    */\r\n    function poolROI(\r\n        IDSToken _poolToken,\r\n        IERC20Token _reserveToken,\r\n        uint256 _reserveAmount,\r\n        uint256 _poolRateN,\r\n        uint256 _poolRateD,\r\n        uint256 _reserveRateN,\r\n        uint256 _reserveRateD\r\n    ) external view returns (uint256)\r\n    {\r\n        // calculate the amount of pool tokens based on the amount of reserve tokens\r\n        uint256 poolAmount = _reserveAmount.mul(_poolRateD).div(_poolRateN);\r\n\r\n        // get the add/remove rates\r\n        Fraction memory addRate = Fraction({ n: _reserveRateN, d: _reserveRateD });\r\n        Fraction memory removeRate = reserveTokenRate(_poolToken, _reserveToken);\r\n\r\n        // get the current return\r\n        uint256 protectedReturn = removeLiquidityTargetAmount(\r\n            _poolToken,\r\n            _reserveToken,\r\n            poolAmount,\r\n            _reserveAmount,\r\n            addRate,\r\n            removeRate,\r\n            time().sub(maxProtectionDelay),\r\n            time()\r\n        );\r\n\r\n        // calculate the ROI as the ratio between the current fully protecteda return and the initial amount\r\n        return protectedReturn.mul(PPM_RESOLUTION).div(_reserveAmount);\r\n    }\r\n\r\n    /**\r\n      * @dev adds protected liquidity for the caller to the store\r\n      *\r\n      * @param _provider        protected liquidity provider\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n      * @param _poolAmount      amount of pool tokens to protect\r\n      * @param _reserveAmount   amount of reserve tokens to protect\r\n      * @return new protected liquidity id\r\n    */\r\n    function addProtectedLiquidity(\r\n        address _provider,\r\n        IDSToken _poolToken,\r\n        IERC20Token _reserveToken,\r\n        uint256 _poolAmount,\r\n        uint256 _reserveAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        Fraction memory rate = reserveTokenRate(_poolToken, _reserveToken);\r\n        return store.addProtectedLiquidity(_provider, _poolToken, _reserveToken, _poolAmount, _reserveAmount, rate.n, rate.d, time());\r\n    }\r\n\r\n    /**\r\n      * @dev locks network tokens for the provider and emits the tokens locked event\r\n      *\r\n      * @param _provider    tokens provider\r\n      * @param _amount      amount of network tokens\r\n    */\r\n    function lockTokens(address _provider, uint256 _amount) internal {\r\n        uint256 expirationTime = time().add(lockDuration);\r\n        store.addLockedBalance(_provider, _amount, expirationTime);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the rate of 1 pool token in reserve token units\r\n      *\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n    */\r\n    function poolTokenRate(IDSToken _poolToken, IERC20Token _reserveToken) internal view returns (Fraction memory) {\r\n        // get the pool token supply\r\n        uint256 poolTokenSupply = _poolToken.totalSupply();\r\n\r\n        // get the reserve balance\r\n        IConverter converter = IConverter(payable(_poolToken.owner()));\r\n        uint256 reserveBalance = converter.getConnectorBalance(_reserveToken);\r\n\r\n        // for standard pools, 50% of the pool supply value equals the value of each reserve\r\n        return Fraction({ n: reserveBalance.mul(2), d: poolTokenSupply });\r\n    }\r\n\r\n    /**\r\n      * @dev returns the rate of 1 reserve token in the other reserve token units\r\n      *\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n    */\r\n    function reserveTokenRate(IDSToken _poolToken, IERC20Token _reserveToken) internal view returns (Fraction memory) {\r\n        (uint256 n, uint256 d) = ILiquidityPoolV1Converter(payable(_poolToken.owner())).recentAverageRate(_reserveToken);\r\n        return Fraction(n, d);\r\n    }\r\n\r\n    /**\r\n      * @dev utility to add liquidity to a converter\r\n      *\r\n      * @param _converter       converter\r\n      * @param _reserveToken1   reserve token 1\r\n      * @param _reserveToken2   reserve token 2\r\n      * @param _reserveAmount1  reserve amount 1\r\n      * @param _reserveAmount2  reserve amount 2\r\n      * @param _value           ETH amount to add\r\n    */\r\n    function addLiquidity(\r\n        ILiquidityPoolV1Converter _converter,\r\n        IERC20Token _reserveToken1,\r\n        IERC20Token _reserveToken2,\r\n        uint256 _reserveAmount1,\r\n        uint256 _reserveAmount2,\r\n        uint256 _value)\r\n        internal\r\n    {\r\n        IERC20Token[] memory reserveTokens = new IERC20Token[](2);\r\n        uint256[] memory amounts = new uint256[](2);\r\n        reserveTokens[0] = _reserveToken1;\r\n        reserveTokens[1] = _reserveToken2;\r\n        amounts[0] = _reserveAmount1;\r\n        amounts[1] = _reserveAmount2;\r\n\r\n        // ensure that the contract can receive ETH\r\n        updatingLiquidity = true;\r\n        _converter.addLiquidity{value: _value}(reserveTokens, amounts, 1);\r\n        updatingLiquidity = false;\r\n    }\r\n\r\n    /**\r\n      * @dev utility to remove liquidity from a converter\r\n      *\r\n      * @param _converter       converter\r\n      * @param _poolAmount      amount of pool tokens to remove\r\n      * @param _reserveToken1   reserve token 1\r\n      * @param _reserveToken2   reserve token 2\r\n    */\r\n    function removeLiquidity(\r\n        ILiquidityPoolV1Converter _converter,\r\n        uint256 _poolAmount,\r\n        IERC20Token _reserveToken1,\r\n        IERC20Token _reserveToken2)\r\n        internal\r\n    {\r\n        IERC20Token[] memory reserveTokens = new IERC20Token[](2);\r\n        uint256[] memory minReturns = new uint256[](2);\r\n        reserveTokens[0] = _reserveToken1;\r\n        reserveTokens[1] = _reserveToken2;\r\n        minReturns[0] = 1;\r\n        minReturns[1] = 1;\r\n\r\n        // ensure that the contract can receive ETH\r\n        updatingLiquidity = true;\r\n        _converter.removeLiquidity(_poolAmount, reserveTokens, minReturns);\r\n        updatingLiquidity = false;\r\n    }\r\n\r\n    /**\r\n      * @dev returns a protected liquidity from the store\r\n      *\r\n      * @param _id  protected liquidity id\r\n      * @return protected liquidity\r\n    */\r\n    function protectedLiquidity(uint256 _id) internal view returns (ProtectedLiquidity memory) {\r\n        ProtectedLiquidity memory liquidity;\r\n        (\r\n            liquidity.provider,\r\n            liquidity.poolToken,\r\n            liquidity.reserveToken,\r\n            liquidity.poolAmount,\r\n            liquidity.reserveAmount,\r\n            liquidity.reserveRateN,\r\n            liquidity.reserveRateD,\r\n            liquidity.timestamp\r\n        ) = store.protectedLiquidity(_id);\r\n\r\n        return liquidity;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the adjusted amount of pool tokens based on the exposure and rate changes\r\n      *\r\n      * @param _poolToken       pool token\r\n      * @param _reserveToken    reserve token\r\n      * @param _poolAmount      pool token amount when the liquidity was added\r\n      * @param _addRate         rate of 1 reserve token in the other reserve token units when the liquidity was added\r\n      * @param _removeRate      rate of 1 reserve token in the other reserve token units when the liquidity is removed\r\n      * @return adjusted amount of pool tokens\r\n    */\r\n    function adjustedAmount(\r\n        IDSToken _poolToken,\r\n        IERC20Token _reserveToken,\r\n        uint256 _poolAmount,\r\n        Fraction memory _addRate,\r\n        Fraction memory _removeRate)\r\n        internal view returns (uint256)\r\n    {\r\n        Fraction memory poolRate = poolTokenRate(_poolToken, _reserveToken);\r\n        Fraction memory poolFactor = poolTokensFactor(_addRate, _removeRate);\r\n\r\n        (uint256 poolRateN, uint256 poolRateD) = Math.reducedRatio(_poolAmount.mul(poolRate.n), poolRate.d, MAX_UINT128);\r\n        (uint256 poolFactorN, uint256 poolFactorD) = Math.reducedRatio(poolFactor.n, poolFactor.d, MAX_UINT128);\r\n\r\n        return poolRateN.mul(poolFactorN).div(poolRateD.mul(poolFactorD));\r\n    }\r\n\r\n    /**\r\n      * @dev returns the impermanent loss incurred due to the change in rates between the reserve tokens\r\n      * the loss is returned in percentages (Fraction)\r\n      *\r\n      * @param _prevRate    previous rate between the reserves\r\n      * @param _newRate     new rate between the reserves\r\n    */\r\n    function impLoss(Fraction memory _prevRate, Fraction memory _newRate) internal pure returns (Fraction memory) {\r\n        uint256 ratioN = _newRate.n.mul(_prevRate.d);\r\n        uint256 ratioD = _newRate.d.mul(_prevRate.n);\r\n\r\n        // no need for SafeMath - can't overflow\r\n        uint256 prod = ratioN * ratioD;\r\n        uint256 root = prod / ratioN == ratioD ? Math.floorSqrt(prod) : Math.floorSqrt(ratioN) * Math.floorSqrt(ratioD);\r\n        uint256 sum = ratioN.add(ratioD);\r\n        return Fraction({ n: sum.sub(root.mul(2)), d: sum });\r\n    }\r\n\r\n    /**\r\n      * @dev returns the factor that should be applied to the amount of pool tokens based\r\n      * on exposure and change in rates between the reserve tokens\r\n      * the factor is returned in percentages (Fraction)\r\n      *\r\n      * @param _prevRate    previous rate between the reserves\r\n      * @param _newRate     new rate between the reserves\r\n    */\r\n    function poolTokensFactor(Fraction memory _prevRate, Fraction memory _newRate) internal pure returns (Fraction memory) {\r\n        uint256 ratioN = _newRate.n.mul(_prevRate.d);\r\n        uint256 ratioD = _newRate.d.mul(_prevRate.n);\r\n        return Fraction({ n: ratioN.mul(2), d: ratioN.add(ratioD) });\r\n    }\r\n\r\n    /**\r\n      * @dev returns the protection level based on the timestamp and protection delays\r\n      * the protection level is returned as a Fraction\r\n      *\r\n      * @param _addTimestamp    time at which the liquidity was added\r\n      * @param _removeTimestamp time at which the liquidity is removed\r\n    */\r\n    function protectionLevel(uint256 _addTimestamp, uint256 _removeTimestamp) internal view returns (Fraction memory) {\r\n        uint256 timeElapsed = _removeTimestamp.sub(_addTimestamp);\r\n        if (timeElapsed < minProtectionDelay) {\r\n            return Fraction({ n: 0, d: 1 });\r\n        }\r\n\r\n        if (timeElapsed >= maxProtectionDelay) {\r\n            return Fraction({ n: 1, d: 1 });\r\n        }\r\n\r\n        return Fraction({ n: timeElapsed, d: maxProtectionDelay });\r\n    }\r\n\r\n    // utility to get the reserve weight (including from older converters that don't support the new converterReserveWeight function)\r\n    function converterReserveWeight(IConverter _converter, IERC20Token _reserveToken) private view returns (uint32) {\r\n        (, uint32 weight,,,) = _converter.connectors(_reserveToken);\r\n        return weight;\r\n    }\r\n\r\n    bytes4 private constant CONVERTER_VERSION_FUNC_SELECTOR = bytes4(keccak256(\"version()\"));\r\n\r\n    // using a static call to identify converter version\r\n    // the function had a different signature in older converters but in the worst case,\r\n    // these converters won't be supported (revert) until they are upgraded\r\n    function converterVersion(IConverter _converter) internal view returns (uint16) {\r\n        bytes memory data = abi.encodeWithSelector(CONVERTER_VERSION_FUNC_SELECTOR);\r\n        (bool success, bytes memory returnData) = address(_converter).staticcall{ gas: 4000 }(data);\r\n\r\n        if (success && returnData.length == 32) {\r\n            return abi.decode(returnData, (uint16));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n      * @dev returns minimum network tokens compensation\r\n      * utility to allow overrides for tests\r\n    */\r\n    function _minNetworkCompensation() internal view virtual returns (uint256) {\r\n        return minNetworkCompensation;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the current time\r\n      * utility to allow overrides for tests\r\n    */\r\n    function time() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILiquidityProtectionStore\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"contract IDSToken\",\"name\":\"_networkToken\",\"type\":\"address\"},{\"internalType\":\"contract IDSToken\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevLockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLockDuration\",\"type\":\"uint256\"}],\"name\":\"LockDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevMinNetworkCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinNetworkCompensation\",\"type\":\"uint256\"}],\"name\":\"MinNetworkCompensationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevMinProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevMaxProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxProtectionDelay\",\"type\":\"uint256\"}],\"name\":\"ProtectionDelaysUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevMaxSystemNetworkTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxSystemNetworkTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevMaxSystemNetworkTokenRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxSystemNetworkTokenRatio\",\"type\":\"uint256\"}],\"name\":\"SystemNetworkTokenLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevWhitelistAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWhitelistAdmin\",\"type\":\"address\"}],\"name\":\"WhitelistAdminUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptNetworkTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptStoreOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract IDSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"}],\"name\":\"isPoolSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProtectionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSystemNetworkTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSystemNetworkTokenRatio\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNetworkCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProtectionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkToken\",\"outputs\":[{\"internalType\":\"contract IDSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDSToken\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolRateN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolRateD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveRateN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveRateD\",\"type\":\"uint256\"}],\"name\":\"poolROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"protectLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_portion\",\"type\":\"uint32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_portion\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_removeTimestamp\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCompensation\",\"type\":\"uint256\"}],\"name\":\"setMinNetworkCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProtectionDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxProtectionDelay\",\"type\":\"uint256\"}],\"name\":\"setProtectionDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSystemNetworkTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxSystemNetworkTokenRatio\",\"type\":\"uint32\"}],\"name\":\"setSystemNetworkTokenLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAdmin\",\"type\":\"address\"}],\"name\":\"setWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtectionStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferGovTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newProvider\",\"type\":\"address\"}],\"name\":\"transferLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferNetworkTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferStoreOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id2\",\"type\":\"uint256\"}],\"name\":\"unprotectLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"whitelistPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LiquidityProtection","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5fab5dbd2f3bf675de4cb76517d4767013cfb550000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c00000000000000000000000048fb253446873234f2febbf9bdeaa72d9d387f9400000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://46cc52534598c46464c876646e07ba593033efb299df859e503a69917e666b3c"}]}