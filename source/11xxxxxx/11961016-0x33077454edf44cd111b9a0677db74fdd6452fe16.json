{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n * \r\n * @dev Default OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Expire Traker\r\n * @dev Keeps track of expired NFTs.\r\n**/\r\ncontract ExpireTracker {\r\n    \r\n    using SafeMath for uint64;\r\n    using SafeMath for uint256;\r\n\r\n    // 1 week for each step.\r\n    uint64 public constant BUCKET_STEP = 3 days;\r\n\r\n    // indicates where to start from \r\n    // points where TokenInfo with (expiredAt / BUCKET_STEP) == index\r\n    mapping(uint64 => Bucket) public checkPoints;\r\n\r\n    struct Bucket {\r\n        uint96 head;\r\n        uint96 tail;\r\n    }\r\n\r\n    // points first active nft\r\n    uint96 public head;\r\n    // points last active nft\r\n    uint96 public tail;\r\n\r\n    // maps expireId to deposit info\r\n    mapping(uint96 => ExpireMetadata) public infos; \r\n    \r\n    // pack data to reduce gas\r\n    struct ExpireMetadata {\r\n        uint96 next; // zero if there is no further information\r\n        uint96 prev;\r\n        uint64 expiresAt;\r\n    }\r\n\r\n    function expired() internal view returns(bool) {\r\n        if(infos[head].expiresAt == 0) {\r\n            return false;\r\n        }\r\n\r\n        if(infos[head].expiresAt <= uint64(now)){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // using typecasted expireId to save gas\r\n    function push(uint96 expireId, uint64 expiresAt) \r\n      internal \r\n    {\r\n        require(expireId != 0, \"info id 0 cannot be supported\");\r\n        uint64 bucket = uint64( (expiresAt.div(BUCKET_STEP)).mul(BUCKET_STEP) );\r\n        if (head == 0) {\r\n            // all the nfts are expired. so just add\r\n            head = expireId;\r\n            tail = expireId; \r\n            checkPoints[bucket] = Bucket(expireId, expireId);\r\n            infos[expireId] = ExpireMetadata(0,0,expiresAt);\r\n            \r\n            return;\r\n        }\r\n            \r\n        // there is active nft. we need to find where to push\r\n        // first check if this expires faster than head\r\n        if (infos[head].expiresAt >= expiresAt) {\r\n            // pushing nft is going to expire first\r\n            // update head\r\n            infos[expireId] = ExpireMetadata(head,0,expiresAt);\r\n            infos[head].prev = expireId;\r\n            head = expireId;\r\n            \r\n            // update head of bucket\r\n            Bucket storage b = checkPoints[bucket];\r\n            b.head = expireId;\r\n                \r\n            if(b.tail == 0) {\r\n                // if tail is zero, this bucket was empty should fill tail with expireId\r\n                b.tail = expireId;\r\n            }\r\n                \r\n            // this case can end now\r\n            return;\r\n        }\r\n          \r\n        // then check if depositing nft will last more than latest\r\n        if (infos[tail].expiresAt <= expiresAt) {\r\n            // push nft at tail\r\n            infos[expireId] = ExpireMetadata(0,tail,expiresAt);\r\n            infos[tail].next = expireId;\r\n            tail = expireId;\r\n            \r\n            // update tail of bucket\r\n            Bucket storage b = checkPoints[bucket];\r\n            b.tail = expireId;\r\n            \r\n            if(b.head == 0){\r\n              // if head is zero, this bucket was empty should fill head with expireId\r\n              b.head = expireId;\r\n            }\r\n            \r\n            // this case is done now\r\n            return;\r\n        }\r\n          \r\n        // so our nft is somewhere in between\r\n        if (checkPoints[bucket].head != 0) {\r\n            //bucket is not empty\r\n            //we just need to find our neighbor in the bucket\r\n            uint96 cursor = checkPoints[bucket].head;\r\n        \r\n            // iterate until we find our nft's next\r\n            while(infos[cursor].expiresAt < expiresAt){\r\n                cursor = infos[cursor].next;\r\n            }\r\n        \r\n            infos[expireId] = ExpireMetadata(cursor, infos[cursor].prev, expiresAt);\r\n            infos[infos[cursor].prev].next = expireId;\r\n            infos[cursor].prev = expireId;\r\n        \r\n            //now update bucket's head/tail data\r\n            Bucket storage b = checkPoints[bucket];\r\n            \r\n            if (infos[b.head].prev == expireId){\r\n                b.head = expireId;\r\n            }\r\n            \r\n            if (infos[b.tail].next == expireId){\r\n                b.tail = expireId;\r\n            }\r\n        } else {\r\n            //bucket is empty\r\n            //should find which bucket has depositing nft's closest neighbor\r\n            // step 1 find prev bucket\r\n            uint64 prevCursor = bucket - BUCKET_STEP;\r\n            \r\n            while(checkPoints[prevCursor].tail == 0){\r\n              prevCursor = uint64( prevCursor.sub(BUCKET_STEP) );\r\n            }\r\n    \r\n            uint96 prev = checkPoints[prevCursor].tail;\r\n            uint96 next = infos[prev].next;\r\n    \r\n            // step 2 link prev buckets tail - nft - next buckets head\r\n            infos[expireId] = ExpireMetadata(next,prev,expiresAt);\r\n            infos[prev].next = expireId;\r\n            infos[next].prev = expireId;\r\n    \r\n            checkPoints[bucket].head = expireId;\r\n            checkPoints[bucket].tail = expireId;\r\n        }\r\n    }\r\n\r\n    function pop(uint96 expireId) internal {\r\n        uint64 expiresAt = infos[expireId].expiresAt;\r\n        uint64 bucket = uint64( (expiresAt.div(BUCKET_STEP)).mul(BUCKET_STEP) );\r\n        // check if bucket is empty\r\n        // if bucket is empty, end\r\n        if(checkPoints[bucket].head == 0){\r\n            return;\r\n        }\r\n        // if bucket is not empty, iterate through\r\n        // if expiresAt of current cursor is larger than expiresAt of parameter, reverts\r\n        for(uint96 cursor = checkPoints[bucket].head; infos[cursor].expiresAt <= expiresAt; cursor = infos[cursor].next) {\r\n            ExpireMetadata memory info = infos[cursor];\r\n            // if expiresAt is same of paramter, check if expireId is same\r\n            if(info.expiresAt == expiresAt && cursor == expireId) {\r\n                // if yes, delete it\r\n                // if cursor was head, move head to cursor.next\r\n                if(head == cursor) {\r\n                    head = info.next;\r\n                }\r\n                // if cursor was tail, move tail to cursor.prev\r\n                if(tail == cursor) {\r\n                    tail = info.prev;\r\n                }\r\n                // if cursor was head of bucket\r\n                if(checkPoints[bucket].head == cursor){\r\n                    // and cursor.next is still in same bucket, move head to cursor.next\r\n                    if(infos[info.next].expiresAt.div(BUCKET_STEP) == bucket.div(BUCKET_STEP)) {\r\n                        checkPoints[bucket].head == info.next;\r\n                    } else {\r\n                        // delete whole checkpoint if bucket is now empty\r\n                        delete checkPoints[bucket];\r\n                    }\r\n                } else if(checkPoints[bucket].tail == cursor){\r\n                    // since bucket.tail == bucket.haed == cursor case is handled at the above,\r\n                    // we only have to handle bucket.tail == cursor != bucket.head\r\n                    checkPoints[bucket].tail = info.prev;\r\n                }\r\n                // now we handled all tail/head situation, we have to connect prev and next\r\n                infos[info.prev].next = info.next;\r\n                infos[info.next].prev = info.prev;\r\n                // delete info and end\r\n                delete infos[cursor];\r\n                return;\r\n            }\r\n            // if not, continue -> since there can be same expires at with multiple expireId\r\n        }\r\n        revert(\"Info does not exist\");\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\ninterface IArmorMaster {\r\n    function registerModule(bytes32 _key, address _module) external;\r\n    function getModule(bytes32 _key) external view returns(address);\r\n    function keep() external;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * \r\n * @dev Completely default OpenZeppelin.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initializeOwnable() internal {\r\n        require(_owner == address(0), \"already initialized\");\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    function receiveOwnership() public {\r\n        require(msg.sender == _pendingOwner, \"only pending owner can call this function\");\r\n        _transferOwnership(_pendingOwner);\r\n        _pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\nlibrary Bytes32 {\r\n    function toString(bytes32 x) internal pure returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint256 j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint256 j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Each arCore contract is a module to enable simple communication and interoperability. ArmorMaster.sol is master.\r\n**/\r\ncontract ArmorModule {\r\n    IArmorMaster internal _master;\r\n\r\n    using Bytes32 for bytes32;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Ownable(address(_master)).owner(), \"only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier doKeep() {\r\n        _master.keep();\r\n        _;\r\n    }\r\n\r\n    modifier onlyModule(bytes32 _module) {\r\n        string memory message = string(abi.encodePacked(\"only module \", _module.toString(),\" can call this function\"));\r\n        require(msg.sender == getModule(_module), message);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Used when multiple can call.\r\n    **/\r\n    modifier onlyModules(bytes32 _moduleOne, bytes32 _moduleTwo) {\r\n        string memory message = string(abi.encodePacked(\"only module \", _moduleOne.toString(),\" or \", _moduleTwo.toString(),\" can call this function\"));\r\n        require(msg.sender == getModule(_moduleOne) || msg.sender == getModule(_moduleTwo), message);\r\n        _;\r\n    }\r\n\r\n    function initializeModule(address _armorMaster) internal {\r\n        require(address(_master) == address(0), \"already initialized\");\r\n        require(_armorMaster != address(0), \"master cannot be zero address\");\r\n        _master = IArmorMaster(_armorMaster);\r\n    }\r\n\r\n    function changeMaster(address _newMaster) external onlyOwner {\r\n        _master = IArmorMaster(_newMaster);\r\n    }\r\n\r\n    function getModule(bytes32 _key) internal view returns(address) {\r\n        return _master.getModule(_key);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IarNFT is IERC721 {\r\n    function getToken(uint256 _tokenId) external returns (uint256, uint8, uint256, uint16, uint256, address, bytes4, uint256, uint256, uint256);\r\n    function submitClaim(uint256 _tokenId) external;\r\n    function redeemClaim(uint256 _tokenId) external;\r\n}\r\n\r\ninterface IRewardDistributionRecipient {\r\n    function notifyRewardAmount(uint256 reward) payable external;\r\n}\r\n\r\ninterface IRewardManager is IRewardDistributionRecipient {\r\n  function initialize(address _rewardToken, address _stakeManager) external;\r\n  function stake(address _user, uint256 _coverPrice, uint256 _nftId) external;\r\n  function withdraw(address _user, uint256 _coverPrice, uint256 _nftId) external;\r\n  function getReward(address payable _user) external;\r\n}\r\n\r\ninterface IPlanManager {\r\n  // Event to notify frontend of plan update.\r\n  event PlanUpdate(address indexed user, address[] protocols, uint256[] amounts, uint256 endTime);\r\n  function initialize(address _armorManager) external;\r\n  function changePrice(address _scAddress, uint256 _pricePerAmount) external;\r\n  function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts) external;\r\n  function checkCoverage(address _user, address _protocol, uint256 _hacktime, uint256 _amount) external view returns (uint256, bool);\r\n  function coverageLeft(address _protocol) external view returns(uint256);\r\n  function getCurrentPlan(address _user) external view returns(uint128 start, uint128 end);\r\n  function updateExpireTime(address _user, uint256 _expiry) external;\r\n  function planRedeemed(address _user, uint256 _planIndex, address _protocol) external;\r\n  function totalUsedCover(address _scAddress) external view returns (uint256);\r\n}\r\n\r\ninterface IClaimManager {\r\n    function initialize(address _armorMaster) external;\r\n    function transferNft(address _to, uint256 _nftId) external;\r\n    function exchangeWithdrawal(uint256 _amount) external;\r\n}\r\n\r\ninterface IStakeManager {\r\n    function totalStakedAmount(address protocol) external view returns(uint256);\r\n    function protocolAddress(uint64 id) external view returns(address);\r\n    function protocolId(address protocol) external view returns(uint64);\r\n    function initialize(address _armorMaster) external;\r\n    function allowedCover(address _newProtocol, uint256 _newTotalCover) external view returns (bool);\r\n    function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount) external;\r\n}\r\n\r\ninterface IUtilizationFarm is IRewardDistributionRecipient {\r\n  function initialize(address _rewardToken, address _stakeManager) external;\r\n  function stake(address _user, uint256 _coverPrice) external;\r\n  function withdraw(address _user, uint256 _coverPrice) external;\r\n  function getReward(address payable _user) external;\r\n}\r\n\r\n/**\r\n * @dev Encompasses all functions taken by stakers.\r\n**/\r\ncontract StakeManager is ArmorModule, ExpireTracker, IStakeManager {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    bytes4 public constant ETH_SIG = bytes4(0x45544800);\r\n    \r\n    // Whether or not utilization farming is on.\r\n    bool ufOn;\r\n    \r\n    // Amount of time--in seconds--a user must wait to withdraw an NFT.\r\n    uint256 withdrawalDelay;\r\n    \r\n    // Protocols that staking is allowed for. We may not allow all NFTs.\r\n    mapping (address => bool) public allowedProtocol;\r\n    mapping (address => uint64) public override protocolId;\r\n    mapping (uint64 => address) public override protocolAddress;\r\n    uint64 protocolCount;\r\n    \r\n    // The total amount of cover that is currently being staked. scAddress => cover amount\r\n    mapping (address => uint256) public override totalStakedAmount;\r\n    \r\n    // Mapping to keep track of which NFT is owned by whom. NFT ID => owner address.\r\n    mapping (uint256 => address) public nftOwners;\r\n\r\n    // When the NFT can be withdrawn. NFT ID => Unix timestamp.\r\n    mapping (uint256 => uint256) public pendingWithdrawals;\r\n\r\n    // Track if the NFT was submitted, in which case total staked has already been lowered.\r\n    mapping (uint256 => bool) public submitted;\r\n\r\n    // Event launched when an NFT is staked.\r\n    event StakedNFT(address indexed user, address indexed protocol, uint256 nftId, uint256 sumAssured, uint256 secondPrice, uint16 coverPeriod, uint256 timestamp);\r\n\r\n    // Event launched when an NFT expires.\r\n    event RemovedNFT(address indexed user, address indexed protocol, uint256 nftId, uint256 sumAssured, uint256 secondPrice, uint16 coverPeriod, uint256 timestamp);\r\n\r\n    event ExpiredNFT(address indexed user, uint256 nftId, uint256 timestamp);\r\n    \r\n    // Event launched when an NFT expires.\r\n    event WithdrawRequest(address indexed user, uint256 nftId, uint256 timestamp, uint256 withdrawTimestamp);\r\n    \r\n    /**\r\n     * @dev Construct the contract with the yNft contract.\r\n    **/\r\n    function initialize(address _armorMaster)\r\n      public\r\n      override\r\n    {\r\n        initializeModule(_armorMaster);\r\n        // Let's be explicit.\r\n        withdrawalDelay = 7 days;\r\n        ufOn = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Keep function can be called by anyone to remove any NFTs that have expired. Also run when calling many functions.\r\n     *      This is external because the doKeep modifier calls back to ArmorMaster, which then calls back to here (and elsewhere).\r\n    **/\r\n    function keep() external {\r\n        // Restrict each keep to 2 removals max.\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            if (infos[head].expiresAt != 0 && infos[head].expiresAt <= now) _removeExpiredNft(head);\r\n            else return;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev stakeNft allows a user to submit their NFT to the contract and begin getting returns.\r\n     *      This yNft cannot be withdrawn!\r\n     * @param _nftId The ID of the NFT being staked.\r\n    **/\r\n    function stakeNft(uint256 _nftId)\r\n      public\r\n      doKeep\r\n    {\r\n        _stake(_nftId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev stakeNft allows a user to submit their NFT to the contract and begin getting returns.\r\n     * @param _nftIds The ID of the NFT being staked.\r\n    **/\r\n    function batchStakeNft(uint256[] memory _nftIds)\r\n      public\r\n      doKeep\r\n    {\r\n        // Loop through all submitted NFT IDs and stake them.\r\n        for (uint256 i = 0; i < _nftIds.length; i++) {\r\n            _stake(_nftIds[i], msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A user may call to withdraw their NFT. This may have a delay added to it.\r\n     * @param _nftId ID of the NFT to withdraw.\r\n    **/\r\n    function withdrawNft(uint256 _nftId)\r\n      external\r\n      doKeep\r\n    {\r\n        // Check when this NFT is allowed to be withdrawn. If 0, set it.\r\n        uint256 withdrawalTime = pendingWithdrawals[_nftId];\r\n        \r\n        if (withdrawalTime == 0) {\r\n            require(nftOwners[_nftId] == msg.sender, \"Sender does not own this NFT.\");\r\n            \r\n            (/*coverId*/,  uint8 coverStatus, uint256 sumAssured, /*uint16 coverPeriod*/, /*uint256 validUntil*/, address scAddress, \r\n            /*bytes4 coverCurrency*/, /*premiumNXM*/, /*uint256 coverPrice*/, /*claimId*/) = IarNFT( getModule(\"ARNFT\") ).getToken(_nftId);\r\n            \r\n            uint256 totalUsedCover = IPlanManager( getModule(\"PLAN\") ).totalUsedCover(scAddress);\r\n            bool withdrawable = totalUsedCover <= totalStakedAmount[scAddress].sub(sumAssured * 1e18);\r\n            require(coverStatus == 0 && withdrawable, \"May not withdraw NFT if it will bring staked amount below borrowed amount.\");\r\n            \r\n            withdrawalTime = block.timestamp + withdrawalDelay;\r\n            pendingWithdrawals[_nftId] = withdrawalTime;\r\n            _removeNft(_nftId);\r\n            \r\n            emit WithdrawRequest(msg.sender, _nftId, block.timestamp, withdrawalTime);\r\n        } else if (withdrawalTime <= block.timestamp) {\r\n            (/*coverId*/,  uint8 coverStatus, /*uint256 sumAssured*/, /*uint16 coverPeriod*/, /*uint256 validUntil*/, /*address scAddress*/, \r\n            /*bytes4 coverCurrency*/, /*premiumNXM*/, /*uint256 coverPrice*/, /*claimId*/) = IarNFT(getModule(\"ARNFT\")).getToken(_nftId);\r\n            \r\n            require(coverStatus == 0, \"May not withdraw while claim is occurring.\");\r\n            \r\n            address nftOwner = nftOwners[_nftId];\r\n            IClaimManager(getModule(\"CLAIM\")).transferNft(nftOwner, _nftId);\r\n            delete pendingWithdrawals[_nftId];\r\n            delete nftOwners[_nftId];\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Subtract from total staked. Used by ClaimManager in case NFT is submitted.\r\n     * @param _protocol Address of the protocol to subtract from.\r\n     * @param _subtractAmount Amount of staked to subtract.\r\n    **/\r\n    function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount)\r\n      external\r\n      override\r\n      onlyModule(\"CLAIM\")\r\n    {\r\n        totalStakedAmount[_protocol] = totalStakedAmount[_protocol].sub(_subtractAmount);\r\n        submitted[_nftId] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether a new TOTAL cover is allowed.\r\n     * @param _protocol Address of the smart contract protocol being protected.\r\n     * @param _totalBorrowedAmount The new total amount that would be being borrowed.\r\n     * returns Whether or not this new total borrowed amount would be able to be covered.\r\n    **/\r\n    function allowedCover(address _protocol, uint256 _totalBorrowedAmount)\r\n      external\r\n      override\r\n      view\r\n    returns (bool)\r\n    {\r\n        return _totalBorrowedAmount <= totalStakedAmount[_protocol];\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function for staking--this allows us to skip updating stake multiple times during a batch stake.\r\n     * @param _nftId The ID of the NFT being staked. == coverId\r\n     * @param _user The user who is staking the NFT.\r\n    **/\r\n    function _stake(uint256 _nftId, address _user)\r\n      internal\r\n    {\r\n        (/*coverId*/,  uint8 coverStatus, uint256 sumAssured, uint16 coverPeriod, uint256 validUntil, address scAddress, \r\n         bytes4 coverCurrency, /*premiumNXM*/, uint256 coverPrice, /*claimId*/) = IarNFT( getModule(\"ARNFT\") ).getToken(_nftId);\r\n        \r\n        _checkNftValid(validUntil, scAddress, coverCurrency, coverStatus);\r\n        \r\n        // coverPrice must be determined by dividing by length.\r\n        uint256 secondPrice = coverPrice / (uint256(coverPeriod) * 1 days);\r\n\r\n        // Update PlanManager to use the correct price for the protocol.\r\n        // Find price per amount here to update plan manager correctly.\r\n        uint256 pricePerEth = secondPrice / sumAssured;\r\n        \r\n        IPlanManager(getModule(\"PLAN\")).changePrice(scAddress, pricePerEth);\r\n        \r\n        IarNFT(getModule(\"ARNFT\")).transferFrom(_user, getModule(\"CLAIM\"), _nftId);\r\n\r\n        ExpireTracker.push(uint96(_nftId), uint64(validUntil));\r\n        // Save owner of NFT.\r\n        nftOwners[_nftId] = _user;\r\n\r\n        uint256 weiSumAssured = sumAssured * (10 ** 18);\r\n        _addCovers(_user, _nftId, weiSumAssured, secondPrice, scAddress);\r\n        \r\n        // Add to utilization farming.\r\n        if (ufOn) IUtilizationFarm(getModule(\"UFS\")).stake(_user, secondPrice);\r\n        \r\n        emit StakedNFT(_user, scAddress, _nftId, weiSumAssured, secondPrice, coverPeriod, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev removeExpiredNft is called on many different interactions to the system overall.\r\n     * @param _nftId The ID of the expired NFT.\r\n    **/\r\n    function _removeExpiredNft(uint256 _nftId)\r\n      internal\r\n    {\r\n        address user = nftOwners[_nftId];\r\n        _removeNft(_nftId);\r\n        delete nftOwners[_nftId];\r\n        emit ExpiredNFT(user, _nftId, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal main removal functionality.\r\n    **/\r\n    function _removeNft(uint256 _nftId)\r\n      internal\r\n    {\r\n        (/*coverId*/, /*status*/, uint256 sumAssured, uint16 coverPeriod, /*uint256 validuntil*/, address scAddress, \r\n         /*coverCurrency*/, /*premiumNXM*/, uint256 coverPrice, /*claimId*/) = IarNFT(getModule(\"ARNFT\")).getToken(_nftId);\r\n        address user = nftOwners[_nftId];\r\n        require(user != address(0), \"NFT does not belong to this contract.\");\r\n\r\n        ExpireTracker.pop(uint96(_nftId));\r\n\r\n        uint256 weiSumAssured = sumAssured * (10 ** 18);\r\n        uint256 secondPrice = coverPrice / (uint256(coverPeriod) * 1 days);\r\n        _subtractCovers(user, _nftId, weiSumAssured, secondPrice, scAddress);\r\n        \r\n        // Exit from utilization farming.\r\n        if (ufOn) IUtilizationFarm(getModule(\"UFS\")).withdraw(user, secondPrice);\r\n\r\n        emit RemovedNFT(user, scAddress, _nftId, weiSumAssured, secondPrice, coverPeriod, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Add to the cover amount for the user and contract overall.\r\n     * @param _user The user who submitted.\r\n     * @param _nftId ID of the NFT being staked (used for events on RewardManager).\r\n     * @param _coverAmount The amount of cover being added.\r\n     * @param _coverPrice Price paid by the user for the NFT per second.\r\n     * @param _protocol Address of the protocol that is having cover added.\r\n    **/\r\n    function _addCovers(address _user, uint256 _nftId, uint256 _coverAmount, uint256 _coverPrice, address _protocol)\r\n      internal\r\n    {\r\n        IRewardManager(getModule(\"REWARD\")).stake(_user, _coverPrice, _nftId);\r\n        totalStakedAmount[_protocol] = totalStakedAmount[_protocol].add(_coverAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtract from the cover amount for the user and contract overall.\r\n     * @param _user The user who is having the token removed.\r\n     * @param _nftId ID of the NFT being used--must check if it has been submitted.\r\n     * @param _coverAmount The amount of cover being removed.\r\n     * @param _coverPrice Price that the user was paying per second.\r\n     * @param _protocol The protocol that this NFT protected.\r\n    **/\r\n    function _subtractCovers(address _user, uint256 _nftId, uint256 _coverAmount, uint256 _coverPrice, address _protocol)\r\n      internal\r\n    {\r\n        IRewardManager(getModule(\"REWARD\")).withdraw(_user, _coverPrice, _nftId);\r\n        if (!submitted[_nftId]) totalStakedAmount[_protocol] = totalStakedAmount[_protocol].sub(_coverAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check that the NFT should be allowed to be added. We check expiry and claimInProgress.\r\n     * @param _validUntil The expiration time of this NFT.\r\n     * @param _scAddress The smart contract protocol that the NFt is protecting.\r\n     * @param _coverCurrency The currency that this NFT is protected in (must be ETH_SIG).\r\n     * @param _coverStatus status of cover, only accepts Active\r\n    **/\r\n    function _checkNftValid(uint256 _validUntil, address _scAddress, bytes4 _coverCurrency, uint8 _coverStatus)\r\n      internal\r\n      view\r\n    {\r\n        require(_validUntil > now + 20 days, \"NFT is expired or within 20 days of expiry.\");\r\n        require(_coverStatus == 0, \"arNFT claim is already in progress.\");\r\n        require(allowedProtocol[_scAddress], \"Protocol is not allowed to be staked.\");\r\n        require(_coverCurrency == ETH_SIG, \"Only Ether arNFTs may be staked.\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow the owner (DAO soon) to allow or disallow a protocol from being used in Armor.\r\n     * @param _protocol The address of the protocol to allow or disallow.\r\n     * @param _allow Whether to allow or disallow the protocol.\r\n    **/\r\n    function allowProtocol(address _protocol, bool _allow)\r\n      external\r\n      doKeep\r\n      onlyOwner\r\n    {\r\n        if(protocolId[_protocol] == 0){\r\n            protocolId[_protocol] = ++protocolCount;\r\n            protocolAddress[protocolCount] = _protocol;\r\n        }\r\n        allowedProtocol[_protocol] = _allow;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow the owner to change the amount of delay to withdraw an NFT.\r\n     * @param _withdrawalDelay The amount of time--in seconds--to delay an NFT withdrawal.\r\n    **/\r\n    function changeWithdrawalDelay(uint256 _withdrawalDelay)\r\n      external\r\n      doKeep\r\n      onlyOwner\r\n    {\r\n        withdrawalDelay = _withdrawalDelay;\r\n    }\r\n    \r\n    /**\r\n     * @dev Toggle whether utilization farming should be on or off.\r\n    **/\r\n    function toggleUF()\r\n      external\r\n      onlyOwner\r\n    {\r\n        ufOn = !ufOn;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiredNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemovedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTimestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUCKET_STEP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalBorrowedAmount\",\"type\":\"uint256\"}],\"name\":\"allowedCover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedProtocol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"checkPoints\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"head\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"tail\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"next\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"prev\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"expiresAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_armorMaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"protocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractAmount\",\"type\":\"uint256\"}],\"name\":\"subtractTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5963074b4a1f5b034c747cd32690ef8d0c0d94b08c547d2d9a385b3e850cc939"}]}