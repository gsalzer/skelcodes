{"status":"1","message":"OK","result":[{"SourceCode":"// https:opendao.io\r\n\r\n// File: contracts/StockLiquidator.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title INonStandardERC20\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface INonStandardERC20 {\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     */\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n     * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract StockLiquiditator is ERC20, ERC20Detailed {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public cashDecimals;\r\n    uint256 public stockTokenMultiplier;\r\n\r\n    ERC20Detailed public cash;\r\n    ERC20Detailed public stockToken;\r\n\r\n    uint256 public stockToCashRate;\r\n    uint256 public poolToCashRate;\r\n    uint256 public cashValauationCap;\r\n\r\n    string public url;\r\n\r\n    event UrlUpdated(string _url);\r\n    event ValuationCapUpdated(uint256 cashCap);\r\n    event OwnerChanged(address indexed newOwner);\r\n    event PoolRateUpdated(uint256 poolrate);\r\n    event PoolTokensMinted(\r\n        address indexed user,\r\n        uint256 inputCashAmount,\r\n        uint256 mintedPoolAmount\r\n    );\r\n    event PoolTokensBurnt(\r\n        address indexed user,\r\n        uint256 burntPoolAmount,\r\n        uint256 outputStockAmount,\r\n        uint256 outputCashAmount\r\n    );\r\n    event StockTokensRedeemed(\r\n        address indexed user,\r\n        uint256 redeemedStockToken,\r\n        uint256 outputCashAmount\r\n    );\r\n\r\n    function() external {\r\n        //fallback function\r\n    }\r\n\r\n    address payable public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Account not Owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address cashAddress,\r\n        address stockTokenAddress,\r\n        uint256 _stockToCashRate,\r\n        uint256 cashCap,\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory _url\r\n    ) public ERC20Detailed(name, symbol, 18) {\r\n        require(\r\n            msg.sender != address(0),\r\n            \"Zero address cannot be owner/contract deployer\"\r\n        );\r\n        owner = msg.sender;\r\n        require(\r\n            stockTokenAddress != address(0),\r\n            \"stockToken is the zero address\"\r\n        );\r\n        require(cashAddress != address(0), \"cash is the zero address\");\r\n        require(_stockToCashRate != 0, \"Stock to cash rate can't be zero\");\r\n        cash = ERC20Detailed(cashAddress);\r\n        stockToken = ERC20Detailed(stockTokenAddress);\r\n        cashDecimals = cash.decimals();\r\n        stockTokenMultiplier = (10**uint256(stockToken.decimals()));\r\n        stockToCashRate = ((10**cashDecimals).mul(_stockToCashRate)).div(1e18);\r\n        updatePoolRate();\r\n        updateCashValuationCap(cashCap);\r\n        updateURL(_url);\r\n    }\r\n\r\n    function updateURL(string memory _url)\r\n        public\r\n        onlyOwner\r\n        returns (string memory)\r\n    {\r\n        url = _url;\r\n        emit UrlUpdated(_url);\r\n        return url;\r\n    }\r\n\r\n    function updateCashValuationCap(uint256 cashCap)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        cashValauationCap = cashCap;\r\n        emit ValuationCapUpdated(cashCap);\r\n        return cashValauationCap;\r\n    }\r\n\r\n    function changeOwner(address payable newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n\r\n    function stockTokenAddress() public view returns (address) {\r\n        return address(stockToken);\r\n    }\r\n\r\n    function _preValidateData(address beneficiary, uint256 amount)\r\n        internal\r\n        pure\r\n    {\r\n        require(beneficiary != address(0), \"Beneficiary can't be zero address\");\r\n        require(amount != 0, \"amount can't be 0\");\r\n    }\r\n\r\n    function contractCashBalance() public view returns (uint256 cashBalance) {\r\n        return cash.balanceOf(address(this));\r\n    }\r\n\r\n    function contractStockTokenBalance()\r\n        public\r\n        view\r\n        returns (uint256 stockTokenBalance)\r\n    {\r\n        return stockToken.balanceOf(address(this));\r\n    }\r\n\r\n    function stockTokenCashValuation() public view returns (uint256) {\r\n        uint256 cashEquivalent = (\r\n            contractStockTokenBalance().mul(stockToCashRate)\r\n        )\r\n            .div(stockTokenMultiplier);\r\n        return cashEquivalent;\r\n    }\r\n\r\n    function contractCashValuation()\r\n        public\r\n        view\r\n        returns (uint256 cashValauation)\r\n    {\r\n        uint256 cashEquivalent = (\r\n            contractStockTokenBalance().mul(stockToCashRate)\r\n        )\r\n            .div(stockTokenMultiplier);\r\n        return contractCashBalance().add(cashEquivalent);\r\n    }\r\n\r\n    function updatePoolRate() public returns (uint256 poolrate) {\r\n        if (totalSupply() == 0) {\r\n            poolToCashRate = (10**(cashDecimals)).mul(1);\r\n        } else {\r\n            poolToCashRate = (\r\n                (contractCashValuation().mul(1e18)).div(totalSupply())\r\n            );\r\n        }\r\n        emit PoolRateUpdated(poolrate);\r\n        return poolToCashRate;\r\n    }\r\n\r\n    function mintPoolToken(uint256 inputCashAmount) external {\r\n        if (cashValauationCap != 0) {\r\n            require(\r\n                inputCashAmount.add(contractCashValuation()) <=\r\n                    cashValauationCap,\r\n                \"inputCashAmount exceeds cashValauationCap\"\r\n            );\r\n        }\r\n        address sender = msg.sender;\r\n        _preValidateData(sender, inputCashAmount);\r\n        updatePoolRate();\r\n        uint256 actualCashReceived = doTransferIn(\r\n            address(cash),\r\n            sender,\r\n            inputCashAmount\r\n        );\r\n\r\n        // calculate pool token amount to be minted\r\n        uint256 poolTokens = (actualCashReceived.mul(1e18)).div(poolToCashRate);\r\n        _mint(sender, poolTokens); //Minting  Pool Token\r\n        emit PoolTokensMinted(sender, actualCashReceived, poolTokens);\r\n    }\r\n\r\n    function burnPoolToken(uint256 poolTokenAmount) external {\r\n        address sender = msg.sender;\r\n        _preValidateData(sender, poolTokenAmount);\r\n\r\n        updatePoolRate();\r\n        uint256 cashToRedeem = (\r\n            (poolTokenAmount.mul(poolToCashRate)).div(1e18)\r\n        );\r\n        _burn(sender, poolTokenAmount);\r\n\r\n        uint256 outputStockToken = 0;\r\n        uint256 outputCashAmount = 0;\r\n\r\n        if (stockTokenCashValuation() >= cashToRedeem) {\r\n            outputStockToken = (\r\n                (cashToRedeem.mul(stockTokenMultiplier)).div(stockToCashRate)\r\n            ); //calculate stock token amount to be return\r\n            doTransferOut(address(stockToken), sender, outputStockToken);\r\n        } else if (cashToRedeem > stockTokenCashValuation()) {\r\n            outputStockToken = contractStockTokenBalance();\r\n            outputCashAmount = cashToRedeem.sub(stockTokenCashValuation()); // calculate cash amount to be return\r\n            doTransferOut(address(stockToken), sender, outputStockToken);\r\n            doTransferOut(address(cash), sender, outputCashAmount);\r\n        }\r\n        emit PoolTokensBurnt(\r\n            sender,\r\n            poolTokenAmount,\r\n            outputStockToken,\r\n            outputCashAmount\r\n        );\r\n    }\r\n\r\n    function redeemStockToken(uint256 stockTokenAmount) external {\r\n        address sender = msg.sender;\r\n        _preValidateData(sender, stockTokenAmount);\r\n        uint256 actualStockReceived = doTransferIn(\r\n            address(stockToken),\r\n            sender,\r\n            stockTokenAmount\r\n        );\r\n\r\n        // calculate Cash amount to be return\r\n        uint256 outputCashAmount = (actualStockReceived.mul(stockToCashRate))\r\n            .div(stockTokenMultiplier);\r\n        doTransferOut(address(cash), sender, outputCashAmount);\r\n        emit StockTokensRedeemed(sender, actualStockReceived, outputCashAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n     *      This will revert due to insufficient balance or insufficient allowance.\r\n     *      This function returns the actual amount received,\r\n     *      which may be less than `amount` if there is a fee attached to the transfer.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferIn(\r\n        address tokenAddress,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        INonStandardERC20 token = INonStandardERC20(tokenAddress);\r\n        uint256 balanceBefore = IERC20(tokenAddress).balanceOf(address(this));\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set `success = returndata` of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n        // Calculate the amount that was *actually* transferred\r\n        uint256 balanceAfter = IERC20(tokenAddress).balanceOf(address(this));\r\n        require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\r\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n     *      it is >= amount, this should not revert in normal conditions.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferOut(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        INonStandardERC20 token = INonStandardERC20(tokenAddress);\r\n        token.transfer(to, amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a complaint ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set `success = returndata` of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n}\r\n\r\n// File: contracts/DeployFactory.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract DeployFactory {\r\n    event CashBoxAdded(\r\n        address indexed cashBoxAddress,\r\n        address indexed cashBoxOwner,\r\n        address indexed assetTokenAddress,\r\n        address cashTokenAddress,\r\n        string url\r\n    );\r\n\r\n    address[] public cashBoxes;\r\n\r\n    function createCashBox(\r\n        address cashTokenAddress,\r\n        address assetTokenAddress,\r\n        uint256 assetToCashRate,\r\n        uint256 cashCap,\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory url\r\n    ) public returns (address newCashBox) {\r\n        StockLiquiditator cashBox = new StockLiquiditator(\r\n            cashTokenAddress,\r\n            assetTokenAddress,\r\n            assetToCashRate,\r\n            cashCap,\r\n            name,\r\n            symbol,\r\n            url\r\n        );\r\n        cashBox.changeOwner(msg.sender);\r\n\r\n        cashBoxes.push(address(cashBox));\r\n        emit CashBoxAdded(\r\n            address(cashBox),\r\n            msg.sender,\r\n            assetTokenAddress,\r\n            cashTokenAddress,\r\n            url\r\n        );\r\n        return address(cashBox);\r\n    }\r\n\r\n    function getAllCashBoxes() public view returns (address[] memory) {\r\n        return cashBoxes;\r\n    }\r\n\r\n    function getCashBoxesByUser(address account)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 len = cashBoxes.length;\r\n        address[] memory cashBoxesByUser = new address[](len);\r\n        uint256 index = 0;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address payable cashBoxAddress = address(uint160(cashBoxes[i]));\r\n            StockLiquiditator cashbox = StockLiquiditator(cashBoxAddress);\r\n\r\n            if (cashbox.owner() == account) {\r\n                cashBoxesByUser[index] = cashBoxes[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        // to remove zero addresses from the result\r\n        address[] memory result = new address[](index);\r\n        for (uint256 i = 0; i < result.length; i++) {\r\n            result[i] = cashBoxesByUser[i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cashBoxAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cashBoxOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cashTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"CashBoxAdded\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cashBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cashTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetToCashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cashCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"createCashBox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newCashBox\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCashBoxes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCashBoxesByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeployFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://390c0856afbbfbd6752efdf39aef08decf9d3dadd2a2aa3230c74bf3715de75d"}]}