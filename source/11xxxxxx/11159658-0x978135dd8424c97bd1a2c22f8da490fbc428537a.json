{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n\r\ncontract Love_Swap_V2 is DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using address_make_payable for address;\r\n    \r\n    struct MyCustomData {\r\n        address token;\r\n        uint256 repayAmount;\r\n    }\r\n    \r\n    address superMan;\r\n    address cofixRouter = 0x26aaD4D82f6c9FA6E34D8c1067429C986A055872;\r\n    address uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address USDTAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address cofiAddress = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\r\n    address WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address dydxAddress = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    uint256 cofixETHSapn = 300 ether;\r\n    uint256 nestPrice = 0.01 ether;\r\n    \r\n    \r\n    constructor() public {\r\n        superMan = address(msg.sender);\r\n        IERC20(USDTAddress).safeApprove(cofixRouter, 10000000000000000);\r\n        IERC20(USDTAddress).safeApprove(uniRouter, 10000000000000000);\r\n    }\r\n    \r\n    function getCofixRouter() public view returns(address) {\r\n        return cofixRouter;\r\n    }\r\n    \r\n    function getUniRouter() public view returns(address) {\r\n        return uniRouter;\r\n    }\r\n    \r\n    function getNestPrice() public view returns(uint256) {\r\n        return nestPrice;\r\n    }\r\n    \r\n    function getSuperMan() public view returns(address) {\r\n        return superMan;\r\n    }\r\n    \r\n    function getCofixETHSapn() public view returns(uint256) {\r\n        return cofixETHSapn;\r\n    }\r\n    \r\n    function setCofixRouter(address _cofixRouter) public onlyOwner {\r\n        cofixRouter = _cofixRouter;\r\n    }\r\n    \r\n    function setUniRouter(address _uniRouter) public onlyOwner {\r\n        uniRouter = _uniRouter;\r\n    }\r\n    \r\n    function setNestPrice(uint256 _amount) public onlyOwner {\r\n        nestPrice = _amount;\r\n    }\r\n    \r\n    function setSuperMan(address _newMan) public onlyOwner {\r\n        superMan = _newMan;\r\n    }\r\n    \r\n    function setCofixETHSapn(uint256 _amount) public onlyOwner {\r\n        cofixETHSapn = _amount;\r\n    }\r\n    \r\n    //  实现操作\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public {\r\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\r\n        uint256 tokenBalanceBefore = IERC20(mcd.token).balanceOf(address(this));\r\n        // money\r\n        // WETH->ETH\r\n        WETH9(WETHAddress).withdraw(tokenBalanceBefore);\r\n        // ETH->USDT\r\n        uint256 loopTimes = address(this).balance.div(cofixETHSapn);\r\n        for(uint256 i = 0; i < loopTimes; i++) {\r\n            CoFiXRouter(cofixRouter).swapExactETHForTokens{value:cofixETHSapn}(USDTAddress,cofixETHSapn.sub(nestPrice),1,address(this), address(this), uint256(block.timestamp).add(100));\r\n        }\r\n        // USDT->ETH\r\n        uint256 usdtBalance = IERC20(USDTAddress).balanceOf(address(this));\r\n        address[] memory uniData = new address[](2);\r\n        uniData[0] = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        uniData[1] = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        UniswapV2Router(uniRouter).swapExactTokensForETH(usdtBalance,1,uniData,address(this),uint256(block.timestamp).add(100));\r\n        // ETH->WETH\r\n        WETH9(WETHAddress).deposit{value:tokenBalanceBefore.add(2)};\r\n        \r\n        uint256 balOfLoanedToken = IERC20(mcd.token).balanceOf(address(this));\r\n        require(\r\n            balOfLoanedToken >= mcd.repayAmount,\r\n            \"Not enough funds to repay dydx loan!\"\r\n        );\r\n        \r\n    }\r\n    \r\n    function initiateFlashLoan(uint256 _amount)\r\n        external\r\n    {\r\n        ISoloMargin solo = ISoloMargin(dydxAddress);\r\n        uint256 marketId = _getMarketIdFromTokenAddress(dydxAddress, WETHAddress);\r\n        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\r\n        IERC20(WETHAddress).approve(dydxAddress, repayAmount);\r\n\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n        operations[0] = _getWithdrawAction(marketId, _amount);\r\n        operations[1] = _getCallAction(\r\n            abi.encode(MyCustomData({token: WETHAddress, repayAmount: repayAmount}))\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        solo.operate(accountInfos, operations);\r\n    }\r\n    \r\n\r\n    function moreETH() public payable {\r\n        \r\n    }\r\n    \r\n    function turnOutToken(address token, uint256 amount) public onlyOwner{\r\n        IERC20(token).safeTransfer(superMan, amount);\r\n    }\r\n    \r\n    function turnOutETH(uint256 amount) public onlyOwner {\r\n        address payable addr = superMan.make_payable();\r\n        addr.transfer(amount);\r\n    }\r\n    \r\n    function getTokenBalance(address token) public view returns(uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    function getETHBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(address(msg.sender) == superMan, \"No authority\");\r\n        _;\r\n    }\r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n}\r\n\r\ninterface WETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface CoFiXRouter {\r\n    function swapExactETHForTokens(\r\n        address token,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n    function swapExactTokensForETH(\r\n        address token,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n     function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// dydx\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ISoloMargin{\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function getIsGlobalOperator(address operator) public virtual returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        public virtual;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        public\r\n        virtual\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() public view virtual returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        public\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        public\r\n        virtual;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) public\r\n    virtual;\r\n\r\n    function getMarginRatio() public virtual returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) public virtual returns (bool);\r\n\r\n    function getRiskParams() public virtual returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        public\r\n        virtual\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() public virtual;\r\n\r\n    function getMinBorrowedValue() public virtual returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) public virtual;\r\n\r\n    function getMarketPrice(uint256 marketId) public virtual returns (address);\r\n\r\n    function owner() public virtual returns (address);\r\n\r\n    function isOwner() public virtual returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        public\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public\r\n    virtual;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) public\r\n    virtual;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\r\n\r\n    function getLiquidationSpread() public virtual returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) public virtual returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        public\r\n        virtual\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() public virtual returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\r\n\r\n    function getRiskLimits() public virtual returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\r\n\r\n    function transferOwnership(address newOwner) public virtual;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        public\r\n        virtual\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        public\r\n        virtual\r\n        returns (Interest.Rate memory);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCofixETHSapn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCofixRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperMan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initiateFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moreETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCofixETHSapn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cofixRouter\",\"type\":\"address\"}],\"name\":\"setCofixRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMan\",\"type\":\"address\"}],\"name\":\"setSuperMan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"}],\"name\":\"setUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Love_Swap_V2","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://911358d586057f305b7fac8e7e11a75a46cda36f31db4b5439c1b35f163dee77"}]}