{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Whitelist.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n  bool private _notEntered = true;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _notEntered = false;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _notEntered = true;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/marketplace/TokenMarketplaceV2.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ninterface IKODAV2Methods {\r\n  function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n\r\n  function exists(uint256 _tokenId) external view returns (bool _exists);\r\n\r\n  function editionOfTokenId(uint256 _tokenId) external view returns (uint256 tokenId);\r\n\r\n  function artistCommission(uint256 _tokenId) external view returns (address _artistAccount, uint256 _artistCommission);\r\n\r\n  function editionOptionalCommission(uint256 _tokenId) external view returns (uint256 _rate, address _recipient);\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n}\r\n\r\n// Based on ITokenMarketplace.sol\r\ncontract TokenMarketplaceV2 is Whitelist, Pausable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n\r\n  event UpdatePlatformPercentageFee(uint256 _oldPercentage, uint256 _newPercentage);\r\n  event UpdateRoyaltyPercentageFee(uint256 _oldPercentage, uint256 _newPercentage);\r\n  event UpdateMinBidAmount(uint256 minBidAmount);\r\n\r\n  event TokenListed(\r\n    uint256 indexed _tokenId,\r\n    address indexed _seller,\r\n    uint256 _price\r\n  );\r\n\r\n  event TokenDeListed(\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  event TokenPurchased(\r\n    uint256 indexed _tokenId,\r\n    address indexed _buyer,\r\n    address indexed _seller,\r\n    uint256 _price\r\n  );\r\n\r\n  event BidPlaced(\r\n    uint256 indexed _tokenId,\r\n    address indexed _currentOwner,\r\n    address indexed _bidder,\r\n    uint256 _amount\r\n  );\r\n\r\n  event BidWithdrawn(\r\n    uint256 indexed _tokenId,\r\n    address indexed _bidder\r\n  );\r\n\r\n  event BidAccepted(\r\n    uint256 indexed _tokenId,\r\n    address indexed _currentOwner,\r\n    address indexed _bidder,\r\n    uint256 _amount\r\n  );\r\n\r\n  event BidRejected(\r\n    uint256 indexed _tokenId,\r\n    address indexed _currentOwner,\r\n    address indexed _bidder,\r\n    uint256 _amount\r\n  );\r\n\r\n  event AuctionEnabled(\r\n    uint256 indexed _tokenId,\r\n    address indexed _auctioneer\r\n  );\r\n\r\n  event AuctionDisabled(\r\n    uint256 indexed _tokenId,\r\n    address indexed _auctioneer\r\n  );\r\n\r\n  event ListingEnabled(\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  event ListingDisabled(\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  struct Offer {\r\n    address bidder;\r\n    uint256 offer;\r\n  }\r\n\r\n  struct Listing {\r\n    uint256 price;\r\n    address seller;\r\n  }\r\n\r\n  // Min increase in bid/list amount\r\n  uint256 public minBidAmount = 0.04 ether;\r\n\r\n  // Interface into the KODA world\r\n  IKODAV2Methods public kodaAddress;\r\n\r\n  // KO account which can receive commission\r\n  address public koCommissionAccount;\r\n\r\n  uint256 public artistRoyaltyPercentage = 100;\r\n  uint256 public platformFeePercentage = 25;\r\n\r\n  // Token ID to Offer mapping\r\n  mapping(uint256 => Offer) public offers;\r\n\r\n  // Token ID to Listing\r\n  mapping(uint256 => Listing) public listings;\r\n\r\n  // Explicitly disable sales for specific tokens\r\n  mapping(uint256 => bool) public disabledTokens;\r\n\r\n  // Explicitly disable listings for specific tokens\r\n  mapping(uint256 => bool) public disabledListings;\r\n\r\n  ///////////////\r\n  // Modifiers //\r\n  ///////////////\r\n\r\n  modifier onlyWhenOfferOwner(uint256 _tokenId) {\r\n    require(offers[_tokenId].bidder == msg.sender, \"Not offer maker\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenTokenExists(uint256 _tokenId) {\r\n    require(kodaAddress.exists(_tokenId), \"Token does not exist\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenBidOverMinAmount(uint256 _tokenId) {\r\n    require(msg.value >= offers[_tokenId].offer.add(minBidAmount), \"Offer not enough\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenTokenAuctionEnabled(uint256 _tokenId) {\r\n    require(!disabledTokens[_tokenId], \"Token not enabled for offers\");\r\n    _;\r\n  }\r\n\r\n  /////////////////\r\n  // Constructor //\r\n  /////////////////\r\n\r\n  // Set the caller as the default KO account\r\n  constructor(IKODAV2Methods _kodaAddress, address _koCommissionAccount) public {\r\n    kodaAddress = _kodaAddress;\r\n    koCommissionAccount = _koCommissionAccount;\r\n    super.addAddressToWhitelist(msg.sender);\r\n  }\r\n\r\n  //////////////////////////\r\n  // User Bidding Actions //\r\n  //////////////////////////\r\n\r\n  function placeBid(uint256 _tokenId)\r\n  public\r\n  payable\r\n  whenNotPaused\r\n  nonReentrant\r\n  onlyWhenTokenExists(_tokenId)\r\n  onlyWhenBidOverMinAmount(_tokenId)\r\n  onlyWhenTokenAuctionEnabled(_tokenId)\r\n  {\r\n    require(!isContract(msg.sender), \"Unable to place a bid as a contract\");\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    offers[_tokenId] = Offer({bidder : msg.sender, offer : msg.value});\r\n\r\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\r\n\r\n    emit BidPlaced(_tokenId, currentOwner, msg.sender, msg.value);\r\n  }\r\n\r\n  function withdrawBid(uint256 _tokenId)\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  onlyWhenTokenExists(_tokenId)\r\n  onlyWhenOfferOwner(_tokenId)\r\n  {\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    emit BidWithdrawn(_tokenId, msg.sender);\r\n  }\r\n\r\n  function rejectBid(uint256 _tokenId)\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\r\n    require(currentOwner == msg.sender, \"Not token owner\");\r\n\r\n    uint256 currentHighestBiddersAmount = offers[_tokenId].offer;\r\n    require(currentHighestBiddersAmount > 0, \"No offer open\");\r\n\r\n    address currentHighestBidder = offers[_tokenId].bidder;\r\n\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    emit BidRejected(_tokenId, currentOwner, currentHighestBidder, currentHighestBiddersAmount);\r\n  }\r\n\r\n  function acceptBid(uint256 _tokenId, uint256 _acceptedAmount)\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\r\n    require(currentOwner == msg.sender, \"Not token owner\");\r\n\r\n    Offer storage offer = offers[_tokenId];\r\n\r\n    uint256 winningOffer = offer.offer;\r\n\r\n    // Check valid offer and offer not replaced whilst inflight\r\n    require(winningOffer > 0 && _acceptedAmount >= winningOffer, \"Offer amount not satisfied\");\r\n\r\n    address winningBidder = offer.bidder;\r\n\r\n    delete offers[_tokenId];\r\n\r\n    // Get edition no.\r\n    uint256 editionNumber = kodaAddress.editionOfTokenId(_tokenId);\r\n\r\n    _handleFunds(editionNumber, winningOffer, currentOwner);\r\n\r\n    kodaAddress.safeTransferFrom(msg.sender, winningBidder, _tokenId);\r\n\r\n    emit BidAccepted(_tokenId, currentOwner, winningBidder, winningOffer);\r\n  }\r\n\r\n  function _refundHighestBidder(uint256 _tokenId) internal {\r\n    // Get current highest bidder\r\n    address currentHighestBidder = offers[_tokenId].bidder;\r\n\r\n    if (currentHighestBidder != address(0)) {\r\n\r\n      // Get current highest bid amount\r\n      uint256 currentHighestBiddersAmount = offers[_tokenId].offer;\r\n\r\n      if (currentHighestBiddersAmount > 0) {\r\n\r\n        // Clear out highest bidder\r\n        delete offers[_tokenId];\r\n\r\n        // Refund it\r\n        currentHighestBidder.transfer(currentHighestBiddersAmount);\r\n      }\r\n    }\r\n  }\r\n\r\n  //////////////////////////\r\n  // User Listing Actions //\r\n  //////////////////////////\r\n\r\n  function listToken(uint256 _tokenId, uint256 _listingPrice)\r\n  public\r\n  whenNotPaused {\r\n    require(!disabledListings[_tokenId], \"Listing disabled\");\r\n\r\n    // Check ownership before listing\r\n    address tokenOwner = kodaAddress.ownerOf(_tokenId);\r\n    require(tokenOwner == msg.sender, \"Not token owner\");\r\n\r\n    // Check price over min bid\r\n    require(_listingPrice >= minBidAmount, \"Listing price not enough\");\r\n\r\n    // List the token\r\n    listings[_tokenId] = Listing({\r\n    price : _listingPrice,\r\n    seller : msg.sender\r\n    });\r\n\r\n    emit TokenListed(_tokenId, msg.sender, _listingPrice);\r\n  }\r\n\r\n  function delistToken(uint256 _tokenId)\r\n  public\r\n  whenNotPaused {\r\n\r\n    // check listing found\r\n    require(listings[_tokenId].seller != address(0), \"No listing found\");\r\n\r\n    // check owner is msg.sender\r\n    require(kodaAddress.ownerOf(_tokenId) == msg.sender, \"Only the current owner can delist\");\r\n\r\n    _delistToken(_tokenId);\r\n  }\r\n\r\n  function buyToken(uint256 _tokenId)\r\n  public\r\n  payable\r\n  nonReentrant\r\n  whenNotPaused {\r\n    Listing storage listing = listings[_tokenId];\r\n\r\n    // check token is listed\r\n    require(listing.seller != address(0), \"No listing found\");\r\n\r\n    // check current owner is the lister as it may have changed hands\r\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\r\n    require(listing.seller == currentOwner, \"Listing not valid, token owner has changed\");\r\n\r\n    // check listing satisfied\r\n    uint256 listingPrice = listing.price;\r\n    require(msg.value == listingPrice, \"List price not satisfied\");\r\n\r\n    // Get edition no.\r\n    uint256 editionNumber = kodaAddress.editionOfTokenId(_tokenId);\r\n\r\n    // refund any open offers on it\r\n    Offer storage offer = offers[_tokenId];\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    // split funds\r\n    _handleFunds(editionNumber, listingPrice, currentOwner);\r\n\r\n    // transfer token to buyer\r\n    kodaAddress.safeTransferFrom(currentOwner, msg.sender, _tokenId);\r\n\r\n    // de-list the token\r\n    _delistToken(_tokenId);\r\n\r\n    // Fire confirmation event\r\n    emit TokenPurchased(_tokenId, msg.sender, currentOwner, listingPrice);\r\n  }\r\n\r\n  function _delistToken(uint256 _tokenId) private {\r\n    delete listings[_tokenId];\r\n\r\n    emit TokenDeListed(_tokenId);\r\n  }\r\n\r\n  ////////////////////\r\n  // Funds handling //\r\n  ////////////////////\r\n\r\n  function _handleFunds(uint256 _editionNumber, uint256 _offer, address _currentOwner) internal {\r\n\r\n    // Get existing artist commission\r\n    (address artistAccount, uint256 artistCommissionRate) = kodaAddress.artistCommission(_editionNumber);\r\n\r\n    // Get existing optional commission\r\n    (uint256 optionalCommissionRate, address optionalCommissionRecipient) = kodaAddress.editionOptionalCommission(_editionNumber);\r\n\r\n    _splitFunds(artistAccount, artistCommissionRate, optionalCommissionRecipient, optionalCommissionRate, _offer, _currentOwner);\r\n  }\r\n\r\n  function _splitFunds(\r\n    address _artistAccount,\r\n    uint256 _artistCommissionRate,\r\n    address _optionalCommissionRecipient,\r\n    uint256 _optionalCommissionRate,\r\n    uint256 _offer,\r\n    address _currentOwner\r\n  ) internal {\r\n\r\n    // Work out total % of royalties to payout = creator royalties + KO commission\r\n    uint256 totalCommissionPercentageToPay = platformFeePercentage.add(artistRoyaltyPercentage);\r\n\r\n    // Send current owner majority share of the offer\r\n    uint256 totalToSendToOwner = _offer.sub(\r\n      _offer.div(1000).mul(totalCommissionPercentageToPay)\r\n    );\r\n    _currentOwner.transfer(totalToSendToOwner);\r\n\r\n    // Send % to KO\r\n    uint256 koCommission = _offer.div(1000).mul(platformFeePercentage);\r\n    koCommissionAccount.transfer(koCommission);\r\n\r\n    // Send to seller minus royalties and commission\r\n    uint256 remainingRoyalties = _offer.sub(koCommission).sub(totalToSendToOwner);\r\n\r\n    if (_optionalCommissionRecipient == address(0)) {\r\n      // After KO and Seller - send the rest to the original artist\r\n      _artistAccount.transfer(remainingRoyalties);\r\n    } else {\r\n      _handleOptionalSplits(_artistAccount, _artistCommissionRate, _optionalCommissionRecipient, _optionalCommissionRate, remainingRoyalties);\r\n    }\r\n  }\r\n\r\n  function _handleOptionalSplits(\r\n    address _artistAccount,\r\n    uint256 _artistCommissionRate,\r\n    address _optionalCommissionRecipient,\r\n    uint256 _optionalCommissionRate,\r\n    uint256 _remainingRoyalties\r\n  ) internal {\r\n    uint256 _totalCollaboratorsRate = _artistCommissionRate.add(_optionalCommissionRate);\r\n    uint256 _scaledUpCommission = _artistCommissionRate.mul(10 ** 18);\r\n\r\n    // work out % of royalties total to split e.g. 43 / 85 = 50.5882353%\r\n    uint256 primaryArtistPercentage = _scaledUpCommission.div(_totalCollaboratorsRate);\r\n\r\n    uint256 totalPrimaryRoyaltiesToArtist = _remainingRoyalties.mul(primaryArtistPercentage).div(10 ** 18);\r\n    _artistAccount.transfer(totalPrimaryRoyaltiesToArtist);\r\n\r\n    uint256 remainingRoyaltiesToCollaborator = _remainingRoyalties.sub(totalPrimaryRoyaltiesToArtist);\r\n    _optionalCommissionRecipient.transfer(remainingRoyaltiesToCollaborator);\r\n  }\r\n\r\n  ///////////////////\r\n  // Query Methods //\r\n  ///////////////////\r\n\r\n  function tokenOffer(uint256 _tokenId) external view returns (address _bidder, uint256 _offer, address _owner, bool _enabled, bool _paused) {\r\n    Offer memory offer = offers[_tokenId];\r\n    return (\r\n    offer.bidder,\r\n    offer.offer,\r\n    kodaAddress.ownerOf(_tokenId),\r\n    !disabledTokens[_tokenId],\r\n    paused\r\n    );\r\n  }\r\n\r\n  function determineSaleValues(uint256 _tokenId) external view returns (uint256 _sellerTotal, uint256 _platformFee, uint256 _royaltyFee) {\r\n    Offer memory offer = offers[_tokenId];\r\n    uint256 offerValue = offer.offer;\r\n    uint256 fee = offerValue.div(1000).mul(platformFeePercentage);\r\n    uint256 royalties = offerValue.div(1000).mul(artistRoyaltyPercentage);\r\n\r\n    return (\r\n    offer.offer.sub(fee).sub(royalties),\r\n    fee,\r\n    royalties\r\n    );\r\n  }\r\n\r\n  function tokenListingDetails(uint256 _tokenId) external view returns (uint256 _price, address _lister, address _currentOwner) {\r\n    Listing memory listing = listings[_tokenId];\r\n    return (\r\n    listing.price,\r\n    listing.seller,\r\n    kodaAddress.ownerOf(_tokenId)\r\n    );\r\n  }\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies in extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {size := extcodesize(account)}\r\n    return size > 0;\r\n  }\r\n\r\n  ///////////////////\r\n  // Admin Actions //\r\n  ///////////////////\r\n\r\n  function disableAuction(uint256 _tokenId)\r\n  public\r\n  onlyIfWhitelisted(msg.sender)\r\n  {\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    disabledTokens[_tokenId] = true;\r\n\r\n    emit AuctionDisabled(_tokenId, msg.sender);\r\n  }\r\n\r\n  function enableAuction(uint256 _tokenId)\r\n  public\r\n  onlyIfWhitelisted(msg.sender)\r\n  {\r\n    _refundHighestBidder(_tokenId);\r\n\r\n    disabledTokens[_tokenId] = false;\r\n\r\n    emit AuctionEnabled(_tokenId, msg.sender);\r\n  }\r\n\r\n  function disableListing(uint256 _tokenId)\r\n  public\r\n  onlyIfWhitelisted(msg.sender)\r\n  {\r\n    _delistToken(_tokenId);\r\n\r\n    disabledListings[_tokenId] = true;\r\n\r\n    emit ListingDisabled(_tokenId);\r\n  }\r\n\r\n  function enableListing(uint256 _tokenId)\r\n  public\r\n  onlyIfWhitelisted(msg.sender)\r\n  {\r\n    disabledListings[_tokenId] = false;\r\n\r\n    emit ListingEnabled(_tokenId);\r\n  }\r\n\r\n  function setMinBidAmount(uint256 _minBidAmount) onlyIfWhitelisted(msg.sender) public {\r\n    minBidAmount = _minBidAmount;\r\n    emit UpdateMinBidAmount(minBidAmount);\r\n  }\r\n\r\n  function setKodavV2(IKODAV2Methods _kodaAddress) onlyIfWhitelisted(msg.sender) public {\r\n    kodaAddress = _kodaAddress;\r\n  }\r\n\r\n  function setKoCommissionAccount(address _koCommissionAccount) public onlyIfWhitelisted(msg.sender) {\r\n    require(_koCommissionAccount != address(0), \"Invalid address\");\r\n    koCommissionAccount = _koCommissionAccount;\r\n  }\r\n\r\n  function setArtistRoyaltyPercentage(uint256 _artistRoyaltyPercentage) public onlyIfWhitelisted(msg.sender) {\r\n    emit UpdateRoyaltyPercentageFee(artistRoyaltyPercentage, _artistRoyaltyPercentage);\r\n    artistRoyaltyPercentage = _artistRoyaltyPercentage;\r\n  }\r\n\r\n  function setPlatformPercentage(uint256 _platformFeePercentage) public onlyIfWhitelisted(msg.sender) {\r\n    emit UpdatePlatformPercentageFee(platformFeePercentage, _platformFeePercentage);\r\n    platformFeePercentage = _platformFeePercentage;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_acceptedAmount\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"enableAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_platformFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPlatformPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disabledTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"determineSaleValues\",\"outputs\":[{\"name\":\"_sellerTotal\",\"type\":\"uint256\"},{\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"name\":\"_royaltyFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBidAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBidAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artistRoyaltyPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"disableListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rejectBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"koCommissionAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_listingPrice\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"enableListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenOffer\",\"outputs\":[{\"name\":\"_bidder\",\"type\":\"address\"},{\"name\":\"_offer\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"},{\"name\":\"_paused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_koCommissionAccount\",\"type\":\"address\"}],\"name\":\"setKoCommissionAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artistRoyaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"setArtistRoyaltyPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disabledListings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"disableAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"delistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenListingDetails\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_lister\",\"type\":\"address\"},{\"name\":\"_currentOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"},{\"name\":\"_koCommissionAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateRoyaltyPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minBidAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMinBidAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDeListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_auctioneer\",\"type\":\"address\"}],\"name\":\"AuctionEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_auctioneer\",\"type\":\"address\"}],\"name\":\"AuctionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenMarketplaceV2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d0000000000000000000000003f8c962eb167ad2f80c72b5f933511ccdf0719d4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dc7bca7fc1bcc57fe46f1f5be14011e066bfac45dffb58a4a34d57e2296a6a61"}]}