{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/Address.sol\": {\r\n      \"content\": \"// ./Address.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/Context.sol\": {\r\n      \"content\": \"// ./Context.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\ncontract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/ERC20.sol\": {\r\n      \"content\": \"// ./ERC20.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    function name() public pure returns (string memory) {\\n        return 'Paypolitan Token';\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return 'EPAN';\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n\\n    // function _burn(address account, uint256 amount) internal virtual {\\n    //     require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    //     _beforeTokenTransfer(account, address(0), amount);\\n\\n    //     _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    //     _totalSupply = _totalSupply.sub(amount);\\n    //     emit Transfer(account, address(0), amount);\\n    // }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/IERC20.sol\": {\r\n      \"content\": \"// ./IERC20.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/Lock.sol\": {\r\n      \"content\": \"// Lock.sol\\n// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens at predefined intervals. Tokens not claimed at payment epochs accumulate\\n * Modified version of Openzeppelin's TokenTimeLock\\n */\\n\\n\\ncontract Lock is Ownable {\\n\\n    using SafeMath for uint;\\n    enum period {\\n        second,\\n        minute,\\n        hour,\\n        day,\\n        week,\\n        month, //inaccurate, assumes 30 day month, subject to drift\\n        year,\\n        quarter,//13 weeks\\n        biannual//26 weeks\\n    }\\n    \\n    //The length in seconds for each epoch between payments\\n    uint epochLength;\\n    // ERC20 basic token contract being held\\n    IERC20 private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    uint periods;\\n\\n    //the size of periodic payments\\n    uint paymentSize;\\n    uint paymentsRemaining =0;\\n    uint startTime =0;\\n    uint beneficiaryBalance = 0;\\n\\n    function initialize(address tokenAddress, address beneficiary, uint duration, uint durationMultiple, uint p)  public onlyOwner {\\n        release();\\n        require(paymentsRemaining == 0, 'cannot initialize during active vesting schedule');\\n        require(duration>0 && p>0, 'epoch parameters must be positive');\\n        _token = IERC20(tokenAddress);\\n        _beneficiary = beneficiary;\\n        if(duration<=uint(period.biannual)){\\n         \\n            if(duration == uint(period.second)){\\n                epochLength = durationMultiple * 1 seconds;\\n            }else if(duration == uint(period.minute)){\\n                epochLength = durationMultiple * 1 minutes;\\n            }\\n            else if(duration == uint(period.hour)){\\n                epochLength =  durationMultiple *1 hours;\\n            }else if(duration == uint(period.day)){\\n                epochLength =  durationMultiple *1 days;\\n            }\\n            else if(duration == uint(period.week)){\\n                epochLength =  durationMultiple *1 weeks;\\n            }else if(duration == uint(period.month)){\\n                epochLength =  durationMultiple *30 days;\\n            }else if(duration == uint(period.year)){\\n                epochLength =  durationMultiple *52 weeks;\\n            }else if(duration == uint(period.quarter)){\\n                epochLength =  durationMultiple *13 weeks;\\n            }\\n            else if(duration == uint(period.biannual)){\\n                epochLength = 26 weeks;\\n            }\\n        }\\n        else{\\n                epochLength = duration; //custom value\\n            }\\n            periods = p;\\n\\n        emit Initialized(tokenAddress,beneficiary,epochLength,p);\\n    }\\n\\n    function deposit (uint amount) public { //remember to ERC20.approve\\n         require (_token.transferFrom(msg.sender,address(this),amount),'transfer failed');\\n         uint balance = _token.balanceOf(address(this));\\n         if(paymentsRemaining==0)\\n         {\\n             paymentsRemaining = periods;\\n             startTime = block.timestamp;\\n         }\\n         paymentSize = balance/paymentsRemaining;\\n         emit PaymentsUpdatedOnDeposit(paymentSize,startTime,paymentsRemaining);\\n    }\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function getStatus() public view returns (string memory) {\\n        if (epochLength > 0)\\n            return (\\\"Box Closed\\\");\\n        uint elapsedEpochs = (block.timestamp - startTime)/epochLength;\\n        if (elapsedEpochs == 0)\\n            return (\\\"Box Open\\\");\\n        return (\\\"Box Closed\\\");\\n    }\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function getTimeRemaining() public view returns (uint) {\\n        // return startTime - block.timestamp;\\n         // solhint-disable-next-line not-rely-on-time\\n         uint timeLeft = block.timestamp - startTime;\\n        if(block.timestamp >= startTime) return timeLeft;\\n    return (startTime - block.timestamp);\\n    \\n    }\\n    /**\\n     * @return the getPaymentsRemaining of the tokens.\\n     */\\n    function getBalance() public view returns (uint) {\\n        return _token.balanceOf(address(this));\\n    }\\n    /**\\n     * @return the amountToSend of the tokens.\\n     */\\n    function getAmountToSend() public view returns (uint) {\\n        return beneficiaryBalance; //amountToSend;\\n    }\\n    \\n    function getElapsedReward() public view returns (uint,uint,uint){\\n         if(epochLength == 0)\\n            return (0, startTime,paymentsRemaining);\\n        uint elapsedEpochs = (block.timestamp - startTime)/epochLength;\\n        if(elapsedEpochs==0)\\n            return (0, startTime,paymentsRemaining);\\n        elapsedEpochs = elapsedEpochs>paymentsRemaining?paymentsRemaining:elapsedEpochs;\\n        uint newStartTime = block.timestamp;\\n        uint newPaymentsRemaining = paymentsRemaining.sub(elapsedEpochs);\\n        uint balance  =_token.balanceOf(address(this));\\n        uint accumulatedFunds = paymentSize.mul(elapsedEpochs);\\n         return (beneficiaryBalance.add(accumulatedFunds>balance?balance:accumulatedFunds),newStartTime,newPaymentsRemaining);\\n    } \\n\\n    function updateBeneficiaryBalance() private {\\n        (beneficiaryBalance,startTime, paymentsRemaining) = getElapsedReward();\\n    }\\n\\n    function changeBeneficiary (address beneficiary) public onlyOwner {\\n        require (paymentsRemaining == 0, 'TokenTimelock: cannot change beneficiary while token balance positive');\\n        _beneficiary = beneficiary;\\n    }\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function getBeneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= startTime, \\\"TokenTimelock: current time is before release time\\\");\\n        updateBeneficiaryBalance();\\n        uint amountToSend = beneficiaryBalance;\\n        beneficiaryBalance = 0;\\n        if(amountToSend>0)\\n            require(_token.transfer(_beneficiary,amountToSend),'release funds failed');\\n        emit FundsReleasedToBeneficiary(_beneficiary,amountToSend,block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Call Action to Actual Token Contract.\\n     */\\n    function approveERC() public { \\n        // solhint-disable-next-line not-rely-on-time\\n        // updateBeneficiaryBalance();\\n        // uint amountToSend = beneficiaryBalance;\\n        // beneficiaryBalance = 0;\\n        // if(amountToSend>0)\\n            require(_token.approve(address(this),_token.totalSupply()),'ar funds failed');\\n        // emit FundsReleasedToBeneficiary(_beneficiary,amountToSend,block.timestamp);\\n    }\\n\\n    event PaymentsUpdatedOnDeposit(uint paymentSize,uint startTime, uint paymentsRemaining);\\n    event Initialized (address tokenAddress, address beneficiary, uint duration,uint periods);\\n    event FundsReleasedToBeneficiary(address beneficiary, uint value, uint timeStamp);\\n    // event BoxStatusOpen();\\n    // event BoxStatusClosed();\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/Ownable.sol\": {\r\n      \"content\": \"// ./Ownable.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/Volumes/Work/Code/token-installation-timelock/contracts/SafeMath.sol\": {\r\n      \"content\": \"// ./SafeMath.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"FundsReleasedToBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentsRemaining\",\"type\":\"uint256\"}],\"name\":\"PaymentsUpdatedOnDeposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approveERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountToSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElapsedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Lock","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}