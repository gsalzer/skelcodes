{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\t/**\r\n     * @dev Interface to the staking contract for ERC-20 token pools.\r\n     */\r\ninterface SmolTingPot {\r\n    function withdraw(uint256 _pid, uint256 _amount, address _staker) external;\r\n    function poolLength() external view returns (uint256);\r\n    function pendingTing(uint256 _pid, address _user) external view returns (uint256);\r\n}\r\n\r\n\t/**\r\n     * @dev Interface to the ERC-1155 NFT contract for smol.finance\r\n     */\r\ninterface SmolStudio {\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n}\r\n\r\n\t/**\r\n     * @dev Interface to the farmed currency.\r\n     */\r\ninterface SmolTing {\r\n    function totalSupply() external view returns (uint256);\r\n    function totalClaimed() external view returns (uint256);\r\n    function addClaimed(uint256 _amount) external;\r\n    function setClaimed(uint256 _amount) external;\r\n    function transfer(address receiver, uint numTokens) external returns (bool);\r\n    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 value) external;\r\n}\r\n\r\n\t/**\r\n     * @dev Interface to the exclusive booster contract.\r\n     */\r\ninterface TingBooster {\r\n    function getMultiplierOfAddress(address _addr) external view returns (uint256);\r\n}\r\n\r\n\t/**\r\n     * @dev Contract for handling the NFT staking and set creation.\r\n     */\r\ncontract SmolMuseum is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct CardSet {\r\n        uint256[] cardIds;\r\n        uint256 tingPerDayPerCard;\r\n        uint256 bonusTingMultiplier;     \t// 100% bonus = 1e5\r\n        bool isBooster;                   \t// False if the card set doesn't give pool boost at smolTingPot\r\n        uint256[] poolBoosts;            \t// 100% bonus = 1e5. Applicable if isBooster is true.Eg: [0,20000] = 0% boost for pool 1, 20% boost for pool 2\r\n        uint256 bonusFullSetBoost;          // 100% bonus = 1e5. Gives an additional boost if you stake all boosters of that set.\r\n        bool isRemoved;\r\n    }\r\n\r\n    SmolStudio public smolStudio;\r\n    SmolTing public ting;\r\n    TingBooster public tingBooster;\r\n    SmolTingPot public smolTingPot;\r\n    address public treasuryAddr;\r\n\r\n    uint256[] public cardSetList;\r\n\t//Highest CardId added to the museum\r\n    uint256 public highestCardId;\r\n\t//SetId mapped to all card IDs in the set.\r\n    mapping (uint256 => CardSet) public cardSets;\r\n\t//CardId to SetId mapping\r\n    mapping (uint256 => uint256) public cardToSetMap;\r\n\t//Status of user's cards staked mapped to the cardID\r\n    mapping (address => mapping(uint256 => bool)) public userCards;\r\n\t//Last update time for a user's TING rewards calculation\r\n    mapping (address => uint256) public userLastUpdate;\r\n\r\n    event Stake(address indexed user, uint256[] cardIds);\r\n    event Unstake(address indexed user, uint256[] cardIds);\r\n    event Harvest(address indexed user, uint256 amount);\r\n\r\n    constructor(SmolTingPot _smolTingPotAddr, SmolStudio _smolStudioAddr, SmolTing _tingAddr, TingBooster _tingBoosterAddr, address _treasuryAddr) public {\r\n        smolTingPot = _smolTingPotAddr;\r\n        smolStudio = _smolStudioAddr;\r\n        ting = _tingAddr;\r\n        tingBooster = _tingBoosterAddr;\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n\t/**\r\n     * @dev Utility function to check if a value is inside an array\r\n     */\r\n    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\r\n        uint256 length = _array.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            if (_array[i] == _value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\t/**\r\n     * @dev Indexed boolean for whether a card is staked or not. Index represents the cardId.\r\n     */\r\n    function getCardsStakedOfAddress(address _user) public view returns(bool[] memory) {\r\n        bool[] memory cardsStaked = new bool[](highestCardId + 1);\r\n        for (uint256 i = 0; i < highestCardId + 1; ++i) {\t\t\t\r\n            cardsStaked[i] = userCards[_user][i];\r\n        }\r\n        return cardsStaked;\r\n    }\r\n    \r\n\t/**\r\n     * @dev Returns the list of cardIds which are part of a set\r\n     */\r\n    function getCardIdListOfSet(uint256 _setId) external view returns(uint256[] memory) {\r\n        return cardSets[_setId].cardIds;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the boosters associated with a card Id per pool\r\n     */\r\n    function getBoostersOfCard(uint256 _cardId) external view returns(uint256[] memory) {\r\n        return cardSets[cardToSetMap[_cardId]].poolBoosts;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Indexed  boolean of each setId for which a user has a full set or not.\r\n     */\r\n    function getFullSetsOfAddress(address _user) public view returns(bool[] memory) {\r\n        uint256 length = cardSetList.length;\r\n        bool[] memory isFullSet = new bool[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 setId = cardSetList[i];\r\n            if (cardSets[setId].isRemoved) {\r\n                isFullSet[i] = false;\r\n                continue;\r\n            }\r\n            bool _fullSet = true;\r\n            uint256[] memory _cardIds = cardSets[setId].cardIds;\r\n\t\t\t\r\n            for (uint256 j = 0; j < _cardIds.length; ++j) {\r\n                if (userCards[_user][_cardIds[j]] == false) {\r\n                    _fullSet = false;\r\n                    break;\r\n                }\r\n            }\r\n            isFullSet[i] = _fullSet;\r\n        }\r\n        return isFullSet;\r\n    }\r\n\r\n\t/**\r\n     * @dev Returns the amount of NFTs staked by an address for a given set\r\n     */\r\n    function getNumOfNftsStakedForSet(address _user, uint256 _setId) public view returns(uint256) {\r\n        uint256 nbStaked = 0;\r\n        if (cardSets[_setId].isRemoved) return 0;\r\n        uint256 length = cardSets[_setId].cardIds.length;\r\n        for (uint256 j = 0; j < length; ++j) {\r\n            uint256 cardId = cardSets[_setId].cardIds[j];\r\n            if (userCards[_user][cardId] == true) {\r\n                nbStaked = nbStaked.add(1);\r\n            }\r\n        }\r\n        return nbStaked;\r\n    }\r\n\r\n\t/**\r\n     * @dev Returns the total amount of NFTs staked by an address across all sets\r\n     */\r\n    function getNumOfNftsStakedByAddress(address _user) public view returns(uint256) {\r\n        uint256 nbStaked = 0;\r\n        for (uint256 i = 0; i < cardSetList.length; ++i) {\r\n            nbStaked = nbStaked.add(getNumOfNftsStakedForSet(_user, cardSetList[i]));\r\n        }\r\n        return nbStaked;\r\n    }\r\n    \r\n\t/**\r\n     * @dev Returns the total ting pending for a given address. Can include the bonus from TingBooster,\r\n\t * if second param is set to true.\r\n     */\r\n    function totalPendingTingOfAddress(address _user, bool _includeTingBooster) public view returns (uint256) {\r\n        uint256 totalTingPerDay = 0;\r\n        uint256 length = cardSetList.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 setId = cardSetList[i];\r\n            CardSet storage set = cardSets[setId];\r\n            if (set.isRemoved) continue;\r\n            uint256 cardLength = set.cardIds.length;\r\n            bool isFullSet = true;\r\n            uint256 setTingPerDay = 0;\r\n            for (uint256 j = 0; j < cardLength; ++j) {\r\n                if (userCards[_user][set.cardIds[j]] == false) {\r\n                    isFullSet = false;\r\n                    continue;\r\n                }\r\n                setTingPerDay = setTingPerDay.add(set.tingPerDayPerCard);\r\n            }\r\n            if (isFullSet) {\r\n                setTingPerDay = setTingPerDay.mul(set.bonusTingMultiplier).div(1e5);\r\n            }\r\n            totalTingPerDay = totalTingPerDay.add(setTingPerDay);\r\n        }\r\n\r\n        if (_includeTingBooster) {\r\n\t\t\tuint256 boostMult = tingBooster.getMultiplierOfAddress(_user).add(1e5);\r\n            totalTingPerDay = totalTingPerDay.mul(boostMult).div(1e5);\r\n        }\r\n        uint256 lastUpdate = userLastUpdate[_user];\r\n        uint256 blockTime = block.timestamp;\r\n        return blockTime.sub(lastUpdate).mul(totalTingPerDay.div(86400));\r\n    }\r\n\r\n\t/**\r\n     * @dev Returns the pending ting coming from the bonus generated by TingBooster\r\n     */\r\n    function totalPendingTingOfAddressFromBooster(address _user) external view returns (uint256) {\r\n        uint256 totalPending = totalPendingTingOfAddress(_user, false);\r\n\t\tuint256 userBoost = tingBooster.getMultiplierOfAddress(_user).add(1e5);\r\n        return totalPending.mul(userBoost).div(1e5);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the applicable booster of a user, for a pool, from a staked NFT set.\r\n     */\r\n    function getBoosterForUser(address _user, uint256 _pid) public view returns (uint256) {\r\n        uint256 totalBooster = 0;\r\n        uint256 length = cardSetList.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 setId = cardSetList[i];\r\n            CardSet storage set = cardSets[setId];\r\n            if (set.isBooster == false) continue;\r\n            if (set.poolBoosts.length < _pid.add(1)) continue;\r\n            if (set.poolBoosts[_pid] == 0) continue;\r\n            uint256 cardLength = set.cardIds.length;\r\n            bool isFullSet = true;\r\n            uint256 setBooster = 0;\r\n            for (uint256 j = 0; j < cardLength; ++j) {\r\n                if (userCards[_user][set.cardIds[j]] == false) {\r\n                    isFullSet = false;\r\n                    continue;\r\n                }\r\n                setBooster = setBooster.add(set.poolBoosts[_pid]);\r\n            }\r\n            if (isFullSet) {\r\n                setBooster = setBooster.add(set.bonusFullSetBoost);\r\n            }\r\n            totalBooster = totalBooster.add(setBooster);\r\n        }\r\n        return totalBooster;\r\n    }\r\n\r\n\t/**\r\n     * @dev Manually sets the highestCardId, if it goes out of sync.\r\n\t * Required calculate the range for iterating the list of staked cards for an address.\r\n     */\r\n    function setHighestCardId(uint256 _highestId) public onlyOwner {\r\n        require(_highestId > 0, \"Set if minimum 1 card is staked.\");\r\n        highestCardId = _highestId;\r\n    }\r\n\r\n\t/**\r\n     * @dev Adds a card set with the input param configs. Removes an existing set if the id exists.\r\n     */\r\n    function addCardSet(uint256 _setId, uint256[] memory _cardIds, uint256 _bonusTingMultiplier, uint256 _tingPerDayPerCard, uint256[] memory _poolBoosts, uint256 _bonusFullSetBoost, bool _isBooster) public onlyOwner {\r\n        removeCardSet(_setId);\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            if (cardId > highestCardId) {\r\n                highestCardId = cardId;\r\n            }\r\n            // Check all cards to assign arent already part of another set\r\n            require(cardToSetMap[cardId] == 0, \"Card already assigned to a set\");\r\n            // Assign to set\r\n            cardToSetMap[cardId] = _setId;\r\n        }\r\n        if (_isInArray(_setId, cardSetList) == false) {\r\n            cardSetList.push(_setId);\r\n        }\r\n        cardSets[_setId] = CardSet({\r\n        cardIds: _cardIds,\r\n        bonusTingMultiplier: _bonusTingMultiplier,\r\n        tingPerDayPerCard: _tingPerDayPerCard,\r\n        isBooster: _isBooster,\r\n        poolBoosts: _poolBoosts,\r\n        bonusFullSetBoost: _bonusFullSetBoost,\r\n        isRemoved: false\r\n        });\r\n    }\r\n\r\n\t/**\r\n     * @dev Updates the tingPerDayPerCard for a card set.\r\n     */\r\n    function setTingRateOfSets(uint256[] memory _setIds, uint256[] memory _tingPerDayPerCard) public onlyOwner {\r\n        require(_setIds.length == _tingPerDayPerCard.length, \"_setId and _tingPerDayPerCard have different length\");\r\n        for (uint256 i = 0; i < _setIds.length; ++i) {\r\n            require(cardSets[_setIds[i]].cardIds.length > 0, \"Set is empty\");\r\n            cardSets[_setIds[i]].tingPerDayPerCard = _tingPerDayPerCard[i];\r\n        }\r\n    }\r\n\r\n\t/**\r\n     * @dev Set the bonusTingMultiplier value for a list of Card sets\r\n     */\r\n    function setBonusTingMultiplierOfSets(uint256[] memory _setIds, uint256[] memory _bonusTingMultiplier) public onlyOwner {\r\n        require(_setIds.length == _bonusTingMultiplier.length, \"_setId and _tingPerDayPerCard have different length\");\r\n        for (uint256 i = 0; i < _setIds.length; ++i) {\r\n            require(cardSets[_setIds[i]].cardIds.length > 0, \"Set is empty\");\r\n            cardSets[_setIds[i]].bonusTingMultiplier = _bonusTingMultiplier[i];\r\n        }\r\n    }\r\n\r\n\t/**\r\n     * @dev Remove a cardSet that has been added.\r\n\t * !!!  Warning : if a booster set is removed, users with the booster staked will continue to benefit from the multiplier  !!!\r\n     */\r\n    function removeCardSet(uint256 _setId) public onlyOwner {\r\n        uint256 length = cardSets[_setId].cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = cardSets[_setId].cardIds[i];\r\n            cardToSetMap[cardId] = 0;\r\n        }\r\n        delete cardSets[_setId].cardIds;\r\n        cardSets[_setId].isRemoved = true;\r\n        cardSets[_setId].isBooster = false;\r\n    }\r\n\r\n\t/**\r\n     * @dev Harvests the accumulated TING in the contract, for the caller.\r\n     */\r\n    function harvest() public {\r\n        uint256 pendingTing = totalPendingTingOfAddress(msg.sender, true);\r\n        userLastUpdate[msg.sender] = block.timestamp;\r\n        if (pendingTing > 0) {\r\n            ting.mint(treasuryAddr, pendingTing.div(40)); // 2.5% TING for the treasury (Usable to purchase NFTs)\r\n            ting.mint(msg.sender, pendingTing);\r\n            ting.addClaimed(pendingTing);\r\n        }\r\n        emit Harvest(msg.sender, pendingTing);\r\n    }\r\n\r\n\t/**\r\n     * @dev Stakes the cards on providing the card IDs. \r\n     */\r\n    function stake(uint256[] memory _cardIds) public {\r\n        require(_cardIds.length > 0, \"you need to stake something\");\r\n\r\n        // Check no card will end up above max stake and if it is needed to update the user NFT pool\r\n        uint256 length = _cardIds.length;\r\n        bool onlyBoosters = true;\r\n        bool onlyNoBoosters = true;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            require(userCards[msg.sender][cardId] == false, \"item already staked\");\r\n            require(cardToSetMap[cardId] != 0, \"you can't stake that\");\r\n            if (cardSets[cardToSetMap[cardId]].tingPerDayPerCard > 0) onlyBoosters = false;\r\n            if (cardSets[cardToSetMap[cardId]].isBooster == true) onlyNoBoosters = false;\r\n        }\r\n                // Harvest NFT pool if the Ting/day will be modified\r\n        if (onlyBoosters == false) harvest();\r\n        \r\n            \t// Harvest each pool where booster value will be modified \r\n        if (onlyNoBoosters == false) {\r\n            for (uint256 i = 0; i < length; ++i) {                                                                  \r\n                uint256 cardId = _cardIds[i];\r\n                if (cardSets[cardToSetMap[cardId]].isBooster) {\r\n                    CardSet storage cardSet = cardSets[cardToSetMap[cardId]];\r\n                    uint256 boostLength = cardSet.poolBoosts.length;\r\n                    for (uint256 j = 0; j < boostLength; ++j) {                                                     \r\n                        if (cardSet.poolBoosts[j] > 0 && smolTingPot.pendingTing(j, msg.sender) > 0) {\r\n                            address staker = msg.sender;\r\n                            smolTingPot.withdraw(j, 0, staker);   \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        //Stake 1 unit of each cardId\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n        smolStudio.safeBatchTransferFrom(msg.sender, address(this), _cardIds, amounts, \"\");\r\n\t\t//Update the staked status for the card ID.\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            userCards[msg.sender][cardId] = true;\r\n        }\r\n        emit Stake(msg.sender, _cardIds);\r\n    }\r\n\r\n\t/**\r\n     * @dev Unstakes the cards on providing the card IDs. \r\n     */\r\n    function unstake(uint256[] memory _cardIds) public {\r\n \r\n         require(_cardIds.length > 0, \"input at least 1 card id\");\r\n\r\n        // Check if all cards are staked and if it is needed to update the user NFT pool\r\n        uint256 length = _cardIds.length;\r\n        bool onlyBoosters = true;\r\n        bool onlyNoBoosters = true;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            require(userCards[msg.sender][cardId] == true, \"Card not staked\");\r\n            userCards[msg.sender][cardId] = false;\r\n            if (cardSets[cardToSetMap[cardId]].tingPerDayPerCard > 0) onlyBoosters = false;\r\n            if (cardSets[cardToSetMap[cardId]].isBooster == true) onlyNoBoosters = false;\r\n        }\r\n        \r\n        if (onlyBoosters == false) harvest();\r\n\r\n    \t\t\t\t// Harvest each pool where booster value will be modified  \r\n        if (onlyNoBoosters == false) {\r\n            for (uint256 i = 0; i < length; ++i) {                                                                  \r\n                uint256 cardId = _cardIds[i];\r\n                if (cardSets[cardToSetMap[cardId]].isBooster) {\r\n                    CardSet storage cardSet = cardSets[cardToSetMap[cardId]];\r\n                    uint256 boostLength = cardSet.poolBoosts.length;\r\n                    for (uint256 j = 0; j < boostLength; ++j) {                                                     \r\n                        if (cardSet.poolBoosts[j] > 0 && smolTingPot.pendingTing(j, msg.sender) > 0) {\r\n                            address staker = msg.sender;\r\n                            smolTingPot.withdraw(j, 0, staker);   \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //UnStake 1 unit of each cardId\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n        smolStudio.safeBatchTransferFrom(address(this), msg.sender, _cardIds, amounts, \"\");\r\n        emit Unstake(msg.sender, _cardIds);\r\n    }\r\n\r\n\t/**\r\n     * @dev Emergency unstake the cards on providing the card IDs, forfeiting the TING rewards in both Museum and SmolTingPot.\r\n     */\r\n    function emergencyUnstake(uint256[] memory _cardIds) public {\r\n        userLastUpdate[msg.sender] = block.timestamp;\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            require(userCards[msg.sender][cardId] == true, \"Card not staked\");\r\n            userCards[msg.sender][cardId] = false;\r\n        }\r\n\r\n        //UnStake 1 unit of each cardId\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n        smolStudio.safeBatchTransferFrom(address(this), msg.sender, _cardIds, amounts, \"\");\r\n    }\r\n    \r\n\t/**\r\n     * @dev Update TingBooster contract address linked to smolMuseum.\r\n     */\r\n    function updateTingBoosterAddress(TingBooster _tingBoosterAddress) public onlyOwner{\r\n        tingBooster = _tingBoosterAddress;\r\n    }\r\n\t\r\n\t// update pot address if the pot logic changed.\r\n    function updateSmolTingPotAddress(SmolTingPot _smolTingPotAddress) public onlyOwner{\r\n        smolTingPot = _smolTingPotAddress;\r\n    }\r\n    \r\n\t/**\r\n     * @dev Update treasury address by the previous treasury.\r\n     */\r\n    function treasury(address _treasuryAddr) public {\r\n        require(msg.sender == treasuryAddr, \"Only current treasury address can update.\");\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\r\n        return 0xf23a6e61;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\r\n        return 0xbc197c81;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\r\n        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SmolTingPot\",\"name\":\"_smolTingPotAddr\",\"type\":\"address\"},{\"internalType\":\"contract SmolStudio\",\"name\":\"_smolStudioAddr\",\"type\":\"address\"},{\"internalType\":\"contract SmolTing\",\"name\":\"_tingAddr\",\"type\":\"address\"},{\"internalType\":\"contract TingBooster\",\"name\":\"_tingBoosterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusTingMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tingPerDayPerCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolBoosts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusFullSetBoost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBooster\",\"type\":\"bool\"}],\"name\":\"addCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardSetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardSets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tingPerDayPerCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusTingMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBooster\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bonusFullSetBoost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardToSetMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoosterForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getBoostersOfCard\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getCardIdListOfSet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCardsStakedOfAddress\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFullSetsOfAddress\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNumOfNftsStakedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getNumOfNftsStakedForSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"removeCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_setIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonusTingMultiplier\",\"type\":\"uint256[]\"}],\"name\":\"setBonusTingMultiplierOfSets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestId\",\"type\":\"uint256\"}],\"name\":\"setHighestCardId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_setIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tingPerDayPerCard\",\"type\":\"uint256[]\"}],\"name\":\"setTingRateOfSets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smolStudio\",\"outputs\":[{\"internalType\":\"contract SmolStudio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smolTingPot\",\"outputs\":[{\"internalType\":\"contract SmolTingPot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ting\",\"outputs\":[{\"internalType\":\"contract SmolTing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tingBooster\",\"outputs\":[{\"internalType\":\"contract TingBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeTingBooster\",\"type\":\"bool\"}],\"name\":\"totalPendingTingOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalPendingTingOfAddressFromBooster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SmolTingPot\",\"name\":\"_smolTingPotAddress\",\"type\":\"address\"}],\"name\":\"updateSmolTingPotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TingBooster\",\"name\":\"_tingBoosterAddress\",\"type\":\"address\"}],\"name\":\"updateTingBoosterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmolMuseum","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006d061ebfd8bdf5d574a7029e918341b1736d6f6c0000000000000000000000006d696d6982d2332f44358d9673c14a33780ea53100000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000000384e469dadf7c7ce3f3cda622276d696d326d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca60000000000000000000000006d061ebfd8bdf5d574a7029e918341b1736d6f6c0000000000000000000000006d696d6982d2332f44358d9673c14a33780ea53100000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000000384e469dadf7c7ce3f3cda622276d696d326d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca60000000000000000000000006d061ebfd8bdf5d574a7029e918341b1736d6f6c0000000000000000000000006d696d6982d2332f44358d9673c14a33780ea53100000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000000384e469dadf7c7ce3f3cda622276d696d326d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca60000000000000000000000006d061ebfd8bdf5d574a7029e918341b1736d6f6c0000000000000000000000006d696d6982d2332f44358d9673c14a33780ea53100000000000000000000000074696e67451a48c2ac387b5855981654dc858ec30000000000000000000000000384e469dadf7c7ce3f3cda622276d696d326d69000000000000000000000000fea4e9f56b59cc0384be397892eb243e779f1ca6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3893e51f9009acd774c6cd5a570fc165d9bd04aa9ed4915dec4efe7871d8c183"}]}