{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DigitalaxAccessControls.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @notice Access Controls contract for the Digitalax Platform\r\n * @author BlockRocket.tech\r\n */\r\ncontract DigitalaxAccessControls is AccessControl {\r\n    /// @notice Role definitions\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\"SMART_CONTRACT_ROLE\");\r\n\r\n    /// @notice Events for adding and removing various roles\r\n    event AdminRoleGranted(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    event AdminRoleRemoved(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    event MinterRoleGranted(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    event MinterRoleRemoved(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    event SmartContractRoleGranted(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    event SmartContractRoleRemoved(\r\n        address indexed beneficiary,\r\n        address indexed caller\r\n    );\r\n\r\n    /**\r\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\r\n     */\r\n    constructor() public {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n    }\r\n\r\n    /////////////\r\n    // Lookups //\r\n    /////////////\r\n\r\n    /**\r\n     * @notice Used to check whether an address has the admin role\r\n     * @param _address EOA or contract being checked\r\n     * @return bool True if the account has the role or false if it does not\r\n     */\r\n    function hasAdminRole(address _address) external view returns (bool) {\r\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check whether an address has the minter role\r\n     * @param _address EOA or contract being checked\r\n     * @return bool True if the account has the role or false if it does not\r\n     */\r\n    function hasMinterRole(address _address) external view returns (bool) {\r\n        return hasRole(MINTER_ROLE, _address);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check whether an address has the smart contract role\r\n     * @param _address EOA or contract being checked\r\n     * @return bool True if the account has the role or false if it does not\r\n     */\r\n    function hasSmartContractRole(address _address) external view returns (bool) {\r\n        return hasRole(SMART_CONTRACT_ROLE, _address);\r\n    }\r\n\r\n    ///////////////\r\n    // Modifiers //\r\n    ///////////////\r\n\r\n    /**\r\n     * @notice Grants the admin role to an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract receiving the new role\r\n     */\r\n    function addAdminRole(address _address) external {\r\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\r\n        emit AdminRoleGranted(_address, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the admin role from an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract affected\r\n     */\r\n    function removeAdminRole(address _address) external {\r\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\r\n        emit AdminRoleRemoved(_address, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Grants the minter role to an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract receiving the new role\r\n     */\r\n    function addMinterRole(address _address) external {\r\n        grantRole(MINTER_ROLE, _address);\r\n        emit MinterRoleGranted(_address, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the minter role from an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract affected\r\n     */\r\n    function removeMinterRole(address _address) external {\r\n        revokeRole(MINTER_ROLE, _address);\r\n        emit MinterRoleRemoved(_address, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Grants the smart contract role to an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract receiving the new role\r\n     */\r\n    function addSmartContractRole(address _address) external {\r\n        grantRole(SMART_CONTRACT_ROLE, _address);\r\n        emit SmartContractRoleGranted(_address, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the smart contract role from an address\r\n     * @dev The sender must have the admin role\r\n     * @param _address EOA or contract affected\r\n     */\r\n    function removeSmartContractRole(address _address) external {\r\n        revokeRole(SMART_CONTRACT_ROLE, _address);\r\n        emit SmartContractRoleRemoved(_address, _msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/garment/IDigitalaxGarmentNFT.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IDigitalaxGarmentNFT is IERC721 {\r\n    function isApproved(uint256 _tokenId, address _operator) external view returns (bool);\r\n    function setPrimarySalePrice(uint256 _tokenId, uint256 _salePrice) external;\r\n    function garmentDesigners(uint256 _tokenId) external view returns (address);\r\n}\r\n\r\n// File: contracts/DigitalaxAuction.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Primary sale auction contract for Digitalax NFTs\r\n */\r\ncontract DigitalaxAuction is Context, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    /// @notice Event emitted only on construction. To be used by indexers\r\n    event DigitalaxAuctionContractDeployed();\r\n\r\n    event PauseToggled(\r\n        bool isPaused\r\n    );\r\n\r\n    event AuctionCreated(\r\n        uint256 indexed garmentTokenId\r\n    );\r\n\r\n    event UpdateAuctionEndTime(\r\n        uint256 indexed garmentTokenId,\r\n        uint256 endTime\r\n    );\r\n\r\n    event UpdateAuctionStartTime(\r\n        uint256 indexed garmentTokenId,\r\n        uint256 startTime\r\n    );\r\n\r\n    event UpdateAuctionReservePrice(\r\n        uint256 indexed garmentTokenId,\r\n        uint256 reservePrice\r\n    );\r\n\r\n    event UpdateAccessControls(\r\n        address indexed accessControls\r\n    );\r\n\r\n    event UpdatePlatformFee(\r\n        uint256 platformFee\r\n    );\r\n\r\n    event UpdatePlatformFeeRecipient(\r\n        address payable platformFeeRecipient\r\n    );\r\n\r\n    event UpdateMinBidIncrement(\r\n        uint256 minBidIncrement\r\n    );\r\n\r\n    event UpdateBidWithdrawalLockTime(\r\n        uint256 bidWithdrawalLockTime\r\n    );\r\n\r\n    event BidPlaced(\r\n        uint256 indexed garmentTokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidWithdrawn(\r\n        uint256 indexed garmentTokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidRefunded(\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event AuctionResulted(\r\n        uint256 indexed garmentTokenId,\r\n        address indexed winner,\r\n        uint256 winningBid\r\n    );\r\n\r\n    event AuctionCancelled(\r\n        uint256 indexed garmentTokenId\r\n    );\r\n\r\n    /// @notice Parameters of an auction\r\n    struct Auction {\r\n        uint256 reservePrice;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool resulted;\r\n    }\r\n\r\n    /// @notice Information about the sender that placed a bit on an auction\r\n    struct HighestBid {\r\n        address payable bidder;\r\n        uint256 bid;\r\n        uint256 lastBidTime;\r\n    }\r\n\r\n    /// @notice Garment ERC721 Token ID -> Auction Parameters\r\n    mapping(uint256 => Auction) public auctions;\r\n\r\n    /// @notice Garment ERC721 Token ID -> highest bidder info (if a bid has been received)\r\n    mapping(uint256 => HighestBid) public highestBids;\r\n\r\n    /// @notice Garment ERC721 NFT - the only NFT that can be auctioned in this contract\r\n    IDigitalaxGarmentNFT public garmentNft;\r\n\r\n    // @notice responsible for enforcing admin access\r\n    DigitalaxAccessControls public accessControls;\r\n\r\n    /// @notice globally and across all auctions, the amount by which a bid has to increase\r\n    uint256 public minBidIncrement = 0.1 ether;\r\n\r\n    /// @notice global bid withdrawal lock time\r\n    uint256 public bidWithdrawalLockTime = 20 minutes;\r\n\r\n    /// @notice global platform fee, assumed to always be to 1 decimal place i.e. 120 = 12.0%\r\n    uint256 public platformFee = 120;\r\n\r\n    /// @notice where to send platform fee funds to\r\n    address payable public platformFeeRecipient;\r\n\r\n    /// @notice for switching off auction creations, bids and withdrawals\r\n    bool public isPaused;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused, \"Function is currently paused\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        DigitalaxAccessControls _accessControls,\r\n        IDigitalaxGarmentNFT _garmentNft,\r\n        address payable _platformFeeRecipient\r\n    ) public {\r\n        require(address(_accessControls) != address(0), \"DigitalaxAuction: Invalid Access Controls\");\r\n        require(address(_garmentNft) != address(0), \"DigitalaxAuction: Invalid NFT\");\r\n        require(_platformFeeRecipient != address(0), \"DigitalaxAuction: Invalid Platform Fee Recipient\");\r\n\r\n        accessControls = _accessControls;\r\n        garmentNft = _garmentNft;\r\n        platformFeeRecipient = _platformFeeRecipient;\r\n\r\n        emit DigitalaxAuctionContractDeployed();\r\n    }\r\n\r\n    /**\r\n     @notice Creates a new auction for a given garment\r\n     @dev Only the owner of a garment can create an auction and must have approved the contract\r\n     @dev In addition to owning the garment, the sender also has to have the MINTER role.\r\n     @dev End time for the auction must be in the future.\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _reservePrice Garment cannot be sold for less than this or minBidIncrement, whichever is higher\r\n     @param _startTimestamp Unix epoch in seconds for the auction start time\r\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\r\n     */\r\n    function createAuction(\r\n        uint256 _garmentTokenId,\r\n        uint256 _reservePrice,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp\r\n    ) external whenNotPaused {\r\n        // Ensure caller has privileges\r\n        require(\r\n            accessControls.hasMinterRole(_msgSender()),\r\n            \"DigitalaxAuction.createAuction: Sender must have the minter role\"\r\n        );\r\n\r\n        // Check owner of the token is the creator and approved\r\n        require(\r\n            garmentNft.ownerOf(_garmentTokenId) == _msgSender() && garmentNft.isApproved(_garmentTokenId, address(this)),\r\n            \"DigitalaxAuction.createAuction: Not owner and or contract not approved\"\r\n        );\r\n\r\n        _createAuction(\r\n            _garmentTokenId,\r\n            _reservePrice,\r\n            _startTimestamp,\r\n            _endTimestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Admin or smart contract can list approved Garments\r\n     @dev Sender must have admin or smart contract role\r\n     @dev Owner must have approved this contract for the garment or all garments they own\r\n     @dev End time for the auction must be in the future.\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _reservePrice Garment cannot be sold for less than this or minBidIncrement, whichever is higher\r\n     @param _startTimestamp Unix epoch in seconds for the auction start time\r\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\r\n     */\r\n    function createAuctionOnBehalfOfOwner(\r\n        uint256 _garmentTokenId,\r\n        uint256 _reservePrice,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp\r\n    ) external {\r\n        // Ensure caller has privileges\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),\r\n            \"DigitalaxAuction.createAuctionOnBehalfOfOwner: Sender must have admin or smart contract role\"\r\n        );\r\n\r\n        require(\r\n            garmentNft.isApproved(_garmentTokenId, address(this)),\r\n            \"DigitalaxAuction.createAuctionOnBehalfOfOwner: Cannot create an auction if you do not have approval\"\r\n        );\r\n\r\n        _createAuction(\r\n            _garmentTokenId,\r\n            _reservePrice,\r\n            _startTimestamp,\r\n            _endTimestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Places a new bid, out bidding the existing bidder if found and criteria is reached\r\n     @dev Only callable when the auction is open\r\n     @dev Bids from smart contracts are prohibited to prevent griefing with always reverting receiver\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function placeBid(uint256 _garmentTokenId) external payable nonReentrant whenNotPaused {\r\n        require(_msgSender().isContract() == false, \"DigitalaxAuction.placeBid: No contracts permitted\");\r\n\r\n        // Check the auction to see if this is a valid bid\r\n        Auction storage auction = auctions[_garmentTokenId];\r\n\r\n        // Ensure auction is in flight\r\n        require(\r\n            _getNow() >= auction.startTime && _getNow() <= auction.endTime,\r\n            \"DigitalaxAuction.placeBid: Bidding outside of the auction window\"\r\n        );\r\n\r\n        uint256 bidAmount = msg.value;\r\n\r\n        // Ensure bid adheres to outbid increment and threshold\r\n        HighestBid storage highestBid = highestBids[_garmentTokenId];\r\n        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);\r\n        require(bidAmount >= minBidRequired, \"DigitalaxAuction.placeBid: Failed to outbid highest bidder\");\r\n\r\n        // Refund existing top bidder if found\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\r\n        }\r\n\r\n        // assign top bidder and bid time\r\n        highestBid.bidder = _msgSender();\r\n        highestBid.bid = bidAmount;\r\n        highestBid.lastBidTime = _getNow();\r\n\r\n        emit BidPlaced(_garmentTokenId, _msgSender(), bidAmount);\r\n    }\r\n\r\n    /**\r\n     @notice Given a sender who has the highest bid on a garment, allows them to withdraw their bid\r\n     @dev Only callable by the existing top bidder\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function withdrawBid(uint256 _garmentTokenId) external nonReentrant whenNotPaused {\r\n        HighestBid storage highestBid = highestBids[_garmentTokenId];\r\n\r\n        // Ensure highest bidder is the caller\r\n        require(highestBid.bidder == _msgSender(), \"DigitalaxAuction.withdrawBid: You are not the highest bidder\");\r\n\r\n        // Check withdrawal after delay time\r\n        require(\r\n            _getNow() >= highestBid.lastBidTime.add(bidWithdrawalLockTime),\r\n            \"DigitalaxAuction.withdrawBid: Cannot withdraw until lock time has passed\"\r\n        );\r\n\r\n        require(_getNow() < auctions[_garmentTokenId].endTime, \"DigitalaxAuction.withdrawBid: Past auction end\");\r\n\r\n        uint256 previousBid = highestBid.bid;\r\n\r\n        // Clean up the existing top bid\r\n        delete highestBids[_garmentTokenId];\r\n\r\n        // Refund the top bidder\r\n        _refundHighestBidder(_msgSender(), previousBid);\r\n\r\n        emit BidWithdrawn(_garmentTokenId, _msgSender(), previousBid);\r\n    }\r\n\r\n    //////////\r\n    // Admin /\r\n    //////////\r\n\r\n    /**\r\n     @notice Results a finished auction\r\n     @dev Only admin or smart contract\r\n     @dev Auction can only be resulted if there has been a bidder and reserve met.\r\n     @dev If there have been no bids, the auction needs to be cancelled instead using `cancelAuction()`\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function resultAuction(uint256 _garmentTokenId) external nonReentrant {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),\r\n            \"DigitalaxAuction.resultAuction: Sender must be admin or smart contract\"\r\n        );\r\n\r\n        // Check the auction to see if it can be resulted\r\n        Auction storage auction = auctions[_garmentTokenId];\r\n\r\n        // Check the auction real\r\n        require(auction.endTime > 0, \"DigitalaxAuction.resultAuction: Auction does not exist\");\r\n\r\n        // Check the auction has ended\r\n        require(_getNow() > auction.endTime, \"DigitalaxAuction.resultAuction: The auction has not ended\");\r\n\r\n        // Ensure auction not already resulted\r\n        require(!auction.resulted, \"DigitalaxAuction.resultAuction: auction already resulted\");\r\n\r\n        // Ensure this contract is approved to move the token\r\n        require(garmentNft.isApproved(_garmentTokenId, address(this)), \"DigitalaxAuction.resultAuction: auction not approved\");\r\n\r\n        // Get info on who the highest bidder is\r\n        HighestBid storage highestBid = highestBids[_garmentTokenId];\r\n        address winner = highestBid.bidder;\r\n        uint256 winningBid = highestBid.bid;\r\n\r\n        // Ensure auction not already resulted\r\n        require(winningBid >= auction.reservePrice, \"DigitalaxAuction.resultAuction: reserve not reached\");\r\n\r\n        // Ensure there is a winner\r\n        require(winner != address(0), \"DigitalaxAuction.resultAuction: no open bids\");\r\n\r\n        // Result the auction\r\n        auctions[_garmentTokenId].resulted = true;\r\n\r\n        // Clean up the highest bid\r\n        delete highestBids[_garmentTokenId];\r\n\r\n        // Record the primary sale price for the garment\r\n        garmentNft.setPrimarySalePrice(_garmentTokenId, winningBid);\r\n\r\n        if (winningBid > auction.reservePrice) {\r\n            // Work out total above the reserve\r\n            uint256 aboveReservePrice = winningBid.sub(auction.reservePrice);\r\n\r\n            // Work out platform fee from above reserve amount\r\n            uint256 platformFeeAboveReserve = aboveReservePrice.mul(platformFee).div(1000);\r\n\r\n            // Send platform fee\r\n            (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeAboveReserve}(\"\");\r\n            require(platformTransferSuccess, \"DigitalaxAuction.resultAuction: Failed to send platform fee\");\r\n\r\n            // Send remaining to designer\r\n            (bool designerTransferSuccess,) = garmentNft.garmentDesigners(_garmentTokenId).call{value : winningBid.sub(platformFeeAboveReserve)}(\"\");\r\n            require(designerTransferSuccess, \"DigitalaxAuction.resultAuction: Failed to send the designer their royalties\");\r\n        } else {\r\n            // Send all to the designer\r\n            (bool designerTransferSuccess,) = garmentNft.garmentDesigners(_garmentTokenId).call{value : winningBid}(\"\");\r\n            require(designerTransferSuccess, \"DigitalaxAuction.resultAuction: Failed to send the designer their royalties\");\r\n        }\r\n\r\n        // Transfer the token to the winner\r\n        garmentNft.safeTransferFrom(garmentNft.ownerOf(_garmentTokenId), winner, _garmentTokenId);\r\n\r\n        emit AuctionResulted(_garmentTokenId, winner, winningBid);\r\n    }\r\n\r\n    /**\r\n     @notice Cancels and inflight and un-resulted auctions, returning the funds to the top bidder if found\r\n     @dev Only admin\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function cancelAuction(uint256 _garmentTokenId) external nonReentrant {\r\n        // Admin only resulting function\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),\r\n            \"DigitalaxAuction.cancelAuction: Sender must be admin or smart contract\"\r\n        );\r\n\r\n        // Check valid and not resulted\r\n        Auction storage auction = auctions[_garmentTokenId];\r\n\r\n        // Check auction is real\r\n        require(auction.endTime > 0, \"DigitalaxAuction.cancelAuction: Auction does not exist\");\r\n\r\n        // Check auction not already resulted\r\n        require(!auction.resulted, \"DigitalaxAuction.cancelAuction: auction already resulted\");\r\n\r\n        // refund existing top bidder if found\r\n        HighestBid storage highestBid = highestBids[_garmentTokenId];\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\r\n\r\n            // Clear up highest bid\r\n            delete highestBids[_garmentTokenId];\r\n        }\r\n\r\n        // Remove auction and top bidder\r\n        delete auctions[_garmentTokenId];\r\n\r\n        emit AuctionCancelled(_garmentTokenId);\r\n    }\r\n\r\n    /**\r\n     @notice Toggling the pause flag\r\n     @dev Only admin\r\n     */\r\n    function toggleIsPaused() external {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"DigitalaxAuction.toggleIsPaused: Sender must be admin\");\r\n        isPaused = !isPaused;\r\n        emit PauseToggled(isPaused);\r\n    }\r\n\r\n    /**\r\n     @notice Update the amount by which bids have to increase, across all auctions\r\n     @dev Only admin\r\n     @param _minBidIncrement New bid step in WEI\r\n     */\r\n    function updateMinBidIncrement(uint256 _minBidIncrement) external {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"DigitalaxAuction.updateMinBidIncrement: Sender must be admin\");\r\n        minBidIncrement = _minBidIncrement;\r\n        emit UpdateMinBidIncrement(_minBidIncrement);\r\n    }\r\n\r\n    /**\r\n     @notice Update the global bid withdrawal lockout time\r\n     @dev Only admin\r\n     @param _bidWithdrawalLockTime New bid withdrawal lock time\r\n     */\r\n    function updateBidWithdrawalLockTime(uint256 _bidWithdrawalLockTime) external {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"DigitalaxAuction.updateBidWithdrawalLockTime: Sender must be admin\");\r\n        bidWithdrawalLockTime = _bidWithdrawalLockTime;\r\n        emit UpdateBidWithdrawalLockTime(_bidWithdrawalLockTime);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current reserve price for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _reservePrice New Ether reserve price (WEI value)\r\n     */\r\n    function updateAuctionReservePrice(uint256 _garmentTokenId, uint256 _reservePrice) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updateAuctionReservePrice: Sender must be admin\"\r\n        );\r\n\r\n        require(\r\n            auctions[_garmentTokenId].endTime > 0,\r\n            \"DigitalaxAuction.updateAuctionReservePrice: No Auction exists\"\r\n        );\r\n\r\n        auctions[_garmentTokenId].reservePrice = _reservePrice;\r\n        emit UpdateAuctionReservePrice(_garmentTokenId, _reservePrice);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current start time for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _startTime New start time (unix epoch in seconds)\r\n     */\r\n    function updateAuctionStartTime(uint256 _garmentTokenId, uint256 _startTime) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updateAuctionStartTime: Sender must be admin\"\r\n        );\r\n\r\n        require(\r\n            auctions[_garmentTokenId].endTime > 0,\r\n            \"DigitalaxAuction.updateAuctionStartTime: No Auction exists\"\r\n        );\r\n\r\n        auctions[_garmentTokenId].startTime = _startTime;\r\n        emit UpdateAuctionStartTime(_garmentTokenId, _startTime);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current end time for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _endTimestamp New end time (unix epoch in seconds)\r\n     */\r\n    function updateAuctionEndTime(uint256 _garmentTokenId, uint256 _endTimestamp) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updateAuctionEndTime: Sender must be admin\"\r\n        );\r\n        require(\r\n            auctions[_garmentTokenId].endTime > 0,\r\n            \"DigitalaxAuction.updateAuctionEndTime: No Auction exists\"\r\n        );\r\n        require(\r\n            auctions[_garmentTokenId].startTime < _endTimestamp,\r\n            \"DigitalaxAuction.updateAuctionEndTime: End time must be greater than start\"\r\n        );\r\n        require(\r\n            _endTimestamp > _getNow(),\r\n            \"DigitalaxAuction.updateAuctionEndTime: End time passed. Nobody can bid\"\r\n        );\r\n\r\n        auctions[_garmentTokenId].endTime = _endTimestamp;\r\n        emit UpdateAuctionEndTime(_garmentTokenId, _endTimestamp);\r\n    }\r\n\r\n    /**\r\n     @notice Method for updating the access controls contract used by the NFT\r\n     @dev Only admin\r\n     @param _accessControls Address of the new access controls contract (Cannot be zero address)\r\n     */\r\n    function updateAccessControls(DigitalaxAccessControls _accessControls) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updateAccessControls: Sender must be admin\"\r\n        );\r\n\r\n        require(address(_accessControls) != address(0), \"DigitalaxAuction.updateAccessControls: Zero Address\");\r\n\r\n        accessControls = _accessControls;\r\n        emit UpdateAccessControls(address(_accessControls));\r\n    }\r\n\r\n    /**\r\n     @notice Method for updating platform fee\r\n     @dev Only admin\r\n     @param _platformFee uint256 the platform fee to set\r\n     */\r\n    function updatePlatformFee(uint256 _platformFee) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updatePlatformFee: Sender must be admin\"\r\n        );\r\n\r\n        platformFee = _platformFee;\r\n        emit UpdatePlatformFee(_platformFee);\r\n    }\r\n\r\n    /**\r\n     @notice Method for updating platform fee address\r\n     @dev Only admin\r\n     @param _platformFeeRecipient payable address the address to sends the funds to\r\n     */\r\n    function updatePlatformFeeRecipient(address payable _platformFeeRecipient) external {\r\n        require(\r\n            accessControls.hasAdminRole(_msgSender()),\r\n            \"DigitalaxAuction.updatePlatformFeeRecipient: Sender must be admin\"\r\n        );\r\n\r\n        require(_platformFeeRecipient != address(0), \"DigitalaxAuction.updatePlatformFeeRecipient: Zero address\");\r\n\r\n        platformFeeRecipient = _platformFeeRecipient;\r\n        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\r\n    }\r\n\r\n    ///////////////\r\n    // Accessors //\r\n    ///////////////\r\n\r\n    /**\r\n     @notice Method for getting all info about the auction\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function getAuction(uint256 _garmentTokenId)\r\n    external\r\n    view\r\n    returns (uint256 _reservePrice, uint256 _startTime, uint256 _endTime, bool _resulted) {\r\n        Auction storage auction = auctions[_garmentTokenId];\r\n        return (\r\n        auction.reservePrice,\r\n        auction.startTime,\r\n        auction.endTime,\r\n        auction.resulted\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Method for getting all info about the highest bidder\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     */\r\n    function getHighestBidder(uint256 _garmentTokenId) external view returns (\r\n        address payable _bidder,\r\n        uint256 _bid,\r\n        uint256 _lastBidTime\r\n    ) {\r\n        HighestBid storage highestBid = highestBids[_garmentTokenId];\r\n        return (\r\n            highestBid.bidder,\r\n            highestBid.bid,\r\n            highestBid.lastBidTime\r\n        );\r\n    }\r\n\r\n    /////////////////////////\r\n    // Internal and Private /\r\n    /////////////////////////\r\n\r\n    function _getNow() internal virtual view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     @notice Private method doing the heavy lifting of creating an auction\r\n     @param _garmentTokenId Token ID of the garment being auctioned\r\n     @param _reservePrice Garment cannot be sold for less than this or minBidIncrement, whichever is higher\r\n     @param _startTimestamp Unix epoch in seconds for the auction start time\r\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\r\n     */\r\n    function _createAuction(\r\n        uint256 _garmentTokenId,\r\n        uint256 _reservePrice,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp\r\n    ) private {\r\n        // Ensure a token cannot be re-listed if previously successfully sold\r\n        require(auctions[_garmentTokenId].endTime == 0, \"DigitalaxAuction.createAuction: Cannot relist\");\r\n\r\n        // Check end time not before start time and that end is in the future\r\n        require(_endTimestamp > _startTimestamp, \"DigitalaxAuction.createAuction: End time must be greater than start\");\r\n        require(_endTimestamp > _getNow(), \"DigitalaxAuction.createAuction: End time passed. Nobody can bid.\");\r\n\r\n        // Setup the auction\r\n        auctions[_garmentTokenId] = Auction({\r\n        reservePrice : _reservePrice,\r\n        startTime : _startTimestamp,\r\n        endTime : _endTimestamp,\r\n        resulted : false\r\n        });\r\n\r\n        emit AuctionCreated(_garmentTokenId);\r\n    }\r\n\r\n    /**\r\n     @notice Used for sending back escrowed funds from a previous bid\r\n     @param _currentHighestBidder Address of the last highest bidder\r\n     @param _currentHighestBid Ether amount in WEI that the bidder sent when placing their bid\r\n     */\r\n    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {\r\n        // refund previous best (if bid exists)\r\n        (bool successRefund,) = _currentHighestBidder.call{value : _currentHighestBid}(\"\");\r\n        require(successRefund, \"DigitalaxAuction._refundHighestBidder: failed to refund previous bidder\");\r\n        emit BidRefunded(_currentHighestBidder, _currentHighestBid);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DigitalaxAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"contract IDigitalaxGarmentNFT\",\"name\":\"_garmentNft\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"}],\"name\":\"AuctionResulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DigitalaxAuctionContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accessControls\",\"type\":\"address\"}],\"name\":\"UpdateAccessControls\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionReservePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"garmentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateBidWithdrawalLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"UpdateMinBidIncrement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePlatformFeeRecipient\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract DigitalaxAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidWithdrawalLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"createAuctionOnBehalfOfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"garmentNft\",\"outputs\":[{\"internalType\":\"contract IDigitalaxGarmentNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"resultAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DigitalaxAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"updateAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateAuctionEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"updateAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateAuctionStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"updateBidWithdrawalLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"updateMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"updatePlatformFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_garmentTokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DigitalaxAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000165eec91620b7bb96d02890d8a3f8cb79a29195c0000000000000000000000000b509f4b044f713a91bb50535914f7ad160532fe00000000000000000000000010c0b0da2a682c12bd36516a95cb8474c02d83de","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a63014e7314e81cbdcf071bc9297e522e9c193bf825476ba650504b6655af031"}]}