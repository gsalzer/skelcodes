{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/nicklatkovich/pixelplex/riochain/lottery-like-pool/contracts/LinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nstruct LinkedNode {\\n    bool inited;\\n    uint256 value;\\n    uint256 prev;\\n    uint256 next;\\n}\\n\\nstruct LinkedList {\\n    uint256 head;\\n    uint256 last;\\n    mapping(uint256 => LinkedNode) mem;\\n    uint256 it;\\n    uint256 length;\\n}\\n\\nlibrary LinkedListLib {\\n    function insert(\\n        LinkedList storage self,\\n        uint256 bearingPointer,\\n        uint256 value\\n    ) internal returns (uint256 pointer) {\\n        LinkedNode storage node = self.mem[bearingPointer];\\n        require(node.inited || bearingPointer == 0, \\\"LinkedList insert: pointer out of scope\\\");\\n        self.it += 1;\\n        LinkedNode storage newNode = self.mem[self.it];\\n        newNode.inited = true;\\n        newNode.value = value;\\n        newNode.prev = bearingPointer;\\n        newNode.next = bearingPointer == 0 ? self.head : node.next;\\n        node.next = self.it;\\n        self.mem[newNode.prev].next = self.it;\\n        self.mem[newNode.next].prev = self.it;\\n        if (bearingPointer == 0) self.head = self.it;\\n        if (bearingPointer == self.last) self.last = self.it;\\n        self.length += 1;\\n        return self.it;\\n    }\\n\\n    function remove(LinkedList storage self, uint256 pointer) internal {\\n        LinkedNode storage node = self.mem[pointer];\\n        require(node.inited, \\\"LinkedList remove: pointer out of scope\\\");\\n        node.inited = false;\\n        self.mem[node.prev].next = node.next;\\n        self.mem[node.next].prev = node.prev;\\n        if (self.head == pointer) self.head = node.next;\\n        if (self.last == pointer) self.last = node.prev;\\n        self.length -= 1;\\n    }\\n\\n    function get(LinkedList storage self, uint256 pointer) internal view returns (uint256 value) {\\n        LinkedNode storage node = self.mem[pointer];\\n        require(node.inited, \\\"LinkedList get: pointer out of scope\\\");\\n        return node.value;\\n    }\\n\\n    function getNode(LinkedList storage self, uint256 pointer) internal view returns (LinkedNode memory) {\\n        LinkedNode storage node = self.mem[pointer];\\n        require(node.inited, \\\"LinkedList getNode: pointer out of scope\\\");\\n        return node;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/lottery-like-pool/contracts/LotteryLikePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./LinkedList.sol\\\";\\nimport \\\"./TwoStageOwnable.sol\\\";\\n\\ncontract LotteryLikePool is TwoStageOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using LinkedListLib for LinkedList;\\n\\n    /// @notice Returns the time (in seconds) the owner has to verify the random seed\\n    function ownerSubmittingPeriod() public virtual pure returns (uint256) {\\n        return 1 days;\\n    }\\n\\n    /// @notice Returns the time (in seconds) that the participants have to withdraw their rewards after round is closed\\n    function rewardWithdrawalPeriod() public virtual pure returns (uint256) {\\n        return 6 days;\\n    }\\n\\n    /// @notice Returns duration of one round (in seconds)\\n    function roundPeriod() public virtual pure returns (uint256) {\\n        return 1 weeks;\\n    }\\n\\n    /// @return Block number in which transaction applies\\n    /// @dev Method is virtual to override it for tests\\n    function getBlockNumber() internal virtual view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @return Timestamp of block in which transaction applies\\n    /// @dev Method is virtual to override it for tests\\n    function getTimestamp() internal virtual view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @return Hash of specific block\\n    /// @dev Method is virtual to override it for tests\\n    function getBlockhash(uint256 blockNumber) internal virtual view returns (bytes32) {\\n        return blockhash(blockNumber);\\n    }\\n\\n    struct ActiveEntryListElement {\\n        Entry entry;\\n        LinkedNode linkedNode;\\n    }\\n\\n    /// @dev Represents entry (or entries) for a single round\\n    /// @param active True if entry is active and false otherwise.\\n    ///     All new entries are active. But entry can be deactivated during result calculation process\\n    /// @param amount Amount of entries. Equals to paid amount / 1e18\\n    /// @param from Sum of all previous active entries amounts\\n    /// @param pointer Pointer in active entries list\\n    /// @param to The same as `from` but with added amount\\n    /// @param account Address of entries owner\\n    struct Entry {\\n        bool active;\\n        uint256 amount;\\n        uint256 from;\\n        uint256 pointer;\\n        uint256 to;\\n        address account;\\n    }\\n\\n    /// @dev Represents single participant of a single round\\n    /// @param active True if account is participant of round\\n    /// @param rewardPaid True if participant reward paid and false if they are not paid or participant has no rewards\\n    /// @param winner True if participant is winner\\n    /// @param entriesCount Sum of participant entries amounts\\n    /// @param reward Reward amount of participant\\n    struct RoundParticipant {\\n        bool active;\\n        bool rewardPaid;\\n        bool winner;\\n        uint256 entriesCount;\\n        uint256 reward;\\n    }\\n\\n    /// @dev Represents common information of round\\n    /// @param closed True if round is closed and winners are defined\\n    /// @param closedAt Timestamp (in seconds) of round closing. Equals to `0` if round not closed\\n    /// @param endsAt Timestamp (in seconds) of round ending. When round ended buying entries for it not possible\\n    /// @param index Round index\\n    /// @param nonWithdrawnRewards Sum of rewards that has not been withdrawn.\\n    ///     Increases on every `increasePool` method call and reduced by method `withdrawRewards`.\\n    ///     When non withdrawn rewards are reused in other round `nonWithdrawnRewards` will be equals to 0\\n    ///     (reusing rewards are the same as withdrawing them and increasing pool of another round)\\n    /// @param totalEntries Sum of entries amounts\\n    /// @param totalReward Amount of rewards pool. Increases on every `increasePool` call. Never reduced\\n    /// @param participants Array of participants addresses\\n    /// @param winners Array of winners addresses\\n    struct RoundProps {\\n        bool closed;\\n        uint256 closedAt;\\n        uint256 endsAt;\\n        uint256 index;\\n        uint256 nonWithdrawnRewards;\\n        uint256 totalEntries;\\n        uint256 totalReward;\\n        address[] participants;\\n        address[] winners;\\n    }\\n\\n    /// @dev Represents technical information about round results calculation process\\n    /// @param sealedSeedProvided True if sealed seed provided (see method `provideSealedSeed`)\\n    /// @param activeEntriesAmount Sum of active entries amounts. Reduces by gaps resolving\\n    /// @param gapPointer Pointer of entry that should be removed from active entries list\\n    /// @param iteratedEntriesCount Count of iterated entries\\n    /// @param passedIterationsCount Count of passed iterations\\n    /// @param seedRevealingBlockNumber Block number after which sealed seed can be revealed.\\n    ///     Hash of block with this number will be used to generate random seed.\\n    ///     Sealed seed can not be revealed after `seedRevealingBlockNumber` + 256\\n    /// @param sealedSeed Sealed seed - hash of original seed\\n    /// @param seed Seed of round that used to calculate results\\n    struct RoundCalculation {\\n        bool sealedSeedProvided;\\n        uint256 activeEntriesAmount;\\n        uint256 gapPointer;\\n        uint256 iteratedEntriesCount;\\n        uint256 passedIterationsCount;\\n        uint256 seedRevealingBlockNumber;\\n        bytes32 sealedSeed;\\n        bytes32 seed;\\n    }\\n\\n    /// @dev Represents full round information\\n    /// @param props Common properties of round (see `RoundProps` struct for details)\\n    /// @param calculation Technical information about round results calculation process\\n    ///     (see `RoundCalculation` struct for details)\\n    /// @param activeEntries List of active entries. Used in calculation.\\n    ///     Not moved to `RoundCalculation` structure since linked list has mapping in it\\n    /// @param entries Array of all entries\\n    /// @param participants Map of participants. Key is participant address. Value is `RoundParticipant` structure\\n    struct Round {\\n        RoundProps props;\\n        RoundCalculation calculation;\\n        LinkedList activeEntries;\\n        Entry[] entries;\\n        mapping(address => RoundParticipant) participants;\\n    }\\n\\n    /// @dev Total amount of tokens that have been spent buying entries but not withdrawn by owner\\n    uint256 private _totalStaked;\\n\\n    /// @dev ERC20 staking token address. Used for buying entries\\n    IERC20 private _stakingToken;\\n\\n    /// @dev ERC20 jackpot token address. Used for paying rewards\\n    IERC20 private _jackpotToken;\\n\\n    /// @dev Rewards dividers for first 5 winners.\\n    ///     Reward can be calculated using `totalReward/rewardsDivider[winnerIndex]`\\n    uint256[5] private rewardsDivider = [2, 4, 8, 16, 16];\\n\\n    /// @dev Array of all rounds. See `Round` structure for details\\n    Round[] private rounds;\\n\\n    /// @notice Returns total amount of tokens that have been spent buying entries but not withdrawn by owner\\n    function totalStaked() public view returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    /// @notice Returns address of staking token (this is the one that used for buying entries)\\n    function stakingToken() public view returns (IERC20) {\\n        return _stakingToken;\\n    }\\n\\n    /// @notice Returns address of jackpot token (this is the one that used for paying rewards)\\n    function jackpotToken() public view returns (IERC20) {\\n        return _jackpotToken;\\n    }\\n\\n    /// @notice Returns count of already created rounds\\n    function roundsCount() public view returns (uint256) {\\n        return rounds.length;\\n    }\\n\\n    /// @notice Returns all entries of specific round\\n    /// @param roundIndex Round index for which entries list should be returned\\n    function roundEntries(uint256 roundIndex) public view returns (Entry[] memory) {\\n        return _getRound(roundIndex).entries;\\n    }\\n\\n    /// @notice Returns common round information. See struct `RoundProps` for details\\n    /// @param roundIndex Round index for which information should be returned\\n    function round(uint256 roundIndex) public view returns (RoundProps memory) {\\n        return _getRound(roundIndex).props;\\n    }\\n\\n    /// @notice Returns information about round calculations. See struct `RoundCalculation` for details\\n    /// @param roundIndex Round index for which information should be returned\\n    function roundCalculation(uint256 roundIndex) public view returns (RoundCalculation memory) {\\n        return _getRound(roundIndex).calculation;\\n    }\\n\\n    /// @notice Returns round participant inforation. See struct `RoundParticipant` for details\\n    /// @param roundIndex Round index for which inforation should be returned\\n    /// @param account Address of participant for which inforation should be returned\\n    function roundParticipant(uint256 roundIndex, address account) public view returns (RoundParticipant memory) {\\n        Round storage round_ = _getRound(roundIndex);\\n        return round_.participants[account];\\n    }\\n\\n    /// @dev Returns list of currently active entries. May changes when calculation in process\\n    /// @return head Pointer of first active entry\\n    /// @return last Pointer of last active entry\\n    /// @return lastAllocation Pointer of last created entry\\n    /// @return length Count of active entries\\n    /// @return result Array of active entries and its list's element property\\n    function activeEntriesList(uint256 roundIndex)\\n        public\\n        view\\n        returns (\\n            uint256 head,\\n            uint256 last,\\n            uint256 lastAllocation,\\n            uint256 length,\\n            ActiveEntryListElement[] memory result\\n        )\\n    {\\n        Round storage round_ = _getRound(roundIndex);\\n        LinkedList storage list = round_.activeEntries;\\n        head = list.head;\\n        last = list.last;\\n        lastAllocation = list.it;\\n        length = list.length;\\n        result = new ActiveEntryListElement[](length);\\n        uint256 it = list.head;\\n        for (uint256 index = 0; index < length; index += 1) {\\n            LinkedNode memory node = list.getNode(it);\\n            result[index] = ActiveEntryListElement({entry: round_.entries[node.value], linkedNode: node});\\n            it = node.next;\\n        }\\n    }\\n\\n    event EntriesPurchased(\\n        uint256 indexed roundIndex,\\n        address indexed purchaser,\\n        uint256 indexed entryIndex,\\n        uint256 amount\\n    );\\n    event JackpotIncreased(uint256 indexed roundIndex, address indexed payer, uint256 amount);\\n    event NonWithdrawnRewardsReused(uint256 indexed fromRoundIndex, uint256 indexed inRoundIndex);\\n    event MissingSeedProvided(uint256 indexed roundIndex, bytes32 seed);\\n    event NewRoundCreated(uint256 indexed index, uint256 endsAt);\\n    event SealedSeedProvided(uint256 indexed roundIndex, bytes32 sealedSeed, uint256 revealingBlockNumber);\\n    event SeedRevealed(uint256 indexed roundIndex, bytes32 revealedSeed, bytes32 savedSeed);\\n    event StakeWithdrawn(uint256 amount);\\n    event RewardWithdrawn(uint256 indexed roundIndex, address indexed winner, uint256 amount);\\n    event RoundClosed(uint256 indexed index);\\n    event RoundEnded(uint256 indexed index);\\n    event WinnerDefined(uint256 indexed roundIndex, address indexed account, uint256 rewardAmount);\\n\\n    /// @param stakingToken_ ERC20 token that will be used to buy entries\\n    /// @param jackpotToken_ ERC20 token that will be used as rewards of rounds\\n    /// @param firstRoundEndsAt Timestamp (in seconds) when first created round will ends\\n    /// @param owner_ Address of owner\\n    constructor(\\n        IERC20 stakingToken_,\\n        IERC20 jackpotToken_,\\n        uint256 firstRoundEndsAt,\\n        address owner_\\n    ) public TwoStageOwnable(owner_) {\\n        _stakingToken = stakingToken_;\\n        _jackpotToken = jackpotToken_;\\n        rounds.push();\\n        rounds[0].props.endsAt = firstRoundEndsAt;\\n    }\\n\\n    /// @notice Calculates specific round results\\n    /// @param roundIndex Index of round\\n    /// @param iterableEntries Array of entries indexes that expected to be iterated\\n    /// @param iterableEntriesOffset Count of skipped iterable entries. Needed to solve race conditions\\n    /// @param limit Max count of iterations that should be passed in transaction\\n    function calculateRoundResults(\\n        uint256 roundIndex,\\n        uint256[] memory iterableEntries,\\n        uint256 iterableEntriesOffset,\\n        uint256 limit\\n    ) external returns (bool success) {\\n        require(limit > 0, \\\"Limit not positive\\\");\\n        Round storage round_ = _getRound(roundIndex);\\n        require(round_.calculation.seed != bytes32(0), \\\"Seed not revealed\\\");\\n        require(!round_.props.closed, \\\"Result already has been calculated\\\");\\n        require(iterableEntriesOffset <= round_.calculation.iteratedEntriesCount, \\\"Gap in iterable entries list\\\");\\n        if (round_.calculation.gapPointer == 0) {\\n            // if there is first calculation call\\n            // or if there is no resolved gap in last iteration of previous calculation\\n            // then next iterable entries should be provided\\n            require(\\n                iterableEntries.length.add(iterableEntriesOffset) > round_.calculation.iteratedEntriesCount,\\n                \\\"Nothing to calculate\\\"\\n            );\\n        }\\n        _calculateResults(round_, iterableEntries, iterableEntriesOffset, limit);\\n        return true;\\n    }\\n\\n    /// @notice Creates new round\\n    function createNewRound() public returns (bool success) {\\n        uint256 timestamp = getTimestamp();\\n        uint256 roundsCount_ = rounds.length;\\n        rounds.push();\\n        Round storage newRound = rounds[roundsCount_];\\n        Round storage previousRound = rounds[roundsCount_.sub(1)];\\n        uint256 newRoundEndsAt;\\n        uint256 roundPeriod_ = roundPeriod();\\n        if (previousRound.props.endsAt >= timestamp) newRoundEndsAt = previousRound.props.endsAt.add(roundPeriod_);\\n        else {\\n            uint256 passedWeeksCount = timestamp.sub(previousRound.props.endsAt).div(roundPeriod_);\\n            newRoundEndsAt = previousRound.props.endsAt.add(passedWeeksCount.add(1).mul(roundPeriod_));\\n        }\\n        newRound.props.endsAt = newRoundEndsAt;\\n        emit NewRoundCreated(roundsCount_, newRoundEndsAt);\\n        newRound.props.index = roundsCount_;\\n        return true;\\n    }\\n\\n    /// @notice Method to buy entries. Should approve `amount` * 1e18 of staking token for using by this contract\\n    /// @param roundIndex Index of round to participate in. Round should not be ended\\n    /// @param amount Amount of entries to buy\\n    function buyEntries(uint256 roundIndex, uint256 amount) external onlyPositiveAmount(amount) returns (bool success) {\\n        _updateRound();\\n        address participant = msg.sender;\\n        Round storage round_ = _getRound(roundIndex);\\n        require(round_.props.endsAt > getTimestamp(), \\\"Round already ended\\\");\\n        uint256 newTotalAmount = round_.calculation.activeEntriesAmount.add(amount);\\n        Entry[] storage entries = round_.entries;\\n        uint256 newEntryIndex = entries.length;\\n        LinkedList storage roundActiveEntries = round_.activeEntries;\\n        uint256 pointer = roundActiveEntries.insert(roundActiveEntries.last, newEntryIndex);\\n        entries.push(\\n            Entry({\\n                active: true,\\n                amount: amount,\\n                from: round_.calculation.activeEntriesAmount,\\n                pointer: pointer,\\n                to: newTotalAmount,\\n                account: participant\\n            })\\n        );\\n        round_.calculation.activeEntriesAmount = newTotalAmount;\\n        round_.props.totalEntries = newTotalAmount;\\n        RoundParticipant storage roundParticipant_ = round_.participants[participant];\\n        roundParticipant_.entriesCount = roundParticipant_.entriesCount.add(amount);\\n        if (!roundParticipant_.active) {\\n            roundParticipant_.active = true;\\n            round_.props.participants.push(participant);\\n        }\\n        uint256 stakeAmount = amount.mul(10**18);\\n        _totalStaked = _totalStaked.add(stakeAmount);\\n        emit EntriesPurchased(roundIndex, participant, newEntryIndex, amount);\\n        _stakingToken.safeTransferFrom(participant, address(this), stakeAmount);\\n        return true;\\n    }\\n\\n    /// @notice Increases round jackpot. Should approve `amount` of jackpot token for using by this contract\\n    /// @param roundIndex Index of round in which jackpot should be increased. Round should not be ended\\n    /// @param amount Amount of increasing\\n    function increaseJackpot(uint256 roundIndex, uint256 amount)\\n        public\\n        onlyPositiveAmount(amount)\\n        returns (bool success)\\n    {\\n        _updateRound();\\n        Round storage round_ = _getRound(roundIndex);\\n        require(round_.props.endsAt > getTimestamp(), \\\"Round already ended\\\");\\n        round_.props.totalReward = round_.props.totalReward.add(amount);\\n        round_.props.nonWithdrawnRewards = round_.props.nonWithdrawnRewards.add(amount);\\n        emit JackpotIncreased(roundIndex, msg.sender, amount);\\n        _jackpotToken.safeTransferFrom(msg.sender, address(this), amount);\\n        return true;\\n    }\\n\\n    /// @notice Provides missing seed. Method added to fill case, when owner not provides seed by himself.\\n    ///     Conditions of successful providing:\\n    ///      * Seed should not been provided before it;\\n    ///      * If sealed seed provided by owner then more than 256 blocks should be produced after that;\\n    ///      * If sealed seed not provided owner submitting period should be ended.\\n    ///     Sets round seed to hash of previous block. Not the most honest implementation.\\n    ///     But since this is only a fuse in case the owner does not do his job, that's okay.\\n    /// @param roundIndex Round index for which missing seed provided\\n    function provideMissingSeed(uint256 roundIndex) public returns (bool success) {\\n        Round storage round_ = _getRound(roundIndex);\\n        uint256 blockNumber = getBlockNumber();\\n        require(round_.calculation.seed == bytes32(0), \\\"Seed already provided\\\");\\n        uint256 endsAt = round_.props.endsAt;\\n        if (round_.calculation.sealedSeedProvided) {\\n            bool revealingPhase = blockNumber > round_.calculation.seedRevealingBlockNumber;\\n            bool blockHashable = getBlockhash(round_.calculation.seedRevealingBlockNumber) != bytes32(0);\\n            require(revealingPhase && !blockHashable, \\\"Less than 256 blocks passed from providing sealed seed\\\");\\n        } else require(endsAt.add(ownerSubmittingPeriod()) < getTimestamp(), \\\"Owner submitting period not passed\\\");\\n        round_.calculation.sealedSeedProvided = true;\\n        bytes32 seed = getBlockhash(blockNumber.sub(1));\\n        round_.calculation.seed = seed;\\n        emit MissingSeedProvided(roundIndex, seed);\\n        return true;\\n    }\\n\\n    /// @notice Provides sealed seed for random. Applicable only by contract owner\\n    /// @param roundIndex Round index for which sealed seed provided\\n    /// @param sealedSeed Keccak-256 hash of original seed. Original seed should be a random 32 bytes.\\n    ///     Original seed also should be remembered to provide it in `revealSealedSeed` method\\n    function provideSealedSeed(uint256 roundIndex, bytes32 sealedSeed) public onlyOwner returns (bool success) {\\n        Round storage round_ = _getRound(roundIndex);\\n        require(!round_.calculation.sealedSeedProvided, \\\"Sealed seed already provided\\\");\\n        require(round_.props.endsAt <= getTimestamp(), \\\"Round not ended\\\");\\n        round_.calculation.sealedSeedProvided = true;\\n        round_.calculation.sealedSeed = sealedSeed;\\n        uint256 revealingBlockNumber = getBlockNumber() + 1;\\n        round_.calculation.seedRevealingBlockNumber = revealingBlockNumber;\\n        emit SealedSeedProvided(roundIndex, sealedSeed, revealingBlockNumber);\\n        return true;\\n    }\\n\\n    /// @notice Will reuse non withdrawn rewards as jackpot of the current one.\\n    ///     \\\"From\\\" round should be closed and reward withdrawal period should be passed.\\n    ///     Also appicable when round ended but there is no participants in it\\n    /// @param fromRoundIndex Round from which unwithdrawn rewards should be removed\\n    /// @param inRoundIndex Current round index\\n    function reuseNonWithdrawnRewards(uint256 fromRoundIndex, uint256 inRoundIndex) public returns (bool success) {\\n        _updateRound();\\n        uint256 timestamp = getTimestamp();\\n        RoundProps storage fromRoundProps = _getRound(fromRoundIndex).props;\\n        if (fromRoundProps.participants.length > 0) {\\n            require(fromRoundProps.closed, \\\"From round not closed\\\");\\n            uint256 applicableAt = fromRoundProps.closedAt.add(rewardWithdrawalPeriod());\\n            require(timestamp >= applicableAt, \\\"Users can withdraw their rewards\\\");\\n        } else require(timestamp >= fromRoundProps.endsAt, \\\"Round not ended\\\");\\n        uint256 reusedAmount = fromRoundProps.nonWithdrawnRewards;\\n        require(reusedAmount > 0, \\\"Nothing to reuse\\\");\\n        RoundProps storage inRoundProps = _getRound(inRoundIndex).props;\\n        require(timestamp < inRoundProps.endsAt, \\\"In round already ended\\\");\\n        require(timestamp >= _getRound(inRoundIndex.sub(1)).props.endsAt, \\\"Able to reuse only for current round\\\");\\n        fromRoundProps.nonWithdrawnRewards = 0;\\n        inRoundProps.totalReward = inRoundProps.totalReward.add(reusedAmount);\\n        inRoundProps.nonWithdrawnRewards = inRoundProps.nonWithdrawnRewards.add(reusedAmount);\\n        emit NonWithdrawnRewardsReused(fromRoundIndex, inRoundIndex);\\n        return true;\\n    }\\n\\n    /// @notice Method to reveal sealed seed. Applicable only by contract owner.\\n    ///     Before revealing sealed seed it should be provided via `provideSealedSeed` method.\\n    ///     Applicable only next to 2 blocks after sealed seed has been provided but before next 256 blocks\\n    /// @param roundIndex Round index for which sealed seed should be revealed\\n    /// @param seed Original seed. See NatSpec for `provideSealedSeed` method\\n    function revealSealedSeed(uint256 roundIndex, bytes32 seed) public onlyOwner returns (bool success) {\\n        Round storage round_ = _getRound(roundIndex);\\n        require(round_.calculation.seed == bytes32(0), \\\"Seed already revealed\\\");\\n        require(round_.calculation.sealedSeedProvided, \\\"Sealed seed not provided\\\");\\n        uint256 seedRevealingBlockNumber = round_.calculation.seedRevealingBlockNumber;\\n        require(getBlockNumber() > seedRevealingBlockNumber, \\\"Unable to reveal sealed seed on the same block\\\");\\n        bytes32 revealingBlockHash = getBlockhash(seedRevealingBlockNumber);\\n        require(revealingBlockHash != bytes32(0), \\\"More than 256 blocks passed from providing sealed seed\\\");\\n        require(keccak256(abi.encodePacked(msg.sender, seed)) == round_.calculation.sealedSeed, \\\"Invalid seed\\\");\\n        bytes32 newSeed = keccak256(abi.encodePacked(revealingBlockHash, seed));\\n        round_.calculation.seed = newSeed;\\n        emit SeedRevealed(roundIndex, seed, newSeed);\\n        return true;\\n    }\\n\\n    /// @notice Withdraws tokens, that have been spent buying entries. Applicable only by contract owner\\n    /// @param amount Amount of tokens to withdraw\\n    function withdrawStake(uint256 amount) external onlyOwner onlyPositiveAmount(amount) returns (bool success) {\\n        _totalStaked = _totalStaked.sub(amount, \\\"Staking pool is extinguished\\\");\\n        emit StakeWithdrawn(amount);\\n        _stakingToken.safeTransfer(owner, amount);\\n        return true;\\n    }\\n\\n    /// @notice Withdraws rewards of specific round\\n    /// @param roundIndex Round index from which rewards should be withdrawn\\n    function withdrawRewards(uint256 roundIndex) external returns (bool success) {\\n        address caller = msg.sender;\\n        Round storage round_ = _getRound(roundIndex);\\n        RoundParticipant storage participant = round_.participants[caller];\\n        require(participant.winner, \\\"Not a round winner\\\");\\n        require(!participant.rewardPaid, \\\"Round reward already paid\\\");\\n        uint256 amount = participant.reward;\\n        require(amount > 0, \\\"Reward amount is equal to zero\\\");\\n        require(round_.props.nonWithdrawnRewards >= amount, \\\"Reward reused as next jackpot\\\");\\n        participant.rewardPaid = true;\\n        round_.props.nonWithdrawnRewards = round_.props.nonWithdrawnRewards.sub(amount);\\n        emit RewardWithdrawn(roundIndex, caller, amount);\\n        _jackpotToken.safeTransfer(caller, amount);\\n        return true;\\n    }\\n\\n    /// @dev Creates new round if the last one is ended. Also emits `RoundEnded` event in this case\\n    function _updateRound() internal {\\n        uint256 lastRoundIndex = rounds.length.sub(1);\\n        if (rounds[lastRoundIndex].props.endsAt > getTimestamp()) return;\\n        emit RoundEnded(lastRoundIndex);\\n        createNewRound();\\n    }\\n\\n    /// @dev Returns round by its index. Result is storage type so it can be modified to modify state.\\n    ///     Reverts an error when index greater than or equals to round count\\n    function _getRound(uint256 index) private view returns (Round storage) {\\n        require(index < rounds.length, \\\"Round not found\\\");\\n        return rounds[index];\\n    }\\n\\n    /// @dev Calculates results of round\\n    /// @param round_ Storage type of round to calculate\\n    /// @param iterableEntries Array of entries indexes that expected to be iterated\\n    /// @param iterableEntriesOffset Number of entries that was skipped in `iterableEntries` array.\\n    ///     Needed to solve race conditions\\n    /// @param limit Max count of iteration to calculate\\n    function _calculateResults(\\n        Round storage round_,\\n        uint256[] memory iterableEntries,\\n        uint256 iterableEntriesOffset,\\n        uint256 limit\\n    ) private {\\n        uint256 passedIterationsCount = round_.calculation.passedIterationsCount;\\n        round_.calculation.passedIterationsCount = passedIterationsCount.add(1);\\n        // If previous iteration found entry to be removed\\n        //      or if it not resolves removing previously found removable entry\\n        if (round_.calculation.gapPointer > 0) {\\n            // process entry removing\\n            _processGap(round_);\\n            // and start new iteration if limit not reached\\n            if (limit > 1) _calculateResults(round_, iterableEntries, iterableEntriesOffset, limit - 1);\\n            return;\\n        }\\n        // Generate iteration seed by hashing round seed and iteration index\\n        uint256 random = uint256(keccak256(abi.encodePacked(round_.calculation.seed, passedIterationsCount)));\\n        uint256 iteratedEntriesCount = round_.calculation.iteratedEntriesCount;\\n        // If there is not enough indexes in `iterableEntries` list just finish calculation\\n        if (iterableEntries.length.add(iterableEntriesOffset) <= iteratedEntriesCount) return;\\n        // Get random number from 0 inclusive to total round entries exclusive\\n        random = random.mod(round_.calculation.activeEntriesAmount);\\n        // Get expected iterable entry\\n        uint256 potensionalIterableEntryIndex = iterableEntries[iteratedEntriesCount.sub(iterableEntriesOffset)];\\n        require(potensionalIterableEntryIndex < round_.entries.length, \\\"Invalid iterable entry index\\\");\\n        Entry storage potensionalIterableEntry = round_.entries[potensionalIterableEntryIndex];\\n        round_.calculation.iteratedEntriesCount = iteratedEntriesCount.add(1);\\n        // Expected iterable entry should be active (not removed from active list)\\n        require(potensionalIterableEntry.active, \\\"Expected iterable entry not active\\\");\\n        // Check that iterated entry is correct\\n        require(\\n            potensionalIterableEntry.from <= random && potensionalIterableEntry.to > random,\\n            \\\"Invalid expected iterable entry\\\"\\n        );\\n        address potensionalWinningAddress = potensionalIterableEntry.account;\\n        RoundParticipant storage roundParticipant_ = round_.participants[potensionalWinningAddress];\\n        // If entry owner not a winner\\n        if (!roundParticipant_.winner) {\\n            // make it winner\\n            bool shouldBreak = _processWinner(round_, roundParticipant_, potensionalWinningAddress);\\n            // and if he is the last winner (5th or no more non winners) just stop calculation\\n            if (shouldBreak) return;\\n        } else {\\n            // otherwise, if he is already winner mark his entry to remove\\n            round_.calculation.gapPointer = potensionalIterableEntry.pointer;\\n        }\\n        // If limit not reached start new iteration\\n        if (limit > 1) _calculateResults(round_, iterableEntries, iterableEntriesOffset, limit - 1);\\n    }\\n\\n    /// @dev Process winner\\n    /// @param round_ Round in which winner is defined\\n    /// @param roundParticipant_ Round participant defined as a winner properties\\n    /// @param potensionalWinningAddress Address of participant\\n    /// @return shouldBreak True if this is the last round winner\\n    function _processWinner(\\n        Round storage round_,\\n        RoundParticipant storage roundParticipant_,\\n        address potensionalWinningAddress\\n    ) private returns (bool shouldBreak) {\\n        uint256 reward = round_.props.totalReward.div(rewardsDivider[round_.props.winners.length]);\\n        roundParticipant_.reward = reward;\\n        roundParticipant_.winner = true;\\n        round_.props.winners.push(potensionalWinningAddress);\\n        uint256 newCalculatedWinnersCount = round_.props.winners.length;\\n        emit WinnerDefined(round_.props.index, potensionalWinningAddress, reward);\\n        // If this is the last round winner (5th winner or no more non winners)\\n        if (newCalculatedWinnersCount >= 5 || newCalculatedWinnersCount >= round_.props.participants.length) {\\n            // close round\\n            emit RoundClosed(round_.props.index);\\n            round_.props.closed = true;\\n            round_.props.closedAt = getTimestamp();\\n            // and stop results calculations\\n            return true;\\n        }\\n        // else continue results calculation\\n        return false;\\n    }\\n\\n    /// @dev Method to iterate entry removing\\n    /// @param round_ Round in which some entry should be removed\\n    function _processGap(Round storage round_) private {\\n        LinkedList storage list = round_.activeEntries;\\n        uint256 lastEntryIndex = list.get(list.last);\\n        Entry storage lastEntry = round_.entries[lastEntryIndex];\\n        LinkedNode memory gapNode = list.getNode(round_.calculation.gapPointer);\\n        Entry storage gap = round_.entries[gapNode.value];\\n        // If entry to remove is the last in active entries list\\n        if (list.last == round_.calculation.gapPointer) {\\n            // then just remove it\\n            round_.calculation.activeEntriesAmount = round_.calculation.activeEntriesAmount.sub(lastEntry.amount);\\n            list.remove(round_.calculation.gapPointer);\\n            round_.calculation.gapPointer = 0;\\n            gap.active = false;\\n            return;\\n        }\\n        RoundParticipant storage lastParticipant = round_.participants[lastEntry.account];\\n        // If owner of last entry in active entries list is a winner\\n        if (lastParticipant.winner) {\\n            // Just remove the last entry and continue processing removing\\n            round_.calculation.activeEntriesAmount = round_.calculation.activeEntriesAmount.sub(lastEntry.amount);\\n            list.remove(list.last);\\n            lastEntry.active = false;\\n            return;\\n        }\\n        // Otherwise we need to move last entry instead of removable entry\\n        // To do this moved entry amount should be calculated first\\n        //      that is minimal amount between removable entry amount and last entry remove\\n        uint256 transferAmount = Math.min(gap.amount, lastEntry.amount);\\n        round_.calculation.activeEntriesAmount = round_.calculation.activeEntriesAmount.sub(transferAmount);\\n        if (gapNode.prev > 0) {\\n            Entry storage prevEntry = round_.entries[list.get(gapNode.prev)];\\n            if (prevEntry.account == lastEntry.account) {\\n                // If owner of entry before removable one is the same as owner of last entry\\n                //      then just move amount from last entry to entry before removable one\\n                return _processTransitionToPrevGap(round_, prevEntry, gap, lastEntry, transferAmount, list);\\n            }\\n        }\\n        if (gapNode.next > 0 && gapNode.next != list.last) {\\n            Entry storage nextEntry = round_.entries[list.get(gapNode.next)];\\n            if (nextEntry.account == lastEntry.account) {\\n                // If owner of entry after removable one is the same as owner of last entry\\n                //      then just move amount from last entry to entry after removable one\\n                return _processTransitionToNextGap(round_, nextEntry, gap, lastEntry, transferAmount, list);\\n            }\\n        }\\n        // If neighboring entries has different owner\\n        //      just create new entry with this owner before the removable one and reduce removable entry amount\\n        uint256 newEntryIndex = round_.entries.length;\\n        uint256 newEntryFrom = gap.from;\\n        gap.from = gap.from.add(transferAmount);\\n        gap.amount = gap.amount.sub(transferAmount);\\n        lastEntry.amount = lastEntry.amount.sub(transferAmount);\\n        lastEntry.to = lastEntry.to.sub(transferAmount);\\n        uint256 pointer = list.insert(gapNode.prev, newEntryIndex);\\n        round_.entries.push(Entry(true, transferAmount, newEntryFrom, pointer, gap.from, lastEntry.account));\\n        // and remove last and removable entry if its amount is zero\\n        _finishGapTransfer(round_, gap, lastEntry, list);\\n    }\\n\\n    /// @dev Moves entries amount from last entry to the first before removable one\\n    /// @param round_ Round in which this transition applies\\n    /// @param prevEntry First entry before removable one\\n    /// @param gap Removable entry\\n    /// @param lastEntry Last active entry\\n    /// @param transferAmount Amount that should be moved\\n    /// @param list List of active entries\\n    function _processTransitionToPrevGap(\\n        Round storage round_,\\n        Entry storage prevEntry,\\n        Entry storage gap,\\n        Entry storage lastEntry,\\n        uint256 transferAmount,\\n        LinkedList storage list\\n    ) private {\\n        prevEntry.amount = prevEntry.amount.add(transferAmount);\\n        prevEntry.to = prevEntry.to.add(transferAmount);\\n        gap.from = prevEntry.to;\\n        gap.amount = gap.amount.sub(transferAmount);\\n        lastEntry.to = lastEntry.to.sub(transferAmount);\\n        lastEntry.amount = lastEntry.amount.sub(transferAmount);\\n        _finishGapTransfer(round_, gap, lastEntry, list);\\n    }\\n\\n    /// @dev Moves entries amount from last entry to the first after removable one\\n    /// @param round_ Round in which this transition applies\\n    /// @param nextEntry First entry after removable one\\n    /// @param gap Removable entry\\n    /// @param lastEntry Last active entry\\n    /// @param transferAmount Amount that should be moved\\n    /// @param list List of active entries\\n    function _processTransitionToNextGap(\\n        Round storage round_,\\n        Entry storage nextEntry,\\n        Entry storage gap,\\n        Entry storage lastEntry,\\n        uint256 transferAmount,\\n        LinkedList storage list\\n    ) private {\\n        nextEntry.amount = nextEntry.amount.add(transferAmount);\\n        nextEntry.from = nextEntry.from.sub(transferAmount);\\n        gap.to = nextEntry.from;\\n        gap.amount = gap.amount.sub(transferAmount);\\n        lastEntry.to = lastEntry.to.sub(transferAmount);\\n        lastEntry.amount = lastEntry.amount.sub(transferAmount);\\n        _finishGapTransfer(round_, gap, lastEntry, list);\\n    }\\n\\n    /// @dev Finish iteration of removing entry\\n    /// @param round_ Round for which iteration was applied\\n    /// @param gap Removable entry\\n    /// @param lastEntry Last active entry\\n    /// @param list List of active entries\\n    function _finishGapTransfer(\\n        Round storage round_,\\n        Entry storage gap,\\n        Entry storage lastEntry,\\n        LinkedList storage list\\n    ) private {\\n        // If removable entry amount is zero (when its amount fully compensated by creation/transition amounts)\\n        if (gap.amount == 0) {\\n            // just remove removable entry\\n            gap.active = false;\\n            list.remove(round_.calculation.gapPointer);\\n            // and stop calculation removing\\n            round_.calculation.gapPointer = 0;\\n        }\\n        // If last entry is empty (fully moved instead of removable one)\\n        if (lastEntry.amount == 0) {\\n            // remove it\\n            lastEntry.active = false;\\n            list.remove(list.last);\\n        }\\n    }\\n\\n    /// @dev Allows only positive amount (`> 0`)\\n    /// @param amount Amount to check\\n    modifier onlyPositiveAmount(uint256 amount) {\\n        require(amount > 0, \\\"Amount is not positive\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/lottery-like-pool/contracts/TwoStageOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract TwoStageOwnable {\\n    address public nominatedOwner;\\n    address public owner;\\n\\n    event OwnerChanged(address indexed newOwner);\\n    event OwnerNominated(address indexed nominatedOwner);\\n\\n    constructor(address owner_) internal {\\n        require(owner_ != address(0), \\\"Owner cannot be zero address\\\");\\n        _setOwner(owner_);\\n    }\\n\\n    function acceptOwnership() external returns (bool success) {\\n        require(msg.sender == nominatedOwner, \\\"Not nominated to ownership\\\");\\n        _setOwner(nominatedOwner);\\n        nominatedOwner = address(0);\\n        return true;\\n    }\\n\\n    function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {\\n        _nominateNewOwner(owner_);\\n        return true;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _nominateNewOwner(address owner_) internal {\\n        nominatedOwner = owner_;\\n        emit OwnerNominated(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        owner = newOwner;\\n        emit OwnerChanged(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"jackpotToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstRoundEndsAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EntriesPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"MissingSeedProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"NewRoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromRoundIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inRoundIndex\",\"type\":\"uint256\"}],\"name\":\"NonWithdrawnRewardsReused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sealedSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealingBlockNumber\",\"type\":\"uint256\"}],\"name\":\"SealedSeedProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"revealedSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"savedSeed\",\"type\":\"bytes32\"}],\"name\":\"SeedRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerDefined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"activeEntriesList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct LotteryLikePool.Entry\",\"name\":\"entry\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"inited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"internalType\":\"struct LinkedNode\",\"name\":\"linkedNode\",\"type\":\"tuple\"}],\"internalType\":\"struct LotteryLikePool.ActiveEntryListElement[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEntries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"iterableEntries\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"iterableEntriesOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"calculateRoundResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseJackpot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerSubmittingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"provideMissingSeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sealedSeed\",\"type\":\"bytes32\"}],\"name\":\"provideSealedSeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromRoundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inRoundIndex\",\"type\":\"uint256\"}],\"name\":\"reuseNonWithdrawnRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"revealSealedSeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWithdrawalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonWithdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"internalType\":\"struct LotteryLikePool.RoundProps\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"roundCalculation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"sealedSeedProvided\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activeEntriesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gapPointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iteratedEntriesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passedIterationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seedRevealingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sealedSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"internalType\":\"struct LotteryLikePool.RoundCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"roundEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct LotteryLikePool.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"roundParticipant\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rewardPaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"entriesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct LotteryLikePool.RoundParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LotteryLikePool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003593d125a4f7849a1b059e64f4517a86dd60c95d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000005febc300000000000000000000000000d4eee3d50588d7dee8dcc42635e50093e0aa8cc0","EVMVersion":"constantinople","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}