{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n * \"Stash\" (v0.2 beta)\r\n * A simple tool for a personal smart contract wallet to help protect your assets.\r\n *\r\n * For more info checkout: https://squirrel.finance\r\n *\r\n */\r\n\r\ncontract InsurePluginFactory {\r\n\r\n    mapping(address => address) public plugins;\r\n    address[] stashes;\r\n\r\n    function createPlugin() external returns(address) {\r\n        if (plugins[msg.sender] == 0) {\r\n            InsurePlugin plugin = new InsurePlugin(msg.sender);\r\n            plugins[msg.sender] = plugin;\r\n            stashes.push(msg.sender);\r\n            return plugin;\r\n        } else {\r\n            return plugins[msg.sender];\r\n        }\r\n    }\r\n\r\n    function getStashes(uint256 startIndex, uint256 endIndex) public view returns (address[]) {\r\n        uint256 numStashes = (endIndex - startIndex) + 1;\r\n        if (startIndex == 0 && endIndex == 0) {\r\n            numStashes = stashes.length;\r\n        }\r\n\r\n        address[] memory list = new address[](numStashes);\r\n        for (uint256 i = 0; i < numStashes; i++) {\r\n            list[i] = stashes[i + startIndex];\r\n        }\r\n        return (list);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract InsurePlugin {\r\n\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n\r\n    SquirrelBondInsure bondInsure = SquirrelBondInsure(0x4b70388eAbb6b7596dcF78e9C8DFb6328B5442a1);\r\n    SquirrelStash stash;\r\n\r\n    constructor(address stashAddress) public {\r\n        stash = SquirrelStash(stashAddress);\r\n    }\r\n\r\n    modifier adminOnly() {\r\n        require(stash.adminAddresses(msg.sender) > 0);\r\n        _;\r\n    }\r\n    \r\n    function() external payable { /** Accepts eth **/ }\r\n\r\n    function stake(uint256 amount) external adminOnly {\r\n        stash.pluginEth(amount);\r\n        bondInsure.deposit.value(amount)(this);\r\n    }\r\n\r\n    function claimYield() external adminOnly {\r\n        bondInsure.claimYield();\r\n        bond.transfer(stash, bond.balanceOf(this));\r\n    }\r\n\r\n    function beginCashout(uint256 amount) external adminOnly {\r\n        bondInsure.beginCashout(amount);\r\n        uint256 bonds = bond.balanceOf(this);\r\n        if (bonds > 0) {\r\n            bond.transfer(stash, bonds);\r\n        }\r\n    }\r\n    \r\n    function doCashout() external adminOnly {\r\n        bondInsure.doCashout();\r\n        address(stash).transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SquirrelBondInsure {\r\n    function deposit(address recipient) payable external;\r\n    function claimYield() public;\r\n    function beginCashout(uint256 amount) external;\r\n    function doCashout() external;\r\n}\r\n\r\n\r\ncontract SquirrelStash {\r\n    mapping(address => uint256) public adminAddresses;\r\n    function() external payable { /** Accepts eth **/ }\r\n    function pluginEth(uint256 amount) external;\r\n    function pluginToken(address token, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    string public symbol;\r\n    uint8 public decimals;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"plugins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getStashes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InsurePluginFactory","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://57beaa644917ed4662f70b62765e607cc82fe89896ab555cab3fbae5f8f7ff93"}]}