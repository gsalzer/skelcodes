{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapRouter.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface ISakeSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH\r\n        );\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB\r\n        );\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external;\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function stoken() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function dealSlippageWithIn(address[] calldata path, uint amountIn, address to, bool ifmint) external returns (uint amountOut);\r\n    function dealSlippageWithOut(address[] calldata path, uint amountOut, address to, bool ifmint) external returns (uint extra);\r\n    function getAmountOutMarket(address token, uint amountIn) external view returns (uint _out, uint t0Price);\r\n    function getAmountInMarket(address token, uint amountOut) external view returns (uint _in, uint t0Price);\r\n    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount);\r\n    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount);\r\n    function getTokenMarketPrice(address token) external view returns (uint price);\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: contracts/sakeswap/libraries/TransferHelper.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts/ILO/SakeILO.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SakeILO is Ownable, Pausable, ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n   \r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public SAKE = 0x066798d9ef0833ccc719076Dab77199eCbd178b0; \r\n    ISakeSwapFactory public sakeFactory = ISakeSwapFactory(0x75e48C954594d64ef9613AeEF97Ad85370F13807);\r\n    ISakeSwapRouter public sakeRouter = ISakeSwapRouter(0x9C578b573EdE001b95d51a55A3FAfb45f5608b1f);\r\n\r\n    IERC20 public projectPartyToken;\r\n    IERC20 public contributionToken;\r\n\r\n    uint256 public fundraisingStartTimestamp;\r\n    uint256 public fundraisingDurationDays;\r\n\r\n    uint256 public totalProjectPartyFund;   // amount of project party token, set ratio \r\n    uint256 public maxPoolContribution;     // hard cap\r\n    uint256 public minPoolContribution;     // soft cap\r\n    uint256 public minInvestorContribution; // min amount for each investor to contribute\r\n    uint256 public maxInvestorContribution; // max amount for each investor to contribute\r\n    uint256 public minSakeHolder;\r\n\r\n    address public projectPartyAddress;\r\n    bool public projectPartyFundDone = false;\r\n    bool public projectPartyRefundDone = false; \r\n    uint256 public totalInvestorContributed = 0;\r\n    mapping (address => uint256) public investorContributed; // how much each investor contributed\r\n    uint256 public investorsCount;\r\n    uint256 public transfersCount; \r\n \r\n    uint256 public lpLockPeriod;\r\n    uint256 public lpUnlockFrequency;\r\n    uint256 public lpUnlockFeeRatio;\r\n    address public feeAddress;\r\n\r\n    uint256 public totalLPCreated = 0;  // lp created amount by add liquidity to sakeswap  \r\n    uint256 public perUnlockLP = 0;     // lp unlock amount each time\r\n    uint256 public lpUnlockStartTimestamp = 0;\r\n    mapping (address => uint256) public investorUnlockedLPTimes;  // how many times to unlock lp of each adddress  \r\n    uint256 public projectPartUnlockedLPTimes;\r\n\r\n    address public factory;\r\n\r\n    event Contribution(address indexed user, uint256 value);\r\n    event UnlockLP(address indexed user, uint256 lpAmount, uint256 feeAmount);\r\n    event Refund(address indexed user, uint256 value);\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function initialize(address _projectPartyToken, address _contributionToken, uint256 _fundraisingDurationDays, \r\n        uint256 _totalProjectPartyFund, uint256 _maxPoolContribution, uint256 _minPoolContribution, address _owner) external whenNotPaused {\r\n\r\n        require(msg.sender == factory, \"not factory address\");\r\n        projectPartyToken = IERC20(_projectPartyToken);\r\n        contributionToken = IERC20(_contributionToken);\r\n        fundraisingDurationDays = _fundraisingDurationDays * 1 days;\r\n        totalProjectPartyFund = _totalProjectPartyFund;\r\n        maxPoolContribution = _maxPoolContribution;\r\n        minPoolContribution = _minPoolContribution;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function setParams(uint256 minInContribution, uint256 maxInContribution, uint256 lockPeriod, uint256 unlockFrequency, uint256 feeRatio, \r\n        address feeTo, uint256 minSake, uint256 startTimestamp) external onlyOwner whenNotPaused {\r\n\r\n        require(lpUnlockStartTimestamp == 0, \"add liquidity finished\");\r\n        require(minInContribution <= maxInContribution && minInContribution > 0, \"invalid investor contribution\");\r\n        require(lockPeriod > 0 && unlockFrequency > 0 , \"zero period\");\r\n        require(lockPeriod >= unlockFrequency, \"invalid period\");\r\n        require(startTimestamp > block.timestamp, \"invalid start time\");\r\n        require(feeRatio >= 0 && feeRatio < 100, \"invalid fee ratio\");\r\n        minInvestorContribution = minInContribution;\r\n        maxInvestorContribution = maxInContribution;\r\n        lpLockPeriod = lockPeriod * 1 days;\r\n        lpUnlockFrequency = unlockFrequency * 1 days;\r\n        lpUnlockFeeRatio = feeRatio; \r\n        feeAddress = feeTo;\r\n        minSakeHolder = minSake;\r\n        fundraisingStartTimestamp = startTimestamp;\r\n    }\r\n\r\n    function setPoolParams(uint256 _fundraisingDurationDays,  uint256 _totalProjectPartyFund, uint256 _maxPoolContribution, uint256 _minPoolContribution)  external onlyOwner whenNotPaused {\r\n        require(projectPartyFundDone == false, \"project party fund done\");\r\n        require(_totalProjectPartyFund > 0, \"invalid project party fund\");\r\n        require(_maxPoolContribution >= _minPoolContribution && _minPoolContribution > 0, \"invalid pool contribution\");\r\n        require(_fundraisingDurationDays > 0, \"invalid period\");\r\n\r\n        fundraisingDurationDays = _fundraisingDurationDays * 1 days;\r\n        totalProjectPartyFund = _totalProjectPartyFund;\r\n        maxPoolContribution = _maxPoolContribution;\r\n        minPoolContribution = _minPoolContribution;\r\n    } \r\n\r\n    /**\r\n     * @dev project party contribute token to contract\r\n     * project party should appove token to contract in advance\r\n     * project party must call this function before fundraising begin\r\n     * Emits a {Contribution} event.\r\n     */\r\n    function projectPartyFund() external nonReentrant whenNotPaused {\r\n        require(isFundraisingFinished() == false, \"fundraising already finished\");\r\n        require(projectPartyFundDone == false, \"repeatedly operation\");\r\n          \r\n        projectPartyAddress = msg.sender;\r\n        projectPartyFundDone = true;\r\n        projectPartyToken.safeTransferFrom(msg.sender, address(this), totalProjectPartyFund);\r\n        emit Contribution(msg.sender, totalProjectPartyFund);  \r\n    }\r\n\r\n    /**\r\n     * @dev investor contribute eth to contract\r\n     * Emits a {Contribution} event.\r\n     * msg.value is amount to contribute\r\n     */\r\n    function contributeETH() external whenNotPaused nonReentrant  payable {\r\n        require(WETH == address(contributionToken), \"invalid token\");\r\n        uint256 cAmount =  contributeInternal(msg.value);\r\n        IWETH(WETH).deposit{value: cAmount}();\r\n        if (msg.value > cAmount){\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value.sub(cAmount));\r\n        } \r\n        emit Contribution(msg.sender, cAmount);  \r\n    }\r\n\r\n    /**\r\n     * @dev investor contribute eth to contract\r\n     * investor should appove token to contract in advance\r\n     * Emits a {Contribution} event.\r\n     *\r\n     * Parameters:\r\n     * - `amount` is amount to contribute \r\n     */\r\n    function contributeToken(uint256 amount) external nonReentrant whenNotPaused {\r\n        require(WETH != address(contributionToken), \"invalid token\");\r\n        uint256 cAmount = contributeInternal(amount);\r\n        contributionToken.safeTransferFrom(msg.sender, address(this), cAmount);\r\n        emit Contribution(msg.sender, cAmount);  \r\n    }\r\n\r\n    function contributeInternal(uint256 amount) internal returns (uint256)  {\r\n        require(isFundraisingStarted() == true, \"fundraising not started\");\r\n        require(isFundraisingFinished() == false, \"fundraising already finished\");\r\n        uint256 contributed = investorContributed[msg.sender];\r\n        require(contributed.add(amount) >= minInvestorContribution && contributed.add(amount) <= maxInvestorContribution, \"invalid amount\");\r\n        if (minSakeHolder > 0) {\r\n            uint256 sakeAmount = IERC20(SAKE).balanceOf(msg.sender);\r\n            require(sakeAmount >= minSakeHolder, \"sake insufficient\");\r\n        }\r\n        if (contributed == 0) {\r\n            investorsCount = investorsCount + 1; \r\n        }\r\n        transfersCount = transfersCount + 1;  \r\n\r\n        if (totalInvestorContributed.add(amount) <= maxPoolContribution) {\r\n            investorContributed[msg.sender] = contributed.add(amount); \r\n            totalInvestorContributed = totalInvestorContributed.add(amount); \r\n            return amount;\r\n        }else{\r\n            uint256 cAmount = maxPoolContribution.sub(totalInvestorContributed);\r\n            investorContributed[msg.sender] = contributed.add(cAmount); \r\n            totalInvestorContributed = maxPoolContribution;\r\n            return cAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev whether fundraising is started\r\n     *\r\n     */\r\n    function isFundraisingStarted() public view returns (bool) {\r\n        return projectPartyFundDone && block.timestamp >= fundraisingStartTimestamp; \r\n    }\r\n\r\n    /**\r\n     * @dev whether fundraising is finished\r\n     *\r\n     */\r\n    function isFundraisingFinished()  public view returns (bool) {\r\n        if (block.timestamp >= fundraisingStartTimestamp.add(fundraisingDurationDays)) {\r\n            return true;\r\n        }\r\n        if (maxPoolContribution == totalInvestorContributed && projectPartyFundDone) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev whether fundraising is succeed\r\n     *\r\n     */\r\n    function isFundraisingSucceed()  public view returns (bool) {\r\n        require(isFundraisingFinished() == true, \"fundraising not finished\");\r\n        return projectPartyFundDone && totalInvestorContributed >= minPoolContribution;\r\n    } \r\n\r\n    /**\r\n     * @dev when fundraising is succeed, add liquidity to sakeswap\r\n     * Only callable by the Owner.\r\n     *\r\n     */\r\n    function addLiquidityToSakeSwap() external onlyOwner nonReentrant whenNotPaused {\r\n        require(lpUnlockStartTimestamp == 0, \"repeatedly operation\");\r\n        require(isFundraisingSucceed() == true, \"fundraising not succeeded\");\r\n\r\n        lpUnlockStartTimestamp = block.timestamp;\r\n\r\n        uint256 projectPartyAmount = 0;\r\n        uint256 contributionAmount = 0;\r\n        if (totalInvestorContributed == maxPoolContribution) {\r\n            projectPartyAmount = totalProjectPartyFund;\r\n            contributionAmount = maxPoolContribution; \r\n        }else{\r\n            projectPartyAmount = totalProjectPartyFund.mul(totalInvestorContributed).div(maxPoolContribution);\r\n            uint256 redundant = totalProjectPartyFund.sub(projectPartyAmount); \r\n            contributionAmount = totalInvestorContributed;\r\n            projectPartyToken.transfer(projectPartyAddress, redundant);  \r\n        }\r\n        projectPartyToken.approve(address(sakeRouter), projectPartyAmount);\r\n        contributionToken.approve(address(sakeRouter), contributionAmount);\r\n        (, , totalLPCreated) = sakeRouter.addLiquidity(\r\n            address(projectPartyToken),\r\n            address(contributionToken),\r\n            projectPartyAmount,\r\n            contributionAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            now + 60\r\n        );\r\n        require(totalLPCreated != 0 , \"add liquidity failed\");\r\n        perUnlockLP = totalLPCreated.div(lpLockPeriod.div(lpUnlockFrequency));\r\n    }\r\n\r\n    function setSakeAddress(address _sakeRouter, address _sakeFactory, address _weth, address _sake) external onlyOwner {\r\n        sakeFactory = ISakeSwapFactory(_sakeFactory);\r\n        sakeRouter = ISakeSwapRouter(_sakeRouter);\r\n        WETH = _weth;\r\n        SAKE = _sake;\r\n    } \r\n\r\n    /**\r\n     * @dev if fundraising is fail, refund project party's token\r\n     *\r\n     */\r\n    function projectPartyRefund() external nonReentrant whenNotPaused {\r\n        require(msg.sender == projectPartyAddress, \"invalid address\");\r\n        require(projectPartyRefundDone == false, \"repeatedly operation\");\r\n        require(isFundraisingSucceed() == false, \"fundraising succeed\");\r\n        projectPartyRefundDone = true;\r\n        projectPartyToken.transfer(msg.sender, totalProjectPartyFund); \r\n    }\r\n\r\n    /**\r\n     * @dev if fundraising is fail, refund investor's token\r\n     *\r\n     */\r\n    function investorRefund() external nonReentrant whenNotPaused {\r\n        require(isFundraisingSucceed() == false, \"fundraising succeed\");\r\n\r\n        uint256 amount = investorContributed[msg.sender];\r\n        require(amount > 0, \"zero amount\");\r\n\r\n        investorContributed[msg.sender] = 0; \r\n        if (WETH == address(contributionToken)){\r\n            IWETH(WETH).withdraw(amount);\r\n            TransferHelper.safeTransferETH(msg.sender, amount);\r\n        }else{\r\n            contributionToken.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev after add liquidity to sakeswap, project party unlock LP periodicity\r\n     *\r\n     */\r\n    function projectPartyUnlockLP() external nonReentrant whenNotPaused {\r\n        require(msg.sender == projectPartyAddress, \"invalid address\");\r\n        (uint256 availableTimes, uint256 amount) = getUnlockLPAmount(false, msg.sender);\r\n        projectPartUnlockedLPTimes = projectPartUnlockedLPTimes.add(availableTimes);\r\n        unlockLP(amount);\r\n    } \r\n\r\n    /**\r\n     * @dev after investor to sakeswap, investor unlock LP periodicity\r\n     *\r\n     */\r\n    function investorUnlockLP() external nonReentrant whenNotPaused {\r\n        require(investorContributed[msg.sender] > 0, \"invalid address\");\r\n        (uint256 availableTimes, uint256 amount) = getUnlockLPAmount(true, msg.sender);\r\n        investorUnlockedLPTimes[msg.sender] = investorUnlockedLPTimes[msg.sender].add(availableTimes);\r\n        unlockLP(amount);\r\n    } \r\n\r\n\r\n    /**\r\n     * @dev Get LP amount to unlock\r\n     * Emits a {UnlockLP} event.\r\n     *\r\n     * Parameters:\r\n     * - `isInvestor` whether caller is project party or investor\r\n     *\r\n     * Returns:\r\n     * - `availableTimes` is frequency times to unlock\r\n     * - `amount` is lp amount to unlock \r\n     */\r\n    function getUnlockLPAmount(bool isInvestor, address user) public view returns (uint256 availableTimes, uint256 amount) {\r\n        require(lpUnlockStartTimestamp > 0, \"add liquidity not finished\");\r\n\r\n        uint256 totalTimes = 0; \r\n        if (block.timestamp > lpUnlockStartTimestamp.add(lpLockPeriod)){\r\n            totalTimes = lpLockPeriod.div(lpUnlockFrequency);\r\n        }else{\r\n            totalTimes = (block.timestamp.sub(lpUnlockStartTimestamp)).div(lpUnlockFrequency);      \r\n        }\r\n\r\n        if (isInvestor){\r\n            availableTimes = totalTimes.sub(investorUnlockedLPTimes[user]);\r\n            require(availableTimes > 0, \"zero amount to unlock\");\r\n\r\n            uint256 totalRelease = perUnlockLP.mul(availableTimes);\r\n            amount = totalRelease.div(2).mul(investorContributed[user]).div(totalInvestorContributed);\r\n        }else{\r\n            availableTimes = totalTimes.sub(projectPartUnlockedLPTimes);\r\n            require(availableTimes > 0, \"zero amount to unlock\");\r\n\r\n            uint256 totalRelease = perUnlockLP.mul(availableTimes);\r\n            amount = totalRelease.div(2);    \r\n        }\r\n    } \r\n\r\n    function unlockLP(uint256 amount) internal {\r\n        uint256 feeAmount = amount.mul(lpUnlockFeeRatio).div(100);\r\n        ISakeSwapPair pair = ISakeSwapPair(sakeFactory.getPair(address(projectPartyToken), address(contributionToken)));\r\n        require(pair != ISakeSwapPair(address(0)), \"invalid sake pair\");\r\n        require(pair.transfer(feeAddress, feeAmount), \"transfer fee fail\");\r\n        require(pair.transfer(msg.sender, amount.sub(feeAmount)), \"transfer fail\");\r\n        emit UnlockLP(msg.sender, amount.sub(feeAmount), feeAmount);\r\n    }\r\n\r\n    function setPaused(bool bPause) external nonReentrant onlyOwner {\r\n        if(bPause){\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ILO/SakeILOFactory.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract SakeILOFactory {\r\n\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    address[] public allPairs;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    event PairCreated(address indexed projectPartyToken, address indexed contributionToken, address pair, uint256);\r\n\r\n    function createPair(address projectPartyToken, address contributionToken, uint256 fundraisingDurationDays, \r\n        uint256 totalProjectPartyFund, uint256 maxPoolContribution, uint256 minPoolContribution) external onlyOwner returns (address payable pair) {\r\n\r\n        require(projectPartyToken != contributionToken, \"identical address\");\r\n        require(projectPartyToken != address(0) && contributionToken != address(0), \"zero address\");\r\n        require(totalProjectPartyFund > 0, \"invalid project party fund\");\r\n        require(maxPoolContribution >= minPoolContribution && minPoolContribution > 0, \"invalid pool contribution\");\r\n        require(fundraisingDurationDays > 0, \"invalid period\");\r\n\r\n        require(getPair[projectPartyToken][contributionToken] == address(0), \"PAIR_EXISTS\"); // single check is sufficient\r\n        bytes memory bytecode = type(SakeILO).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(projectPartyToken, contributionToken));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        SakeILO(pair).initialize(projectPartyToken, contributionToken, fundraisingDurationDays, totalProjectPartyFund, maxPoolContribution, minPoolContribution, msg.sender);\r\n\r\n        getPair[projectPartyToken][contributionToken] = pair;\r\n        allPairs.push(pair);\r\n\r\n        emit PairCreated(projectPartyToken, contributionToken, pair, allPairs.length);\r\n    }\r\n\r\n    function allPairsLength() external view returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"zero address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectPartyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributionToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectPartyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundraisingDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalProjectPartyFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolContribution\",\"type\":\"uint256\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SakeILOFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://27731fef3d483dfd3bc24d554f619377365108db12f7aa5c8d522e506a5d18ac"}]}