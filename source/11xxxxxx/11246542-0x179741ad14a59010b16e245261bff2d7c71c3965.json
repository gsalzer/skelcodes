{"status":"1","message":"OK","result":[{"SourceCode":"{\"context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\nabstract contract Context {\\r\\n    function _sender() public view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\"},\"erc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\nimport \\\"./context.sol\\\";\\r\\nimport \\\"./safemath.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\tfunction transfer(address recipient, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ninterface OLDIERC20 {\\r\\n    function transfer(address recipient, uint amount) external;\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint;\\r\\n    mapping (address =\\u003e uint) internal _bal;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) private _alwnc;\\r\\n    uint internal _sup;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    constructor (string memory _name, string memory _symbol, uint _decimal) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimal;\\r\\n    }\\r\\n    function totalSupply() public view override returns (uint) {\\r\\n        return _sup;\\r\\n    }\\r\\n    function balanceOf(address account) public view override returns (uint) {\\r\\n        return _bal[account];\\r\\n    }\\r\\n    function transfer(address recipient, uint amount) public  override returns (bool) {\\r\\n        _transfer(_sender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view  override returns (uint) {\\r\\n        return _alwnc[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint amount) public  override returns (bool) {\\r\\n        _approve(_sender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint amount) public  override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _sender(), _alwnc[sender][_sender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n    function increaseAllowance(address spender, uint addedValue) public  returns (bool) {\\r\\n        _approve(_sender(), spender, _alwnc[_sender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseAllowance(address spender, uint subtractedValue) public  returns (bool) {\\r\\n        _approve(_sender(), spender, _alwnc[_sender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n    function _transfer(address sender, address recipient, uint amount) private  {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _bal[sender] = _bal[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _bal[recipient] = _bal[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n    function _mint(address account, uint amount) internal  {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _sup = _sup.add(amount);\\r\\n        _bal[account] = _bal[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n    function _approve(address owner, address spender, uint amount) private  {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _alwnc[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\"},\"lender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./safemath.sol\\\";\\r\\nimport \\\"./erc20.sol\\\";\\r\\n\\r\\ninterface Comp {\\r\\n    function mint ( uint mintAmount ) external returns ( uint );\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n}\\r\\ninterface Ful {\\r\\n    function mint(address receiver, uint amount) external payable returns (uint mintAmount);\\r\\n    function burn(address receiver, uint burnAmount) external returns (uint loanAmountPaid);\\r\\n    function assetBalanceOf(address _owner) external view returns (uint balance);\\r\\n}\\r\\n\\r\\ninterface Yfi {\\r\\n\\tfunction deposit(uint _amount) external;\\r\\n\\tfunction withdraw(uint _token) external;\\r\\n\\tfunction getPricePerFullShare() external view returns (uint);\\r\\n}\\r\\ninterface Aave {\\r\\n    function deposit(address _reserve, uint _amount, uint16 _referralCode) external;\\r\\n}\\r\\ninterface AToken {\\r\\n    function redeem(uint amount) external;\\r\\n}\\r\\ninterface LendingGateway {\\r\\n    function getLendingPool() external view returns (address);\\r\\n}\\r\\ninterface Mfinance {\\r\\n    function getReferral(address _addr) external view returns(address);\\r\\n    function setReferral(address _addr,address _referral) external returns(bool);\\r\\n\\tfunction setExp(address _addr, uint _newExp) external;\\r\\n\\tfunction referralOf(address _addr) external view returns(address);\\r\\n\\tfunction getRefPool() external view returns(address);\\r\\n\\tfunction getPrice() external view returns(uint);\\r\\n}\\r\\n\\r\\ninterface Mfi {\\r\\n   function cap() external view returns (uint);\\r\\n   function mint(address account, uint amount) external;\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Lender{\\r\\n\\tusing SafeMath for uint;\\r\\n\\taddress internal btoken;\\r\\n\\taddress internal yfi;\\r\\n\\taddress internal comp;\\r\\n\\taddress internal aave;\\r\\n\\taddress internal ful;\\r\\n\\taddress internal aaveToken;\\r\\n\\tuint private dToken;\\r\\n\\tconstructor () public {\\r\\n\\t\\tdToken = 3;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _yfiBal() internal view returns (uint) {\\r\\n\\t\\treturn IERC20(yfi).balanceOf(address(this));\\r\\n\\t}\\r\\n\\tfunction _yfiValue() internal view returns (uint) {\\r\\n\\t\\tuint b = _yfiBal();\\r\\n\\t\\tif (b \\u003e 0) {\\r\\n\\t\\t  b = b.mul(Yfi(yfi).getPricePerFullShare()).div(1e18);\\r\\n\\t\\t}\\r\\n\\t\\treturn b;\\r\\n\\t}\\r\\n\\tfunction _yfiSup(uint _amt) internal {\\r\\n\\t\\tYfi(yfi).deposit(_amt);\\r\\n\\t}\\r\\n\\tfunction _yfiWd(uint _amt) internal {\\r\\n\\t\\tYfi(yfi).withdraw(_amt);\\r\\n\\t}\\r\\n\\tfunction _yfiWithdraw(uint _amt) internal {\\r\\n\\t\\tuint b = _yfiBal();\\r\\n\\t\\tuint bT = _yfiValue();\\r\\n\\t\\trequire(bT \\u003e= _amt, \\\"insufficient funds\\\");\\r\\n\\t\\tuint amt = (b.mul(_amt)).div(bT).add(1);\\r\\n\\t\\t_yfiWd(amt);\\r\\n\\t  }\\r\\n\\r\\n\\tfunction _compBalance() internal view returns (uint) {\\r\\n\\t  return IERC20(comp).balanceOf(address(this));\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _compVal() internal view returns (uint) {\\r\\n\\t\\tuint b = _compBalance();\\r\\n\\t\\tif (b \\u003e 0) {\\r\\n\\t\\t\\tb = b.mul(Comp(comp).exchangeRateStored()).div(1e18);\\r\\n\\t\\t}\\r\\n\\t\\treturn b;\\r\\n\\t}\\r\\n\\tfunction _compSup(uint _amt) internal {\\r\\n\\t\\trequire(Comp(comp).mint(_amt) == 0, \\\"Comp: supply failed\\\");\\r\\n\\t}\\r\\n\\tfunction _compWd(uint _amt) internal {\\r\\n\\t\\trequire(Comp(comp).redeem(_amt) == 0, \\\"Comp: wd failed\\\");\\r\\n\\t}\\r\\n\\tfunction _compWithdraw(uint _amt) internal {\\r\\n\\t\\tuint b = _compBalance();\\r\\n\\t\\tuint bT = _compVal();\\r\\n\\t\\trequire(bT \\u003e= _amt, \\\"insufficient funds\\\");\\r\\n\\t\\tuint amt = (b.mul(_amt)).div(bT).add(1);\\r\\n\\t\\t_compWd(amt);\\r\\n\\t  }\\r\\n\\r\\n\\tfunction _fulBal() internal view returns (uint) {\\r\\n\\t\\treturn IERC20(ful).balanceOf(address(this));\\r\\n\\t}\\r\\n\\tfunction _fulVal() internal view returns (uint) {\\r\\n\\t\\tuint b = _fulBal();\\r\\n\\t\\tif (b \\u003e 0) {\\r\\n\\t\\t  b = Ful(ful).assetBalanceOf(address(this));\\r\\n\\t\\t}\\r\\n\\t\\treturn b;\\r\\n\\t}\\r\\n\\tfunction _fulSup(uint _amt) internal {\\r\\n\\t\\trequire(Ful(ful).mint(address(this), _amt) \\u003e 0, \\\"Ful: supply failed\\\");\\r\\n\\t}\\r\\n\\tfunction _fulWd(uint _amt) internal {\\r\\n\\t\\trequire(Ful(ful).burn(address(this), _amt) \\u003e 0, \\\"Ful: wd failed\\\");\\r\\n\\t}\\r\\n\\tfunction _fulWithdraw(uint _amt) internal {\\r\\n\\t\\tuint b = _fulBal();\\r\\n\\t\\tuint bT = _fulVal();\\r\\n\\t\\trequire(bT \\u003e= _amt, \\\"insufficient funds\\\");\\r\\n\\t\\tuint amt = (b.mul(_amt)).div(bT).add(1);\\r\\n\\t\\t_fulWd(amt);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAave() private view returns (address) {\\r\\n\\t\\treturn LendingGateway(aave).getLendingPool();\\r\\n\\t}\\r\\n\\tfunction _aaveBalVal() internal view returns (uint) {\\r\\n\\t\\treturn IERC20(aaveToken).balanceOf(address(this));\\r\\n\\t}\\r\\n\\tfunction _aavSup(uint _amt) internal {\\r\\n\\t\\tAave(getAave()).deposit(btoken, _amt, 0);\\r\\n\\t}\\r\\n\\tfunction _aaveWd(uint _amt) internal {\\r\\n\\t\\tAToken(aaveToken).redeem(_amt);\\r\\n\\t}\\r\\n\\r\\n}\"},\"mdai.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//== libs ==\\t\\r\\nimport \\\"./safemath.sol\\\";\\r\\nimport \\\"./erc20.sol\\\";\\r\\nimport \\\"./lender.sol\\\";\\r\\nimport \\\"./ownable.sol\\\";\\r\\nimport \\\"./reentrancyguard.sol\\\";\\r\\n\\r\\n\\r\\n//== Contract ==\\r\\ncontract MDAI is ERC20,Lender,Ownable,ReentrancyGuard{\\r\\n\\tusing SafeMath for uint;\\r\\n\\taddress private multifinance;\\r\\n\\taddress private mfi;\\r\\n\\tuint private _prv1 = 1;\\r\\n\\tuint private _prv2 = 3;\\r\\n\\tuint public minWd = 10*(10**decimals);\\r\\n\\tuint public minDepo = 10*(10**decimals);\\r\\n\\tuint public minWd2 = 20*(10**decimals);\\r\\n\\tuint public startBlock; \\r\\n\\tmapping (address =\\u003e uint) private _exp;\\r\\n\\tmapping (address =\\u003e uint) private _coll;\\r\\n\\t\\r\\n\\tevent ReferralReward(address addr, uint amount);\\r\\n\\t\\r\\n\\tconstructor () public ERC20(\\\"MDai Token\\\", \\\"MDAI\\\", 18) {\\r\\n\\t\\tstartBlock = block.number;\\r\\n\\t\\t\\r\\n\\t\\tbtoken = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\r\\n\\t\\tmfi = address(0x40098A16C4b9227B0cffe3eaA082b0baF1f02109);\\r\\n\\t\\tmultifinance = address(0xcEa1c4d14044bf30DB8005534D071f0228C09102);\\r\\n\\t\\t\\r\\n\\t\\tsetLender(address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643),2);\\r\\n\\t\\tapproveToken(address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\\r\\n\\t\\t\\r\\n\\t\\tsetLender(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8),3);\\r\\n\\t\\tsetLender(address(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d),6);\\r\\n\\t\\tapproveToken(address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3));\\r\\n\\t\\t\\r\\n\\t\\tapproveToken(address(0x493C57C4763932315A328269E1ADaD09653B9081));\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setMin(uint _min1,uint _min2, uint _min3) external onlyOwner{\\r\\n\\t\\tminWd = _min1;\\r\\n\\t\\tminDepo = _min2;\\r\\n\\t\\tminWd2 = _min3;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction collateralOf(address _addr) external view returns(uint){\\r\\n\\t\\treturn _coll[_addr];\\r\\n\\t}\\r\\n\\tfunction _setExp(address _addr, uint _newExp) internal{\\r\\n\\t\\t_exp[_addr] = _newExp;\\r\\n\\t\\tMfinance(multifinance).setExp(_addr,_newExp);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction getExp(address _addr) external view returns(uint){\\r\\n\\t\\treturn _exp[_addr];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction getLender(uint _num) external view returns(address){\\r\\n\\t\\tif (_num == 1) {\\r\\n\\t\\t\\treturn yfi;\\r\\n\\t\\t} else if (_num == 2) {\\r\\n\\t\\t\\treturn comp;\\r\\n\\t\\t} else if (_num == 3) {\\r\\n\\t\\t\\treturn aave;\\r\\n\\t\\t} else if (_num == 4) {\\r\\n\\t\\t\\treturn address(0);\\r\\n\\t\\t} else if (_num == 5) {\\r\\n\\t\\t\\treturn ful;\\r\\n\\t\\t}else if (_num == 6) {\\r\\n\\t\\t\\treturn aaveToken;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction setLender(address _token, uint _num) public onlyOwner{\\r\\n\\t\\tif (_num == 1) {\\r\\n\\t\\t\\tyfi = _token;\\r\\n\\t\\t} else if (_num == 2) {\\r\\n\\t\\t\\tcomp = _token;\\r\\n\\t\\t} else if (_num == 3) {\\r\\n\\t\\t\\taave = _token;\\r\\n\\t\\t} else if (_num == 5) {\\r\\n\\t\\t\\tful = _token;\\r\\n\\t\\t} else if (_num == 6) {\\r\\n\\t\\t\\taaveToken = _token;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction approveToken(address _token) public onlyManager{\\r\\n\\t\\tIERC20(btoken).approve(_token, type(uint).max);\\r\\n\\t}\\r\\n\\tfunction getPrice() external view returns (uint) {\\r\\n\\t\\tuint _pool = _calcPool();\\r\\n\\t\\treturn _pool.mul(1e18).div(_sup);\\r\\n\\t}\\r\\n\\tfunction prov1() external view returns(uint){\\r\\n\\t\\treturn _prv1;\\r\\n\\t}\\r\\n\\tfunction prov2() external view returns(uint){\\r\\n\\t\\treturn _prv2;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _btokenBal() private view returns (uint) {\\r\\n\\t\\treturn IERC20(btoken).balanceOf(address(this));\\r\\n\\t}\\r\\n \\t//== Pool == \\t\\r\\n\\tfunction _calcPool() internal view returns (uint) {\\r\\n\\t\\treturn _proVal(_prv1).add(_proVal(_prv2)).add(_btokenBal());\\r\\n\\t}\\r\\n\\tfunction calcPoolValue() external view returns (uint) {\\r\\n\\t\\treturn _calcPool();\\r\\n\\t}\\r\\n\\tfunction _proVal(uint _prov) private view returns (uint){\\r\\n\\t\\tif (_prov == 1) {\\r\\n\\t\\t\\treturn _yfiValue();\\r\\n\\t\\t} else if (_prov == 2) {\\r\\n\\t\\t\\treturn _compVal();\\r\\n\\t\\t} else if (_prov == 3) {\\r\\n\\t\\t\\treturn _aaveBalVal();\\r\\n\\t\\t} else if (_prov == 5) {\\r\\n\\t\\t\\treturn _fulVal();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _setProVal(uint _prov) private{\\r\\n\\t\\tif (_prov == 1) {\\r\\n\\t\\t\\t_yfiSup(_btokenBal());\\r\\n\\t\\t} else if (_prov == 2) {\\t\\t\\t\\r\\n\\t\\t\\t_compSup(_btokenBal());\\r\\n\\t\\t} else if (_prov == 3) {\\r\\n\\t\\t\\t_aavSup(_btokenBal());\\r\\n\\t\\t} else if (_prov == 5) {\\r\\n\\t\\t\\t_fulSup(_btokenBal());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _wdProVal(uint _prov, uint _amt) internal{\\r\\n\\t\\tif (_prov == 1) {\\r\\n\\t\\t\\t_yfiWithdraw(_amt);\\r\\n\\t\\t} else if (_prov == 2) {\\r\\n\\t\\t\\t_compWithdraw(_amt);\\r\\n\\t\\t} else if (_prov == 3) {\\r\\n\\t\\t\\t_aaveWd(_amt);\\r\\n\\t\\t} else if (_prov == 5) {\\r\\n\\t\\t\\t_fulWithdraw(_amt);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction wdProVal(uint _prov, uint _amt) external onlyManager{\\r\\n\\t\\tif (_prov == 1) {\\r\\n\\t\\t\\t_yfiWithdraw(_amt);\\r\\n\\t\\t} else if (_prov == 2) {\\r\\n\\t\\t\\t_compWithdraw(_amt);\\r\\n\\t\\t} else if (_prov == 3) {\\r\\n\\t\\t\\t_aaveWd(_amt);\\r\\n\\t\\t} else if (_prov == 5) {\\r\\n\\t\\t\\t_fulWithdraw(_amt);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setProv(uint _prov1, uint _prov2) external onlyManager{\\r\\n\\t\\t_prv1 = _prov1;\\r\\n\\t\\t_prv2 = _prov2;\\r\\n\\t}\\r\\n\\tfunction updateProv(uint _num, uint _new) external nonReentrant onlyManager{\\r\\n\\t\\tuint oldProv;\\r\\n\\t\\tif(_num == 1){\\r\\n\\t\\t\\toldProv = _prv1;\\r\\n\\t\\t\\t_prv1 = _new;\\r\\n\\t\\t}else{\\r\\n\\t\\t\\toldProv = _prv2;\\r\\n\\t\\t\\t_prv2 = _new;\\r\\n\\t\\t}\\r\\n\\t\\tuint _amt;\\r\\n\\t\\tif (oldProv == 1) {\\r\\n\\t\\t\\t_amt = _yfiValue();\\r\\n\\t\\t\\t_yfiWithdraw(_amt);\\r\\n\\t\\t} else if (oldProv == 2) {\\r\\n\\t\\t\\t_amt = _compVal();\\r\\n\\t\\t\\t_compWithdraw(_amt);\\r\\n\\t\\t} else if (oldProv == 3) {\\r\\n\\t\\t\\t_amt = _aaveBalVal();\\r\\n\\t\\t\\t_aaveWd(_amt);\\r\\n\\t\\t} else if (oldProv == 5) {\\r\\n\\t\\t\\t_amt = _fulVal();\\r\\n\\t\\t\\t_fulWithdraw(_amt);\\r\\n\\t\\t} \\r\\n\\r\\n\\t\\tif (_new == 1) {\\r\\n\\t\\t\\t_yfiSup(_amt);\\r\\n\\t\\t} else if (_new == 2) {\\r\\n\\t\\t\\t_compSup(_amt);\\r\\n\\t\\t} else if (_new == 3) {\\r\\n\\t\\t\\t_aavSup(_amt);\\r\\n\\t\\t}else if (_new == 5) {\\r\\n\\t\\t\\t_fulSup(_amt);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _deposit() private {\\r\\n\\t\\tuint v1 = _proVal(_prv1);\\r\\n\\t\\tuint v2 = _proVal(_prv2);\\r\\n\\t\\tif(v1 \\u003c= v2){\\r\\n\\t\\t\\t_setProVal(_prv1);\\r\\n\\t\\t}else{\\r\\n\\t\\t\\t_setProVal(_prv2);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _withdraw(uint _amt) internal {\\r\\n\\t\\tif(_amt \\u003e _btokenBal()){\\r\\n\\t\\t\\tuint v1 = _proVal(_prv1);\\r\\n\\t\\t\\tuint v2 = _proVal(_prv2);\\r\\n\\t\\t\\trequire(v1 \\u003e= _amt || v2 \\u003e= _amt, \\\"!insufficient fund\\\");\\r\\n\\t\\t\\tif(v1 \\u003e= v2){\\r\\n\\t\\t\\t\\t_wdProVal(_prv1,_amt);\\r\\n\\t\\t\\t}else{\\r\\n\\t\\t\\t\\t_wdProVal(_prv2,_amt);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _deposit(uint _amt) private nonReentrant\\r\\n\\t{\\r\\n\\t\\trequire(_amt \\u003e= minDepo, \\\"!minimum deposit\\\");\\r\\n\\t\\tuint pool = _calcPool();\\r\\n\\t\\tIERC20(btoken).transferFrom(_sender(), address(this), _amt);\\r\\n\\t\\tif(_amt \\u003e= minWd2*1e18)\\r\\n\\t\\t\\t_deposit();\\r\\n\\t\\tuint amt = 0;\\r\\n\\t\\tif (pool == 0) {\\r\\n\\t\\t\\tamt = _amt;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tamt = (_amt.mul(_sup)).div(pool);\\r\\n\\t\\t}\\r\\n\\t\\t_mint(_sender(), amt);\\r\\n\\t\\t_coll[_sender()] = _coll[_sender()].add(_amt);\\r\\n\\t\\tif (_exp[_sender()] == 0){\\r\\n\\t\\t\\t_setExp(_sender(),now + 30 days);\\r\\n\\t\\t\\t\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction depositReg(uint _amt, address _ref) public \\r\\n\\t{\\r\\n\\t\\tif(Mfinance(multifinance).setReferral(_sender(),_ref)){\\r\\n\\t\\t\\t_deposit(_amt);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction deposit(uint _amt) external \\r\\n\\t{\\r\\n\\t\\taddress ref = Mfinance(multifinance).referralOf(_sender());\\r\\n\\t\\tif(ref == address(0)){\\r\\n\\t\\t\\tdepositReg(_amt,Mfinance(multifinance).getRefPool());\\r\\n\\t\\t}else{\\r\\n\\t\\t\\t_deposit(_amt);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction wdC(uint _amt) external nonReentrant\\r\\n\\t{\\r\\n\\t\\trequire(_amt \\u003e= minWd, \\\"!min WD\\\");\\r\\n\\t\\tuint pool = _calcPool();\\r\\n\\t\\tuint _token = (_amt.mul(_sup)).div(pool);\\r\\n\\t\\trequire(_amt \\u003c= _coll[_sender()], \\\"!collateral\\\");\\r\\n\\t\\trequire(_token \\u003c= balanceOf(_sender()), \\\"!balance\\\");\\r\\n\\t\\t_bal[_sender()] = _bal[_sender()].sub(_token, \\\"!balance\\\");\\r\\n\\t\\t_coll[_sender()] = _coll[_sender()].sub(_amt);\\r\\n\\t\\t_sup = _sup.sub(_token);\\r\\n\\t\\temit Transfer(_sender(), address(0), _token);\\r\\n\\t\\t_withdraw(_amt);\\r\\n\\t\\tIERC20(btoken).transfer(_sender(), _amt);\\r\\n\\t}\\r\\n\\tfunction wdR() external nonReentrant\\r\\n\\t{\\r\\n\\t\\trequire(now \\u003e= _exp[_sender()], \\\"!eligible\\\");\\r\\n\\t\\tuint pool = _calcPool();\\r\\n\\t\\tuint _amt = ((balanceOf(_sender()).mul(pool)).div(_sup)).sub(_coll[_sender()]);\\r\\n\\t\\trequire(_amt \\u003e 0, \\\"zero amount\\\");\\r\\n\\t\\tuint _token = (_amt.mul(_sup)).div(pool);\\r\\n\\t\\trequire(_token \\u003c= balanceOf(_sender()), \\\"!balance\\\");\\r\\n\\t\\t_bal[_sender()] = _bal[_sender()].sub(_token, \\\"!balance\\\");\\r\\n\\t\\t_sup = _sup.sub(_token);\\r\\n\\t\\temit Transfer(_sender(), address(0), _token);\\r\\n\\t\\t_withdraw(_amt);\\r\\n\\t\\tuint  a1 = (_amt.mul(80)).div(100);\\r\\n\\t\\tuint  a2 = (_amt.mul(10)).div(100);\\r\\n\\t\\tIERC20(btoken).transfer(_sender(), a1);\\r\\n\\t\\taddress referrer = Mfinance(multifinance).getReferral(_sender());\\r\\n\\t\\tIERC20(btoken).transfer(referrer, a2);\\r\\n\\t\\temit ReferralReward(referrer, a2);\\r\\n\\t\\tIERC20(btoken).transfer(owner(), _amt.sub(a1).sub(a2));\\r\\n\\t\\tuint mfiprice = Mfinance(multifinance).getPrice();\\r\\n\\t\\tif(IERC20(mfi).totalSupply().add(_amt.mul(1e18).div(mfiprice)) \\u003c= Mfi(mfi).cap()){\\r\\n\\t\\t\\tMfi(mfi).mint(owner(), a2.mul(2).mul(1e18).div(mfiprice));\\r\\n\\t\\t\\tMfi(mfi).mint(_sender(), a1.mul(1e18).div(mfiprice));\\r\\n\\t\\t}\\r\\n\\t\\t_setExp(_sender(),now + 30 days);\\r\\n\\t}\\r\\n\\treceive() external payable {\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setExp(address _addr, uint _newExp) external onlyOwner{\\r\\n\\t\\t_setExp(_addr,_newExp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMfi(address _addr) external onlyOwner{\\r\\n\\t\\tmfi = _addr;\\r\\n\\t}\\r\\n\\tfunction setMultifinance(address _addr) external onlyOwner{\\r\\n\\t\\tmultifinance = _addr;\\r\\n\\t}\\r\\n\\tfunction getMultifinance() external view returns(address){\\r\\n\\t\\treturn multifinance;\\r\\n\\t}\\r\\n\\tfunction getMfi() external view returns(address){\\r\\n\\t\\treturn mfi;\\r\\n\\t}\\r\\n    \\r\\n}\"},\"ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\nimport \\\"./erc20.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address payable private _owner;\\r\\n    address private _manager;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    constructor () public {\\r\\n        _owner = _sender();\\r\\n        _manager = _sender();\\r\\n        emit OwnershipTransferred(address(0), _sender());\\r\\n    }\\r\\n    function owner() public view returns (address payable) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\tfunction manager() public view returns (address) {\\r\\n        return _manager;\\r\\n    }\\r\\n\\tfunction setManager(address newManager) external onlyOwner{\\r\\n\\t\\trequire(newManager != address(0), \\\"Ownable: zero address\\\");\\r\\n        _manager = newManager;\\r\\n    }\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _sender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\tmodifier onlyManager() {\\r\\n        require(_owner == _sender() || _manager == _sender(), \\\"Ownable: caller is not the owner or manager\\\");\\r\\n        _;\\r\\n    }\\r\\n    function transferOwnership(address payable newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\tfunction inCaseWrongTokenTransfer(address _tokenAddr,uint _type) onlyOwner external {\\r\\n\\t\\trequire(_tokenAddr != address(this), \\\"Ownable: invalid address\\\");\\r\\n        uint qty = IERC20(_tokenAddr).balanceOf(address(this));\\r\\n\\t\\tif(_type == 1)\\r\\n\\t\\t\\tIERC20(_tokenAddr).transfer(_sender(), qty);\\r\\n\\t\\telse\\r\\n\\t\\t\\tOLDIERC20(_tokenAddr).transfer(_sender(), qty);\\r\\n    }\\r\\n    function inCaseWrongEthTransfer() onlyOwner external{\\r\\n        (bool result, ) = _sender().call{value:address(this).balance}(\\\"\\\");\\r\\n        require(result, \\\"ETH Transfer Failed\\\");\\r\\n    }\\r\\n}\"},\"reentrancyguard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n\\tuint private constant _NOT_ENTERED = 1;\\r\\n\\tuint private constant _ENTERED = 2;\\r\\n\\tuint private _status;\\r\\n\\tconstructor () public {\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n\\tmodifier nonReentrant() {\\r\\n\\t\\trequire(_status != _ENTERED, \\\"reentrant call\\\");\\r\\n\\t\\t_status = _ENTERED;\\r\\n\\t\\t_;\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n}\"},\"safemath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_sender\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"collateralOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"depositReg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMfi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultifinance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inCaseWrongEthTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"inCaseWrongTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWd2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prov1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prov2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newExp\",\"type\":\"uint256\"}],\"name\":\"setExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMfi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min3\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMultifinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prov1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prov2\",\"type\":\"uint256\"}],\"name\":\"setProv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"updateProv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"wdC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prov\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"wdProVal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MDAI","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2235dd113183c24fca95a5c51aa908d0fa11bf463a8b7abfd6c269db7a86f1b"}]}