{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/proxies/xAAVEProxy.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/**\r\n * @title Proxy - Generic proxy contract allows to execute all transactions\r\n */\r\n\r\ncontract xAAVEProxy {\r\n\r\n    // storage position of the address of the current implementation\r\n    bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"xaave.implementationPosition\");\r\n    bytes32 private constant PROPOSED_IMPLEMENTATION_POSITION = keccak256(\"xaave.proposedImplementationPosition\");\r\n\r\n    bytes32 private constant PROXY_ADMIN_POSITION = keccak256(\"xaave.proxyAdmin\");\r\n    bytes32 private constant PROXY_COSIGNER1_POSITION = keccak256(\"xaave.cosigner1\");\r\n    bytes32 private constant PROXY_COSIGNER2_POSITION = keccak256(\"xaave.cosigner2\");\r\n\r\n    bytes32 private constant PROPOSED_NEW_ADMIN  = keccak256(\"xaave.proposedNewAdmin\");\r\n    bytes32 private constant PROPOSED_NEW_ADMIN_TIMESTAMP  = keccak256(\"xaave.proposedNewAdminTimestamp\");\r\n\r\n    modifier onlyProxyAdmin() {\r\n        require(msg.sender == readAddressAtPosition(PROXY_ADMIN_POSITION));\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        address signer1 = readAddressAtPosition(PROXY_COSIGNER1_POSITION);\r\n        address signer2 = readAddressAtPosition(PROXY_COSIGNER2_POSITION);\r\n        require(msg.sender == signer1 || msg.sender == signer2);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor function sets address of master copy contract.\r\n     * @param implementation the address of the implementation contract that this proxy uses\r\n     * @param proxyAdmin the address of the admin of this proxy\r\n     * @param signer1 the first signer of this proxy\r\n     * @param signer2 the second signer of this proxy\r\n     */\r\n    constructor(\r\n        address implementation,\r\n        address proxyAdmin,\r\n        address signer1,\r\n        address signer2\r\n    ) public {\r\n        require(\r\n            implementation != address(0),\r\n            \"Invalid implementation address provided\"\r\n        );\r\n        require(\r\n            proxyAdmin != address(0),\r\n            \"Invalid proxyAdmin address provided\"\r\n        );\r\n        require(signer1 != address(0), \"Invalid signer1 address provided\");\r\n        require(signer2 != address(0), \"Invalid signer2 address provided\");\r\n        require(signer1 != signer2, \"Signers must have different addresses\");\r\n        setNewAddressAtPosition(IMPLEMENTATION_POSITION, implementation);\r\n        setNewAddressAtPosition(PROXY_ADMIN_POSITION, proxyAdmin);\r\n        setNewAddressAtPosition(PROXY_COSIGNER1_POSITION, signer1);\r\n        setNewAddressAtPosition(PROXY_COSIGNER2_POSITION, signer2);\r\n    }\r\n\r\n    /**\r\n     * @dev Proposes a new implementation contract for this proxy if sender is the Admin\r\n     * @param newImplementation the address of the new implementation\r\n     */\r\n    function proposeNewImplementation(address newImplementation) public onlyProxyAdmin {\r\n        require(newImplementation != address(0), \"new proposed implementation cannot be address(0)\");\r\n        require(isContract(newImplementation), \"new proposed implementation is not a contract\");\r\n        require(newImplementation != implementation(), \"new proposed address cannot be the same as the current implementation address\");\r\n        setNewAddressAtPosition(PROPOSED_IMPLEMENTATION_POSITION, newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms a previously proposed implementation if the sender is one of the two cosigners\r\n     * @param confirmedImplementation the address of previously proposed implementation (has to match the previously proposed implementation)\r\n     */\r\n    function confirmImplementation(address confirmedImplementation)\r\n        public\r\n        onlySigner\r\n    {\r\n        address proposedImplementation = readAddressAtPosition(\r\n            PROPOSED_IMPLEMENTATION_POSITION\r\n        );\r\n        require(\r\n            proposedImplementation != address(0),\r\n            \"proposed implementation cannot be address(0)\"\r\n        );\r\n        require(\r\n            confirmedImplementation == proposedImplementation,\r\n            \"proposed implementation doesn't match the confirmed implementation\"\r\n        );\r\n        setNewAddressAtPosition(IMPLEMENTATION_POSITION, confirmedImplementation);\r\n        setNewAddressAtPosition(PROPOSED_IMPLEMENTATION_POSITION, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Proposes a new admin address if the sender is the Admin\r\n     * @param newAdminAddress address of the new admin role\r\n     */\r\n    function proposeAdminTransfer(address newAdminAddress) public onlyProxyAdmin {\r\n        require(newAdminAddress != address(0), \"new Admin address cannot be address(0)\");\r\n        setProposedAdmin(newAdminAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Changes the admin address to the previously proposed admin address if 24 hours has past since it was proposed\r\n     */\r\n    function confirmAdminTransfer() public onlyProxyAdmin {\r\n        address newAdminAddress = proposedNewAdmin();\r\n        require(newAdminAddress != address(0), \"new Admin address cannot be address(0)\");\r\n        require(proposedNewAdminTimestamp() <= block.timestamp, \"admin change can only be submitted after 1 day\");\r\n        setProxyAdmin(newAdminAddress);\r\n        setProposedAdmin(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether address is a contract\r\n     */\r\n    function isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the implementation contract of this proxy\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        impl = readAddressAtPosition(IMPLEMENTATION_POSITION);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin address of this proxy\r\n     */\r\n    function proxyAdmin() public view returns (address admin) {\r\n        admin = readAddressAtPosition(PROXY_ADMIN_POSITION);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the new proposed implementation address of this proxy (if there is no proposed implementations, returns address(0x0))\r\n     */\r\n    function proposedNewImplementation() public view returns (address impl) {\r\n        impl = readAddressAtPosition(PROPOSED_IMPLEMENTATION_POSITION);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the new proposed admin address of this proxy (if there is no proposed implementations, returns address(0x0))\r\n     */\r\n    function proposedNewAdmin() public view returns (address newAdmin) {\r\n        newAdmin = readAddressAtPosition(PROPOSED_NEW_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the timestamp that the proposed admin can be changed/confirmed\r\n     */\r\n    function proposedNewAdminTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = readIntAtPosition(PROPOSED_NEW_ADMIN_TIMESTAMP);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the first cosigner if 'id' == 0, otherwise returns the address of the second cosigner\r\n     */\r\n    function proxySigner(uint256 id) public view returns (address signer) {\r\n        if (id == 0) {\r\n            signer = readAddressAtPosition(PROXY_COSIGNER1_POSITION);\r\n        } else {\r\n            signer = readAddressAtPosition(PROXY_COSIGNER2_POSITION);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the proxy type, specified by EIP-897\r\n     * @return Always return 2\r\n     **/\r\n    function proxyType() public pure returns (uint256) {\r\n        return 2; // type 2 is for upgradeable proxy as per EIP-897\r\n    }\r\n\r\n\r\n    function setProposedAdmin(address proposedAdmin) private {\r\n        setNewAddressAtPosition(PROPOSED_NEW_ADMIN, proposedAdmin);\r\n        setNewIntAtPosition(PROPOSED_NEW_ADMIN_TIMESTAMP, block.timestamp + 1 days);\r\n    }\r\n\r\n    function setProxyAdmin(address newAdmin) private {\r\n        setNewAddressAtPosition(PROXY_ADMIN_POSITION, newAdmin);\r\n    }\r\n\r\n    function setNewAddressAtPosition(bytes32 position, address newAddr) private {\r\n        assembly { sstore(position, newAddr) }\r\n    }\r\n\r\n    function readAddressAtPosition(bytes32 position) private view returns (address result) {\r\n        assembly { result := sload(position) }\r\n    }\r\n\r\n    function setNewIntAtPosition(bytes32 position, uint256 newInt) private {\r\n        assembly { sstore(position, newInt) }\r\n    }\r\n\r\n    function readIntAtPosition(bytes32 position) private view returns (uint256 result) {\r\n        assembly { result := sload(position) }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function forwards all transactions and returns all received return data.\r\n     */\r\n    fallback() external payable {\r\n        bytes32 position = IMPLEMENTATION_POSITION;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(\r\n                sload(position),\r\n                0xffffffffffffffffffffffffffffffffffffffff\r\n            )\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let success := delegatecall(\r\n                gas(),\r\n                masterCopy,\r\n                ptr,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            switch eq(success, 0)\r\n                case 1 {\r\n                    revert(ptr, returndatasize())\r\n                }\r\n            return(ptr, returndatasize())\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"confirmAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"confirmedImplementation\",\"type\":\"address\"}],\"name\":\"confirmImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"proposeAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"proposeNewImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedNewAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedNewAdminTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedNewImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proxySigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"xAAVEProxy","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000041a55ae9c7722c801e0e1447b1d5cb50bbb225c6000000000000000000000000029b008c22fd11ac1b93a1d82109af580af5e8dc0000000000000000000000004c0c29539c463af348f8cba8c02d644a8d68c3200000000000000000000000000da332ad0d7943a7df320b9bea5d7faa9a665882","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0x41a55ae9c7722c801e0e1447b1d5cb50bbb225c6","SwarmSource":"ipfs://169eca265d90f907c184569cd4274ae89a9e95be88f54695ffa783935b1ea961"}]}