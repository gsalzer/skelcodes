{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.5.12;\r\n\r\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/CatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function box() external view returns (uint256);\r\n    function litter() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function claw(uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n// Helper function for returning address or abstract of Chainlog\r\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\r\ncontract ChainlogHelper {\r\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface DaiJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FlipAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/ilk-registry\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint256, address, address, address, address, uint256, string memory, string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function update(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function flip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/JugAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/LPOsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/univ2-lp-oracle\r\ninterface LPOsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function dec0() external view returns (uint8);\r\n    function dec1() external view returns (uint8);\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n    function wat() external view returns (bytes32);\r\n    function hop() external view returns (uint32);\r\n    function src() external view returns (address);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function change(address) external;\r\n    function step(uint256) external;\r\n    function stop() external;\r\n    function start() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function link(uint256, address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/MedianAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/median\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm-mom\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/SpotAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/ChainlogAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/VatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/CatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/JugAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/SpotAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FlipAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/GemJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmMomAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/MedianAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/LPOsmAbstract.sol\"; */\r\n\r\ninterface LerpFabLike {\r\n    function newIlkLerp(address target_, bytes32 ilk_, bytes32 what_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n}\r\n\r\ninterface LerpLike {\r\n    function init() external;\r\n}\r\n\r\ncontract SpellAction {\r\n    // Office hours enabled if true\r\n    bool constant public officeHours = false;\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    // Ilks\r\n    bytes32 constant ILK_LINK_A         = \"LINK-A\";\r\n    bytes32 constant ILK_MANA_A         = \"MANA-A\";\r\n    bytes32 constant ILK_BAT_A          = \"BAT-A\";\r\n    bytes32 constant ILK_TUSD_A         = \"TUSD-A\";\r\n    bytes32 constant ILK_PSM_USDC_A     = \"PSM-USDC-A\";\r\n\r\n    // UNIV2WBTCETH-A\r\n    address constant UNIV2WBTCETH            = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\r\n    address constant MCD_JOIN_UNIV2WBTCETH_A = 0xDc26C9b7a8fe4F5dF648E314eC3E6Dc3694e6Dd2;\r\n    address constant MCD_FLIP_UNIV2WBTCETH_A = 0xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6;\r\n    address constant PIP_UNIV2WBTCETH        = 0x771338D5B31754b25D2eb03Cea676877562Dec26; \r\n    bytes32 constant ILK_UNIV2WBTCETH_A      = \"UNIV2WBTCETH-A\";\r\n\r\n    // UNIV2USDCETH-A\r\n    address constant UNIV2USDCETH            = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\r\n    address constant MCD_JOIN_UNIV2USDCETH_A = 0x03Ae53B33FeeAc1222C3f372f32D37Ba95f0F099;\r\n    address constant MCD_FLIP_UNIV2USDCETH_A = 0x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB;\r\n    address constant PIP_UNIV2USDCETH        = 0xECB03Fec701B93DC06d19B4639AA8b5a838472BE;\r\n    bytes32 constant ILK_UNIV2USDCETH_A      = \"UNIV2USDCETH-A\";\r\n\r\n    // Lerp Module - https://github.com/BellwoodStudios/dss-lerp/tree/v0.1.0\r\n    address constant LERP_FAB = 0x9B98aF142993877BEF8FC5cA514fD8A18E8f8Ed6;\r\n\r\n    // Oracle whitelist\r\n    address constant INSTA_DAPP = 0xDF3CDd10e646e4155723a3bC5b1191741DD90333;\r\n\r\n    // rates\r\n    uint256 constant ONE_PERCENT_RATE = 1000000000315522921573372069;\r\n    uint256 constant TWO_PERCENT_RATE = 1000000000627937192491029810;\r\n\r\n    // decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function execute() external limited {\r\n        address MCD_VAT      = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        address MCD_CAT      = CHANGELOG.getAddress(\"MCD_CAT\");\r\n        address MCD_SPOT     = CHANGELOG.getAddress(\"MCD_SPOT\");\r\n        address MCD_JUG      = CHANGELOG.getAddress(\"MCD_JUG\");\r\n        address MCD_END      = CHANGELOG.getAddress(\"MCD_END\");\r\n        address MCD_VOW      = CHANGELOG.getAddress(\"MCD_VOW\");\r\n        address FLIPPER_MOM  = CHANGELOG.getAddress(\"FLIPPER_MOM\");\r\n        address OSM_MOM      = CHANGELOG.getAddress(\"OSM_MOM\");\r\n        address MCD_JOIN_DAI = CHANGELOG.getAddress(\"MCD_JOIN_DAI\");\r\n        address ILK_REGISTRY = CHANGELOG.getAddress(\"ILK_REGISTRY\");\r\n        address ETHUSD_OSM   = CHANGELOG.getAddress(\"PIP_ETH\");\r\n\r\n        // Adjust Debt Ceiling Parameters - January 18, 2021\r\n        // https://vote.makerdao.com/polling/QmQtn7UY#poll-detail - LINK-A\r\n        // https://vote.makerdao.com/polling/QmSCLfXN#poll-detail - MANA-A\r\n        // https://vote.makerdao.com/polling/QmW4ei2M#poll-detail - BAT-A\r\n        // https://vote.makerdao.com/polling/QmXTGwq4#poll-detail - TUSD-A\r\n        // https://vote.makerdao.com/polling/QmfTU85J#poll-detail - PSM-USDC-A [ December 14, 2020 ]\r\n\r\n        // Set the global debt ceiling\r\n        // + 10 M for LINK-A\r\n        // + 750 K for MANA-A [ Note: Units ]\r\n        // - 8 M for BAT-A\r\n        // - 135 M for TUSD-A\r\n        // + 470 M for PSM-USDC-A [ Lerp End Amount ]\r\n        // + 3 M for WBTC-ETH UNI LP\r\n        // + 3 M for USDC-ETH UNI LP\r\n        VatAbstract(MCD_VAT).file(\"Line\",\r\n            VatAbstract(MCD_VAT).Line()\r\n            + 343_750_000 * RAD\r\n        );\r\n\r\n        // Update the Debt Ceilings\r\n        VatAbstract(MCD_VAT).file(ILK_LINK_A, \"line\", 20 * MILLION * RAD);\r\n        VatAbstract(MCD_VAT).file(ILK_MANA_A, \"line\", 1 * MILLION * RAD);\r\n        VatAbstract(MCD_VAT).file(ILK_BAT_A, \"line\", 2 * MILLION * RAD);\r\n        VatAbstract(MCD_VAT).file(ILK_TUSD_A, \"line\", 0 * MILLION * RAD);\r\n        // Note: PSM-USDC-A is set to 80 M in the Lerp.init()\r\n\r\n        // Setup the Lerp module\r\n        address lerp = LerpFabLike(LERP_FAB).newIlkLerp(MCD_VAT, ILK_PSM_USDC_A, \"line\", 80 * MILLION * RAD, 500 * MILLION * RAD, 12 weeks);\r\n        VatAbstract(MCD_VAT).rely(lerp);\r\n        LerpLike(lerp).init();\r\n\r\n        // Set dust to 2000 DAI - January 18, 2021\r\n        // https://vote.makerdao.com/polling/QmWPAu5z#poll-detail\r\n        bytes32[] memory ilks = IlkRegistryAbstract(ILK_REGISTRY).list();\r\n        for (uint256 i = 0; i < ilks.length; i++) {\r\n            (,,,, uint256 dust) = VatAbstract(MCD_VAT).ilks(ilks[i]);\r\n            if (dust != 0) {\r\n                VatAbstract(MCD_VAT).file(ilks[i], \"dust\", 2000 * RAD);\r\n            }\r\n        }\r\n\r\n        // Vault Compensation Working Group Payment - January 18, 2021\r\n        // https://vote.makerdao.com/polling/QmQcXFeC#poll-detail\r\n        VatAbstract(MCD_VAT).suck(MCD_VOW, address(this), 12700 * RAD);\r\n        VatAbstract(MCD_VAT).hope(MCD_JOIN_DAI);\r\n        \r\n        // @makerman: 6,300 Dai for 126 hours to [0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0]\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0, 6300 * WAD);\r\n        // @monet-supply: 3,800 Dai for 76 hours to [0x8d07D225a769b7Af3A923481E1FdF49180e6A265]\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(0x8d07D225a769b7Af3A923481E1FdF49180e6A265, 3800 * WAD);\r\n        // @Joshua_Pritikin: 2,000 Dai for 40 hours to [0x2235A5D7bCC37855CB91dFf66334F4DFD9C39b58]\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(0x2235A5D7bCC37855CB91dFf66334F4DFD9C39b58, 2000 * WAD);\r\n        // @befitsandpiper: 400 Dai for 8 hours to [0x851fB899dA7F80c211d9B8e5f231FB3BC9eca41a]\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(0x851fB899dA7F80c211d9B8e5f231FB3BC9eca41a, 400 * WAD);\r\n        // @Vault2288: 200 Dai for 4 hours to [0x92e5a14b08E5232682Eb38269A1cE661F04Ec93D]\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(0x92e5a14b08E5232682Eb38269A1cE661F04Ec93D, 200 * WAD);\r\n\r\n        VatAbstract(MCD_VAT).nope(MCD_JOIN_DAI);\r\n\r\n        // Whitelist Instadapp on ETHUSD Oracle - January 18, 2021\r\n        // https://vote.makerdao.com/polling/QmNSb2cu#poll-detail\r\n        OsmAbstract(ETHUSD_OSM).kiss(INSTA_DAPP);\r\n\r\n        //\r\n        // Onboard WBTC-ETH UNI LP\r\n        //\r\n\r\n\t\t// Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2WBTCETH_A).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2WBTCETH_A).ilk() == ILK_UNIV2WBTCETH_A, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2WBTCETH_A).gem() == UNIV2WBTCETH, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2WBTCETH_A).dec() == DSTokenAbstract(UNIV2WBTCETH).decimals(), \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).vat() == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).cat() == MCD_CAT, \"flip-cat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).ilk() == ILK_UNIV2WBTCETH_A, \"flip-ilk-not-match\");\r\n\r\n        // Set the UNIV2WBTCETH PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ILK_UNIV2WBTCETH_A, \"pip\", PIP_UNIV2WBTCETH);\r\n\r\n        // Set the UNIV2WBTCETH-A Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2WBTCETH_A, \"flip\", MCD_FLIP_UNIV2WBTCETH_A);\r\n\r\n        // Init UNIV2WBTCETH-A ilk in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(ILK_UNIV2WBTCETH_A);\r\n        JugAbstract(MCD_JUG).init(ILK_UNIV2WBTCETH_A);\r\n\r\n        // Allow UNIV2WBTCETH-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_UNIV2WBTCETH_A);\r\n        // Allow the UNIV2WBTCETH-A Flipper to reduce the Cat litterbox on deal()\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_UNIV2WBTCETH_A);\r\n        // Allow Cat to kick auctions in UNIV2WBTCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).rely(MCD_CAT);\r\n        // Allow End to yank auctions in UNIV2WBTCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).rely(MCD_END);\r\n        // Allow FlipperMom to access to the UNIV2WBTCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).rely(FLIPPER_MOM);\r\n        // Disallow Cat to kick auctions in UNIV2WBTCETH-A Flipper\r\n        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\r\n        //FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_UNIV2WBTCETH_A);\r\n\r\n        // Allow OsmMom to access to the UNIV2WBTCETH Osm\r\n        // !!!!!!!! Only if PIP_UNIV2WBTCETH = Osm and hasn't been already relied due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2WBTCETH).rely(OSM_MOM);\r\n\r\n        // Whitelist Osm to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2WBTCETH = Osm, its src is a Median and hasn't been already whitelisted due a previous deployed ilk\r\n        MedianAbstract(LPOsmAbstract(PIP_UNIV2WBTCETH).orb0()).kiss(PIP_UNIV2WBTCETH);\r\n        MedianAbstract(LPOsmAbstract(PIP_UNIV2WBTCETH).orb1()).kiss(PIP_UNIV2WBTCETH);\r\n\r\n        // Whitelist Spotter to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2WBTCETH = Osm or PIP_UNIV2WBTCETH = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2WBTCETH).kiss(MCD_SPOT);\r\n\r\n        // Whitelist End to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2WBTCETH = Osm or PIP_UNIV2WBTCETH = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2WBTCETH).kiss(MCD_END);\r\n        // Set UNIV2WBTCETH Osm in the OsmMom for new ilk\r\n        // !!!!!!!! Only if PIP_UNIV2WBTCETH = Osm\r\n        OsmMomAbstract(OSM_MOM).setOsm(ILK_UNIV2WBTCETH_A, PIP_UNIV2WBTCETH);\r\n\r\n        // Set the UNIV2WBTCETH-A debt ceiling\r\n        VatAbstract(MCD_VAT).file(ILK_UNIV2WBTCETH_A, \"line\", 3 * MILLION * RAD);\r\n        // Set the UNIV2WBTCETH-A dust\r\n        VatAbstract(MCD_VAT).file(ILK_UNIV2WBTCETH_A, \"dust\", 2000 * RAD);\r\n        // Set the Lot size\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2WBTCETH_A, \"dunk\", 50 * THOUSAND * RAD);\r\n        // Set the UNIV2WBTCETH-A liquidation penalty (e.g. 13% => X = 113)\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2WBTCETH_A, \"chop\", 113 * WAD / 100);\r\n        // Set the UNIV2WBTCETH-A stability fee (e.g. 1% = 1000000000315522921573372069)\r\n        JugAbstract(MCD_JUG).file(ILK_UNIV2WBTCETH_A, \"duty\", TWO_PERCENT_RATE);\r\n        // Set the UNIV2WBTCETH-A percentage between bids (e.g. 3% => X = 103)\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).file(\"beg\", 103 * WAD / 100);\r\n        // Set the UNIV2WBTCETH-A time max time between bids\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).file(\"ttl\", 6 hours);\r\n        // Set the UNIV2WBTCETH-A max auction duration to\r\n        FlipAbstract(MCD_FLIP_UNIV2WBTCETH_A).file(\"tau\", 6 hours);\r\n        // Set the UNIV2WBTCETH-A min collateralization ratio (e.g. 150% => X = 150)\r\n        SpotAbstract(MCD_SPOT).file(ILK_UNIV2WBTCETH_A, \"mat\", 150 * RAY / 100);\r\n\r\n        // Update UNIV2WBTCETH-A spot value in Vat\r\n        SpotAbstract(MCD_SPOT).poke(ILK_UNIV2WBTCETH_A);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_UNIV2WBTCETH_A);\r\n\r\n        // Update the changelog\r\n        CHANGELOG.setAddress(\"UNIV2WBTCETH\", UNIV2WBTCETH);\r\n        CHANGELOG.setAddress(\"MCD_JOIN_UNIV2WBTCETH_A\", MCD_JOIN_UNIV2WBTCETH_A);\r\n        CHANGELOG.setAddress(\"MCD_FLIP_UNIV2WBTCETH_A\", MCD_FLIP_UNIV2WBTCETH_A);\r\n        CHANGELOG.setAddress(\"PIP_UNIV2WBTCETH\", PIP_UNIV2WBTCETH);\r\n\r\n        //\r\n        // Onboard USDC-ETH UNI LP\r\n        //\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2USDCETH_A).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2USDCETH_A).ilk() == ILK_UNIV2USDCETH_A, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2USDCETH_A).gem() == UNIV2USDCETH, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_UNIV2USDCETH_A).dec() == DSTokenAbstract(UNIV2USDCETH).decimals(), \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).vat() == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).cat() == MCD_CAT, \"flip-cat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).ilk() == ILK_UNIV2USDCETH_A, \"flip-ilk-not-match\");\r\n\r\n        // Set the UNIV2USDCETH PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ILK_UNIV2USDCETH_A, \"pip\", PIP_UNIV2USDCETH);\r\n\r\n        // Set the UNIV2USDCETH-A Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2USDCETH_A, \"flip\", MCD_FLIP_UNIV2USDCETH_A);\r\n\r\n        // Init UNIV2USDCETH-A ilk in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(ILK_UNIV2USDCETH_A);\r\n        JugAbstract(MCD_JUG).init(ILK_UNIV2USDCETH_A);\r\n\r\n        // Allow UNIV2USDCETH-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_UNIV2USDCETH_A);\r\n        // Allow the UNIV2USDCETH-A Flipper to reduce the Cat litterbox on deal()\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_UNIV2USDCETH_A);\r\n        // Allow Cat to kick auctions in UNIV2USDCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).rely(MCD_CAT);\r\n        // Allow End to yank auctions in UNIV2USDCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).rely(MCD_END);\r\n        // Allow FlipperMom to access to the UNIV2USDCETH-A Flipper\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).rely(FLIPPER_MOM);\r\n        // Disallow Cat to kick auctions in UNIV2USDCETH-A Flipper\r\n        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\r\n        //FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_UNIV2USDCETH_A);\r\n\r\n        // Allow OsmMom to access to the UNIV2USDCETH Osm\r\n        // !!!!!!!! Only if PIP_UNIV2USDCETH = Osm and hasn't been already relied due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2USDCETH).rely(OSM_MOM);\r\n        // Whitelist Osm to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2USDCETH = Osm, its src is a Median and hasn't been already whitelisted due a previous deployed ilk\r\n        MedianAbstract(LPOsmAbstract(PIP_UNIV2USDCETH).orb1()).kiss(PIP_UNIV2USDCETH);\r\n        // Whitelist Spotter to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2USDCETH = Osm or PIP_UNIV2USDCETH = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2USDCETH).kiss(MCD_SPOT);\r\n        // Whitelist End to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_UNIV2USDCETH = Osm or PIP_UNIV2USDCETH = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        LPOsmAbstract(PIP_UNIV2USDCETH).kiss(MCD_END);\r\n        // Set UNIV2USDCETH Osm in the OsmMom for new ilk\r\n        // !!!!!!!! Only if PIP_UNIV2USDCETH = Osm\r\n        OsmMomAbstract(OSM_MOM).setOsm(ILK_UNIV2USDCETH_A, PIP_UNIV2USDCETH);\r\n\r\n        // Set the UNIV2USDCETH-A debt ceiling\r\n        VatAbstract(MCD_VAT).file(ILK_UNIV2USDCETH_A, \"line\", 3 * MILLION * RAD);\r\n        // Set the UNIV2USDCETH-A dust\r\n        VatAbstract(MCD_VAT).file(ILK_UNIV2USDCETH_A, \"dust\", 2000 * RAD);\r\n        // Set the Lot size\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2USDCETH_A, \"dunk\", 50 * THOUSAND * RAD);\r\n        // Set the UNIV2USDCETH-A liquidation penalty (e.g. 13% => X = 113)\r\n        CatAbstract(MCD_CAT).file(ILK_UNIV2USDCETH_A, \"chop\", 113 * WAD / 100);\r\n        // Set the UNIV2USDCETH-A stability fee (e.g. 1% = 1000000000315522921573372069)\r\n        JugAbstract(MCD_JUG).file(ILK_UNIV2USDCETH_A, \"duty\", ONE_PERCENT_RATE);\r\n        // Set the UNIV2USDCETH-A percentage between bids (e.g. 3% => X = 103)\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).file(\"beg\", 103 * WAD / 100);\r\n        // Set the UNIV2USDCETH-A time max time between bids\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).file(\"ttl\", 6 hours);\r\n        // Set the UNIV2USDCETH-A max auction duration to\r\n        FlipAbstract(MCD_FLIP_UNIV2USDCETH_A).file(\"tau\", 6 hours);\r\n        // Set the UNIV2USDCETH-A min collateralization ratio (e.g. 150% => X = 150)\r\n        SpotAbstract(MCD_SPOT).file(ILK_UNIV2USDCETH_A, \"mat\", 125 * RAY / 100);\r\n\r\n        // Update UNIV2USDCETH-A spot value in Vat\r\n        SpotAbstract(MCD_SPOT).poke(ILK_UNIV2USDCETH_A);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_UNIV2USDCETH_A);\r\n\r\n        // Update the changelog\r\n        CHANGELOG.setAddress(\"UNIV2USDCETH\", UNIV2USDCETH);\r\n        CHANGELOG.setAddress(\"MCD_JOIN_UNIV2USDCETH_A\", MCD_JOIN_UNIV2USDCETH_A);\r\n        CHANGELOG.setAddress(\"MCD_FLIP_UNIV2USDCETH_A\", MCD_FLIP_UNIV2USDCETH_A);\r\n        CHANGELOG.setAddress(\"PIP_UNIV2USDCETH\", PIP_UNIV2USDCETH);\r\n\r\n        // Update the changelog\r\n        CHANGELOG.setAddress(\"LERP_FAB\", LERP_FAB);\r\n        // Bump version\r\n        CHANGELOG.setVersion(\"1.2.4\");\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    DSPauseAbstract immutable public pause;\r\n    address         immutable public action;\r\n    bytes32         immutable public tag;\r\n    uint256         immutable public expiration;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    bool            public done;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/e59032178a702181d82f7a2be12bd95714ff53e0/governance/votes/Community%20Executive%20vote%20-%20January%2022%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2021-01-22 MakerDAO Executive Spell | Hash: 0x2d13137cf10cdd9dcf9e5047d1894608d1d3893a5c07a1c8955f0d11726b12b2\";\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    constructor() public {\r\n        pause = DSPauseAbstract(CHANGELOG.getAddress(\"MCD_PAUSE\"));\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;\r\n        address _action = action = address(new SpellAction());\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = block.timestamp + 30 days;\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DSSSpell/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function schedule() external {\r\n        require(block.timestamp <= expiration, \"DSSSpell/spell-has-expired\");\r\n        require(eta == 0, \"DSSSpell/spell-already-scheduled\");\r\n        eta = block.timestamp + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() external {\r\n        require(!done, \"DSSSpell/spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4bef5cff657681d21c8139329f8aaeef2b4aceb1b08008ccf884addb534c3a47"}]}