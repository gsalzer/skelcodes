{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IBPool {\r\n\r\n    function isexternalSwap() external view returns (bool);\r\n    function isFinalized() external view returns (bool);\r\n    function isBound(address t) external view returns (bool);\r\n    function getNumTokens() external view returns (uint);\r\n    function getCurrentTokens() external view returns (address[] memory tokens);\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n    function getDenormalizedWeight(address token) external view returns (uint);\r\n    function getTotalDenormalizedWeight() external view returns (uint);\r\n    function getNormalizedWeight(address token) external view returns (uint);\r\n    function getBalance(address token) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n    function getController() external view returns (address);\r\n\r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address manager) external;\r\n    function setexternalSwap(bool external_) external;\r\n    function finalize() external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n    function unbind(address token) external;\r\n    function gulp(address token) external;\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n\r\n    function joinswapPoolAmountOut(\r\n        address tokenIn,\r\n        uint poolAmountOut,\r\n        uint maxAmountIn\r\n    ) external returns (uint tokenAmountIn);\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint poolAmountIn,\r\n        uint minAmountOut\r\n    ) external returns (uint tokenAmountOut);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPoolAmountIn\r\n    ) external returns (uint poolAmountIn);\r\n\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function allowance(address src, address dst) external view returns (uint);\r\n\r\n    function approve(address dst, uint amt) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint amt\r\n    ) external returns (bool);\r\n\r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    ) external pure returns (uint spotPrice);\r\n\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountOut);\r\n\r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountIn);\r\n\r\n}\r\n\r\ninterface IToken is IERC20 {\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function mint(address account, uint256 amount) external;\r\n\r\n}\r\n\r\ninterface IExchange {\r\n\r\n    /**\r\n     * @dev Exchange BAL Tokens to desired Token and transfers to worker contract\r\n     */\r\n    function exchangeBal(uint256 _balAmount) external;\r\n\r\n}\r\n\r\n// \r\n// Libs\r\n// Used contracts\r\n//Balancer\r\n// Internal\r\ncontract Borrow is Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    // Interface of the Balancer Pool\r\n    IBPool public bPool;\r\n    // Interface of Balancer BAL Token\r\n    IERC20 public balToken; // mainnet 0xba100000625a3754423978a60c9317c58a424e3D;\r\n    // Interface of the Token contract accepts\r\n    IERC20 public inToken;\r\n    // Contract address of the Token contract mints and sends out to compensate losses\r\n    IToken public outToken;\r\n    // Address where fees will be sent\r\n    address public feeAddress;\r\n    // Contract address where extra profit will be sent\r\n    address public workerAddress;\r\n    // Interface of Exchange contract address where BAL tokens will be sent for exchange\r\n    IExchange public exchange;\r\n    // Hold time for withdrawal in seconds\r\n    uint256 public holdTime;\r\n    // Max loss coefficient contract will compensate to user in ppm, cannot be lower 100 000 (10%)\r\n    uint256 public lossCoefficient;\r\n    // Max profit coefficient contract will pay to user in ppm, cannot be lower 100 000 (10%)\r\n    uint256 public profitCoefficient;\r\n    // Fee from profit coefficient in ppm cannot be higher 20 000 (10%)\r\n    uint256 public feeCoefficient;\r\n\r\n    // Struct to store user balances and time last deposited\r\n    struct UserData {\r\n        //In Token Balance\r\n        uint256 inBalance;\r\n        //BPT Token Balance\r\n        uint256 bpBalance;\r\n        //Last time deposited\r\n        uint256 lastTime;\r\n    }\r\n    mapping (address => UserData) private userData;\r\n    // Total In Token balance locked in contract\r\n    uint256 private inBalance;\r\n\r\n    event Received(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event FeePaid(address indexed user, uint256 amount);\r\n    \r\n    constructor (\r\n        address _bPool,\r\n        address _balToken,\r\n    \taddress _inToken,\r\n    \taddress _outToken,\r\n        address _feeAddress,        \r\n    \taddress _workerAddress,\r\n        address _exchangeAddress,\r\n    \tuint256 _holdDays,\r\n    \tuint256 _lossCoefficient,\r\n    \tuint256 _profitCoefficient,\r\n    \tuint256 _feeCoefficient\r\n    )\r\n    \tpublic\r\n    {\r\n    \tsetBPool(_bPool);\r\n        setBalToken(_balToken);\r\n        setInToken(_inToken);\r\n    \toutToken = IToken(_outToken);\r\n    \tfeeAddress = _feeAddress;\r\n        setWorker(_workerAddress);\r\n        setExchange(_exchangeAddress);\r\n    \tsetHoldTime(_holdDays);\r\n    \tsetLossCoefficient(_lossCoefficient);\r\n    \tsetProfitCoefficient(_profitCoefficient);\r\n    \tsetFeeCoefficient(_feeCoefficient);\r\n    }\r\n\r\n\t/***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n    \r\n    /** \r\n    * @dev Sets Balancer pool contract address\r\n    * @param _bPool - Pool contract address\r\n    */\r\n    function setBPool (\r\n        address _bPool\r\n    )\r\n        internal\r\n    {\r\n        require(_bPool.isContract(), \"bPool must be a contract\");\r\n        bPool = IBPool(_bPool);\r\n        require(bPool.isFinalized(), \"pool is not finalized\");\r\n\r\n    }\r\n\r\n    /** \r\n    * @dev Sets BAL Token contract address\r\n    * @param _balToken - BAL Token contract address\r\n    */\r\n    function setBalToken (\r\n        address _balToken\r\n    )\r\n        internal\r\n    {\r\n        require(_balToken.isContract(), \"balToken must be a contract\");\r\n        balToken = IERC20(_balToken);\r\n    }\r\n\r\n    /** \r\n    * @dev Sets In Token contract address, checks it is binded to Balancer Pool\r\n    * @param _inToken - Pool contract address\r\n    */\r\n    function setInToken (\r\n        address _inToken\r\n    )\r\n        internal\r\n    {\r\n        require(_inToken.isContract(), \"inToken must be a contract\");\r\n        require(bPool.isBound(_inToken), \"token is not bound to pool\");\r\n        inToken = IERC20(_inToken);\r\n    }\r\n\r\n    /** \r\n    * @dev Sets Worker contract address\r\n\t* @param _workerAddress - New worker contract address\r\n\t*/\r\n    function setWorker (\r\n    \taddress _workerAddress\r\n    )\r\n    \tpublic\r\n    \tonlyOwner\r\n    {\r\n    \trequire(_workerAddress.isContract(), \"workerAddress must be a contract\");\r\n    \tworkerAddress = _workerAddress;\r\n    }\r\n\r\n    /** \r\n    * @dev Sets Exchange contract address\r\n    * @param _exchangeAddress - New exchange contract address\r\n    */\r\n    function setExchange (\r\n        address _exchangeAddress\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_exchangeAddress.isContract(), \"exchangeAddress address must be a contract\");\r\n        exchange = IExchange(_exchangeAddress);\r\n    }\r\n\r\n    /** \r\n    * @dev Sets Hold time\r\n    * @param _holdDays - Hold time in days\r\n    */\r\n    function setHoldTime (\r\n        uint256 _holdDays\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        holdTime = _holdDays.mul(1 days);\r\n    }\r\n\r\n    /** \r\n    * @dev Sets Loss Coefficient\r\n\t* @param _coefficient - New loss coefficient\r\n\t*/\r\n    function setLossCoefficient (\r\n    \tuint256 _coefficient\r\n    )\r\n    \tpublic\r\n    \tonlyOwner\r\n    {\r\n    \trequire(_coefficient >= 1e5, \"loss coefficient must be higher 100 000\");\r\n    \tlossCoefficient = _coefficient;\r\n    }    \r\n\r\n    /** \r\n    * @dev Sets Profit Coefficient\r\n\t* @param _coefficient - New profit coefficient\r\n\t*/\r\n    function setProfitCoefficient (\r\n    \tuint256 _coefficient\r\n    )\r\n    \tpublic\r\n    \tonlyOwner\r\n    {\r\n    \trequire(_coefficient >= 1e5, \"profit coefficient must be higher 100 000\");\r\n    \tprofitCoefficient = _coefficient;\r\n    } \r\n\r\n    /** \r\n    * @dev Sets Fee Coefficient\r\n\t* @param _coefficient - New fee coefficient\r\n\t*/\r\n    function setFeeCoefficient (\r\n    \tuint256 _coefficient\r\n    )\r\n    \tpublic\r\n    \tonlyOwner\r\n    {\r\n    \trequire(_coefficient <= 2e4, \"fee coefficient must be lower 20 000\");\r\n    \tfeeCoefficient = _coefficient;\r\n    } \r\n\r\n    /***************************************\r\n                    ACTIONS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Transfers BAL Tokens to exchange contract\r\n     */\r\n    function withdrawBal ()\r\n        external\r\n    {\r\n        uint256 _amount = balToken.balanceOf(address(this));\r\n        require(_amount != 0, 'BAL balance is 0');\r\n        balToken.approve(address(exchange), _amount);\r\n        exchange.exchangeBal(_amount);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Transfers In Tokens\r\n     * @param _inAmount of In Tokens\r\n     */\r\n    function receiveInToken (uint256 _inAmount)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 bpAmount)\r\n    {\r\n        require(_inAmount != 0, \"in amount is 0\");\r\n        address _address = msg.sender;\r\n        UserData storage _user = userData[_address];\r\n        inToken.safeTransferFrom(_address, address(this), _inAmount);\r\n        inToken.approve(address(bPool), _inAmount);\r\n        bpAmount = bPool.joinswapExternAmountIn(\r\n            address(inToken),\r\n            _inAmount,\r\n            1\r\n        );\r\n        inBalance = inBalance.add(_inAmount);\r\n        _user.inBalance = _user.inBalance.add(_inAmount);\r\n        _user.bpBalance = _user.bpBalance.add(bpAmount);\r\n        _user.lastTime = block.timestamp;\r\n        emit Received(_address, _inAmount);\r\n        return bpAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw\r\n     * @param _bpAmount of BPT Tokens\r\n     */\r\n     function withdraw(uint256 _bpAmount)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 amount, uint256 _compensatedAmount)\r\n    {\r\n        require(_bpAmount != 0, \"in amount is 0\");\r\n        address _address = msg.sender;\r\n        UserData storage _user = userData[_address];\r\n        require(_user.bpBalance >= _bpAmount, \"not enough balance\");\r\n        require(block.timestamp.sub(_user.lastTime) >= holdTime, 'cannot withdraw, tokens on hold');\r\n        uint256 _inAmount = _user.inBalance.mul(_bpAmount).div(_user.bpBalance);\r\n        inBalance = inBalance.sub(_inAmount);\r\n        _user.inBalance = _user.inBalance.sub(_inAmount);\r\n        _user.bpBalance = _user.bpBalance.sub(_bpAmount); \r\n        amount = bPool.exitswapPoolAmountIn(\r\n            address(inToken),\r\n            _bpAmount,\r\n            1\r\n        );\r\n        uint256 _fee; uint256 _feeWorker;\r\n        (\r\n            amount, \r\n            _compensatedAmount, \r\n            _fee, \r\n            _feeWorker\r\n        ) = calcChange(_inAmount, amount);\r\n        inToken.safeTransfer(_address, amount);\r\n        if(_compensatedAmount != 0)\r\n            outToken.mint(_address, _compensatedAmount);\r\n        if(_fee != 0){\r\n            inToken.safeTransfer(feeAddress, _fee);\r\n            emit FeePaid(feeAddress, _fee);\r\n        }\r\n        if(_feeWorker != 0){\r\n            inToken.safeTransfer(workerAddress, _feeWorker);\r\n            emit FeePaid(workerAddress, _feeWorker);\r\n        }\r\n        emit Withdrawn(_address, _inAmount);\r\n        return (amount, _compensatedAmount);\r\n    }\r\n    \r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Returns contract's total balance of BAL Token\r\n     */\r\n    function getBalanceBal()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total balance of In Token locked into contract\r\n     */\r\n    function getBalanceIn()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return inBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns contract's total balance of BPT Token\r\n     */\r\n    function getBalanceBp()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return bPool.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of In Token of given user address\r\n     * @param _address address of the user\r\n     */\r\n    function getBalanceInOf(address _address)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userData[_address].inBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of BPT Token of given user address\r\n     * @param _address address of the user\r\n     */\r\n    function getBalanceBpOf(address _address)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userData[_address].bpBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if hold is active for given user address\r\n     * @param _address address of the user\r\n     */\r\n    function isOnHold(address _address)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        if(userData[_address].lastTime == 0) return false;\r\n        return block.timestamp.sub(userData[_address].lastTime) <= holdTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates returned In, Compensation Tokens values and fees\r\n     * @param _inAmount initial investment of In Tokens\r\n     * @param _amount returned amount from Balancer\r\n     */\r\n    function calcChange(uint256 _inAmount, uint256 _amount)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 returnAmount, \r\n            uint256 compensatedAmount, \r\n            uint256 fee, \r\n            uint256 feeWorker\r\n        )\r\n    {\r\n        uint256 _change; uint256 _maxChange;\r\n        if(_inAmount > _amount){\r\n            _change = _inAmount.sub(_amount);\r\n            _maxChange = _inAmount.mul(lossCoefficient).div(1e6);\r\n            if(_change > _maxChange){\r\n                compensatedAmount = _maxChange;\r\n            }else{\r\n                compensatedAmount = _change;\r\n            }\r\n            returnAmount = _amount;\r\n        }else{\r\n            _change = _amount.sub(_inAmount);\r\n            _maxChange = _change.mul(profitCoefficient).div(1e6);\r\n            returnAmount = _inAmount.add(_maxChange);\r\n            fee = _change.sub(_maxChange).mul(feeCoefficient).div(1e6);\r\n            feeWorker = _change.sub(_maxChange).sub(fee);\r\n        }\r\n        return (returnAmount, compensatedAmount, fee, feeWorker);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates returned In, Compensation Tokens values for user\r\n     * @param _address User address\r\n     * @param _bpAmount Amount of BPT Tokens\r\n     */\r\n    function calcReturn(address _address, uint256 _bpAmount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 returnAmount, \r\n            uint256 compensatedAmount\r\n        )\r\n    {\r\n        UserData memory _user = userData[_address];\r\n        require(_bpAmount != 0, \"in amount is 0\");\r\n        require(_user.bpBalance >= _bpAmount, \"not enough balance\");\r\n        uint256 _inAmount = _user.inBalance.mul(_bpAmount).div(_user.bpBalance);\r\n        uint256 _amount = calcInPoolBp(_inAmount);\r\n        (\r\n            returnAmount, \r\n            compensatedAmount, \r\n            ,\r\n        ) = calcChange(_inAmount, _amount);\r\n        return (returnAmount, compensatedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates returned BPT Tokens from Pool given In Token amount\r\n     * @param _inAmount Amount of In Tokens\r\n     */\r\n    function calcBpPoolIn(uint256 _inAmount)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return bPool.calcPoolOutGivenSingleIn(\r\n            bPool.getBalance(address(inToken)),\r\n            bPool.getDenormalizedWeight(address(inToken)),\r\n            bPool.totalSupply(),\r\n            bPool.getTotalDenormalizedWeight(),\r\n            _inAmount,\r\n            bPool.getSwapFee()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates returned In Tokens from Pool given BPT Token amount\r\n     * @param _bpAmount Amount of BPT Tokens\r\n     */\r\n    function calcInPoolBp(uint256 _bpAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return bPool.calcSingleOutGivenPoolIn(\r\n            bPool.getBalance(address(inToken)),\r\n            bPool.getDenormalizedWeight(address(inToken)),\r\n            bPool.totalSupply(),\r\n            bPool.getTotalDenormalizedWeight(),\r\n            _bpAmount,\r\n            bPool.getSwapFee()\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_holdDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lossCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeCoefficient\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bPool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"}],\"name\":\"calcBpPoolIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeWorker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bpAmount\",\"type\":\"uint256\"}],\"name\":\"calcInPoolBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bpAmount\",\"type\":\"uint256\"}],\"name\":\"calcReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceBpOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOnHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"}],\"name\":\"receiveInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"setFeeCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdDays\",\"type\":\"uint256\"}],\"name\":\"setHoldTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"setLossCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"setProfitCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bpAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compensatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Borrow","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e2eb726bce7790e57d978c6a2649186c4d481658000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000fef7e89a56c0ec433ecfae769d3c17d16814629e000000000000000000000000bbd3884af5361ec728f5fcda2fc2f4d51ad2cbf400000000000000000000000071977fea6831ec43bee0805e3eabdc7084d9949900000000000000000000000071977fea6831ec43bee0805e3eabdc7084d99499000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000007a1200000000000000000000000000000000000000000000000000000000000002710","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a1b0b0c0ecefd77834566f5907a34179eee2cb4c112a7633dca6a6a80687ebe"}]}