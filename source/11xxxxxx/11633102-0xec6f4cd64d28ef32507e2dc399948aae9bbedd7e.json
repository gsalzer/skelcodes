{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.7.6;\r\n\r\ninterface IExtendedAggregator {\r\n  /**\r\n   * @notice Return the address of the token of which this proxy provides the price of\r\n   * @return address token\r\n   */\r\n  function getToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Return the numeric type of this proxy\r\n   * @return uint256 type\r\n   */\r\n  function getTokenType() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Return the list of dependencies from where to check events on price updates\r\n   * @return address[] addresses\r\n   */\r\n  function getSubTokens() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Returns the price\r\n   * @return int256 price\r\n   */\r\n  function latestAnswer() external view returns (int256);\r\n\r\n  /**\r\n   * - 0: Invalid\r\n   * - 1: Simple token\r\n   * - 2: Complex token, with its price depending from other sources, for offchain tracking purposes\r\n   */\r\n  enum ProxyType {Invalid, Simple, Complex}\r\n}\r\n\r\ninterface IChainlinkAggregator {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\ncontract ExtendedGusdPriceProxy is IExtendedAggregator {\r\n  IChainlinkAggregator public constant ETH_USD_CHAINLINK_PROXY = IChainlinkAggregator(\r\n    0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n  );\r\n  int256 public constant NORMALIZATION = 1e8 * 1 ether; // 8 decimals to normalized the format on the ETH/USD pair and multiplying by 1 ether to get the price in wei\r\n  address public constant ETH_USD_MOCK_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\r\n\r\n  address internal constant GUSD = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd;\r\n  ProxyType internal constant TYPE = ProxyType.Complex; // 2 = \"Complex token\", with its price depending from other sources, for offchain tracking purposes\r\n  address[] internal _subTokens;\r\n\r\n  event Setup(address indexed token, ProxyType proxyType, address[] subTokens);\r\n\r\n  constructor() {\r\n    _subTokens.push(ETH_USD_MOCK_ADDRESS);\r\n\r\n    emit Setup(GUSD, TYPE, _subTokens);\r\n  }\r\n\r\n  function latestAnswer() external override view returns (int256) {\r\n    int256 priceFromChainlink = ETH_USD_CHAINLINK_PROXY.latestAnswer();\r\n\r\n    return (priceFromChainlink <= 0) ? 0 : NORMALIZATION / priceFromChainlink;\r\n  }\r\n\r\n  function getToken() external override pure returns (address) {\r\n    return GUSD;\r\n  }\r\n\r\n  function getTokenType() external override pure returns (uint256) {\r\n    return uint256(TYPE);\r\n  }\r\n\r\n  function getSubTokens() external override view returns (address[] memory) {\r\n    return _subTokens;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IExtendedAggregator.ProxyType\",\"name\":\"proxyType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"subTokens\",\"type\":\"address[]\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_USD_CHAINLINK_PROXY\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMALIZATION\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExtendedGusdPriceProxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7770a24ccf99234f82cabcd0732dded3c04f53e6ed5def0690e2e7fd8b52acbc"}]}