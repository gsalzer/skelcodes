{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ninterface SquigglyWTF {\r\n    function startAuction() external;\r\n    function participateInAuction(uint8 ink) external payable;\r\n    function endAuction() external; \r\n    function priceOfInk() external view returns (uint256);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function totalInk() external view returns (uint8);\r\n}\r\n\r\ncontract BuySquiggly {\r\n\r\n    address owner;\r\n    using Roles for Roles.Role;\r\n        \r\n    Roles.Role private _approvedCaller;\r\n\r\n    SquigglyWTF private squiggly = SquigglyWTF(0x36F379400DE6c6BCDF4408B282F8b685c56adc60);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    _approvedCaller.add(0x63a9dbCe75413036B2B778E670aaBd4493aAF9F3);        \r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Not ownwer\");\r\n        _;\r\n    }\r\n    function end() private {\r\n        squiggly.endAuction();\r\n    }\r\n    \r\n    function secure() private {\r\n        squiggly.startAuction();\r\n        uint256 priceToPay = squiggly.priceOfInk() * 98;\r\n        squiggly.participateInAuction{value: priceToPay}(uint8(98));\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function endAndSecure() public payable {\r\n    require(_approvedCaller.has(msg.sender), \"Only approved can call.\");\r\n        end();\r\n        secure();\r\n    }\r\n\r\n    function getNFT(uint _tokenId) public isOwner {\r\n        squiggly.safeTransferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n    \r\n    function drain() public isOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function addCaller(address newCaller) public isOwner {\r\n        _approvedCaller.add(newCaller);\r\n    }\r\n    \r\n    function removeCaller(address newCaller) public isOwner {\r\n        _approvedCaller.remove(newCaller);\r\n    }    \r\n    \r\n    function execute(address _dest,uint256 _value,bytes memory _data) public isOwner {\r\n        (bool s, bytes memory b) = _dest.call{value: _value}(_data);\r\n    }\r\n\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external view returns (bytes4) {\r\n        return BuySquiggly.onERC721Received.selector;\r\n    }\r\n    \r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCaller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAndSecure\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCaller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BuySquiggly","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b19708181bec7ac1ea5ae1a86c2a5e4f81fa1b82d1c6089dfdd0bd1a14d3589"}]}