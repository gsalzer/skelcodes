{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external  view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n  function approve(address spender, uint value) external returns (bool success);\r\n}\r\n\r\ncontract yRiseTokenSale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSold;\r\n  ERC20 public yRiseToken;\r\n  address payable public owner;\r\n  uint256 public collectedETH;\r\n  uint256 public startDate;\r\n  bool public softCapMet;\r\n  bool private presaleClosed = false;\r\n  uint256 private ethWithdrawals = 0;\r\n  uint256 private lastWithdrawal;\r\n\r\n  // tracks all contributors.\r\n  mapping(address => uint256) internal _contributions;\r\n  // adjusts for different conversion rates.\r\n  mapping(address => uint256) internal _averagePurchaseRate;\r\n  // total contributions from wallet.\r\n  mapping(address => uint256) internal _numberOfContributions;\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender;\r\n    yRiseToken = ERC20(_wallet);\r\n  }\r\n\r\n  uint256 amount;\r\n  uint256 rateDay1 = 20;\r\n  uint256 rateDay2 = 16;\r\n  uint256 rateDay3 = 13;\r\n  uint256 rateDay4 = 10;\r\n  uint256 rateDay5 = 8;\r\n \r\n  // Converts ETH to yRise and sends new yRise to the sender\r\n  receive () external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(yRiseToken.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 3 ether);\r\n    require(!presaleClosed);\r\n     \r\n    if (now.sub(startDate) <= 1 days) {\r\n       amount = msg.value.mul(20);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay1.mul(10));\r\n    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {\r\n       amount = msg.value.mul(16);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10));\r\n    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {\r\n       amount = msg.value.mul(13);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));\r\n    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {\r\n       amount = msg.value.mul(10);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10));\r\n    } else if(now.sub(startDate) > 4 days) {\r\n       amount = msg.value.mul(8);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));\r\n    }\r\n    \r\n    require(amount <= yRiseToken.balanceOf(address(this)));\r\n    // update constants.\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    // update address contribution + total contributions.\r\n    _contributions[msg.sender] = _contributions[msg.sender].add(amount);\r\n    _numberOfContributions[msg.sender] = _numberOfContributions[msg.sender].add(1);\r\n    // transfer the tokens.\r\n    yRiseToken.transfer(msg.sender, amount);\r\n    // check if soft cap is met.\r\n    if (!softCapMet && collectedETH >= 100 ether) {\r\n      softCapMet = true;\r\n    }\r\n  }\r\n\r\n  // Converts ETH to yRise and sends new yRise to the sender\r\n  function contribute() external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(yRiseToken.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 3 ether);\r\n    require(!presaleClosed);\r\n\r\n    if (now.sub(startDate) <= 1 days) {\r\n       amount = msg.value.mul(20);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay1.mul(10));\r\n    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {\r\n       amount = msg.value.mul(16);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10));\r\n    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {\r\n       amount = msg.value.mul(13);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));\r\n    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {\r\n       amount = msg.value.mul(10);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10));\r\n    } else if(now.sub(startDate) > 4 days) {\r\n       amount = msg.value.mul(8);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));\r\n    }\r\n        \r\n    require(amount <= yRiseToken.balanceOf(address(this)));\r\n    // update constants.\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    // update address contribution + total contributions.\r\n    _contributions[msg.sender] = _contributions[msg.sender].add(amount);\r\n    _numberOfContributions[msg.sender] = _numberOfContributions[msg.sender].add(1);\r\n    // transfer the tokens.\r\n    yRiseToken.transfer(msg.sender, amount);\r\n    // check if soft cap is met.\r\n    if (!softCapMet && collectedETH >= 100 ether) {\r\n      softCapMet = true;\r\n    }\r\n  }\r\n\r\n  function numberOfContributions(address from) public view returns(uint256) {\r\n    return _numberOfContributions[address(from)]; \r\n  }\r\n\r\n  function contributions(address from) public view returns(uint256) {\r\n    return _contributions[address(from)];\r\n  }\r\n\r\n  function averagePurchaseRate(address from) public view returns(uint256) {\r\n    return _averagePurchaseRate[address(from)];\r\n  }\r\n\r\n  // if the soft cap isn't met and the presale period ends (7 days) enable\r\n  // users to buy back their ether.\r\n  function buyBackETH(address payable from) public {\r\n    require(now.sub(startDate) > 7 days && !softCapMet);\r\n    require(_contributions[from] > 0);\r\n    uint256 exchangeRate = _averagePurchaseRate[from].div(10).div(_numberOfContributions[from]);\r\n    uint256 contribution = _contributions[from];\r\n    // remove funds from users contributions.\r\n    _contributions[from] = 0;\r\n    // transfer funds back to user.\r\n    from.transfer(contribution.div(exchangeRate));\r\n  }\r\n\r\n  // Function to withdraw raised ETH (staggered withdrawals)\r\n  // Only the contract owner can call this function\r\n  function withdrawETH() public {\r\n    require(msg.sender == owner && address(this).balance > 0);\r\n    require(softCapMet == true && presaleClosed == true);\r\n    uint256 withdrawAmount;\r\n    // first ether withdrawal (max 150 ETH)\r\n    if (ethWithdrawals == 0) {\r\n      if (collectedETH <= 150 ether) {\r\n        withdrawAmount = collectedETH;\r\n      } else {\r\n        withdrawAmount = 150 ether;\r\n      }\r\n    } else {\r\n      // remaining ether withdrawal (max 150 ETH per withdrawal)\r\n      // staggered in 7 day periods.\r\n      uint256 currDate = now;\r\n      // ensure that it has been at least 7 days.\r\n      require(currDate.sub(lastWithdrawal) >= 7 days);\r\n      if (collectedETH <= 150 ether) {\r\n        withdrawAmount = collectedETH;\r\n      } else {\r\n        withdrawAmount = 150 ether;\r\n      }\r\n    }\r\n    lastWithdrawal = now;\r\n    ethWithdrawals = ethWithdrawals.add(1);\r\n    collectedETH = collectedETH.sub(withdrawAmount);\r\n    owner.transfer(withdrawAmount);\r\n  }\r\n\r\n  function endPresale() public {\r\n    require(msg.sender == owner);\r\n    presaleClosed = true;\r\n  }\r\n\r\n  // Function to burn remaining yRise (sale must be over to call)\r\n  // Only the contract owner can call this function\r\n  function burnyRise() public {\r\n    require(msg.sender == owner && yRiseToken.balanceOf(address(this)) > 0 && now.sub(startDate) > 7 days);\r\n    // burn the left over.\r\n    yRiseToken.transfer(address(0), yRiseToken.balanceOf(address(this)));\r\n  }\r\n  \r\n  //Starts the sale\r\n  //Only the contract owner can call this function\r\n  function startSale() public {\r\n    require(msg.sender == owner && startDate==0);\r\n    startDate=now;\r\n  }\r\n  \r\n  //Function to query the supply of yRise in the contract\r\n  function availableyRise() public view returns(uint256) {\r\n    return yRiseToken.balanceOf(address(this));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"availableyRise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"averagePurchaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnyRise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"buyBackETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"numberOfContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yRiseToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"yRiseTokenSale","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006051c1354ccc51b4d561e43b02735deae64768b8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61a5ac2673a860b1775fff43d77368909bad76cf19347961801b257254bf0f91"}]}