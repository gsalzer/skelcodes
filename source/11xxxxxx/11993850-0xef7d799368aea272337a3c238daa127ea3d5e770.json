{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/managers/FeeBurnManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {Ownable} from \\\"../roles/Ownable.sol\\\";\\n\\nimport {IOracle} from \\\"../Oracle.sol\\\";\\nimport {IDiscountManager} from \\\"./DiscountManager.sol\\\";\\nimport {VersionManager} from \\\"../registries/VersionManager.sol\\\";\\n\\n\\ninterface IFeeBurnManager\\n{\\n  function burner() external view returns (address);\\n\\n  function getDefaultingFee(uint256 collateral) external view returns (uint256);\\n\\n  function getFeeOnInterest(address lender, address lendingToken, uint256 principal, uint256 interest) external view returns (uint256);\\n\\n  function getFeeOnPrincipal(address borrower, address lendingToken, uint256 principal, address collateralToken) external view returns (uint256);\\n}\\n\\n\\ncontract FeeBurnManager is IFeeBurnManager, Ownable, VersionManager\\n{\\n  using SafeMath for uint256;\\n\\n\\n  uint256 private constant _BASIS_POINT = 10000;\\n\\n  address private _burner;\\n  uint256 private _defaultingFeePct = 700;\\n  uint256 private _lenderInterestFeePct = 750;\\n  uint256 private _borrowerPrincipalFeePct = 100;\\n\\n\\n  constructor()\\n  {\\n    _burner = msg.sender;\\n  }\\n\\n  function _calcPercentOf(uint256 amount, uint256 percent) private pure returns (uint256)\\n  {\\n    return amount.mul(percent).div(_BASIS_POINT);\\n  }\\n\\n  function burner() external view override returns (address burnerAddress)\\n  {\\n    return _burner;\\n  }\\n\\n  function getFeePcts () public view returns (uint256, uint256, uint256)\\n  {\\n    return (_lenderInterestFeePct, _borrowerPrincipalFeePct, _defaultingFeePct);\\n  }\\n\\n  function getFeeOnInterest(address lender, address lendingToken, uint256 principal, uint256 interest) external view override returns (uint256)\\n  {\\n    uint256 interestAmount = _calcPercentOf(principal, interest);\\n    uint256 oneUSDOfToken = IOracle(VersionManager._oracle()).convertFromUSD(lendingToken, 1e18);\\n\\n    uint256 discountedFeePct = _calcPercentOf(_lenderInterestFeePct, 7500); // 7500 = 75%\\n\\n    uint256 fee = _calcPercentOf(interestAmount, IDiscountManager(VersionManager._discountMgr()).isDiscounted(lender) ? discountedFeePct : _lenderInterestFeePct);\\n\\n    return fee < oneUSDOfToken ? oneUSDOfToken : fee;\\n  }\\n\\n  function getFeeOnPrincipal(address borrower, address lendingToken, uint256 principal, address collateralToken) external view override returns (uint256)\\n  {\\n    return _calcPercentOf(IOracle(VersionManager._oracle()).convert(lendingToken, collateralToken, principal), IDiscountManager(VersionManager._discountMgr()).isDiscounted(borrower) ? _borrowerPrincipalFeePct.sub(25) : _borrowerPrincipalFeePct);\\n  }\\n\\n  function getDefaultingFee(uint256 collateral) external view override returns (uint256)\\n  {\\n    return _calcPercentOf(collateral, _defaultingFeePct);\\n  }\\n\\n  function setBurner(address newBurner) external onlyOwner\\n  {\\n    require(newBurner != address(0), \\\"0 addy\\\");\\n\\n    _burner = newBurner;\\n  }\\n\\n  function setDefaultingFeePct(uint256 newPct) external onlyOwner\\n  {\\n    require(newPct > 0 && newPct <= 750, \\\"Invalid val\\\"); // 750 = 7.5%\\n\\n    _defaultingFeePct = newPct;\\n  }\\n\\n  function setPeerFeePcts(uint256 newLenderFeePct, uint256 newBorrowerFeePct) external onlyOwner\\n  {\\n    require(newLenderFeePct > 0 && newBorrowerFeePct > 0, \\\"0% fee\\\");\\n    require(newLenderFeePct <= 1000 && newBorrowerFeePct <= 150, \\\"Too high\\\"); // 1000 = 10%\\n\\n    _lenderInterestFeePct = newLenderFeePct;\\n    _borrowerPrincipalFeePct = newBorrowerFeePct;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\ncontract Ownable\\n{\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  modifier onlyOwner()\\n  {\\n    require(isOwner(), \\\"!owner\\\");\\n    _;\\n  }\\n\\n  constructor()\\n  {\\n    _owner = msg.sender;\\n\\n    emit OwnershipTransferred(address(0), msg.sender);\\n  }\\n\\n  function owner() public view returns (address)\\n  {\\n    return _owner;\\n  }\\n\\n  function isOwner() public view returns (bool)\\n  {\\n    return msg.sender == _owner;\\n  }\\n\\n  function renounceOwnership() public onlyOwner\\n  {\\n    emit OwnershipTransferred(_owner, address(0));\\n\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership(address newOwner) public onlyOwner\\n  {\\n    require(newOwner != address(0), \\\"0 addy\\\");\\n\\n    emit OwnershipTransferred(_owner, newOwner);\\n\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport {Ownable} from \\\"./roles/Ownable.sol\\\";\\n\\n\\ninterface IFeed\\n{\\n  function latestAnswer() external view returns (int256);\\n}\\n\\ninterface IOracle\\n{\\n  function getRate(address from, address to) external view returns (uint256);\\n\\n  function convertFromUSD(address to, uint256 amount) external view returns (uint256);\\n\\n  function convertToUSD(address from, uint256 amount) external view returns (uint256);\\n\\n  function convert(address from, address to, uint256 amount) external view returns (uint256);\\n}\\n\\ncontract Oracle is IOracle, Ownable\\n{\\n  using SafeMath for uint256;\\n\\n\\n  address private constant _DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n  address private constant _WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n  uint256 private constant _DECIMALS = 1e18;\\n\\n  mapping(address => address) private _ETHFeeds;\\n  mapping(address => address) private _USDFeeds;\\n\\n\\n  constructor()\\n  {\\n    // address INCH = 0x111111111117dC0aa78b770fA6A738034120C302;\\n    // address AMPL = 0xD46bA6D942050d489DBd938a2C909A5d5039A161;\\n    // address BNT = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C;\\n    // address AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    // address ANT = 0xa117000000f279D81A1D3cc75430fAA017FA5A2e;\\n    // address BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\n    // address BAND = 0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55;\\n    // address BAT = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF;\\n    // address COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    // address CREAM = 0x2ba592F78dB6436527729929AAf6c908497cB200;\\n    // address CRO = 0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b;\\n    // address CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    // address ENJ = 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c;\\n    // address GRT = 0xc944E90C64B2c07662A292be6244BDf05Cda44a7;\\n    // address KNC = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200;\\n    // address KEEPER = 0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44;\\n    // address LINK = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\\n    // address LRC = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\\n    // address MANA = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\\n    // address MKR = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\\n    // address REN = 0x408e41876cCCDC0F92210600ef50372656052a38;\\n    // address SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    // address SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    // address SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n    // address TUSD = 0x0000000000085d4780B73119b644AE5ecd22b376;\\n    // address UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\\n    // address USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    // address USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    // address WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    // address YFI = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\\n    // address ZRX = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\\n\\n    _ETHFeeds[_DAI] = address(0x773616E4d11A78F511299002da57A0a94577F1f4);\\n    _ETHFeeds[0x111111111117dC0aa78b770fA6A738034120C302] = address(0x72AFAECF99C9d9C8215fF44C77B94B99C28741e8);\\n    _ETHFeeds[0xD46bA6D942050d489DBd938a2C909A5d5039A161] = address(0x492575FDD11a0fCf2C6C719867890a7648d526eB);\\n    _ETHFeeds[0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C] = address(0xCf61d1841B178fe82C8895fe60c2EDDa08314416);\\n    _ETHFeeds[0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9] = address(0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012);\\n    _ETHFeeds[0xa117000000f279D81A1D3cc75430fAA017FA5A2e] = address(0x8f83670260F8f7708143b836a2a6F11eF0aBac01);\\n    _ETHFeeds[0xba100000625a3754423978a60c9317c58a424e3D] = address(0xC1438AA3823A6Ba0C159CfA8D98dF5A994bA120b);\\n    _ETHFeeds[0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55] = address(0x0BDb051e10c9718d1C29efbad442E88D38958274);\\n    _ETHFeeds[0x0D8775F648430679A709E98d2b0Cb6250d2887EF] = address(0x0d16d4528239e9ee52fa531af613AcdB23D88c94);\\n    _ETHFeeds[0xc00e94Cb662C3520282E6f5717214004A7f26888] = address(0x1B39Ee86Ec5979ba5C322b826B3ECb8C79991699);\\n    _ETHFeeds[0x2ba592F78dB6436527729929AAf6c908497cB200] = address(0x82597CFE6af8baad7c0d441AA82cbC3b51759607);\\n    _ETHFeeds[0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b] = address(0xcA696a9Eb93b81ADFE6435759A29aB4cf2991A96);\\n    _ETHFeeds[0xD533a949740bb3306d119CC777fa900bA034cd52] = address(0x8a12Be339B0cD1829b91Adc01977caa5E9ac121e);\\n    _ETHFeeds[0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c] = address(0x24D9aB51950F3d62E9144fdC2f3135DAA6Ce8D1B);\\n    _ETHFeeds[0xc944E90C64B2c07662A292be6244BDf05Cda44a7] = address(0x17D054eCac33D91F7340645341eFB5DE9009F1C1);\\n    _ETHFeeds[0xdd974D5C2e2928deA5F71b9825b8b646686BD200] = address(0x656c0544eF4C98A6a98491833A89204Abb045d6b);\\n    _ETHFeeds[0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44] = address(0xe7015CCb7E5F788B8c1010FC22343473EaaC3741);\\n    _ETHFeeds[0x514910771AF9Ca656af840dff83E8264EcF986CA] = address(0xDC530D9457755926550b59e8ECcdaE7624181557);\\n    _ETHFeeds[0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD] = address(0x160AC928A16C93eD4895C2De6f81ECcE9a7eB7b4);\\n    _ETHFeeds[0x0F5D2fB29fb7d3CFeE444a200298f468908cC942] = address(0x82A44D92D6c329826dc557c5E1Be6ebeC5D5FeB9);\\n    _ETHFeeds[0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2] = address(0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2);\\n    _ETHFeeds[0x408e41876cCCDC0F92210600ef50372656052a38] = address(0x3147D7203354Dc06D9fd350c7a2437bcA92387a4);\\n    _ETHFeeds[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F] = address(0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c);\\n    _ETHFeeds[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] = address(0x8e0b7e6062272B5eF4524250bFFF8e5Bd3497757);\\n    _ETHFeeds[0x6B3595068778DD592e39A122f4f5a5cF09C90fE2] = address(0xe572CeF69f43c2E488b33924AF04BDacE19079cf);\\n    _ETHFeeds[0x0000000000085d4780B73119b644AE5ecd22b376] = address(0x3886BA987236181D98F2401c507Fb8BeA7871dF2);\\n    _ETHFeeds[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984] = address(0xD6aA3D25116d8dA79Ea0246c4826EB951872e02e);\\n    _ETHFeeds[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = address(0x986b5E1e1755e3C2440e960477f25201B0a8bbD4);\\n    _ETHFeeds[0xdAC17F958D2ee523a2206206994597C13D831ec7] = address(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46);\\n    _ETHFeeds[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = address(0xdeb288F737066589598e9214E782fa5A8eD689e8);\\n    _ETHFeeds[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e] = address(0x7c5d4F8345e66f68099581Db340cd65B078C41f4);\\n    _ETHFeeds[0xE41d2489571d322189246DaFA5ebDe1F4699F498] = address(0x2Da4983a622a8498bb1a21FaE9D8F6C664939962);\\n\\n    _USDFeeds[_WETH] = address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n  }\\n\\n  function getFeeds(address token) external view returns (address, address)\\n  {\\n    return (_ETHFeeds[token], _USDFeeds[token]);\\n  }\\n\\n  function setFeeds(address[] calldata tokens, address[] calldata feeds, bool is_USDFeeds) external onlyOwner\\n  {\\n    require(tokens.length == feeds.length, \\\"!=\\\");\\n\\n    if (is_USDFeeds)\\n    {\\n      for (uint256 i = 0; i < tokens.length; i++)\\n      {\\n        address token = tokens[i];\\n\\n        _USDFeeds[token] = feeds[i];\\n      }\\n    }\\n    else\\n    {\\n      for (uint256 i = 0; i < tokens.length; i++)\\n      {\\n        address token = tokens[i];\\n\\n        _ETHFeeds[token] = feeds[i];\\n      }\\n    }\\n  }\\n\\n\\n  function uintify(int256 val) private pure returns (uint256)\\n  {\\n    require(val > 0, \\\"Feed err\\\");\\n\\n    return uint256(val);\\n  }\\n\\n  function getTokenETHRate(address token) private view returns (uint256)\\n  {\\n    if (_ETHFeeds[token] != address(0))\\n    {\\n      return uintify(IFeed(_ETHFeeds[token]).latestAnswer());\\n    }\\n    else if (_USDFeeds[token] != address(0))\\n    {\\n      return uintify(IFeed(_USDFeeds[token]).latestAnswer()).mul(_DECIMALS).div(uintify(IFeed(_USDFeeds[_WETH]).latestAnswer()));\\n    }\\n    else\\n    {\\n      return 0;\\n    }\\n  }\\n\\n  function getRate(address from, address to) public view override returns (uint256)\\n  {\\n    if (from == to && to == _DAI)\\n    {\\n      return _DECIMALS;\\n    }\\n\\n    uint256 srcRate = from == _WETH ? _DECIMALS : getTokenETHRate(from);\\n    uint256 destRate = to == _WETH ? _DECIMALS : getTokenETHRate(to);\\n\\n    require(srcRate > 0 && destRate > 0 && srcRate < type(uint256).max && destRate < type(uint256).max, \\\"No oracle\\\");\\n\\n    return srcRate.mul(_DECIMALS).div(destRate);\\n  }\\n\\n  function calcDestQty(uint256 srcQty, address from, address to, uint256 rate) private view returns (uint256)\\n  {\\n    uint256 srcDecimals = ERC20(from).decimals();\\n    uint256 destDecimals = ERC20(to).decimals();\\n\\n    uint256 difference;\\n\\n    if (destDecimals >= srcDecimals)\\n    {\\n      difference = 10 ** destDecimals.sub(srcDecimals);\\n\\n      return srcQty.mul(rate).mul(difference).div(_DECIMALS);\\n    }\\n    else\\n    {\\n      difference = 10 ** srcDecimals.sub(destDecimals);\\n\\n      return srcQty.mul(rate).div(_DECIMALS.mul(difference));\\n    }\\n  }\\n\\n  function convertFromUSD(address to, uint256 amount) external view override returns (uint256)\\n  {\\n    return calcDestQty(amount, _DAI, to, getRate(_DAI, to));\\n  }\\n\\n  function convertToUSD(address from, uint256 amount) external view override returns (uint256)\\n  {\\n    return calcDestQty(amount, from, _DAI, getRate(from, _DAI));\\n  }\\n\\n  function convert(address from, address to, uint256 amount) external view override returns (uint256)\\n  {\\n    return calcDestQty(amount, from, to, getRate(from, to));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/managers/DiscountManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {DiscounterRole} from \\\"../roles/DiscounterRole.sol\\\";\\nimport {IYLD} from \\\"../interfaces/IYLD.sol\\\";\\n\\n\\ninterface IDiscountManager\\n{\\n  event Enroll(address indexed account, uint256 amount);\\n  event Exit(address indexed account);\\n\\n\\n  function isDiscounted(address account) external view returns (bool);\\n\\n  function updateUnlockTime(address lender, address borrower, uint256 duration) external;\\n}\\n\\n\\ncontract DiscountManager is IDiscountManager, DiscounterRole, ReentrancyGuard\\n{\\n  using SafeMath for uint256;\\n\\n\\n  address private immutable _YLD;\\n\\n  uint256 private _requiredAmount = 50 * 1e18; // 50 YLD\\n  bool private _discountsActivated = true;\\n\\n  mapping(address => uint256) private _balanceOf;\\n  mapping(address => uint256) private _unlockTimeOf;\\n\\n\\n  constructor()\\n  {\\n    _YLD = address(0xDcB01cc464238396E213a6fDd933E36796eAfF9f);\\n  }\\n\\n  function requiredAmount () public view returns (uint256)\\n  {\\n    return _requiredAmount;\\n  }\\n\\n  function discountsActivated () public view returns (bool)\\n  {\\n    return _discountsActivated;\\n  }\\n\\n  function balanceOf (address account) public view returns (uint256)\\n  {\\n    return _balanceOf[account];\\n  }\\n\\n  function unlockTimeOf (address account) public view returns (uint256)\\n  {\\n    return _unlockTimeOf[account];\\n  }\\n\\n  function isDiscounted(address account) public view override returns (bool)\\n  {\\n    return _discountsActivated ? _balanceOf[account] >= _requiredAmount : false;\\n  }\\n\\n\\n  function enroll() external nonReentrant\\n  {\\n    require(_discountsActivated, \\\"Discounts off\\\");\\n    require(!isDiscounted(msg.sender), \\\"In\\\");\\n\\n    require(IERC20(_YLD).transferFrom(msg.sender, address(this), _requiredAmount));\\n\\n    _balanceOf[msg.sender] = _requiredAmount;\\n    _unlockTimeOf[msg.sender] = block.timestamp.add(4 weeks);\\n\\n    emit Enroll(msg.sender, _requiredAmount);\\n  }\\n\\n  function exit() external nonReentrant\\n  {\\n    require(_balanceOf[msg.sender] >= _requiredAmount, \\\"!in\\\");\\n    require(block.timestamp > _unlockTimeOf[msg.sender], \\\"Discounting\\\");\\n\\n    require(IERC20(_YLD).transfer(msg.sender, _balanceOf[msg.sender]));\\n\\n    _balanceOf[msg.sender] = 0;\\n    _unlockTimeOf[msg.sender] = 0;\\n\\n    emit Exit(msg.sender);\\n  }\\n\\n\\n  function updateUnlockTime(address lender, address borrower, uint256 duration) external override onlyDiscounter\\n  {\\n    uint256 lenderUnlockTime = _unlockTimeOf[lender];\\n    uint256 borrowerUnlockTime = _unlockTimeOf[borrower];\\n\\n    if (isDiscounted(lender))\\n    {\\n      _unlockTimeOf[lender] = (block.timestamp >= lenderUnlockTime || lenderUnlockTime.sub(block.timestamp) < duration) ? lenderUnlockTime.add(duration.add(4 weeks)) : lenderUnlockTime;\\n    }\\n    else if (isDiscounted(borrower))\\n    {\\n      _unlockTimeOf[borrower] = (block.timestamp >= borrowerUnlockTime || borrowerUnlockTime.sub(block.timestamp) < duration) ? borrowerUnlockTime.add(duration.add(4 weeks)) : borrowerUnlockTime;\\n    }\\n  }\\n\\n  function activateDiscounts() external onlyDiscounter\\n  {\\n    require(!_discountsActivated, \\\"Activated\\\");\\n\\n    _discountsActivated = true;\\n  }\\n\\n  function deactivateDiscounts() external onlyDiscounter\\n  {\\n    require(_discountsActivated, \\\"Deactivated\\\");\\n\\n    _discountsActivated = false;\\n  }\\n\\n  function setRequiredAmount(uint256 newAmount) external onlyDiscounter\\n  {\\n    require(newAmount > (0.75 * 1e18) && newAmount < type(uint256).max, \\\"Invalid val\\\");\\n\\n    _requiredAmount = newAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/registries/VersionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {IVersionBeacon} from \\\"./VersionBeacon.sol\\\";\\n\\n\\ncontract VersionManager\\n{\\n  address private constant _versionBeacon = address(0xfc90c4ae4343f958215b82ff4575b714294Cdd75);\\n\\n\\n  function getVersionBeacon() public pure returns (address versionBeacon)\\n  {\\n    return _versionBeacon;\\n  }\\n\\n\\n  function _oracle() internal view returns (address oracle)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"Oracle\\\"));\\n  }\\n\\n  function _tokenMgr() internal view returns (address tokenMgr)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"TokenManager\\\"));\\n  }\\n\\n  function _discountMgr() internal view returns (address discountMgr)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"DiscountManager\\\"));\\n  }\\n\\n  function _feeBurnMgr() internal view returns (address feeBurnMgr)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"FeeBurnManager\\\"));\\n  }\\n\\n  function _rewardMgr() internal view returns (address rewardMgr)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"RewardManager\\\"));\\n  }\\n\\n  function _collateralMgr() internal view returns (address collateralMgr)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"CollateralManager\\\"));\\n  }\\n\\n  function _loanFactory() internal view returns (address loanFactory)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"LoanFactory\\\"));\\n  }\\n\\n  function _offerImplementation() internal view returns (address offerImplementation)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"Offer\\\"));\\n  }\\n\\n  function _requestImplementation() internal view returns (address requestImplementation)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"Request\\\"));\\n  }\\n\\n  function _loanImplementation() internal view returns (address loanImplementation)\\n  {\\n    return IVersionBeacon(_versionBeacon).getLatestImplementation(keccak256(\\\"Loan\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/DiscounterRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {Roles} from \\\"./Roles.sol\\\";\\n\\n\\ncontract DiscounterRole\\n{\\n  using Roles for Roles.Role;\\n\\n  Roles.Role private _discounters;\\n\\n  event DiscounterAdded(address indexed account);\\n  event DiscounterRemoved(address indexed account);\\n\\n  modifier onlyDiscounter()\\n  {\\n    require(isDiscounter(msg.sender), \\\"!discounter\\\");\\n    _;\\n  }\\n\\n  constructor()\\n  {\\n    _discounters.add(msg.sender);\\n\\n    emit DiscounterAdded(msg.sender);\\n  }\\n\\n  function isDiscounter(address account) public view returns (bool)\\n  {\\n    return _discounters.has(account);\\n  }\\n\\n  function addDiscounter(address account) public onlyDiscounter\\n  {\\n    _discounters.add(account);\\n\\n    emit DiscounterAdded(account);\\n  }\\n\\n  function renounceDiscounter() public\\n  {\\n    _discounters.remove(msg.sender);\\n\\n    emit DiscounterRemoved(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYLD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\ninterface IYLD\\n{\\n  function renounceMinter() external;\\n\\n  function mint(address account, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/roles/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles\\n{\\n  struct Role\\n  {\\n    mapping(address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev Give an account access to this role.\\n   */\\n  function add(Role storage role, address account) internal\\n  {\\n    require(!has(role, account), \\\"has role\\\");\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev Remove an account's access to this role.\\n   */\\n  function remove(Role storage role, address account) internal\\n  {\\n    require(has(role, account), \\\"!has role\\\");\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev Check if an account has this role.\\n   * @return bool\\n   */\\n  function has(Role storage role, address account) internal view returns (bool)\\n  {\\n    require(account != address(0), \\\"Roles: 0 addy\\\");\\n\\n    return role.bearer[account];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/registries/VersionBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n\\ninterface IVersionBeacon\\n{\\n  event Registered(bytes32 entity, uint256 version, address implementation);\\n\\n\\n  function exists(bytes32 entity) external view returns (bool status);\\n\\n  function getLatestVersion(bytes32 entity) external view returns (uint256 version);\\n\\n  function getLatestImplementation(bytes32 entity) external view returns (address implementation);\\n\\n  function getImplementationAt(bytes32 entity, uint256 version) external view returns (address implementation);\\n\\n\\n  function register(bytes32 entity, address implementation) external returns (uint256 version);\\n}\\n\\ncontract VersionBeacon is IVersionBeacon, Ownable\\n{\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n\\n  EnumerableSet.Bytes32Set private _entitySet;\\n  mapping(bytes32 => address[]) private _versions;\\n\\n\\n  function getKey (string calldata name) external pure returns (bytes32)\\n  {\\n    return keccak256(bytes(name));\\n  }\\n\\n\\n  function exists(bytes32 entity) public view override returns (bool status)\\n  {\\n    return _entitySet.contains(entity);\\n  }\\n\\n  function getImplementationAt(bytes32 entity, uint256 version) public view override returns (address implementation)\\n  {\\n    require(exists(entity) && version < _versions[entity].length, \\\"no ver reg'd\\\");\\n\\n    // return implementation\\n    return _versions[entity][version];\\n  }\\n\\n  function getLatestVersion(bytes32 entity) public view override returns (uint256 version)\\n  {\\n    require(exists(entity), \\\"no ver reg'd\\\");\\n\\n    // get latest version\\n    return _versions[entity].length - 1;\\n  }\\n\\n  function getLatestImplementation(bytes32 entity) public view override returns (address implementation)\\n  {\\n    uint256 latestVersion = getLatestVersion(entity);\\n\\n    // return implementation\\n    return getImplementationAt(entity, latestVersion);\\n  }\\n\\n\\n  function register(bytes32 entity, address implementation) external override onlyOwner returns (uint256 version)\\n  {\\n    // get version number\\n    version = _versions[entity].length;\\n\\n    // register entity\\n    _entitySet.add(entity);\\n\\n    _versions[entity].push(implementation);\\n\\n    emit Registered(entity, version, implementation);\\n\\n    return version;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"burnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getDefaultingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"getFeeOnInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"getFeeOnPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePcts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"versionBeacon\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPct\",\"type\":\"uint256\"}],\"name\":\"setDefaultingFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLenderFeePct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowerFeePct\",\"type\":\"uint256\"}],\"name\":\"setPeerFeePcts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeBurnManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}