{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: solidity/contracts/converter/ConverterVersion.sol\n\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.6.12;\n\ncontract ConverterVersion {\n    uint16 public constant version = 44;\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/token/interfaces/IERC20Token.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20Token _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function withdrawETH(address payable _to) external;\n\n    function addReserve(IERC20Token _token, uint32 _ratio) external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20Token _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20Token _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20Token);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20Token indexed _fromToken,\n        IERC20Token indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20Token indexed _token1, IERC20Token indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterUpgrader.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Converter Upgrader interface\n*/\ninterface IConverterUpgrader {\n    function upgrade(bytes32 _version) external;\n\n    function upgrade(uint16 _version) external;\n}\n\n// File: solidity/contracts/token/interfaces/IDSToken.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    DSToken interface\n*/\ninterface IDSToken is IConverterAnchor, IERC20Token {\n    function issue(address _to, uint256 _amount) external;\n\n    function destroy(address _from, uint256 _amount) external;\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        _notThis(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _notThis(address _address) internal view {\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Contract Registry interface\n*/\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\n// File: solidity/contracts/utility/ContractRegistryClient.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This is the base contract for ContractRegistry clients.\n */\ncontract ContractRegistryClient is Owned, Utils {\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\n    bytes32 internal constant BANCOR_X = \"BancorX\";\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n\n    IContractRegistry public registry; // address of the current contract-registry\n    IContractRegistry public prevRegistry; // address of the previous contract-registry\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\n\n    /**\n     * @dev verifies that the caller is mapped to the given contract name\n     *\n     * @param _contractName    contract name\n     */\n    modifier only(bytes32 _contractName) {\n        _only(_contractName);\n        _;\n    }\n\n    // error message binary size optimization\n    function _only(bytes32 _contractName) internal view {\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev initializes a new ContractRegistryClient instance\n     *\n     * @param  _registry   address of a contract-registry contract\n     */\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n    }\n\n    /**\n     * @dev updates to the new contract-registry\n     */\n    function updateRegistry() public {\n        // verify that this function is permitted\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\n\n        // get the new contract-registry\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\n\n        // verify that the new contract-registry is different and not zero\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // save a backup of the current contract-registry before replacing it\n        prevRegistry = registry;\n\n        // replace the current contract-registry with the new contract-registry\n        registry = newRegistry;\n    }\n\n    /**\n     * @dev restores the previous contract-registry\n     */\n    function restoreRegistry() public ownerOnly {\n        // restore the previous contract-registry\n        registry = prevRegistry;\n    }\n\n    /**\n     * @dev restricts the permission to update the contract-registry\n     *\n     * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\n     */\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\n        // change the permission to update the contract-registry\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\n    }\n\n    /**\n     * @dev returns the address associated with the given contract name\n     *\n     * @param _contractName    contract name\n     *\n     * @return contract address\n     */\n    function addressOf(bytes32 _contractName) internal view returns (address) {\n        return registry.addressOf(_contractName);\n    }\n}\n\n// File: solidity/contracts/utility/ReentrancyGuard.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This contract provides protection against calling a function\n * (directly or indirectly) from within itself.\n */\ncontract ReentrancyGuard {\n    uint256 private constant UNLOCKED = 1;\n    uint256 private constant LOCKED = 2;\n\n    // LOCKED while protected code is being executed, UNLOCKED otherwise\n    uint256 private state = UNLOCKED;\n\n    /**\n     * @dev ensures instantiation only by sub-contracts\n     */\n    constructor() internal {}\n\n    // protects a function against reentrancy attacks\n    modifier protected() {\n        _protected();\n        state = LOCKED;\n        _;\n        state = UNLOCKED;\n    }\n\n    // error message binary size optimization\n    function _protected() internal view {\n        require(state == UNLOCKED, \"ERR_REENTRANCY\");\n    }\n}\n\n// File: solidity/contracts/utility/SafeMath.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This library supports basic math operations with overflow/underflow protection.\n */\nlibrary SafeMath {\n    /**\n     * @dev returns the sum of _x and _y, reverts if the calculation overflows\n     *\n     * @param _x   value 1\n     * @param _y   value 2\n     *\n     * @return sum\n     */\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        require(z >= _x, \"ERR_OVERFLOW\");\n        return z;\n    }\n\n    /**\n     * @dev returns the difference of _x minus _y, reverts if the calculation underflows\n     *\n     * @param _x   minuend\n     * @param _y   subtrahend\n     *\n     * @return difference\n     */\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_x >= _y, \"ERR_UNDERFLOW\");\n        return _x - _y;\n    }\n\n    /**\n     * @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\n     *\n     * @param _x   factor 1\n     * @param _y   factor 2\n     *\n     * @return product\n     */\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        // gas optimization\n        if (_x == 0) return 0;\n\n        uint256 z = _x * _y;\n        require(z / _x == _y, \"ERR_OVERFLOW\");\n        return z;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     *\n     * @param _x   dividend\n     * @param _y   divisor\n     *\n     * @return quotient\n     */\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_y > 0, \"ERR_DIVIDE_BY_ZERO\");\n        uint256 c = _x / _y;\n        return c;\n    }\n}\n\n// File: solidity/contracts/utility/TokenHandler.sol\n\n\npragma solidity 0.6.12;\n\n\ncontract TokenHandler {\n    bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256(\"approve(address,uint256)\"));\n    bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\n    bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n\n    /**\n     * @dev executes the ERC20 token's `approve` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _spender approved address\n     * @param _value   allowance amount\n     */\n    function safeApprove(\n        IERC20Token _token,\n        address _spender,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_APPROVE_FAILED\");\n    }\n\n    /**\n     * @dev executes the ERC20 token's `transfer` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _to      target address\n     * @param _value   transfer amount\n     */\n    function safeTransfer(\n        IERC20Token _token,\n        address _to,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_TRANSFER_FAILED\");\n    }\n\n    /**\n     * @dev executes the ERC20 token's `transferFrom` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _from    source address\n     * @param _to      target address\n     * @param _value   transfer amount\n     */\n    function safeTransferFrom(\n        IERC20Token _token,\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_TRANSFER_FROM_FAILED\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/ITokenHolder.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/*\n    Token Holder interface\n*/\ninterface ITokenHolder is IOwned {\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n\n// File: solidity/contracts/utility/TokenHolder.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n/**\n * @dev This contract provides a safety mechanism for allowing the owner to\n * send tokens that were sent to the contract by mistake back to the sender.\n *\n * We consider every contract to be a 'token holder' since it's currently not possible\n * for a contract to deny receiving tokens.\n *\n * Note that we use the non standard ERC-20 interface which has no return value for transfer\n * in order to support both non standard as well as standard token contracts.\n * see https://github.com/ethereum/solidity/issues/4116\n */\ncontract TokenHolder is ITokenHolder, TokenHandler, Owned, Utils {\n    /**\n     * @dev withdraws tokens held by the contract and sends them to an account\n     * can only be called by the owner\n     *\n     * @param _token   ERC20 token contract address\n     * @param _to      account to receive the new amount\n     * @param _amount  amount to withdraw\n     */\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) public virtual override ownerOnly validAddress(address(_token)) validAddress(_to) notThis(_to) {\n        safeTransfer(_token, _to, _amount);\n    }\n}\n\n// File: solidity/contracts/utility/Math.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This library provides a set of complex math operations.\n */\nlibrary Math {\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the largest integer smaller than or equal to the square root of the positive integer\n     */\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = _num / 2 + 1;\n        uint256 y = (x + _num / x) / 2;\n        while (x > y) {\n            x = y;\n            y = (x + _num / x) / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @dev returns the smallest integer larger than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the smallest integer larger than or equal to the square root of the positive integer\n     */\n    function ceilSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = floorSqrt(_num);\n        return x * x == _num ? x : x + 1;\n    }\n\n    /**\n     * @dev computes a reduced-scalar ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _max maximum desired scalar\n     *\n     * @return ratio's numerator and denominator\n     */\n    function reducedRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _max\n    ) internal pure returns (uint256, uint256) {\n        (uint256 n, uint256 d) = (_n, _d);\n        if (n > _max || d > _max) {\n            (n, d) = normalizedRatio(n, d, _max);\n        }\n        if (n != d) {\n            return (n, d);\n        }\n        return (1, 1);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\n     */\n    function normalizedRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        if (_a <= _b) {\n            return accurateRatio(_a, _b, _scale);\n        }\n        (uint256 y, uint256 x) = accurateRatio(_b, _a, _scale);\n        return (x, y);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a <= b\".\n     */\n    function accurateRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        uint256 maxVal = uint256(-1) / _scale;\n        if (_a > maxVal) {\n            uint256 c = _a / (maxVal + 1) + 1;\n            _a /= c; // we can now safely compute `_a * _scale`\n            _b /= c;\n        }\n        if (_a != _b) {\n            uint256 n = _a * _scale;\n            uint256 d = _a + _b; // can overflow\n            if (d >= _a) { // no overflow in `_a + _b`\n                uint256 x = roundDiv(n, d); // we can now safely compute `_scale - x`\n                uint256 y = _scale - x;\n                return (x, y);\n            }\n            if (n < _b - (_b - _a) / 2) {\n                return (0, _scale); // `_a * _scale < (_a + _b) / 2 < MAX_UINT256 < _a + _b`\n            }\n            return (1, _scale - 1); // `(_a + _b) / 2 < _a * _scale < MAX_UINT256 < _a + _b`\n        }\n        return (_scale / 2, _scale / 2); // allow reduction to `(1, 1)` in the calling function\n    }\n\n    /**\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\n     */\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return _n / _d + (_n % _d) / (_d - _d / 2);\n    }\n\n    /**\n     * @dev returns the average number of decimal digits in a given list of positive integers\n     *\n     * @param _values  list of positive integers\n     *\n     * @return the average number of decimal digits in the given list of positive integers\n     */\n    function geometricMean(uint256[] memory _values) internal pure returns (uint256) {\n        uint256 numOfDigits = 0;\n        uint256 length = _values.length;\n        for (uint256 i = 0; i < length; i++) {\n            numOfDigits += decimalLength(_values[i]);\n        }\n        return uint256(10)**(roundDivUnsafe(numOfDigits, length) - 1);\n    }\n\n    /**\n     * @dev returns the number of decimal digits in a given positive integer\n     *\n     * @param _x   positive integer\n     *\n     * @return the number of decimal digits in the given positive integer\n     */\n    function decimalLength(uint256 _x) internal pure returns (uint256) {\n        uint256 y = 0;\n        for (uint256 x = _x; x > 0; x /= 10) {\n            y++;\n        }\n        return y;\n    }\n\n    /**\n     * @dev returns the nearest integer to a given quotient\n     * the computation is overflow-safe assuming that the input is sufficiently small\n     *\n     * @param _n   quotient numerator\n     * @param _d   quotient denominator\n     *\n     * @return the nearest integer to the given quotient\n     */\n    function roundDivUnsafe(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return (_n + _d / 2) / _d;\n    }\n\n    /**\n     * @dev returns the larger of two values\n     *\n     * @param _val1 the first value\n     * @param _val2 the second value\n     */\n    function max(uint256 _val1, uint256 _val2) internal pure returns (uint256) {\n        return _val1 > _val2 ? _val1 : _val2;\n    }\n}\n\n// File: solidity/contracts/utility/Time.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Time implementing contract\n*/\ncontract Time {\n    /**\n     * @dev returns the current time\n     */\n    function time() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n\n// File: solidity/contracts/converter/types/standard-pool/StandardPoolConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @dev This contract is a specialized version of the converter, which is\n * optimized for a liquidity pool that has 2 reserves with 50%/50% weights.\n */\ncontract StandardPoolConverter is\n    ConverterVersion,\n    IConverter,\n    TokenHandler,\n    TokenHolder,\n    ContractRegistryClient,\n    ReentrancyGuard,\n    Time\n{\n    using SafeMath for uint256;\n    using Math for *;\n\n    IERC20Token private constant ETH_RESERVE_ADDRESS = IERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\n    uint256 private constant MAX_UINT112 = 2**112 - 1;\n    uint256 private constant MAX_UINT32 = 2**32 - 1;\n    uint256 private constant AVERAGE_RATE_PERIOD = 10 minutes;\n    uint32 private constant PPM_RESOLUTION = 1000000;\n\n    uint256 private __reserveBalances;\n    IERC20Token[] private __reserveTokens;\n    mapping(IERC20Token => uint256) private __reserveIds;\n\n    IConverterAnchor public override anchor; // converter anchor contract\n    uint32 public override maxConversionFee; // maximum conversion fee, represented in ppm, 0...1000000\n    uint32 public override conversionFee; // current conversion fee, represented in ppm, 0...maxConversionFee\n\n    // average rate details:\n    // bits 0...111 represent the numerator of the rate between reserve token 0 and reserve token 1\n    // bits 111...223 represent the denominator of the rate between reserve token 0 and reserve token 1\n    // bits 224...255 represent the update-time of the rate between reserve token 0 and reserve token 1\n    // where `numerator / denominator` gives the worth of one reserve token 0 in units of reserve token 1\n    uint256 public averageRateInfo;\n\n    /**\n     * @dev triggered after liquidity is added\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityAdded(\n        address indexed _provider,\n        IERC20Token indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev triggered after liquidity is removed\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityRemoved(\n        address indexed _provider,\n        IERC20Token indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev initializes a new StandardPoolConverter instance\n     *\n     * @param  _anchor             anchor governed by the converter\n     * @param  _registry           address of a contract registry contract\n     * @param  _maxConversionFee   maximum conversion fee, represented in ppm\n     */\n    constructor(\n        IConverterAnchor _anchor,\n        IContractRegistry _registry,\n        uint32 _maxConversionFee\n    ) public ContractRegistryClient(_registry) validAddress(address(_anchor)) validConversionFee(_maxConversionFee) {\n        anchor = _anchor;\n        maxConversionFee = _maxConversionFee;\n    }\n\n    // ensures that the converter is active\n    modifier active() {\n        _active();\n        _;\n    }\n\n    // error message binary size optimization\n    function _active() internal view {\n        require(isActive(), \"ERR_INACTIVE\");\n    }\n\n    // ensures that the converter is not active\n    modifier inactive() {\n        _inactive();\n        _;\n    }\n\n    // error message binary size optimization\n    function _inactive() internal view {\n        require(!isActive(), \"ERR_ACTIVE\");\n    }\n\n    // validates a reserve token address - verifies that the address belongs to one of the reserve tokens\n    modifier validReserve(IERC20Token _address) {\n        _validReserve(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserve(IERC20Token _address) internal view {\n        require(__reserveIds[_address] != 0, \"ERR_INVALID_RESERVE\");\n    }\n\n    // validates conversion fee\n    modifier validConversionFee(uint32 _conversionFee) {\n        _validConversionFee(_conversionFee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validConversionFee(uint32 _conversionFee) internal pure {\n        require(_conversionFee <= PPM_RESOLUTION, \"ERR_INVALID_CONVERSION_FEE\");\n    }\n\n    // validates reserve weight\n    modifier validReserveWeight(uint32 _weight) {\n        _validReserveWeight(_weight);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserveWeight(uint32 _weight) internal pure {\n        require(_weight == PPM_RESOLUTION / 2, \"ERR_INVALID_RESERVE_WEIGHT\");\n    }\n\n    /**\n     * @dev returns the converter type\n     *\n     * @return see the converter types in the the main contract doc\n     */\n    function converterType() public pure override returns (uint16) {\n        return 3;\n    }\n\n    /**\n     * @dev deposits ether\n     * can only be called if the converter has an ETH reserve\n     */\n    receive() external payable override validReserve(ETH_RESERVE_ADDRESS) {}\n\n    /**\n     * @dev withdraws ether\n     * can only be called by the owner if the converter is inactive or by upgrader contract\n     * can only be called after the upgrader contract has accepted the ownership of this contract\n     * can only be called if the converter has an ETH reserve\n     *\n     * @param _to  address to send the ETH to\n     */\n    function withdrawETH(address payable _to) public override protected ownerOnly validReserve(ETH_RESERVE_ADDRESS) {\n        address converterUpgrader = addressOf(CONVERTER_UPGRADER);\n\n        // verify that the converter is inactive or that the owner is the upgrader contract\n        require(!isActive() || owner == converterUpgrader, \"ERR_ACCESS_DENIED\");\n        _to.transfer(address(this).balance);\n\n        // sync the ETH reserve balance\n        syncReserveBalance(ETH_RESERVE_ADDRESS);\n    }\n\n    /**\n     * @dev checks whether or not the converter version is 28 or higher\n     *\n     * @return true, since the converter version is 28 or higher\n     */\n    function isV28OrHigher() public pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev returns true if the converter is active, false otherwise\n     *\n     * @return true if the converter is active, false otherwise\n     */\n    function isActive() public view virtual override returns (bool) {\n        return anchor.owner() == address(this);\n    }\n\n    /**\n     * @dev transfers the anchor ownership\n     * the new owner needs to accept the transfer\n     * can only be called by the converter upgrder while the upgrader is the owner\n     * note that prior to version 28, you should use 'transferAnchorOwnership' instead\n     *\n     * @param _newOwner    new token owner\n     */\n    function transferAnchorOwnership(address _newOwner) public override ownerOnly only(CONVERTER_UPGRADER) {\n        anchor.transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev accepts ownership of the anchor after an ownership transfer\n     * most converters are also activated as soon as they accept the anchor ownership\n     * can only be called by the contract owner\n     * note that prior to version 28, you should use 'acceptTokenOwnership' instead\n     */\n    function acceptAnchorOwnership() public virtual override ownerOnly {\n        // verify the the converter has exactly two reserves\n        require(reserveTokenCount() == 2, \"ERR_INVALID_RESERVE_COUNT\");\n        anchor.acceptOwnership();\n        syncReserveBalances();\n        emit Activation(converterType(), anchor, true);\n    }\n\n    /**\n     * @dev updates the current conversion fee\n     * can only be called by the contract owner\n     *\n     * @param _conversionFee new conversion fee, represented in ppm\n     */\n    function setConversionFee(uint32 _conversionFee) public override ownerOnly {\n        require(_conversionFee <= maxConversionFee, \"ERR_INVALID_CONVERSION_FEE\");\n        emit ConversionFeeUpdate(conversionFee, _conversionFee);\n        conversionFee = _conversionFee;\n    }\n\n    /**\n     * @dev withdraws tokens held by the converter and sends them to an account\n     * can only be called by the owner\n     * note that reserve tokens can only be withdrawn by the owner while the converter is inactive\n     * unless the owner is the converter upgrader contract\n     *\n     * @param _token   ERC20 token contract address\n     * @param _to      account to receive the new amount\n     * @param _amount  amount to withdraw\n     */\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) public override(IConverter, TokenHolder) protected ownerOnly {\n        address converterUpgrader = addressOf(CONVERTER_UPGRADER);\n        uint256 reserveId = __reserveIds[_token];\n\n        // if the token is not a reserve token, allow withdrawal\n        // otherwise verify that the converter is inactive or that the owner is the upgrader contract\n        require(reserveId == 0 || !isActive() || owner == converterUpgrader, \"ERR_ACCESS_DENIED\");\n        super.withdrawTokens(_token, _to, _amount);\n\n        // if the token is a reserve token, sync the reserve balance\n        if (reserveId != 0) {\n            syncReserveBalance(_token);\n        }\n    }\n\n    /**\n     * @dev upgrades the converter to the latest version\n     * can only be called by the owner\n     * note that the owner needs to call acceptOwnership on the new converter after the upgrade\n     */\n    function upgrade() public ownerOnly {\n        IConverterUpgrader converterUpgrader = IConverterUpgrader(addressOf(CONVERTER_UPGRADER));\n\n        // trigger de-activation event\n        emit Activation(converterType(), anchor, false);\n\n        transferOwnership(address(converterUpgrader));\n        converterUpgrader.upgrade(version);\n        acceptOwnership();\n    }\n\n    /**\n     * @dev returns the number of reserve tokens\n     * note that prior to version 17, you should use 'connectorTokenCount' instead\n     *\n     * @return number of reserve tokens\n     */\n    function reserveTokenCount() public view returns (uint16) {\n        return uint16(__reserveTokens.length);\n    }\n\n    /**\n     * @dev returns the array of reserve tokens\n     *\n     * @return array of reserve tokens\n     */\n    function reserveTokens() public view returns (IERC20Token[] memory) {\n        return __reserveTokens;\n    }\n\n    /**\n     * @dev defines a new reserve token for the converter\n     * can only be called by the owner while the converter is inactive\n     *\n     * @param _token   address of the reserve token\n     * @param _weight  reserve weight, represented in ppm, 1-1000000\n     */\n    function addReserve(IERC20Token _token, uint32 _weight)\n        public\n        virtual\n        override\n        ownerOnly\n        inactive\n        validAddress(address(_token))\n        notThis(address(_token))\n        validReserveWeight(_weight)\n    {\n        // validate input\n        require(address(_token) != address(anchor) && __reserveIds[_token] == 0, \"ERR_INVALID_RESERVE\");\n        require(reserveTokenCount() < 2, \"ERR_INVALID_RESERVE_COUNT\");\n\n        __reserveTokens.push(_token);\n        __reserveIds[_token] = __reserveTokens.length;\n    }\n\n    /**\n     * @dev returns the reserve's weight\n     * added in version 28\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return reserve weight\n     */\n    function reserveWeight(IERC20Token _reserveToken) public view validReserve(_reserveToken) returns (uint32) {\n        return PPM_RESOLUTION / 2;\n    }\n\n    /**\n     * @dev returns the balance of a given reserve token\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return the balance of the given reserve token\n     */\n    function reserveBalance(IERC20Token _reserveToken) public view override returns (uint256) {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        require(reserveId != 0, \"ERR_INVALID_RESERVE\");\n        return reserveBalance(reserveId);\n    }\n\n    /**\n     * @dev returns the balances of both reserve tokens\n     *\n     * @return the balances of both reserve tokens\n     */\n    function reserveBalances() public view returns (uint256, uint256) {\n        return reserveBalances(1, 2);\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     * can only be called by the bancor network contract\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function convert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) public payable override protected only(BANCOR_NETWORK) returns (uint256) {\n        // validate input\n        require(_sourceToken != _targetToken, \"ERR_SAME_SOURCE_TARGET\");\n\n        return doConvert(_sourceToken, _targetToken, _amount, _trader, _beneficiary);\n    }\n\n    /**\n     * @dev returns the conversion fee for a given target amount\n     *\n     * @param _targetAmount  target amount\n     *\n     * @return conversion fee\n     */\n    function calculateFee(uint256 _targetAmount) internal view returns (uint256) {\n        return _targetAmount.mul(conversionFee) / PPM_RESOLUTION;\n    }\n\n    /**\n     * @dev loads the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId   reserve id\n     */\n    function reserveBalance(uint256 _reserveId) internal view returns (uint256) {\n        return decodeReserveBalance(__reserveBalances, _reserveId);\n    }\n\n    /**\n     * @dev loads the stored reserve balances\n     *\n     * @param _sourceId    source reserve id\n     * @param _targetId    target reserve id\n     */\n    function reserveBalances(uint256 _sourceId, uint256 _targetId) internal view returns (uint256, uint256) {\n        require((_sourceId == 1 && _targetId == 2) || (_sourceId == 2 && _targetId == 1), \"ERR_INVALID_RESERVES\");\n        return decodeReserveBalances(__reserveBalances, _sourceId, _targetId);\n    }\n\n    /**\n     * @dev stores the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId       reserve id\n     * @param _reserveBalance  reserve balance\n     */\n    function setReserveBalance(uint256 _reserveId, uint256 _reserveBalance) internal {\n        require(_reserveBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        uint256 otherBalance = decodeReserveBalance(__reserveBalances, 3 - _reserveId);\n        __reserveBalances = encodeReserveBalances(_reserveBalance, _reserveId, otherBalance, 3 - _reserveId);\n    }\n\n    /**\n     * @dev stores the stored reserve balances\n     *\n     * @param _sourceId        source reserve id\n     * @param _targetId        target reserve id\n     * @param _sourceBalance   source reserve balance\n     * @param _targetBalance   target reserve balance\n     */\n    function setReserveBalances(\n        uint256 _sourceId,\n        uint256 _targetId,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) internal {\n        require(_sourceBalance <= MAX_UINT128 && _targetBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        __reserveBalances = encodeReserveBalances(_sourceBalance, _sourceId, _targetBalance, _targetId);\n    }\n\n    /**\n     * @dev syncs the stored reserve balance for a given reserve with the real reserve balance\n     *\n     * @param _reserveToken    address of the reserve token\n     */\n    function syncReserveBalance(IERC20Token _reserveToken) internal {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        uint256 balance = _reserveToken == ETH_RESERVE_ADDRESS\n            ? address(this).balance\n            : _reserveToken.balanceOf(address(this));\n        setReserveBalance(reserveId, balance);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances\n     */\n    function syncReserveBalances() internal {\n        IERC20Token _reserveToken0 = __reserveTokens[0];\n        IERC20Token _reserveToken1 = __reserveTokens[1];\n        uint256 balance0 = _reserveToken0 == ETH_RESERVE_ADDRESS\n            ? address(this).balance\n            : _reserveToken0.balanceOf(address(this));\n        uint256 balance1 = _reserveToken1 == ETH_RESERVE_ADDRESS\n            ? address(this).balance\n            : _reserveToken1.balanceOf(address(this));\n        setReserveBalances(1, 2, balance0, balance1);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances, excluding a given amount of ether from the ether reserve balance (if relevant)\n     *\n     * @param _value   amount of ether to exclude from the ether reserve balance (if relevant)\n     */\n    function syncReserveBalances(uint256 _value) internal {\n        IERC20Token _reserveToken0 = __reserveTokens[0];\n        IERC20Token _reserveToken1 = __reserveTokens[1];\n        uint256 balance0 = _reserveToken0 == ETH_RESERVE_ADDRESS\n            ? address(this).balance - _value\n            : _reserveToken0.balanceOf(address(this));\n        uint256 balance1 = _reserveToken1 == ETH_RESERVE_ADDRESS\n            ? address(this).balance - _value\n            : _reserveToken1.balanceOf(address(this));\n        setReserveBalances(1, 2, balance0, balance1);\n    }\n\n    /**\n     * @dev helper, dispatches the Conversion event\n     *\n     * @param _sourceToken     source ERC20 token\n     * @param _targetToken     target ERC20 token\n     * @param _trader          address of the caller who executed the conversion\n     * @param _amount          amount purchased/sold (in the source token)\n     * @param _returnAmount    amount returned (in the target token)\n     */\n    function dispatchConversionEvent(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        address _trader,\n        uint256 _amount,\n        uint256 _returnAmount,\n        uint256 _feeAmount\n    ) internal {\n        emit Conversion(_sourceToken, _targetToken, _trader, _amount, _returnAmount, int256(_feeAmount));\n    }\n\n    /**\n     * @dev returns the expected target amount of converting one reserve to another along with the fee\n     *\n     * @param _sourceToken contract address of the source reserve token\n     * @param _targetToken contract address of the target reserve token\n     * @param _amount      amount of tokens received from the user\n     *\n     * @return expected target amount\n     * @return expected fee\n     */\n    function targetAmountAndFee(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) public view override active returns (uint256, uint256) {\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n        uint256 amount = crossReserveTargetAmount(sourceBalance, targetBalance, _amount);\n\n        // return the amount minus the conversion fee and the conversion fee\n        uint256 fee = calculateFee(amount);\n        return (amount - fee, fee);\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function doConvert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) internal returns (uint256) {\n        // update the recent average rate\n        updateRecentAverageRate();\n\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n        uint256 targetAmount = crossReserveTargetAmount(sourceBalance, targetBalance, _amount);\n\n        // get the target amount minus the conversion fee and the conversion fee\n        uint256 fee = calculateFee(targetAmount);\n        uint256 amount = targetAmount - fee;\n\n        // ensure that the trade gives something in return\n        require(amount != 0, \"ERR_ZERO_TARGET_AMOUNT\");\n\n        // ensure that the trade won't deplete the reserve balance\n        assert(amount < targetBalance);\n\n        // ensure that the input amount was already deposited\n        uint256 actualSourceBalance;\n        if (_sourceToken == ETH_RESERVE_ADDRESS) {\n            actualSourceBalance = address(this).balance;\n            require(msg.value == _amount, \"ERR_ETH_AMOUNT_MISMATCH\");\n        } else {\n            actualSourceBalance = _sourceToken.balanceOf(address(this));\n            require(msg.value == 0 && actualSourceBalance.sub(sourceBalance) >= _amount, \"ERR_INVALID_AMOUNT\");\n        }\n\n        // sync the reserve balances\n        setReserveBalances(sourceId, targetId, actualSourceBalance, targetBalance - amount);\n\n        // transfer funds to the beneficiary in the to reserve token\n        if (_targetToken == ETH_RESERVE_ADDRESS) {\n            _beneficiary.transfer(amount);\n        } else {\n            safeTransfer(_targetToken, _beneficiary, amount);\n        }\n\n        // dispatch the conversion event\n        dispatchConversionEvent(_sourceToken, _targetToken, _trader, _amount, amount, fee);\n\n        // dispatch rate updates\n        dispatchTokenRateUpdateEvents(_sourceToken, _targetToken, actualSourceBalance, targetBalance - amount);\n\n        return amount;\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 `_token` in the other reserve token units\n     *\n     * @param _token   token to get the rate for\n     * @return recent average rate between the reserves (numerator)\n     * @return recent average rate between the reserves (denominator)\n     */\n    function recentAverageRate(IERC20Token _token)\n        external\n        view\n        validReserve(_token)\n        returns (uint256, uint256)\n    {\n        // get the recent average rate of reserve 0\n        uint256 rate = calcRecentAverageRate(averageRateInfo);\n\n        uint256 rateN = decodeAverageRateN(rate);\n        uint256 rateD = decodeAverageRateD(rate);\n\n        if (_token == __reserveTokens[0]) {\n            return (rateN, rateD);\n        }\n\n        return (rateD, rateN);\n    }\n\n    /**\n     * @dev updates the recent average rate if needed\n     */\n    function updateRecentAverageRate() internal {\n        uint256 averageRateInfo1 = averageRateInfo;\n        uint256 averageRateInfo2 = calcRecentAverageRate(averageRateInfo1);\n        if (averageRateInfo1 != averageRateInfo2) {\n            averageRateInfo = averageRateInfo2;\n        }\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 reserve token 0 in reserve token 1 units\n     *\n     * @param _averageRateInfo a local copy of the `averageRateInfo` state-variable\n     * @return recent average rate between the reserves\n     */\n    function calcRecentAverageRate(uint256 _averageRateInfo) internal view returns (uint256) {\n        // get the previous average rate and its update-time\n        uint256 prevAverageRateT = decodeAverageRateT(_averageRateInfo);\n        uint256 prevAverageRateN = decodeAverageRateN(_averageRateInfo);\n        uint256 prevAverageRateD = decodeAverageRateD(_averageRateInfo);\n\n        // get the elapsed time since the previous average rate was calculated\n        uint256 currentTime = time();\n        uint256 timeElapsed = currentTime - prevAverageRateT;\n\n        // if the previous average rate was calculated in the current block, the average rate remains unchanged\n        if (timeElapsed == 0) {\n            return _averageRateInfo;\n        }\n\n        // get the current rate between the reserves\n        (uint256 currentRateD, uint256 currentRateN) = reserveBalances();\n\n        // if the previous average rate was calculated a while ago or never, the average rate is equal to the current rate\n        if (timeElapsed >= AVERAGE_RATE_PERIOD || prevAverageRateT == 0) {\n            (currentRateN, currentRateD) = Math.reducedRatio(currentRateN, currentRateD, MAX_UINT112);\n            return encodeAverageRateInfo(currentTime, currentRateN, currentRateD);\n        }\n\n        uint256 x = prevAverageRateD.mul(currentRateN);\n        uint256 y = prevAverageRateN.mul(currentRateD);\n\n        // since we know that timeElapsed < AVERAGE_RATE_PERIOD, we can avoid using SafeMath:\n        uint256 newRateN = y.mul(AVERAGE_RATE_PERIOD - timeElapsed).add(x.mul(timeElapsed));\n        uint256 newRateD = prevAverageRateD.mul(currentRateD).mul(AVERAGE_RATE_PERIOD);\n\n        (newRateN, newRateD) = Math.reducedRatio(newRateN, newRateD, MAX_UINT112);\n        return encodeAverageRateInfo(currentTime, newRateN, newRateD);\n    }\n\n    /**\n     * @dev increases the pool's liquidity and mints new shares in the pool to the caller\n     * this version receives the two reserve amounts as separate args\n     *\n     * @param _reserve1Amount  amount of the first reserve token\n     * @param _reserve2Amount  amount of the second reserve token\n     * @param _minReturn       token minimum return-amount\n     *\n     * @return amount of pool tokens issued\n     */\n    function addLiquidity(uint256 _reserve1Amount, uint256 _reserve2Amount, uint256 _minReturn) public payable returns (uint256) {\n        uint256[] memory reserveAmounts = new uint256[](2);\n        reserveAmounts[0] = _reserve1Amount;\n        reserveAmounts[1] = _reserve2Amount;\n        return addLiquidity(__reserveTokens, reserveAmounts, _minReturn);\n    }\n\n    /**\n     * @dev increases the pool's liquidity and mints new shares in the pool to the caller\n     *\n     * @param _reserveTokens   address of each reserve token\n     * @param _reserveAmounts  amount of each reserve token\n     * @param _minReturn       token minimum return-amount\n     *\n     * @return amount of pool tokens issued\n     */\n    function addLiquidity(\n        IERC20Token[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _minReturn\n    ) public payable protected active returns (uint256) {\n        // verify the user input\n        verifyLiquidityInput(_reserveTokens, _reserveAmounts, _minReturn);\n\n        // if one of the reserves is ETH, then verify that the input amount of ETH is equal to the input value of ETH\n        for (uint256 i = 0; i < 2; i++) {\n            if (_reserveTokens[i] == ETH_RESERVE_ADDRESS) {\n                require(_reserveAmounts[i] == msg.value, \"ERR_ETH_AMOUNT_MISMATCH\");\n            }\n        }\n\n        // if the input value of ETH is larger than zero, then verify that one of the reserves is ETH\n        if (msg.value > 0) {\n            require(__reserveIds[ETH_RESERVE_ADDRESS] != 0, \"ERR_NO_ETH_RESERVE\");\n        }\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply\n        uint256 totalSupply = poolToken.totalSupply();\n\n        // sync the balances to ensure no mismatch\n        syncReserveBalances(msg.value);\n\n        uint256[2] memory oldReserveBalances;\n        uint256[2] memory newReserveBalances;\n        (oldReserveBalances[0], oldReserveBalances[1]) = reserveBalances();\n\n        // calculate the amount of pool tokens to mint\n        uint256 amount;\n        uint256[] memory reserveAmounts = new uint256[](2);\n\n        if (totalSupply == 0) {\n            for (uint256 i = 0; i < 2; i++) {\n                reserveAmounts[i] = _reserveAmounts[i];\n            }\n            amount = Math.geometricMean(reserveAmounts);\n        }\n        else {\n            uint256 index = (_reserveAmounts[0].mul(oldReserveBalances[1]) < _reserveAmounts[1].mul(oldReserveBalances[0])) ? 0 : 1;\n            amount = fundSupplyAmount(totalSupply, oldReserveBalances[index], _reserveAmounts[index]);\n            for (uint256 i = 0; i < 2; i++) {\n                reserveAmounts[i] = fundCost(totalSupply, oldReserveBalances[i], amount);\n            }\n        }\n\n        uint256 newPoolTokenSupply = totalSupply.add(amount);\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20Token reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount > 0, \"ERR_ZERO_TARGET_AMOUNT\");\n            assert(reserveAmount <= _reserveAmounts[i]);\n\n            // transfer each one of the reserve amounts from the user to the pool\n            if (reserveToken != ETH_RESERVE_ADDRESS) {\n                // ETH has already been transferred as part of the transaction\n                safeTransferFrom(reserveToken, msg.sender, address(this), reserveAmount);\n            } else if (_reserveAmounts[i] > reserveAmount) {\n                // transfer the extra amount of ETH back to the user\n                msg.sender.transfer(_reserveAmounts[i] - reserveAmount);\n            }\n\n            // save the new reserve balance\n            newReserveBalances[i] = oldReserveBalances[i].add(reserveAmount);\n\n            emit LiquidityAdded(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        // verify that the equivalent amount of tokens is equal to or larger than the user's expectation\n        require(amount >= _minReturn, \"ERR_RETURN_TOO_LOW\");\n\n        // issue the tokens to the user\n        poolToken.issue(msg.sender, amount);\n\n        // return the amount of pool tokens issued\n        return amount;\n    }\n\n    /**\n     * @dev decreases the pool's liquidity and burns the caller's shares in the pool\n     * this version receives the two minimum return amounts as separate args\n     *\n     * @param _amount               token amount\n     * @param _reserve1MinReturn    minimum return for the first reserve token\n     * @param _reserve2MinReturn    minimum return for the second reserve token\n     *\n     * @return the first reserve amount returned\n     * @return the second reserve amount returned\n     */\n    function removeLiquidity(uint256 _amount, uint256 _reserve1MinReturn, uint256 _reserve2MinReturn) public returns (uint256, uint256) {\n        uint256[] memory minReturnAmounts = new uint256[](2);\n        minReturnAmounts[0] = _reserve1MinReturn;\n        minReturnAmounts[1] = _reserve2MinReturn;\n        uint256[] memory reserveAmounts = removeLiquidity(_amount, __reserveTokens, minReturnAmounts);\n        return (reserveAmounts[0], reserveAmounts[1]);\n    }\n\n    /**\n     * @dev decreases the pool's liquidity and burns the caller's shares in the pool\n     *\n     * @param _amount                  token amount\n     * @param _reserveTokens           address of each reserve token\n     * @param _reserveMinReturnAmounts minimum return-amount of each reserve token\n     *\n     * @return the amount of each reserve token granted for the given amount of pool tokens\n     */\n    function removeLiquidity(\n        uint256 _amount,\n        IERC20Token[] memory _reserveTokens,\n        uint256[] memory _reserveMinReturnAmounts\n    ) public protected active returns (uint256[] memory) {\n        // verify the user input\n        bool inputRearranged = verifyLiquidityInput(_reserveTokens, _reserveMinReturnAmounts, _amount);\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply BEFORE destroying the user tokens\n        uint256 totalSupply = poolToken.totalSupply();\n\n        // destroy the user tokens\n        poolToken.destroy(msg.sender, _amount);\n\n        // sync the balances to ensure no mismatch\n        syncReserveBalances();\n\n        uint256 newPoolTokenSupply = totalSupply.sub(_amount);\n        uint256[] memory reserveAmounts = removeLiquidityReserveAmounts(_amount, _reserveTokens, totalSupply);\n\n        uint256[2] memory oldReserveBalances;\n        uint256[2] memory newReserveBalances;\n        (oldReserveBalances[0], oldReserveBalances[1]) = reserveBalances();\n\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20Token reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount >= _reserveMinReturnAmounts[i], \"ERR_ZERO_TARGET_AMOUNT\");\n\n            // save the new reserve balance\n            newReserveBalances[i] = oldReserveBalances[i].sub(reserveAmount);\n\n            // transfer each one of the reserve amounts from the pool to the user\n            if (reserveToken == ETH_RESERVE_ADDRESS) {\n                msg.sender.transfer(reserveAmount);\n            } else {\n                safeTransfer(reserveToken, msg.sender, reserveAmount);\n            }\n\n            emit LiquidityRemoved(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        if (inputRearranged) {\n            uint256 tempReserveAmount = reserveAmounts[0];\n            reserveAmounts[0] = reserveAmounts[1];\n            reserveAmounts[1] = tempReserveAmount;\n        }\n\n        // return the amount of each reserve token granted for the given amount of pool tokens\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev given the amount of one of the reserve tokens to add liquidity of,\n     * returns the required amount of each one of the other reserve tokens\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveTokens       address of each reserve token\n     * @param _reserveTokenIndex   index of the relevant reserve token\n     * @param _reserveAmount       amount of the relevant reserve token\n     *\n     * @return the required amount of each one of the reserve tokens\n     */\n    function addLiquidityCost(\n        IERC20Token[] memory _reserveTokens,\n        uint256 _reserveTokenIndex,\n        uint256 _reserveAmount\n    ) public view returns (uint256[] memory) {\n        uint256[] memory _reserveAmounts = new uint256[](2);\n        uint256[] memory _reserveBalances = new uint256[](2);\n\n        uint256 reserve0Id = __reserveIds[_reserveTokens[0]];\n        uint256 reserve1Id = __reserveIds[_reserveTokens[1]];\n        (_reserveBalances[0], _reserveBalances[1]) = reserveBalances(reserve0Id, reserve1Id);\n\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256 amount = fundSupplyAmount(totalSupply, _reserveBalances[_reserveTokenIndex], _reserveAmount);\n\n        for (uint256 i = 0; i < 2; i++) _reserveAmounts[i] = fundCost(totalSupply, _reserveBalances[i], amount);\n\n        return _reserveAmounts;\n    }\n\n    /**\n     * @dev given the amount of one of the reserve tokens to add liquidity of,\n     * returns the amount of pool tokens entitled for it\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveToken    address of the reserve token\n     * @param _reserveAmount   amount of the reserve token\n     *\n     * @return the amount of pool tokens entitled\n     */\n    function addLiquidityReturn(IERC20Token _reserveToken, uint256 _reserveAmount) public view returns (uint256) {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        return fundSupplyAmount(totalSupply, reserveBalance(__reserveIds[_reserveToken]), _reserveAmount);\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _reserveTokens   address of each reserve token\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReturn(uint256 _amount, IERC20Token[] memory _reserveTokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        return removeLiquidityReserveAmounts(_amount, _reserveTokens, totalSupply);\n    }\n\n    /**\n     * @dev verifies that a given array of tokens is identical to the converter's array of reserve tokens\n     * we take this input in order to allow specifying the corresponding reserve amounts in any order\n     * this function rearranges the input arrays according to the converter's array of reserve tokens\n     *\n     * @param _reserveTokens   array of reserve tokens\n     * @param _reserveAmounts  array of reserve amounts\n     * @param _amount          token amount\n     *\n     * @return true if the function has rearranged the input arrays; false otherwise\n     */\n    function verifyLiquidityInput(\n        IERC20Token[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _amount\n    ) private view returns (bool) {\n        require(_reserveAmounts[0] > 0 && _reserveAmounts[1] > 0 && _amount > 0, \"ERR_ZERO_AMOUNT\");\n\n        uint256 reserve0Id = __reserveIds[_reserveTokens[0]];\n        uint256 reserve1Id = __reserveIds[_reserveTokens[1]];\n\n        if (reserve0Id == 2 && reserve1Id == 1) {\n            IERC20Token tempReserveToken = _reserveTokens[0];\n            _reserveTokens[0] = _reserveTokens[1];\n            _reserveTokens[1] = tempReserveToken;\n            uint256 tempReserveAmount = _reserveAmounts[0];\n            _reserveAmounts[0] = _reserveAmounts[1];\n            _reserveAmounts[1] = tempReserveAmount;\n            return true;\n        }\n\n        require(reserve0Id == 1 && reserve1Id == 2, \"ERR_INVALID_RESERVE\");\n        return false;\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _reserveTokens   address of each reserve token\n     * @param _totalSupply     token total supply\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReserveAmounts(\n        uint256 _amount,\n        IERC20Token[] memory _reserveTokens,\n        uint256 _totalSupply\n    ) private view returns (uint256[] memory) {\n        uint256[] memory _reserveAmounts = new uint256[](2);\n        uint256[] memory _reserveBalances = new uint256[](2);\n\n        uint256 reserve0Id = __reserveIds[_reserveTokens[0]];\n        uint256 reserve1Id = __reserveIds[_reserveTokens[1]];\n        (_reserveBalances[0], _reserveBalances[1]) = reserveBalances(reserve0Id, reserve1Id);\n\n        for (uint256 i = 0; i < 2; i++)\n            _reserveAmounts[i] = liquidateReserveAmount(_totalSupply, _reserveBalances[i], _amount);\n        return _reserveAmounts;\n    }\n\n    /**\n     * @dev dispatches token rate update events for the reserve tokens and the pool token\n     *\n     * @param _sourceToken     address of the source reserve token\n     * @param _targetToken     address of the target reserve token\n     * @param _sourceBalance   balance of the source reserve token\n     * @param _targetBalance   balance of the target reserve token\n     */\n    function dispatchTokenRateUpdateEvents(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) private {\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply of pool tokens\n        uint256 poolTokenSupply = poolToken.totalSupply();\n\n        // dispatch token rate update event for the reserve tokens\n        emit TokenRateUpdate(_sourceToken, _targetToken, _targetBalance, _sourceBalance);\n\n        // dispatch token rate update events for the pool token\n        emit TokenRateUpdate(poolToken, _sourceToken, _sourceBalance, poolTokenSupply);\n        emit TokenRateUpdate(poolToken, _targetToken, _targetBalance, poolTokenSupply);\n    }\n\n    function encodeReserveBalance(uint256 _balance, uint256 _id) private pure returns (uint256) {\n        assert(_balance <= MAX_UINT128 && (_id == 1 || _id == 2));\n        return _balance << ((_id - 1) * 128);\n    }\n\n    function decodeReserveBalance(uint256 _balances, uint256 _id) private pure returns (uint256) {\n        assert(_id == 1 || _id == 2);\n        return (_balances >> ((_id - 1) * 128)) & MAX_UINT128;\n    }\n\n    function encodeReserveBalances(\n        uint256 _balance0,\n        uint256 _id0,\n        uint256 _balance1,\n        uint256 _id1\n    ) private pure returns (uint256) {\n        return encodeReserveBalance(_balance0, _id0) | encodeReserveBalance(_balance1, _id1);\n    }\n\n    function decodeReserveBalances(\n        uint256 _balances,\n        uint256 _id0,\n        uint256 _id1\n    ) private pure returns (uint256, uint256) {\n        return (decodeReserveBalance(_balances, _id0), decodeReserveBalance(_balances, _id1));\n    }\n\n    function encodeAverageRateInfo(\n        uint256 _averageRateT,\n        uint256 _averageRateN,\n        uint256 _averageRateD\n    ) private pure returns (uint256) {\n        assert(_averageRateT <= MAX_UINT32 && _averageRateN <= MAX_UINT112 && _averageRateD <= MAX_UINT112);\n        return (_averageRateT << 224) | (_averageRateN << 112) | _averageRateD;\n    }\n\n    function decodeAverageRateT(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo >> 224;\n    }\n\n    function decodeAverageRateN(uint256 _averageRateInfo) private pure returns (uint256) {\n        return (_averageRateInfo >> 112) & MAX_UINT112;\n    }\n\n    function decodeAverageRateD(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo & MAX_UINT112;\n    }\n\n    function crossReserveTargetAmount(\n        uint256 _sourceReserveBalance,\n        uint256 _targetReserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_sourceReserveBalance > 0 && _targetReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        return _targetReserveBalance.mul(_amount) / _sourceReserveBalance.add(_amount);\n    }\n\n    function fundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\n    }\n\n    function fundSupplyAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return _amount.mul(_supply) / _reserveBalance;\n    }\n\n    function liquidateReserveAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(_amount <= _supply, \"ERR_INVALID_AMOUNT\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        // special case for liquidating the entire supply\n        if (_amount == _supply) {\n            return _reserveBalance;\n        }\n\n        return _amount.mul(_reserveBalance) / _supply;\n    }\n\n    /**\n     * @dev deprecated since version 28, backward compatibility - use only for earlier versions\n     */\n    function token() public view override returns (IConverterAnchor) {\n        return anchor;\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function transferTokenOwnership(address _newOwner) public override ownerOnly {\n        transferAnchorOwnership(_newOwner);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function acceptTokenOwnership() public override ownerOnly {\n        acceptAnchorOwnership();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectors(IERC20Token _address)\n        public\n        view\n        override\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        )\n    {\n        uint256 reserveId = __reserveIds[_address];\n        if (reserveId != 0) {\n            return (reserveBalance(reserveId), PPM_RESOLUTION / 2, false, false, true);\n        }\n        return (0, 0, false, false, false);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokens(uint256 _index) public view override returns (IERC20Token) {\n        return __reserveTokens[_index];\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokenCount() public view override returns (uint16) {\n        return reserveTokenCount();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getConnectorBalance(IERC20Token _connectorToken) public view override returns (uint256) {\n        return reserveBalance(_connectorToken);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getReturn(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) public view returns (uint256, uint256) {\n        return targetAmountAndFee(_sourceToken, _targetToken, _amount);\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxConversionFee\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"Activation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_return\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_conversionFee\",\"type\":\"int256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_prevFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"ConversionFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateD\",\"type\":\"uint256\"}],\"name\":\"TokenRateUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve2Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_reserveTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"addReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_connectorToken\",\"type\":\"address\"}],\"name\":\"getConnectorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV28OrHigher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recentAverageRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve1MinReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve2MinReturn\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Token[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveMinReturnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Token[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_conversionFee\",\"type\":\"uint32\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"targetAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StandardPoolConverter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dbd62d3c1405d28c57f51c823d9d14f3f4a54e2000000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd400000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}