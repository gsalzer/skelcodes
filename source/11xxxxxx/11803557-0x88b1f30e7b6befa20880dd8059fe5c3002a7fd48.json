{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/modules/utils/MultiCallUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../commons/interfaces/IModuleCalls.sol\\\";\\n\\n\\ncontract MultiCallUtils {\\n  function multiCall(\\n    IModuleCalls.Transaction[] memory _txs\\n  ) public payable returns (\\n    bool[] memory _successes,\\n    bytes[] memory _results\\n  ) {\\n    _successes = new bool[](_txs.length);\\n    _results = new bytes[](_txs.length);\\n\\n    for (uint256 i = 0; i < _txs.length; i++) {\\n      IModuleCalls.Transaction memory transaction = _txs[i];\\n\\n      require(!transaction.delegateCall, 'MultiCallUtils#multiCall: delegateCall not allowed');\\n      require(gasleft() >= transaction.gasLimit, \\\"MultiCallUtils#multiCall: NOT_ENOUGH_GAS\\\");\\n\\n      // solhint-disable\\n      (_successes[i], _results[i]) = transaction.target.call{\\n        value: transaction.value,\\n        gas: transaction.gasLimit == 0 ? gasleft() : transaction.gasLimit\\n      }(transaction.data);\\n      // solhint-enable\\n\\n      require(_successes[i] || !_txs[i].revertOnError, 'MultiCallUtils#multiCall: CALL_REVERTED');\\n    }\\n  }\\n\\n  // ///\\n  // Globals\\n  // ///\\n\\n  function callBlockhash(uint256 _i) external view returns (bytes32) {\\n    return blockhash(_i);\\n  }\\n\\n  function callCoinbase() external view returns (address) {\\n    return block.coinbase;\\n  }\\n\\n  function callDifficulty() external view returns (uint256) {\\n    return block.difficulty;\\n  }\\n\\n  function callGasLimit() external view returns (uint256) {\\n    return block.gaslimit;\\n  }\\n\\n  function callBlockNumber() external view returns (uint256) {\\n    return block.gaslimit;\\n  }\\n\\n  function callTimestamp() external view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function callGasLeft() external view returns (uint256) {\\n    return gasleft();\\n  }\\n\\n  function callGasPrice() external view returns (uint256) {\\n    return tx.gasprice;\\n  }\\n\\n  function callOrigin() external view returns (address) {\\n    return tx.origin;\\n  }\\n\\n  function callBalanceOf(address _addr) external view returns (uint256) {\\n    return _addr.balance;\\n  }\\n\\n  function callCodeSize(address _addr) external view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  function callCode(address _addr) external view returns (bytes memory code) {\\n    assembly {\\n      let size := extcodesize(_addr)\\n      code := mload(0x40)\\n      mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n      mstore(code, size)\\n      extcodecopy(_addr, add(code, 0x20), 0, size)\\n    }\\n  }\\n\\n  function callCodeHash(address _addr) external view returns (bytes32 codeHash) {\\n    assembly { codeHash := extcodehash(_addr) }\\n  }\\n\\n  function callChainId() external pure returns (uint256 id) {\\n    assembly { id := chainid() }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/commons/interfaces/IModuleCalls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IModuleCalls {\\n  // Events\\n  event NonceChange(uint256 _space, uint256 _newNonce);\\n  event TxFailed(bytes32 _tx, bytes _reason);\\n  event TxExecuted(bytes32 _tx) anonymous;\\n\\n  // Transaction structure\\n  struct Transaction {\\n    bool delegateCall;   // Performs delegatecall\\n    bool revertOnError;  // Reverts transaction bundle if tx fails\\n    uint256 gasLimit;    // Maximum gas to be forwarded\\n    address target;      // Address of the contract to call\\n    uint256 value;       // Amount of ETH to pass with the call\\n    bytes data;          // calldata to pass\\n  }\\n\\n  /**\\n   * @notice Returns the next nonce of the default nonce space\\n   * @dev The default nonce space is 0x00\\n   * @return The next nonce\\n   */\\n  function nonce() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next nonce of the given nonce space\\n   * @param _space Nonce space, each space keeps an independent nonce count\\n   * @return The next nonce\\n   */\\n  function readNonce(uint256 _space) external view returns (uint256);\\n\\n  /**\\n   * @notice Allow wallet owner to execute an action\\n   * @param _txs        Transactions to process\\n   * @param _nonce      Signature nonce (may contain an encoded space)\\n   * @param _signature  Encoded signature\\n   */\\n  function execute(\\n    Transaction[] calldata _txs,\\n    uint256 _nonce,\\n    bytes calldata _signature\\n  ) external;\\n\\n  /**\\n   * @notice Allow wallet to execute an action\\n   *   without signing the message\\n   * @param _txs  Transactions to execute\\n   */\\n  function selfExecute(\\n    Transaction[] calldata _txs\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"callBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"callBlockhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"callCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"code\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"callCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"callCodeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callGasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IModuleCalls.Transaction[]\",\"name\":\"_txs\",\"type\":\"tuple[]\"}],\"name\":\"multiCall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MultiCallUtils","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}