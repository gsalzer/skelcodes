{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"./interfaces/IBuybackInitializer.sol\\\";\\nimport \\\"./interfaces/IPresale.sol\\\";\\nimport \\\"./interfaces/ITokenDistributor.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IFarmActivator.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\ncontract Presale is Ownable, IPresale, ITokenDistributor {\\n    event PresaleStarted();\\n    event FcfsActivated();\\n    event PresaleEnded();\\n    event ContributionAccepted(\\n        address indexed _contributor,\\n        uint256 _partialContribution,\\n        uint256 _totalContribution,\\n        uint256 _receivedTokens,\\n        uint256 _contributions\\n    );\\n    event ContributionRefunded(address indexed _contributor, uint256 _contribution);\\n\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BUYBACK_ALLOCATION_PERCENT = 40;\\n    uint256 public constant LIQUIDITY_ALLOCATION_PERCENT = 20;\\n    uint256 public constant PRESALE_MAX_SUPPLY = 60000 * 10**18; // if hardcap reached, otherwise leftover burned\\n    uint256 public constant LIQUIDITY_MAX_SUPPLY = 5400 * 10**18; // if hardcap reached, otherwise leftover burned\\n    uint256 public constant RC_FARM_SUPPLY = 100000 * 10**18;\\n    uint256 public constant RC_ETH_FARM_SUPPLY = 160000 * 10**18;\\n\\n    uint256 private hardcap;\\n    uint256 private collected;\\n    uint256 private maxContribution;\\n    uint256 private contributorTokensPerCollectedEth;\\n    uint256 private liquidityTokensPerCollectedEth;\\n    address private token;\\n    address private uniswapPair;\\n    address private buyback;\\n    address private liquidityLock;\\n    address private uniswapRouter;\\n    address private rcFarm;\\n    address private rcEthFarm;\\n    bool private isPresaleActiveFlag;\\n    bool private isFcfsActiveFlag;\\n    bool private wasPresaleEndedFlag;\\n    mapping(address => bool) private contributors;\\n    mapping(address => uint256) private contributions;\\n\\n    modifier presaleActive() {\\n        require(isPresaleActiveFlag, \\\"Presale is not active.\\\");\\n        _;\\n    }\\n\\n    modifier presaleNotActive() {\\n        require(!isPresaleActiveFlag, \\\"Presale is active.\\\");\\n        _;\\n    }\\n\\n    modifier presaleNotEnded() {\\n        require(!wasPresaleEndedFlag, \\\"Presale was ended.\\\");\\n        _;\\n    }\\n\\n    modifier sufficientSupply(address _token) {\\n        uint256 supply = IERC20(_token).balanceOf(address(this));\\n        require(supply >= getMaxSupply(), \\\"Insufficient supply.\\\");\\n        _;\\n    }\\n\\n    modifier senderEligibleToContribute() {\\n        require(isFcfsActiveFlag || contributors[msg.sender], \\\"Not eligible to participate.\\\");\\n        _;\\n    }\\n\\n    function getMaxSupply() public view override returns (uint256) {\\n        return PRESALE_MAX_SUPPLY.add(LIQUIDITY_MAX_SUPPLY).add(RC_FARM_SUPPLY).add(RC_ETH_FARM_SUPPLY);\\n    }\\n\\n    function tokenAddress() external view override returns (address) {\\n        return token;\\n    }\\n\\n    function uniswapPairAddress() external view override returns (address) {\\n        return uniswapPair;\\n    }\\n\\n    function buybackAddress() external view override returns (address) {\\n        return buyback;\\n    }\\n\\n    function liquidityLockAddress() external view override returns (address) {\\n        return liquidityLock;\\n    }\\n\\n    function uniswapRouterAddress() external view override returns (address) {\\n        return uniswapRouter;\\n    }\\n\\n    function rcFarmAddress() external view override returns (address) {\\n        return rcFarm;\\n    }\\n\\n    function rcEthFarmAddress() external view override returns (address) {\\n        return rcEthFarm;\\n    }\\n\\n    function collectedAmount() external view override returns (uint256) {\\n        return collected;\\n    }\\n\\n    function hardcapAmount() external view override returns (uint256) {\\n        return hardcap;\\n    }\\n\\n    function maxContributionAmount() external view override returns (uint256) {\\n        return maxContribution;\\n    }\\n\\n    function isPresaleActive() external view override returns (bool) {\\n        return isPresaleActiveFlag;\\n    }\\n\\n    function isFcfsActive() external view override returns (bool) {\\n        return isFcfsActiveFlag;\\n    }\\n\\n    function wasPresaleEnded() external view override returns (bool) {\\n        return wasPresaleEndedFlag;\\n    }\\n\\n    function isWhitelisted(address _contributor) external view override returns (bool) {\\n        return contributors[_contributor];\\n    }\\n\\n    function contribution(address _contributor) external view override returns (uint256) {\\n        return contributions[_contributor];\\n    }\\n\\n    function addContributors(address[] memory _contributors) public override onlyOwner {\\n        for (uint256 i; i < _contributors.length; i++) {\\n            bool isAlreadyAdded = contributors[_contributors[i]];\\n            if (isAlreadyAdded) {\\n                continue;\\n            }\\n            contributors[_contributors[i]] = true;\\n        }\\n    }\\n\\n    function start(\\n        uint256 _hardcap,\\n        uint256 _maxContribution,\\n        address _token,\\n        address _uniswapPair,\\n        address _buyback,\\n        address _liquidityLock,\\n        address _uniswapRouter,\\n        address _rcFarm,\\n        address _rcEthFarm,\\n        address[] calldata _contributors\\n    ) external override onlyOwner presaleNotActive presaleNotEnded sufficientSupply(_token) {\\n        isPresaleActiveFlag = true;\\n        hardcap = _hardcap;\\n        maxContribution = _maxContribution;\\n        contributorTokensPerCollectedEth = PRESALE_MAX_SUPPLY.mul(10**18).div(hardcap);\\n        liquidityTokensPerCollectedEth = LIQUIDITY_MAX_SUPPLY.mul(10**18).div(hardcap);\\n        token = _token;\\n        uniswapPair = _uniswapPair;\\n        buyback = _buyback;\\n        liquidityLock = _liquidityLock;\\n        uniswapRouter = _uniswapRouter;\\n        rcFarm = _rcFarm;\\n        rcEthFarm = _rcEthFarm;\\n        addContributors(_contributors);\\n        emit PresaleStarted();\\n    }\\n\\n    function activateFcfs() external override onlyOwner presaleActive {\\n        if (isFcfsActiveFlag) {\\n            return;\\n        }\\n        isFcfsActiveFlag = true;\\n        emit FcfsActivated();\\n    }\\n\\n    function end(address payable _team) external override onlyOwner presaleActive {\\n        IERC20 rollerCoaster = IERC20(token);\\n        uint256 totalCollected = address(this).balance;\\n\\n        // calculate buyback and execute it\\n        uint256 buybackEths = totalCollected.mul(BUYBACK_ALLOCATION_PERCENT).div(100);\\n        uint256 minTokensToHoldForBuybackCall = maxContribution.mul(contributorTokensPerCollectedEth).div(10**18);\\n        IBuybackInitializer(buyback).init{ value: buybackEths }(token, uniswapRouter, minTokensToHoldForBuybackCall);\\n\\n        // calculate liquidity share\\n        uint256 liquidityEths = totalCollected.mul(LIQUIDITY_ALLOCATION_PERCENT).div(100);\\n        uint256 liquidityTokens = liquidityTokensPerCollectedEth.mul(totalCollected).div(10**18);\\n\\n        // approve router and add liquidity\\n        rollerCoaster.approve(uniswapRouter, liquidityTokens);\\n        IUniswapV2Router02(uniswapRouter).addLiquidityETH{ value: liquidityEths }(\\n            token,\\n            liquidityTokens,\\n            liquidityTokens,\\n            liquidityEths,\\n            liquidityLock,\\n            block.timestamp\\n        );\\n\\n        // transfer team share\\n        uint256 teamEths = totalCollected.sub(liquidityEths).sub(buybackEths);\\n        _team.transfer(teamEths);\\n\\n        // transfer farm shares\\n        rollerCoaster.transfer(rcFarm, RC_FARM_SUPPLY);\\n        rollerCoaster.transfer(rcEthFarm, RC_ETH_FARM_SUPPLY);\\n\\n        // start farming\\n        IFarmActivator(rcFarm).startFarming(token, token);\\n        IFarmActivator(rcEthFarm).startFarming(token, uniswapPair);\\n\\n        // burn the remaining balance and unlock token\\n        IToken(token).burnDistributorTokensAndUnlock();\\n\\n        // end presale\\n        isPresaleActiveFlag = false;\\n        wasPresaleEndedFlag = true;\\n        emit PresaleEnded();\\n    }\\n\\n    receive() external payable presaleActive senderEligibleToContribute {\\n        uint256 totalContributionLeft = PRESALE_MAX_SUPPLY.sub(collected);\\n        uint256 senderContributionLeft = maxContribution.sub(contributions[msg.sender]);\\n        uint256 contributionLeft = Math.min(totalContributionLeft, senderContributionLeft);\\n\\n        uint256 valueToAccept = Math.min(msg.value, contributionLeft);\\n        if (valueToAccept > 0) {\\n            collected = collected.add(valueToAccept);\\n            contributions[msg.sender] = contributions[msg.sender].add(valueToAccept);\\n\\n            uint256 tokensToTransfer = contributorTokensPerCollectedEth.mul(valueToAccept).div(10**18);\\n            IERC20(token).transfer(msg.sender, tokensToTransfer);\\n\\n            emit ContributionAccepted(\\n                msg.sender,\\n                valueToAccept,\\n                contributions[msg.sender],\\n                tokensToTransfer,\\n                collected\\n            );\\n        }\\n\\n        uint256 valueToRefund = msg.value.sub(valueToAccept);\\n        if (valueToRefund > 0) {\\n            _msgSender().transfer(valueToRefund);\\n\\n            emit ContributionRefunded(msg.sender, valueToRefund);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IBuybackInitializer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IBuybackInitializer {\\n    function init(address _token, address _uniswapRouter, uint256 _minTokensToHold) external payable;\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IFarmActivator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IFarmActivator {\\n    function startFarming(address _rewardToken, address _farmToken) external;\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IPresale {\\n    event PresaleStarted();\\n\\n    event FcfsActivated();\\n\\n    event PresaleEnded();\\n\\n    event ContributionAccepted(\\n        address indexed _contributor,\\n        uint256 _partialContribution,\\n        uint256 _totalContribution,\\n        uint256 _receivedTokens,\\n        uint256 _contributions\\n    );\\n\\n    event ContributionRefunded(address indexed _contributor, uint256 _contribution);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function uniswapPairAddress() external view returns (address);\\n\\n    function buybackAddress() external view returns (address);\\n\\n    function liquidityLockAddress() external view returns (address);\\n\\n    function uniswapRouterAddress() external view returns (address);\\n\\n    function rcFarmAddress() external view returns (address);\\n\\n    function rcEthFarmAddress() external view returns (address);\\n\\n    function collectedAmount() external view returns (uint256);\\n\\n    function hardcapAmount() external view returns (uint256);\\n\\n    function maxContributionAmount() external view returns (uint256);\\n\\n    function isPresaleActive() external view returns (bool);\\n\\n    function isFcfsActive() external view returns (bool);\\n\\n    function wasPresaleEnded() external view returns (bool);\\n\\n    function isWhitelisted(address _contributor) external view returns (bool);\\n\\n    function contribution(address _contributor) external view returns (uint256);\\n\\n    function addContributors(address[] calldata _contributors) external;\\n\\n    function start(\\n        uint256 _hardcap,\\n        uint256 _maxContribution,\\n        address _token,\\n        address _uniswapPair,\\n        address _buyback,\\n        address _liquidityLock,\\n        address _uniswapRouter,\\n        address _rcFarm,\\n        address _rcEthFarm,\\n        address[] calldata _contributors\\n    ) external;\\n\\n    function activateFcfs() external;\\n\\n    function end(address payable _team) external;\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IToken {\\n    function uniswapPairAddress() external view returns (address);\\n\\n    function setUniswapPair(address _uniswapPair) external;\\n\\n    function burnDistributorTokensAndUnlock() external;\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/ITokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface ITokenDistributor {\\n    function getMaxSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_partialContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receivedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contributions\",\"type\":\"uint256\"}],\"name\":\"ContributionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contribution\",\"type\":\"uint256\"}],\"name\":\"ContributionRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FcfsActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUYBACK_ALLOCATION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_ALLOCATION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_ETH_FARM_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_FARM_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateFcfs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"addContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"contribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFcfsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rcEthFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rcFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rcFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rcEthFarm\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Presale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}