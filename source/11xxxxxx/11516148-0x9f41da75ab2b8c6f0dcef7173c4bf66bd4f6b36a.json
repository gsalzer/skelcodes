{"status":"1","message":"OK","result":[{"SourceCode":"//Every CocktailBar needs some Peanuts ; )\r\n//This is your official invitation to the Cocktailbar Grand opening,\r\n//Come join us: @cocktailbar_discussion\r\n//\r\n//Sincerely, Mr. Martini\r\n\r\npragma solidity ^0.5.9;\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n      function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    address payable owner;\r\n    address payable newOwner;\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner!=address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        if (msg.sender==newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) view public  returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) view public  returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Token is Owned,  ERC20 {\r\n    using SafeMath for uint256;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n    \r\n    uint256 burn_amount=0;\r\n    event Burn(address burner, uint256 _value);\r\n    event BurntOut(address burner, uint256 _value);\r\n    \r\n    function balanceOf(address _owner) view public   returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    function transfer(address _to, uint256 _amount) public   returns (bool success) {\r\n        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n\r\n//Herein lies the magic of Peanuts; A 5% Testa Waste (BURN) //function reduces the supply of each transaction by 5%.This repeats //until there is but 100 PEANUTS left.\r\n\r\n        uint256 amount = fivePercent(_amount); \r\n        burn(msg.sender,amount);\r\n        if(totalSupply > 100000000000000000000)\r\n        {\r\n            \r\n        uint256 amountToTransfer = _amount.sub(amount);\r\n        balances[msg.sender]-=amountToTransfer;\r\n        balances[_to]+=amountToTransfer;\r\n        \r\n        emit Transfer(msg.sender,_to,amountToTransfer);\r\n        return true;\r\n        }\r\n        else{\r\n         \r\n        balances[msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n        return true;\r\n        }\r\n        \r\n    }\r\n  \r\n  function transferFromOwner(address _to, uint256 _amount) public   returns (bool success) {\r\n        require (balances[owner]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n       \r\n        uint256 amount = fivePercent(_amount);\r\n        burn(owner, amount);\r\n        \r\n        if(totalSupply > 100000000000000000000)\r\n        {\r\n        uint256 amountToTransfer = _amount.sub(amount);\r\n        balances[owner]-=amountToTransfer;\r\n        balances[_to]+=amountToTransfer;\r\n           emit Transfer(owner,_to,amountToTransfer);\r\n        }else\r\n        {\r\n        \r\n        balances[owner]-=_amount;\r\n        balances[_to]+=_amount;\r\n           emit Transfer(owner,_to,_amount);\r\n        }\r\n return true;\r\n    }\r\n  \r\n    function transferFrom(address _from,address _to,uint256 _amount) public   returns (bool success) {\r\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n        uint256 amount = fivePercent(_amount);\r\n       \r\n        burn(_from, amount);\r\n       \r\n        if(totalSupply > 100000000000000000000)\r\n        {\r\n        uint256 amountToTransfer = _amount.sub(amount);\r\n        balances[_from]-=amountToTransfer;\r\n        allowed[_from][msg.sender]-=amountToTransfer;\r\n        balances[_to]+=amountToTransfer;\r\n        emit Transfer(_from, _to, amountToTransfer);\r\n        }\r\n        else\r\n        {\r\n           \r\n        balances[_from]-=_amount;\r\n        allowed[_from][msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        }\r\n       \r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _amount) public   returns (bool success) {\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public   returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    \r\n    function burn(address _from, uint256 _value) internal  {\r\n    \r\n        if(totalSupply > 100000000000000000000)\r\n        {\r\n            \r\n            uint256 burnlimit = totalSupply.sub(_value);\r\n        \r\n        \r\n        if(burnlimit > 100000000000000000000)    \r\n        {\r\n        balances[_from] =balances[_from].sub(_value);  // Subtract from the sender\r\n        totalSupply =totalSupply.sub(_value);  \r\n        burn_amount = burn_amount.add(_value);\r\n        // Updates totalSupply\r\n        emit Burn(_from, _value);\r\n        }else\r\n        {\r\n             emit BurntOut(msg.sender, _value);\r\n        }\r\n            \r\n        }else\r\n        {\r\n            emit BurntOut(msg.sender, _value);\r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n        function fivePercent(uint256 _tokens) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint fivepercentofTokens = roundValue.mul(500).div(100 * 10**uint(2));\r\n        return fivepercentofTokens;\r\n    }\r\n}\r\n\r\ncontract PEANUTS is Token{\r\n    using SafeMath for uint256;\r\n    constructor() public{\r\n        symbol = \"PEANUTS\";\r\n        name = \"PEANUTS\";\r\n        decimals = 18;\r\n        totalSupply = 2500000000000000000000; //2500 \r\n        \r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n        \r\n        \r\n    }\r\n\r\n    function () payable external {\r\n        require(msg.value>0);\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurntOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PEANUTS","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4039dd8e0596aeeb39ccfa6716b4f05e1402ec15abaae41b40b08be1ed66106d"}]}