{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract UnilayerStake is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    address public stakeCreator = address(0x80eD730B453C1c3d5e89326eb1b04BeA8125dbd1);\r\n    uint public ethToNextStake = 0;\r\n    uint stakeNum = 0;\r\n    uint constant CAP = 1000000000000000000; //smallest currency unit\r\n    bool isPaused = false;\r\n    \r\n    enum WithdrawType {Leave, Next}\r\n    \r\n    struct Stake {\r\n       uint start;\r\n       uint end;\r\n       uint unilayerLocked;\r\n       uint rewardPayment;\r\n    }\r\n    \r\n    struct StakeHolder {\r\n        uint amountLocked;\r\n        uint reward;\r\n    }\r\n    \r\n    event logLockedTokens(address holder, uint amountLocked, uint stakeId);\r\n    event logUnlockedTokens(address holder, uint amountUnlocked, uint stakeId);\r\n    event logNewStakePayment(uint id, uint amount);\r\n    event logWithdraw(address holder, uint amount, uint allEarning, uint stakeId);\r\n    \r\n    modifier paused {\r\n        require(isPaused == false, \"This contract was paused by the owner!\");\r\n        _;\r\n    }\r\n          \r\n    modifier exist (uint index) {\r\n        require(index <= stakeNum, 'This stake does not exist.');\r\n        _;        \r\n    }\r\n    \r\n    mapping (address => mapping (uint => StakeHolder)) public stakeHolders;\r\n    mapping (uint => Stake) public stakes;\r\n    \r\n    IERC20 UNILAYER = IERC20(0x0fF6ffcFDa92c53F615a4A75D982f399C989366b);\r\n    \r\n    function setNewStakeCreator(address _stakeCreator) external onlyOwner {\r\n        require(_stakeCreator != address(0), 'Do not use 0 address');\r\n        stakeCreator = _stakeCreator;\r\n    }\r\n    \r\n    function lock(uint payment) external paused {\r\n        require(payment > 0, 'Payment must be greater than 0.');\r\n        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\r\n        UNILAYER.transferFrom(msg.sender, address(this), payment);\r\n        \r\n        StakeHolder memory holder = stakeHolders[msg.sender][stakeNum];\r\n        holder.amountLocked = holder.amountLocked.add(payment);\r\n        \r\n        Stake memory stake = stakes[stakeNum];\r\n        stake.unilayerLocked = stake.unilayerLocked.add(payment);\r\n        \r\n        stakeHolders[msg.sender][stakeNum] = holder;\r\n        stakes[stakeNum] = stake;\r\n        \r\n        emit logLockedTokens(msg.sender, payment, stakeNum);\r\n    }\r\n    \r\n    function unlock(uint index) external paused exist(index) {\r\n        StakeHolder memory holder = stakeHolders[msg.sender][index]; \r\n        uint amt = holder.amountLocked;\r\n        require(amt > 0, 'You do not have locked tokens.');\r\n        \r\n        UNILAYER.transfer(msg.sender, amt);\r\n        \r\n        Stake memory stake = stakes[stakeNum];\r\n        \r\n        require(stake.end > block.timestamp, 'Invalid date for unlock, please use withdraw.');\r\n        \r\n        stake.unilayerLocked = stake.unilayerLocked.sub(amt);\r\n    \r\n        holder.amountLocked = 0;\r\n        \r\n        stakes[stakeNum] = stake;\r\n        stakeHolders[msg.sender][index] = holder;\r\n        \r\n        emit logUnlockedTokens(msg.sender, amt, index);\r\n    }\r\n    \r\n    function addStakePayment() external {\r\n        require(msg.sender == stakeCreator, 'You cannot call this function');\r\n        Stake memory stake = stakes[stakeNum]; \r\n        stake.end = block.timestamp;\r\n        stake.rewardPayment = stake.rewardPayment.add(ethToNextStake);\r\n        ethToNextStake = 0;\r\n        stakes[stakeNum] = stake;\r\n        emit logNewStakePayment(stakeNum, ethToNextStake);    \r\n        stakeNum++;\r\n        stakes[stakeNum] = Stake(block.timestamp, 0, 0, 0);\r\n    }\r\n    \r\n    function withdraw(uint index, WithdrawType wtype) external paused exist(index) {\r\n        StakeHolder memory holder = stakeHolders[msg.sender][index];\r\n        Stake memory stake = stakes[index];\r\n        \r\n        require(stake.end <= block.timestamp, 'Invalid date for withdrawal.');\r\n        require(holder.amountLocked > 0, 'You do not have locked tokens.');\r\n        require(stake.rewardPayment > 0, 'There is no value to distribute.');\r\n   \r\n        uint rate = holder.amountLocked.mul(CAP).div(stake.unilayerLocked);\r\n        \r\n        uint reward_temp = stake.rewardPayment.mul(rate).div(CAP).sub(holder.reward);\r\n        \r\n        require(reward_temp > 0, 'You have no value to be withdrawn.');\r\n\r\n        msg.sender.transfer(reward_temp); \r\n        holder.reward = holder.reward.add(reward_temp);\r\n        \r\n        emit logWithdraw(msg.sender, reward_temp, holder.reward, index);\r\n        \r\n        stakeHolders[msg.sender][index] = StakeHolder(0, holder.reward);\r\n        \r\n        if(wtype == WithdrawType.Leave) { \r\n            UNILAYER.transfer(msg.sender, holder.amountLocked); \r\n        }\r\n        else {\r\n            uint stakeI = 0;\r\n            if(index < stakeNum) { stakeI = stakeNum; }\r\n            else { stakeI = stakeNum + 1; }\r\n            \r\n            holder.reward = 0;\r\n            stakeHolders[msg.sender][stakeI] = holder;  \r\n            \r\n            Stake memory stakeNext = stakes[stakeI];\r\n            stakeNext.unilayerLocked = stakeNext.unilayerLocked.add(holder.amountLocked);\r\n            stakes[stakeI] = stakeNext;\r\n        } \r\n\r\n    }\r\n    \r\n    receive() external payable {\r\n        ethToNextStake = ethToNextStake.add(msg.value); \r\n    }\r\n\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"logLockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logNewStakePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"logUnlockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allEarning\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"logWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addStakePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToNextStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeCreator\",\"type\":\"address\"}],\"name\":\"setNewStakeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unilayerLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPayment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum UnilayerStake.WithdrawType\",\"name\":\"wtype\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnilayerStake","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e835b3de3a359346e4fcfcde8492c57692c47d69e637f6edd2164ba6e588737f"}]}