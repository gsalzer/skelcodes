{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/MasterGame.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\n\r\n/**\r\n * @dev Ticket contract interface\r\n */\r\ninterface ITicketsToken is IERC20 {\r\n    function burnFromUsdt(address account, uint256 usdtAmount) external;\r\n\r\n    function vendingAndBurn(address account, uint256 amount) external;\r\n\r\n    function price() external returns (uint256);\r\n\r\n    function totalVending() external returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Master contract\r\n */\r\ncontract MasterGame is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    IERC20 usdt;\r\n    uint256 constant usdter = 1e6;\r\n\r\n    // Creation time\r\n    uint256 public createdAt;\r\n    // Total revenue\r\n    uint256 public totalRevenue;\r\n\r\n    // Ticket contract\r\n    ITicketsToken ticket;\r\n\r\n    // Static income cycle: 1 day\r\n    uint256 constant STATIC_CYCLE = 1 days;\r\n    // Daily prize pool cycle: 1 day\r\n    uint256 constant DAY_POOL_CYCLE = 1 days;\r\n    // Weekly prize pool cycle: 7 days\r\n    uint256 constant WEEK_POOL_CYCLE = 7 days;\r\n    // Upgrade node discount: 100 days\r\n    uint256 constant NODE_DISCOUNT_TIME = 100 days;\r\n\r\n    // Static rate of return, parts per thousand\r\n    uint256 staticRate = 5;\r\n    // Dynamic rate of return, parts per thousand\r\n    uint256[12] dynamicRates = [\r\n        100,\r\n        80,\r\n        60,\r\n        50,\r\n        50,\r\n        60,\r\n        70,\r\n        50,\r\n        50,\r\n        50,\r\n        60,\r\n        80\r\n    ];\r\n    // Technology founding team\r\n    uint256 public founder;\r\n    // Market value management fee\r\n    uint256 public operation;\r\n    // Insurance pool\r\n    uint256 public insurance;\r\n    // Perpetual capital pool\r\n    uint256 public sustainable;\r\n    // Dex Market making\r\n    uint256 public dex;\r\n    // Account ID\r\n    uint256 public id;\r\n    // Number of people activating Pa Point\r\n    uint8 public nodeBurnNumber;\r\n    // Account data\r\n    mapping(address => Account) public accounts;\r\n    mapping(address => AccountCount) public stats;\r\n    // Node burn data\r\n    mapping(address => AccountNodeBurn) public burns;\r\n    // Team data\r\n    mapping(address => AccountPerformance) public performances;\r\n    mapping(address => address[]) public teams;\r\n    // Node data\r\n    // 1 Light node; 2 Intermediate node; 3 Super node; 4 Genesis node\r\n    mapping(uint8 => address[]) public nodes;\r\n\r\n    // Weekly prize pool\r\n    uint64 public weekPoolId;\r\n    mapping(uint64 => Pool) public weekPool;\r\n\r\n    // Daily prize pool\r\n    uint64 public dayPoolId;\r\n    mapping(uint64 => Pool) public dayPool;\r\n\r\n    // Address with a deposit of 15,000 or more\r\n    EnumerableSet.AddressSet private richman;\r\n\r\n    // Account\r\n    struct Account {\r\n        uint256 id;\r\n        address referrer; // Direct push\r\n        bool reinvest; // Whether to reinvest\r\n        uint8 nodeLevel; // Node level\r\n        uint256 joinTime; // Join time: This value needs to be updated when joining again\r\n        uint256 lastTakeTime; // Last time the static income was received\r\n        uint256 deposit; // Deposited quantity: 0 means \"out\"\r\n        uint256 nodeIncome; // Node revenue balance\r\n        uint256 dayPoolIncome; // Daily bonus pool income balance\r\n        uint256 weekPoolIncome; // Weekly bonus pool income balance\r\n        uint256 dynamicIncome; // Dynamic income balance\r\n        uint256 income; // Total revenue\r\n        uint256 maxIncome; // Exit condition\r\n        uint256 reward; // Additional other rewards\r\n    }\r\n\r\n    // Account statistics\r\n    struct AccountCount {\r\n        uint256 income; // Total revenue\r\n        uint256 investment; // Total investment\r\n    }\r\n\r\n    // Performance\r\n    struct AccountPerformance {\r\n        uint256 performance; // Direct performance\r\n        uint256 wholeLine; // Performance of all layers below\r\n    }\r\n\r\n    // Node burn\r\n    struct AccountNodeBurn {\r\n        bool active; // Whether to activate Node burn\r\n        uint256 income; // Node burn income\r\n    }\r\n\r\n    // Prize pool\r\n    struct Pool {\r\n        uint256 amount; // Prize pool amount\r\n        uint256 date; // Creation time: Use this field to determine the draw time\r\n        mapping(uint8 => address) ranks; // Ranking: up to 256\r\n        mapping(address => uint256) values; // Quantity/Performance\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether the address is an already added address\r\n     */\r\n    modifier onlyJoined(address addr) {\r\n        require(accounts[addr].id > 0, \"ANR\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _usdt) public {\r\n        usdt = _usdt;\r\n\r\n        createdAt = now;\r\n\r\n        // Genius\r\n        Account storage user = accounts[msg.sender];\r\n        user.id = ++id;\r\n        user.referrer = address(0);\r\n        user.joinTime = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Join or reinvest the game\r\n     */\r\n    function join(address referrer, uint256 _amount)\r\n        public\r\n        onlyJoined(referrer)\r\n    {\r\n        require(referrer != msg.sender, \"NS\");\r\n        require(_amount >= usdter.mul(100), \"MIN\");\r\n\r\n        // Receive USDT\r\n        usdt.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Burn 12%\r\n        _handleJoinBurn(msg.sender, _amount);\r\n\r\n        Account storage user = accounts[msg.sender];\r\n        // Create new account\r\n        if (user.id == 0) {\r\n            user.id = ++id;\r\n            user.referrer = referrer;\r\n            user.joinTime = now;\r\n            // Direct team\r\n            teams[referrer].push(msg.sender);\r\n        }\r\n\r\n        // Reinvest to join\r\n        if (user.deposit != 0) {\r\n            require(!user.reinvest, \"Reinvest\");\r\n\r\n            // Can reinvest after paying back\r\n            uint256 income = calculateStaticIncome(msg.sender)\r\n                .add(user.dynamicIncome)\r\n                .add(user.nodeIncome)\r\n                .add(burns[msg.sender].income)\r\n                .add(user.income);\r\n            require(income >= user.deposit, \"Not Coast\");\r\n\r\n            // Half or all reinvestment\r\n            require(\r\n                _amount == user.deposit || _amount == user.deposit.div(2),\r\n                \"FOH\"\r\n            );\r\n\r\n            if (_amount == user.deposit) {\r\n                // All reinvestment\r\n                user.maxIncome = user.maxIncome.add(\r\n                    _calculateFullOutAmount(_amount)\r\n                );\r\n            } else {\r\n                // Half return\r\n                user.maxIncome = user.maxIncome.add(\r\n                    _calculateOutAmount(_amount)\r\n                );\r\n            }\r\n            user.reinvest = true;\r\n            user.deposit = user.deposit.add(_amount);\r\n        } else {\r\n            // Join out\r\n            user.deposit = _amount;\r\n            user.lastTakeTime = now;\r\n            user.maxIncome = _calculateOutAmount(_amount);\r\n            // Cumulative income cleared\r\n            user.nodeIncome = 0;\r\n            user.dayPoolIncome = 0;\r\n            user.weekPoolIncome = 0;\r\n            user.dynamicIncome = 0;\r\n            burns[msg.sender].income = 0;\r\n        }\r\n\r\n        // Processing performance\r\n        performances[msg.sender].wholeLine = performances[msg.sender]\r\n            .wholeLine\r\n            .add(_amount);\r\n        _handlePerformance(user.referrer, _amount);\r\n        // Processing node rewards\r\n        _handleNodeReward(_amount);\r\n        // Handling Node burn Reward\r\n        _handleNodeBurnReward(msg.sender, _amount);\r\n        // Processing node level\r\n        _handleNodeLevel(user.referrer);\r\n        // Handling prizes and draws\r\n        _handlePool(user.referrer, _amount);\r\n\r\n        // Technology founding team: 4%\r\n        founder = founder.add(_amount.mul(4).div(100));\r\n        // Expansion operating expenses: 4%\r\n        operation = operation.add(_amount.mul(4).div(100));\r\n        // Dex market making capital 2%\r\n        dex = dex.add(_amount.mul(2).div(100));\r\n\r\n        // Insurance pool: 1.5%\r\n        insurance = insurance.add(_amount.mul(15).div(1000));\r\n        // Perpetual pool: 3.5%\r\n        sustainable = sustainable.add(_amount.mul(35).div(1000));\r\n\r\n        // Record the address of deposit 15000\r\n        if (user.deposit >= usdter.mul(15000)) {\r\n            EnumerableSet.add(richman, msg.sender);\r\n        }\r\n\r\n        // Statistics total investment\r\n        stats[msg.sender].investment = stats[msg.sender].investment.add(\r\n            _amount\r\n        );\r\n        // Total revenue\r\n        totalRevenue = totalRevenue.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tickets when you join\r\n     */\r\n    function _handleJoinBurn(address addr, uint256 _amount) internal {\r\n        uint256 burnUsdt = _amount.mul(12).div(100);\r\n        uint256 burnAmount = burnUsdt.mul(ticket.price()).div(usdter);\r\n        uint256 bal = ticket.balanceOf(addr);\r\n\r\n        if (bal >= burnAmount) {\r\n            ticket.burnFromUsdt(addr, burnUsdt);\r\n        } else {\r\n            // USDT can be used to deduct tickets after the resonance of 4.5 million\r\n            require(\r\n                ticket.totalVending() >= uint256(1e18).mul(4500000),\r\n                \"4.5M\"\r\n            );\r\n\r\n            // Use USDT to deduct tickets\r\n            usdt.safeTransferFrom(addr, address(this), burnUsdt);\r\n            ticket.vendingAndBurn(addr, burnAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Receive revenue and calculate outgoing data\r\n     */\r\n    function take() public onlyJoined(msg.sender) {\r\n        Account storage user = accounts[msg.sender];\r\n\r\n        require(user.deposit > 0, \"OUT\");\r\n\r\n        uint256 staticIncome = calculateStaticIncome(msg.sender);\r\n        if (staticIncome > 0) {\r\n            user.lastTakeTime =\r\n                now -\r\n                ((now - user.lastTakeTime) % STATIC_CYCLE);\r\n        }\r\n\r\n        uint256 paid = staticIncome\r\n            .add(user.dynamicIncome)\r\n            .add(user.nodeIncome)\r\n            .add(burns[msg.sender].income);\r\n\r\n        // Cleared\r\n        user.nodeIncome = 0;\r\n        user.dynamicIncome = 0;\r\n        burns[msg.sender].income = 0;\r\n\r\n        // Cumulative income\r\n        user.income = user.income.add(paid);\r\n\r\n        // Meet the exit conditions, or no re-investment and reach 1.3 times\r\n        uint256 times13 = user.deposit.mul(13).div(10);\r\n        bool special = !user.reinvest && user.income >= times13;\r\n        // Out of the game\r\n        if (user.income >= user.maxIncome || special) {\r\n            // Deduct excess income\r\n            if (special) {\r\n                paid = times13.sub(user.income.sub(paid));\r\n            } else {\r\n                paid = paid.sub(user.income.sub(user.maxIncome));\r\n            }\r\n            // Data clear\r\n            user.deposit = 0;\r\n            user.income = 0;\r\n            user.maxIncome = 0;\r\n            user.reinvest = false;\r\n        }\r\n\r\n        // Static income returns to superior dynamic income\r\n        // When zooming in half of the quota (including re-investment), dynamic acceleration is not provided to the upper 12 layers\r\n        if (staticIncome > 0 && user.income < user.maxIncome.div(2)) {\r\n            _handleDynamicIncome(msg.sender, staticIncome);\r\n        }\r\n\r\n        // Total income statistics\r\n        stats[msg.sender].income = stats[msg.sender].income.add(paid);\r\n\r\n        // USDT transfer\r\n        _safeUsdtTransfer(msg.sender, paid);\r\n\r\n        // Trigger\r\n        _openWeekPool();\r\n        _openDayPool();\r\n    }\r\n\r\n    /**\r\n     * @dev Receive insurance pool rewards\r\n     */\r\n    function takeReward() public {\r\n        uint256 paid = accounts[msg.sender].reward;\r\n        accounts[msg.sender].reward = 0;\r\n        usdt.transfer(msg.sender, paid);\r\n\r\n        // Total income statistics\r\n        stats[msg.sender].income = stats[msg.sender].income.add(paid);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive prize pool income\r\n     */\r\n    function takePoolIncome() public {\r\n        Account storage user = accounts[msg.sender];\r\n\r\n        uint256 paid = user.dayPoolIncome.add(user.weekPoolIncome);\r\n        user.dayPoolIncome = 0;\r\n        user.weekPoolIncome = 0;\r\n\r\n        // Total income statistics\r\n        stats[msg.sender].income = stats[msg.sender].income.add(paid);\r\n\r\n        _safeUsdtTransfer(msg.sender, paid);\r\n    }\r\n\r\n    /**\r\n     * @dev To activate Node burn, you need to destroy some tickets worth a specific USDT\r\n     */\r\n    function activateNodeBurn() public onlyJoined(msg.sender) {\r\n        require(!burns[msg.sender].active, \"ACT\");\r\n        require(nodeBurnNumber < 500, \"LIMIT\");\r\n\r\n        uint256 burn = activateNodeBurnAmount();\r\n\r\n        ticket.burnFromUsdt(msg.sender, burn);\r\n        nodeBurnNumber++;\r\n\r\n        burns[msg.sender].active = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of USDT that activates the burned ticket for Node burn\r\n     */\r\n    function activateNodeBurnAmount() public view returns (uint256) {\r\n        uint8 num = nodeBurnNumber + 1;\r\n\r\n        if (num >= 400) {\r\n            return usdter.mul(7000);\r\n        } else if (num >= 300) {\r\n            return usdter.mul(6000);\r\n        } else if (num >= 200) {\r\n            return usdter.mul(5000);\r\n        } else if (num >= 100) {\r\n            return usdter.mul(4000);\r\n        } else {\r\n            return usdter.mul(3000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Handling Node burn Reward\r\n     */\r\n    function _handleNodeBurnReward(address addr, uint256 _amount) internal {\r\n        address referrer = accounts[addr].referrer;\r\n        bool pioneer = false;\r\n\r\n        while (referrer != address(0)) {\r\n            AccountNodeBurn storage ap = burns[referrer];\r\n            if (ap.active) {\r\n                if (accounts[referrer].nodeLevel > 0) {\r\n                    uint256 paid;\r\n                    if (pioneer) {\r\n                        paid = _amount.mul(4).div(100); // 4%\r\n                    } else {\r\n                        paid = _amount.mul(7).div(100); // 7%\r\n                    }\r\n                    ap.income = ap.income.add(paid);\r\n                    break;\r\n                } else if (!pioneer) {\r\n                    ap.income = ap.income.add(_amount.mul(3).div(100)); // 3%\r\n                    pioneer = true;\r\n                }\r\n            }\r\n            referrer = accounts[referrer].referrer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Dealing with dynamic revenue\r\n     */\r\n    function _handleDynamicIncome(address addr, uint256 _amount) internal {\r\n        address account = accounts[addr].referrer;\r\n        // Up to 12 layers\r\n        for (uint8 i = 1; i <= 12; i++) {\r\n            if (account == address(0)) {\r\n                break;\r\n            }\r\n\r\n            Account storage user = accounts[account];\r\n            if (\r\n                user.deposit > 0 &&\r\n                _canDynamicIncomeAble(\r\n                    performances[account].performance,\r\n                    user.deposit,\r\n                    i\r\n                )\r\n            ) {\r\n                uint256 _income = _amount.mul(dynamicRates[i - 1]).div(1000);\r\n                user.dynamicIncome = user.dynamicIncome.add(_income);\r\n            }\r\n\r\n            account = user.referrer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Judge whether you can get dynamic income\r\n     */\r\n    function _canDynamicIncomeAble(\r\n        uint256 performance,\r\n        uint256 deposit,\r\n        uint8 floor\r\n    ) internal pure returns (bool) {\r\n        // Deposit more than 1500\r\n        if (deposit >= usdter.mul(1500)) {\r\n            if (performance >= usdter.mul(10000)) {\r\n                return floor <= 12;\r\n            }\r\n            if (performance >= usdter.mul(6000)) {\r\n                return floor <= 8;\r\n            }\r\n            if (performance >= usdter.mul(3000)) {\r\n                return floor <= 5;\r\n            }\r\n            if (performance >= usdter.mul(1500)) {\r\n                return floor <= 3;\r\n            }\r\n        } else if (deposit >= usdter.mul(300)) {\r\n            if (performance >= usdter.mul(1500)) {\r\n                return floor <= 3;\r\n            }\r\n        }\r\n        return floor <= 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Process prize pool data and draw\r\n     */\r\n    function _handlePool(address referrer, uint256 _amount) internal {\r\n        _openWeekPool();\r\n        _openDayPool();\r\n\r\n        uint256 prize = _amount.mul(3).div(100); // 3%\r\n\r\n        uint256 dayPrize = prize.mul(60).div(100); // 60%\r\n        uint256 weekPrize = prize.sub(dayPrize); // 40%\r\n\r\n        _handleWeekPool(referrer, _amount, weekPrize);\r\n        _handleDayPool(referrer, _amount, dayPrize);\r\n    }\r\n\r\n    /**\r\n     * @dev Manually trigger the draw\r\n     */\r\n    function triggerOpenPool() public {\r\n        _openWeekPool();\r\n        _openDayPool();\r\n    }\r\n\r\n    /**\r\n     * @dev Processing weekly prize pool\r\n     */\r\n    function _handleWeekPool(\r\n        address referrer,\r\n        uint256 _amount,\r\n        uint256 _prize\r\n    ) internal {\r\n        Pool storage week = weekPool[weekPoolId];\r\n\r\n        week.amount = week.amount.add(_prize);\r\n        week.values[referrer] = week.values[referrer].add(_amount);\r\n        _PoolSort(week, referrer, 3);\r\n    }\r\n\r\n    /**\r\n     * @dev Handling the daily prize pool\r\n     */\r\n    function _handleDayPool(\r\n        address referrer,\r\n        uint256 _amount,\r\n        uint256 _prize\r\n    ) internal {\r\n        Pool storage day = dayPool[dayPoolId];\r\n\r\n        day.amount = day.amount.add(_prize);\r\n        day.values[referrer] = day.values[referrer].add(_amount);\r\n        _PoolSort(day, referrer, 7);\r\n    }\r\n\r\n    /**\r\n     * @dev Prize pool sorting\r\n     */\r\n    function _PoolSort(\r\n        Pool storage pool,\r\n        address addr,\r\n        uint8 number\r\n    ) internal {\r\n        for (uint8 i = 0; i < number; i++) {\r\n            address key = pool.ranks[i];\r\n            if (key == addr) {\r\n                break;\r\n            }\r\n            if (pool.values[addr] > pool.values[key]) {\r\n                for (uint8 j = number; j > i; j--) {\r\n                    pool.ranks[j] = pool.ranks[j - 1];\r\n                }\r\n                pool.ranks[i] = addr;\r\n\r\n                for (uint8 k = i + 1; k < number; k++) {\r\n                    if (pool.ranks[k] == addr) {\r\n                        for (uint8 l = k; l < number; l++) {\r\n                            pool.ranks[l] = pool.ranks[l + 1];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Weekly prize pool draw\r\n     */\r\n    function _openWeekPool() internal {\r\n        Pool storage week = weekPool[weekPoolId];\r\n        // Determine whether the weekly prize pool can draw prizes\r\n        if (now >= week.date + WEEK_POOL_CYCLE) {\r\n            weekPoolId++;\r\n            weekPool[weekPoolId].date = now;\r\n\r\n            // 15% for the draw\r\n            uint256 prize = week.amount.mul(15).div(100);\r\n            // 85% naturally rolled into the next round\r\n            weekPool[weekPoolId].amount = week.amount.sub(prize);\r\n\r\n            if (prize > 0) {\r\n                // No prizes left\r\n                uint256 surplus = prize;\r\n\r\n                // Proportion 70%、20%、10%\r\n                uint256[3] memory rates = [\r\n                    uint256(70),\r\n                    uint256(20),\r\n                    uint256(10)\r\n                ];\r\n                // Top 3\r\n                for (uint8 i = 0; i < 3; i++) {\r\n                    address addr = week.ranks[i];\r\n                    uint256 reward = prize.mul(rates[i]).div(100);\r\n\r\n                    // Reward for rankings, and rollover to the next round without rankings\r\n                    if (addr != address(0)) {\r\n                        accounts[addr].weekPoolIncome = accounts[addr]\r\n                            .weekPoolIncome\r\n                            .add(reward);\r\n                        surplus = surplus.sub(reward);\r\n                    }\r\n                }\r\n\r\n                // Add the rest to the next round\r\n                weekPool[weekPoolId].amount = weekPool[weekPoolId].amount.add(\r\n                    surplus\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Daily prize pool draw\r\n     */\r\n    function _openDayPool() internal {\r\n        Pool storage day = dayPool[dayPoolId];\r\n        // Determine whether the daily prize pool can be drawn\r\n        if (now >= day.date + DAY_POOL_CYCLE) {\r\n            dayPoolId++;\r\n            dayPool[dayPoolId].date = now;\r\n\r\n            // 15% for the draw\r\n            uint256 prize = day.amount.mul(15).div(100);\r\n            // 85% naturally rolled into the next round\r\n            dayPool[dayPoolId].amount = day.amount.sub(prize);\r\n\r\n            if (prize > 0) {\r\n                // No prizes left\r\n                uint256 surplus = prize;\r\n\r\n                // The first and second place ratios are 70%, 20%; 10% is evenly distributed to the remaining 5\r\n                uint256[2] memory rates = [uint256(70), uint256(20)];\r\n\r\n                // Top 2\r\n                for (uint8 i = 0; i < 2; i++) {\r\n                    address addr = day.ranks[i];\r\n                    uint256 reward = prize.mul(rates[i]).div(100);\r\n\r\n                    // Reward for rankings, and rollover to the next round without rankings\r\n                    if (addr != address(0)) {\r\n                        accounts[addr].dayPoolIncome = accounts[addr]\r\n                            .dayPoolIncome\r\n                            .add(reward);\r\n                        surplus = surplus.sub(reward);\r\n                    }\r\n                }\r\n\r\n                // 10% is evenly divided among the remaining 5\r\n                uint256 avg = prize.div(50);\r\n                for (uint8 i = 2; i <= 6; i++) {\r\n                    address addr = day.ranks[i];\r\n\r\n                    if (addr != address(0)) {\r\n                        accounts[addr].dayPoolIncome = accounts[addr]\r\n                            .dayPoolIncome\r\n                            .add(avg);\r\n                        surplus = surplus.sub(avg);\r\n                    }\r\n                }\r\n\r\n                // Add the rest to the next round\r\n                dayPool[dayPoolId].amount = dayPool[dayPoolId].amount.add(\r\n                    surplus\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Processing account performance\r\n     */\r\n    function _handlePerformance(address referrer, uint256 _amount) internal {\r\n        // Direct performance\r\n        performances[referrer].performance = performances[referrer]\r\n            .performance\r\n            .add(_amount);\r\n        // Full line performance\r\n        address addr = referrer;\r\n        while (addr != address(0)) {\r\n            performances[addr].wholeLine = performances[addr].wholeLine.add(\r\n                _amount\r\n            );\r\n            addr = accounts[addr].referrer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Processing node level\r\n     */\r\n    function _handleNodeLevel(address referrer) internal {\r\n        address addr = referrer;\r\n\r\n        // Condition\r\n        uint256[4] memory c1s = [\r\n            usdter.mul(100000),\r\n            usdter.mul(300000),\r\n            usdter.mul(600000),\r\n            usdter.mul(1200000)\r\n        ];\r\n        uint256[4] memory c2s = [\r\n            usdter.mul(250000),\r\n            usdter.mul(600000),\r\n            usdter.mul(1200000),\r\n            usdter.mul(2250000)\r\n        ];\r\n        uint256[4] memory s1s = [\r\n            usdter.mul(20000),\r\n            usdter.mul(60000),\r\n            usdter.mul(90000),\r\n            usdter.mul(160000)\r\n        ];\r\n        uint256[4] memory s2s = [\r\n            usdter.mul(30000),\r\n            usdter.mul(90000),\r\n            usdter.mul(135000),\r\n            usdter.mul(240000)\r\n        ];\r\n\r\n        while (addr != address(0)) {\r\n            uint8 level = accounts[addr].nodeLevel;\r\n            if (level < 4) {\r\n                uint256 c1 = c1s[level];\r\n                uint256 c2 = c2s[level];\r\n\r\n                if (now - accounts[addr].joinTime <= NODE_DISCOUNT_TIME) {\r\n                    c1 = c1.sub(s1s[level]);\r\n                    c2 = c2.sub(s2s[level]);\r\n                }\r\n\r\n                if (_handleNodeLevelUpgrade(addr, c1, c2)) {\r\n                    accounts[addr].nodeLevel = level + 1;\r\n                    nodes[level + 1].push(addr);\r\n                }\r\n            }\r\n\r\n            addr = accounts[addr].referrer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether the upgrade conditions are met according to the conditions\r\n     */\r\n    function _handleNodeLevelUpgrade(\r\n        address addr,\r\n        uint256 c1,\r\n        uint256 c2\r\n    ) internal view returns (bool) {\r\n        uint8 count = 0;\r\n        uint256 min = uint256(-1);\r\n\r\n        for (uint256 i = 0; i < teams[addr].length; i++) {\r\n            uint256 w = performances[teams[addr][i]].wholeLine;\r\n\r\n            // Case 1\r\n            if (w >= c1) {\r\n                count++;\r\n                if (count >= 3) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Case 2\r\n            if (w >= c2 && w < min) {\r\n                min = w;\r\n            }\r\n        }\r\n        if (min < uint256(-1) && performances[addr].wholeLine.sub(min) >= c2) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Processing node rewards\r\n     */\r\n    function _handleNodeReward(uint256 _amount) internal {\r\n        uint256 reward = _amount.div(25);\r\n        for (uint8 i = 1; i <= 4; i++) {\r\n            address[] storage _nodes = nodes[i];\r\n            uint256 len = _nodes.length;\r\n            if (len > 0) {\r\n                uint256 _reward = reward.div(len);\r\n                for (uint256 j = 0; j < len; j++) {\r\n                    Account storage user = accounts[_nodes[j]];\r\n                    user.nodeIncome = user.nodeIncome.add(_reward);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate static income\r\n     */\r\n    function calculateStaticIncome(address addr) public view returns (uint256) {\r\n        Account storage user = accounts[addr];\r\n        if (user.deposit > 0) {\r\n            uint256 last = user.lastTakeTime;\r\n            uint256 day = (now - last) / STATIC_CYCLE;\r\n\r\n            if (day == 0) {\r\n                return 0;\r\n            }\r\n\r\n            if (day > 30) {\r\n                day = 30;\r\n            }\r\n\r\n            return user.deposit.mul(staticRate).div(1000).mul(day);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate out multiple\r\n     */\r\n    function _calculateOutAmount(uint256 _amount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_amount >= usdter.mul(15000)) {\r\n            return _amount.mul(35).div(10);\r\n        } else if (_amount >= usdter.mul(4000)) {\r\n            return _amount.mul(30).div(10);\r\n        } else if (_amount >= usdter.mul(1500)) {\r\n            return _amount.mul(25).div(10);\r\n        } else {\r\n            return _amount.mul(20).div(10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the out multiple of all reinvestments\r\n     */\r\n    function _calculateFullOutAmount(uint256 _amount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_amount >= usdter.mul(15000)) {\r\n            return _amount.mul(45).div(10);\r\n        } else if (_amount >= usdter.mul(4000)) {\r\n            return _amount.mul(40).div(10);\r\n        } else if (_amount >= usdter.mul(1500)) {\r\n            return _amount.mul(35).div(10);\r\n        } else {\r\n            return _amount.mul(25).div(10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of nodes at a certain level\r\n     */\r\n    function nodeLength(uint8 level) public view returns (uint256) {\r\n        return nodes[level].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Number of teams\r\n     */\r\n    function teamsLength(address addr) public view returns (uint256) {\r\n        return teams[addr].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Daily prize pool ranking\r\n     */\r\n    function dayPoolRank(uint64 _id, uint8 _rank)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return dayPool[_id].ranks[_rank];\r\n    }\r\n\r\n    /**\r\n     * @dev Daily prize pool performance\r\n     */\r\n    function dayPoolValue(uint64 _id, address _addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dayPool[_id].values[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Weekly prize pool ranking\r\n     */\r\n    function weekPoolRank(uint64 _id, uint8 _rank)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return weekPool[_id].ranks[_rank];\r\n    }\r\n\r\n    /**\r\n     * @dev Weekly prize pool performance\r\n     */\r\n    function weekPoolValue(uint64 _id, address _addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return weekPool[_id].values[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Team statistics, return the smallest, medium and most performance\r\n     */\r\n    function teamsStats(address addr) public view returns (uint256, uint256) {\r\n        uint256 count = teams[addr].length;\r\n        if (count > 0) {\r\n            uint256 max = performances[teams[addr][count - 1]].wholeLine;\r\n            uint256 min = performances[teams[addr][count - 1]].wholeLine;\r\n            for (uint256 i = 0; i < count; i++) {\r\n                if (performances[teams[addr][i]].wholeLine > max) {\r\n                    max = performances[teams[addr][i]].wholeLine;\r\n                }\r\n                if (performances[teams[addr][i]].wholeLine < min) {\r\n                    min = performances[teams[addr][i]].wholeLine;\r\n                }\r\n            }\r\n\r\n            return (max, min);\r\n        }\r\n        return (0, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Count how many people meet the conditions\r\n     */\r\n    function teamsCount(address addr, uint256 _amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count;\r\n\r\n        for (uint256 i = 0; i < teams[addr].length; i++) {\r\n            if (_amount <= performances[teams[addr][i]].wholeLine) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of large account addresses\r\n     */\r\n    function richmanLength() public view returns (uint256) {\r\n        return EnumerableSet.length(richman);\r\n    }\r\n\r\n    /**\r\n     * @dev Safe USDT transfer, excluding the balance of insurance pool and perpetual pool\r\n     */\r\n    function _safeUsdtTransfer(address addr, uint256 _amount) internal {\r\n        uint256 bal = usdt.balanceOf(address(this));\r\n        bal = bal.sub(insurance).sub(sustainable);\r\n\r\n        if (bal < _amount) {\r\n            usdt.transfer(addr, bal);\r\n        } else {\r\n            usdt.transfer(addr, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Activate the insurance pool, only the administrator can call\r\n     */\r\n    function activeInsurance() public onlyOwner {\r\n        uint256 nodePaid = insurance.mul(70).div(100);\r\n        uint256 bigPaid = insurance.sub(nodePaid);\r\n\r\n        insurance = 0;\r\n\r\n        // Issued to richman\r\n        uint256 _richmanLen = EnumerableSet.length(richman);\r\n        if (_richmanLen > 0) {\r\n            uint256 paid = bigPaid.div(_richmanLen);\r\n            for (uint256 i = 0; i < _richmanLen; i++) {\r\n                Account storage user = accounts[EnumerableSet.at(richman, i)];\r\n                user.reward = user.reward.add(paid);\r\n            }\r\n        }\r\n\r\n        // Issued to node\r\n        uint256[4] memory _rates = [\r\n            uint256(10),\r\n            uint256(20),\r\n            uint256(30),\r\n            uint256(40)\r\n        ];\r\n        for (uint8 i = 1; i <= 4; i++) {\r\n            uint256 _nodeLen = nodes[i].length;\r\n            if (_nodeLen > 0) {\r\n                uint256 paid = nodePaid.mul(_rates[i - 1]).div(100).div(\r\n                    _nodeLen\r\n                );\r\n                for (uint256 j = 0; j < _nodeLen; j++) {\r\n                    Account storage user = accounts[nodes[i][j]];\r\n                    user.reward = user.reward.add(paid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer to the perpetual pool, only the administrator can call\r\n     */\r\n    function activeSustainable(address next) public onlyOwner {\r\n        require(sustainable > 0);\r\n        uint256 paid = sustainable;\r\n        uint256 bal = usdt.balanceOf(address(this));\r\n        if (bal < paid) {\r\n            usdt.transfer(next, bal);\r\n        } else {\r\n            usdt.transfer(next, paid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set static rate of return, only the administrator can call\r\n     */\r\n    function setStaticRate(uint256 _rate) public onlyOwner {\r\n        require(_rate <= 1000);\r\n        staticRate = _rate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set dynamic rate of return, only the administrator can call\r\n     */\r\n    function setDynamicRates(uint8 level, uint256 _rate) public onlyOwner {\r\n        require(level < 12);\r\n        require(_rate <= 1000);\r\n        dynamicRates[level] = _rate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set up the ticket contract, only the administrator can call\r\n     */\r\n    function setTicket(ITicketsToken _ticket) public onlyOwner {\r\n        ticket = _ticket;\r\n    }\r\n\r\n    /**\r\n     * @dev Receive the technical founding team, only the administrator can call\r\n     */\r\n    function takeFounder() public onlyOwner {\r\n        uint256 paid = founder;\r\n        founder = 0;\r\n        usdt.transfer(msg.sender, paid);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive expansion operation fee, only the administrator can call\r\n     */\r\n    function takeOperation() public onlyOwner {\r\n        uint256 paid = operation.add(dex);\r\n        operation = 0;\r\n        dex = 0;\r\n        usdt.transfer(msg.sender, paid);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reinvest\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"nodeLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayPoolIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekPoolIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateNodeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateNodeBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"activeSustainable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burns\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateStaticIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"dayPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayPoolId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_rank\",\"type\":\"uint8\"}],\"name\":\"dayPoolRank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"dayPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeBurnNumber\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"nodeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"performances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wholeLine\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"richmanLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setDynamicRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setStaticRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITicketsToken\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takePoolIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"teamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"teamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"teamsStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerOpenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"weekPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekPoolId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_rank\",\"type\":\"uint8\"}],\"name\":\"weekPoolRank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"weekPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MasterGame","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d79e77a71b799b806917a959c97c58a7021141bbc401ba91fc621ee83ebad42f"}]}