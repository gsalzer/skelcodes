{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.4;\r\n\r\n\r\n/**\r\n * @dev Interface of UniswapV2Router02, two functions only.\r\n */\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n/**\r\n * @dev Ether2USDT, provide only `ether2usd` function to get the ether price in USD.\r\n */\r\ncontract Ether2USDT {\r\n    IUniswapV2Router02 private immutable UniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    address private _token = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT mainnet\r\n\r\n    function ether2usd()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return UniswapV2Router02.getAmountsOut(1 ether, _path4ether2usd())[1];\r\n    }\r\n\r\n    function _path4ether2usd()\r\n        private\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = UniswapV2Router02.WETH();\r\n        path[1] = _token;\r\n\r\n        return path;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"ether2usd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ether2USDT","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa3832b0dce01b81fe02f9363c5146695a31ff3741d02d4a234dae89353071aa"}]}