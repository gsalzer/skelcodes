{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICommittee.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Committee contract interface\r\ninterface ICommittee {\r\n\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\r\n\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\r\n\r\n\t// No external functions\r\n\r\n\t/*\r\n     * External functions\r\n     */\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a weight change of certification change of a member\r\n\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a a member removal for example due to voteOut / voteUnready\r\n\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified)/* onlyElectionContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\r\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Checks if addMember() would add a the member to the committee\r\n\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Returns the committee members and their weights\r\n\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\r\n\r\n\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalStake);\r\n\r\n\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\r\n\r\n\tfunction emitCommitteeSnapshot() external;\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\r\n\r\n\tfunction setMaxCommitteeSize(uint8 maxCommitteeSize) external /* onlyFunctionalManager onlyWhenActive */;\r\n\r\n\tfunction getMaxCommitteeSize() external view returns (uint8);\r\n\r\n\tfunction importMembers(ICommittee previousCommitteeContract) external /* onlyInitializationAdmin */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\r\n\tevent ManagerChanged(string role, address newManager);\r\n\tevent ContractRegistryUpdated(address newContractRegistry);\r\n\r\n\t/*\r\n\t* External functions\r\n\t*/\r\n\r\n\t/// @dev updates the contracts address and emits a corresponding event\r\n\t/// managedContract indicates whether the contract is managed by the registry and notified on changes\r\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdmin */;\r\n\r\n\t/// @dev returns the current address of the given contracts\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n\r\n\t/// @dev returns the list of contract addresses managed by the registry\r\n\tfunction getManagedContracts() external view returns (address[] memory);\r\n\r\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\r\n\r\n\tfunction getManager(string calldata role) external view returns (address);\r\n\r\n\tfunction lockContracts() external /* onlyAdmin */;\r\n\r\n\tfunction unlockContracts() external /* onlyAdmin */;\r\n\r\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n\tfunction getPreviousContractRegistry() external view returns (address);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableRegistryManagement.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableRegistryManagement is Context {\r\n    address private _registryAdmin;\r\n    address private _pendingRegistryAdmin;\r\n\r\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _registryAdmin = msgSender;\r\n        emit RegistryManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current registryAdmin.\r\n     */\r\n    function registryAdmin() public view returns (address) {\r\n        return _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the registryAdmin.\r\n     */\r\n    modifier onlyRegistryAdmin() {\r\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current registryAdmin.\r\n     */\r\n    function isRegistryAdmin() public view returns (bool) {\r\n        return _msgSender() == _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\r\n     *\r\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\r\n     * thereby removing any functionality that is only available to the registryAdmin.\r\n     */\r\n    function renounceRegistryManagement() public onlyRegistryAdmin {\r\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\r\n        _registryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\r\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\r\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\r\n        _registryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingManager.\r\n     */\r\n    modifier onlyPendingRegistryAdmin() {\r\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current registryAdmin to set the pendingManager address.\r\n     * @param newRegistryAdmin The address to transfer registryManagement to.\r\n     */\r\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\r\n        _pendingRegistryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\r\n     */\r\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\r\n        _transferRegistryManagement(_pendingRegistryAdmin);\r\n        _pendingRegistryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current pendingRegistryAdmin\r\n    */\r\n    function pendingRegistryAdmin() public view returns (address) {\r\n       return _pendingRegistryAdmin;  \r\n    }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Initializable {\r\n\r\n    address private _initializationAdmin;\r\n\r\n    event InitializationComplete();\r\n\r\n    constructor() public{\r\n        _initializationAdmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyInitializationAdmin() {\r\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    function initializationAdmin() public view returns (address) {\r\n        return _initializationAdmin;\r\n    }\r\n\r\n    function initializationComplete() external onlyInitializationAdmin {\r\n        _initializationAdmin = address(0);\r\n        emit InitializationComplete();\r\n    }\r\n\r\n    function isInitializationComplete() public view returns (bool) {\r\n        return _initializationAdmin == address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is WithClaimableRegistryManagement, Initializable {\r\n\r\n    IContractRegistry private contractRegistry;\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\r\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\r\n        setContractRegistry(_contractRegistry);\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\r\n\r\n        _;\r\n    }\r\n\r\n    function isManager(string memory role) internal view returns (bool) {\r\n        IContractRegistry _contractRegistry = contractRegistry;\r\n        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\r\n    }\r\n\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == registryAdmin() || msg.sender == initializationAdmin() || msg.sender == address(contractRegistry);\r\n    }\r\n\r\n    function getProtocolContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"protocol\");\r\n    }\r\n\r\n    function getStakingRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewards\");\r\n    }\r\n\r\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\r\n    }\r\n\r\n    function getCommitteeContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"committee\");\r\n    }\r\n\r\n    function getElectionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"elections\");\r\n    }\r\n\r\n    function getDelegationsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"delegations\");\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"guardiansRegistration\");\r\n    }\r\n\r\n    function getCertificationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certification\");\r\n    }\r\n\r\n    function getStakingContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"staking\");\r\n    }\r\n\r\n    function getSubscriptionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"subscriptions\");\r\n    }\r\n\r\n    function getStakingRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\r\n    }\r\n\r\n    function getGeneralFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"generalFeesWallet\");\r\n    }\r\n\r\n    function getCertifiedFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\r\n    }\r\n\r\n    function getStakingContractHandler() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingContractHandler\");\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    function setContractRegistry(IContractRegistry newContractRegistry) public onlyAdmin {\r\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\r\n        contractRegistry = newContractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\r\n    }\r\n\r\n    function getContractRegistry() public view returns (IContractRegistry) {\r\n        return contractRegistry;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ILockable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ILockable {\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    function lock() external /* onlyLockOwner */;\r\n    function unlock() external /* onlyLockOwner */;\r\n    function isLocked() view external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract Lockable is ILockable, ContractRegistryAccessor {\r\n\r\n    bool public locked;\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\r\n\r\n    modifier onlyLockOwner() {\r\n        require(msg.sender == registryAdmin() || msg.sender == address(getContractRegistry()), \"caller is not a lock owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    function lock() external override onlyLockOwner {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    function unlock() external override onlyLockOwner {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    function isLocked() external override view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ManagedContract.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract ManagedContract is Lockable {\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\r\n\r\n    modifier onlyMigrationManager {\r\n        require(isManager(\"migrationManager\"), \"sender is not the migration manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunctionalManager {\r\n        require(isManager(\"functionalManager\"), \"sender is not the functional manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    function refreshContracts() virtual external {}\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IStakingRewards.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Staking rewards contract interface\r\ninterface IStakingRewards {\r\n\r\n    event DelegatorStakingRewardsAssigned(address indexed delegator, uint256 amount, uint256 totalAwarded, address guardian, uint256 delegatorRewardsPerToken);\r\n    event GuardianStakingRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, uint256 delegatorRewardsPerToken, uint256 stakingRewardsPerWeight);\r\n    event StakingRewardsClaimed(address indexed addr, uint256 claimedDelegatorRewards, uint256 claimedGuardianRewards, uint256 totalClaimedDelegatorRewards, uint256 totalClaimedGuardianRewards);\r\n    event StakingRewardsAllocated(uint256 allocatedRewards, uint256 stakingRewardsPerWeight);\r\n    event GuardianDelegatorsStakingRewardsPercentMilleUpdated(address indexed guardian, uint256 delegatorsStakingRewardsPercentMille);\r\n\r\n    /*\r\n     * External functions\r\n     */\r\n\r\n    /// @dev Returns the currently unclaimed orbs token reward balance of the given address.\r\n    function getStakingRewardsBalance(address addr) external view returns (uint256 guardianStakingRewardsBalance, uint256 delegatorStakingRewardsBalance);\r\n\r\n    /// @dev Allows Guardian to set a different delegator staking reward cut than the default\r\n    /// delegatorRewardsPercentMille accepts values between 0 - maxDelegatorsStakingRewardsPercentMille\r\n    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external;\r\n\r\n    /// @dev Returns the guardian's delegatorRewardsPercentMille\r\n    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external view returns (uint256 delegatorRewardsRatioPercentMille);\r\n\r\n    /// @dev Claims the staking rewards balance of addr by staking\r\n    function claimStakingRewards(address addr) external;\r\n\r\n    /// @dev Returns the amount of ORBS tokens in the staking wallet that were allocated\r\n    /// but not yet claimed. The staking wallet balance must always larger than the allocated value.\r\n    function getStakingRewardsWalletAllocatedTokens() external view returns (uint256 allocated);\r\n\r\n    function getGuardianStakingRewardsData(address guardian) external view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        uint256 delegatorRewardsPerToken,\r\n        uint256 lastStakingRewardsPerWeight\r\n    );\r\n\r\n    function getDelegatorStakingRewardsData(address delegator) external view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        uint256 lastDelegatorRewardsPerToken\r\n    );\r\n\r\n    function estimateFutureRewards(address addr, uint256 duration) external view returns (\r\n        uint256 estimatedDelegatorStakingRewards,\r\n        uint256 estimatedGuardianStakingRewards\r\n    );\r\n\r\n    function getStakingRewardsState() external view returns (\r\n        uint96 stakingRewardsPerWeight,\r\n        uint96 unclaimedStakingRewards\r\n    );\r\n\r\n    function getCurrentStakingRewardsRatePercentMille() external view returns (uint256);\r\n\r\n    /// @dev called by the Committee contract upon expected change in the committee membership of the guardian\r\n    /// Triggers update of the member rewards\r\n    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external /* onlyCommitteeContract */;\r\n\r\n    /// @dev called by the Delegation contract upon expected change in a committee member delegator stake\r\n    /// Triggers update of the delegator and guardian staking rewards\r\n    function delegationWillChange(address guardian, uint256 delegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external /* onlyDelegationsContract */;\r\n\r\n    /*\r\n     * Governance functions\r\n     */\r\n\r\n    event AnnualStakingRewardsRateChanged(uint256 annualRateInPercentMille, uint256 annualCap);\r\n    event DefaultDelegatorsStakingRewardsChanged(uint32 defaultDelegatorsStakingRewardsPercentMille);\r\n    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\r\n    event RewardDistributionActivated(uint256 startTime);\r\n    event RewardDistributionDeactivated();\r\n    event StakingRewardsBalanceMigrated(address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards, address toRewardsContract);\r\n    event StakingRewardsBalanceMigrationAccepted(address from, address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards);\r\n    event EmergencyWithdrawal(address addr, address token);\r\n\r\n    /// @dev activates reward distribution, all rewards will be distributed up\r\n    /// assuming the last assignment was on startTime (the time the old contarct was deactivated)\r\n    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\r\n\r\n    /// @dev deactivates reward distribution, all rewards will be distributed up\r\n    /// deactivate moment.\r\n    function deactivateRewardDistribution() external /* onlyMigrationManager */;\r\n\r\n    /// @dev Sets the default cut of the delegators staking reward.\r\n    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager onlyWhenActive */;\r\n\r\n    function getDefaultDelegatorsStakingRewardsPercentMille() external view returns (uint32);\r\n\r\n    /// @dev Sets the maximum cut of the delegators staking reward.\r\n    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager onlyWhenActive */;\r\n\r\n    function getMaxDelegatorsStakingRewardsPercentMille() external view returns (uint32);\r\n\r\n    /// @dev Sets a new annual rate and cap for the staking reward.\r\n    function setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) external /* onlyFunctionalManager */;\r\n\r\n    function getAnnualStakingRewardsRatePercentMille() external view returns (uint32);\r\n\r\n    function getAnnualStakingRewardsCap() external view returns (uint256);\r\n\r\n    function isRewardAllocationActive() external view returns (bool);\r\n\r\n    /// @dev Returns the contract's settings\r\n    function getSettings() external view returns (\r\n        uint annualStakingRewardsCap,\r\n        uint32 annualStakingRewardsRatePercentMille,\r\n        uint32 defaultDelegatorsStakingRewardsPercentMille,\r\n        uint32 maxDelegatorsStakingRewardsPercentMille,\r\n        bool rewardAllocationActive\r\n    );\r\n\r\n    /// @dev migrates the staking rewards balance of the guardian to the rewards contract as set in the registry.\r\n    function migrateRewardsBalance(address guardian) external;\r\n\r\n    /// @dev accepts guardian's balance migration from a previous rewards contarct.\r\n    function acceptRewardsBalanceMigration(address guardian, uint256 guardianStakingRewards, uint256 delegatorStakingRewards) external;\r\n\r\n    /// @dev emergency withdrawal of the rewards contract balances, may eb called only by the EmergencyManager. \r\n    function emergencyWithdraw(address token) external /* onlyMigrationManager */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IFeesAndBootstrapRewards.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Rewards contract interface\r\ninterface IFeesAndBootstrapRewards {\r\n    event FeesAllocated(uint256 allocatedGeneralFees, uint256 generalFeesPerMember, uint256 allocatedCertifiedFees, uint256 certifiedFeesPerMember);\r\n    event FeesAssigned(address indexed guardian, uint256 amount);\r\n    event FeesWithdrawn(address indexed guardian, uint256 amount);\r\n    event BootstrapRewardsAllocated(uint256 allocatedGeneralBootstrapRewards, uint256 generalBootstrapRewardsPerMember, uint256 allocatedCertifiedBootstrapRewards, uint256 certifiedBootstrapRewardsPerMember);\r\n    event BootstrapRewardsAssigned(address indexed guardian, uint256 amount);\r\n    event BootstrapRewardsWithdrawn(address indexed guardian, uint256 amount);\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// @dev called by the Committee contract upon expected change in the committee membership of the guardian\r\n    /// Triggers update of the member rewards\r\n    function committeeMembershipWillChange(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) external /* onlyCommitteeContract */;\r\n\r\n    function getFeesAndBootstrapBalance(address guardian) external view returns (\r\n        uint256 feeBalance,\r\n        uint256 bootstrapBalance\r\n    );\r\n\r\n    function estimateFutureFeesAndBootstrapRewards(address guardian, uint256 duration) external view returns (\r\n        uint256 estimatedFees,\r\n        uint256 estimatedBootstrapRewards\r\n    );\r\n\r\n    /// @dev Transfer all of msg.sender's outstanding balance to their account\r\n    function withdrawFees(address guardian) external;\r\n\r\n    /// @dev Transfer all of msg.sender's outstanding balance to their account\r\n    function withdrawBootstrapFunds(address guardian) external;\r\n\r\n    /// @dev Returns the global Fees and Bootstrap rewards state \r\n    function getFeesAndBootstrapState() external view returns (\r\n        uint256 certifiedFeesPerMember,\r\n        uint256 generalFeesPerMember,\r\n        uint256 certifiedBootstrapPerMember,\r\n        uint256 generalBootstrapPerMember,\r\n        uint256 lastAssigned\r\n    );\r\n\r\n    function getFeesAndBootstrapData(address guardian) external view returns (\r\n        uint256 feeBalance,\r\n        uint256 lastFeesPerMember,\r\n        uint256 bootstrapBalance,\r\n        uint256 lastBootstrapPerMember\r\n    );\r\n\r\n    /*\r\n     * Governance\r\n     */\r\n\r\n    event GeneralCommitteeAnnualBootstrapChanged(uint256 generalCommitteeAnnualBootstrap);\r\n    event CertifiedCommitteeAnnualBootstrapChanged(uint256 certifiedCommitteeAnnualBootstrap);\r\n    event RewardDistributionActivated(uint256 startTime);\r\n    event RewardDistributionDeactivated();\r\n    event FeesAndBootstrapRewardsBalanceMigrated(address indexed guardian, uint256 fees, uint256 bootstrapRewards, address toRewardsContract);\r\n    event FeesAndBootstrapRewardsBalanceMigrationAccepted(address from, address indexed guardian, uint256 fees, uint256 bootstrapRewards);\r\n    event EmergencyWithdrawal(address addr, address token);\r\n\r\n    /// @dev deactivates reward distribution, all rewards will be distributed up\r\n    /// deactivate moment.\r\n    function deactivateRewardDistribution() external /* onlyMigrationManager */;\r\n\r\n    /// @dev activates reward distribution, all rewards will be distributed up\r\n    /// assuming the last assignment was on startTime (the time the old contarct was deactivated)\r\n    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\r\n\r\n    /// @dev Returns the contract's settings\r\n    function getSettings() external view returns (\r\n        uint generalCommitteeAnnualBootstrap,\r\n        uint certifiedCommitteeAnnualBootstrap,\r\n        bool rewardAllocationActive\r\n    );\r\n\r\n    function getGeneralCommitteeAnnualBootstrap() external view returns (uint256);\r\n\r\n    /// @dev Assigns rewards and sets a new monthly rate for the geenral commitee bootstrap.\r\n    function setGeneralCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalManager */;\r\n\r\n    function getCertifiedCommitteeAnnualBootstrap() external view returns (uint256);\r\n\r\n    /// @dev Assigns rewards and sets a new monthly rate for the certification commitee bootstrap.\r\n    function setCertifiedCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalManager */;\r\n\r\n    function isRewardAllocationActive() external view returns (bool);\r\n\r\n    /// @dev migrates the staking rewards balance of the guardian to the rewards contract as set in the registry.\r\n    function migrateRewardsBalance(address guardian) external;\r\n\r\n    /// @dev accepts guardian's balance migration from a previous rewards contarct.\r\n    function acceptRewardsBalanceMigration(address guardian, uint256 fees, uint256 bootstrapRewards) external;\r\n\r\n    /// @dev emergency withdrawal of the rewards contract balances, may eb called only by the EmergencyManager. \r\n    function emergencyWithdraw(address token) external; /* onlyMigrationManager */\r\n}\r\n\r\n// File: contracts/Committee.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Committee is ICommittee, ManagedContract {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMath for uint96;\r\n\r\n\tuint96 constant CERTIFICATION_MASK = 1 << 95;\r\n\tuint96 constant WEIGHT_MASK = ~CERTIFICATION_MASK;\r\n\r\n\tstruct CommitteeMember {\r\n\t\taddress addr;\r\n\t\tuint96 weightAndCertifiedBit;\r\n\t}\r\n\tCommitteeMember[] committee;\r\n\r\n\tstruct MemberStatus {\r\n\t\tuint32 pos;\r\n\t\tbool inCommittee;\r\n\t}\r\n\tmapping(address => MemberStatus) public membersStatus;\r\n\r\n\tstruct CommitteeStats {\r\n\t\tuint96 totalWeight;\r\n\t\tuint32 generalCommitteeSize;\r\n\t\tuint32 certifiedCommitteeSize;\r\n\t}\r\n\tCommitteeStats committeeStats;\r\n\r\n\tuint8 maxCommitteeSize;\r\n\r\n\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin, uint8 _maxCommitteeSize) ManagedContract(_contractRegistry, _registryAdmin) public {\r\n\t\tsetMaxCommitteeSize(_maxCommitteeSize);\r\n\t}\r\n\r\n\tmodifier onlyElectionsContract() {\r\n\t\trequire(msg.sender == electionsContract, \"caller is not the elections\");\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t * External functions\r\n\t */\r\n\r\n\tfunction memberWeightChange(address addr, uint256 weight) external override onlyElectionsContract onlyWhenActive {\r\n\t\tMemberStatus memory status = membersStatus[addr];\r\n\r\n\t\tif (!status.inCommittee) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tCommitteeMember memory member = committee[status.pos];\r\n\t\t(uint prevWeight, bool isCertified) = getWeightCertification(member);\r\n\r\n\t\tcommitteeStats.totalWeight = uint96(committeeStats.totalWeight.sub(prevWeight).add(weight));\r\n\r\n\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\r\n\t\temit CommitteeChange(addr, weight, isCertified, true);\r\n\t}\r\n\r\n\tfunction memberCertificationChange(address addr, bool isCertified) external override onlyElectionsContract onlyWhenActive {\r\n\t\tMemberStatus memory status = membersStatus[addr];\r\n\r\n\t\tif (!status.inCommittee) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tCommitteeMember memory member = committee[status.pos];\r\n\t\t(uint weight, bool prevCertification) = getWeightCertification(member);\r\n\r\n\t\tCommitteeStats memory _committeeStats = committeeStats;\r\n\r\n\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, true, prevCertification, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\r\n\r\n\t\tcommitteeStats.certifiedCommitteeSize = _committeeStats.certifiedCommitteeSize - (prevCertification ? 1 : 0) + (isCertified ? 1 : 0);\r\n\r\n\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\r\n\t\temit CommitteeChange(addr, weight, isCertified, true);\r\n\t}\r\n\r\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external override onlyElectionsContract onlyWhenActive returns (bool memberAdded) {\r\n\t\treturn _addMember(addr, weight, isCertified, true);\r\n\t}\r\n\r\n\tfunction checkAddMember(address addr, uint256 weight) external view override returns (bool wouldAddMember) {\r\n\t\tif (membersStatus[addr].inCommittee) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t(bool qualified, ) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\r\n\t\treturn qualified;\r\n\t}\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a a member removal for example due to voteOut / voteUnready\r\n\tfunction removeMember(address addr) external override onlyElectionsContract onlyWhenActive returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified) {\r\n\t\tMemberStatus memory status = membersStatus[addr];\r\n\t\tif (!status.inCommittee) {\r\n\t\t\treturn (false, 0, false);\r\n\t\t}\r\n\r\n\t\tmemberRemoved = true;\r\n\t\t(removedMemberWeight, removedMemberCertified) = getWeightCertification(committee[status.pos]);\r\n\r\n\t\tcommitteeStats = removeMemberAtPos(status.pos, true, committeeStats);\r\n\t}\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Returns the committee members and their weights\r\n\tfunction getCommittee() external override view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\r\n\t\treturn _getCommittee();\r\n\t}\r\n\r\n\tfunction emitCommitteeSnapshot() external override {\r\n\t\t(address[] memory addrs, uint256[] memory weights, bool[] memory certification) = _getCommittee();\r\n\t\tfor (uint i = 0; i < addrs.length; i++) {\r\n\t\t\temit CommitteeChange(addrs[i], weights[i], certification[i], true);\r\n\t\t}\r\n\t\temit CommitteeSnapshot(addrs, weights, certification);\r\n\t}\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tfunction setMaxCommitteeSize(uint8 _maxCommitteeSize) public override onlyFunctionalManager {\r\n\t\tuint8 prevMaxCommitteeSize = maxCommitteeSize;\r\n\t\tmaxCommitteeSize = _maxCommitteeSize;\r\n\r\n\t\twhile (committee.length > _maxCommitteeSize) {\r\n\t\t\t(, ,uint pos) = _getMinCommitteeMember();\r\n\t\t\tcommitteeStats = removeMemberAtPos(pos, true, committeeStats);\r\n\t\t}\r\n\r\n\t\temit MaxCommitteeSizeChanged(_maxCommitteeSize, prevMaxCommitteeSize);\r\n\t}\r\n\r\n\tfunction getMaxCommitteeSize() external override view returns (uint8) {\r\n\t\treturn maxCommitteeSize;\r\n\t}\r\n\r\n\tfunction getCommitteeStats() external override view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight) {\r\n\t\tCommitteeStats memory _committeeStats = committeeStats;\r\n\t\treturn (_committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize, _committeeStats.totalWeight);\r\n\t}\r\n\r\n\tfunction getMemberInfo(address addr) external override view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight) {\r\n\t\tMemberStatus memory status = membersStatus[addr];\r\n\t\tinCommittee = status.inCommittee;\r\n\t\tif (inCommittee) {\r\n\t\t\t(weight, isCertified) = getWeightCertification(committee[status.pos]);\r\n\t\t}\r\n\t\ttotalCommitteeWeight = committeeStats.totalWeight;\r\n\t}\r\n\r\n\tfunction importMembers(ICommittee previousCommitteeContract) external override onlyInitializationAdmin {\r\n\t\t(address[] memory addrs, uint256[] memory weights, bool[] memory certification) = previousCommitteeContract.getCommittee();\r\n\t\tfor (uint i = 0; i < addrs.length; i++) {\r\n\t\t\t_addMember(addrs[i], weights[i], certification[i], false);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Private\r\n\t */\r\n\r\n\tfunction _addMember(address addr, uint256 weight, bool isCertified, bool notifyRewards) private returns (bool memberAdded) {\r\n\t\tMemberStatus memory status = membersStatus[addr];\r\n\r\n\t\tif (status.inCommittee) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t(bool qualified, uint entryPos) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\r\n\t\tif (!qualified) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tmemberAdded = true;\r\n\r\n\t\tCommitteeStats memory _committeeStats = committeeStats;\r\n\r\n\t\tif (notifyRewards) {\r\n\t\t\tstakingRewardsContract.committeeMembershipWillChange(addr, weight, _committeeStats.totalWeight, false, true);\r\n\t\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, false, isCertified, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\r\n\t\t}\r\n\r\n\t\t_committeeStats.generalCommitteeSize++;\r\n\t\tif (isCertified) _committeeStats.certifiedCommitteeSize++;\r\n\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.add(weight));\r\n\r\n\t\tCommitteeMember memory newMember = CommitteeMember({\r\n\t\t\taddr: addr,\r\n\t\t\tweightAndCertifiedBit: packWeightCertification(weight, isCertified)\r\n\t\t\t});\r\n\r\n\t\tif (entryPos < committee.length) {\r\n\t\t\tCommitteeMember memory removed = committee[entryPos];\r\n\t\t\tunpackWeightCertification(removed.weightAndCertifiedBit);\r\n\r\n\t\t\t_committeeStats = removeMemberAtPos(entryPos, false, _committeeStats);\r\n\t\t\tcommittee[entryPos] = newMember;\r\n\t\t} else {\r\n\t\t\tcommittee.push(newMember);\r\n\t\t}\r\n\r\n\t\tstatus.inCommittee = true;\r\n\t\tstatus.pos = uint32(entryPos);\r\n\t\tmembersStatus[addr] = status;\r\n\r\n\t\tcommitteeStats = _committeeStats;\r\n\r\n\t\temit CommitteeChange(addr, weight, isCertified, true);\r\n\t}\r\n\r\n\tfunction packWeightCertification(uint256 weight, bool certification) private pure returns (uint96 weightAndCertified) {\r\n\t\treturn uint96(weight) | (certification ? CERTIFICATION_MASK : 0);\r\n\t}\r\n\r\n\tfunction unpackWeightCertification(uint96 weightAndCertifiedBit) private pure returns (uint256 weight, bool certification) {\r\n\t\treturn (uint256(weightAndCertifiedBit & WEIGHT_MASK), weightAndCertifiedBit & CERTIFICATION_MASK != 0);\r\n\t}\r\n\r\n\tfunction getWeightCertification(CommitteeMember memory member) private pure returns (uint256 weight, bool certification) {\r\n\t\treturn unpackWeightCertification(member.weightAndCertifiedBit);\r\n\t}\r\n\r\n\tfunction _getCommittee() private view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\r\n\t\tCommitteeMember[] memory _committee = committee;\r\n\t\taddrs = new address[](_committee.length);\r\n\t\tweights = new uint[](_committee.length);\r\n\t\tcertification = new bool[](_committee.length);\r\n\r\n\t\tfor (uint i = 0; i < _committee.length; i++) {\r\n\t\t\taddrs[i] = _committee[i].addr;\r\n\t\t\t(weights[i], certification[i]) = getWeightCertification(_committee[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getMinCommitteeMember() private view returns (\r\n\t\taddress minMemberAddress,\r\n\t\tuint256 minMemberWeight,\r\n\t\tuint minMemberPos\r\n\t){\r\n\t\tCommitteeMember[] memory _committee = committee;\r\n\t\tminMemberPos = uint256(-1);\r\n\t\tminMemberWeight = uint256(-1);\r\n\t\tuint256 memberWeight;\r\n\t\taddress memberAddress;\r\n\t\tfor (uint i = 0; i < _committee.length; i++) {\r\n\t\t\tmemberAddress = _committee[i].addr;\r\n\t\t\t(memberWeight,) = getWeightCertification(_committee[i]);\r\n\t\t\tif (memberWeight < minMemberWeight || memberWeight == minMemberWeight && memberAddress < minMemberAddress) {\r\n\t\t\t\tminMemberPos = i;\r\n\t\t\t\tminMemberWeight = memberWeight;\r\n\t\t\t\tminMemberAddress = memberAddress;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction qualifiesToEnterCommittee(address addr, uint256 weight, uint8 _maxCommitteeSize) private view returns (bool qualified, uint entryPos) {\r\n\t\tuint committeeLength = committee.length;\r\n\t\tif (committeeLength < _maxCommitteeSize) {\r\n\t\t\treturn (true, committeeLength);\r\n\t\t}\r\n\r\n\t\t(address minMemberAddress, uint256 minMemberWeight, uint minMemberPos) = _getMinCommitteeMember();\r\n\r\n\t\tif (weight > minMemberWeight || weight == minMemberWeight && addr > minMemberAddress) {\r\n\t\t\treturn (true, minMemberPos);\r\n\t\t}\r\n\r\n\t\treturn (false, 0);\r\n\t}\r\n\r\n\tfunction removeMemberAtPos(uint pos, bool clearFromList, CommitteeStats memory _committeeStats) private returns (CommitteeStats memory newCommitteeStats){\r\n\t\tCommitteeMember memory member = committee[pos];\r\n\r\n\t\t(uint weight, bool certification) = getWeightCertification(member);\r\n\r\n\t\tstakingRewardsContract.committeeMembershipWillChange(member.addr, weight, _committeeStats.totalWeight, true, false);\r\n\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(member.addr, true, certification, certification, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\r\n\r\n\t\tdelete membersStatus[member.addr];\r\n\r\n\t\t_committeeStats.generalCommitteeSize--;\r\n\t\tif (certification) _committeeStats.certifiedCommitteeSize--;\r\n\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.sub(weight));\r\n\r\n\t\temit CommitteeChange(member.addr, weight, certification, false);\r\n\r\n\t\tif (clearFromList) {\r\n\t\t\tuint committeeLength = committee.length;\r\n\t\t\tif (pos < committeeLength - 1) {\r\n\t\t\t\tCommitteeMember memory last = committee[committeeLength - 1];\r\n\t\t\t\tcommittee[pos] = last;\r\n\t\t\t\tmembersStatus[last.addr].pos = uint32(pos);\r\n\t\t\t}\r\n\t\t\tcommittee.pop();\r\n\t\t}\r\n\r\n\t\treturn _committeeStats;\r\n\t}\r\n\r\n\t/*\r\n     * Contracts topology / registry interface\r\n     */\r\n\r\n\taddress electionsContract;\r\n\tIStakingRewards stakingRewardsContract;\r\n\tIFeesAndBootstrapRewards feesAndBootstrapRewardsContract;\r\n\tfunction refreshContracts() external override {\r\n\t\telectionsContract = getElectionsContract();\r\n\t\tstakingRewardsContract = IStakingRewards(getStakingRewardsContract());\r\n\t\tfeesAndBootstrapRewardsContract = IFeesAndBootstrapRewards(getFeesAndBootstrapRewardsContract());\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_maxCommitteeSize\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"certification\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inCommittee\",\"type\":\"bool\"}],\"name\":\"CommitteeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"certification\",\"type\":\"bool[]\"}],\"name\":\"CommitteeSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldValue\",\"type\":\"uint8\"}],\"name\":\"MaxCommitteeSizeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"RegistryManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"addMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberAdded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"checkAddMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wouldAddMember\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitCommitteeSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"certification\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"generalCommitteeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"certifiedCommitteeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMemberInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inCommittee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitteeWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommittee\",\"name\":\"previousCommitteeContract\",\"type\":\"address\"}],\"name\":\"importMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"memberCertificationChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"memberWeightChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersStatus\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"inCommittee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRegistryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberRemoved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removedMemberWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"removedMemberCertified\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"newContractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxCommitteeSize\",\"type\":\"uint8\"}],\"name\":\"setMaxCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"transferRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Committee","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000005454223e3078db87e55a15be541cc925f3702eb0000000000000000000000000628e8c4d1611ed5b748f59f5ce694809af2f91d40000000000000000000000000000000000000000000000000000000000000016","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c6d17412c9eb7c168bb9b92ae79bf80ef7475f2584d7ac66474b9b249752e1a"}]}