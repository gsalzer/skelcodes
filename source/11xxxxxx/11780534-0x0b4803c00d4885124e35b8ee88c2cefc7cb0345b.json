{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// pragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IStaking.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IStaking {\r\n    function incomeRateChanged() external;\r\n    function rewardRateChanged() external;\r\n    function hashRateToken() external view returns(address);\r\n    function totalSupply() external view returns(uint256);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IMineParam.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IMineParam {\r\n    function minePrice() external view returns (uint256);\r\n    function getMinePrice() external view returns (uint256);\r\n    function mineIncomePerTPerSecInWei() external view returns(uint256);\r\n    function incomePerTPerSecInWei() external view returns(uint256);\r\n    function setIncomePerTPerSecInWeiAndUpdateMinePrice(uint256 _incomePerTPerSecInWei) external;\r\n    function updateMinePrice() external;\r\n    function paramSetter() external view returns(address);\r\n    function addListener(address _listener) external;\r\n    function removeListener(address _listener) external returns(bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ILpStaking.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface ILpStaking {\r\n    function stakingLpToken() external view returns (address);\r\n    function totalSupply() external view returns(uint256);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ITokenTreasury.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface ITokenTreasury {\r\n    function claim(address _token, uint _amount) external;\r\n}\r\n\r\n// Dependency file: contracts/modules/Pausable.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ncontract Pausable {\r\n\r\n    event Paused();\r\n\r\n    event Unpaused();\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function _pause() internal {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function _unpause() internal {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/modules/POWERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import 'contracts/modules/Pausable.sol';\r\n\r\ncontract POWERC20 is Pausable{\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function initializeToken(string memory tokenName, string memory tokenSymbol) internal {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external whenNotPaused returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) whenNotPaused external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'HashRateERC20: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'HashRateERC20: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Dependency file: contracts/modules/Paramable.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// import 'contracts/modules/Ownable.sol';\r\n\r\ncontract Paramable is Ownable {\r\n    address public paramSetter;\r\n\r\n    event ParamSetterChanged(address indexed previousSetter, address indexed newSetter);\r\n\r\n    constructor() public {\r\n        paramSetter = msg.sender;\r\n    }\r\n\r\n    modifier onlyParamSetter() {\r\n        require(msg.sender == owner || msg.sender == paramSetter, \"!paramSetter\");\r\n        _;\r\n    }\r\n\r\n    function setParamSetter(address _paramSetter) external onlyOwner {\r\n        require(_paramSetter != address(0), \"param setter is the zero address\");\r\n        emit ParamSetterChanged(paramSetter, _paramSetter);\r\n        paramSetter = _paramSetter;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC20Detail.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20Detail {\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ISwapPair.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface ISwapPair {\r\n    function totalSupply() external view returns(uint256);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\n// Root file: contracts/POWToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// import '/Users/tercel/work/bmining/bmining-protocol/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n// import '/Users/tercel/work/bmining/bmining-protocol/node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import 'contracts/interfaces/IStaking.sol';\r\n// import 'contracts/interfaces/IMineParam.sol';\r\n// import 'contracts/interfaces/ILpStaking.sol';\r\n// import 'contracts/interfaces/ITokenTreasury.sol';\r\n// import 'contracts/modules/POWERC20.sol';\r\n// import 'contracts/modules/Paramable.sol';\r\n// import \"contracts/interfaces/IERC20Detail.sol\";\r\n// import 'contracts/interfaces/ISwapPair.sol';\r\n\r\ncontract POWToken is Paramable, POWERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool internal initialized;\r\n    address public minter;\r\n    address public stakingPool;\r\n    address public mineParam;\r\n    address public treasury;\r\n\r\n    uint256 public elecPowerPerTHSec;\r\n    uint256 public startMiningTime;\r\n\r\n    uint256 public electricCharge;\r\n    uint256 public minerPoolFeeNumerator;\r\n    uint256 public depreciationNumerator;\r\n    uint256 public workingRateNumerator;\r\n    uint256 public workingHashRate;\r\n    uint256 public totalHashRate;\r\n    uint256 public workerNumLastUpdateTime;\r\n\r\n    address public incomeToken;\r\n    uint256 public incomeRate;\r\n    address public rewardsToken;\r\n    uint256 public rewardRate;\r\n    uint256 public rewardsDuration;\r\n    uint256 public rewardPeriodFinish;\r\n  \r\n    address[] public stakings;\r\n    mapping(address => uint256) public stakingRewardWeight;\r\n    uint256 public stakingRewardWeightTotal;\r\n    mapping(address => uint256) public lpStakingIncomeWeight;\r\n    uint256 public lpStakingIncomeWeightTotal;\r\n\r\n    mapping(address => uint256) public stakingType;  // 0: unknown, 1: normal erc20 token, 2: LP token\r\n\r\n    function initialize(string memory name, string memory symbol, address _stakingPool, address _lpStakingPool, address _lpStakingPool2, address _minter, address _mineParam, address _incomeToken, address _rewardsToken, address _treasury, uint256 _elecPowerPerTHSec, uint256 _electricCharge, uint256 _minerPoolFeeNumerator, uint256 _totalHashRate) public {\r\n        require(!initialized, \"Token already initialized\");\r\n        require(_minerPoolFeeNumerator < 1000000, \"nonlegal minerPoolFeeNumerator.\");\r\n\r\n        initialized = true;\r\n        initializeToken(name, symbol);\r\n\r\n        stakingPool = _stakingPool; // POWStaking address\r\n        _setStakingPool(stakingPool, 1);\r\n        _setStakingPool(_lpStakingPool, 2);\r\n        _setStakingPool(_lpStakingPool2, 2);\r\n\r\n        minter = _minter; // TokenExchange address\r\n        mineParam = _mineParam;\r\n        incomeToken = _incomeToken;\r\n        rewardsToken = _rewardsToken;\r\n        treasury = _treasury;\r\n        elecPowerPerTHSec = _elecPowerPerTHSec;\r\n        startMiningTime =  block.timestamp;\r\n        electricCharge = _electricCharge;\r\n        minerPoolFeeNumerator = _minerPoolFeeNumerator;\r\n        totalHashRate = _totalHashRate;\r\n\r\n        rewardsDuration = 30 days;\r\n        depreciationNumerator = 1000000;\r\n        workingHashRate = _totalHashRate;\r\n        workerNumLastUpdateTime = startMiningTime;\r\n\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function isStakingPool(address _pool) public view  returns (bool) {\r\n        return stakingType[_pool] != 0;\r\n    }\r\n\r\n    function setStakingPools(address[] calldata _pools, uint256[] calldata _values) external onlyOwner {\r\n        require(_pools.length == _values.length, 'invalid parameters');\r\n        for(uint256 i; i< _pools.length; i++) {\r\n            _setStakingPool(_pools[i], _values[i]);\r\n        }\r\n        updateStakingPoolsIncome();\r\n        updateStakingPoolsReward();\r\n    }\r\n\r\n    function setStakingPool(address _pool, uint256 _value) external onlyOwner {\r\n        _setStakingPool(_pool, _value);\r\n        updateStakingPoolsIncome();\r\n        updateStakingPoolsReward();\r\n    }\r\n\r\n    function _setStakingPool(address _pool, uint256 _value) internal {\r\n        if(_pool != address(0)) {\r\n            stakingType[_pool] = _value;\r\n            if(foundStaking(_pool) == false) {\r\n                stakings.push(_pool);\r\n            } \r\n        }\r\n    }\r\n\r\n    function foundStaking(address _pool) public view returns (bool) {\r\n        for(uint256 i; i< stakings.length; i++) {\r\n            if(stakings[i] == _pool) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function countStaking() public view  returns (uint256) {\r\n        return stakings.length;\r\n    }\r\n\r\n    function setStakingRewardWeights(address[] calldata _pools, uint256[] calldata _values) external onlyParamSetter {\r\n        require(_pools.length == _values.length, \"illegal parameters\");\r\n        updateStakingPoolsReward();\r\n        for(uint256 i; i<_pools.length; i++) {\r\n            _setStakingRewardWeight(_pools[i], _values[i]);\r\n        }\r\n    }\r\n\r\n    function setStakingRewardWeight(address _pool, uint256 _value) external onlyParamSetter {\r\n        updateStakingPoolsReward();\r\n        _setStakingRewardWeight(_pool, _value);\r\n    }\r\n\r\n    function _setStakingRewardWeight(address _pool, uint256 _value) internal {\r\n        require(isStakingPool(_pool), \"illegal pool\");\r\n        stakingRewardWeightTotal = stakingRewardWeightTotal.sub(stakingRewardWeight[_pool]).add(_value);\r\n        stakingRewardWeight[_pool] = _value;\r\n    }\r\n\r\n    function getStakingRewardRate(address _pool) public view returns(uint256) {\r\n        if(stakingRewardWeightTotal == 0) {\r\n            return 0;\r\n        }\r\n        return rewardRate.mul(stakingRewardWeight[_pool]).div(stakingRewardWeightTotal);\r\n    }\r\n\r\n    function setLpStakingIncomeWeights(address[] calldata _pools, uint256[] calldata _values) external onlyParamSetter {\r\n        require(_pools.length == _values.length, \"illegal parameters\");\r\n        updateStakingPoolsIncome();\r\n        for(uint256 i; i<_pools.length; i++) {\r\n            _setLpStakingIncomeWeight(_pools[i], _values[i]);\r\n        }\r\n    }\r\n\r\n    function setLpStakingIncomeWeight(address _pool, uint256 _value) external onlyParamSetter {\r\n        updateStakingPoolsIncome();\r\n        _setLpStakingIncomeWeight(_pool, _value);\r\n    }\r\n        \r\n    function _setLpStakingIncomeWeight(address _pool, uint256 _value) internal {\r\n        require(stakingType[_pool] == 2, \"illegal pool\");\r\n        lpStakingIncomeWeightTotal = lpStakingIncomeWeightTotal.sub(lpStakingIncomeWeight[_pool]).add(_value);\r\n        lpStakingIncomeWeight[_pool] = _value;\r\n    }\r\n\r\n    function getLpStakingSupply(address _pool) public view returns(uint256) {\r\n        if(totalSupply == 0 || stakingType[_pool] != 2 || lpStakingIncomeWeightTotal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 poolAmount;\r\n        uint256 windfallAmount;\r\n        {\r\n            uint256 stakingPoolSupply;\r\n            if (stakingPool != address(0)) {\r\n                stakingPoolSupply = IStaking(stakingPool).totalSupply();\r\n            }\r\n            uint256 poolsTotal;\r\n            uint256 unknown;\r\n            (poolAmount, poolsTotal) = getLpStakingsReserve(_pool);\r\n            if(totalSupply > stakingPoolSupply.add(poolsTotal)) {\r\n                unknown = totalSupply.sub(stakingPoolSupply).sub(poolsTotal);\r\n            }\r\n            windfallAmount = unknown.mul(lpStakingIncomeWeight[_pool]).div(lpStakingIncomeWeightTotal);\r\n        }\r\n       \r\n        return poolAmount.add(windfallAmount);\r\n    }\r\n\r\n    function getLpStakingsReserve(address _pool) public view returns (uint256, uint256) {\r\n        uint256 total;\r\n        uint256 amount;\r\n        for (uint256 i; i<stakings.length; i++) {\r\n            if(stakingType[stakings[i]] == 2) {\r\n                uint256 _amount = getLpStakingReserve(stakings[i]);\r\n                total = total.add(_amount);\r\n                if(_pool == stakings[i]) {\r\n                    amount = _amount;\r\n                }\r\n            }\r\n        }\r\n        return (amount, total);\r\n    }\r\n\r\n    function getLpStakingReserve(address _pool) public view returns (uint256) {\r\n        address pair = ILpStaking(_pool).stakingLpToken();\r\n        if(pair == address(0)) {\r\n            return 0;\r\n        }\r\n        uint256 reserve = getReserveFromLp(pair);\r\n        if(reserve == 0) {\r\n            return 0;\r\n        }\r\n        uint256 stakingAmount = ILpStaking(_pool).totalSupply();\r\n        uint256 pairTotal = ISwapPair(pair).totalSupply();\r\n        if(pairTotal > 0 && reserve.mul(stakingAmount) > pairTotal) {\r\n            return reserve.mul(stakingAmount).div(pairTotal);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getReserveFromLp(address _pair) public view returns (uint256) {\r\n        address token0 = ISwapPair(_pair).token0();\r\n        address token1 = ISwapPair(_pair).token1();\r\n        (uint256 reserve0, uint256 reserve1, ) = ISwapPair(_pair).getReserves();\r\n        if (token0 == address(this)) {\r\n            return reserve0;\r\n        } else if (token1 == address(this)) {\r\n            return reserve1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function pause() onlyOwner external {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() onlyOwner external {\r\n        _unpause();\r\n    }\r\n\r\n    function weiToIncomeTokenValue(uint256 amount) public view returns (uint256) {\r\n        uint256 decimals = 18;\r\n        if(incomeToken != address(0)) {\r\n            decimals = uint256(IERC20Detail(incomeToken).decimals());\r\n        }\r\n        if(decimals < 18) {\r\n            uint diff = 18 - decimals;\r\n            amount = amount.div(10**diff);\r\n        } else if(decimals > 18) {\r\n            uint diff = decimals - 18;\r\n            amount = amount.mul(10**diff);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function remainingAmount() public view returns(uint256) {\r\n        return totalHashRate.mul(1e18).sub(totalSupply);\r\n    }\r\n\r\n    function mint(address to, uint value) external whenNotPaused {\r\n        require(msg.sender == minter, \"!minter\");\r\n        require(value <= remainingAmount(), \"not sufficient supply.\");\r\n        _mint(to, value);\r\n        updateStakingPoolsIncome();\r\n    }\r\n\r\n    function setMinter(address _minter) external onlyParamSetter {\r\n        require(minter != _minter, \"same minter.\");\r\n        minter = _minter;\r\n    }\r\n\r\n    function addHashRate(uint256 hashRate) external onlyParamSetter {\r\n        require(hashRate > 0, \"hashRate cannot be 0\");\r\n\r\n        // should keep current workingRate and incomeRate unchanged.\r\n        totalHashRate = totalHashRate.add(hashRate.mul(totalHashRate).div(workingHashRate));\r\n        workingHashRate = workingHashRate.add(hashRate);\r\n    }\r\n\r\n    function setMineParam(address _mineParam) external onlyParamSetter {\r\n        require(mineParam != _mineParam, \"same mineParam.\");\r\n        mineParam = _mineParam;\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function setStartMiningTime(uint256 _startMiningTime) external onlyParamSetter {\r\n        require(startMiningTime != _startMiningTime, \"same startMiningTime.\");\r\n        require(startMiningTime > block.timestamp, \"already start mining.\");\r\n        require(_startMiningTime > block.timestamp, \"nonlegal startMiningTime.\");\r\n        startMiningTime = _startMiningTime;\r\n        workerNumLastUpdateTime = _startMiningTime;\r\n    }\r\n\r\n    function setElectricCharge(uint256 _electricCharge) external onlyParamSetter {\r\n        require(electricCharge != _electricCharge, \"same electricCharge.\");\r\n        electricCharge = _electricCharge;\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function setMinerPoolFeeNumerator(uint256 _minerPoolFeeNumerator) external onlyParamSetter {\r\n        require(minerPoolFeeNumerator != _minerPoolFeeNumerator, \"same minerPoolFee.\");\r\n        require(_minerPoolFeeNumerator < 1000000, \"nonlegal minerPoolFee.\");\r\n        minerPoolFeeNumerator = _minerPoolFeeNumerator;\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function setDepreciationNumerator(uint256 _depreciationNumerator) external onlyParamSetter {\r\n        require(depreciationNumerator != _depreciationNumerator, \"same depreciationNumerator.\");\r\n        require(_depreciationNumerator <= 1000000, \"nonlegal depreciation.\");\r\n        depreciationNumerator = _depreciationNumerator;\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function setWorkingHashRate(uint256 _workingHashRate) external onlyParamSetter {\r\n        require(workingHashRate != _workingHashRate, \"same workingHashRate.\");\r\n        //require(totalHashRate >= _workingHashRate, \"param workingHashRate not legal.\");\r\n\r\n        if (block.timestamp > startMiningTime) {\r\n            workingRateNumerator = getHistoryWorkingRate();\r\n            workerNumLastUpdateTime = block.timestamp;\r\n        }\r\n\r\n        workingHashRate = _workingHashRate;\r\n        updateIncomeRate();\r\n    }\r\n\r\n    function getHistoryWorkingRate() public view returns (uint256) {\r\n        if (block.timestamp > startMiningTime) {\r\n            uint256 time_interval = block.timestamp.sub(workerNumLastUpdateTime);\r\n            uint256 totalRate = workerNumLastUpdateTime.sub(startMiningTime).mul(workingRateNumerator).add(time_interval.mul(getCurWorkingRate()));\r\n            uint256 totalTime = block.timestamp.sub(startMiningTime);\r\n\r\n            return totalRate.div(totalTime);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getCurWorkingRate() public view  returns (uint256) {\r\n        return 1000000 * workingHashRate / totalHashRate;\r\n    }\r\n\r\n    function getPowerConsumptionMineInWeiPerSec() public view returns(uint256){\r\n        uint256 minePrice = IMineParam(mineParam).minePrice();\r\n        if (minePrice != 0) {\r\n            uint256 Base = 1e18;\r\n            uint256 elecPowerPerTHSecAmplifier = 1000;\r\n            uint256 powerConsumptionPerHour = elecPowerPerTHSec.mul(Base).div(elecPowerPerTHSecAmplifier).div(1000);\r\n            uint256 powerConsumptionMineInWeiPerHour = powerConsumptionPerHour.mul(electricCharge).div(1000000).div(minePrice);\r\n            return powerConsumptionMineInWeiPerHour.div(3600);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getIncomeMineInWeiPerSec() public view returns(uint256){\r\n        uint256 paramDenominator = 1000000;\r\n        uint256 afterMinerPoolFee = 0;\r\n        {\r\n            uint256 mineIncomePerTPerSecInWei = IMineParam(mineParam).mineIncomePerTPerSecInWei();\r\n            afterMinerPoolFee = mineIncomePerTPerSecInWei.mul(paramDenominator.sub(minerPoolFeeNumerator)).div(paramDenominator);\r\n        }\r\n\r\n        uint256 afterDepreciation = 0;\r\n        {\r\n            afterDepreciation = afterMinerPoolFee.mul(depreciationNumerator).div(paramDenominator);\r\n        }\r\n\r\n        return afterDepreciation;\r\n    }\r\n\r\n    function updateIncomeRate() public {\r\n        //not start mining yet.\r\n        if (block.timestamp > startMiningTime) {\r\n            // update income first.\r\n            updateStakingPoolsIncome();\r\n        }\r\n\r\n        uint256 oldValue = incomeRate;\r\n\r\n        //compute electric charge.\r\n        uint256 powerConsumptionMineInWeiPerSec = getPowerConsumptionMineInWeiPerSec();\r\n\r\n        //compute mine income\r\n        uint256 incomeMineInWeiPerSec = getIncomeMineInWeiPerSec();\r\n\r\n        if (incomeMineInWeiPerSec > powerConsumptionMineInWeiPerSec) {\r\n            uint256 targetRate = incomeMineInWeiPerSec.sub(powerConsumptionMineInWeiPerSec);\r\n            incomeRate = targetRate.mul(workingHashRate).div(totalHashRate);\r\n        }\r\n        //miner close down.\r\n        else {\r\n            incomeRate = 0;\r\n        }\r\n\r\n        emit IncomeRateChanged(oldValue, incomeRate);\r\n    }\r\n\r\n    function updateStakingPoolsIncome() public {\r\n        for (uint256 i; i<stakings.length; i++) {\r\n            if(msg.sender != stakings[i] && isStakingPool(stakings[i]) && address(this) == IStaking(stakings[i]).hashRateToken()) {\r\n                IStaking(stakings[i]).incomeRateChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateStakingPoolsReward() public {\r\n        for (uint256 i; i<stakings.length; i++) {\r\n            if(msg.sender != stakings[i] && isStakingPool(stakings[i]) && address(this) == IStaking(stakings[i]).hashRateToken()) {\r\n                IStaking(stakings[i]).rewardRateChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setRewardRate(uint256 _rewardRate) internal {\r\n        updateStakingPoolsReward();\r\n        emit RewardRateChanged(rewardRate, _rewardRate);\r\n        rewardRate = _rewardRate;\r\n        rewardPeriodFinish = block.timestamp.add(rewardsDuration);\r\n    }\r\n\r\n    function setRewardRate(uint256 _rewardRate)  external onlyParamSetter {\r\n        _setRewardRate(_rewardRate);\r\n    }\r\n\r\n    function getRewardRateByReward(uint256 reward) public view returns (uint256) {\r\n        if (block.timestamp >= rewardPeriodFinish) {\r\n            return reward.div(rewardsDuration);\r\n        } else {\r\n            // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n            uint256 remaining = rewardPeriodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            return reward.add(leftover).div(rewardsDuration);\r\n        }\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 reward) external onlyParamSetter {\r\n        uint _rewardRate = getRewardRateByReward(reward);\r\n        _setRewardRate(_rewardRate);\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        uint balance = IERC20(rewardsToken).balanceOf(address(this));\r\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\r\n\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    function takeFromTreasury(address token, uint256 amount) internal {\r\n        if(treasury == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 balance;\r\n        if (token == address(0)) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(token).balanceOf(address(this));\r\n        }\r\n        if(amount > balance) {\r\n            ITokenTreasury(treasury).claim(token, amount.sub(balance));\r\n        }\r\n    }\r\n\r\n    function claimIncome(address to, uint256 amount) external payable {\r\n        require(to != address(0), \"to is the zero address\");\r\n        require(isStakingPool(msg.sender), \"No permissions\");\r\n        \r\n        takeFromTreasury(incomeToken, amount);\r\n        if (incomeToken == address(0)) {\r\n            safeTransferETH(to, amount);\r\n        } else {\r\n            IERC20(incomeToken).safeTransfer(to, amount);\r\n        }\r\n\r\n    }\r\n\r\n    function claimReward(address to, uint256 amount) external {\r\n        require(to != address(0), \"to is the zero address\");\r\n        require(isStakingPool(msg.sender), \"No permissions\");\r\n        \r\n        takeFromTreasury(rewardsToken, amount);\r\n        if (rewardsToken == address(0)) {\r\n            safeTransferETH(to, amount);\r\n        } else {\r\n            IERC20(rewardsToken).safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function inCaseTokensGetStuck(address _token, uint256 _amount) external onlyOwner {\r\n        if (_token == address(0)) {\r\n            safeTransferETH(msg.sender, _amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function depositeETH() external payable {\r\n        emit DepositedETH(msg.sender, msg.value);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint amount) internal {\r\n        address(uint160(to)).transfer(amount);\r\n    }\r\n        \r\n    function () external payable {\r\n    }\r\n\r\n    event IncomeRateChanged(uint256 oldValue, uint256 newValue);\r\n    event RewardAdded(uint256 reward);\r\n    event RewardRateChanged(uint256 oldValue, uint256 newValue);\r\n    event DepositedETH(address indexed _user, uint256 _amount);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"IncomeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSetter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSetter\",\"type\":\"address\"}],\"name\":\"ParamSetterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RewardRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"}],\"name\":\"addHashRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimIncome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositeETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depreciationNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elecPowerPerTHSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electricCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"foundStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurWorkingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHistoryWorkingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIncomeMineInWeiPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLpStakingReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLpStakingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLpStakingsReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPowerConsumptionMineInWeiPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getReserveFromLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"getRewardRateByReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getStakingRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incomeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incomeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpStakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpStakingPool2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mineParam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incomeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_elecPowerPerTHSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_electricCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minerPoolFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalHashRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpStakingIncomeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpStakingIncomeWeightTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineParam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerPoolFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paramSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depreciationNumerator\",\"type\":\"uint256\"}],\"name\":\"setDepreciationNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electricCharge\",\"type\":\"uint256\"}],\"name\":\"setElectricCharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLpStakingIncomeWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setLpStakingIncomeWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mineParam\",\"type\":\"address\"}],\"name\":\"setMineParam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minerPoolFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setMinerPoolFeeNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paramSetter\",\"type\":\"address\"}],\"name\":\"setParamSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setStakingPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStakingRewardWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setStakingRewardWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startMiningTime\",\"type\":\"uint256\"}],\"name\":\"setStartMiningTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workingHashRate\",\"type\":\"uint256\"}],\"name\":\"setWorkingHashRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardWeightTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startMiningTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateIncomeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStakingPoolsIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStakingPoolsReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"weiToIncomeTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workerNumLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workingHashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workingRateNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"POWToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://16682c689614e27f73f7adc02680ccbdaea89db88d1292a1cd31a9fabe93a338"}]}