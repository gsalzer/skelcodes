{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Roles.sol\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @notice copied from openzeppelin-solidity\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/access/WhitelistAdminRole.sol\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @notice copied from openzeppelin-solidity\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/access/WhitelistedRole.sol\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @notice copied from openzeppelin-solidity\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is Context, WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(_msgSender());\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/ICADConversionOracle.sol\r\n\r\n\r\n/**\r\n * @title ICADRateOracle\r\n * @notice provides interface for converting USD stable coins to CAD\r\n*/\r\ninterface ICADConversionOracle {\r\n\r\n    /**\r\n     * @notice convert USD amount to CAD amount\r\n     * @param amount     amount of USD in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert Dai amount to CAD amount\r\n     * @param amount     amount of dai in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function daiToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert USDC amount to CAD amount\r\n     * @param amount     amount of USDC in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdcToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert USDT amount to CAD amount\r\n     * @param amount     amount of USDT in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdtToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert CAD amount to USD amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USD in 18 decimal places\r\n     */\r\n    function cadToUsd(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to Dai amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of Dai in 18 decimal places\r\n     */\r\n    function cadToDai(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDC amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDC in 6 decimal places\r\n     */\r\n    function cadToUsdc(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDT amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDT in 6 decimal places\r\n     */\r\n    function cadToUsdt(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/ManagedCADChainlinkRateOracle.sol\r\n\r\n\r\n\r\n/**\r\n * @title ManagedCADChainlinkRateOracle\r\n * @notice Provides a USD/CAD rate source managed by admin, and Chainlink powered DAI/USDC/USDT conversion rates.\r\n *  USDC is treated as always 1 USD, and used as anchor to calculate Dai and USDT rates\r\n*/\r\ncontract ManagedCADChainlinkRateOracle is ICADConversionOracle, WhitelistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    event ManagedRateUpdated(uint256 value, uint256 timestamp);\r\n\r\n    // exchange rate stored as an integer\r\n    uint256 public _USDToCADRate;\r\n\r\n    // specifies how many decimal places have been converted into integer\r\n    uint256 public _granularity;\r\n\r\n    // specifies the time the exchange was last updated\r\n    uint256 public _timestamp;\r\n\r\n    // Chainlink price feed for Dai/Eth pair\r\n    AggregatorV3Interface public daiEthPriceFeed;\r\n\r\n    // Chainlink price feed for USDC/Eth pair\r\n    AggregatorV3Interface public usdcEthPriceFeed;\r\n\r\n    // Chainlink price feed for USDT/Eth pair\r\n    AggregatorV3Interface public usdtEthPriceFeed;\r\n\r\n\r\n    constructor(\r\n        uint256 value,\r\n        uint256 granularity,\r\n\r\n        address daiEthAggregatorAddress,\r\n        address usdcEthAggregatorAddress,\r\n        address usdtEthAggregatorAddress\r\n    ) public {\r\n        _USDToCADRate = value;\r\n        _granularity = granularity;\r\n        _timestamp = block.timestamp;\r\n\r\n        daiEthPriceFeed = AggregatorV3Interface(daiEthAggregatorAddress);\r\n        usdcEthPriceFeed = AggregatorV3Interface(usdcEthAggregatorAddress);\r\n        usdtEthPriceFeed = AggregatorV3Interface(usdtEthAggregatorAddress);\r\n\r\n        _addWhitelisted(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice admin can update the exchange rate\r\n     * @param value         the new exchange rate\r\n     * @param granularity   number of decimal places the exchange value is accurate to\r\n     * @return  true if success\r\n     */\r\n    function updateManagedRate(uint256 value, uint256 granularity) external onlyWhitelisted returns (bool) {\r\n        require(value > 0, \"Exchange rate cannot be zero\");\r\n        require(granularity > 0, \"Granularity cannot be zero\");\r\n\r\n        _USDToCADRate = value;\r\n        _granularity = granularity;\r\n        _timestamp = block.timestamp;\r\n\r\n        emit ManagedRateUpdated(value, granularity);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @notice return the current managed values\r\n     * @return latest USD to CAD exchange rate, granularity, and timestamp\r\n     */\r\n    function getManagedRate() external view returns (uint256, uint256, uint256) {\r\n        return (_USDToCADRate, _granularity, _timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice convert USD amount to CAD amount\r\n     * @param amount     amount of USD in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdToCad(uint256 amount) public view virtual override returns (uint256) {\r\n        return amount.mul(_USDToCADRate).div(10 ** _granularity);\r\n    }\r\n\r\n    /**\r\n     * @notice convert Dai amount to CAD amount\r\n     * @param amount     amount of dai in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function daiToCad(uint256 amount) external view virtual override returns (uint256) {\r\n        (, int256 daiEthPrice, , uint256 daiEthTimeStamp,) = daiEthPriceFeed.latestRoundData();\r\n        require(daiEthTimeStamp > 0, \"Dai Chainlink Oracle data temporarily incomplete\");\r\n        require(daiEthPrice > 0, \"Invalid Chainlink Oracle Dai price\");\r\n\r\n        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\r\n        require(usdcEthTimeStamp > 0, \"USDC conversion Chainlink Oracle data temporarily incomplete\");\r\n        require(usdcEthPrice > 0, \"Invalid Chainlink Oracle USDC conversion price\");\r\n\r\n        return amount.mul(_USDToCADRate).mul(uint256(daiEthPrice)).div(uint256(usdcEthPrice)).div(10 ** _granularity);\r\n    }\r\n\r\n    /**\r\n     * @notice convert USDC amount to CAD amount\r\n     * @param amount     amount of USDC in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdcToCad(uint256 amount) external view virtual override returns (uint256) {\r\n        // USDT has 6 decimals\r\n        return usdToCad(amount.mul(1e12));\r\n    }\r\n\r\n    /**\r\n     * @notice convert USDT amount to CAD amount\r\n     * @param amount     amount of USDT in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdtToCad(uint256 amount) external view virtual override returns (uint256) {\r\n        (, int256 usdtEthPrice, , uint256 usdtEthTimeStamp,) = usdtEthPriceFeed.latestRoundData();\r\n        require(usdtEthTimeStamp > 0, \"USDT Chainlink Oracle data temporarily incomplete\");\r\n        require(usdtEthPrice > 0, \"Invalid Chainlink Oracle USDT price\");\r\n\r\n        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\r\n        require(usdcEthTimeStamp > 0, \"USDC conversion Chainlink Oracle data temporarily incomplete\");\r\n        require(usdcEthPrice > 0, \"Invalid Chainlink Oracle USDC conversion price\");\r\n\r\n        // USDT has 6 decimals\r\n        return amount.mul(1e12).mul(_USDToCADRate).mul(uint256(usdtEthPrice)).div(uint256(usdcEthPrice)).div(10 ** _granularity);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice convert CAD amount to USD amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USD in 18 decimal places\r\n     */\r\n    function cadToUsd(uint256 amount) public view virtual override returns (uint256) {\r\n        return amount.mul(10 ** _granularity).div(_USDToCADRate);\r\n    }\r\n\r\n    /**\r\n     * @notice convert CAD amount to Dai amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of Dai in 18 decimal places\r\n     */\r\n    function cadToDai(uint256 amount) external view virtual override returns (uint256) {\r\n        (, int256 daiEthPrice, , uint256 daiEthTimeStamp,) = daiEthPriceFeed.latestRoundData();\r\n        require(daiEthTimeStamp > 0, \"Dai Chainlink Oracle data temporarily incomplete\");\r\n        require(daiEthPrice > 0, \"Invalid Chainlink Oracle Dai price\");\r\n\r\n        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\r\n        require(usdcEthTimeStamp > 0, \"USDC conversion Chainlink Oracle data temporarily incomplete\");\r\n        require(usdcEthPrice > 0, \"Invalid Chainlink Oracle USDC conversion price\");\r\n\r\n        return amount.mul(10 ** _granularity).mul(uint256(usdcEthPrice)).div(uint256(daiEthPrice)).div(_USDToCADRate);\r\n    }\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDC amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDC in 6 decimal places\r\n     */\r\n    function cadToUsdc(uint256 amount) external view virtual override returns (uint256) {\r\n        return cadToUsd(amount).div(1e12);\r\n    }\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDT amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDT in 6 decimal places\r\n     */\r\n    function cadToUsdt(uint256 amount) external view virtual override returns (uint256) {\r\n        (, int256 usdtEthPrice, , uint256 usdtEthTimeStamp,) = usdtEthPriceFeed.latestRoundData();\r\n        require(usdtEthTimeStamp > 0, \"USDT Chainlink Oracle data temporarily incomplete\");\r\n        require(usdtEthPrice > 0, \"Invalid Chainlink Oracle USDT price\");\r\n\r\n        (, int256 usdcEthPrice, , uint256 usdcEthTimeStamp,) = usdcEthPriceFeed.latestRoundData();\r\n        require(usdcEthTimeStamp > 0, \"USDC conversion Chainlink Oracle data temporarily incomplete\");\r\n        require(usdcEthPrice > 0, \"Invalid Chainlink Oracle USDC conversion price\");\r\n\r\n        return amount.mul(10 ** _granularity).mul(uint256(usdcEthPrice)).div(uint256(usdtEthPrice)).div(_USDToCADRate).div(1e12);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiEthAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcEthAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtEthAggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ManagedRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_USDToCADRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cadToDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cadToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cadToUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cadToUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiEthPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"daiToCad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"updateManagedRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdToCad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcEthPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdcToCad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtEthPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToCad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ManagedCADChainlinkRateOracle","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000005220000000000000000000000000000000000000000000000000000000000000003000000000000000000000000773616e4d11a78f511299002da57a0a94577f1f4000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd4000000000000000000000000ee9f2375b4bdf6387aa8265dd4fb8f16512a1d46","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8bd200563b033c4e4a728f13397d289cbc532ecc14c670b8312ff8a81fc0026a"}]}