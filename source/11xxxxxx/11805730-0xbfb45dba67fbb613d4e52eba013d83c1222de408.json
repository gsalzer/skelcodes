{"status":"1","message":"OK","result":[{"SourceCode":"// File: ../triton/crypto/presaleContract.sol\r\n\r\n//                      ▄▄                            \r\n// ███▀▀██▀▀███         ██   ██                       \r\n// █▀   ██   ▀█              ██                       \r\n//      ██    ▀███▄███▀███ ██████  ▄██▀██▄▀████████▄  \r\n//      ██      ██▀ ▀▀  ██   ██   ██▀   ▀██ ██    ██  \r\n//      ██      ██      ██   ██   ██     ██ ██    ██  \r\n//      ██      ██      ██   ██   ██▄   ▄██ ██    ██  \r\n//    ▄████▄  ▄████▄  ▄████▄ ▀████ ▀█████▀▄████  ████▄\r\n                                                   \r\n                                                   \r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract TritonPresale is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    bool public isPresaleOpen;\r\n    address public tokenAddress;\r\n    uint256 public tokenDecimals = 9;\r\n    uint256 public tokenRatePerEth = 10_00;\r\n    uint256 public rateDecimals = 2;\r\n    uint256 public minEthLimit = 100 finney;\r\n    uint256 public maxEthLimit = 1 ether;\r\n    \r\n    mapping(address => uint256) public usersInvestments;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    receive() external payable{\r\n        require(isPresaleOpen, \"Presale is not open.\");\r\n        require(\r\n                usersInvestments[msg.sender].add(msg.value) <= maxEthLimit\r\n                && usersInvestments[msg.sender].add(msg.value) >= minEthLimit,\r\n                \"Installment Invalid.\"\r\n            );\r\n        uint256 tokenAmount = getTokensPerEth(msg.value);\r\n        require(IToken(tokenAddress).transfer(msg.sender, tokenAmount), \"Insufficient balance of presale contract!\");\r\n        usersInvestments[msg.sender] = usersInvestments[msg.sender].add(msg.value);        \r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function getTokensPerEth(uint256 amount) internal view returns(uint256) {\r\n        return amount.mul(tokenRatePerEth).div(\r\n            10**(uint256(18).sub(tokenDecimals).add(rateDecimals))\r\n            );\r\n    }\r\n    \r\n    function burnRemaining() external onlyOwner {\r\n        require(!isPresaleOpen, \"You cannot burn tokens untitl the presale is closed.\");\r\n        IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   \r\n    }\r\n\r\n        function start() external onlyOwner{\r\n        require(!isPresaleOpen, \"Presale is open\");\r\n        \r\n        isPresaleOpen = true;\r\n    }\r\n    \r\n    function close() external onlyOwner{\r\n        require(isPresaleOpen, \"Presale is not open yet.\");\r\n        \r\n        isPresaleOpen = false;\r\n    }\r\n    \r\n    function setToken(address token) external onlyOwner {\r\n        require(tokenAddress == address(0), \"Token address is already set.\");\r\n        require(token != address(0), \"Token address zero not allowed.\");\r\n        \r\n        tokenAddress = token;\r\n    }\r\n    \r\n    function setTokenDecimals(uint256 decimals) external onlyOwner {\r\n       tokenDecimals = decimals;\r\n    }\r\n    \r\n    function setMinEthLimit(uint256 amount) external onlyOwner {\r\n        minEthLimit = amount;    \r\n    }\r\n    \r\n    function setMaxEthLimit(uint256 amount) external onlyOwner {\r\n        maxEthLimit = amount;    \r\n    }\r\n    \r\n    function setTokenRatePerEth(uint256 rate) external onlyOwner {\r\n        tokenRatePerEth = rate;\r\n    }\r\n    \r\n    function setRateDecimals(uint256 decimals) external onlyOwner {\r\n        rateDecimals = decimals;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxEthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinEthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setRateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRatePerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRatePerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TritonPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd819e2ccc4bf1cf0e917d16f1c6cbce608fcedd233eb3a3d87d324beafa8d41"}]}