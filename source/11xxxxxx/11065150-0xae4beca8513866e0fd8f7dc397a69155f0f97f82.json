{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n     require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Administration is SafeMath {\r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    address payable CEOAddress;\r\n    address public CTOAddress;\r\n    address Signer;\r\n\r\n    bool public paused = false;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event Pause();\r\n    event Unpause();\r\n    event CTOTransfer(address newCTO, address oldCTO);\r\n\r\n    // ---------------------------------------------------------------------------- \r\n    // Modifiers\r\n    // ----------------------------------------------------------------------------\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == CEOAddress || msg.sender == CTOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Internal Functions\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Functions\r\n    // ----------------------------------------------------------------------------\r\n    function setCTO(address _newAdmin) public onlyCEO {\r\n        require(_newAdmin != address(0));\r\n        emit CTOTransfer(_newAdmin, CTOAddress);\r\n        CTOAddress = _newAdmin;\r\n    }\r\n\r\n    function withdrawBalance() external onlyAdmin {\r\n        CEOAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function pause() public onlyAdmin whenNotPaused returns(bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyAdmin whenPaused returns(bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TrumpBet is Administration {\r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct Bet {\r\n        uint posAmount;\r\n        uint negAmount;\r\n        uint timestamp;\r\n    }\r\n    \r\n    uint public TotalAmount;\r\n    uint public TotalSupport;\r\n    uint public TotalOppose;\r\n    \r\n    uint public TotalPlayers;\r\n    \r\n    uint minBet = 100 finney;\r\n    uint maxBet = 10000 ether;\r\n    \r\n    uint public ContractTime;\r\n    uint ElectionTime = 1604332800;//2020年11月3日\r\n    uint TimeFactor;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (address => Bet) PlayerToBet;\r\n    mapping (address => bool) PlayerIfBet;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event NewBetSuccess(address indexed player, bool indexed opinion, uint indexed amount, uint timeFactor);\r\n    event BetAdjustSuccess(address indexed player, uint indexed posAmount, uint indexed negAmount, uint timeFactor);\r\n    \r\n    // ---------------------------------------------------------------------------- \r\n    // Modifiers\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Functions\r\n    // ----------------------------------------------------------------------------\r\n    function _calculateTimeFactor() internal view returns (uint) {\r\n        return safeSub(ElectionTime, now)*100/safeSub(ElectionTime,ContractTime);\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Functions\r\n    // ----------------------------------------------------------------------------\r\n    constructor(address _CTOAddress) public {\r\n        CEOAddress = msg.sender;\r\n        CTOAddress = _CTOAddress;\r\n        ContractTime = now;\r\n    }\r\n    \r\n    function betTrump(uint _amount, bool _opinion) public payable whenNotPaused{\r\n        require(msg.value >= _amount);\r\n        require(_amount >= minBet && _amount <= maxBet); \r\n        uint currentFactor = _calculateTimeFactor();\r\n        if(PlayerIfBet[msg.sender] = false) {\r\n            if(_opinion == true){\r\n                Bet memory _bet = Bet({\r\n                    posAmount: _amount,\r\n                    negAmount: 0,\r\n                    timestamp: currentFactor\r\n                });\r\n                PlayerToBet[msg.sender] = _bet;\r\n            } else {\r\n                Bet memory _bet = Bet({\r\n                    posAmount: 0,\r\n                    negAmount: _amount,\r\n                    timestamp: currentFactor\r\n                });\r\n                PlayerToBet[msg.sender] = _bet;\r\n            }\r\n            TotalPlayers += 1;\r\n            PlayerIfBet[msg.sender] = true;\r\n            emit NewBetSuccess(msg.sender, _opinion, _amount, currentFactor);\r\n        } else {\r\n            Bet storage _bet = PlayerToBet[msg.sender];\r\n            if(_opinion == true){\r\n                _bet.posAmount += _amount;\r\n            } else {\r\n               _bet.negAmount += _amount;\r\n            }\r\n            _bet.timestamp = _calculateTimeFactor();\r\n            emit BetAdjustSuccess(msg.sender, _bet.posAmount, _bet.negAmount, currentFactor);\r\n        }\r\n        TotalAmount += _amount;\r\n        if(_opinion == true){\r\n            TotalSupport += _amount;\r\n        } else {\r\n            TotalOppose += _amount;\r\n        }\r\n    }\r\n    \r\n    function offlineBet(uint _amount, bool _opinion) public whenNotPaused onlyAdmin {\r\n        TotalAmount += _amount;\r\n        TotalPlayers += 1;\r\n        if(_opinion == true){\r\n            TotalSupport += _amount;\r\n        } else {\r\n            TotalOppose += _amount;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_opinion\",\"type\":\"bool\"}],\"name\":\"offlineBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalOppose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_opinion\",\"type\":\"bool\"}],\"name\":\"betTrump\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setCTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_CTOAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"opinion\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeFactor\",\"type\":\"uint256\"}],\"name\":\"NewBetSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"posAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"negAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeFactor\",\"type\":\"uint256\"}],\"name\":\"BetAdjustSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCTO\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldCTO\",\"type\":\"address\"}],\"name\":\"CTOTransfer\",\"type\":\"event\"}]","ContractName":"TrumpBet","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b797f5962ab0fb2322470223841d35642e227283","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2276cc7a93f1b70e5cda51a985676a8e129271d1ef0fa836867787f26a6873ac"}]}