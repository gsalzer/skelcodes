{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.5;\r\n\r\n/**---------------------------------------------------------------------------/\r\n/**---************--**************--***************--********##########*******/\r\n/**---************--**************--***************--*******###########*******/\r\n/**---**     *****--    *****     --     *****     --******####        *******/\r\n/**---**     *****--    *****     --     *****     --*****####         *******/\r\n/**---**     *****--    *****     --     *****     --****############# *******/\r\n/**---**     *****--    *****     --     *****     --***############## *******/\r\n/**---**     *****--    *****     --     *****     --**           #### *******/\r\n/**---**     *****--    *****     --     *****     --**           #### *******/\r\n/**---************--    *****     --     *****     --**############### *******/\r\n/**---************------*****------------*****-------**############### *******/\r\n/**--------------------------------------------------------------------------*/\r\n\r\n//ERC 20 Token\r\n\r\ncontract DTT_Exchange_v5 {\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    modifier onlyCreator(){\r\n        address _customerAddress = msg.sender;\r\n        require(_customerAddress == sonk);\r\n        _;\r\n    }\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event Approval(\r\n        address indexed tokenOwner, \r\n        address indexed spender,\r\n        uint tokens\r\n    );\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    event Withdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    event RewardWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 tokens\r\n    );\r\n    event Buy(\r\n        address indexed buyer,\r\n        uint256 tokensBought\r\n    );\r\n    event Sell(\r\n        address indexed seller,\r\n        uint256 tokensSold\r\n    );\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public  name = \"DTT Exchange V5\";\r\n    string public symbol = \"DTT\";\r\n    uint8 public decimals = 3;\r\n    uint256 public totalSupply_ = 900000000;\r\n    uint256 constant internal tokenPriceInitial_ = 270000000000;\r\n    uint256 constant internal tokenPriceIncremental_ = 210;\r\n    uint256 internal buyPercent = 300; //comes multiplied by 1000 from outside\r\n    uint256 internal sellPercent = 300;\r\n    uint256 internal referralPercent = 300;\r\n    uint256 internal _transferFees = 0;\r\n    uint256 public currentPrice_ = tokenPriceInitial_;\r\n    uint256 public grv = 1;\r\n    uint256 internal maxSellable = 6000000;\r\n    // Please verify the website https://dttexchange.com before purchasing tokens\r\n\r\n    address commissionHolder; // holds commissions fees\r\n    address payable public devAddress; // Growth funds\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    uint256[6] internal slabPercentage = [300,300,300,300,300,300];\r\n    address payable sonk;\r\n    uint256 public tokenSupply_ = 0;\r\n    // uint256 internal profitPerShare_;\r\n    mapping(address => bool) internal administrators;\r\n    bool mutex = false;\r\n    bool buyable = false;\r\n    bool sellable = false;\r\n    uint256 public minEligibility = 20000;\r\n    \r\n    constructor()\r\n    {\r\n        sonk = msg.sender;\r\n        administrators[sonk] = true; \r\n        commissionHolder = sonk;\r\n        devAddress = sonk;\r\n    }\r\n    \r\n    /**********************************************************************/\r\n    /**************************UPGRADABLES*********************************/\r\n    /**********************************************************************/\r\n    \r\n    function stopInitial() public onlyAdministrator(){\r\n        buyable = false;\r\n    }\r\n    \r\n    function startInitial() public onlyAdministrator(){\r\n        buyable = true;\r\n    }\r\n    \r\n    function stopFinal() public onlyAdministrator(){\r\n        sellable = false;\r\n    }\r\n    \r\n    function startFinal() public onlyAdministrator(){\r\n        sellable = true;\r\n    }\r\n    \r\n    function setEligibility(uint256 minEligibility_) public onlyAdministrator(){\r\n        require(minEligibility_ > 0);\r\n        minEligibility = minEligibility_;\r\n    }\r\n    \r\n    function upgradeContract(address[] memory _users, uint256[] memory _balances,uint256 modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        for(uint i = 0; i<_users.length;i++)\r\n        {\r\n            if(modeType == 1)\r\n            {\r\n                tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                emit Transfer(address(this),_users[i], _balances[i]);\r\n            }\r\n            if(modeType == 2)\r\n            {\r\n                tokenBalanceLedger_[_users[i]] =SafeMath.sub(tokenBalanceLedger_[_users[i]],_balances[i]);\r\n                emit Transfer(_users[i], address(this), _balances[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    receive() external payable\r\n    {\r\n    }\r\n    \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _grv, uint256 _tokenSupply)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        grv = _grv;\r\n        tokenSupply_ = _tokenSupply;\r\n    }\r\n    \r\n    /**********************************************************************/\r\n    /*************************BUY/SELL/STAKE*******************************/\r\n    /**********************************************************************/\r\n    \r\n    function buy(address payable _referrer)\r\n        public\r\n        payable\r\n    {\r\n        require(!isContract(msg.sender),\"Buy from contract is not allowed\");\r\n        require(_referrer != msg.sender,\"Self Referral Not Allowed\");\r\n        purchaseTokens(msg.value, _referrer);\r\n    }\r\n    \r\n    fallback() payable external\r\n    {\r\n    }\r\n    \r\n    function withdrawComm(uint256[] memory _amount, address[] memory _customerAddress)\r\n        onlyAdministrator()\r\n        public \r\n    {\r\n        for(uint i = 0; i<_customerAddress.length; i++)\r\n        {\r\n            uint256 _toAdd = _amount[i];\r\n            tokenBalanceLedger_[_customerAddress[i]] = SafeMath.add(tokenBalanceLedger_[_customerAddress[i]],_toAdd);\r\n            tokenBalanceLedger_[commissionHolder] = SafeMath.sub(tokenBalanceLedger_[commissionHolder], _toAdd);\r\n            emit RewardWithdraw(_customerAddress[i], _toAdd);\r\n            emit Transfer(address(this),_customerAddress[i],_toAdd);\r\n        }\r\n    }\r\n    \r\n    function changeSellable(uint256 _maxSellable) onlyAdministrator() public\r\n    {\r\n        require (_maxSellable > 0, \"Should be greater than 0\");\r\n        maxSellable = _maxSellable;\r\n    }\r\n    \r\n    function getSellable() public view onlyAdministrator() returns(uint256)\r\n    {\r\n        return maxSellable;\r\n    }\r\n    \r\n    function decreaseLiquidity(uint256 _amount)\r\n    public\r\n    onlyCreator()\r\n    {\r\n        require(!isContract(msg.sender),\"Withdraw from contract is not allowed\");\r\n        require(_amount < address(this).balance,\"\");\r\n        devAddress.transfer(_amount);\r\n    }\r\n    \r\n    function upgradePercentages(uint256 percent_, uint modeType) onlyAdministrator() public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            buyPercent = percent_;\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            sellPercent = percent_;\r\n        }\r\n        if(modeType == 3)\r\n        {\r\n            referralPercent = percent_;\r\n        }\r\n        if(modeType == 4)\r\n        {\r\n            _transferFees = percent_;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n     \r\n    function setAdministrator(address _address) public onlyCreator(){\r\n        administrators[_address] = true;\r\n    }\r\n    \r\n    function removeAdministrator(address _address) public onlyAdministrator(){\r\n        administrators[_address] = false;\r\n    }\r\n    \r\n    function sell(uint256 _amountOfTokens, address payable _referrer)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        require(!isContract(msg.sender),\"Selling from contract is not allowed\");\r\n        require(sellable,\"Contract does not allow\");\r\n        require(_amountOfTokens <= maxSellable, \"Can not sell more than allowed\");\r\n        // setup data\r\n        address payable _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 sellPercent_ = getSlabPercentage(_tokens);\r\n        uint256 _dividends = (_ethereum * sellPercent_)/100000;\r\n        uint256 _referralIncome = (_ethereum * referralPercent)/100000;\r\n        _dividends = _dividends + _referralIncome;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        distributeReward(_referralIncome, _referrer);\r\n        _customerAddress.transfer(_taxedEthereum);\r\n        emit Transfer(_customerAddress, address(this), _tokens);\r\n    }\r\n    \r\n    function distributeReward(uint256 _amount, address payable _referrer) internal\r\n    {\r\n        if(_amount > 0.000003 ether && tokenBalanceLedger_[_referrer] > minEligibility)\r\n        {\r\n            _referrer.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function registerDev(address payable _devAddress)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        devAddress = _devAddress;\r\n    }\r\n    \r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n      allowed[msg.sender][delegate] = numTokens;\r\n      emit Approval(msg.sender, delegate, numTokens);\r\n      return true;\r\n    }\r\n    \r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n      return allowed[owner][delegate];\r\n    }\r\n    \r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n      require(numTokens <= tokenBalanceLedger_[owner]);\r\n      require(numTokens <= allowed[owner][msg.sender]);\r\n      tokenBalanceLedger_[owner] = SafeMath.sub(tokenBalanceLedger_[owner],numTokens);\r\n      allowed[owner][msg.sender] =SafeMath.sub(allowed[owner][msg.sender],numTokens);\r\n      uint toSend = SafeMath.sub(numTokens,_transferFees);\r\n      tokenBalanceLedger_[buyer] = tokenBalanceLedger_[buyer] + toSend;\r\n      if(_transferFees > 0)\r\n        {\r\n            burn(_transferFees);\r\n        }\r\n      emit Transfer(owner, buyer, numTokens);\r\n      return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns(uint256)\r\n    {\r\n        return SafeMath.sub(totalSupply_,tokenBalanceLedger_[address(0x000000000000000000000000000000000000dEaD)]);\r\n    }\r\n    \r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(tokenBalanceLedger_[msg.sender]>_amountOfTokens, \"Can not sell more than the balance\");\r\n        address _customerAddress = msg.sender;\r\n        uint256 toSend_ = SafeMath.sub(_amountOfTokens, _transferFees);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], toSend_);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        if(_transferFees > 0)\r\n        {\r\n            burn(_transferFees);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function bulkTransfer(address[] memory _toAddress, uint256[] memory _amountOfTokens) onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        for(uint i=0; i<_toAddress.length;i++)\r\n        {\r\n            address _customerAddress = msg.sender;\r\n            address _receiverAddress = _toAddress[i];\r\n            uint256 toSend_ = SafeMath.sub(_amountOfTokens[i], _transferFees);\r\n            tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens[i]);\r\n            tokenBalanceLedger_[_receiverAddress] = SafeMath.add(tokenBalanceLedger_[_receiverAddress], toSend_);\r\n            emit Transfer(_customerAddress, _receiverAddress, _amountOfTokens[i]);\r\n            if(_transferFees > 0)\r\n            {\r\n                burn(_transferFees);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function destruct() onlyCreator() public{\r\n        selfdestruct(sonk);\r\n    }\r\n    \r\n    function burn(uint256 _amountToBurn) internal {\r\n        tokenBalanceLedger_[address(0x000000000000000000000000000000000000dEaD)] += _amountToBurn;\r\n        emit Transfer(address(this), address(0x000000000000000000000000000000000000dEaD), _amountToBurn);\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function myTokens() public view returns(uint256)\r\n    {\r\n        return (tokenBalanceLedger_[msg.sender]);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = getTokensToEthereum_(1);\r\n            uint256 _dividends = (_ethereum * sellPercent)/100000;\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    function getSlabPercentage() public view onlyAdministrator() returns(uint256[6] memory)\r\n    {\r\n        return(slabPercentage);\r\n    }\r\n    \r\n    function getBuyPercentage() public view onlyAdministrator() returns(uint256)\r\n    {\r\n        return(buyPercent);\r\n    }\r\n    \r\n    function getSellPercentage() public view onlyAdministrator() returns(uint256)\r\n    {\r\n        return(sellPercent);\r\n    }\r\n    function getRewardPercentage() public view onlyAdministrator() returns(uint256)\r\n    {\r\n        return(referralPercent);\r\n    }\r\n    \r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        return currentPrice_;\r\n    }\r\n    \r\n    \r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = getTokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = (_ethereum * sellPercent) /100000;\r\n        uint256 _referralIncome = (_ethereum * referralPercent)/100000;\r\n        _dividends = _dividends + _referralIncome;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function isContract(address account) public view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function calculateTokensReceived(uint256 _ethereumToSpend) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = (_ethereumToSpend * buyPercent)/100000;\r\n        uint256 _referralIncome = (_ethereumToSpend * referralPercent)/100000;\r\n        _dividends = _dividends + _referralIncome;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = getEthereumToTokens_(_taxedEthereum, currentPrice_, grv);\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, (_amountOfTokens * referralPercent) / 100000);\r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    function purchaseTokens(uint256 _incomingEthereum, address payable _referrer)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        require(buyable,\"Contract does not allow\");\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = (_incomingEthereum * buyPercent)/100000;\r\n        uint256 _referralIncome = (_incomingEthereum * referralPercent)/100000;\r\n        _dividends = _dividends + _referralIncome;\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum , currentPrice_, grv);\r\n        require(_amountOfTokens > 0 , \"Can not buy 0 Tokens\");\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_);\r\n        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) <= totalSupply_);\r\n        //deduct commissions for referrals\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, (_amountOfTokens * referralPercent)/100000);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        distributeReward(_referralIncome,_referrer);\r\n        // fire event\r\n        emit Transfer(address(this), _customerAddress, _amountOfTokens);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function changeSlabPercentage(uint slab_, uint256 percentage_) onlyAdministrator() public{\r\n        require(slab_<6,\"Only 6 Slabs are there\");\r\n        slabPercentage[slab_] = percentage_;\r\n    }\r\n    \r\n    function getSlabPercentage(uint256 tokens_) internal view returns(uint256){\r\n        tokens_ = (tokens_ / 1000);\r\n        if(tokens_ >=100 && tokens_ <250)\r\n        {\r\n            return slabPercentage[0];\r\n        }\r\n        if(tokens_ >=250 && tokens_ <500)\r\n        {\r\n            return slabPercentage[1];\r\n        }\r\n        if(tokens_ >=500 && tokens_ <1000)\r\n        {\r\n            return slabPercentage[2];\r\n        }\r\n        if(tokens_ >=1000 && tokens_ <2500)\r\n        {\r\n            return slabPercentage[3];\r\n        }\r\n        if(tokens_ >=2500 && tokens_ <5000)\r\n        {\r\n            return slabPercentage[4];\r\n        }\r\n        if(tokens_ >=5000)\r\n        {\r\n            return slabPercentage[5];\r\n        }\r\n        return sellPercent;\r\n    }\r\n   \r\n    function getEthereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv) internal view returns(uint256)\r\n    {\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(2**(_grv-1)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        return _totalTokens;\r\n    }\r\n    \r\n    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(2**(_grv-1)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        currentPrice_ = _currentPrice;\r\n        grv = _grv;\r\n        return _totalTokens;\r\n    }\r\n    \r\n    function getTokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = grv;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                _grv -= 1;\r\n                tempbase = upperBound_(_grv-1);\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             uint256 a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n    \r\n    function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = grv;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                _grv -= 1;\r\n                tempbase = upperBound_(_grv-1);\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             uint256 a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n        grv = _grv;\r\n        currentPrice_ = _currentPrice;\r\n        return _etherReceived;\r\n    }\r\n    \r\n    function upperBound_(uint256 _grv)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        if(_grv <= 5)\r\n        {\r\n            return (60000000 * _grv);\r\n        }\r\n        if(_grv > 5 && _grv <= 10)\r\n        {\r\n            return (300000000 + ((_grv-5)*50000000));\r\n        }\r\n        if(_grv > 10 && _grv <= 15)\r\n        {\r\n            return (550000000 + ((_grv-10)*40000000));\r\n        }\r\n        if(_grv > 15 && _grv <= 20)\r\n        {\r\n            return (750000000 +((_grv-15)*30000000));\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"RewardWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountOfTokens\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellable\",\"type\":\"uint256\"}],\"name\":\"changeSellable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slab_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage_\",\"type\":\"uint256\"}],\"name\":\"changeSlabPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlabPercentage\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEligibility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"registerDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minEligibility_\",\"type\":\"uint256\"}],\"name\":\"setEligibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_grv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupply\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_customerAddress\",\"type\":\"address[]\"}],\"name\":\"withdrawComm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DTT_Exchange_v5","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69d52ce5de6657561f9aad336ba17c01e27d6e7e559eb7be12727e77a2586781"}]}