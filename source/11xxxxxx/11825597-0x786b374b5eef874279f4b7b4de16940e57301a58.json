{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Underlying Burner\r\n@notice Converts underlying coins to USDC, adds liquidity to 3pool\r\n        and transfers to fee distributor\r\n\"\"\"\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface StableSwap:\r\n    def add_liquidity(amounts: uint256[3], min_mint_amount: uint256): nonpayable\r\n\r\ninterface RegistrySwap:\r\n    def exchange_with_best_rate(\r\n        _from: address,\r\n        _to: address,\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n    ) -> uint256: payable\r\n\r\ninterface AddressProvider:\r\n    def get_address(_id: uint256) -> address: view\r\n\r\ninterface Synthetix:\r\n    def exchangeWithTracking(\r\n        sourceCurrencyKey: bytes32,\r\n        sourceAmount: uint256,\r\n        destinationCurrencyKey: bytes32,\r\n        originator: address,\r\n        trackingCode: bytes32,\r\n    ): nonpayable\r\n    def settle(currencyKey: bytes32) -> uint256[3]: nonpayable\r\n\r\n\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\n\r\nTRIPOOL: constant(address) = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\r\nTRIPOOL_LP: constant(address) = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\r\nTRIPOOL_COINS: constant(address[3]) = [\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F,\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\r\n    0xdAC17F958D2ee523a2206206994597C13D831ec7,\r\n]\r\nUSDC: constant(address) = TRIPOOL_COINS[1]\r\n\r\nSNX: constant(address) = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F\r\nSUSD: constant(address) = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51\r\nSUSD_CURRENCY_KEY: constant(bytes32) = 0x7355534400000000000000000000000000000000000000000000000000000000\r\nTRACKING_CODE: constant(bytes32) = 0x4355525645000000000000000000000000000000000000000000000000000000\r\n\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an `UnderlyingBurner` deployment.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n    # infinite approval for all 3pool coins\r\n    for coin in TRIPOOL_COINS:\r\n        response: Bytes[32] = raw_call(\r\n            coin,\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(TRIPOOL, bytes32),\r\n                convert(MAX_UINT256, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n\r\n@payable\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Receive `_coin` and swap for USDC if not a 3pool asset\r\n    @param _coin Address of the coin being received\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            concat(\r\n                method_id(\"transferFrom(address,address,uint256)\"),\r\n                convert(msg.sender, bytes32),\r\n                convert(self, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    # if coin is not in 3pool, swap it for USDC\r\n    if not _coin in TRIPOOL_COINS:\r\n        registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\r\n\r\n        if not self.is_approved[registry_swap][_coin]:\r\n            response: Bytes[32] = raw_call(\r\n                _coin,\r\n                concat(\r\n                    method_id(\"approve(address,uint256)\"),\r\n                    convert(registry_swap, bytes32),\r\n                    convert(MAX_UINT256, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n            self.is_approved[registry_swap][_coin] = True\r\n\r\n        if _coin == SUSD:\r\n            # if the coin is sUSD, settle prior to exchanging\r\n            Synthetix(SNX).settle(SUSD_CURRENCY_KEY)\r\n\r\n        # get actual balance in case of transfer fee or pre-existing balance\r\n        amount = ERC20(_coin).balanceOf(self)\r\n        if amount != 0:\r\n            RegistrySwap(registry_swap).exchange_with_best_rate(_coin, USDC, amount, 0)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef convert_synth(_currency_key: bytes32, _amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Convert a synth to sUSD\r\n    @dev Synth burners transfer synths to this contract and then conver them\r\n         via this method. In this way we reduce the number of calls to settle.\r\n    @param _currency_key Currency key of the synth to convert\r\n    @param _amount Amount of the synth to convert\r\n    @return bool success\r\n    \"\"\"\r\n    Synthetix(SNX).exchangeWithTracking(_currency_key, _amount, SUSD_CURRENCY_KEY, self, TRACKING_CODE)\r\n    return True\r\n\r\n\r\n@external\r\ndef execute() -> bool:\r\n    \"\"\"\r\n    @notice Add liquidity to 3pool and transfer 3CRV to the fee distributor\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amounts: uint256[3] = [\r\n        ERC20(TRIPOOL_COINS[0]).balanceOf(self),\r\n        ERC20(TRIPOOL_COINS[1]).balanceOf(self),\r\n        ERC20(TRIPOOL_COINS[2]).balanceOf(self),\r\n    ]\r\n    if amounts[0] != 0 and amounts[1] != 0 and amounts[2] != 0:\r\n        StableSwap(TRIPOOL).add_liquidity(amounts, 0)\r\n\r\n    amount: uint256 = ERC20(TRIPOOL_LP).balanceOf(self)\r\n    if amount != 0:\r\n        ERC20(TRIPOOL_LP).transfer(self.receiver, amount)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"payable\",\"type\":\"function\",\"gas\":49446},{\"name\":\"convert_synth\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_currency_key\"},{\"type\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":2087},{\"name\":\"execute\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":6311},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7823},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36473},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37724},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36533},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36459},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36593},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36519},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000a464e6dcda8ac41e03616f95f4bc98a13b8922dc000000000000000000000000ae9c8320a6394120ecb7b2b2678d9b4ac848d10600000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}