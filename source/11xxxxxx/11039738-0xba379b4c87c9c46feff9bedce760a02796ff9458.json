{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ninterface IERC1155 {\r\n    \r\n    /****************************************|\r\n    |                 Events                 |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n    *   Operator MUST be msg.sender\r\n    *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n    *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n    *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n    *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n    */\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n    \r\n    /**\r\n    * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n    *   Operator MUST be msg.sender\r\n    *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n    *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n    *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n    *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n    */\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n    \r\n    /**\r\n    * @dev MUST emit when an approval is updated\r\n    */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    /**\r\n    * @dev MUST emit when the URI is updated for a token ID\r\n    *   URIs are defined in RFC 3986\r\n    *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n    */\r\n    event URI(string _amount, uint256 indexed _id);\r\n    \r\n    \r\n    /****************************************|\r\n    |                Functions               |\r\n    |_______________________________________*/\r\n    \r\n    /**\r\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n    * @dev MUST emit TransferSingle event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    \r\n    /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @dev MUST emit TransferBatch event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n    */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    \r\n    /**\r\n    * @notice Get the balance of an account's Tokens\r\n    * @param _owner  The address of the token holder\r\n    * @param _id     ID of the Token\r\n    * @return        The _owner's balance of the Token type requested\r\n    */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    \r\n    /**\r\n    * @notice Get the balance of multiple account/token pairs\r\n    * @param _owners The addresses of the token holders\r\n    * @param _ids    ID of the Tokens\r\n    * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n    */\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n    \r\n    /**\r\n    * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n    * @dev MUST emit the ApprovalForAll event on success\r\n    * @param _operator  Address to add to the set of authorized operators\r\n    * @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    \r\n    /**\r\n    * @notice Queries the approval status of an operator for a given owner\r\n    * @param _owner     The owner of the Tokens\r\n    * @param _operator  Address of authorized operator\r\n    * @return isOperator True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n\r\ncontract ERNEDistribution {\r\n    \r\n    // Signature Address\r\n    address private signer;\r\n    // ECDSA Address\r\n    using ECDSA for address;\r\n    // Users Count initialzed to zero at deployment\r\n    uint256 public count = 0;\r\n    // NFT token address\r\n    address public NFT;\r\n    // NFT token ID;\r\n    uint256 public tokenId;\r\n    // Start Time will be time of deployment\r\n    uint256 public strTime;\r\n    // Contract owner address\r\n    address public owner;\r\n    // ERNE NFT Holder Address\r\n    address public erc1155Holder;\r\n\r\n    // Signature Message Hash\r\n    mapping(bytes32 => bool)public msgHash;\r\n    \r\n    //user claimstatus\r\n    mapping(address => bool) public claimStatus;\r\n\r\n\r\n    constructor (address _signer, address _nft, uint256 _tokenid, address _erc1155Holder) public{\r\n        // Initialization\r\n        signer = _signer;\r\n        NFT = _nft;\r\n        tokenId = _tokenid;\r\n        strTime = now;\r\n        owner = msg.sender;\r\n        erc1155Holder = _erc1155Holder;\r\n    } \r\n    \r\n    /**\r\n     * @notice claim ERNE tokens. \r\n     * * Only for 20 days from the date of deployment\r\n     * * Only for first 150,000 users\r\n     * * First 10,000 Claimers will get  ERNE NFT\r\n     * @param tokenAddr The ERNE token address. \r\n     * @param amount The amount of token to transfer. \r\n     * @param deadline The deadline for signature. \r\n     * @param signature The signature created with 'signer'\r\n     */\r\n    function claim(address tokenAddr, uint amount, uint deadline, bytes calldata signature)\r\n        public \r\n    {   \r\n        //Check msg.sender claim status    \r\n        require(!claimStatus[tx.origin], \"Erne::claim: Duplicate call\");\r\n        \r\n        // Time and count check\r\n        require((now <= (strTime + 20 days)) && count < 150000 , \"Erne::claim: time expired/Count exceeds\");\r\n        \r\n        //messageHash can be used only once\r\n        bytes32 messageHash = message(tx.origin, amount, deadline);\r\n        require(!msgHash[messageHash], \"Erne::claim: signature duplicate\");\r\n        \r\n        //Verifes signature    \r\n        address src = verifySignature(messageHash, signature);\r\n        require(signer == src, \"Erne::claim: unauthorized\");\r\n        \r\n        //Chage the Status of used messageHash    \r\n        msgHash[messageHash] = true;\r\n        \r\n        //Chage the Status of user claim status    \r\n        claimStatus[tx.origin] = true;\r\n\r\n        // First 10,000 Claimers will get  ERNE NFT \r\n        if(count < 10000) {\r\n           IERC1155(NFT).safeTransferFrom(erc1155Holder, msg.sender, tokenId, 1, \"0x0\");\r\n        }\r\n        count = count + 1;\r\n\r\n        //ERNE Transfer\r\n        IERC20(tokenAddr).transfer(msg.sender,amount);\r\n    }\r\n \r\n    /**\r\n    * @dev Ethereum Signed Message, created from `hash`\r\n    * @dev Returns the address that signed a hashed message (`hash`) with `signature`.\r\n    */\r\n    function verifySignature(bytes32 _messageHash, bytes memory _signature) \r\n        public pure returns (address signatureAddress)\r\n    {\r\n        \r\n        bytes32 hash = ECDSA.toEthSignedMessageHash(_messageHash);\r\n        signatureAddress = ECDSA.recover(hash, _signature);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns hash for given data\r\n    */\r\n    function message(address  _receiver , uint256 _amount , uint256 _blockExpirytime)\r\n        public view returns(bytes32 messageHash)\r\n    {\r\n        messageHash = keccak256(abi.encodePacked(address(this), _receiver, _amount, _blockExpirytime));\r\n    }\r\n\r\n    /**\r\n     * @notice claimPendingToken Owner can withdraw pending tokens from contract.\r\n     * @param tokenAddr ERNE token address. \r\n     */\r\n    function claimPendingToken(address tokenAddr) \r\n        public \r\n    {\r\n        // Owner call check\r\n        require(msg.sender == owner, \"Erne::only Owner\");\r\n        // Pending token transfer\r\n        IERC20(tokenAddr).transfer(msg.sender, IERC20(tokenAddr).balanceOf(address(this)));\r\n\r\n    }\r\n        \r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc1155Holder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"claimPendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155Holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockExpirytime\",\"type\":\"uint256\"}],\"name\":\"message\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"msgHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signatureAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ERNEDistribution","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008f6f52b77abfa077065652e5129a328acf32d6530000000000000000000000006e57138f4a8a9ba265a5f59896e80d4b13b81b5100000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b851c93152fa6c8f94afa7ca254ce5f2e54afae","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7e4859b4d0d48ea3b9ecd519e2eebb7c2f99c41aae5bae8390ed8cfe2e0d0699"}]}