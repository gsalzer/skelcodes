{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/interfaces/IVoting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the voting smart contract that locks\\n * {ERC20} voting token while election process is not finished.\\n */\\ninterface IVoting {\\n  /**\\n   * @dev Emitted when the new voting issue becomes available at `issueIndex` with\\n   * specified `issueDescription` and `issueEndTimestamp`.\\n   */\\n  event LogIssueCreated(uint256 issueIndex, string issueDescription, uint256 issueEndTimestamp);\\n\\n  /**\\n   * @dev Emitted when the new vote for option `optionIndex` with weight `amount`\\n   * was accepted for the issue identified by `issueIndex`.\\n   */\\n  event LogVoteAccepted(uint256 issueIndex, uint8 optionIndex, uint256 amount);\\n\\n  /**\\n   * @dev {ERC20} voting token that determines a vote weight and\\n   * becomes locked until the election ends.\\n   */\\n  function token() external view returns (address);\\n\\n  /**\\n   * @dev Creates a new voting issue from a `description`, `duration`\\n   * and an array of `options`, returns the issue index.\\n   */\\n  function createIssue(\\n    string calldata description,\\n    uint256 duration,\\n    bytes32[] calldata options\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Creates the new vote for option `optionIndex` with weight `amount`\\n   * for the issue identified by `issueIndex`, locks `amount` of {token}.\\n   */\\n  function vote(\\n    uint256 amount,\\n    uint256 issueIndex,\\n    uint8 optionIndex\\n  ) external;\\n\\n  /**\\n   * @dev Returns all the tokens used for voting on the issue at `issueIndex`\\n   * back to the voter.\\n   */\\n  function withdrawVotedTokens(uint256 issueIndex) external;\\n\\n  /**\\n   * @dev Returns `amountToRetrieve` of the latest voting issues,\\n   * shifted by `offset` (may be used for pagination).\\n   */\\n  function recentIssueIndexes(uint256 amountToRetrieve, uint256 offset)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns issue's description, end timestamp and amount of available options.\\n   */\\n  function issueDetails(uint256 issueIndex)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns issue options' descriptions and total votes per each.\\n   */\\n  function issueOptions(uint256 issueIndex)\\n    external\\n    view\\n    returns (bytes32[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/libraries/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMathUint` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUint {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned integer to a signed integer,\\n   * Reverts when convertation overflows.\\n   *\\n   * Requirements:\\n   *\\n   * - Operation cannot overflow.\\n   */\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0, \\\"SafeMath: convertation overflow\\\");\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Functions revert instead of returning `false` on failure.\\n * This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * The non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMathUint for uint256;\\n\\n  mapping(address => uint256) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public override view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    virtual\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeMint();\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called before any token mint.\\n   */\\n  function _beforeMint() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal virtual view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal virtual view returns (bytes memory) {\\n    this;\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  event LogOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  address private _owner;\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _owner = _msgSender();\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_msgSender() == _owner, \\\"Ownable: only contract owner can call this function.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Checks if transaction sender account is an owner.\\n   */\\n  function isOwner() external view returns (bool) {\\n    return _msgSender() == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit LogOwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/voting/Voting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../token/ERC20.sol\\\";\\nimport \\\"../interfaces/IVoting.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IVoting} interface.\\n */\\ncontract Voting is IVoting, Context, Ownable {\\n  using SafeMathUint for uint256;\\n  using SafeMathUint for uint8;\\n\\n  ERC20 _votingToken;\\n\\n  // Struct for voting options\\n  // id - unique option ID\\n  // description - arbitrary description\\n  // totalVotes - total amount of votes collected for this option so far\\n  struct IssueOption {\\n    uint256 id;\\n    bytes32 description;\\n    uint256 totalVotes;\\n  }\\n\\n  // Struct for voting issues\\n  // description - arbitrary description\\n  // endTimestamp - when the issue expires (in seconds since Unix epoch)\\n  // issueOptions - contains all the available voting options on this issue\\n  // issueOptionsAmount - amount of issue options, helps to iterate through `issueOptions`\\n  struct Issue {\\n    string description;\\n    uint256 endTimestamp;\\n    mapping(uint256 => IssueOption) issueOptions;\\n    uint256 issueOptionsAmount;\\n  }\\n\\n  mapping(uint256 => Issue) private issues;\\n  mapping(uint256 => mapping(address => uint256)) private votes;\\n  uint256 private lastIssueIndex;\\n  uint256 private lastIssueOptionId;\\n\\n  /**\\n   * @dev Sets the {ERC20} `votingToken` which tokens\\n   * determine a vote weight and are locked until the election ends.\\n   */\\n  constructor(ERC20 votingToken) {\\n    _votingToken = votingToken;\\n  }\\n\\n  /**\\n   * @dev See {IVoting-token}.\\n   */\\n  function token() external override view returns (address) {\\n    return address(_votingToken);\\n  }\\n\\n  /**\\n   * @dev See {IVoting-createIssue}.\\n   */\\n  function createIssue(\\n    string calldata description,\\n    uint256 duration,\\n    bytes32[] calldata options\\n  ) external override onlyOwner returns (uint256) {\\n    uint256 endTimestamp = block.timestamp.add(duration);\\n    issues[lastIssueIndex].issueOptionsAmount = options.length;\\n    issues[lastIssueIndex].description = description;\\n    issues[lastIssueIndex].endTimestamp = endTimestamp;\\n    for (uint256 i = 0; i < options.length; i++) {\\n      issues[lastIssueIndex].issueOptions[i] = IssueOption({\\n        id: lastIssueOptionId++,\\n        description: options[i],\\n        totalVotes: 0\\n      });\\n    }\\n\\n    emit LogIssueCreated(lastIssueIndex, description, endTimestamp);\\n    return lastIssueIndex++;\\n  }\\n\\n  /**\\n   * @dev See {IVoting-vote}.\\n   */\\n  function vote(\\n    uint256 amount,\\n    uint256 issueIndex,\\n    uint8 optionIndex\\n  ) external override isValidIssue(issueIndex) {\\n    Issue storage targetIssue = issues[issueIndex];\\n    require(\\n      block.timestamp <= targetIssue.endTimestamp,\\n      \\\"Voting: issue voting has been finished already\\\"\\n    );\\n\\n    require(optionIndex < targetIssue.issueOptionsAmount, \\\"Voting: passed the wrong option index\\\");\\n\\n    require(\\n      _votingToken.transferFrom(_msgSender(), address(this), amount),\\n      \\\"Voting: voting tokens required\\\"\\n    );\\n\\n    votes[targetIssue.issueOptions[optionIndex].id][_msgSender()] = votes[targetIssue\\n      .issueOptions[optionIndex]\\n      .id][_msgSender()]\\n      .add(amount);\\n    targetIssue.issueOptions[optionIndex].totalVotes = targetIssue.issueOptions[optionIndex]\\n      .totalVotes\\n      .add(amount);\\n\\n    emit LogVoteAccepted(issueIndex, optionIndex, amount);\\n  }\\n\\n  /**\\n   * @dev See {IVoting-withdrawVotedTokens}.\\n   *\\n   * Requirements:\\n   *\\n   * - voting issue at `issueIndex` should have a timestamp\\n   * `endTimestamp` that is already reached.\\n   * - the caller must have a non-withdrawn votes on this issue.\\n   * - {ERC20} `_votingToken` should call {transfer} successfully.\\n   */\\n  function withdrawVotedTokens(uint256 issueIndex) external override isValidIssue(issueIndex) {\\n    Issue storage targetIssue = issues[issueIndex];\\n    require(\\n      block.timestamp > targetIssue.endTimestamp,\\n      \\\"Voting: issue voting hasn't been finished already\\\"\\n    );\\n\\n    uint256 votedTokens;\\n    for (uint256 i = 0; i < targetIssue.issueOptionsAmount; i++) {\\n      votedTokens = votedTokens.add(votes[targetIssue.issueOptions[i].id][_msgSender()]);\\n      votes[targetIssue.issueOptions[i].id][_msgSender()] = 0;\\n    }\\n\\n    require(votedTokens > 0, \\\"Voting: haven't voted or withdrawn tokens already\\\");\\n\\n    require(_votingToken.transfer(_msgSender(), votedTokens), \\\"Voting: transfer failed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IVoting-recentIssueIndexes}.\\n   */\\n  function recentIssueIndexes(uint256 amountToRetrieve, uint256 offset)\\n    external\\n    override\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 offsetIssueAmount = lastIssueIndex.sub(offset);\\n    if (amountToRetrieve > offsetIssueAmount) {\\n      amountToRetrieve = offsetIssueAmount;\\n    }\\n    uint256[] memory issueIndexes = new uint256[](amountToRetrieve);\\n\\n    uint256 retrieved;\\n    for (uint256 i = lastIssueIndex.sub(1).sub(offset); i >= 0; i--) {\\n      issueIndexes[retrieved] = i;\\n      if (++retrieved >= amountToRetrieve) {\\n        break;\\n      }\\n    }\\n\\n    return (issueIndexes);\\n  }\\n\\n  /**\\n   * @dev See {IVoting-issueDetails}.\\n   */\\n  function issueDetails(uint256 issueIndex)\\n    external\\n    override\\n    view\\n    returns (\\n      string memory,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      issues[issueIndex].description,\\n      issues[issueIndex].endTimestamp,\\n      issues[issueIndex].issueOptionsAmount\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IVoting-issueOptions}.\\n   */\\n  function issueOptions(uint256 issueIndex)\\n    external\\n    override\\n    view\\n    isValidIssue(issueIndex)\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    Issue storage targetIssue = issues[issueIndex];\\n    bytes32[] memory optionDescriptions = new bytes32[](targetIssue.issueOptionsAmount);\\n    uint256[] memory optionTotalVotes = new uint256[](targetIssue.issueOptionsAmount);\\n\\n    for (uint256 i = 0; i < targetIssue.issueOptionsAmount; i++) {\\n      optionDescriptions[i] = targetIssue.issueOptions[i].description;\\n      optionTotalVotes[i] = targetIssue.issueOptions[i].totalVotes;\\n    }\\n\\n    return (optionDescriptions, optionTotalVotes);\\n  }\\n\\n  /**\\n   * @dev Checks if `issueIndex` points to the existing voting issue.\\n   */\\n  modifier isValidIssue(uint256 issueIndex) {\\n    require(issueIndex <= lastIssueIndex.sub(1), \\\"Voting: passed the wrong issue index\\\");\\n    _;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"votingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"issueDescription\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogIssueCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"optionIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogVoteAccepted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"options\",\"type\":\"bytes32[]\"}],\"name\":\"createIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"}],\"name\":\"issueDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"}],\"name\":\"issueOptions\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"recentIssueIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optionIndex\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issueIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawVotedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Voting","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c21d6e147a7cbd17f587660374283c16b0bb6a66","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}