{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.15;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\ninterface CurveDeposit{\r\n    function deposit(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function claimable_tokens(address) external view returns (uint256);\r\n}\r\ninterface CurveMinter{\r\n    function mint(address) external;\r\n}\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function getRatio() external view returns (uint);\r\n}\r\n\r\ninterface pERC20 {\r\n  function deposit(uint256 ,uint256 ) external;\r\n  function withdraw(uint256 ,uint256 ) external;\r\n  function balanceOf(uint256 ) external view returns(uint);\r\n  function balanceOf(uint256 ,address) external view returns(uint);\r\n  function getRatio() external view returns (uint);\r\n  function pendingPickle(uint256,address) external view returns(uint);\r\n}\r\n\r\ninterface ICurveFi {\r\n\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[2] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[2] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n}\r\n\r\n\r\ninterface UniswapRouter {\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\ncontract StrategyCRV  {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 pickleindex = 13;\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\taddress constant public bti = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\r\n\t\r\n\taddress constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\r\n    address constant public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n\t\r\n    address constant public want = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);  //crvRenBtc\r\n    address constant public curvefi = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\r\n    address constant public pickleJar = address(0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec);\r\n\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\r\n\t\r\n\taddress constant public crvPla = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\r\n    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\r\n    \r\n    address public governance;\r\n    address public controller;\r\n    \r\n    uint256 public pledgePickles = 0;\r\n    uint256 public redeliverynum = 100 * 1e18;\r\n\t\r\n\taddress[] public swap2BTIRouting;\r\n    address[] public swap2TokenRouting;\r\n\r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\r\n        doApprove(); \r\n\t\tswap2BTIRouting = [pickletoken,weth,bti];\r\n        swap2TokenRouting = [pickletoken,weth,wbtc];\r\n    }\r\n\t\r\n\tfunction doApprove () public{\r\n        IERC20(pickletoken).approve(unirouter, 0);\r\n        IERC20(pickletoken).approve(unirouter, uint(-1));\r\n    }\r\n    \r\n    function deposit() public {\r\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\r\n\t\tif (_crvpla > 0)\r\n\t\t{\r\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\r\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\r\n\t\t    yERC20(pickleJar).deposit(_crvpla);\r\n\t\t}\r\n\t\t\r\n\t\tuint _p3crv = IERC20(pickleJar).balanceOf(address(this));\r\n\t\tif (_p3crv > 0)\r\n\t\t{\r\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\r\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\r\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\r\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\r\n\t\t}\r\n    }\r\n    \r\n     \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external\r\n\t{\r\n\t\tuint amount = _withdraw(_amount);\r\n\t\tif (amount > _amount)\r\n\t\t{\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");                     \r\n        IERC20(want).safeTransfer(_vault, amount);\r\n\t}\r\n\t\r\n\t\r\n    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\r\n        require(msg.sender == controller, \"!controller\");\r\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\r\n\t\tif (amount < _amount) {\r\n\t\t\t_withdrawSome(_amount.sub(amount));\r\n\t\t\tamount = IERC20(want).balanceOf(address(this));\r\n\t\t}\t\r\n\t\treturn amount; \r\n    }\r\n\t\r\n\tfunction withdrawAll() external  returns (uint balance)  {\r\n\t\tuint amount = balanceOf();\r\n\t\tbalance = _withdraw(amount);\r\n\t\t\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");                      \r\n        IERC20(want).safeTransfer(_vault, balance);\r\n\t}\r\n\r\n\r\n    function _withdrawSome(uint256 _amount) internal {\r\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\r\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\r\n        if (_before < _p3crv) {\r\n            _p3crv = _p3crv.sub(_before);\r\n            if (_p3crv > pledgePickles)\r\n            {\r\n                _p3crv = pledgePickles;\r\n            }\r\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\r\n            pledgePickles = pledgePickles.sub(_p3crv);\r\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\r\n        }\r\n        yERC20(pickleJar).withdraw(_p3crv);\r\n    }\r\n\r\n\tfunction balanceOfwant() public view returns (uint256) {\r\n\t\treturn IERC20(want).balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction balanceOfPCRVRenBTC() public view returns (uint256) {\r\n\t\treturn pledgePickles.add(IERC20(pickleJar).balanceOf(address(this)));\r\n\t}\r\n\t\r\n\r\n\tfunction balanceOfCRVRenBTC() public view returns (uint256){\r\n\t\treturn balanceOfPCRVRenBTC().mul(yERC20(pickleJar).getRatio()).div(1e18);\r\n\t}\r\n\r\n\tfunction balanceOfPickle() public view returns (uint256) \r\n\t{\r\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\r\n\t\tif (pickletokenNum==0)\r\n\t\t{\r\n\t\t    return 0;\r\n\t\t}\r\n        uint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\r\n        uint _wbtc = amounts[amounts.length-1];\r\n\t\treturn _wbtc.mul(1e10).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\r\n\t}\r\n    \r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfwant().add(balanceOfCRVRenBTC()).add(balanceOfPickle());\r\n    }\r\n    \r\n    function getPending() public view returns (uint256) {\r\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\r\n    }\r\n\t\r\n\tfunction getPickle() public view returns(uint256)\r\n\t{\r\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\r\n\t}\r\n    \r\n    function harvest() public \r\n    {\r\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\r\n        pledgePickles = 0;\r\n        redelivery();    \r\n    }\r\n    \r\n    function redelivery() internal {\r\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\r\n        if (reward > redeliverynum)\r\n        {\r\n            uint256 _2token = reward.mul(80).div(100); //80%\r\n\t\t    uint256 _2bti = reward.mul(20).div(100);  //20%\r\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\r\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bti, 0, swap2BTIRouting, address(this), now.add(1800));\r\n\r\n            uint _wbtc = IERC20(wbtc).balanceOf(address(this));\r\n            if (_wbtc > 0) {\r\n                IERC20(wbtc).safeApprove(curvefi, 0);\r\n                IERC20(wbtc).safeApprove(curvefi, _wbtc);\r\n                ICurveFi(curvefi).add_liquidity([0,_wbtc],0);\r\n            }\r\n\t\t}\r\n        deposit();\r\n    }\r\n\t\r\n\tfunction getBalanceOfBT() public view returns (uint256)\r\n\t{\r\n\t\treturn IERC20(bti).balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction withdrawFee() public {\r\n        uint b = IERC20(bti).balanceOf(address(this));\r\n\t\trequire(b>0,\"BT balance is 0\");\r\n        IERC20(bti).safeTransfer(Controller(controller).rewards(), b);\r\n    }\r\n    \r\n    function setredeliverynum(uint256 value) public\r\n    {\r\n        require(msg.sender == governance, \"!governance\");\r\n        redeliverynum = value;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"PICKLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfCRVRenBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPCRVRenBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPickle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfwant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bti\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crvPla\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curvefi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceOfBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPickle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pickleJar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pickletoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgePickles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeliverynum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setredeliverynum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2BTIRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyCRV","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fdd02f56d22198abd96a51a16dba8afc5e698963ea51f141d69ddac88d041527"}]}