{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/BaseShareField.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n// import 'contracts/libraries/SafeMath.sol';\r\n// import 'contracts/libraries/TransferHelper.sol';\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ncontract BaseShareField {\r\n    using SafeMath for uint;\r\n    \r\n    uint public totalProductivity;\r\n    uint public accAmountPerShare;\r\n    \r\n    uint public totalShare;\r\n    uint public mintedShare;\r\n    uint public mintCumulation;\r\n    \r\n    uint private unlocked = 1;\r\n    address public shareToken;\r\n    \r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    struct UserInfo {\r\n        uint amount;     // How many tokens the user has provided.\r\n        uint rewardDebt; // Reward debt. \r\n        uint rewardEarn; // Reward earn and not minted\r\n        bool initialize; // already setup.\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n    \r\n    function _setShareToken(address _shareToken) internal {\r\n        shareToken = _shareToken;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function _update() internal virtual {\r\n        if (totalProductivity == 0) {\r\n            totalShare = totalShare.add(_currentReward());\r\n            return;\r\n        }\r\n        \r\n        uint256 reward = _currentReward();\r\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        totalShare += reward;\r\n    }\r\n    \r\n    function _currentReward() internal virtual view returns (uint) {\r\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\r\n    }\r\n    \r\n    // Audit user's reward to be up-to-date\r\n    function _audit(address user) internal virtual {\r\n        UserInfo storage userInfo = users[user];\r\n        if (userInfo.amount > 0) {\r\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\r\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\r\n            mintCumulation = mintCumulation.add(pending);\r\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n\r\n        UserInfo storage userInfo = users[user];\r\n        _update();\r\n        _audit(user);\r\n\r\n        totalProductivity = totalProductivity.add(value);\r\n\r\n        userInfo.amount = userInfo.amount.add(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        return true;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        UserInfo storage userInfo = users[user];\r\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        _update();\r\n        _audit(user);\r\n        \r\n        userInfo.amount = userInfo.amount.sub(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        totalProductivity = totalProductivity.sub(value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function _transferTo(address user, address to, uint value) internal virtual returns (bool) {\r\n        UserInfo storage userInfo = users[user];\r\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        _update();\r\n        _audit(user);\r\n\r\n        uint transferAmount = value.mul(userInfo.rewardEarn).div(userInfo.amount);\r\n        userInfo.rewardEarn = userInfo.rewardEarn.sub(transferAmount);\r\n        users[to].rewardEarn = users[to].rewardEarn.add(transferAmount);\r\n        \r\n        userInfo.amount = userInfo.amount.sub(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        totalProductivity = totalProductivity.sub(value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _takeWithAddress(address user) internal view returns (uint) {\r\n        UserInfo storage userInfo = users[user];\r\n        uint _accAmountPerShare = accAmountPerShare;\r\n        if (totalProductivity != 0) {\r\n            uint reward = _currentReward();\r\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        }\r\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\r\n    }\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function _mint(address user) internal virtual lock returns (uint) {\r\n        _update();\r\n        _audit(user);\r\n        require(users[user].rewardEarn > 0, \"NOTHING TO MINT SHARE\");\r\n        uint amount = users[user].rewardEarn;\r\n        TransferHelper.safeTransfer(shareToken, user, amount);\r\n        users[user].rewardEarn = 0;\r\n        mintedShare += amount;\r\n        return amount;\r\n    }\r\n\r\n    function _mintTo(address user, address to) internal virtual lock returns (uint) {\r\n        _update();\r\n        _audit(user);\r\n        uint amount = users[user].rewardEarn;\r\n        if(amount > 0) {\r\n            TransferHelper.safeTransfer(shareToken, to, amount);\r\n        }\r\n        \r\n        users[user].rewardEarn = 0;\r\n        mintedShare += amount;\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) public virtual view returns (uint, uint) {\r\n        return (users[user].amount, totalProductivity);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function interestsPerBlock() public virtual view returns (uint) {\r\n        return accAmountPerShare;\r\n    }\r\n    \r\n}\r\n\r\n// Dependency file: contracts/SLPStrategy.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n// import \"contracts/libraries/TransferHelper.sol\";\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import \"contracts/modules/BaseShareField.sol\";\r\n\r\ninterface ICollateralStrategy {\r\n    function invest(address user, uint amount) external; \r\n    function withdraw(address user, uint amount) external;\r\n    function liquidation(address user) external;\r\n    function claim(address user, uint amount, uint total) external;\r\n    function exit(uint amount) external;\r\n    function migrate(address old) external;\r\n    function query() external view returns (uint);\r\n    function mint() external;\r\n\r\n    function interestToken() external returns (address);\r\n    function collateralToken() external returns (address);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\r\n    function poolInfo(uint _index) external view returns(address, uint, uint, uint);\r\n}\r\n\r\ncontract SLPStrategy is ICollateralStrategy, BaseShareField\r\n{\r\n    event Mint(address indexed user, uint amount);\r\n    using SafeMath for uint;\r\n\r\n    address override public interestToken;\r\n    address override public collateralToken;\r\n\r\n    address public poolAddress;\r\n    address public masterChef;\r\n    address public old;\r\n    uint public lpPoolpid;\r\n\r\n    address public factory;\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function initialize(address _interestToken, address _collateralToken, address _poolAddress, address _sushiMasterChef, uint _lpPoolpid) public\r\n    {\r\n        require(msg.sender == factory, 'STRATEGY FORBIDDEN');\r\n        interestToken = _interestToken;\r\n        collateralToken = _collateralToken;\r\n        poolAddress = _poolAddress;\r\n        masterChef = _sushiMasterChef;\r\n        lpPoolpid = _lpPoolpid;\r\n        _setShareToken(_interestToken);\r\n    }\r\n\r\n    function migrate(address _old) external override \r\n    {\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        if(_old != address(0)) {\r\n            uint amount = IERC20(collateralToken).balanceOf(address(this));\r\n            if(amount > 0) {\r\n                IERC20(collateralToken).approve(masterChef, amount);\r\n                IMasterChef(masterChef).deposit(lpPoolpid, amount);\r\n            }\r\n\r\n            totalProductivity = BaseShareField(_old).totalProductivity();\r\n            old = _old;\r\n        }\r\n    }\r\n\r\n    function invest(address user, uint amount) external override\r\n    {\r\n        _sync(user);\r\n\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        TransferHelper.safeTransferFrom(collateralToken, msg.sender, address(this), amount);\r\n        IERC20(collateralToken).approve(masterChef, amount);\r\n        IMasterChef(masterChef).deposit(lpPoolpid, amount);\r\n        _increaseProductivity(user, amount);\r\n    }\r\n\r\n    function withdraw(address user, uint amount) external override\r\n    {\r\n        _sync(user);\r\n\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\r\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\r\n        _decreaseProductivity(user, amount);\r\n    }\r\n\r\n    function liquidation(address user) external override {\r\n        _sync(user);\r\n        _sync(msg.sender);\r\n\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        uint amount = users[user].amount;\r\n        _decreaseProductivity(user, amount);\r\n\r\n        uint reward = users[user].rewardEarn;\r\n        users[msg.sender].rewardEarn = users[msg.sender].rewardEarn.add(reward);\r\n        users[user].rewardEarn = 0;\r\n        _increaseProductivity(msg.sender, amount);\r\n    }\r\n\r\n    function claim(address user, uint amount, uint total) external override {\r\n        _sync(msg.sender);\r\n\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\r\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\r\n        _decreaseProductivity(msg.sender, amount);\r\n    \r\n        uint claimAmount = users[msg.sender].rewardEarn.mul(amount).div(total);\r\n        users[user].rewardEarn = users[user].rewardEarn.add(claimAmount);\r\n        users[msg.sender].rewardEarn = users[msg.sender].rewardEarn.sub(claimAmount);\r\n    }\r\n\r\n    function exit(uint amount) external override {\r\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\r\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\r\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\r\n    }\r\n\r\n    function _sync(address user) internal \r\n    {\r\n        if(old != address(0) && users[user].initialize == false) {\r\n            (uint amount, ) = BaseShareField(old).getProductivity(user);\r\n            users[user].amount = amount;\r\n            users[user].initialize = true;\r\n        } \r\n    }\r\n\r\n    function _currentReward() internal override view returns (uint) {\r\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).add(IMasterChef(masterChef).pendingSushi(lpPoolpid, address(this))).sub(totalShare);\r\n    }\r\n\r\n    function query() external override view returns (uint){\r\n        return _takeWithAddress(msg.sender);\r\n    }\r\n\r\n    function mint() external override {\r\n        _sync(msg.sender);\r\n        \r\n        IMasterChef(masterChef).deposit(lpPoolpid, 0);\r\n        uint amount = _mint(msg.sender);\r\n        emit Mint(msg.sender, amount);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/Configable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IConfig {\r\n    function developer() external view returns (address);\r\n    function platform() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function mint() external view returns (address);\r\n    function token() external view returns (address);\r\n    function developPercent() external view returns (uint);\r\n    function share() external view returns (address);\r\n    function base() external view returns (address); \r\n    function governor() external view returns (address);\r\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\r\n    function getValue(bytes32 key) external view returns(uint);\r\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \r\n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \r\n    function wallets(bytes32 key) external view returns(address);\r\n    function setValue(bytes32 key, uint value) external;\r\n    function setPoolValue(address pool, bytes32 key, uint value) external;\r\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\r\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\r\n    function initPoolParams(address _pool) external;\r\n    function isMintToken(address _token) external returns (bool);\r\n    function prices(address _token) external returns (uint);\r\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\r\n    function DAY() external view returns (uint);\r\n    function WETH() external view returns (address);\r\n}\r\n\r\ncontract Configable {\r\n    address public config;\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setupConfig(address _config) external onlyOwner {\r\n        config = _config;\r\n        owner = IConfig(config).developer();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDeveloper() {\r\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPlatform() {\r\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\r\n        _;\r\n    }\r\n}\r\n\r\n// Root file: contracts/SLPStrategyFactory.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n// import 'contracts/SLPStrategy.sol';\r\n// import 'contracts/modules/Configable.sol';\r\n\r\ninterface ISLPStrategy {\r\n    function initialize(address _interestToken, address _collateralToken, address _poolAddress, address _sushiMasterChef, uint _lpPoolpid) external;\r\n}\r\n\r\ninterface ISushiMasterChef {\r\n    function sushi() external view returns(address);\r\n}\r\n\r\ninterface IAAAAPool {\r\n    function collateralToken() external view returns(address);\r\n}\r\n\r\ncontract SLPStrategyFactory is Configable {\r\n    address public masterchef;\r\n    address[] public strategies;\r\n\r\n    event StrategyCreated(address indexed _strategy, address indexed _collateralToken, address indexed _poolAddress, uint _lpPoolpid);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function initialize(address _masterchef) onlyOwner public {\r\n        masterchef = _masterchef;\r\n    }\r\n\r\n    function createStrategy(address _collateralToken, address _poolAddress, uint _lpPoolpid) onlyDeveloper external returns (address _strategy) {\r\n        require(IAAAAPool(_poolAddress).collateralToken() == _collateralToken, 'Not found collateralToken in Pool');\r\n        (address cToken, , ,) = IMasterChef(masterchef).poolInfo(_lpPoolpid);\r\n        require(cToken == _collateralToken, 'Not found collateralToken in Masterchef');\r\n        \r\n        bytes memory bytecode = type(SLPStrategy).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_collateralToken, _poolAddress, _lpPoolpid, block.number));\r\n        assembly {\r\n            _strategy := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        address _interestToken = ISushiMasterChef(masterchef).sushi();\r\n        ISLPStrategy(_strategy).initialize(_interestToken, _collateralToken, _poolAddress, masterchef, _lpPoolpid);\r\n        emit StrategyCreated(_strategy, _collateralToken, _poolAddress, _lpPoolpid);\r\n        strategies.push(_strategy);\r\n        return _strategy;\r\n    }\r\n\r\n    function countStrategy() external view returns(uint) {\r\n        return strategies.length;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpPoolpid\",\"type\":\"uint256\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpPoolpid\",\"type\":\"uint256\"}],\"name\":\"createStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterchef\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SLPStrategyFactory","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1de005dc1ce0f4a7d74f5957fef278801b0c7f0f448d5e721864f787151add19"}]}