{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/ContractGuard.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n\r\n    modifier onlyOneBlock() {\r\n        require(\r\n            !checkSameOriginReentranted(),\r\n            'ContractGuard: one block, one function'\r\n        );\r\n        require(\r\n            !checkSameSenderReentranted(),\r\n            'ContractGuard: one block, one function'\r\n        );\r\n\r\n        _;\r\n\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// -License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/owner/Operator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract Operator is Context, Ownable {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n\r\n    constructor() internal {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            _operator == msg.sender,\r\n            'operator: caller is not the operator'\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(\r\n            newOperator_ != address(0),\r\n            'operator: zero address given for new operator'\r\n        );\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Epoch.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract Epoch is Operator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private period;\r\n    uint256 private startTime;\r\n    uint256 private lastExecutedAt;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        uint256 _period,\r\n        uint256 _startTime,\r\n        uint256 _startEpoch\r\n    ) public {\r\n        require(_startTime > block.timestamp, 'Epoch: invalid start time');\r\n        period = _period;\r\n        startTime = _startTime;\r\n        lastExecutedAt = startTime.add(_startEpoch.mul(period));\r\n    }\r\n\r\n    /* ========== Modifier ========== */\r\n\r\n    modifier checkStartTime {\r\n        require(now >= startTime, 'Epoch: not started yet');\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch {\r\n        require(now > startTime, 'Epoch: not started yet');\r\n        require(getCurrentEpoch() >= getNextEpoch(), 'Epoch: not allowed');\r\n\r\n        _;\r\n\r\n        lastExecutedAt = block.timestamp;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // epoch\r\n    function getLastEpoch() public view returns (uint256) {\r\n        return lastExecutedAt.sub(startTime).div(period);\r\n    }\r\n\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return Math.max(startTime, block.timestamp).sub(startTime).div(period);\r\n    }\r\n\r\n    function getNextEpoch() public view returns (uint256) {\r\n        if (startTime == lastExecutedAt) {\r\n            return getLastEpoch();\r\n        }\r\n        return getLastEpoch().add(1);\r\n    }\r\n\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return startTime.add(getNextEpoch().mul(period));\r\n    }\r\n\r\n    // params\r\n    function getPeriod() public view returns (uint256) {\r\n        return period;\r\n    }\r\n\r\n    function getStartTime() public view returns (uint256) {\r\n        return startTime;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setPeriod(uint256 _period) external onlyOperator {\r\n        period = _period;\r\n    }\r\n}\r\n\r\n// File: contracts/ProRataRewardCheckpoint.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n// This is forked and modified from https://github.com/BarnBridge/BarnBridge-YieldFarming/blob/master/contracts/Staking.sol\r\ncontract ProRataRewardCheckpoint {\r\n    using SafeMath for uint256;\r\n    uint256 private epochDuration;\r\n    uint256 private epoch1Start;\r\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\r\n    address private stakeToken;\r\n\r\n    struct Pool {\r\n        uint256 size;\r\n        bool set;\r\n    }\r\n\r\n    // for each token, we store the total pool size\r\n    mapping(uint256 => Pool) private poolSize;\r\n\r\n\r\n    // a checkpoint of the valid balance of a user for an epoch\r\n    struct Checkpoint {\r\n        uint128 epochId;\r\n        uint128 multiplier;\r\n        uint256 startBalance;\r\n        uint256 newDeposits;\r\n    }\r\n\r\n    // balanceCheckpoints[user][token][]\r\n    mapping(address => Checkpoint[]) private balanceCheckpoints;\r\n    uint128 private lastWithdrawEpochId;\r\n\r\n    constructor (uint256 _epochDuration, uint256 _epoch1Start, address _stakeToken) public {\r\n        epoch1Start = _epoch1Start;\r\n        epochDuration = _epochDuration;\r\n        stakeToken = _stakeToken;\r\n    }\r\n\r\n    // this is the fork from deposit\r\n    function depositCheckpoint(address user, uint256 amount, uint256 previousAmount, uint128 currentEpoch) internal {\r\n        IERC20 token = IERC20(stakeToken);\r\n\r\n        // epoch logic\r\n        uint128 currentMultiplier = currentEpochMultiplier(currentEpoch);\r\n\r\n        if (!epochIsInitialized(currentEpoch)) {\r\n            manualEpochInit(currentEpoch, currentEpoch);\r\n        }\r\n\r\n        // update the next epoch pool size\r\n        Pool storage pNextEpoch = poolSize[currentEpoch + 1];\r\n        pNextEpoch.size = token.balanceOf(address(this));\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\r\n\r\n        uint256 balanceBefore = getEpochUserBalance(user, currentEpoch);\r\n\r\n        // if there's no checkpoint yet, it means the user didn't have any activity\r\n        // we want to store checkpoints both for the current epoch and next epoch because\r\n        // if a user does a withdraw, the current epoch can also be modified and\r\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\r\n        if (checkpoints.length == 0) {\r\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\r\n\r\n            // next epoch => multiplier is 1, epoch deposits is 0\r\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\r\n        } else {\r\n            uint256 last = checkpoints.length - 1;\r\n\r\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\r\n            if (checkpoints[last].epochId < currentEpoch) {\r\n                uint128 multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    BASE_MULTIPLIER,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, previousAmount.add(amount), 0));\r\n            }\r\n            // the last action happened in the previous epoch\r\n            else if (checkpoints[last].epochId == currentEpoch) {\r\n                checkpoints[last].multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    checkpoints[last].multiplier,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\r\n\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, previousAmount.add(amount), 0));\r\n            }\r\n            // the last action happened in the current epoch\r\n            else {\r\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\r\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\r\n                        getCheckpointBalance(checkpoints[last - 1]),\r\n                        checkpoints[last - 1].multiplier,\r\n                        amount,\r\n                        currentMultiplier\r\n                    );\r\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\r\n                }\r\n\r\n                checkpoints[last].startBalance = previousAmount.add(amount);\r\n            }\r\n        }\r\n\r\n        uint256 balanceAfter = getEpochUserBalance(user, currentEpoch);\r\n\r\n        poolSize[currentEpoch].size = poolSize[currentEpoch].size.add(balanceAfter.sub(balanceBefore));\r\n    }\r\n\r\n    // this is the fork from withdraw\r\n   function withdrawCheckpoint(address user, uint256 amount, uint256 previousAmount, uint128 currentEpoch) internal {\r\n        IERC20 token = IERC20(stakeToken);\r\n        lastWithdrawEpochId = currentEpoch;\r\n\r\n        if (!epochIsInitialized(currentEpoch)) {\r\n            manualEpochInit(currentEpoch, currentEpoch);\r\n        }\r\n\r\n        // update the pool size of the next epoch to its current balance\r\n        Pool storage pNextEpoch = poolSize[currentEpoch + 1];\r\n        pNextEpoch.size = token.balanceOf(address(this));\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\r\n        uint256 last = checkpoints.length - 1;\r\n\r\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\r\n\r\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\r\n        if (checkpoints[last].epochId < currentEpoch) {\r\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, previousAmount.sub(amount), 0));\r\n\r\n            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\r\n        else if (checkpoints[last].epochId == currentEpoch) {\r\n            checkpoints[last].startBalance = previousAmount.sub(amount);\r\n            checkpoints[last].newDeposits = 0;\r\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\r\n\r\n            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the current epoch\r\n        else {\r\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\r\n\r\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            // in case of withdraw, we have 2 branches:\r\n            // 1. the user withdraws less than he added in the current epoch\r\n            // 2. the user withdraws more than he added in the current epoch (including 0)\r\n            if (amount < currentEpochCheckpoint.newDeposits) {\r\n                uint128 avgDepositMultiplier = uint128(\r\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\r\n                );\r\n\r\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\r\n\r\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\r\n                    currentEpochCheckpoint.startBalance,\r\n                    BASE_MULTIPLIER,\r\n                    currentEpochCheckpoint.newDeposits,\r\n                    avgDepositMultiplier\r\n                );\r\n            } else {\r\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\r\n                    amount.sub(currentEpochCheckpoint.newDeposits)\r\n                );\r\n                currentEpochCheckpoint.newDeposits = 0;\r\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\r\n            }\r\n\r\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\r\n\r\n            checkpoints[last].startBalance = previousAmount.sub(amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\r\n     * A deposit will only change the next epoch balance.\r\n     * A withdraw will decrease the current epoch (and subsequent) balance.\r\n     */\r\n    function getEpochUserBalance(address user, uint128 epochId) public view returns (uint256) {\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\r\n\r\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\r\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\r\n            return 0;\r\n        }\r\n\r\n        uint min = 0;\r\n        uint max = checkpoints.length - 1;\r\n\r\n        // shortcut for blocks newer than the latest checkpoint == current balance\r\n        if (epochId >= checkpoints[max].epochId) {\r\n            return getCheckpointEffectiveBalance(checkpoints[max]);\r\n        }\r\n\r\n        // binary search of the value in the array\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].epochId <= epochId) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n\r\n        return getCheckpointEffectiveBalance(checkpoints[min]);\r\n    }\r\n\r\n\r\n    /*\r\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\r\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\r\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\r\n     */\r\n    function manualEpochInit(uint128 epochId, uint128 currentEpoch) internal {\r\n        require(epochId <= currentEpoch, \"can't init a future epoch\");\r\n\r\n        Pool storage p = poolSize[epochId];\r\n\r\n        if (epochId == 0) {\r\n            p.size = uint256(0);\r\n            p.set = true;\r\n        } else {\r\n            require(!epochIsInitialized(epochId), \"Staking: epoch already initialized\");\r\n            require(epochIsInitialized(epochId - 1), \"Staking: previous epoch not initialized\");\r\n\r\n            p.size = poolSize[epochId - 1].size;\r\n            p.set = true;\r\n        }\r\n\r\n\r\n        // emit ManualEpochInit(msg.sender, epochId, tokens);\r\n    }\r\n\r\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\r\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\r\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\r\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\r\n\r\n        return newMultiplier;\r\n    }\r\n\r\n    /*\r\n     * Returns the percentage of time left in the current epoch\r\n     */\r\n    function currentEpochMultiplier(uint128 currentEpoch) public view returns (uint128) {\r\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\r\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\r\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\r\n\r\n        return multiplier;\r\n    }\r\n\r\n    /*\r\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\r\n    */\r\n    function getEpochPoolSize(uint128 epochId) public view returns (uint256) {\r\n        // Premises:\r\n        // 1. it's impossible to have gaps of uninitialized epochs\r\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\r\n        if (epochIsInitialized(epochId)) {\r\n            return poolSize[epochId].size;\r\n        }\r\n\r\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\r\n        if (!epochIsInitialized(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\r\n        // which means the current pool size is equal to the current balance of token held by the staking contract\r\n        IERC20 token = IERC20(stakeToken);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /*\r\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\r\n     */\r\n    function epochIsInitialized(uint128 epochId) public view returns (bool) {\r\n        return poolSize[epochId].set;\r\n    }\r\n\r\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return c.startBalance.add(c.newDeposits);\r\n    }\r\n\r\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IFeeDistributorRecipient.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract IFeeDistributorRecipient is Ownable {\r\n    address public feeDistributor;\r\n\r\n    modifier onlyFeeDistributor() {\r\n        require(\r\n            _msgSender() == feeDistributor,\r\n            'Caller is not fee distributor'\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setFeeDistributor(address _feeDistributor)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        feeDistributor = _feeDistributor;\r\n    }\r\n}\r\n\r\n// File: contracts/Boardroomv2.sol\r\n\r\npragma solidity ^0.6.0;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ShareWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public share;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function stake(uint256 amount) public virtual {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        share.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public virtual {\r\n        uint256 directorShare = _balances[msg.sender];\r\n        require(\r\n            directorShare >= amount,\r\n            'Boardroom: withdraw request greater than staked amount'\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = directorShare.sub(amount);\r\n        share.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract Boardroomv2 is ShareWrapper, ContractGuard, Epoch, ProRataRewardCheckpoint, IFeeDistributorRecipient{\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== DATA STRUCTURES ========== */\r\n\r\n    struct Boardseat {\r\n        uint256 lastSnapshotIndex;\r\n        uint256 startEpoch;\r\n        uint256 lastEpoch;\r\n        mapping(uint256 => uint256) rewardEarned;\r\n    }\r\n\r\n    struct BoardSnapshot {\r\n        uint256 time;\r\n        uint256 rewardReceived;\r\n        uint256 rewardPerShare;\r\n    }\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IERC20 private cash;\r\n\r\n    mapping(address => Boardseat) private directors;\r\n    BoardSnapshot[] private boardHistory;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(IERC20 _cash, IERC20 _share, uint256 _startTime)\r\n        public Epoch(6 hours, _startTime, 0)\r\n        ProRataRewardCheckpoint(6 hours, _startTime, address(_share))\r\n    {\r\n        cash = _cash;\r\n        share = _share;\r\n\r\n        BoardSnapshot memory genesisSnapshot = BoardSnapshot({\r\n            time: block.number,\r\n            rewardReceived: 0,\r\n            rewardPerShare: 0\r\n        });\r\n        boardHistory.push(genesisSnapshot);\r\n    }\r\n\r\n    /* ========== Modifiers =============== */\r\n    modifier directorExists {\r\n        require(\r\n            balanceOf(msg.sender) > 0,\r\n            'Boardroom: The director does not exist'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address director) {\r\n        if (director != address(0)) {\r\n            Boardseat storage seat = directors[director];\r\n            uint256 currentEpoch = getCurrentEpoch();\r\n\r\n            seat.rewardEarned[currentEpoch] = seat.rewardEarned[currentEpoch].add(earnedNew(director));\r\n            seat.lastEpoch = currentEpoch;\r\n            seat.lastSnapshotIndex = latestSnapshotIndex();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function calculateClaimableRewardsForEpoch(address wallet, uint256 epoch) view public returns (uint256) {\r\n        return calculateClaimable(directors[wallet].rewardEarned[epoch], epoch);\r\n    }\r\n\r\n    function calculateClaimable(uint256 earned, uint256 epoch) view public returns (uint256) {\r\n        uint256 epoch_delta = getCurrentEpoch() - epoch;\r\n\r\n        uint256 ten = 10;\r\n        uint256 five = 5;\r\n        uint256 tax_percentage = (epoch_delta > 4) ? 0 : ten.mul(five.sub(epoch_delta));\r\n\r\n        uint256 hundred = 100;\r\n        return earned.mul(hundred.sub(tax_percentage)).div(hundred);\r\n    }\r\n\r\n    // staking before start time regards as staking at epoch 0.\r\n    function getCheckpointEpoch() view public returns(uint128) {\r\n        uint256 currentEpoch = getCurrentEpoch();\r\n        return uint128(currentEpoch) + 1;\r\n\r\n    }\r\n\r\n    // =========== Snapshot getters\r\n\r\n    function latestSnapshotIndex() public view returns (uint256) {\r\n        return boardHistory.length.sub(1);\r\n    }\r\n\r\n    function getLatestSnapshot() internal view returns (BoardSnapshot memory) {\r\n        return boardHistory[latestSnapshotIndex()];\r\n    }\r\n\r\n    function getLastSnapshotIndexOf(address director)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return directors[director].lastSnapshotIndex;\r\n    }\r\n\r\n    function getLastSnapshotOf(address director)\r\n        internal\r\n        view\r\n        returns (BoardSnapshot memory)\r\n    {\r\n        return boardHistory[getLastSnapshotIndexOf(director)];\r\n    }\r\n\r\n    // =========== Director getters\r\n\r\n    function rewardPerShare() public view returns (uint256) {\r\n        return getLatestSnapshot().rewardPerShare;\r\n    }\r\n\r\n    function earned(address director) public view returns (uint256) {\r\n        uint256 totalRewards = 0;\r\n\r\n        for (uint i = directors[director].startEpoch; i <= directors[director].lastEpoch; i++) {\r\n            totalRewards = totalRewards.add(calculateClaimableRewardsForEpoch(director, i));\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function stake(uint256 amount)\r\n        public\r\n        override\r\n        onlyOneBlock\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, 'Boardroom: Cannot stake 0');\r\n        uint256 previousBalance = balanceOf(msg.sender);\r\n        super.stake(amount);\r\n        depositCheckpoint(msg.sender, amount, previousBalance, getCheckpointEpoch());\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount)\r\n        public\r\n        override\r\n        onlyOneBlock\r\n        directorExists\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, 'Boardroom: Cannot withdraw 0');\r\n        uint256 previousBalance = balanceOf(msg.sender);\r\n        super.withdraw(amount);\r\n        withdrawCheckpoint(msg.sender, amount, previousBalance, getCheckpointEpoch());\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n\r\n        claimReward(earned(msg.sender));\r\n    }\r\n\r\n    function claimReward(uint256 amount)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, 'Amount cannot be zero');\r\n        uint256 totalClaimAmount = amount;\r\n        uint256 totalEarned = earned(msg.sender);\r\n        require(amount <= totalEarned, 'Amount cannot be larger than total claimable rewards');\r\n\r\n        cash.safeTransfer(msg.sender, amount);\r\n\r\n        for (uint i = directors[msg.sender].startEpoch; amount > 0; i++) {\r\n            uint256 claimable = calculateClaimableRewardsForEpoch(msg.sender, i);\r\n\r\n            if (amount > claimable) {\r\n                directors[msg.sender].rewardEarned[i] = 0;\r\n                directors[msg.sender].startEpoch = i.add(1);\r\n                amount = amount.sub(claimable);\r\n            } else {\r\n                removeRewardsForEpoch(msg.sender, amount, i);\r\n                amount = 0;\r\n            }\r\n        }\r\n\r\n        // In this case, startEpoch will be calculated again for the next stake\r\n        if (amount == totalEarned) {\r\n            directors[msg.sender].startEpoch = 0;\r\n        }\r\n\r\n        emit RewardPaid(msg.sender, totalClaimAmount);\r\n    }\r\n\r\n    // Claim rewards for specific epoch\r\n    function claimRewardsForEpoch(uint256 amount, uint256 epoch)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, 'Amount cannot be zero');\r\n\r\n        uint256 claimable = calculateClaimableRewardsForEpoch(msg.sender, epoch);\r\n\r\n        if (claimable > 0) {\r\n            require(\r\n                amount <= claimable,\r\n                'Amount cannot be larger than the claimable rewards for the epoch'\r\n            );\r\n\r\n            cash.safeTransfer(msg.sender, amount);\r\n\r\n            removeRewardsForEpoch(msg.sender, amount, epoch);\r\n        }\r\n    }\r\n\r\n    function allocateSeigniorage(uint256 amount)\r\n        external\r\n        onlyOneBlock\r\n        onlyOperator\r\n    {\r\n        require(amount > 0, 'Boardroom: Cannot allocate 0');\r\n        require(\r\n            totalSupply() > 0,\r\n            'Boardroom: Cannot allocate when totalSupply is 0'\r\n        );\r\n\r\n        // Create & add new snapshot\r\n        BoardSnapshot memory latestSnapshot = getLatestSnapshot();\r\n        uint256 prevRPS = latestSnapshot.rewardPerShare;\r\n        uint256 poolSize = getEpochPoolSize(getCheckpointEpoch());\r\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(poolSize));\r\n\r\n        BoardSnapshot memory newSnapshot = BoardSnapshot({\r\n            time: block.number,\r\n            rewardReceived: amount,\r\n            rewardPerShare: nextRPS\r\n        });\r\n        boardHistory.push(newSnapshot);\r\n\r\n        cash.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit RewardAdded(msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\r\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\r\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\r\n     */\r\n    function manualCheckpointEpochInit(uint128 checkpointEpochId) public {\r\n        manualEpochInit(checkpointEpochId, getCheckpointEpoch());\r\n    }\r\n\r\n    function allocateTaxes(uint256 amount)\r\n        external\r\n        onlyOneBlock\r\n        onlyFeeDistributor\r\n    {\r\n        require(amount > 0, 'Boardroom: Cannot allocate 0');\r\n        require(\r\n            totalSupply() > 0,\r\n            'Boardroom: Cannot allocate when totalSupply is 0'\r\n        );\r\n        // Create & add new snapshot\r\n        BoardSnapshot memory latestSnapshot = getLatestSnapshot();\r\n        uint256 prevRPS = latestSnapshot.rewardPerShare;\r\n        uint256 poolSize = getEpochPoolSize(getCheckpointEpoch());\r\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(poolSize));\r\n\r\n        BoardSnapshot memory newSnapshot = BoardSnapshot({\r\n            time: block.number,\r\n            rewardReceived: amount,\r\n            rewardPerShare: nextRPS\r\n        });\r\n        boardHistory.push(newSnapshot);\r\n\r\n        cash.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit RewardAdded(msg.sender, amount);\r\n\r\n    }\r\n\r\n    function earnedNew(address director) private view returns (uint256) {\r\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\r\n        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\r\n        uint256 directorEffectiveBalance = getEpochUserBalance(director, getCheckpointEpoch());\r\n\r\n        return\r\n            directorEffectiveBalance.mul(latestRPS.sub(storedRPS)).div(1e18);\r\n    }\r\n\r\n    function removeRewardsForEpoch(address wallet, uint256 amount, uint256 epoch) private\r\n        onlyOneBlock\r\n    {\r\n        uint256 claimable = calculateClaimableRewardsForEpoch(wallet, epoch);\r\n\r\n        if (claimable > 0) {\r\n            require(\r\n                amount <= claimable,\r\n                'Amount cannot be larger than the claimable rewards for the epoch'\r\n            );\r\n\r\n            directors[wallet].rewardEarned[epoch] =\r\n                claimable.sub(amount).mul(directors[wallet].rewardEarned[epoch]).div(claimable);\r\n        }\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardAdded(address indexed user, uint256 reward);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cash\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"calculateClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"calculateClaimableRewardsForEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"claimRewardsForEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"prevMultiplier\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentMultiplier\",\"type\":\"uint128\"}],\"name\":\"computeNewMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"currentEpoch\",\"type\":\"uint128\"}],\"name\":\"currentEpochMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"epochIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCheckpointEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"getLastSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"checkpointEpochId\",\"type\":\"uint128\"}],\"name\":\"manualCheckpointEpochInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Boardroomv2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eed0c8d2da6d243329a6f4a8c2ac61a59ecbfa02000000000000000000000000b58dfbb72e648a0b035b8c85b3628123cc9bb8810000000000000000000000000000000000000000000000000000000060387240","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b68e8dbc4c33d8a2cc982966c9b2223cbbf93bbd18625cf62af064552c6e7f9"}]}