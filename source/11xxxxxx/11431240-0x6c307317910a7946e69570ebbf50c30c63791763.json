{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }   \r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract Whitelisted {\r\n    mapping (address => bool) WhiteBearer;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n    \r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return WhiteBearer[account];\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal virtual {\r\n        WhiteBearer[account] = true;\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal virtual {\r\n        WhiteBearer[account] = false;\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\nabstract contract Bluelisted {\r\n    mapping (address => bool) BlueBearer;\r\n\r\n    event BluelistededAdded(address indexed account);\r\n    event BluelistedRemoved(address indexed account);\r\n    \r\n\r\n    function isBluelisted(address account) public view returns (bool) {\r\n        return BlueBearer[account];\r\n    }\r\n\r\n    function _addBluelisted(address account) internal virtual {\r\n        BlueBearer[account] = true;\r\n        emit BluelistededAdded(account);\r\n    }\r\n\r\n    function _removeBluelisted(address account) internal virtual {\r\n        BlueBearer[account] = false;\r\n        emit BluelistedRemoved(account);\r\n    }\r\n}\r\n\r\ncontract CrowdSale is Ownable, Whitelisted, Bluelisted {\r\n    using SafeMath for uint256;\r\n    \r\n    struct holdTokens {\r\n        uint256 releseHeldTime;\r\n        uint8 round;\r\n        uint256 amount;\r\n        uint256 installment;\r\n    }\r\n    \r\n    mapping(address => uint256[]) purchaseList;\r\n    mapping(address => mapping(uint256 => holdTokens)) purchaseDetails;\r\n    \r\n    uint256 private lockTokens;\r\n    uint256 private randomNonce = 1;\r\n    \r\n    // The token being sold\r\n    IERC20 public token;\r\n    \r\n    // Max Sellable Token\r\n    uint256 public maxSaleToken;\r\n    // Tokens currently sold\r\n    uint256 public currentSoldToken;\r\n    // 1 wei to AQUbits exchange rate\r\n    uint256 public rate;\r\n    \r\n    // Lock tokens for months\r\n    uint8 public lockForMonths;\r\n    // Whether to sell\r\n    bool public isSale;\r\n    \r\n    constructor (IERC20 token_, uint256 rate_, uint8 lockForMonths_) public {\r\n        require(address(token_) != address(0));\r\n        require(rate_ > 0);\r\n        \r\n        token = token_;\r\n        rate = rate_;\r\n        lockForMonths = lockForMonths_;\r\n        isSale = true;\r\n    }\r\n    \r\n    function startSale() public onlyOwner {\r\n        require(!isSale);\r\n        isSale = true;\r\n    }\r\n    \r\n    function stopSale() public onlyOwner {\r\n        require(isSale);\r\n        isSale = false;\r\n    }\r\n    \r\n    /**\r\n     * 1USDToWei = 10 ^ 18 / EtherToUSD\r\n     * 1weiToAQUbits = 10 ^ 18 / 1USDtowei\r\n     * rate = 1weiToAQUbits / AQUToUSD_\r\n     **/\r\n    function updateRate(uint256 rate_) public onlyOwner {\r\n        require(rate != rate_);\r\n        \r\n        rate = rate_;\r\n    }\r\n\r\n    function updateLockForMonths(uint8 lockForMonths_) public onlyOwner {\r\n        require(lockForMonths != lockForMonths_);\r\n\r\n        lockForMonths = lockForMonths_;\r\n    }\r\n    \r\n    function addMaxSaleToken(uint256 amount) public onlyOwner {\r\n        require(token.balanceOf(_msgSender()) >= amount);\r\n        \r\n        maxSaleToken = maxSaleToken.add(amount);\r\n        token.transferFrom(_msgSender(), address(this), amount);\r\n    }\r\n    \r\n    fallback() external payable {\r\n        require(isBluelisted(_msgSender()) || isWhitelisted(_msgSender()));\r\n        \r\n        if (isBluelisted(_msgSender())){\r\n            buyTokens();\r\n        } \r\n        \r\n        if (isWhitelisted(_msgSender())){\r\n            buyLockTokens();    \r\n        }\r\n    }\r\n    \r\n    function buyTokens() public payable {\r\n        require(isSale);\r\n    \r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = rate.mul(weiAmount);\r\n        \r\n        require(tokens <= getSaleableBalanceToken());\r\n        \r\n        currentSoldToken = currentSoldToken.add(tokens);\r\n        token.transfer(_msgSender(), tokens);\r\n    }\r\n\r\n    function buyLockTokens() public payable {\r\n        require(isSale);\r\n    \r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = rate.mul(weiAmount);\r\n        \r\n        require(tokens <= getSaleableBalanceToken());\r\n        \r\n        uint256 timestamp = block.timestamp;\r\n        uint256 LockForTime = uint256(lockForMonths).mul(30 days);\r\n        uint256 nonce = uint256(keccak256(abi.encode(timestamp, msg.sender, randomNonce)));\r\n        \r\n        randomNonce++;\r\n        \r\n        lockTokens = lockTokens.add(tokens);\r\n        currentSoldToken = currentSoldToken.add(tokens);\r\n        purchaseList[_msgSender()].push(nonce);\r\n        \r\n        purchaseDetails[_msgSender()][nonce].releseHeldTime = timestamp.add(LockForTime);\r\n        purchaseDetails[_msgSender()][nonce].round = 1;\r\n        purchaseDetails[_msgSender()][nonce].amount = tokens;\r\n        purchaseDetails[_msgSender()][nonce].installment = tokens.div(uint256(5));\r\n    }\r\n    \r\n    function getContractBalanceEther() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getContractBalanceToken() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function getSaleableBalanceToken() public view returns (uint256) {\r\n        return maxSaleToken.sub(currentSoldToken);\r\n    }\r\n    \r\n    function addWhitelisted(address account) public virtual onlyOwner {\r\n        require(!isBluelisted(account));\r\n        require(!isWhitelisted(account));\r\n        \r\n        Whitelisted.WhiteBearer[account] = true;\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public virtual onlyOwner {\r\n        require(isWhitelisted(account));\r\n        \r\n        Whitelisted.WhiteBearer[account] = false;\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n    \r\n    function addBluelisted(address account) public virtual onlyOwner {\r\n        require(!isBluelisted(account));\r\n        require(!isWhitelisted(account));\r\n        \r\n        Bluelisted.BlueBearer[account] = true;\r\n        emit BluelistededAdded(account);\r\n    }\r\n\r\n    function removeBluelisted(address account) public virtual onlyOwner {\r\n        require(isBluelisted(account));\r\n        \r\n        Bluelisted.BlueBearer[account] = false;\r\n        emit BluelistedRemoved(account);\r\n    }\r\n    \r\n    function withdrawEther() public onlyOwner {\r\n        require(address(this).balance > 0);\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawToken() public onlyOwner {\r\n        require(getContractBalanceToken() > 0);\r\n        \r\n        token.transfer(owner(), token.balanceOf(address(this)).sub(lockTokens));\r\n        maxSaleToken = currentSoldToken;\r\n    }\r\n    \r\n    function getPurchaseList(address account) public view returns (uint256[] memory) {\r\n        return purchaseList[account];\r\n    }\r\n    \r\n    function getPurchaseDetails(address account, uint256 nonce) public view returns (holdTokens memory) {\r\n        return purchaseDetails[account][nonce];\r\n    }\r\n    \r\n    function removePurchaseList(address account, uint256 nonce) public onlyOwner {\r\n        lockTokens = lockTokens.sub(purchaseDetails[account][nonce].amount);\r\n        currentSoldToken = currentSoldToken.sub(purchaseDetails[account][nonce].amount);\r\n        \r\n        for (uint256 index = 0; index < purchaseList[account].length; index++) {\r\n            if (purchaseList[account][index] == nonce) {\r\n                purchaseList[account][index] = 0;\r\n            }\r\n        }\r\n        delete purchaseDetails[account][nonce];\r\n    }\r\n    \r\n    function releaseHeldTokens(uint256 nonce) public {\r\n        require(block.timestamp >= purchaseDetails[_msgSender()][nonce].releseHeldTime);\r\n        require(purchaseDetails[_msgSender()][nonce].round > 0);\r\n        \r\n        uint256 releseHeldTime = purchaseDetails[_msgSender()][nonce].releseHeldTime;\r\n        uint256 installment = purchaseDetails[_msgSender()][nonce].installment;\r\n        uint8 round = purchaseDetails[_msgSender()][nonce].round;\r\n        uint8 count = 0;\r\n        \r\n        while(round <= 5) {\r\n            if(releseHeldTime > block.timestamp) {\r\n                break;\r\n            } else if(releseHeldTime <= block.timestamp){\r\n                count++;\r\n                releseHeldTime = releseHeldTime.add(30 days);\r\n            }\r\n            round++;\r\n        }\r\n\r\n        if (round <= 5) {\r\n            installment = installment.mul(uint256(count));\r\n            \r\n            purchaseDetails[_msgSender()][nonce].releseHeldTime = releseHeldTime;\r\n            purchaseDetails[_msgSender()][nonce].round = round;\r\n            purchaseDetails[_msgSender()][nonce].amount = purchaseDetails[_msgSender()][nonce].amount.sub(installment);\r\n            \r\n            lockTokens = lockTokens.sub(installment);\r\n            \r\n            token.transfer(_msgSender(), installment);\r\n        } else if (round > 5) {\r\n            installment = installment.mul(uint256(count));\r\n            \r\n            purchaseDetails[_msgSender()][nonce].releseHeldTime = 0;\r\n            purchaseDetails[_msgSender()][nonce].round = 0;\r\n            purchaseDetails[_msgSender()][nonce].amount = 0;\r\n            purchaseDetails[_msgSender()][nonce].installment = 0;\r\n            \r\n            lockTokens = lockTokens.sub(installment);\r\n            \r\n            token.transfer(_msgSender(), installment);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lockForMonths_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BluelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BluelistededAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBluelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMaxSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSoldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getPurchaseDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releseHeldTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"installment\",\"type\":\"uint256\"}],\"internalType\":\"struct CrowdSale.holdTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPurchaseList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleableBalanceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBluelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockForMonths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"releaseHeldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBluelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"removePurchaseList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lockForMonths_\",\"type\":\"uint8\"}],\"name\":\"updateLockForMonths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cb1d556d25848dd0f3216f09e7f2570f80ee2a650000000000000000000000000000000000000000000000000000000000001a650000000000000000000000000000000000000000000000000000000000000006","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2deeaf52461b6177a9ee76f19aee3e57293b5449e6767ac2bc4c8bd667be9d62"}]}