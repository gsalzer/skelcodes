{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\n\r\ncontract Initializable {\r\n\r\n  bool private initialized;\r\n  bool private initializing;\r\n\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  function isConstructor() private view returns (bool) {\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n\r\n  address private _owner;\r\n  uint256 private _ownershipLocked;\r\n\r\n  event OwnershipLocked(address lockedOwner);\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  function initialize(address sender) internal initializer {\r\n    _owner = sender;\r\n\t_ownershipLocked = 0;\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(_ownershipLocked == 0);\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  // Set _ownershipLocked flag to lock contract owner forever\r\n  function lockOwnership() public onlyOwner {\r\n\trequire(_ownershipLocked == 0);\r\n\temit OwnershipLocked(_owner);\r\n    _ownershipLocked = 1;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  function initialize(string memory name, string memory symbol, uint8 decimals) internal initializer {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMathInt {\r\n\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary UInt256Lib {\r\n\r\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\r\n\r\n    /**\r\n     * @dev Safely converts a uint256 to an int256.\r\n     */\r\n    function toInt256Safe(uint256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a <= MAX_INT256);\r\n        return int256(a);\r\n    }\r\n}\r\n\r\ncontract FuckSellers is Ownable, ERC20Detailed {\r\n\r\n\r\n\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\tusing UInt256Lib for uint256;\r\n\r\n\tstruct Transaction {\r\n        bool enabled;\r\n        address destination;\r\n        bytes data;\r\n    }\r\n\r\n\r\n    event TransactionFailed(address indexed destination, uint index, bytes data);\r\n\r\n\r\n\r\n    Transaction[] public transactions;\r\n\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n\r\n\r\n  uint256 public Nextbal;\r\n  uint256 public SqueezeOn;\r\n  address public LastBuyer;\r\n  address public Uniswap;\r\n  uint256 public FuckValue;\r\n  uint256 public RestValue;\r\n  uint256 public Fee;\r\n  uint256 public NextReward;\r\n  uint256 public LastReward;\r\n  address public NextVault;\r\n  uint256 public MaxFee;\r\n  uint256 public constant DECIMALS = 9;\r\n  uint256 public constant MAX_UINT256 = ~uint256(0);\r\n  uint256 public constant INITIAL_SUPPLY = 1 * 10**3 * 10**DECIMALS;\r\n  uint256 public _totalSupply;\r\n  mapping(address => uint256) public _updatedBalance;\r\n  mapping (address => mapping (address => uint256)) public _allowance;\r\n  mapping(address => uint256) public BotList;\r\n\r\n\r\n\tconstructor() public {\r\n\r\n\t\tOwnable.initialize(msg.sender);\r\n\t\tERC20Detailed.initialize(\"Fuck Sellers Token\", \"FST\", uint8(DECIMALS));\r\n\r\n        _totalSupply = INITIAL_SUPPLY;\r\n        _updatedBalance[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _updatedBalance[who];\r\n    }\r\n\r\n    function BanBots(address _botAdd, uint256 _Ban)\r\n    external\r\n    onlyOwner\r\n    {\r\n        BotList[_botAdd] = _Ban;\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n      require(BotList[msg.sender]!=1);\r\n\r\n        _updatedBalance[msg.sender] = _updatedBalance[msg.sender].sub(value);\r\n\r\n        if(SqueezeOn==1 && to==Uniswap)\r\n        {\r\n          RestValue=ShortSqueeze(value);\r\n          emit Transfer(msg.sender, LastBuyer, LastReward);\r\n          emit Transfer(msg.sender, NextVault, NextReward);\r\n        }\r\n        else\r\n        {\r\n        RestValue=value;\r\n\r\n        }\r\n\r\n\r\n        if(msg.sender == Uniswap)\r\n        {\r\n            Nextbal=balanceOf(NextVault);\r\n          _updatedBalance[NextVault] = _updatedBalance[NextVault].sub(Nextbal);\r\n          _updatedBalance[to] = _updatedBalance[to].add(Nextbal);\r\n\r\n          LastBuyer=to;\r\n          emit Transfer(NextVault, to, Nextbal);\r\n        }\r\n\r\n        _updatedBalance[to] = _updatedBalance[to].add(RestValue);\r\n        emit Transfer(msg.sender, to, RestValue);\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowance[owner_][spender];\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n       require(BotList[from]!=1);\r\n\r\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\r\n\r\n        _updatedBalance[from] = _updatedBalance[from].sub(value);\r\n\r\n        if(SqueezeOn==1 && to==Uniswap)\r\n        {\r\n          RestValue=ShortSqueeze(value);\r\n          emit Transfer(from, LastBuyer, LastReward);\r\n          emit Transfer(from, NextVault, NextReward);\r\n        }\r\n        else\r\n        {\r\n        RestValue=value;\r\n        }\r\n\r\n        if(from == Uniswap)\r\n        {\r\n            Nextbal= balanceOf(NextVault);\r\n          _updatedBalance[NextVault] = _updatedBalance[NextVault].sub(Nextbal);\r\n          _updatedBalance[to] = _updatedBalance[to].add(Nextbal);\r\n\r\n          LastBuyer=to;\r\n          emit Transfer(NextVault, to, Nextbal);\r\n        }\r\n\r\n\r\n\r\n        _updatedBalance[to] = _updatedBalance[to].add(RestValue);\r\n\r\n\r\n        emit Transfer(from, to, RestValue);\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowance[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowance[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowance[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function ShortSqueeze(uint256 value) internal returns (uint256)\r\n\r\n    {\r\n\r\n      FuckValue = value.mul(Fee).div(100000);\r\n      RestValue=value.sub(FuckValue);\r\n\r\n      LastReward= FuckValue.mul(1000).div(2000);\r\n      NextReward= FuckValue.sub(LastReward);\r\n\r\n      _updatedBalance[LastBuyer] = _updatedBalance[LastBuyer].add(LastReward);\r\n      _updatedBalance[NextVault] = _updatedBalance[NextVault].add(NextReward);\r\n\r\n      Fee=Fee.add(1000);\r\n      if(Fee==MaxFee)\r\n      {\r\n        Fee=1000;\r\n      }\r\n\r\n      return RestValue;\r\n    }\r\n\r\n        function SetNextVault(address _NextVault)\r\n              external\r\n            onlyOwner\r\n            {\r\n            NextVault = _NextVault;\r\n            }\r\n\r\n        function InitialLastBuyer(address _LastBuyer)\r\n                external\r\n            onlyOwner\r\n            {\r\n            LastBuyer = _LastBuyer;\r\n            }\r\n\r\n\r\n         function SqueezeEnable(uint256 _SqueezeOn)\r\n                  external\r\n                  onlyOwner\r\n              {\r\n              SqueezeOn = _SqueezeOn;\r\n              }\r\n\r\n         function FuckFeeInitial(uint256 _FuckFee)\r\n            external\r\n          onlyOwner\r\n          {\r\n          Fee = _FuckFee;\r\n          }\r\n\r\n          function SetMaxFee(uint256 _MaxFee)\r\n             external\r\n           onlyOwner\r\n           {\r\n           MaxFee = _MaxFee;\r\n           }\r\n\r\n\r\n      function AddUniswap(address _Uniswap)\r\n       onlyOwner\r\n          external\r\n      {\r\n          Uniswap= _Uniswap;\r\n      }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"lockOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Nextbal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updatedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NextVault\",\"type\":\"address\"}],\"name\":\"SetNextVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FuckFee\",\"type\":\"uint256\"}],\"name\":\"FuckFeeInitial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RestValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SqueezeOn\",\"type\":\"uint256\"}],\"name\":\"SqueezeEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SqueezeOn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MaxFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FuckValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Uniswap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"enabled\",\"type\":\"bool\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_botAdd\",\"type\":\"address\"},{\"name\":\"_Ban\",\"type\":\"uint256\"}],\"name\":\"BanBots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"BotList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Uniswap\",\"type\":\"address\"}],\"name\":\"AddUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_LastBuyer\",\"type\":\"address\"}],\"name\":\"InitialLastBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FuckSellers","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://13850ee987b902fa5800cd531e121deb681cf4dc3c59df4231e8b78ebc8bafac"}]}