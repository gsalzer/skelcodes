{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function upgrade(uint256 value) external;\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MystMigrator {\r\n    using SafeMath for uint256;\r\n\r\n    address internal _beneficiary; // address which will receive migrated tokens\r\n    IERC20 public _legacyToken; // legacy MYST token\r\n    IERC20 public _token; // new MYST token\r\n\r\n    function getBeneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    constructor(\r\n        address legacyAddress,\r\n        address newAddress,\r\n        address beneficiary\r\n    ) public {\r\n        _legacyToken = IERC20(legacyAddress);\r\n        _token = IERC20(newAddress);\r\n        _beneficiary = beneficiary;\r\n    }\r\n\r\n    fallback() external payable {\r\n        _legacyToken.upgrade(_legacyToken.balanceOf(address(this)));\r\n        _token.transfer(_beneficiary, _token.balanceOf(address(this)));\r\n\r\n        // Return any eth sent to this address\r\n        if (msg.value > 0) {\r\n            (bool success, ) = address(msg.sender).call{value: msg.value}(\"\");\r\n            require(\r\n                success,\r\n                \"Unable to send ethers back, recipient may have reverted\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will call upgrade in legacy MYST token contract.\r\n     * This will upgrade given amount of holded by this smart contract legacyMYST into new MYST\r\n     */\r\n    function upgrade(uint256 amount) public {\r\n        _legacyToken.upgrade(amount);\r\n    }\r\n\r\n    /**\r\n     * Setting new beneficiary of funds.\r\n     */\r\n    function setBeneficiary(address newBeneficiary) public {\r\n        require(\r\n            msg.sender == _beneficiary,\r\n            \"Only a current beneficiary can set new one\"\r\n        );\r\n        require(\r\n            newBeneficiary != address(0),\r\n            \"Beneficiary can't be zero addreess\"\r\n        );\r\n\r\n        _beneficiary = newBeneficiary;\r\n    }\r\n\r\n    /**\r\n       Transfers selected tokens into `_beneficiary` address.\r\n    */\r\n    function claimTokens(address token) public {\r\n        require(\r\n            _beneficiary != address(0),\r\n            \"Beneficiary can't be zero addreess\"\r\n        );\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(_beneficiary, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"legacyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_legacyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MystMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a645264c5603e96c3b0b078cdab68733794b0a710000000000000000000000004cf89ca06ad997bc732dc876ed2a7f26a9e7f361000000000000000000000000fbb1b73c4f0bda4f67dca266ce6ef42f520fbb98","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5913c3f666de7a597ccf22a854b64ac07d047374f258336790eeeec19fd71e10"}]}