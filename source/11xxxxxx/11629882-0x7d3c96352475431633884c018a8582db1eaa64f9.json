{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.6 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/library/BasisPoints.sol\r\n\r\npragma solidity =0.6.6;\r\nlibrary BasisPoints {\r\n    using SafeMathUpgradeable for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILiftoffEngine.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface ILiftoffEngine {\r\n    function launchToken(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint256 _totalSupply,\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _projectDev\r\n    ) external returns (uint256 tokenId);\r\n\r\n    function igniteEth(uint256 _tokenSaleId) external payable;\r\n\r\n    function ignite(\r\n        uint256 _tokenSaleId,\r\n        address _for,\r\n        uint256 _amountXEth\r\n    ) external;\r\n\r\n    function claimReward(uint256 _tokenSaleId, address _for) external;\r\n\r\n    function spark(uint256 _tokenSaleId) external;\r\n\r\n    function claimRefund(uint256 _tokenSaleId, address _for) external;\r\n\r\n    function getTokenSale(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            uint256 softCap,\r\n            uint256 hardCap,\r\n            uint256 totalIgnited,\r\n            uint256 totalSupply,\r\n            uint256 rewardSupply,\r\n            address projectDev,\r\n            address deployed,\r\n            bool isSparked\r\n        );\r\n\r\n    function getTokenSaleForInsurance(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalIgnited,\r\n            uint256 rewardSupply,\r\n            address projectDev,\r\n            address pair,\r\n            address deployed\r\n        );\r\n\r\n    function isSparkReady(\r\n        uint256 endTime,\r\n        uint256 totalIgnited,\r\n        uint256 hardCap,\r\n        uint256 softCap,\r\n        bool isSparked\r\n    ) external view returns (bool);\r\n\r\n    function isIgniting(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 totalIgnited,\r\n        uint256 hardCap\r\n    ) external view returns (bool);\r\n\r\n    function isRefunding(\r\n        uint256 endTime,\r\n        uint256 softCap,\r\n        uint256 totalIgnited\r\n    ) external view returns (bool);\r\n\r\n    function getReward(\r\n        uint256 ignited,\r\n        uint256 rewardSupply,\r\n        uint256 totalIgnited\r\n    ) external pure returns (uint256 reward);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILiftoffSettings.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface ILiftoffSettings {\r\n    function setAllUints(\r\n        uint256 _ethXLockBP,\r\n        uint256 _tokenUserBP,\r\n        uint256 _insurancePeriod,\r\n        uint256 _baseFeeBP,\r\n        uint256 _ethBuyBP,\r\n        uint256 _projectDevBP,\r\n        uint256 _mainFeeBP,\r\n        uint256 _lidPoolBP\r\n    ) external;\r\n\r\n    function setAllAddresses(\r\n        address _liftoffInsurance,\r\n        address _liftoffRegistration,\r\n        address _liftoffEngine,\r\n        address _xEth,\r\n        address _xLocker,\r\n        address _uniswapRouter,\r\n        address _lidTreasury,\r\n        address _lidPoolManager\r\n    ) external;\r\n\r\n    function setEthXLockBP(uint256 _val) external;\r\n\r\n    function getEthXLockBP() external view returns (uint256);\r\n\r\n    function setTokenUserBP(uint256 _val) external;\r\n\r\n    function getTokenUserBP() external view returns (uint256);\r\n\r\n    function setLiftoffInsurance(address _val) external;\r\n\r\n    function getLiftoffInsurance() external view returns (address);\r\n\r\n    function setLiftoffRegistration(address _val) external;\r\n\r\n    function getLiftoffRegistration() external view returns (address);\r\n\r\n    function setLiftoffEngine(address _val) external;\r\n\r\n    function getLiftoffEngine() external view returns (address);\r\n\r\n    function setXEth(address _val) external;\r\n\r\n    function getXEth() external view returns (address);\r\n\r\n    function setXLocker(address _val) external;\r\n\r\n    function getXLocker() external view returns (address);\r\n\r\n    function setUniswapRouter(address _val) external;\r\n\r\n    function getUniswapRouter() external view returns (address);\r\n\r\n    function setInsurancePeriod(uint256 _val) external;\r\n\r\n    function getInsurancePeriod() external view returns (uint256);\r\n\r\n    function setLidTreasury(address _val) external;\r\n\r\n    function getLidTreasury() external view returns (address);\r\n\r\n    function setLidPoolManager(address _val) external;\r\n\r\n    function getLidPoolManager() external view returns (address);\r\n\r\n    function setXethBP(\r\n        uint256 _baseFeeBP,\r\n        uint256 _ethBuyBP,\r\n        uint256 _projectDevBP,\r\n        uint256 _mainFeeBP,\r\n        uint256 _lidPoolBP\r\n    ) external;\r\n\r\n    function getBaseFeeBP() external view returns (uint256);\r\n\r\n    function getEthBuyBP() external view returns (uint256);\r\n\r\n    function getProjectDevBP() external view returns (uint256);\r\n\r\n    function getMainFeeBP() external view returns (uint256);\r\n\r\n    function getLidPoolBP() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILiftoffInsurance.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface ILiftoffInsurance {\r\n    function register(uint256 _tokenSaleId) external;\r\n\r\n    function redeem(uint256 _tokenSaleId, uint256 _amount) external;\r\n\r\n    function claim(uint256 _tokenSaleId) external;\r\n\r\n    function createInsurance(uint256 _tokenSaleId) external;\r\n\r\n    function canCreateInsurance(\r\n        bool insuranceIsInitialized,\r\n        bool tokenIsRegistered\r\n    ) external pure returns (bool);\r\n\r\n    function getTotalTokenClaimable(\r\n        uint256 baseTokenLidPool,\r\n        uint256 cycles,\r\n        uint256 claimedTokenLidPool\r\n    ) external pure returns (uint256);\r\n\r\n    function getTotalXethClaimable(\r\n        uint256 totalIgnited,\r\n        uint256 redeemedXEth,\r\n        uint256 claimedXEth,\r\n        uint256 cycles\r\n    ) external pure returns (uint256);\r\n\r\n    function getRedeemValue(uint256 amount, uint256 tokensPerEthWad)\r\n        external\r\n        pure\r\n        returns (uint256);\r\n\r\n    function isInsuranceExhausted(\r\n        uint256 currentTime,\r\n        uint256 startTime,\r\n        uint256 insurancePeriod,\r\n        uint256 xEthValue,\r\n        uint256 baseXEth,\r\n        uint256 redeemedXEth,\r\n        uint256 claimedXEth,\r\n        bool isUnwound\r\n    ) external pure returns (bool);\r\n\r\n    function getTokenInsuranceUints(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 totalIgnited,\r\n            uint256 tokensPerEthWad,\r\n            uint256 baseXEth,\r\n            uint256 baseTokenLidPool,\r\n            uint256 redeemedXEth,\r\n            uint256 claimedXEth,\r\n            uint256 claimedTokenLidPool\r\n        );\r\n\r\n    function getTokenInsuranceOthers(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        returns (\r\n            address pair,\r\n            address deployed,\r\n            address projectDev,\r\n            bool isUnwound,\r\n            bool hasBaseFeeClaimed\r\n        );\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IERC20.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// File @lidprotocol/xlock-contracts/contracts/interfaces/IXEth.sol@v1.0.2\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.6.6;\r\n// Copyright (C) udev 2020\r\ninterface IXEth is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function xlockerMint(uint256 wad, address dst) external;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n    event XlockerMint(uint256 wad, address dst);\r\n}\r\n\r\n\r\n// File @lidprotocol/xlock-contracts/contracts/interfaces/IXLocker.sol@v1.0.2\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.6.6;\r\n\r\n// Copyright (C) udev 2020\r\ninterface IXLocker {\r\n    function launchERC20(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint256 wadToken,\r\n        uint256 wadXeth\r\n    ) external returns (address token_, address pair_);\r\n\r\n    function launchERC20TransferTax(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint256 wadToken,\r\n        uint256 wadXeth,\r\n        uint256 taxBips,\r\n        address taxMan\r\n    ) external returns (address token_, address pair_);\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/libraries/SafeMath.sol@v1.1.0-beta.0\r\n\r\npragma solidity =0.6.6;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/LiftoffEngine.sol\r\n\r\npragma solidity =0.6.6;\r\ncontract LiftoffEngine is\r\n    ILiftoffEngine,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    PausableUpgradeable\r\n{\r\n    using BasisPoints for uint256;\r\n    using SafeMathUpgradeable for uint256;\r\n    using MathUpgradeable for uint256;\r\n\r\n    struct TokenSale {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 totalIgnited;\r\n        uint256 totalSupply;\r\n        uint256 rewardSupply;\r\n        address projectDev;\r\n        address deployed;\r\n        address pair;\r\n        bool isSparked;\r\n        string name;\r\n        string symbol;\r\n        mapping(address => Ignitor) ignitors;\r\n    }\r\n\r\n    struct Ignitor {\r\n        uint256 ignited;\r\n        bool hasClaimed;\r\n        bool hasRefunded;\r\n    }\r\n\r\n    ILiftoffSettings public liftoffSettings;\r\n\r\n    mapping(uint256 => TokenSale) public tokens;\r\n    uint256 public totalTokenSales;\r\n\r\n    event LaunchToken(\r\n        uint256 tokenId,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 softCap,\r\n        uint256 hardCap,\r\n        uint256 totalSupply,\r\n        string name,\r\n        string symbol,\r\n        address dev\r\n    );\r\n    event Spark(uint256 tokenId, address deployed, uint256 rewardSupply);\r\n    event Ignite(uint256 tokenId, address igniter, uint256 toIgnite);\r\n    event ClaimReward(uint256 tokenId, address igniter, uint256 reward);\r\n    event ClaimRefund(uint256 tokenId, address igniter);\r\n\r\n    function initialize(ILiftoffSettings _liftoffSettings)\r\n        external\r\n        initializer\r\n    {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        PausableUpgradeable.__Pausable_init();\r\n        liftoffSettings = _liftoffSettings;\r\n    }\r\n\r\n    function setLiftoffSettings(ILiftoffSettings _liftoffSettings)\r\n        public\r\n        onlyOwner\r\n    {\r\n        liftoffSettings = _liftoffSettings;\r\n    }\r\n\r\n    function launchToken(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint256 _totalSupply,\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _projectDev\r\n    ) external override whenNotPaused returns (uint256 tokenId) {\r\n        require(\r\n            msg.sender == liftoffSettings.getLiftoffRegistration(),\r\n            \"Sender must be LiftoffRegistration\"\r\n        );\r\n        require(_endTime > _startTime, \"Must end after start\");\r\n        require(_startTime > now, \"Must start in the future\");\r\n        require(_hardCap >= _softCap, \"Hardcap must be at least softCap\");\r\n        require(_softCap >= 10 ether, \"Softcap must be at least 10 ether\");\r\n        require(_totalSupply >= 1000 * (10**18), \"TotalSupply must be at least 1000 tokens\");\r\n        require(_totalSupply < (10**12) * (10**18), \"TotalSupply must be less than 1 trillion tokens\");\r\n\r\n        tokenId = totalTokenSales;\r\n\r\n        tokens[tokenId] = TokenSale({\r\n            startTime: _startTime,\r\n            endTime: _endTime,\r\n            softCap: _softCap,\r\n            hardCap: _hardCap,\r\n            totalIgnited: 0,\r\n            totalSupply: _totalSupply,\r\n            rewardSupply: 0,\r\n            projectDev: _projectDev,\r\n            deployed: address(0),\r\n            pair: address(0),\r\n            name: _name,\r\n            symbol: _symbol,\r\n            isSparked: false\r\n        });\r\n\r\n        totalTokenSales++;\r\n\r\n        emit LaunchToken(\r\n            tokenId,\r\n            _startTime,\r\n            _endTime,\r\n            _softCap,\r\n            _hardCap,\r\n            _totalSupply,\r\n            _name,\r\n            _symbol,\r\n            _projectDev\r\n        );\r\n    }\r\n\r\n    function igniteEth(uint256 _tokenSaleId)\r\n        external\r\n        payable\r\n        override\r\n        whenNotPaused\r\n    {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n        require(\r\n            isIgniting(\r\n                tokenSale.startTime,\r\n                tokenSale.endTime,\r\n                tokenSale.totalIgnited,\r\n                tokenSale.hardCap\r\n            ),\r\n            \"Not igniting.\"\r\n        );\r\n        uint256 toIgnite =\r\n            getAmountToIgnite(\r\n                msg.value,\r\n                tokenSale.hardCap,\r\n                tokenSale.totalIgnited\r\n            );\r\n\r\n        IXEth(liftoffSettings.getXEth()).deposit{value: toIgnite}();\r\n        _addIgnite(tokenSale, msg.sender, toIgnite);\r\n\r\n        msg.sender.transfer(msg.value.sub(toIgnite));\r\n\r\n        emit Ignite(_tokenSaleId, msg.sender, toIgnite);\r\n    }\r\n\r\n    function ignite(\r\n        uint256 _tokenSaleId,\r\n        address _for,\r\n        uint256 _amountXEth\r\n    ) external override whenNotPaused {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n        require(\r\n            isIgniting(\r\n                tokenSale.startTime,\r\n                tokenSale.endTime,\r\n                tokenSale.totalIgnited,\r\n                tokenSale.hardCap\r\n            ),\r\n            \"Not igniting.\"\r\n        );\r\n        uint256 toIgnite =\r\n            getAmountToIgnite(\r\n                _amountXEth,\r\n                tokenSale.hardCap,\r\n                tokenSale.totalIgnited\r\n            );\r\n\r\n        require(\r\n            IXEth(liftoffSettings.getXEth()).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                toIgnite\r\n            ),\r\n            \"Transfer Failed\"\r\n        );\r\n        _addIgnite(tokenSale, _for, toIgnite);\r\n\r\n        emit Ignite(_tokenSaleId, _for, toIgnite);\r\n    }\r\n\r\n    function claimReward(uint256 _tokenSaleId, address _for)\r\n        external\r\n        override\r\n        whenNotPaused\r\n    {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n        Ignitor storage ignitor = tokenSale.ignitors[_for];\r\n\r\n        require(tokenSale.isSparked, \"Token must have been sparked.\");\r\n        require(!ignitor.hasClaimed, \"Ignitor has already claimed\");\r\n\r\n        uint256 reward =\r\n            getReward(\r\n                ignitor.ignited,\r\n                tokenSale.rewardSupply,\r\n                tokenSale.totalIgnited\r\n            );\r\n        require(reward > 0, \"Must have some rewards to claim.\");\r\n\r\n        ignitor.hasClaimed = true;\r\n        require(\r\n            IERC20(tokenSale.deployed).transfer(_for, reward),\r\n            \"Transfer failed\"\r\n        );\r\n\r\n        emit ClaimReward(_tokenSaleId, _for, reward);\r\n    }\r\n\r\n    function spark(uint256 _tokenSaleId) external override whenNotPaused {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n\r\n        require(\r\n            isSparkReady(\r\n                tokenSale.endTime,\r\n                tokenSale.totalIgnited,\r\n                tokenSale.hardCap,\r\n                tokenSale.softCap,\r\n                tokenSale.isSparked\r\n            ),\r\n            \"Not spark ready\"\r\n        );\r\n\r\n        tokenSale.isSparked = true;\r\n\r\n        uint256 xEthBuy = _deployViaXLock(tokenSale);\r\n        _allocateTokensPostDeploy(tokenSale);\r\n        _insuranceRegistration(tokenSale, _tokenSaleId, xEthBuy);\r\n\r\n        emit Spark(_tokenSaleId, tokenSale.deployed, tokenSale.rewardSupply);\r\n    }\r\n\r\n    function claimRefund(uint256 _tokenSaleId, address _for)\r\n        external\r\n        override\r\n        whenNotPaused\r\n    {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n        Ignitor storage ignitor = tokenSale.ignitors[_for];\r\n\r\n        require(\r\n            isRefunding(\r\n                tokenSale.endTime,\r\n                tokenSale.softCap,\r\n                tokenSale.totalIgnited\r\n            ),\r\n            \"Not refunding\"\r\n        );\r\n\r\n        require(!ignitor.hasRefunded, \"Ignitor has already refunded\");\r\n        ignitor.hasRefunded = true;\r\n\r\n        require(\r\n            IXEth(liftoffSettings.getXEth()).transfer(_for, ignitor.ignited),\r\n            \"Transfer failed\"\r\n        );\r\n\r\n        emit ClaimRefund(_tokenSaleId, _for);\r\n    }\r\n\r\n    function getTokenSale(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            uint256 softCap,\r\n            uint256 hardCap,\r\n            uint256 totalIgnited,\r\n            uint256 totalSupply,\r\n            uint256 rewardSupply,\r\n            address projectDev,\r\n            address deployed,\r\n            bool isSparked\r\n        )\r\n    {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n\r\n        startTime = tokenSale.startTime;\r\n        endTime = tokenSale.endTime;\r\n        softCap = tokenSale.softCap;\r\n        hardCap = tokenSale.hardCap;\r\n        totalIgnited = tokenSale.totalIgnited;\r\n        totalSupply = tokenSale.totalSupply;\r\n        rewardSupply = tokenSale.rewardSupply;\r\n        projectDev = tokenSale.projectDev;\r\n        deployed = tokenSale.deployed;\r\n        isSparked = tokenSale.isSparked;\r\n    }\r\n\r\n    function getTokenSaleForInsurance(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 totalIgnited,\r\n            uint256 rewardSupply,\r\n            address projectDev,\r\n            address pair,\r\n            address deployed\r\n        )\r\n    {\r\n        TokenSale storage tokenSale = tokens[_tokenSaleId];\r\n        totalIgnited = tokenSale.totalIgnited;\r\n        rewardSupply = tokenSale.rewardSupply;\r\n        projectDev = tokenSale.projectDev;\r\n        pair = tokenSale.pair;\r\n        deployed = tokenSale.deployed;\r\n    }\r\n\r\n    function isSparkReady(\r\n        uint256 endTime,\r\n        uint256 totalIgnited,\r\n        uint256 hardCap,\r\n        uint256 softCap,\r\n        bool isSparked\r\n    ) public view override returns (bool) {\r\n        if (\r\n            (now <= endTime && totalIgnited < hardCap) ||\r\n            totalIgnited < softCap ||\r\n            isSparked\r\n        ) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function isIgniting(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 totalIgnited,\r\n        uint256 hardCap\r\n    ) public view override returns (bool) {\r\n        if (now < startTime || now > endTime || totalIgnited >= hardCap) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function isRefunding(\r\n        uint256 endTime,\r\n        uint256 softCap,\r\n        uint256 totalIgnited\r\n    ) public view override returns (bool) {\r\n        if (totalIgnited >= softCap || now <= endTime) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getReward(\r\n        uint256 ignited,\r\n        uint256 rewardSupply,\r\n        uint256 totalIgnited\r\n    ) public pure override returns (uint256 reward) {\r\n        return ignited.mul(rewardSupply).div(totalIgnited);\r\n    }\r\n\r\n    function getAmountToIgnite(\r\n        uint256 amountXEth,\r\n        uint256 hardCap,\r\n        uint256 totalIgnited\r\n    ) public pure returns (uint256 toIgnite) {\r\n        uint256 maxIgnite = hardCap.sub(totalIgnited);\r\n\r\n        if (maxIgnite < amountXEth) {\r\n            toIgnite = maxIgnite;\r\n        } else {\r\n            toIgnite = amountXEth;\r\n        }\r\n    }\r\n\r\n    function _deployViaXLock(TokenSale storage tokenSale)\r\n        internal\r\n        returns (uint256 xEthBuy)\r\n    {\r\n        uint256 xEthLocked =\r\n            tokenSale.totalIgnited.mulBP(liftoffSettings.getEthXLockBP());\r\n        xEthBuy = tokenSale.totalIgnited.mulBP(liftoffSettings.getEthBuyBP());\r\n\r\n        (address deployed, address pair) =\r\n            IXLocker(liftoffSettings.getXLocker()).launchERC20(\r\n                tokenSale.name,\r\n                tokenSale.symbol,\r\n                tokenSale.totalSupply,\r\n                xEthLocked\r\n            );\r\n\r\n        _swapExactXEthForTokens(\r\n            xEthBuy,\r\n            IERC20(liftoffSettings.getXEth()),\r\n            IUniswapV2Pair(pair)\r\n        );\r\n\r\n        tokenSale.pair = pair;\r\n        tokenSale.deployed = deployed;\r\n\r\n        return xEthBuy;\r\n    }\r\n\r\n    function _allocateTokensPostDeploy(TokenSale storage tokenSale) internal {\r\n        IERC20 deployed = IERC20(tokenSale.deployed);\r\n        uint256 balance = deployed.balanceOf(address(this));\r\n        tokenSale.rewardSupply = balance.mulBP(\r\n            liftoffSettings.getTokenUserBP()\r\n        );\r\n    }\r\n\r\n    function _insuranceRegistration(\r\n        TokenSale storage tokenSale,\r\n        uint256 _tokenSaleId,\r\n        uint256 _xEthBuy\r\n    ) internal {\r\n        IERC20 deployed = IERC20(tokenSale.deployed);\r\n        uint256 toInsurance =\r\n            deployed.balanceOf(address(this)).sub(tokenSale.rewardSupply);\r\n        address liftoffInsurance = liftoffSettings.getLiftoffInsurance();\r\n        deployed.transfer(liftoffInsurance, toInsurance);\r\n        IXEth(liftoffSettings.getXEth()).transfer(\r\n            liftoffInsurance,\r\n            tokenSale.totalIgnited.sub(_xEthBuy)\r\n        );\r\n\r\n        ILiftoffInsurance(liftoffInsurance).register(_tokenSaleId);\r\n    }\r\n\r\n    function _addIgnite(\r\n        TokenSale storage tokenSale,\r\n        address _for,\r\n        uint256 toIgnite\r\n    ) internal {\r\n        Ignitor storage ignitor = tokenSale.ignitors[_for];\r\n        ignitor.ignited = ignitor.ignited.add(toIgnite);\r\n        tokenSale.totalIgnited = tokenSale.totalIgnited.add(toIgnite);\r\n    }\r\n\r\n    //WARNING: Not tested with transfer tax tokens. Will probably fail with such.\r\n    function _swapExactXEthForTokens(\r\n        uint256 amountIn,\r\n        IERC20 xEth,\r\n        IUniswapV2Pair pair\r\n    ) internal {\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        bool token0IsXEth = pair.token0() == address(xEth);\r\n        (uint256 reserveIn, uint256 reserveOut) =\r\n            token0IsXEth ? (reserve0, reserve1) : (reserve1, reserve0);\r\n        uint256 amountOut =\r\n            UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\r\n        require(xEth.transfer(address(pair), amountIn), \"Transfer failed\");\r\n        (uint256 amount0Out, uint256 amount1Out) =\r\n            token0IsXEth ? (uint256(0), amountOut) : (amountOut, uint256(0));\r\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/LiftoffInsurance.sol\r\n\r\npragma solidity =0.6.6;\r\ncontract LiftoffInsurance is\r\n    ILiftoffInsurance,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    PausableUpgradeable\r\n{\r\n    using BasisPoints for uint256;\r\n    using SafeMathUpgradeable for uint256;\r\n    using MathUpgradeable for uint256;\r\n\r\n    struct TokenInsurance {\r\n        uint256 startTime;\r\n        uint256 totalIgnited;\r\n        uint256 tokensPerEthWad;\r\n        uint256 baseXEth;\r\n        uint256 baseTokenLidPool;\r\n        uint256 redeemedXEth;\r\n        uint256 claimedXEth;\r\n        uint256 claimedTokenLidPool;\r\n        address pair;\r\n        address deployed;\r\n        address projectDev;\r\n        bool isUnwound;\r\n        bool hasBaseFeeClaimed;\r\n    }\r\n\r\n    ILiftoffSettings public liftoffSettings;\r\n\r\n    mapping(uint256 => TokenInsurance) public tokenInsurances;\r\n    mapping(uint256 => bool) public tokenIsRegistered;\r\n    mapping(uint256 => bool) public insuranceIsInitialized;\r\n\r\n    event Register(uint256 tokenId);\r\n    event CreateInsurance(\r\n        uint256 tokenId,\r\n        uint256 startTime,\r\n        uint256 tokensPerEthWad,\r\n        uint256 baseXEth,\r\n        uint256 baseTokenLidPool,\r\n        uint256 totalIgnited,\r\n        address deployed,\r\n        address dev\r\n    );\r\n    event ClaimBaseFee(uint256 tokenId, uint256 baseFee);\r\n    event Claim(uint256 tokenId, uint256 xEthClaimed, uint256 tokenClaimed);\r\n    event Redeem(uint256 tokenId, uint256 redeemEth);\r\n\r\n    function initialize(ILiftoffSettings _liftoffSettings)\r\n        external\r\n        initializer\r\n    {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        PausableUpgradeable.__Pausable_init();\r\n        liftoffSettings = _liftoffSettings;\r\n    }\r\n\r\n    function setLiftoffSettings(ILiftoffSettings _liftoffSettings)\r\n        public\r\n        onlyOwner\r\n    {\r\n        liftoffSettings = _liftoffSettings;\r\n    }\r\n\r\n    function register(uint256 _tokenSaleId) external override {\r\n        address liftoffEngine = liftoffSettings.getLiftoffEngine();\r\n        require(msg.sender == liftoffEngine, \"Sender must be Liftoff Engine\");\r\n        require(!tokenIsRegistered[_tokenSaleId], \"Token already registered\");\r\n        tokenIsRegistered[_tokenSaleId] = true;\r\n\r\n        emit Register(_tokenSaleId);\r\n    }\r\n\r\n    function redeem(uint256 _tokenSaleId, uint256 _amount) external override {\r\n        TokenInsurance storage tokenInsurance = tokenInsurances[_tokenSaleId];\r\n        require(\r\n            insuranceIsInitialized[_tokenSaleId],\r\n            \"Insurance not initialized\"\r\n        );\r\n\r\n        IERC20 token = IERC20(tokenInsurance.deployed);\r\n        IERC20 xeth = IXEth(liftoffSettings.getXEth());\r\n\r\n        uint256 xEthValue =\r\n            _pullTokensForRedeem(tokenInsurance, token, _amount);\r\n\r\n        require(\r\n            !isInsuranceExhausted(\r\n                now,\r\n                tokenInsurance.startTime,\r\n                liftoffSettings.getInsurancePeriod(),\r\n                xEthValue,\r\n                tokenInsurance.baseXEth,\r\n                tokenInsurance.redeemedXEth.add(xEthValue),\r\n                tokenInsurance.claimedXEth,\r\n                tokenInsurance.isUnwound\r\n            ),\r\n            \"Redeem request exceeds available insurance.\"\r\n        );\r\n\r\n        if (\r\n            //Still in the first period (1 week)\r\n            now <=\r\n            tokenInsurance.startTime.add(\r\n                liftoffSettings.getInsurancePeriod()\r\n            ) &&\r\n            //Already reached the baseXEth\r\n            tokenInsurance.baseXEth < tokenInsurance.redeemedXEth.add(xEthValue)\r\n        ) {\r\n            //Trigger unwind\r\n            tokenInsurance.isUnwound = true;\r\n        }\r\n\r\n        if (tokenInsurance.isUnwound) {\r\n            //All tokens are sold on market during unwind, to maximize insurance returns.\r\n            _swapExactTokensForXEth(\r\n                token.balanceOf(address(this)),\r\n                token,\r\n                IUniswapV2Pair(tokenInsurance.pair)\r\n            );\r\n        }\r\n        tokenInsurance.redeemedXEth = tokenInsurance.redeemedXEth.add(\r\n            xEthValue\r\n        );\r\n        require(xeth.transfer(msg.sender, xEthValue), \"Transfer failed.\");\r\n\r\n        emit Redeem(_tokenSaleId, xEthValue);\r\n    }\r\n\r\n    function claim(uint256 _tokenSaleId) external override {\r\n        TokenInsurance storage tokenInsurance = tokenInsurances[_tokenSaleId];\r\n        require(\r\n            insuranceIsInitialized[_tokenSaleId],\r\n            \"Insurance not initialized\"\r\n        );\r\n\r\n        uint256 cycles =\r\n            now.sub(tokenInsurance.startTime).div(\r\n                liftoffSettings.getInsurancePeriod()\r\n            );\r\n\r\n        IXEth xeth = IXEth(liftoffSettings.getXEth());\r\n\r\n        bool didBaseFeeClaim =\r\n            _baseFeeClaim(tokenInsurance, xeth, _tokenSaleId);\r\n        if (didBaseFeeClaim) {\r\n            return; //If claiming base fee, ONLY claim base fee.\r\n        }\r\n        require(!tokenInsurance.isUnwound, \"Token insurance is unwound.\");\r\n\r\n        //For first 7 days, only claim base fee\r\n        require(cycles > 0, \"Cannot claim until after first cycle ends.\");\r\n\r\n        uint256 totalXethClaimed =\r\n            _xEthClaimDistribution(tokenInsurance, cycles, xeth);\r\n\r\n        uint256 totalTokenClaimed =\r\n            _tokenClaimDistribution(tokenInsurance, cycles);\r\n\r\n        emit Claim(_tokenSaleId, totalXethClaimed, totalTokenClaimed);\r\n    }\r\n\r\n    function createInsurance(uint256 _tokenSaleId) external override {\r\n        require(\r\n            canCreateInsurance(\r\n                insuranceIsInitialized[_tokenSaleId],\r\n                tokenIsRegistered[_tokenSaleId]\r\n            ),\r\n            \"Cannot create insurance\"\r\n        );\r\n\r\n        insuranceIsInitialized[_tokenSaleId] = true;\r\n\r\n        (\r\n            uint256 totalIgnited,\r\n            uint256 rewardSupply,\r\n            address projectDev,\r\n            address pair,\r\n            address deployed\r\n        ) =\r\n            ILiftoffEngine(liftoffSettings.getLiftoffEngine())\r\n                .getTokenSaleForInsurance(_tokenSaleId);\r\n\r\n        require(\r\n            rewardSupply.mul(1 ether).div(1000) > totalIgnited,\r\n            \"Must have at least 3 digits\"\r\n        );\r\n\r\n        tokenInsurances[_tokenSaleId] = TokenInsurance({\r\n            startTime: now,\r\n            totalIgnited: totalIgnited,\r\n            tokensPerEthWad: rewardSupply\r\n                .mul(1 ether)\r\n                .div(totalIgnited.subBP(liftoffSettings.getBaseFeeBP()))\r\n                .add(1), //division error safety margin,\r\n            baseXEth: totalIgnited.sub(\r\n                totalIgnited.mulBP(liftoffSettings.getEthBuyBP())\r\n            ),\r\n            baseTokenLidPool: IERC20(deployed).balanceOf(address(this)),\r\n            redeemedXEth: 0,\r\n            claimedXEth: 0,\r\n            claimedTokenLidPool: 0,\r\n            pair: pair,\r\n            deployed: deployed,\r\n            projectDev: projectDev,\r\n            isUnwound: false,\r\n            hasBaseFeeClaimed: false\r\n        });\r\n\r\n        emit CreateInsurance(\r\n            _tokenSaleId,\r\n            tokenInsurances[_tokenSaleId].startTime,\r\n            tokenInsurances[_tokenSaleId].tokensPerEthWad,\r\n            tokenInsurances[_tokenSaleId].baseXEth,\r\n            tokenInsurances[_tokenSaleId].baseTokenLidPool,\r\n            totalIgnited,\r\n            deployed,\r\n            projectDev\r\n        );\r\n    }\r\n\r\n    function getTokenInsuranceUints(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 totalIgnited,\r\n            uint256 tokensPerEthWad,\r\n            uint256 baseXEth,\r\n            uint256 baseTokenLidPool,\r\n            uint256 redeemedXEth,\r\n            uint256 claimedXEth,\r\n            uint256 claimedTokenLidPool\r\n        )\r\n    {\r\n        TokenInsurance storage t = tokenInsurances[_tokenSaleId];\r\n\r\n        startTime = t.startTime;\r\n        totalIgnited = t.totalIgnited;\r\n        tokensPerEthWad = t.tokensPerEthWad;\r\n        baseXEth = t.baseXEth;\r\n        baseTokenLidPool = t.baseTokenLidPool;\r\n        redeemedXEth = t.redeemedXEth;\r\n        claimedXEth = t.claimedXEth;\r\n        claimedTokenLidPool = t.claimedTokenLidPool;\r\n    }\r\n\r\n    function getTokenInsuranceOthers(uint256 _tokenSaleId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            address pair,\r\n            address deployed,\r\n            address projectDev,\r\n            bool isUnwound,\r\n            bool hasBaseFeeClaimed\r\n        )\r\n    {\r\n        TokenInsurance storage t = tokenInsurances[_tokenSaleId];\r\n\r\n        pair = t.pair;\r\n        deployed = t.deployed;\r\n        projectDev = t.projectDev;\r\n        isUnwound = t.isUnwound;\r\n        hasBaseFeeClaimed = t.hasBaseFeeClaimed;\r\n    }\r\n\r\n    function isInsuranceExhausted(\r\n        uint256 currentTime,\r\n        uint256 startTime,\r\n        uint256 insurancePeriod,\r\n        uint256 xEthValue,\r\n        uint256 baseXEth,\r\n        uint256 redeemedXEth,\r\n        uint256 claimedXEth,\r\n        bool isUnwound\r\n    ) public pure override returns (bool) {\r\n        if (isUnwound) {\r\n            //Never exhausted when unwound\r\n            return false;\r\n        }\r\n        if (\r\n            //After the first period (1 week)\r\n            currentTime > startTime.add(insurancePeriod) &&\r\n            //Already reached the baseXEth\r\n            baseXEth < redeemedXEth.add(claimedXEth).add(xEthValue)\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function canCreateInsurance(\r\n        bool _insuranceIsInitialized,\r\n        bool _tokenIsRegistered\r\n    ) public pure override returns (bool) {\r\n        if (!_insuranceIsInitialized && _tokenIsRegistered) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getRedeemValue(uint256 amount, uint256 tokensPerEthWad)\r\n        public\r\n        pure\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return amount.mul(1 ether).div(tokensPerEthWad);\r\n    }\r\n\r\n    function getTotalTokenClaimable(\r\n        uint256 baseTokenLidPool,\r\n        uint256 cycles,\r\n        uint256 claimedTokenLidPool\r\n    ) public pure override returns (uint256) {\r\n        uint256 totalMaxTokenClaim = baseTokenLidPool.mul(cycles).div(10);\r\n        if (totalMaxTokenClaim > baseTokenLidPool)\r\n            totalMaxTokenClaim = baseTokenLidPool;\r\n        return totalMaxTokenClaim.sub(claimedTokenLidPool);\r\n    }\r\n\r\n    function getTotalXethClaimable(\r\n        uint256 totalIgnited,\r\n        uint256 redeemedXEth,\r\n        uint256 claimedXEth,\r\n        uint256 cycles\r\n    ) public pure override returns (uint256) {\r\n        if (cycles == 0) return 0;\r\n        uint256 totalFinalClaim =\r\n            totalIgnited.sub(redeemedXEth).sub(claimedXEth);\r\n        uint256 totalMaxClaim = totalFinalClaim.mul(cycles).div(10); //10 periods hardcoded\r\n        if (totalMaxClaim > totalFinalClaim) totalMaxClaim = totalFinalClaim;\r\n        return totalMaxClaim;\r\n    }\r\n\r\n    function _pullTokensForRedeem(\r\n        TokenInsurance storage tokenInsurance,\r\n        IERC20 token,\r\n        uint256 _amount\r\n    ) internal returns (uint256 xEthValue) {\r\n        uint256 initialBalance = token.balanceOf(address(this));\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"Transfer failed\"\r\n        );\r\n        //In case token has a transfer tax or burn.\r\n        uint256 amountReceived =\r\n            token.balanceOf(address(this)).sub(initialBalance);\r\n\r\n        xEthValue = getRedeemValue(\r\n            amountReceived,\r\n            tokenInsurance.tokensPerEthWad\r\n        );\r\n        require(\r\n            xEthValue >= 0.001 ether,\r\n            \"Amount must have value of at least 0.001 xETH\"\r\n        );\r\n        return xEthValue;\r\n    }\r\n\r\n    function _xEthClaimDistribution(\r\n        TokenInsurance storage tokenInsurance,\r\n        uint256 cycles,\r\n        IERC20 xeth\r\n    ) internal returns (uint256 totalClaimed) {\r\n        uint256 totalClaimable =\r\n            getTotalXethClaimable(\r\n                tokenInsurance.totalIgnited,\r\n                tokenInsurance.redeemedXEth,\r\n                tokenInsurance.claimedXEth,\r\n                cycles\r\n            );\r\n\r\n        tokenInsurance.claimedXEth = tokenInsurance.claimedXEth.add(\r\n            totalClaimable\r\n        );\r\n        //NOTE: The totals are not actually held by insurance.\r\n        //The ethBuyBP was used by liftoffEngine, and baseFeeBP is seperate above.\r\n        //So the total BP transferred here will always be 10000-ethBuyBP-baseFeeBP\r\n        require(\r\n            xeth.transfer(\r\n                tokenInsurance.projectDev,\r\n                totalClaimable.mulBP(liftoffSettings.getProjectDevBP())\r\n            ),\r\n            \"Transfer xEth projectDev failed\"\r\n        );\r\n        require(\r\n            xeth.transfer(\r\n                liftoffSettings.getLidTreasury(),\r\n                totalClaimable.mulBP(liftoffSettings.getMainFeeBP())\r\n            ),\r\n            \"Transfer xEth lidTreasury failed\"\r\n        );\r\n        require(\r\n            xeth.transfer(\r\n                liftoffSettings.getLidPoolManager(),\r\n                totalClaimable.mulBP(liftoffSettings.getLidPoolBP())\r\n            ),\r\n            \"Transfer xEth lidPoolManager failed\"\r\n        );\r\n        return totalClaimable;\r\n    }\r\n\r\n    function _tokenClaimDistribution(\r\n        TokenInsurance storage tokenInsurance,\r\n        uint256 cycles\r\n    ) internal returns (uint256 totalClaimed) {\r\n        uint256 totalTokenClaimable =\r\n            getTotalTokenClaimable(\r\n                tokenInsurance.baseTokenLidPool,\r\n                cycles,\r\n                tokenInsurance.claimedTokenLidPool\r\n            );\r\n        tokenInsurance.claimedTokenLidPool = tokenInsurance\r\n            .claimedTokenLidPool\r\n            .add(totalTokenClaimable);\r\n\r\n        require(\r\n            IERC20(tokenInsurance.deployed).transfer(\r\n                liftoffSettings.getLidPoolManager(),\r\n                totalTokenClaimable\r\n            ),\r\n            \"Transfer token to lidPoolManager failed\"\r\n        );\r\n        return totalTokenClaimable;\r\n    }\r\n\r\n    function _baseFeeClaim(\r\n        TokenInsurance storage tokenInsurance,\r\n        IERC20 xeth,\r\n        uint256 _tokenSaleId\r\n    ) internal returns (bool didClaim) {\r\n        if (!tokenInsurance.hasBaseFeeClaimed) {\r\n            uint256 baseFee =\r\n                tokenInsurance.totalIgnited.mulBP(\r\n                    liftoffSettings.getBaseFeeBP() - 30 //30 BP is taken by uniswap during unwind\r\n                );\r\n            require(\r\n                xeth.transfer(liftoffSettings.getLidTreasury(), baseFee),\r\n                \"Transfer failed\"\r\n            );\r\n            tokenInsurance.hasBaseFeeClaimed = true;\r\n\r\n            emit ClaimBaseFee(_tokenSaleId, baseFee);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _swapExactTokensForXEth(\r\n        uint256 amountIn,\r\n        IERC20 token,\r\n        IUniswapV2Pair pair\r\n    ) internal {\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        bool token0IsToken = pair.token0() == address(token);\r\n        (uint256 reserveIn, uint256 reserveOut) =\r\n            token0IsToken ? (reserve0, reserve1) : (reserve1, reserve0);\r\n        uint256 amountOut =\r\n            UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\r\n        require(token.transfer(address(pair), amountIn), \"Transfer failed\");\r\n        (uint256 amount0Out, uint256 amount1Out) =\r\n            token0IsToken ? (uint256(0), amountOut) : (amountOut, uint256(0));\r\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILiftoffRegistration.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface ILiftoffRegistration {\r\n    function registerProject(\r\n        string calldata ipfsHash,\r\n        uint256 launchTime,\r\n        uint256 softCap,\r\n        uint256 hardCap,\r\n        uint256 totalSupplyWad,\r\n        string calldata name,\r\n        string calldata symbol\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/LiftoffRegistration.sol\r\n\r\npragma solidity =0.6.6;\r\ncontract LiftoffRegistration is\r\n    ILiftoffRegistration,\r\n    Initializable,\r\n    OwnableUpgradeable\r\n{\r\n    ILiftoffEngine public liftoffEngine;\r\n    uint256 public minLaunchTime;\r\n    uint256 public maxLaunchTime;\r\n    uint256 public softCapTimer;\r\n\r\n    mapping(uint256 => string) tokenIpfsHashes;\r\n\r\n    event TokenIpfsHash(uint256 tokenId, string ipfsHash);\r\n\r\n    function initialize(\r\n        uint256 _minTimeToLaunch,\r\n        uint256 _maxTimeToLaunch,\r\n        uint256 _softCapTimer,\r\n        ILiftoffEngine _liftoffEngine\r\n    ) public initializer {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        setLaunchTimeWindow(_minTimeToLaunch, _maxTimeToLaunch);\r\n        setLiftoffEngine(_liftoffEngine);\r\n        setSoftCapTimer(_softCapTimer);\r\n    }\r\n\r\n    function registerProject(\r\n        string calldata ipfsHash,\r\n        uint256 launchTime,\r\n        uint256 softCap,\r\n        uint256 hardCap,\r\n        uint256 totalSupplyWad,\r\n        string calldata name,\r\n        string calldata symbol\r\n    ) external override {\r\n        require(\r\n            launchTime >= block.timestamp + minLaunchTime,\r\n            \"Not allowed to launch before minLaunchTime\"\r\n        );\r\n        require(\r\n            launchTime <= block.timestamp + maxLaunchTime,\r\n            \"Not allowed to launch after maxLaunchTime\"\r\n        );\r\n        require(\r\n            totalSupplyWad < (10**12) * (10**18),\r\n            \"Cannot launch more than 1 trillion tokens\"\r\n        );\r\n        require(\r\n            totalSupplyWad >= 1000 * (10**18),\r\n            \"Cannot launch less than 1000 tokens\"\r\n        );\r\n        require(\r\n            softCap >= 10 ether,\r\n            \"Cannot launch if softcap is less than 10 ether\"\r\n        );\r\n\r\n        uint256 tokenId =\r\n            liftoffEngine.launchToken(\r\n                launchTime,\r\n                launchTime + softCapTimer,\r\n                softCap,\r\n                hardCap,\r\n                totalSupplyWad,\r\n                name,\r\n                symbol,\r\n                msg.sender\r\n            );\r\n\r\n        tokenIpfsHashes[tokenId] = ipfsHash;\r\n\r\n        emit TokenIpfsHash(tokenId, ipfsHash);\r\n    }\r\n\r\n    function setSoftCapTimer(uint256 _seconds) public onlyOwner {\r\n        softCapTimer = _seconds;\r\n    }\r\n\r\n    function setLaunchTimeWindow(uint256 _min, uint256 _max) public onlyOwner {\r\n        minLaunchTime = _min;\r\n        maxLaunchTime = _max;\r\n    }\r\n\r\n    function setLiftoffEngine(ILiftoffEngine _liftoffEngine) public onlyOwner {\r\n        liftoffEngine = _liftoffEngine;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/LiftoffSettings.sol\r\n\r\npragma solidity =0.6.6;\r\ncontract LiftoffSettings is\r\n    ILiftoffSettings,\r\n    Initializable,\r\n    OwnableUpgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    uint256 private ethXLockBP;\r\n    uint256 private tokenUserBP;\r\n\r\n    uint256 private insurancePeriod;\r\n\r\n    uint256 private ethBuyBP;\r\n    uint256 private baseFee;\r\n    uint256 private projectDevBP;\r\n    uint256 private mainFeeBP;\r\n    uint256 private lidPoolBP;\r\n\r\n    address private liftoffInsurance;\r\n    address private liftoffRegistration;\r\n    address private liftoffEngine;\r\n    address private xEth;\r\n    address private xLocker;\r\n    address private uniswapRouter;\r\n\r\n    address private lidTreasury;\r\n    address private lidPoolManager;\r\n\r\n    event LogEthXLockBP(uint256 ethXLockBP);\r\n    event LogTokenUserBP(uint256 tokenUserBP);\r\n    event LogInsurancePeriod(uint256 insurancePeriod);\r\n    event LogXethBP(\r\n        uint256 baseFee,\r\n        uint256 ethBuyBP,\r\n        uint256 projectDevBP,\r\n        uint256 mainFeeBP,\r\n        uint256 lidPoolBP\r\n    );\r\n    event LogLidTreasury(address lidTreasury);\r\n    event LogLidPoolManager(address lidPoolManager);\r\n    event LogLiftoffInsurance(address liftoffInsurance);\r\n    event LogLiftoffLauncher(address liftoffLauncher);\r\n    event LogLiftoffEngine(address liftoffEngine);\r\n    event LogXEth(address xEth);\r\n    event LogXLocker(address xLocker);\r\n    event LogUniswapRouter(address uniswapRouter);\r\n\r\n    function initialize() external initializer {\r\n        OwnableUpgradeable.__Ownable_init();\r\n    }\r\n\r\n    function setAllUints(\r\n        uint256 _ethXLockBP,\r\n        uint256 _tokenUserBP,\r\n        uint256 _insurancePeriod,\r\n        uint256 _baseFeeBP,\r\n        uint256 _ethBuyBP,\r\n        uint256 _projectDevBP,\r\n        uint256 _mainFeeBP,\r\n        uint256 _lidPoolBP\r\n    ) external override onlyOwner {\r\n        setEthXLockBP(_ethXLockBP);\r\n        setTokenUserBP(_tokenUserBP);\r\n        setInsurancePeriod(_insurancePeriod);\r\n        setXethBP(_baseFeeBP, _ethBuyBP, _projectDevBP, _mainFeeBP, _lidPoolBP);\r\n    }\r\n\r\n    function setAllAddresses(\r\n        address _liftoffInsurance,\r\n        address _liftoffRegistration,\r\n        address _liftoffEngine,\r\n        address _xEth,\r\n        address _xLocker,\r\n        address _uniswapRouter,\r\n        address _lidTreasury,\r\n        address _lidPoolManager\r\n    ) external override onlyOwner {\r\n        setLiftoffInsurance(_liftoffInsurance);\r\n        setLiftoffRegistration(_liftoffRegistration);\r\n        setLiftoffEngine(_liftoffEngine);\r\n        setXEth(_xEth);\r\n        setXLocker(_xLocker);\r\n        setUniswapRouter(_uniswapRouter);\r\n        setLidTreasury(_lidTreasury);\r\n        setLidPoolManager(_lidPoolManager);\r\n    }\r\n\r\n    function setEthXLockBP(uint256 _val) public override onlyOwner {\r\n        ethXLockBP = _val;\r\n\r\n        emit LogEthXLockBP(ethXLockBP);\r\n    }\r\n\r\n    function getEthXLockBP() external view override returns (uint256) {\r\n        return ethXLockBP;\r\n    }\r\n\r\n    function setTokenUserBP(uint256 _val) public override onlyOwner {\r\n        tokenUserBP = _val;\r\n\r\n        emit LogTokenUserBP(tokenUserBP);\r\n    }\r\n\r\n    function getTokenUserBP() external view override returns (uint256) {\r\n        return tokenUserBP;\r\n    }\r\n\r\n    function setLiftoffInsurance(address _val) public override onlyOwner {\r\n        liftoffInsurance = _val;\r\n\r\n        emit LogLiftoffInsurance(liftoffInsurance);\r\n    }\r\n\r\n    function getLiftoffInsurance() external view override returns (address) {\r\n        return liftoffInsurance;\r\n    }\r\n\r\n    function setLiftoffRegistration(address _val) public override onlyOwner {\r\n        liftoffRegistration = _val;\r\n\r\n        emit LogLiftoffLauncher(liftoffRegistration);\r\n    }\r\n\r\n    function getLiftoffRegistration() external view override returns (address) {\r\n        return liftoffRegistration;\r\n    }\r\n\r\n    function setLiftoffEngine(address _val) public override onlyOwner {\r\n        liftoffEngine = _val;\r\n\r\n        emit LogLiftoffEngine(liftoffEngine);\r\n    }\r\n\r\n    function getLiftoffEngine() external view override returns (address) {\r\n        return liftoffEngine;\r\n    }\r\n\r\n    function setXEth(address _val) public override onlyOwner {\r\n        xEth = _val;\r\n\r\n        emit LogXEth(xEth);\r\n    }\r\n\r\n    function getXEth() external view override returns (address) {\r\n        return xEth;\r\n    }\r\n\r\n    function setXLocker(address _val) public override onlyOwner {\r\n        xLocker = _val;\r\n\r\n        emit LogXLocker(xLocker);\r\n    }\r\n\r\n    function getXLocker() external view override returns (address) {\r\n        return xLocker;\r\n    }\r\n\r\n    function setUniswapRouter(address _val) public override onlyOwner {\r\n        uniswapRouter = _val;\r\n\r\n        emit LogUniswapRouter(uniswapRouter);\r\n    }\r\n\r\n    function getUniswapRouter() external view override returns (address) {\r\n        return uniswapRouter;\r\n    }\r\n\r\n    function setInsurancePeriod(uint256 _val) public override onlyOwner {\r\n        insurancePeriod = _val;\r\n\r\n        emit LogInsurancePeriod(insurancePeriod);\r\n    }\r\n\r\n    function getInsurancePeriod() external view override returns (uint256) {\r\n        return insurancePeriod;\r\n    }\r\n\r\n    function setLidTreasury(address _val) public override onlyOwner {\r\n        lidTreasury = _val;\r\n\r\n        emit LogLidTreasury(lidTreasury);\r\n    }\r\n\r\n    function getLidTreasury() external view override returns (address) {\r\n        return lidTreasury;\r\n    }\r\n\r\n    function setLidPoolManager(address _val) public override onlyOwner {\r\n        lidPoolManager = _val;\r\n\r\n        emit LogLidPoolManager(lidPoolManager);\r\n    }\r\n\r\n    function getLidPoolManager() external view override returns (address) {\r\n        return lidPoolManager;\r\n    }\r\n\r\n    function setXethBP(\r\n        uint256 _baseFeeBP,\r\n        uint256 _ethBuyBP,\r\n        uint256 _projectDevBP,\r\n        uint256 _mainFeeBP,\r\n        uint256 _lidPoolBP\r\n    ) public override onlyOwner {\r\n        require(\r\n            _baseFeeBP.add(_ethBuyBP).add(_projectDevBP).add(_mainFeeBP).add(\r\n                _lidPoolBP\r\n            ) == 10000,\r\n            \"Must allocate 100% of eth raised\"\r\n        );\r\n        baseFee = _baseFeeBP;\r\n        ethBuyBP = _ethBuyBP;\r\n        projectDevBP = _projectDevBP;\r\n        mainFeeBP = _mainFeeBP;\r\n        lidPoolBP = _lidPoolBP;\r\n\r\n        emit LogXethBP(baseFee, ethBuyBP, projectDevBP, mainFeeBP, lidPoolBP);\r\n    }\r\n\r\n    function getBaseFeeBP() external view override returns (uint256) {\r\n        return baseFee;\r\n    }\r\n\r\n    function getEthBuyBP() external view override returns (uint256) {\r\n        return ethBuyBP;\r\n    }\r\n\r\n    function getProjectDevBP() external view override returns (uint256) {\r\n        return projectDevBP;\r\n    }\r\n\r\n    function getMainFeeBP() external view override returns (uint256) {\r\n        return mainFeeBP;\r\n    }\r\n\r\n    function getLidPoolBP() external view override returns (uint256) {\r\n        return lidPoolBP;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILiftoffSwap.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface ILiftoffSwap {\r\n    function acceptIgnite(address _token) external payable;\r\n\r\n    function acceptSpark(address _token) external payable;\r\n}\r\n\r\n\r\n// File contracts/weth/WETH9.sol\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2017-12-12\r\n*/\r\n\r\n// Copyright (C) 2015, 2016, 2017 Dapphub\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity =0.6.6;\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    constructor() public payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n                    GNU GENERAL PUBLIC LICENSE\r\n                       Version 3, 29 June 2007\r\n\r\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\r\n Everyone is permitted to copy and distribute verbatim copies\r\n of this license document, but changing it is not allowed.\r\n\r\n                            Preamble\r\n\r\n  The GNU General Public License is a free, copyleft license for\r\nsoftware and other kinds of works.\r\n\r\n  The licenses for most software and other practical works are designed\r\nto take away your freedom to share and change the works.  By contrast,\r\nthe GNU General Public License is intended to guarantee your freedom to\r\nshare and change all versions of a program--to make sure it remains free\r\nsoftware for all its users.  We, the Free Software Foundation, use the\r\nGNU General Public License for most of our software; it applies also to\r\nany other work released this way by its authors.  You can apply it to\r\nyour programs, too.\r\n\r\n  When we speak of free software, we are referring to freedom, not\r\nprice.  Our General Public Licenses are designed to make sure that you\r\nhave the freedom to distribute copies of free software (and charge for\r\nthem if you wish), that you receive source code or can get it if you\r\nwant it, that you can change the software or use pieces of it in new\r\nfree programs, and that you know you can do these things.\r\n\r\n  To protect your rights, we need to prevent others from denying you\r\nthese rights or asking you to surrender the rights.  Therefore, you have\r\ncertain responsibilities if you distribute copies of the software, or if\r\nyou modify it: responsibilities to respect the freedom of others.\r\n\r\n  For example, if you distribute copies of such a program, whether\r\ngratis or for a fee, you must pass on to the recipients the same\r\nfreedoms that you received.  You must make sure that they, too, receive\r\nor can get the source code.  And you must show them these terms so they\r\nknow their rights.\r\n\r\n  Developers that use the GNU GPL protect your rights with two steps:\r\n(1) assert copyright on the software, and (2) offer you this License\r\ngiving you legal permission to copy, distribute and/or modify it.\r\n\r\n  For the developers' and authors' protection, the GPL clearly explains\r\nthat there is no warranty for this free software.  For both users' and\r\nauthors' sake, the GPL requires that modified versions be marked as\r\nchanged, so that their problems will not be attributed erroneously to\r\nauthors of previous versions.\r\n\r\n  Some devices are designed to deny users access to install or run\r\nmodified versions of the software inside them, although the manufacturer\r\ncan do so.  This is fundamentally incompatible with the aim of\r\nprotecting users' freedom to change the software.  The systematic\r\npattern of such abuse occurs in the area of products for individuals to\r\nuse, which is precisely where it is most unacceptable.  Therefore, we\r\nhave designed this version of the GPL to prohibit the practice for those\r\nproducts.  If such problems arise substantially in other domains, we\r\nstand ready to extend this provision to those domains in future versions\r\nof the GPL, as needed to protect the freedom of users.\r\n\r\n  Finally, every program is threatened constantly by software patents.\r\nStates should not allow patents to restrict development and use of\r\nsoftware on general-purpose computers, but in those that do, we wish to\r\navoid the special danger that patents applied to a free program could\r\nmake it effectively proprietary.  To prevent this, the GPL assures that\r\npatents cannot be used to render the program non-free.\r\n\r\n  The precise terms and conditions for copying, distribution and\r\nmodification follow.\r\n\r\n                       TERMS AND CONDITIONS\r\n\r\n  0. Definitions.\r\n\r\n  \"This License\" refers to version 3 of the GNU General Public License.\r\n\r\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\r\nworks, such as semiconductor masks.\r\n\r\n  \"The Program\" refers to any copyrightable work licensed under this\r\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\r\n\"recipients\" may be individuals or organizations.\r\n\r\n  To \"modify\" a work means to copy from or adapt all or part of the work\r\nin a fashion requiring copyright permission, other than the making of an\r\nexact copy.  The resulting work is called a \"modified version\" of the\r\nearlier work or a work \"based on\" the earlier work.\r\n\r\n  A \"covered work\" means either the unmodified Program or a work based\r\non the Program.\r\n\r\n  To \"propagate\" a work means to do anything with it that, without\r\npermission, would make you directly or secondarily liable for\r\ninfringement under applicable copyright law, except executing it on a\r\ncomputer or modifying a private copy.  Propagation includes copying,\r\ndistribution (with or without modification), making available to the\r\npublic, and in some countries other activities as well.\r\n\r\n  To \"convey\" a work means any kind of propagation that enables other\r\nparties to make or receive copies.  Mere interaction with a user through\r\na computer network, with no transfer of a copy, is not conveying.\r\n\r\n  An interactive user interface displays \"Appropriate Legal Notices\"\r\nto the extent that it includes a convenient and prominently visible\r\nfeature that (1) displays an appropriate copyright notice, and (2)\r\ntells the user that there is no warranty for the work (except to the\r\nextent that warranties are provided), that licensees may convey the\r\nwork under this License, and how to view a copy of this License.  If\r\nthe interface presents a list of user commands or options, such as a\r\nmenu, a prominent item in the list meets this criterion.\r\n\r\n  1. Source Code.\r\n\r\n  The \"source code\" for a work means the preferred form of the work\r\nfor making modifications to it.  \"Object code\" means any non-source\r\nform of a work.\r\n\r\n  A \"Standard Interface\" means an interface that either is an official\r\nstandard defined by a recognized standards body, or, in the case of\r\ninterfaces specified for a particular programming language, one that\r\nis widely used among developers working in that language.\r\n\r\n  The \"System Libraries\" of an executable work include anything, other\r\nthan the work as a whole, that (a) is included in the normal form of\r\npackaging a Major Component, but which is not part of that Major\r\nComponent, and (b) serves only to enable use of the work with that\r\nMajor Component, or to implement a Standard Interface for which an\r\nimplementation is available to the public in source code form.  A\r\n\"Major Component\", in this context, means a major essential component\r\n(kernel, window system, and so on) of the specific operating system\r\n(if any) on which the executable work runs, or a compiler used to\r\nproduce the work, or an object code interpreter used to run it.\r\n\r\n  The \"Corresponding Source\" for a work in object code form means all\r\nthe source code needed to generate, install, and (for an executable\r\nwork) run the object code and to modify the work, including scripts to\r\ncontrol those activities.  However, it does not include the work's\r\nSystem Libraries, or general-purpose tools or generally available free\r\nprograms which are used unmodified in performing those activities but\r\nwhich are not part of the work.  For example, Corresponding Source\r\nincludes interface definition files associated with source files for\r\nthe work, and the source code for shared libraries and dynamically\r\nlinked subprograms that the work is specifically designed to require,\r\nsuch as by intimate data communication or control flow between those\r\nsubprograms and other parts of the work.\r\n\r\n  The Corresponding Source need not include anything that users\r\ncan regenerate automatically from other parts of the Corresponding\r\nSource.\r\n\r\n  The Corresponding Source for a work in source code form is that\r\nsame work.\r\n\r\n  2. Basic Permissions.\r\n\r\n  All rights granted under this License are granted for the term of\r\ncopyright on the Program, and are irrevocable provided the stated\r\nconditions are met.  This License explicitly affirms your unlimited\r\npermission to run the unmodified Program.  The output from running a\r\ncovered work is covered by this License only if the output, given its\r\ncontent, constitutes a covered work.  This License acknowledges your\r\nrights of fair use or other equivalent, as provided by copyright law.\r\n\r\n  You may make, run and propagate covered works that you do not\r\nconvey, without conditions so long as your license otherwise remains\r\nin force.  You may convey covered works to others for the sole purpose\r\nof having them make modifications exclusively for you, or provide you\r\nwith facilities for running those works, provided that you comply with\r\nthe terms of this License in conveying all material for which you do\r\nnot control copyright.  Those thus making or running the covered works\r\nfor you must do so exclusively on your behalf, under your direction\r\nand control, on terms that prohibit them from making any copies of\r\nyour copyrighted material outside their relationship with you.\r\n\r\n  Conveying under any other circumstances is permitted solely under\r\nthe conditions stated below.  Sublicensing is not allowed; section 10\r\nmakes it unnecessary.\r\n\r\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\r\n\r\n  No covered work shall be deemed part of an effective technological\r\nmeasure under any applicable law fulfilling obligations under article\r\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\r\nsimilar laws prohibiting or restricting circumvention of such\r\nmeasures.\r\n\r\n  When you convey a covered work, you waive any legal power to forbid\r\ncircumvention of technological measures to the extent such circumvention\r\nis effected by exercising rights under this License with respect to\r\nthe covered work, and you disclaim any intention to limit operation or\r\nmodification of the work as a means of enforcing, against the work's\r\nusers, your or third parties' legal rights to forbid circumvention of\r\ntechnological measures.\r\n\r\n  4. Conveying Verbatim Copies.\r\n\r\n  You may convey verbatim copies of the Program's source code as you\r\nreceive it, in any medium, provided that you conspicuously and\r\nappropriately publish on each copy an appropriate copyright notice;\r\nkeep intact all notices stating that this License and any\r\nnon-permissive terms added in accord with section 7 apply to the code;\r\nkeep intact all notices of the absence of any warranty; and give all\r\nrecipients a copy of this License along with the Program.\r\n\r\n  You may charge any price or no price for each copy that you convey,\r\nand you may offer support or warranty protection for a fee.\r\n\r\n  5. Conveying Modified Source Versions.\r\n\r\n  You may convey a work based on the Program, or the modifications to\r\nproduce it from the Program, in the form of source code under the\r\nterms of section 4, provided that you also meet all of these conditions:\r\n\r\n    a) The work must carry prominent notices stating that you modified\r\n    it, and giving a relevant date.\r\n\r\n    b) The work must carry prominent notices stating that it is\r\n    released under this License and any conditions added under section\r\n    7.  This requirement modifies the requirement in section 4 to\r\n    \"keep intact all notices\".\r\n\r\n    c) You must license the entire work, as a whole, under this\r\n    License to anyone who comes into possession of a copy.  This\r\n    License will therefore apply, along with any applicable section 7\r\n    additional terms, to the whole of the work, and all its parts,\r\n    regardless of how they are packaged.  This License gives no\r\n    permission to license the work in any other way, but it does not\r\n    invalidate such permission if you have separately received it.\r\n\r\n    d) If the work has interactive user interfaces, each must display\r\n    Appropriate Legal Notices; however, if the Program has interactive\r\n    interfaces that do not display Appropriate Legal Notices, your\r\n    work need not make them do so.\r\n\r\n  A compilation of a covered work with other separate and independent\r\nworks, which are not by their nature extensions of the covered work,\r\nand which are not combined with it such as to form a larger program,\r\nin or on a volume of a storage or distribution medium, is called an\r\n\"aggregate\" if the compilation and its resulting copyright are not\r\nused to limit the access or legal rights of the compilation's users\r\nbeyond what the individual works permit.  Inclusion of a covered work\r\nin an aggregate does not cause this License to apply to the other\r\nparts of the aggregate.\r\n\r\n  6. Conveying Non-Source Forms.\r\n\r\n  You may convey a covered work in object code form under the terms\r\nof sections 4 and 5, provided that you also convey the\r\nmachine-readable Corresponding Source under the terms of this License,\r\nin one of these ways:\r\n\r\n    a) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by the\r\n    Corresponding Source fixed on a durable physical medium\r\n    customarily used for software interchange.\r\n\r\n    b) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by a\r\n    written offer, valid for at least three years and valid for as\r\n    long as you offer spare parts or customer support for that product\r\n    model, to give anyone who possesses the object code either (1) a\r\n    copy of the Corresponding Source for all the software in the\r\n    product that is covered by this License, on a durable physical\r\n    medium customarily used for software interchange, for a price no\r\n    more than your reasonable cost of physically performing this\r\n    conveying of source, or (2) access to copy the\r\n    Corresponding Source from a network server at no charge.\r\n\r\n    c) Convey individual copies of the object code with a copy of the\r\n    written offer to provide the Corresponding Source.  This\r\n    alternative is allowed only occasionally and noncommercially, and\r\n    only if you received the object code with such an offer, in accord\r\n    with subsection 6b.\r\n\r\n    d) Convey the object code by offering access from a designated\r\n    place (gratis or for a charge), and offer equivalent access to the\r\n    Corresponding Source in the same way through the same place at no\r\n    further charge.  You need not require recipients to copy the\r\n    Corresponding Source along with the object code.  If the place to\r\n    copy the object code is a network server, the Corresponding Source\r\n    may be on a different server (operated by you or a third party)\r\n    that supports equivalent copying facilities, provided you maintain\r\n    clear directions next to the object code saying where to find the\r\n    Corresponding Source.  Regardless of what server hosts the\r\n    Corresponding Source, you remain obligated to ensure that it is\r\n    available for as long as needed to satisfy these requirements.\r\n\r\n    e) Convey the object code using peer-to-peer transmission, provided\r\n    you inform other peers where the object code and Corresponding\r\n    Source of the work are being offered to the general public at no\r\n    charge under subsection 6d.\r\n\r\n  A separable portion of the object code, whose source code is excluded\r\nfrom the Corresponding Source as a System Library, need not be\r\nincluded in conveying the object code work.\r\n\r\n  A \"User Product\" is either (1) a \"consumer product\", which means any\r\ntangible personal property which is normally used for personal, family,\r\nor household purposes, or (2) anything designed or sold for incorporation\r\ninto a dwelling.  In determining whether a product is a consumer product,\r\ndoubtful cases shall be resolved in favor of coverage.  For a particular\r\nproduct received by a particular user, \"normally used\" refers to a\r\ntypical or common use of that class of product, regardless of the status\r\nof the particular user or of the way in which the particular user\r\nactually uses, or expects or is expected to use, the product.  A product\r\nis a consumer product regardless of whether the product has substantial\r\ncommercial, industrial or non-consumer uses, unless such uses represent\r\nthe only significant mode of use of the product.\r\n\r\n  \"Installation Information\" for a User Product means any methods,\r\nprocedures, authorization keys, or other information required to install\r\nand execute modified versions of a covered work in that User Product from\r\na modified version of its Corresponding Source.  The information must\r\nsuffice to ensure that the continued functioning of the modified object\r\ncode is in no case prevented or interfered with solely because\r\nmodification has been made.\r\n\r\n  If you convey an object code work under this section in, or with, or\r\nspecifically for use in, a User Product, and the conveying occurs as\r\npart of a transaction in which the right of possession and use of the\r\nUser Product is transferred to the recipient in perpetuity or for a\r\nfixed term (regardless of how the transaction is characterized), the\r\nCorresponding Source conveyed under this section must be accompanied\r\nby the Installation Information.  But this requirement does not apply\r\nif neither you nor any third party retains the ability to install\r\nmodified object code on the User Product (for example, the work has\r\nbeen installed in ROM).\r\n\r\n  The requirement to provide Installation Information does not include a\r\nrequirement to continue to provide support service, warranty, or updates\r\nfor a work that has been modified or installed by the recipient, or for\r\nthe User Product in which it has been modified or installed.  Access to a\r\nnetwork may be denied when the modification itself materially and\r\nadversely affects the operation of the network or violates the rules and\r\nprotocols for communication across the network.\r\n\r\n  Corresponding Source conveyed, and Installation Information provided,\r\nin accord with this section must be in a format that is publicly\r\ndocumented (and with an implementation available to the public in\r\nsource code form), and must require no special password or key for\r\nunpacking, reading or copying.\r\n\r\n  7. Additional Terms.\r\n\r\n  \"Additional permissions\" are terms that supplement the terms of this\r\nLicense by making exceptions from one or more of its conditions.\r\nAdditional permissions that are applicable to the entire Program shall\r\nbe treated as though they were included in this License, to the extent\r\nthat they are valid under applicable law.  If additional permissions\r\napply only to part of the Program, that part may be used separately\r\nunder those permissions, but the entire Program remains governed by\r\nthis License without regard to the additional permissions.\r\n\r\n  When you convey a copy of a covered work, you may at your option\r\nremove any additional permissions from that copy, or from any part of\r\nit.  (Additional permissions may be written to require their own\r\nremoval in certain cases when you modify the work.)  You may place\r\nadditional permissions on material, added by you to a covered work,\r\nfor which you have or can give appropriate copyright permission.\r\n\r\n  Notwithstanding any other provision of this License, for material you\r\nadd to a covered work, you may (if authorized by the copyright holders of\r\nthat material) supplement the terms of this License with terms:\r\n\r\n    a) Disclaiming warranty or limiting liability differently from the\r\n    terms of sections 15 and 16 of this License; or\r\n\r\n    b) Requiring preservation of specified reasonable legal notices or\r\n    author attributions in that material or in the Appropriate Legal\r\n    Notices displayed by works containing it; or\r\n\r\n    c) Prohibiting misrepresentation of the origin of that material, or\r\n    requiring that modified versions of such material be marked in\r\n    reasonable ways as different from the original version; or\r\n\r\n    d) Limiting the use for publicity purposes of names of licensors or\r\n    authors of the material; or\r\n\r\n    e) Declining to grant rights under trademark law for use of some\r\n    trade names, trademarks, or service marks; or\r\n\r\n    f) Requiring indemnification of licensors and authors of that\r\n    material by anyone who conveys the material (or modified versions of\r\n    it) with contractual assumptions of liability to the recipient, for\r\n    any liability that these contractual assumptions directly impose on\r\n    those licensors and authors.\r\n\r\n  All other non-permissive additional terms are considered \"further\r\nrestrictions\" within the meaning of section 10.  If the Program as you\r\nreceived it, or any part of it, contains a notice stating that it is\r\ngoverned by this License along with a term that is a further\r\nrestriction, you may remove that term.  If a license document contains\r\na further restriction but permits relicensing or conveying under this\r\nLicense, you may add to a covered work material governed by the terms\r\nof that license document, provided that the further restriction does\r\nnot survive such relicensing or conveying.\r\n\r\n  If you add terms to a covered work in accord with this section, you\r\nmust place, in the relevant source files, a statement of the\r\nadditional terms that apply to those files, or a notice indicating\r\nwhere to find the applicable terms.\r\n\r\n  Additional terms, permissive or non-permissive, may be stated in the\r\nform of a separately written license, or stated as exceptions;\r\nthe above requirements apply either way.\r\n\r\n  8. Termination.\r\n\r\n  You may not propagate or modify a covered work except as expressly\r\nprovided under this License.  Any attempt otherwise to propagate or\r\nmodify it is void, and will automatically terminate your rights under\r\nthis License (including any patent licenses granted under the third\r\nparagraph of section 11).\r\n\r\n  However, if you cease all violation of this License, then your\r\nlicense from a particular copyright holder is reinstated (a)\r\nprovisionally, unless and until the copyright holder explicitly and\r\nfinally terminates your license, and (b) permanently, if the copyright\r\nholder fails to notify you of the violation by some reasonable means\r\nprior to 60 days after the cessation.\r\n\r\n  Moreover, your license from a particular copyright holder is\r\nreinstated permanently if the copyright holder notifies you of the\r\nviolation by some reasonable means, this is the first time you have\r\nreceived notice of violation of this License (for any work) from that\r\ncopyright holder, and you cure the violation prior to 30 days after\r\nyour receipt of the notice.\r\n\r\n  Termination of your rights under this section does not terminate the\r\nlicenses of parties who have received copies or rights from you under\r\nthis License.  If your rights have been terminated and not permanently\r\nreinstated, you do not qualify to receive new licenses for the same\r\nmaterial under section 10.\r\n\r\n  9. Acceptance Not Required for Having Copies.\r\n\r\n  You are not required to accept this License in order to receive or\r\nrun a copy of the Program.  Ancillary propagation of a covered work\r\noccurring solely as a consequence of using peer-to-peer transmission\r\nto receive a copy likewise does not require acceptance.  However,\r\nnothing other than this License grants you permission to propagate or\r\nmodify any covered work.  These actions infringe copyright if you do\r\nnot accept this License.  Therefore, by modifying or propagating a\r\ncovered work, you indicate your acceptance of this License to do so.\r\n\r\n  10. Automatic Licensing of Downstream Recipients.\r\n\r\n  Each time you convey a covered work, the recipient automatically\r\nreceives a license from the original licensors, to run, modify and\r\npropagate that work, subject to this License.  You are not responsible\r\nfor enforcing compliance by third parties with this License.\r\n\r\n  An \"entity transaction\" is a transaction transferring control of an\r\norganization, or substantially all assets of one, or subdividing an\r\norganization, or merging organizations.  If propagation of a covered\r\nwork results from an entity transaction, each party to that\r\ntransaction who receives a copy of the work also receives whatever\r\nlicenses to the work the party's predecessor in interest had or could\r\ngive under the previous paragraph, plus a right to possession of the\r\nCorresponding Source of the work from the predecessor in interest, if\r\nthe predecessor has it or can get it with reasonable efforts.\r\n\r\n  You may not impose any further restrictions on the exercise of the\r\nrights granted or affirmed under this License.  For example, you may\r\nnot impose a license fee, royalty, or other charge for exercise of\r\nrights granted under this License, and you may not initiate litigation\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that\r\nany patent claim is infringed by making, using, selling, offering for\r\nsale, or importing the Program or any portion of it.\r\n\r\n  11. Patents.\r\n\r\n  A \"contributor\" is a copyright holder who authorizes use under this\r\nLicense of the Program or a work on which the Program is based.  The\r\nwork thus licensed is called the contributor's \"contributor version\".\r\n\r\n  A contributor's \"essential patent claims\" are all patent claims\r\nowned or controlled by the contributor, whether already acquired or\r\nhereafter acquired, that would be infringed by some manner, permitted\r\nby this License, of making, using, or selling its contributor version,\r\nbut do not include claims that would be infringed only as a\r\nconsequence of further modification of the contributor version.  For\r\npurposes of this definition, \"control\" includes the right to grant\r\npatent sublicenses in a manner consistent with the requirements of\r\nthis License.\r\n\r\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\r\npatent license under the contributor's essential patent claims, to\r\nmake, use, sell, offer for sale, import and otherwise run, modify and\r\npropagate the contents of its contributor version.\r\n\r\n  In the following three paragraphs, a \"patent license\" is any express\r\nagreement or commitment, however denominated, not to enforce a patent\r\n(such as an express permission to practice a patent or covenant not to\r\nsue for patent infringement).  To \"grant\" such a patent license to a\r\nparty means to make such an agreement or commitment not to enforce a\r\npatent against the party.\r\n\r\n  If you convey a covered work, knowingly relying on a patent license,\r\nand the Corresponding Source of the work is not available for anyone\r\nto copy, free of charge and under the terms of this License, through a\r\npublicly available network server or other readily accessible means,\r\nthen you must either (1) cause the Corresponding Source to be so\r\navailable, or (2) arrange to deprive yourself of the benefit of the\r\npatent license for this particular work, or (3) arrange, in a manner\r\nconsistent with the requirements of this License, to extend the patent\r\nlicense to downstream recipients.  \"Knowingly relying\" means you have\r\nactual knowledge that, but for the patent license, your conveying the\r\ncovered work in a country, or your recipient's use of the covered work\r\nin a country, would infringe one or more identifiable patents in that\r\ncountry that you have reason to believe are valid.\r\n\r\n  If, pursuant to or in connection with a single transaction or\r\narrangement, you convey, or propagate by procuring conveyance of, a\r\ncovered work, and grant a patent license to some of the parties\r\nreceiving the covered work authorizing them to use, propagate, modify\r\nor convey a specific copy of the covered work, then the patent license\r\nyou grant is automatically extended to all recipients of the covered\r\nwork and works based on it.\r\n\r\n  A patent license is \"discriminatory\" if it does not include within\r\nthe scope of its coverage, prohibits the exercise of, or is\r\nconditioned on the non-exercise of one or more of the rights that are\r\nspecifically granted under this License.  You may not convey a covered\r\nwork if you are a party to an arrangement with a third party that is\r\nin the business of distributing software, under which you make payment\r\nto the third party based on the extent of your activity of conveying\r\nthe work, and under which the third party grants, to any of the\r\nparties who would receive the covered work from you, a discriminatory\r\npatent license (a) in connection with copies of the covered work\r\nconveyed by you (or copies made from those copies), or (b) primarily\r\nfor and in connection with specific products or compilations that\r\ncontain the covered work, unless you entered into that arrangement,\r\nor that patent license was granted, prior to 28 March 2007.\r\n\r\n  Nothing in this License shall be construed as excluding or limiting\r\nany implied license or other defenses to infringement that may\r\notherwise be available to you under applicable patent law.\r\n\r\n  12. No Surrender of Others' Freedom.\r\n\r\n  If conditions are imposed on you (whether by court order, agreement or\r\notherwise) that contradict the conditions of this License, they do not\r\nexcuse you from the conditions of this License.  If you cannot convey a\r\ncovered work so as to satisfy simultaneously your obligations under this\r\nLicense and any other pertinent obligations, then as a consequence you may\r\nnot convey it at all.  For example, if you agree to terms that obligate you\r\nto collect a royalty for further conveying from those to whom you convey\r\nthe Program, the only way you could satisfy both those terms and this\r\nLicense would be to refrain entirely from conveying the Program.\r\n\r\n  13. Use with the GNU Affero General Public License.\r\n\r\n  Notwithstanding any other provision of this License, you have\r\npermission to link or combine any covered work with a work licensed\r\nunder version 3 of the GNU Affero General Public License into a single\r\ncombined work, and to convey the resulting work.  The terms of this\r\nLicense will continue to apply to the part which is the covered work,\r\nbut the special requirements of the GNU Affero General Public License,\r\nsection 13, concerning interaction through a network will apply to the\r\ncombination as such.\r\n\r\n  14. Revised Versions of this License.\r\n\r\n  The Free Software Foundation may publish revised and/or new versions of\r\nthe GNU General Public License from time to time.  Such new versions will\r\nbe similar in spirit to the present version, but may differ in detail to\r\naddress new problems or concerns.\r\n\r\n  Each version is given a distinguishing version number.  If the\r\nProgram specifies that a certain numbered version of the GNU General\r\nPublic License \"or any later version\" applies to it, you have the\r\noption of following the terms and conditions either of that numbered\r\nversion or of any later version published by the Free Software\r\nFoundation.  If the Program does not specify a version number of the\r\nGNU General Public License, you may choose any version ever published\r\nby the Free Software Foundation.\r\n\r\n  If the Program specifies that a proxy can decide which future\r\nversions of the GNU General Public License can be used, that proxy's\r\npublic statement of acceptance of a version permanently authorizes you\r\nto choose that version for the Program.\r\n\r\n  Later license versions may give you additional or different\r\npermissions.  However, no additional obligations are imposed on any\r\nauthor or copyright holder as a result of your choosing to follow a\r\nlater version.\r\n\r\n  15. Disclaimer of Warranty.\r\n\r\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\r\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\r\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\r\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\r\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\r\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\r\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n\r\n  16. Limitation of Liability.\r\n\r\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\r\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\r\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\r\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\r\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\r\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\r\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\r\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\r\nSUCH DAMAGES.\r\n\r\n  17. Interpretation of Sections 15 and 16.\r\n\r\n  If the disclaimer of warranty and limitation of liability provided\r\nabove cannot be given local legal effect according to their terms,\r\nreviewing courts shall apply local law that most closely approximates\r\nan absolute waiver of all civil liability in connection with the\r\nProgram, unless a warranty or assumption of liability accompanies a\r\ncopy of the Program in return for a fee.\r\n\r\n                     END OF TERMS AND CONDITIONS\r\n\r\n            How to Apply These Terms to Your New Programs\r\n\r\n  If you develop a new program, and you want it to be of the greatest\r\npossible use to the public, the best way to achieve this is to make it\r\nfree software which everyone can redistribute and change under these terms.\r\n\r\n  To do so, attach the following notices to the program.  It is safest\r\nto attach them to the start of each source file to most effectively\r\nstate the exclusion of warranty; and each file should have at least\r\nthe \"copyright\" line and a pointer to where the full notice is found.\r\n\r\n    <one line to give the program's name and a brief idea of what it does.>\r\n    Copyright (C) <year>  <name of author>\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nAlso add information on how to contact you by electronic and paper mail.\r\n\r\n  If the program does terminal interaction, make it output a short\r\nnotice like this when it starts in an interactive mode:\r\n\r\n    <program>  Copyright (C) <year>  <name of author>\r\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\r\n    This is free software, and you are welcome to redistribute it\r\n    under certain conditions; type `show c' for details.\r\n\r\nThe hypothetical commands `show w' and `show c' should show the appropriate\r\nparts of the General Public License.  Of course, your program's commands\r\nmight be different; for a GUI interface, you would use an \"about box\".\r\n\r\n  You should also get your employer (if you work as a programmer) or school,\r\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\r\nFor more information on this, and how to apply and follow the GNU GPL, see\r\n<http://www.gnu.org/licenses/>.\r\n\r\n  The GNU General Public License does not permit incorporating your program\r\ninto proprietary programs.  If your program is a subroutine library, you\r\nmay consider it more useful to permit linking proprietary applications with\r\nthe library.  If this is what you want to do, use the GNU Lesser General\r\nPublic License instead of this License.  But first, please read\r\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\r\n\r\n*/","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xEthClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenClaimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"ClaimBaseFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensPerEthWad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseXEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenLidPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalIgnited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"CreateInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemEth\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_insuranceIsInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_tokenIsRegistered\",\"type\":\"bool\"}],\"name\":\"canCreateInsurance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"createInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerEthWad\",\"type\":\"uint256\"}],\"name\":\"getRedeemValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"getTokenInsuranceOthers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectDev\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUnwound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBaseFeeClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"getTokenInsuranceUints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIgnited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerEthWad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenLidPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokenLidPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenLidPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokenLidPool\",\"type\":\"uint256\"}],\"name\":\"getTotalTokenClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalIgnited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"}],\"name\":\"getTotalXethClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiftoffSettings\",\"name\":\"_liftoffSettings\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insurancePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xEthValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedXEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnwound\",\"type\":\"bool\"}],\"name\":\"isInsuranceExhausted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liftoffSettings\",\"outputs\":[{\"internalType\":\"contract ILiftoffSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiftoffSettings\",\"name\":\"_liftoffSettings\",\"type\":\"address\"}],\"name\":\"setLiftoffSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInsurances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIgnited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerEthWad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenLidPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedXEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokenLidPool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectDev\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUnwound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBaseFeeClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiftoffInsurance","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe84d15a2aa5576aa329a5f5b3aceafa7585943d9660596e834fbabe689c8e90"}]}