{"status":"1","message":"OK","result":[{"SourceCode":"//\"SPDX-License-Identifier: UNLICENSED\"\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface ERC20Interface {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner = 0xcdfc73470D0255505d960f2aEe0377aA43e60307;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract MCNStake is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address public mcnToken;\r\n    uint256 public totalStaked;\r\n    uint256 public stakingTaxRate;                     //10 = 1%\r\n    uint256 public unstakingTaxRate;                   //10 = 1%\r\n    uint public registrationTax;\r\n    uint256 public dailyROI;                         //100 = 1%\r\n    uint256 public minimumStakeValue;\r\n    bool public active = true;\r\n    \r\n    mapping(address => uint256) public stakes;\r\n    mapping(address => uint256) public referralRewards;\r\n    mapping(address => uint256) public referralCount;\r\n    mapping(address => uint256) public stakeRewards;\r\n    mapping(address => uint256) private lastClock;\r\n    mapping(address => bool) public registered;\r\n    \r\n    event Withdrawal(address sender, uint256 amount);\r\n    event Staked(address sender, uint256 amount, uint256 tax);\r\n    event Unstaked(address sender, uint256 amount, uint256 tax);\r\n    event Registered(address stakeholder, uint256 amount, uint256 totalTax , address _referrer);\r\n    \r\n    constructor(\r\n        address _token,\r\n        uint256 _stakingTaxRate, \r\n        uint256 _unstakingTaxRate,\r\n        uint256 _dailyROI,\r\n        uint256 _registrationTax,\r\n        uint256 _minimumStakeValue) public {\r\n        mcnToken = _token;\r\n        stakingTaxRate = _stakingTaxRate;\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n        dailyROI = _dailyROI;\r\n        registrationTax = _registrationTax;\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    modifier onlyRegistered() {\r\n        require(registered[msg.sender] == true, \"Stakeholder must be registered\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyUnregistered() {\r\n        require(registered[msg.sender] == false, \"Stakeholder is already registered\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenActive() {\r\n        require(active == true, \"Smart contract is curently inactive\");\r\n        _;\r\n    }\r\n    \r\n    function registerAndStake(uint256 _amount, address _referrer) external onlyUnregistered() whenActive() {\r\n        require(msg.sender != _referrer, \"Cannot refer self\");\r\n        require(registered[_referrer] || address(0x0) == _referrer, \"Referrer must be registered\");\r\n        require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, \"Must have enough balance to stake\");\r\n        require(_amount >= registrationTax.add(minimumStakeValue), \"Must send at least enough LEAD to pay registration fee.\");\r\n        require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), \"Stake failed due to failed amount transfer.\");\r\n        \r\n        uint256 finalAmount = _amount.sub(registrationTax);\r\n        uint256 stakingTax = (stakingTaxRate.mul(finalAmount)).div(1000);\r\n        if(_referrer != address(0x0)) {\r\n            referralCount[_referrer]++;\r\n            referralRewards[_referrer] = (referralRewards[_referrer]).add(stakingTax);\r\n        } \r\n        registered[msg.sender] = true;\r\n        lastClock[msg.sender] = now;\r\n        totalStaked = totalStaked.add(finalAmount).sub(stakingTax);\r\n        stakes[msg.sender] = (stakes[msg.sender]).add(finalAmount).sub(stakingTax);\r\n        emit Registered(msg.sender, _amount, registrationTax.add(stakingTax), _referrer);\r\n    }\r\n    \r\n    function calculateEarnings(address _stakeholder) public view returns(uint256) {\r\n        uint256 activeDays = (now.sub(lastClock[_stakeholder])).div(86400);\r\n        return ((stakes[_stakeholder]).mul(dailyROI).mul(activeDays)).div(10000);\r\n    }\r\n    \r\n    function stake(uint256 _amount) external onlyRegistered() whenActive() {\r\n        require(_amount >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, \"Must have enough balance to stake\");\r\n        require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), \"Stake failed due to failed amount transfer.\");\r\n        uint256 stakingTax = (stakingTaxRate.mul(_amount)).div(1000);\r\n        uint256 afterTax = _amount.sub(stakingTax);\r\n        totalStaked = totalStaked.add(afterTax);\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        uint256 remainder = (now.sub(lastClock[msg.sender])).mod(86400);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        stakes[msg.sender] = (stakes[msg.sender]).add(afterTax);\r\n        emit Staked(msg.sender, afterTax, stakingTax);\r\n    }\r\n\r\n    function unstake(uint256 _amount) external onlyRegistered() {\r\n        require(_amount <= stakes[msg.sender] && _amount > 0, 'Insufficient balance to unstake');\r\n        uint256 unstakingTax = (unstakingTaxRate.mul(_amount)).div(1000);\r\n        uint256 afterTax = _amount.sub(unstakingTax);\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        stakes[msg.sender] = (stakes[msg.sender]).sub(_amount);\r\n        uint256 remainder = (now.sub(lastClock[msg.sender])).mod(86400);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        totalStaked = totalStaked.sub(_amount);\r\n        ERC20Interface(mcnToken).transfer(msg.sender, afterTax);\r\n        if(stakes[msg.sender] == 0) {\r\n            registered[msg.sender] = false;\r\n        }\r\n        emit Unstaked(msg.sender, _amount, unstakingTax);\r\n    }\r\n    \r\n    function withdrawEarnings() external returns (bool success) {\r\n        uint256 totalReward = (referralRewards[msg.sender]).add(stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        require(totalReward > 0, 'No reward to withdraw');\r\n        require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient LEAD balance in pool');\r\n        stakeRewards[msg.sender] = 0;\r\n        referralRewards[msg.sender] = 0;\r\n        referralCount[msg.sender] = 0;\r\n        uint256 remainder = (now.sub(lastClock[msg.sender])).mod(86400);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        ERC20Interface(mcnToken).transfer(msg.sender, totalReward);\r\n        emit Withdrawal(msg.sender, totalReward);\r\n        return true;\r\n    }\r\n    \r\n    function changeActiveStatus() external onlyOwner() {\r\n        if(active == true) {\r\n            active = false;\r\n        } else {\r\n            active = true;\r\n        }\r\n    }\r\n    \r\n    function setStakingTaxRate(uint256 _stakingTaxRate) external onlyOwner() {\r\n        stakingTaxRate = _stakingTaxRate;\r\n    }\r\n\r\n    function setUnstakingTaxRate(uint256 _unstakingTaxRate) external onlyOwner() {\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n    }\r\n    \r\n    function setDailyROI(uint256 _dailyROI) external onlyOwner() {\r\n        dailyROI = _dailyROI;\r\n    }\r\n    \r\n    function setRegistrationTax(uint256 _registrationTax) external onlyOwner() {\r\n        registrationTax = _registrationTax;\r\n    }\r\n    \r\n    function setMinimumStakeValue(uint256 _minimumStakeValue) external onlyOwner() {\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    function filter(uint256 _amount) external onlyOwner returns (bool success) {\r\n        require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient LEAD balance in pool');\r\n        ERC20Interface(mcnToken).transfer(msg.sender, _amount);\r\n        emit Withdrawal(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"filter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcnToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"}],\"name\":\"setRegistrationTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setStakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setUnstakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MCNStake","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c047c42554c6495c85108ae8ee66fa4e3b88176d0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000002086ac351052600000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ff4af18fcca5bc27ade1f0697bf4d98763078775e8b5e5badf53179a4f4d1d8d"}]}