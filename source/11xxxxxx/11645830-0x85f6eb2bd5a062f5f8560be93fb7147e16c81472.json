{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/repos/smart-contracts/Franklin/Fly-token/contracts/ERC1132.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.8.0;\\r\\n/**\\r\\n * @title ERC1132 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/1132\\r\\n */\\r\\n\\r\\nabstract contract ERC1132 {\\r\\n    /**\\r\\n     * @dev Reasons why a user's tokens have been locked\\r\\n     */\\r\\n    mapping(address => bytes32[]) public lockReason;\\r\\n\\r\\n    /**\\r\\n     * @dev locked token structure\\r\\n     */\\r\\n    struct lockToken {\\r\\n        uint256 amount;\\r\\n        uint256 validity;\\r\\n        bool claimed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Holds number & validity of tokens locked for a given reason for\\r\\n     *      a specified address\\r\\n     */\\r\\n    mapping(address => mapping(bytes32 => lockToken)) public locked;\\r\\n\\r\\n    /**\\r\\n     * @dev Records data of all the tokens Locked\\r\\n     */\\r\\n    event Locked(\\r\\n        address indexed _of,\\r\\n        bytes32 indexed _reason,\\r\\n        uint256 _amount,\\r\\n        uint256 _validity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Records data of all the tokens unlocked\\r\\n     */\\r\\n    event Unlocked(\\r\\n        address indexed _of,\\r\\n        bytes32 indexed _reason,\\r\\n        uint256 _amount\\r\\n    );\\r\\n    \\r\\n    /**\\r\\n     * @dev Locks a specified amount of tokens against an address,\\r\\n     *      for a specified reason and time\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _amount Number of tokens to be locked\\r\\n     * @param _time Lock time in seconds\\r\\n     */\\r\\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time) virtual\\r\\n        public returns (bool);\\r\\n  \\r\\n    /**\\r\\n     * @dev Returns tokens locked for a specified address for a\\r\\n     *      specified reason\\r\\n     *\\r\\n     * @param _of The address whose tokens are locked\\r\\n     * @param _reason The reason to query the lock tokens for\\r\\n     */\\r\\n    function tokensLocked(address _of, bytes32 _reason) virtual\\r\\n        public view returns (uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns tokens locked for a specified address for a\\r\\n     *      specified reason at a specific time\\r\\n     *\\r\\n     * @param _of The address whose tokens are locked\\r\\n     * @param _reason The reason to query the lock tokens for\\r\\n     * @param _time The timestamp to query the lock tokens for\\r\\n     */\\r\\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) virtual\\r\\n        public view returns (uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns total tokens held by an address (locked + transferable)\\r\\n     * @param _of The address to query the total balance of\\r\\n     */\\r\\n    function totalBalanceOf(address _of) virtual\\r\\n        public view returns (uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Extends lock for a specified reason and time\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _time Lock extension time in seconds\\r\\n     */\\r\\n    function extendLock(bytes32 _reason, uint256 _time) virtual\\r\\n        public returns (bool);\\r\\n    \\r\\n    /**\\r\\n     * @dev Increase number of tokens locked for a specified reason\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _amount Number of tokens to be increased\\r\\n     */\\r\\n    function increaseLockAmount(bytes32 _reason, uint256 _amount) virtual\\r\\n        public returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns unlockable tokens for a specified address for a specified reason\\r\\n     * @param _of The address to query the the unlockable token count of\\r\\n     * @param _reason The reason to query the unlockable tokens for\\r\\n     */\\r\\n    function tokensUnlockable(address _of, bytes32 _reason) virtual\\r\\n        public view returns (uint256 amount);\\r\\n \\r\\n    /**\\r\\n     * @dev Unlocks the unlockable tokens of a specified address\\r\\n     * @param _of Address of user, claiming back unlockable tokens\\r\\n     */\\r\\n    function unlock(address _of) virtual\\r\\n        public returns (uint256 unlockableTokens);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the unlockable tokens of a specified address\\r\\n     * @param _of The address to query the the unlockable token count of\\r\\n     */\\r\\n    function getUnlockableTokens(address _of) virtual\\r\\n        public view returns (uint256 unlockableTokens);\\r\\n\\r\\n}\"\r\n    },\r\n    \"/D/repos/smart-contracts/Franklin/Fly-token/contracts/FLyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.8.0;\\r\\nimport \\\"../contracts/LockableToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract FLyToken is LockableToken, Ownable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized with locked tokens for round 1.\\r\\n     */\\r\\n    bool private _initializedRound1;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized for round 1.\\r\\n     */\\r\\n    bool private _initializingRound1;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized with locked tokens for round 2.\\r\\n     */\\r\\n    bool private _initializedRound2;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized for round 2.\\r\\n     */\\r\\n    bool private _initializingRound2;\\r\\n\\r\\n    constructor() public LockableToken(17011706000000, \\\"Franklin\\\", \\\"FLy\\\", 4) {\\r\\n    }\\r\\n\\r\\n    function initializeRound1() public initializerR1 onlyOwner  {\\r\\n        _initRound1();\\r\\n    }\\r\\n\\r\\n    function initializeRound2() public initializerR2 onlyOwner  {\\r\\n        _initRound2();\\r\\n    }\\r\\n\\r\\n    function _initRound1() internal   {\\r\\n        uint256 vestingRound1Seconds = 1617235200 - now;\\r\\n        uint256 vrAmount = 63964014560;\\r\\n        uint256 days30 = 2592000;\\r\\n        //round 1\\r\\n        _lock('v1_1', vrAmount, vestingRound1Seconds);\\r\\n        _lock('v1_2', vrAmount, vestingRound1Seconds.add(days30));\\r\\n        _lock('v1_3', vrAmount, vestingRound1Seconds.add(days30.mul(2)));\\r\\n        _lock('v1_4', vrAmount, vestingRound1Seconds.add(days30.mul(3)));\\r\\n        _lock('v1_5', vrAmount, vestingRound1Seconds.add(days30.mul(4)));\\r\\n        _lock('v1_6', vrAmount, vestingRound1Seconds.add(days30.mul(5)));\\r\\n        _lock('v1_7', vrAmount, vestingRound1Seconds.add(days30.mul(6)));\\r\\n        _lock('v1_8', vrAmount, vestingRound1Seconds.add(days30.mul(7)));\\r\\n        _lock('v1_9', vrAmount, vestingRound1Seconds.add(days30.mul(8)));\\r\\n        _lock('v1_10', vrAmount, vestingRound1Seconds.add(days30.mul(9)));\\r\\n        _lock('v1_11', vrAmount, vestingRound1Seconds.add(days30.mul(10)));\\r\\n        _lock('v1_12', vrAmount, vestingRound1Seconds.add(days30.mul(11)));\\r\\n        _lock('v1_13', vrAmount, vestingRound1Seconds.add(days30.mul(12)));\\r\\n        _lock('v1_14', vrAmount, vestingRound1Seconds.add(days30.mul(13)));\\r\\n        _lock('v1_15', vrAmount, vestingRound1Seconds.add(days30.mul(14)));\\r\\n        _lock('v1_16', vrAmount, vestingRound1Seconds.add(days30.mul(15)));\\r\\n        _lock('v1_17', vrAmount, vestingRound1Seconds.add(days30.mul(16)));\\r\\n        _lock('v1_18', vrAmount, vestingRound1Seconds.add(days30.mul(17)));\\r\\n        _lock('v1_19', vrAmount, vestingRound1Seconds.add(days30.mul(18)));\\r\\n        _lock('v1_20', vrAmount, vestingRound1Seconds.add(days30.mul(19)));\\r\\n        _lock('v1_21', vrAmount, vestingRound1Seconds.add(days30.mul(20)));\\r\\n        _lock('v1_22', vrAmount, vestingRound1Seconds.add(days30.mul(21)));\\r\\n        _lock('v1_23', vrAmount, vestingRound1Seconds.add(days30.mul(22)));\\r\\n        _lock('v1_24', vrAmount, vestingRound1Seconds.add(days30.mul(23)));\\r\\n        _lock('v1_25', vrAmount, vestingRound1Seconds.add(days30.mul(24)));\\r\\n        _lock('v1_26', vrAmount, vestingRound1Seconds.add(days30.mul(25)));\\r\\n        _lock('v1_27', vrAmount, vestingRound1Seconds.add(days30.mul(26)));\\r\\n        _lock('v1_28', vrAmount, vestingRound1Seconds.add(days30.mul(27)));\\r\\n        _lock('v1_29', vrAmount, vestingRound1Seconds.add(days30.mul(28)));\\r\\n        _lock('v1_30', vrAmount, vestingRound1Seconds.add(days30.mul(29)));\\r\\n        _lock('v1_31', vrAmount, vestingRound1Seconds.add(days30.mul(30)));\\r\\n        _lock('v1_32', vrAmount, vestingRound1Seconds.add(days30.mul(31)));\\r\\n        _lock('v1_33', vrAmount, vestingRound1Seconds.add(days30.mul(32)));\\r\\n        _lock('v1_34', vrAmount, vestingRound1Seconds.add(days30.mul(33)));\\r\\n        _lock('v1_35', vrAmount, vestingRound1Seconds.add(days30.mul(34)));\\r\\n        _lock('v1_36', vrAmount, vestingRound1Seconds.add(days30.mul(35)));\\r\\n        _lock('v1_37', vrAmount, vestingRound1Seconds.add(days30.mul(36)));\\r\\n        _lock('v1_38', vrAmount, vestingRound1Seconds.add(days30.mul(37)));\\r\\n        _lock('v1_39', vrAmount, vestingRound1Seconds.add(days30.mul(38)));\\r\\n        _lock('v1_40', vrAmount, vestingRound1Seconds.add(days30.mul(39)));\\r\\n        _lock('v1_41', vrAmount, vestingRound1Seconds.add(days30.mul(40)));\\r\\n        _lock('v1_42', vrAmount, vestingRound1Seconds.add(days30.mul(41)));\\r\\n        _lock('v1_43', vrAmount, vestingRound1Seconds.add(days30.mul(42)));\\r\\n        _lock('v1_44', vrAmount, vestingRound1Seconds.add(days30.mul(43)));\\r\\n        _lock('v1_45', vrAmount, vestingRound1Seconds.add(days30.mul(44)));\\r\\n        _lock('v1_46', vrAmount, vestingRound1Seconds.add(days30.mul(45)));\\r\\n        _lock('v1_47', vrAmount, vestingRound1Seconds.add(days30.mul(46)));\\r\\n        _lock('v1_48', vrAmount, vestingRound1Seconds.add(days30.mul(47)));\\r\\n        _lock('v1_49', vrAmount, vestingRound1Seconds.add(days30.mul(48)));\\r\\n        _lock('v1_50', vrAmount, vestingRound1Seconds.add(days30.mul(49)));\\r\\n        //round 1: transfer locked total \\r\\n        transfer(address(this), 3198200728000);\\r\\n    }\\r\\n\\r\\n    function _initRound2() internal   {\\r\\n        uint256 vestingRound2Seconds = 1625097600 - now;\\r\\n        uint256 days30 = 2592000;\\r\\n        // round 2 - starting from 01.07.2021 - autogenerated from excel output\\r\\n        _lock('v2_1', 29770485500, vestingRound2Seconds);\\r\\n        _lock('v2_2', 30365895210, vestingRound2Seconds.add(days30));\\r\\n        _lock('v2_3', 30978316626, vestingRound2Seconds.add(days30.mul(2)));\\r\\n        _lock('v2_4', 31590738042, vestingRound2Seconds.add(days30.mul(3)));\\r\\n        _lock('v2_5', 32220171164, vestingRound2Seconds.add(days30.mul(4)));\\r\\n        _lock('v2_6', 32866615992, vestingRound2Seconds.add(days30.mul(5)));\\r\\n        _lock('v2_7', 33530072526, vestingRound2Seconds.add(days30.mul(6)));\\r\\n        _lock('v2_8', 34193529060, vestingRound2Seconds.add(days30.mul(7)));\\r\\n        _lock('v2_9', 34873997300, vestingRound2Seconds.add(days30.mul(8)));\\r\\n        _lock('v2_10', 35571477246, vestingRound2Seconds.add(days30.mul(9)));\\r\\n        _lock('v2_11', 36285968898, vestingRound2Seconds.add(days30.mul(10)));\\r\\n        _lock('v2_12', 37017472256, vestingRound2Seconds.add(days30.mul(11)));\\r\\n        _lock('v2_13', 37748975614, vestingRound2Seconds.add(days30.mul(12)));\\r\\n        _lock('v2_14', 38514502384, vestingRound2Seconds.add(days30.mul(13)));\\r\\n        _lock('v2_15', 39280029154, vestingRound2Seconds.add(days30.mul(14)));\\r\\n        _lock('v2_16', 40062567630, vestingRound2Seconds.add(days30.mul(15)));\\r\\n        _lock('v2_17', 40862117812, vestingRound2Seconds.add(days30.mul(16)));\\r\\n        _lock('v2_18', 41678679700, vestingRound2Seconds.add(days30.mul(17)));\\r\\n        _lock('v2_19', 42512253294, vestingRound2Seconds.add(days30.mul(18)));\\r\\n        _lock('v2_20', 43362838594, vestingRound2Seconds.add(days30.mul(19)));\\r\\n        _lock('v2_21', 44230435600, vestingRound2Seconds.add(days30.mul(20)));\\r\\n        _lock('v2_22', 45115044312, vestingRound2Seconds.add(days30.mul(21)));\\r\\n        _lock('v2_23', 46016664730, vestingRound2Seconds.add(days30.mul(22)));\\r\\n        _lock('v2_24', 46952308560, vestingRound2Seconds.add(days30.mul(23)));\\r\\n        _lock('v2_25', 47887952390, vestingRound2Seconds.add(days30.mul(24)));\\r\\n        _lock('v2_26', 48840607926, vestingRound2Seconds.add(days30.mul(25)));\\r\\n        _lock('v2_27', 49810275168, vestingRound2Seconds.add(days30.mul(26)));\\r\\n        _lock('v2_28', 50813965822, vestingRound2Seconds.add(days30.mul(27)));\\r\\n        _lock('v2_29', 51834668182, vestingRound2Seconds.add(days30.mul(28)));\\r\\n        _lock('v2_30', 52872382248, vestingRound2Seconds.add(days30.mul(29)));\\r\\n        _lock('v2_31', 53927108020, vestingRound2Seconds.add(days30.mul(30)));\\r\\n        _lock('v2_32', 54998845498, vestingRound2Seconds.add(days30.mul(31)));\\r\\n        _lock('v2_33', 56104606388, vestingRound2Seconds.add(days30.mul(32)));\\r\\n        _lock('v2_34', 57227378984, vestingRound2Seconds.add(days30.mul(33)));\\r\\n        _lock('v2_35', 58367163286, vestingRound2Seconds.add(days30.mul(34)));\\r\\n        _lock('v2_36', 59540971000, vestingRound2Seconds.add(days30.mul(35)));\\r\\n        _lock('v2_37', 60731790420, vestingRound2Seconds.add(days30.mul(36)));\\r\\n        _lock('v2_38', 61939621546, vestingRound2Seconds.add(days30.mul(37)));\\r\\n        _lock('v2_39', 63181476084, vestingRound2Seconds.add(days30.mul(38)));\\r\\n        _lock('v2_40', 64440342328, vestingRound2Seconds.add(days30.mul(39)));\\r\\n        _lock('v2_41', 65733231984, vestingRound2Seconds.add(days30.mul(40)));\\r\\n        _lock('v2_42', 67043133346, vestingRound2Seconds.add(days30.mul(41)));\\r\\n        _lock('v2_43', 68387058120, vestingRound2Seconds.add(days30.mul(42)));\\r\\n        _lock('v2_44', 69765006306, vestingRound2Seconds.add(days30.mul(43)));\\r\\n        _lock('v2_45', 71159966198, vestingRound2Seconds.add(days30.mul(44)));\\r\\n        _lock('v2_46', 72571937796, vestingRound2Seconds.add(days30.mul(45)));\\r\\n        _lock('v2_47', 74034944512, vestingRound2Seconds.add(days30.mul(46)));\\r\\n        _lock('v2_48', 94823249244, vestingRound2Seconds.add(days30.mul(47)));\\r\\n        //round 2: transfer locked total \\r\\n        transfer(address(this), 2381638840000);\\r\\n    }\\r\\n\\r\\n    function _lock(\\r\\n        bytes32 _reason,\\r\\n        uint256 _amount,\\r\\n        uint256 _time\\r\\n    ) internal returns (bool) {\\r\\n        uint256 validUntil = now.add(_time); //solhint-disable-line\\r\\n        if (locked[_msgSender()][_reason].amount == 0)\\r\\n            lockReason[_msgSender()].push(_reason);\\r\\n        locked[_msgSender()][_reason] = lockToken(_amount, validUntil, false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n        unlock(from);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n    */\\r\\n    modifier initializerR1() {\\r\\n        require(_initializingRound1 || !_initializedRound1, \\\"InitializerR1: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializingRound1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializingRound1 = true;\\r\\n            _initializedRound1 = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializingRound1 = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n    */\\r\\n    modifier initializerR2() {\\r\\n        require(_initializingRound2 || !_initializedRound2, \\\"InitializerR2: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializingRound2;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializingRound2 = true;\\r\\n            _initializedRound2 = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializingRound2 = false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/repos/smart-contracts/Franklin/Fly-token/contracts/LockableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.8.0;\\r\\nimport \\\"../contracts/ERC1132.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract LockableToken is ERC1132, ERC20Burnable {\\r\\n    /**\\r\\n     * @dev Error messages for require statements\\r\\n     */\\r\\n    string internal constant ALREADY_LOCKED = \\\"Tokens already locked\\\";\\r\\n    string internal constant NOT_LOCKED = \\\"No tokens locked\\\";\\r\\n    string internal constant AMOUNT_ZERO = \\\"Amount can not be 0\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev constructor to mint initial tokens\\r\\n     * Shall update to _mint once openzepplin updates their npm package.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _supply,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) public ERC20(_name, _symbol) {\\r\\n        _setupDecimals(_decimals);\\r\\n        _mint(_msgSender(), _supply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks a specified amount of tokens against an address,\\r\\n     *      for a specified reason and time\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _amount Number of tokens to be locked\\r\\n     * @param _time Lock time in seconds\\r\\n     */\\r\\n    function lock(\\r\\n        bytes32 _reason,\\r\\n        uint256 _amount,\\r\\n        uint256 _time\\r\\n    ) public override returns (bool) {\\r\\n        uint256 validUntil = now.add(_time); //solhint-disable-line\\r\\n\\r\\n        // If tokens are already locked, then functions extendLock or\\r\\n        // increaseLockAmount should be used to make any changes\\r\\n        require(tokensLocked(_msgSender(), _reason) == 0, ALREADY_LOCKED);\\r\\n        require(_amount != 0, AMOUNT_ZERO);\\r\\n\\r\\n        if (locked[_msgSender()][_reason].amount == 0)\\r\\n            lockReason[_msgSender()].push(_reason);\\r\\n\\r\\n        transfer(address(this), _amount);\\r\\n\\r\\n        locked[_msgSender()][_reason] = lockToken(_amount, validUntil, false);\\r\\n\\r\\n        emit Locked(_msgSender(), _reason, _amount, validUntil);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers and Locks a specified amount of tokens,\\r\\n     *      for a specified reason and time\\r\\n     * @param _to adress to which tokens are to be transfered\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _amount Number of tokens to be transfered and locked\\r\\n     * @param _time Lock time in seconds\\r\\n     */\\r\\n    function transferWithLock(\\r\\n        address _to,\\r\\n        bytes32 _reason,\\r\\n        uint256 _amount,\\r\\n        uint256 _time\\r\\n    ) public returns (bool) {\\r\\n        uint256 validUntil = now.add(_time); //solhint-disable-line\\r\\n\\r\\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\\r\\n        require(_amount != 0, AMOUNT_ZERO);\\r\\n\\r\\n        if (locked[_to][_reason].amount == 0) lockReason[_to].push(_reason);\\r\\n\\r\\n        transfer(address(this), _amount);\\r\\n\\r\\n        locked[_to][_reason] = lockToken(_amount, validUntil, false);\\r\\n\\r\\n        emit Locked(_to, _reason, _amount, validUntil);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns tokens locked for a specified address for a\\r\\n     *      specified reason\\r\\n     *\\r\\n     * @param _of The address whose tokens are locked\\r\\n     * @param _reason The reason to query the lock tokens for\\r\\n     */\\r\\n    function tokensLocked(address _of, bytes32 _reason)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        if (!locked[_of][_reason].claimed) amount = locked[_of][_reason].amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns tokens locked for a specified address for a\\r\\n     *      specified reason at a specific time\\r\\n     *\\r\\n     * @param _of The address whose tokens are locked\\r\\n     * @param _reason The reason to query the lock tokens for\\r\\n     * @param _time The timestamp to query the lock tokens for\\r\\n     */\\r\\n    function tokensLockedAtTime(\\r\\n        address _of,\\r\\n        bytes32 _reason,\\r\\n        uint256 _time\\r\\n    ) public view override returns (uint256 amount) {\\r\\n        if (locked[_of][_reason].validity > _time)\\r\\n            amount = locked[_of][_reason].amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total tokens held by an address (locked + transferable)\\r\\n     * @param _of The address to query the total balance of\\r\\n     */\\r\\n    function totalBalanceOf(address _of)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        amount = balanceOf(_of);\\r\\n\\r\\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\\r\\n            amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extends lock for a specified reason and time\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _time Lock extension time in seconds\\r\\n     */\\r\\n    function extendLock(bytes32 _reason, uint256 _time)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(tokensLocked(_msgSender(), _reason) > 0, NOT_LOCKED);\\r\\n\\r\\n        locked[_msgSender()][_reason].validity = locked[_msgSender()][_reason]\\r\\n            .validity\\r\\n            .add(_time);\\r\\n\\r\\n        emit Locked(\\r\\n            _msgSender(),\\r\\n            _reason,\\r\\n            locked[_msgSender()][_reason].amount,\\r\\n            locked[_msgSender()][_reason].validity\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase number of tokens locked for a specified reason\\r\\n     * @param _reason The reason to lock tokens\\r\\n     * @param _amount Number of tokens to be increased\\r\\n     */\\r\\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(tokensLocked(_msgSender(), _reason) > 0, NOT_LOCKED);\\r\\n        transfer(address(this), _amount);\\r\\n\\r\\n        locked[_msgSender()][_reason].amount = locked[_msgSender()][_reason]\\r\\n            .amount\\r\\n            .add(_amount);\\r\\n\\r\\n        emit Locked(\\r\\n            _msgSender(),\\r\\n            _reason,\\r\\n            locked[_msgSender()][_reason].amount,\\r\\n            locked[_msgSender()][_reason].validity\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns unlockable tokens for a specified address for a specified reason\\r\\n     * @param _of The address to query the the unlockable token count of\\r\\n     * @param _reason The reason to query the unlockable tokens for\\r\\n     */\\r\\n    function tokensUnlockable(address _of, bytes32 _reason)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        if (\\r\\n            locked[_of][_reason].validity <= now &&\\r\\n            !locked[_of][_reason].claimed\\r\\n        )\\r\\n            //solhint-disable-line\\r\\n            amount = locked[_of][_reason].amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unlocks the unlockable tokens of a specified address\\r\\n     * @param _of Address of user, claiming back unlockable tokens\\r\\n     */\\r\\n    function unlock(address _of)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256 unlockableTokens)\\r\\n    {\\r\\n        uint256 lockedTokens;\\r\\n\\r\\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\\r\\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\\r\\n            if (lockedTokens > 0) {\\r\\n                unlockableTokens = unlockableTokens.add(lockedTokens);\\r\\n                locked[_of][lockReason[_of][i]].claimed = true;\\r\\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (unlockableTokens > 0) this.transfer(_of, unlockableTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the unlockable tokens of a specified address\\r\\n     * @param _of The address to query the the unlockable token count of\\r\\n     */\\r\\n    function getUnlockableTokens(address _of)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 unlockableTokens)\\r\\n    {\\r\\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\\r\\n            unlockableTokens = unlockableTokens.add(\\r\\n                tokensUnlockable(_of, lockReason[_of][i])\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getUnlockableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRound1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRound2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockReason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_reason\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FLyToken","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://50a23a278bcee925f731e51464ad33cefa17a57c118cb30daf19b68634022aae"}]}