{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-21\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface DMEX {\r\n    function availableBalanceOf(address token, address user) external view returns (uint256);\r\n    function withdraw(address token, uint256 amount) external returns (bool success);\r\n}\r\n\r\ninterface UniswapV2ExchangeInterface {\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\n/* Interface for ERC20 Tokens */\r\ninterface DMEXTokenInterface {\r\n    function burn(uint256 _value) external returns (bool success);\r\n}\r\n\r\n// The DMEX Fee Contract\r\ncontract DMEX_Fee_Contract {    \r\n\r\n    address DMEX_CONTRACT = address(0x2101e480e22C953b37b9D0FE6551C1354Fe705E6);\r\n    address DMEX_TOKEN = address(0x6263e260fF6597180c9538c69aF8284EDeaCEC80);\r\n\r\n    address TOKEN_ETH = address(0x0000000000000000000000000000000000000000);\r\n    address TOKEN_DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address TOKEN_BTC = address(0x5228a22e72ccC52d415EcFd199F99D0665E7733b);\r\n\r\n    address uniswapRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    address payable FEE_ACCOUNT;\r\n    address owner;\r\n\r\n    uint256 fee_account_share = 618e15;\r\n    uint256 uniswap_share = 382e15;\r\n    \r\n    event Log(uint8 indexed errorId, uint value);\r\n\r\n    function extractFees() public {\r\n        uint256 fee_share; \r\n        uint256 us_share;\r\n\r\n        // extract eth\r\n        uint256 eth_balance = DMEX(DMEX_CONTRACT).availableBalanceOf(TOKEN_ETH, address(this));\r\n        \r\n        emit Log(1, eth_balance);\r\n        \r\n        // DMEX(DMEX_CONTRACT).withdraw(TOKEN_ETH, eth_balance);\r\n\r\n        // fee_share = eth_balance * fee_account_share / 1e18;\r\n        // us_share = eth_balance - fee_share;\r\n        \r\n        \r\n        // emit Log(2, fee_share);\r\n        // emit Log(3, us_share);\r\n\r\n        // require(FEE_ACCOUNT.send(fee_share), \"Error: eth send failed\");\r\n\r\n        // // swap eth for DMEX Token\r\n        // address[] memory path = new address[](2);\r\n        // path[0] = UniswapV2ExchangeInterface(uniswapRouter).WETH();\r\n        // path[1] = DMEX_TOKEN;\r\n\r\n        // uint[] memory amounts = UniswapV2ExchangeInterface(uniswapRouter).swapExactETHForTokens.value(us_share)(1, path, address(this), 2**256 - 1);\r\n    \r\n        // uint token_bought = amounts[1];\r\n        // DMEXTokenInterface(DMEX_TOKEN).burn(token_bought);\r\n\r\n    }\r\n\r\n    constructor(\r\n        address payable  initialFeeAccount\r\n    ) public {\r\n        owner = msg.sender;\r\n        FEE_ACCOUNT = initialFeeAccount;\r\n    }\r\n\r\n\r\n    /** Safe Math **/\r\n\r\n    // Safe Multiply Function - prevents integer overflow \r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    // Safe Subtraction Function - prevents integer overflow \r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    // Safe Addition Function - prevents integer overflow \r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"initialFeeAccount\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"errorId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"extractFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DMEX_Fee_Contract","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000095445852148540acb6fcb9e39856d15f1c416381","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a7a7b462eb64403993270dce3ab63799d954accaef9878c8d93388a8f57fa264"}]}