{"status":"1","message":"OK","result":[{"SourceCode":"// File: @sygnum/solidity-base-contracts/contracts/helpers/Initializable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  function isInitialized() public view returns (bool) {\r\n    return initialized;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/IBaseOperators.sol\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n    function isAdmin(address _account) external view returns (bool);\r\n    function isSystem(address _account) external view returns (bool);\r\n    function isRelay(address _account) external view returns (bool);\r\n    function isMultisig(address _contract) external view returns (bool);\r\n\r\n    function confirmFor(address _address) external;\r\n\r\n    function addOperator(address _account) external;\r\n    function removeOperator(address _account) external;\r\n    function addAdmin(address _account) external;\r\n    function removeAdmin(address _account) external;\r\n    function addSystem(address _account) external;\r\n    function removeSystem(address _account) external;\r\n    function addRelay(address _account) external;\r\n    function removeRelay(address _account) external;\r\n\r\n    function addOperatorAndAdmin(address _account) external;\r\n    function removeOperatorAndAdmin(address _account) external;\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/base/Operatorable.sol\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have multisig privileges.\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the relay role associated.\r\n     */\r\n\tmodifier onlyRelay() {\r\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or operator role associated.\r\n     */\r\n\tmodifier onlyOperatorOrRelay() {\r\n        require(isOperator(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor relay\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or admin role associated.\r\n     */\r\n\tmodifier onlyAdminOrRelay() {\r\n        require(isAdmin(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the admin role nor relay\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\r\n     */\r\n\tmodifier onlyOperatorOrSystemOrRelay() {\r\n        require(isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor system nor relay\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns(address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns(address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has relay privileges.\r\n     */\r\n    function isRelay(address _account) public view returns (bool) {\r\n        return operatorsInst.isRelay(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_contract' has multisig privileges.\r\n     */\r\n    function isMultisig(address _contract) public view returns (bool) {\r\n        return operatorsInst.isMultisig(_contract);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary ZOSLibAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/BaseUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(ZOSLibAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n    _setAdmin(_admin);\r\n  }\r\n}\r\n\r\n// File: contracts/token/SygnumTokenProxy.sol\r\n\r\n/**\r\n * @title SygnumTokenProxy\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev Proxies SygnumToken calls and enables SygnumToken upgradability.\r\n*/\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract SygnumTokenProxy is AdminUpgradeabilityProxy {\r\n    constructor(address implementation, address proxyOwnerAddr, bytes memory data)\r\n      public\r\n      AdminUpgradeabilityProxy(implementation, proxyOwnerAddr, data) {\r\n    }\r\n}\r\n\r\n// File: contracts/factory/ProxyDeployer.sol\r\n\r\n/**\r\n * @title ProxyDeployer\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Library to deploy a proxy instance for a Sygnum.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\nlibrary ProxyDeployer {\r\n\r\n    /**\r\n    * @dev Deploy the proxy instance and initialize it\r\n    * @param _tokenImplementation Address of the logic contract\r\n    * @param _proxyAdmin Address of the admin for the proxy\r\n    * @param _data Bytecode needed for initialization\r\n    * @return address New instance address\r\n    */\r\n    function deployTokenProxy(address _tokenImplementation, address _proxyAdmin, bytes memory _data)\r\n        public\r\n        returns(address)\r\n    {\r\n        SygnumTokenProxy proxy = new SygnumTokenProxy(_tokenImplementation, _proxyAdmin, _data);\r\n        return address(proxy);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @title ERC20Detailed\r\n * @author OpenZeppelin-Solidity = \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\", and rmeoval\r\n *  of IERC20 due to \" contract binary not set. Can't deploy new instance.\r\n * This contract may be abstract, not implement an abstract parent's methods completely\r\n * or not invoke an inherited contract's constructor correctly\"\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed {\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20SygnumDetailed.sol\r\n\r\n/**\r\n * @title ERC20SygnumDetailed\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev ERC20 Standard Token with additional details and role set.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract ERC20SygnumDetailed is ERC20Detailed, Operatorable {\r\n\r\n    bytes4 private _category;\r\n    string private _class;\r\n    address private _issuer;\r\n\r\n    event NameUpdated(address issuer, string name, address token);\r\n    event SymbolUpdated(address issuer, string symbol, address token);\r\n    event CategoryUpdated(address issuer, bytes4 category, address token);\r\n    event ClassUpdated(address issuer, string class, address token);\r\n    event IssuerUpdated(address issuer, address newIssuer, address token);\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, `decimals`, `category`, `class` and `issuer`. All are\r\n     *  mutable apart from `issuer`, which is immutable.\r\n     * @param name string\r\n     * @param symbol string\r\n     * @param decimals uint8\r\n     * @param category bytes4\r\n     * @param class string\r\n     * @param issuer address\r\n     */\r\n     function _setDetails(string memory name, string memory symbol, uint8 decimals, bytes4 category, string memory class, address issuer)\r\n        internal\r\n    {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _category = category;\r\n        _class = class;\r\n        _issuer = issuer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the category of the token.\r\n     */\r\n    function category() public view returns (bytes4) {\r\n        return _category;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the class of the token.\r\n     */\r\n    function class() public view returns (string memory) {\r\n        return _class;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the issuer of the token.\r\n     */\r\n    function issuer() public view returns (address) {\r\n        return _issuer;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the name of the token.\r\n     * @param name_ The new name.\r\n     */\r\n    function updateName(string memory name_) public onlyOperator {\r\n        _name = name_;\r\n        emit NameUpdated(msg.sender, _name, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the symbol of the token.\r\n     * @param symbol_ The new symbol.\r\n     */\r\n    function updateSymbol(string memory symbol_) public onlyOperator {\r\n        _symbol = symbol_;\r\n        emit SymbolUpdated(msg.sender, symbol_, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the category of the token.\r\n     * @param category_ The new cateogry.\r\n     */\r\n    function updateCategory(bytes4 category_) public onlyOperator {\r\n        _category = category_;\r\n        emit CategoryUpdated(msg.sender, _category, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the class of the token.\r\n     * @param class_ The new class.\r\n     */\r\n    function updateClass(string memory class_) public onlyOperator {\r\n        _class = class_;\r\n        emit ClassUpdated(msg.sender, _class, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Updates issuer ownership, only callable by Sygnum operator.\r\n     * @param issuer_ The new issuer.\r\n     */\r\n    function updateIssuer(address issuer_) public onlyOperator {\r\n        _issuer = issuer_;\r\n        emit IssuerUpdated(msg.sender, _issuer, address(this));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Overload/ERC20.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelist.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title IWhitelist\r\n * @notice Interface for Whitelist contract\r\n */\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _account) external view returns (bool);\r\n    function toggleWhitelist(address _account, bool _toggled) external;\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/instance/Whitelistable.sol\r\n\r\n/**\r\n * @title Whitelistable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Whitelistable contract stores the Whitelist contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract Whitelistable is Initializable, Operatorable {\r\n    IWhitelist internal whitelistInst;\r\n    address private whitelistPending;\r\n\r\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\r\n    event WhitelistContractPending(address indexed caller, address indexed whitelistAddress);\r\n\r\n    /**\r\n     * @dev Reverts if _account is not whitelisted.\r\n     * @param _account address to determine if whitelisted.\r\n     */\r\n    modifier whenWhitelisted(address _account) {\r\n        require(isWhitelisted(_account), \"Whitelistable: account is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setWhitelistContract function can be called only by Admin role with\r\n     *       confirmation through the whitelist contract.\r\n     * @param _whitelist Whitelist contract address.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _whitelist) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n        _setWhitelistContract(_whitelist);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Whitelist contract, should be confirmed from whitelist contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function setWhitelistContract(address _whitelist) public onlyAdmin {\r\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\r\n        whitelistPending = _whitelist;\r\n        emit WhitelistContractPending(msg.sender, _whitelist);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new whitelist contract by admin to insure that whitelistPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmWhitelistContract() public {\r\n        require(whitelistPending != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\r\n        require(msg.sender == whitelistPending, \"Whitelistable: should be called from new whitelist contract\");\r\n        _setWhitelistContract(whitelistPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the Whitelist contract.\r\n     */\r\n    function getWhitelistContract() public view returns(address) {\r\n        return address(whitelistInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the Whitelist contract.\r\n     */\r\n    function getWhitelistPending() public view returns(address) {\r\n        return whitelistPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' is whitelisted.\r\n     */\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return whitelistInst.isWhitelisted(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setWhitelistContract(address _whitelist) internal {\r\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract cannot be zero\");\r\n        whitelistInst = IWhitelist(_whitelist);\r\n        emit WhitelistContractChanged(msg.sender, _whitelist);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Whitelist.sol\r\n\r\n/**\r\n * @title ERC20Whitelist\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Overloading ERC20 functions to ensure that addresses attempting to particular\r\n * actions are whitelisted.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Whitelist is ERC20, Whitelistable {\r\n\r\n    /**\r\n     * @dev Overload transfer function to validate sender and receiver are whitelisted.\r\n     * @param to address that recieves the funds.\r\n     * @param value amount of funds.\r\n     */\r\n    function transfer(address to, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload approve function to validate sender and spender are whitelisted.\r\n     * @param spender address that can spend the funds.\r\n     * @param value amount of funds.\r\n     */\r\n    function approve(address spender, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(spender) returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload transferFrom function to validate sender, from and receiver are whitelisted.\r\n     * @param from address that funds will be transferred from.\r\n     * @param to address that funds will be transferred to.\r\n     * @param value amount of funds.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(from) whenWhitelisted(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload increaseAllowance validate sender and spender are whitelisted.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param addedValue amount of funds to added to current allowance.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public whenWhitelisted(spender) whenWhitelisted(msg.sender) returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload decreaseAllowance validate sender and spender are whitelisted.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param subtractedValue amount of funds to be deducted to current allowance.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenWhitelisted(spender) whenWhitelisted(msg.sender) returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _burn function to ensure that account has been whitelisted.\r\n     * @param account address that funds will be burned from.\r\n     * @param value amount of funds that will be burned.\r\n     */\r\n    function _burn(address account, uint256 value) internal whenWhitelisted(account) {\r\n        super._burn(account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _burnFrom function to ensure sender and account have been whitelisted.\r\n     * @param account address that funds will be burned from allowance.\r\n     * @param amount amount of funds that will be burned.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal whenWhitelisted(msg.sender) whenWhitelisted(account) {\r\n        super._burnFrom(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _mint function to ensure account has been whitelisted.\r\n     * @param account address that funds will be minted to.\r\n     * @param amount amount of funds that will be minted.\r\n     */\r\n    function _mint(address account, uint256 amount) internal whenWhitelisted(account) {\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/ITraderOperators.sol\r\n\r\n/**\r\n * @title ITraderOperators\r\n * @notice Interface for TraderOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract ITraderOperators {\r\n    function isTrader(address _account) external view returns (bool);\r\n    function addTrader(address _account) external;\r\n    function removeTrader(address _account) external;\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/trader/TraderOperatorable.sol\r\n\r\n/**\r\n * @title TraderOperatorable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev TraderOperatorable contract stores TraderOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract TraderOperatorable is Operatorable {\r\n    ITraderOperators internal traderOperatorsInst;\r\n    address private traderOperatorsPending;\r\n\r\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\r\n    event TraderOperatorsContractPending(address indexed caller, address indexed traderOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the trader role associated.\r\n     */\r\n\tmodifier onlyTrader() {\r\n        require(isTrader(msg.sender), \"TraderOperatorable: caller is not trader\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator or trader role associated.\r\n     */\r\n    modifier onlyOperatorOrTraderOrSystem() {\r\n        require(isOperator(msg.sender) || isTrader(msg.sender) || isSystem(msg.sender), \"TraderOperatorable: caller is not trader or operator or system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _traderOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setTraderOperatorsContract(_traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     * broken and control of the contract can be lost in such case\r\n     * @param _traderOperators TradeOperators contract address.\r\n     */\r\n    function setTraderOperatorsContract(address _traderOperators) public onlyAdmin {\r\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\r\n        traderOperatorsPending = _traderOperators;\r\n        emit TraderOperatorsContractPending(msg.sender, _traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that traderOperatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmTraderOperatorsContract() public {\r\n        require(traderOperatorsPending != address(0), \"TraderOperatorable: address of pending traderOperators contract can not be zero\");\r\n        require(msg.sender == traderOperatorsPending, \"TraderOperatorable: should be called from new traderOperators contract\");\r\n        _setTraderOperatorsContract(traderOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the TraderOperators contract.\r\n     */\r\n    function getTraderOperatorsContract() public view returns(address) {\r\n        return address(traderOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending TraderOperators contract address\r\n     */\r\n    function getTraderOperatorsPending() public view returns(address) {\r\n        return traderOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has trader privileges.\r\n     */\r\n    function isTrader(address _account) public view returns (bool) {\r\n        return traderOperatorsInst.isTrader(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setTraderOperatorsContract(address _traderOperators) internal {\r\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\r\n        traderOperatorsInst = ITraderOperators(_traderOperators);\r\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev Contract module which allows children to implement an emergency stop\r\n *      mechanism that can be triggered by an authorized account in the TraderOperatorable\r\n *      contract.\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Pausable is TraderOperatorable {\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    bool internal _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by operator to pause child contract. The contract\r\n     *      must not already be paused.\r\n     */\r\n    function pause() public onlyOperatorOrTraderOrSystem whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /** @dev Called by operator to pause child contract. The contract\r\n     *       must already be paused.\r\n     */\r\n    function unpause() public onlyOperatorOrTraderOrSystem whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is already paused or not.\r\n     */\r\n    function isPaused() public view returns(bool){\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is not paused.\r\n     */\r\n    function isNotPaused() public view returns(bool){\r\n        return !_paused;\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Pausable.sol\r\n\r\n/**\r\n * @title ERC20Pausable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Overloading ERC20 functions to ensure that the contract has not been paused.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n    /**\r\n     * @dev Overload transfer function to ensure contract has not been paused.\r\n     * @param to address that recieves the funds.\r\n     * @param value amount of funds.\r\n     */\r\n   function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload approve function to ensure contract has not been paused.\r\n     * @param spender address that can spend the funds.\r\n     * @param value amount of funds.\r\n     */\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload transferFrom function to ensure contract has not been paused.\r\n     * @param from address that funds will be transferred from.\r\n     * @param to address that funds will be transferred to.\r\n     * @param value amount of funds.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload increaseAllowance function to ensure contract has not been paused.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param addedValue amount of funds to added to current allowance.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload decreaseAllowance function to ensure contract has not been paused.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param subtractedValue amount of funds to be deducted to current allowance.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _burn function to ensure contract has not been paused.\r\n     * @param account address that funds will be burned from.\r\n     * @param value amount of funds that will be burned.\r\n     */\r\n    function _burn(address account, uint256 value) internal whenNotPaused {\r\n        super._burn(account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _burnFrom function to ensure contract has not been paused.\r\n     * @param account address that funds will be burned from allowance.\r\n     * @param amount amount of funds that will be burned.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal whenNotPaused {\r\n        super._burnFrom(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _mint function to ensure contract has not been paused.\r\n     * @param account address that funds will be minted to.\r\n     * @param amount amount of funds that will be minted.\r\n     */\r\n    function _mint(address account, uint256 amount) internal whenNotPaused {\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev For blocking and unblocking particular user funds.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Mintable is ERC20, Operatorable {\r\n    \r\n    /**\r\n     * @dev Overload _mint to ensure only operator or system can mint funds.\r\n     * @param account address that will recieve new funds.\r\n     * @param amount of funds to be minted.\r\n     */\r\n    function _mint(address account, uint256 amount) internal onlyOperatorOrSystem {\r\n        require(amount > 0, 'ERC20Mintable: amount has to be greater than 0');\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Snapshot.sol\r\n\r\n/**\r\n * @title ERC20Snapshot\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @notice Records historical balances.\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Snapshot is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev `Snapshot` is the structure that attaches a block number to a\r\n    * given value. The block number attached is the one that last changed the value\r\n    */\r\n    struct Snapshot {\r\n        uint256 fromBlock;  // `fromBlock` is the block number at which the value was generated from\r\n        uint256 value;  // `value` is the amount of tokens at a specific block number\r\n    }\r\n\r\n    /**\r\n    * @dev `_snapshotBalances` is the map that tracks the balance of each address, in this\r\n    * contract when the balance changes the block number that the change\r\n    * occurred is also included in the map\r\n    */\r\n    mapping (address => Snapshot[]) private _snapshotBalances;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Snapshot[] private _snapshotTotalSupply;\r\n\r\n    /**\r\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    * @param _owner The address from which the balance will be retrieved\r\n    * @param _blockNumber The block number when the balance is queried\r\n    * @return The balance at `_blockNumber`\r\n    */\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {\r\n        return getValueAt(_snapshotBalances[_owner], _blockNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Total amount of tokens at a specific `_blockNumber`.\r\n    * @param _blockNumber The block number when the totalSupply is queried\r\n    * @return The total amount of tokens at `_blockNumber`\r\n    */\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {\r\n        return getValueAt(_snapshotTotalSupply, _blockNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    * @param checkpoints The history of values being queried\r\n    * @param _block The block number to retrieve the value at\r\n    * @return The number of tokens being queried\r\n    */\r\n    function getValueAt(Snapshot[] storage checkpoints, uint _block) internal view returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\r\n            return checkpoints[checkpoints.length.sub(1)].value;\r\n        }\r\n\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n        // Binary search of the value in the array\r\n        uint min;\r\n        uint max = checkpoints.length.sub(1);\r\n\r\n        while (max > min) {\r\n            uint mid = (max.add(min).add(1)).div(2);\r\n            if (checkpoints[mid].fromBlock <= _block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /**\r\n    * @dev `updateValueAtNow` used to update the `_snapshotBalances` map and the `_snapshotTotalSupply`\r\n    * @param checkpoints The history of data being updated\r\n    * @param _value The new number of tokens\r\n    */\r\n    function updateValueAtNow(Snapshot[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\r\n            checkpoints.push(Snapshot(block.number, _value));\r\n        } else {\r\n            checkpoints[checkpoints.length.sub(1)].value = _value;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that transfers an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param to The account that will receive the created tokens.\r\n    * @param value The amount that will be created.\r\n    */\r\n    function transfer(address to, uint256 value) public returns(bool result){\r\n        result = super.transfer(to, value);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[msg.sender], balanceOf(msg.sender));\r\n        updateValueAtNow(_snapshotBalances[to], balanceOf(to));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that transfers an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param from The account that funds will be taken from.\r\n    * @param to The account that funds will be given too.\r\n    * @param value The amount of funds to be transferred..\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool result){\r\n        result = super.transferFrom(from, to, value);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[from], balanceOf(from));\r\n        updateValueAtNow(_snapshotBalances[to], balanceOf(to));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that confiscates an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param confiscatee The account that funds will be taken from.\r\n    * @param receiver The account that funds will be given too.\r\n    * @param amount The amount of funds to be transferred..\r\n    */\r\n    function _confiscate(address confiscatee, address receiver, uint256 amount) internal {\r\n        super._transfer(confiscatee, receiver, amount);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[confiscatee], balanceOf(confiscatee));\r\n        updateValueAtNow(_snapshotBalances[receiver], balanceOf(receiver));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 amount) internal {\r\n        super._mint(account, amount);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 amount) internal {\r\n        super._burn(account, amount);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burnFor(address account, uint256 amount) internal {\r\n        super._burn(account, amount);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account, deducting from the sender's allowance for said account. Uses the\r\n    * internal burn function.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        super._burnFrom(account, amount);\r\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\r\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Burnable.sol\r\n\r\n/**\r\n * @title ERC20Burnable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev For burning funds from particular user addresses.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Burnable is ERC20Snapshot, Operatorable {\r\n\r\n    /**\r\n     * @dev Overload ERC20 _burnFor, burning funds from a particular users address.\r\n     * @param account address to burn funds from.\r\n     * @param amount of funds to burn.\r\n     */\r\n\r\n    function _burnFor(address account, uint256 amount) internal onlyOperator {\r\n        super._burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Freezable.sol\r\n\r\n/**\r\n * @title Freezable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Freezable contract to freeze functionality for particular addresses.  Freezing/unfreezing is controlled\r\n *       by operators in Operatorable contract which is initialized with the relevant BaseOperators address.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Freezable is Operatorable {\r\n    mapping(address => bool) public frozen;\r\n\r\n    event FreezeToggled(address indexed account, bool frozen);\r\n\r\n    /**\r\n     * @dev Reverts if address is empty.\r\n     * @param _address address to validate.\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Freezable: Empty address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if account address is frozen.\r\n     * @param _account address to validate is not frozen.\r\n     */\r\n    modifier whenNotFrozen(address _account) {\r\n        require(!frozen[_account], \"Freezable: account is frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if account address is not frozen.\r\n     * @param _account address to validate is frozen.\r\n     */\r\n    modifier whenFrozen(address _account) {\r\n        require(frozen[_account], \"Freezable: account is not frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if address is frozen.\r\n     * @param _account address to determine if frozen or not.\r\n     * @return bool is frozen\r\n     */\r\n    function isFrozen(address _account) public view returns (bool) {\r\n        return frozen[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle freeze/unfreeze on _account address, with _toggled being true/false.\r\n     * @param _account address to toggle.\r\n     * @param _toggled freeze/unfreeze.\r\n     */\r\n    function toggleFreeze(address _account, bool _toggled)\r\n        public\r\n        onlyValidAddress(_account)\r\n        onlyOperator\r\n    {\r\n        frozen[_account] = _toggled;\r\n        emit FreezeToggled(_account, _toggled);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch freeze/unfreeze multiple addresses, with _toggled being true/false.\r\n     * @param _addresses address array.\r\n     * @param _toggled freeze/unfreeze.\r\n     */\r\n    function batchToggleFreeze(address[] memory _addresses, bool _toggled) public {\r\n        require(_addresses.length <= 256, \"Freezable: batch count is greater than 256\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            toggleFreeze(_addresses[i], _toggled);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Freezable.sol\r\n\r\n/**\r\n * @title ERC20Freezable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Overloading ERC20 functions to ensure client addresses are not frozen for particular actions.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract ERC20Freezable is ERC20, Freezable {\r\n\r\n    /**\r\n     * @dev Overload transfer function to ensure sender and receiver have not been frozen.\r\n     * @param to address that recieves the funds.\r\n     * @param value amount of funds.\r\n     */\r\n   function transfer(address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload approve function to ensure sender and receiver have not been frozen.\r\n     * @param spender address that can spend the funds.\r\n     * @param value amount of funds.\r\n     */\r\n    function approve(address spender, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload transferFrom function to ensure sender, approver and receiver have not been frozen.\r\n     * @param from address that funds will be transferred from.\r\n     * @param to address that funds will be transferred to.\r\n     * @param value amount of funds.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(from) whenNotFrozen(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload increaseAllowance function to ensure sender and spender have not been frozen.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param addedValue amount of funds to added to current allowance.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload decreaseAllowance function to ensure sender and spender have not been frozen.\r\n     * @param spender address that will be allowed to transfer funds.\r\n     * @param subtractedValue amount of funds to be deducted to current allowance.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload _burnfrom function to ensure sender and user to be burned from have not been frozen.\r\n     * @param account account that funds will be burned from.\r\n     * @param amount amount of funds to be burned.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal whenNotFrozen(msg.sender) whenNotFrozen(account) {\r\n        super._burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Destroyable.sol\r\n\r\n/**\r\n * @title ERC20Destroyable\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @notice Allows operator to destroy contract.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract ERC20Destroyable is Operatorable {\r\n\r\n    event Destroyed(address indexed caller, address indexed account, address indexed contractAddress);\r\n\r\n    function destroy(address payable to) public onlyOperator {\r\n    \temit Destroyed(msg.sender, to, address(this));\r\n    \tselfdestruct(to);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Tradeable.sol\r\n\r\n/**\r\n * @title ERC20Tradeable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Trader accounts can approve particular addresses on behalf of a user.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract ERC20Tradeable is ERC20, TraderOperatorable {\r\n\r\n    /**\r\n     * @dev Trader can approve users balance to a particular address for a particular amount.\r\n     * @param _owner address that approves the funds.\r\n     * @param _spender address that spends the funds.\r\n     * @param _value amount of funds.\r\n     */\r\n    function approveOnBehalf(address _owner, address _spender, uint256 _value) public onlyTrader {\r\n        super._approve(_owner, _spender, _value);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/IBlockerOperators.sol\r\n\r\n/**\r\n * @title IBlockerOperators\r\n * @notice Interface for BlockerOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract IBlockerOperators {\r\n    function isBlocker(address _account) external view returns (bool);\r\n    function addBlocker(address _account) external;\r\n    function removeBlocker(address _account) external;\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/role/blocker/BlockerOperatorable.sol\r\n\r\n/**\r\n * @title BlockerOperatorable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev BlockerOperatorable contract stores BlockerOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract BlockerOperatorable is Operatorable {\r\n    IBlockerOperators internal blockerOperatorsInst;\r\n    address private blockerOperatorsPending;\r\n\r\n    event BlockerOperatorsContractChanged(address indexed caller, address indexed blockerOperatorAddress);\r\n    event BlockerOperatorsContractPending(address indexed caller, address indexed blockerOperatorAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the blocker role associated.\r\n     */\r\n\tmodifier onlyBlocker() {\r\n        require(isBlocker(msg.sender), \"BlockerOperatorable: caller is not blocker role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the blocker or operator role associated.\r\n     */\r\n\tmodifier onlyBlockerOrOperator() {\r\n        require(isBlocker(msg.sender) || isOperator(msg.sender), \"BlockerOperatorable: caller is not blocker or operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setBlockerOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _blockerOperators BlockerOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _blockerOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setBlockerOperatorsContract(_blockerOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of BlockerOperators contract, should be confirmed from BlockerOperators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     * broken and control of the contract can be lost in such case.\r\n     * @param _blockerOperators BlockerOperators contract address.\r\n     */\r\n    function setBlockerOperatorsContract(address _blockerOperators) public onlyAdmin {\r\n        require(_blockerOperators != address(0), \"BlockerOperatorable: address of new blockerOperators contract can not be zero.\");\r\n        blockerOperatorsPending = _blockerOperators;\r\n        emit BlockerOperatorsContractPending(msg.sender, _blockerOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new BlockerOperators contract by admin to insure that blockerOperatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmBlockerOperatorsContract() public {\r\n        require(blockerOperatorsPending != address(0), \"BlockerOperatorable: address of pending blockerOperators contract can not be zero\");\r\n        require(msg.sender == blockerOperatorsPending, \"BlockerOperatorable: should be called from new blockerOperators contract\");\r\n        _setBlockerOperatorsContract(blockerOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BlockerOperators contract.\r\n     */\r\n    function getBlockerOperatorsContract() public view returns(address) {\r\n        return address(blockerOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending BlockerOperators contract address\r\n     */\r\n    function getBlockerOperatorsPending() public view returns(address) {\r\n        return blockerOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has blocker privileges.\r\n     */\r\n    function isBlocker(address _account) public view returns (bool) {\r\n        return blockerOperatorsInst.isBlocker(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setBlockerOperatorsContract(address _blockerOperators) internal {\r\n        require(_blockerOperators != address(0), \"BlockerOperatorable: address of new blockerOperators contract can not be zero\");\r\n        blockerOperatorsInst = IBlockerOperators(_blockerOperators);\r\n        emit BlockerOperatorsContractChanged(msg.sender, _blockerOperators);\r\n    }\r\n}\r\n\r\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Blockable.sol\r\n\r\n/**\r\n * @title ERC20Blockable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev For blocking and unblocking particular user funds.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract ERC20Blockable is ERC20, BlockerOperatorable {\r\n    uint256 public totalBlockedBalance;\r\n\r\n    mapping (address => uint256) public _blockedBalances;\r\n\r\n    event Blocked(address indexed blocker, address indexed account, uint256 value);\r\n    event UnBlocked(address indexed blocker, address indexed account, uint256 value);\r\n\r\n    /**\r\n     * @dev Block funds, and move funds from _balances into _blockedBalances.  \r\n     * @param _account address to block funds.\r\n     * @param _amount of funds to block.\r\n     */\r\n    function block(address _account, uint256 _amount) public onlyBlockerOrOperator {\r\n        _balances[_account] = _balances[_account].sub(_amount);\r\n        _blockedBalances[_account] = _blockedBalances[_account].add(_amount);\r\n\r\n        totalBlockedBalance = totalBlockedBalance.add(_amount);\r\n        emit Blocked(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unblock funds, and move funds from _blockedBalances into _balances.  \r\n     * @param _account address to unblock funds.\r\n     * @param _amount of funds to unblock.\r\n     */\r\n    function unblock(address _account, uint256 _amount) public onlyBlockerOrOperator {\r\n        _balances[_account] = _balances[_account].add(_amount);\r\n        _blockedBalances[_account] = _blockedBalances[_account].sub(_amount);\r\n\r\n        totalBlockedBalance = totalBlockedBalance.sub(_amount);\r\n        emit UnBlocked(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of blocked balance for a particular address.\r\n     * @param _account address to get blocked balance.\r\n     * @return amount of blocked balance.\r\n     */\r\n    function blockedBalanceOf(address _account) public view returns (uint256) {\r\n        return _blockedBalances[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of blocked funds for all users.\r\n     * @return amount of total blocked balance.\r\n     */\r\n    function getTotalBlockedBalance() public view returns (uint256) {\r\n        return totalBlockedBalance;\r\n    }\r\n}\r\n\r\n// File: contracts/token/SygnumToken.sol\r\n\r\n/**\r\n * @title SygnumToken\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @notice ERC20 token with additional features.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SygnumToken is ERC20Snapshot, ERC20SygnumDetailed, ERC20Pausable, ERC20Mintable, ERC20Whitelist, ERC20Tradeable,\r\n                ERC20Blockable, ERC20Burnable, ERC20Freezable, ERC20Destroyable {\r\n\r\n    event Minted(address indexed minter, address indexed account, uint256 value);\r\n    event Burned(address indexed burner, uint256 value);\r\n    event BurnedFor(address indexed burner, address indexed account, uint256 value);\r\n    event Confiscated(address indexed account, uint256 amount, address indexed receiver);\r\n\r\n    uint16 constant BATCH_LIMIT = 256;\r\n\r\n    /**\r\n    * @dev Initialize contracts.\r\n    * @param _baseOperators Base operators contract address.\r\n    * @param _whitelist Whitelist contract address.\r\n    * @param _traderOperators Trader operators contract address.\r\n    * @param _blockerOperators Blocker operators contract address.\r\n    */\r\n    function initializeContractsAndConstructor(string memory _name, string memory _symbol, uint8 _decimals, bytes4 _category,\r\n            string memory _class, address _issuer, address _baseOperators, address _whitelist, address _traderOperators, address _blockerOperators)\r\n        public\r\n        initializer\r\n    {\r\n        // TODO need to test this\r\n        super.initialize(_baseOperators);\r\n        _setWhitelistContract(_whitelist);\r\n        _setTraderOperatorsContract(_traderOperators);\r\n        _setBlockerOperatorsContract(_blockerOperators);\r\n        _setDetails(_name, _symbol, _decimals, _category, _class, _issuer);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burn(uint256 _amount) public {\r\n        require(!isFrozen(msg.sender), \"SygnumToken: Account must not be frozen.\");\r\n        super._burn(msg.sender, _amount);\r\n        emit Burned(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev BurnFor.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burnFor(address _account, uint256 _amount) public {\r\n        super._burnFor(_account, _amount);\r\n        emit BurnedFor(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev BurnFrom.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burnFrom(address _account, uint256 _amount) public {\r\n        super._burnFrom(_account, _amount);\r\n        emit Burned(_account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint.\r\n    * @param _account Address to mint tokens to.\r\n    * @param _amount Amount to mint.\r\n    */\r\n    function mint(address _account, uint256 _amount) public {\r\n        if(isSystem(msg.sender)){\r\n            require(!isFrozen(_account), \"SygnumToken: Account must not be frozen if system calling.\");\r\n        }\r\n        super._mint(_account, _amount);\r\n        emit Minted(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Confiscate.\r\n    * @param _confiscatee Account to confiscate funds from.\r\n    * @param _receiver Account to transfer confiscated funds too.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function confiscate(address _confiscatee, address _receiver, uint256 _amount)\r\n        public\r\n        onlyOperator\r\n        whenNotPaused\r\n        whenWhitelisted(_receiver)\r\n        whenWhitelisted(_confiscatee)\r\n    {\r\n        super._confiscate(_confiscatee, _receiver, _amount);\r\n        emit Confiscated(_confiscatee, _amount, _receiver);\r\n    }\r\n\r\n    /**\r\n    * @dev Batch burn for.\r\n    * @param _amounts Array of all values to burn.\r\n    * @param _accounts Array of all addresses to burn from.\r\n    */\r\n    function batchBurnFor(address[] memory _accounts, uint256[] memory _amounts) public {\r\n        require(_accounts.length == _amounts.length, \"SygnumToken: values and recipients are not equal.\");\r\n        require(_accounts.length < BATCH_LIMIT, \"SygnumToken: batch count is greater than BATCH_LIMIT.\");\r\n        for(uint256 i = 0; i < _accounts.length; i++) {\r\n            burnFor(_accounts[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Batch mint.\r\n    * @param _accounts Array of all addresses to mint to.\r\n    * @param _amounts Array of all values to mint.\r\n    */\r\n    function batchMint(address[] memory _accounts, uint256[] memory _amounts) public{\r\n        require(_accounts.length == _amounts.length, \"SygnumToken: values and recipients are not equal.\");\r\n        require(_accounts.length < BATCH_LIMIT, \"SygnumToken: batch count is greater than BATCH_LIMIT.\");\r\n        for(uint256 i = 0; i < _accounts.length; i++) {\r\n            mint(_accounts[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Batch confiscate to a maximum of 256 addresses.\r\n    * @param _confiscatees array addresses who's funds are being confiscated\r\n    * @param _receivers array addresses who's receiving the funds\r\n    * @param _values array of values of funds being confiscated\r\n    */\r\n    function batchConfiscate(address[] memory _confiscatees, address[] memory _receivers, uint256[] memory _values) public returns (bool) {\r\n        require(_confiscatees.length == _values.length && _receivers.length == _values.length,  \"SygnumToken: confiscatees, recipients and values are not equal.\");\r\n        require(_confiscatees.length < BATCH_LIMIT, \"SygnumToken: batch count is greater than BATCH_LIMIT.\");\r\n        for(uint256 i = 0; i < _confiscatees.length; i++) {\r\n            confiscate(_confiscatees[i], _receivers[i], _values[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/factory/TokenDeployer.sol\r\n\r\n/**\r\n * @title TokenDeployer\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Library to deploy and initialize a new instance of Sygnum Equity Token.\r\n * This is commonly used by a TokenFactory to automatically deploy and configure\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\nlibrary TokenDeployer {\r\n\r\n    /**\r\n    * @dev Initialize a token contracts.\r\n    * @param _proxy Address of the proxy\r\n    * @param _name Name of the token\r\n    * @param _symbol Strandard ticker of the token\r\n    * @param _decimals Number of decimals\r\n    * @param _category Category of the token contact\r\n    * @param _class Class of the token contact\r\n    * @param _issuer Issuer of the token contact\r\n    * @param _baseOperators Address of the base operator role contract\r\n    * @param _whitelist Address of the whitelist contract\r\n    * @param _traderOperators Address of the trader operator role contract\r\n    * @param _blockerOperators Address of the blocker operator role contract\r\n    */\r\n    function initializeToken(\r\n            address _proxy, string memory _name, string memory _symbol,\r\n            uint8 _decimals, bytes4 _category, string memory _class, address _issuer,\r\n            address _baseOperators, address _whitelist, address _traderOperators, address _blockerOperators\r\n        )\r\n        public\r\n    {\r\n        SygnumToken(_proxy).initializeContractsAndConstructor(\r\n            _name, _symbol, _decimals, _category, _class, _issuer,\r\n            _baseOperators, _whitelist, _traderOperators, _blockerOperators);\r\n    }\r\n}\r\n\r\n// File: contracts/factory/TokenFactory.sol\r\n\r\n/**\r\n * @title TokenFactory\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev Token factory to be used by operators to deploy arbitrary Sygnum Equity Token.\r\n */\r\n\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenFactory is Initializable, Operatorable {\r\n    address public whitelist;\r\n    address public proxyAdmin;\r\n    address public implementation;\r\n    address public traderOperators;\r\n    address public blockerOperators;\r\n\r\n    event UpdatedWhitelist(address indexed whitelist);\r\n    event UpdatedTraderOperators(address indexed traderOperators);\r\n    event UpdatedBlockerOperators(address indexed blockerOperators);\r\n    event UpdatedProxyAdmin(address indexed proxyAdmin);\r\n    event UpdatedImplementation(address indexed implementation);\r\n    event NewTokenDeployed(address indexed issuer, address token, address proxy);\r\n\r\n     /**\r\n     * @dev Initialization instead of constructor, called once.  Sets BaseOperators contract through pasuable contract\r\n     * resulting in use of Operatorable contract within this contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     * @param _blockerOperators BlockerOperators contract address.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _traderOperators, address _blockerOperators, address _whitelist, address _implementation, address _proxyAdmin)\r\n        public\r\n        initializer\r\n    {\r\n        require(_baseOperators != address(0), \"TokenFactory: _baseOperators cannot be set to an empty address\");\r\n        require(_traderOperators != address(0), \"TokenFactory: _traderOperators cannot be set to an empty address\");\r\n        require(_blockerOperators != address(0), \"TokenFactory: _blockerOperators cannot be set to an empty address\");\r\n        require(_whitelist != address(0), \"TokenFactory: _whitelist cannot be set to an empty address\");\r\n        require(_implementation != address(0), \"TokenFactory: _implementation cannot be set to an empty address\");\r\n        require(_proxyAdmin != address(0), \"TokenFactory: _proxyAdmin cannot be set to an empty address\");\r\n        traderOperators = _traderOperators;\r\n        blockerOperators = _blockerOperators;\r\n        whitelist = _whitelist;\r\n        proxyAdmin = _proxyAdmin;\r\n        implementation = _implementation;\r\n\r\n        super.initialize(_baseOperators);\r\n    }\r\n\r\n    /**\r\n    * @dev allows operator, system or relay to launch a new token with a new name, symbol, decimals, category, and issuer.\r\n    * Defaults to using whitelist stored in this contract. If _whitelist is address(0), else it will use\r\n    * _whitelist as the param to pass into the new token's constructor upon deployment\r\n    * @param _name string\r\n    * @param _symbol string\r\n    * @param _decimals uint8\r\n    * @param _category bytes4\r\n    * @param _class string\r\n    * @param _issuer address\r\n    * @param _whitelist address\r\n    */\r\n    function newToken(string memory _name, string memory _symbol, uint8 _decimals, bytes4 _category, string memory _class,\r\n                      address _issuer, address _whitelist)\r\n        public\r\n        onlyOperatorOrSystemOrRelay\r\n        returns (address, address)\r\n    {\r\n        address whitelistAddress; _whitelist == address(0) ? whitelistAddress = whitelist : whitelistAddress = _whitelist;\r\n        address baseOperators = getOperatorsContract();\r\n\r\n        address proxy = ProxyDeployer.deployTokenProxy(implementation, proxyAdmin, \"\");\r\n\r\n        TokenDeployer.initializeToken(proxy, _name, _symbol,\r\n            _decimals, _category, _class, _issuer,\r\n            baseOperators, whitelistAddress, traderOperators, blockerOperators);\r\n\r\n        emit NewTokenDeployed(_issuer, implementation, proxy);\r\n        return(implementation, proxy);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the whitelist to be used for future generated tokens\r\n    * @param _whitelist address\r\n    */\r\n    function updateWhitelist(address _whitelist)\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(_whitelist != address(0), \"TokenFactory: _whitelist cannot be set to an empty address\");\r\n        whitelist = _whitelist;\r\n        emit UpdatedWhitelist(whitelist);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the traderOperators contract address to be used for future generated tokens\r\n    * @param _traderOperators address\r\n    */\r\n    function updateTraderOperators(address _traderOperators)\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(_traderOperators != address(0), \"TokenFactory: _traderOperators cannot be set to an empty address\");\r\n        traderOperators = _traderOperators;\r\n        emit UpdatedTraderOperators(_traderOperators);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the blockerOperators contract address to be used for future generated tokens\r\n    * @param _blockerOperators address\r\n    */\r\n    function updateBlockerOperators(address _blockerOperators)\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(_blockerOperators != address(0), \"TokenFactory: _blockerOperators cannot be set to an empty address\");\r\n        blockerOperators = _blockerOperators;\r\n        emit UpdatedBlockerOperators(_blockerOperators);\r\n    }\r\n\r\n    /**\r\n    * @dev update the implementation address used when deploying proxy contracts\r\n    * @param _implementation address\r\n    */\r\n    function updateImplementation(address _implementation) \r\n        public\r\n        onlyOperator\r\n    {\r\n        require(_implementation != address(0), \"TokenFactory: _implementation cannot be set to an empty address\");\r\n        implementation = _implementation;\r\n        emit UpdatedImplementation(implementation);\r\n    }\r\n\r\n    /**\r\n    * @dev update the proxy admin address used when deploying proxy contracts\r\n    * @param _proxyAdmin address\r\n    */\r\n    function updateProxyAdmin(address _proxyAdmin)\r\n        public\r\n    {\r\n        require(_proxyAdmin != address(0), \"TokenFactory: _proxyAdmin cannot be set to an empty address\");\r\n        require(msg.sender == proxyAdmin, 'TokenFactory: caller not proxy admin');\r\n        proxyAdmin = _proxyAdmin;\r\n        emit UpdatedProxyAdmin(proxyAdmin);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"NewTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockerOperators\",\"type\":\"address\"}],\"name\":\"UpdatedBlockerOperators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpdatedImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"}],\"name\":\"UpdatedProxyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperators\",\"type\":\"address\"}],\"name\":\"UpdatedTraderOperators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"UpdatedWhitelist\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockerOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"_category\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"_class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traderOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"updateBlockerOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"name\":\"updateProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"updateTraderOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"ProxyDeployer:4a7908b46f5e11ca7a3ce052a531a95a84ee0043;TokenDeployer:63d013d67f0dd3f0719b2c9a3700210f4156d338","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50c3eba18c40bef98c2b0a160ce7a5b9de5dfceecff23bb0e7ad07beafb8429e"}]}