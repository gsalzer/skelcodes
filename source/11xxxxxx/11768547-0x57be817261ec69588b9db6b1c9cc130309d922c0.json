{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/ISoloMargin.sol\n\npragma solidity >=0.5.7;\npragma experimental ABIEncoderV2;\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n    struct Value {\n        uint256 value;\n    }\n}\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId => Market\n        mapping(uint256 => Market) markets;\n        // owner => account number => Account\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address => mapping(address => bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address => bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\nabstract contract ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    ) public virtual;\n\n    function getIsGlobalOperator(address operator)\n        public\n        view\n        virtual\n        returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId)\n        public\n        view\n        virtual\n        returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n        public\n        virtual;\n\n    function getAccountValues(Account.Info memory account)\n        public\n        view\n        virtual\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId)\n        public\n        view\n        virtual\n        returns (address);\n\n    function getMarketInterestSetter(uint256 marketId)\n        public\n        view\n        virtual\n        returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Decimal.D256 memory);\n\n    function getNumMarkets() public view virtual returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n        public\n        virtual\n        returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n        public\n        virtual;\n\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread)\n        public\n        virtual;\n\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate)\n        public\n        virtual;\n\n    function getIsLocalOperator(address owner, address operator)\n        public\n        view\n        virtual\n        returns (bool);\n\n    function getAccountPar(Account.Info memory account, uint256 marketId)\n        public\n        view\n        virtual\n        returns (Types.Par memory);\n\n    function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    ) public virtual;\n\n    function getMarginRatio() public view virtual returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId)\n        public\n        view\n        virtual\n        returns (bool);\n\n    function getRiskParams()\n        public\n        view\n        virtual\n        returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info memory account)\n        public\n        view\n        virtual\n        returns (\n            address[] memory,\n            Types.Par[] memory,\n            Types.Wei[] memory\n        );\n\n    function renounceOwnership() public virtual;\n\n    function getMinBorrowedValue()\n        public\n        view\n        virtual\n        returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] memory args) public virtual;\n\n    function getMarketPrice(uint256 marketId)\n        public\n        view\n        virtual\n        returns (address);\n\n    function owner() public view virtual returns (address);\n\n    function isOwner() public view virtual returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n        public\n        virtual\n        returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    ) public virtual;\n\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) public virtual;\n\n    function getMarketWithInfo(uint256 marketId)\n        public\n        view\n        virtual\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\n\n    function getLiquidationSpread()\n        public\n        view\n        virtual\n        returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info memory account, uint256 marketId)\n        public\n        view\n        virtual\n        returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    ) public view virtual returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info memory account)\n        public\n        view\n        virtual\n        returns (uint8);\n\n    function getEarningsRate()\n        public\n        view\n        virtual\n        returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle)\n        public\n        virtual;\n\n    function getRiskLimits()\n        public\n        view\n        virtual\n        returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\n\n    function ownerSetGlobalOperator(address operator, bool approved)\n        public\n        virtual;\n\n    function transferOwnership(address newOwner) public virtual;\n\n    function getAdjustedAccountValues(Account.Info memory account)\n        public\n        view\n        virtual\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId)\n        public\n        view\n        virtual\n        returns (Interest.Rate memory);\n}\n\n// File: contracts/DydxFlashloanBase.sol\n\npragma solidity >=0.5.7;\n\n\n\n\ncontract DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount)\n        internal\n        pure\n        returns (uint256)\n    {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint256 marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint256 marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n\n// File: contracts/ICallee.sol\n\npragma solidity >=0.5.7;\n\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\nabstract contract ICallee {\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    ) public virtual;\n}\n\n// File: contracts/FUCK.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.7.0;\n\n// openzeppelin框架官网：https://docs.openzeppelin.com/contracts/3.x/\n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import \"@openzeppelin/contracts/utils/Address.sol\";\n\n\n\n// WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n// USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n// DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n// SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n// ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n// USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n// https://my.oschina.net/u/4587589/blog/4868287\n\n// v0.6.2+commit.bacdbe57\n// v0.5.7+commit.6da8b019\n\ncontract FUCK is ICallee, DydxFlashloanBase {\n    struct MyCustomData {\n        address token;\n        address pairAddress;\n        uint256 repayAmount;\n        uint256 lendProject;\n        uint256[] dexList;\n        address[] tokens;\n    }\n\n    address uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n    address soloAddress = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    address manager;\n    mapping(address => bool) public approvalList;\n    mapping(address => uint256) public profitAll; // 累计每个erc20的套利\n    mapping(address => mapping(address => uint256)) public profitAddress; // 累计每个地址的每个erc20的套利\n    uint256 public percent = 300; // div 10000\n\n    constructor() public {\n        manager = msg.sender;\n    }\n\n    modifier isManager() {\n        require(manager == msg.sender, \"Not manager!\");\n        _;\n    }\n\n    function setManager(address _manager) public isManager {\n        manager = _manager;\n    }\n\n    function setPercent(uint256 _percent) public isManager {\n        percent = _percent;\n    }\n\n    function dydxLoan(\n        address _token,\n        uint256 _amount,\n        uint256[] calldata _dexList,\n        address[] calldata _tokens\n    ) external {\n        require(\n            _dexList.length >= 2 && _dexList.length == _tokens.length,\n            \"Length inconsistency!\"\n        );\n        approvalToken(_token);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            approvalToken(_tokens[i]);\n        }\n        ISoloMargin solo = ISoloMargin(soloAddress);\n        uint256 marketId = _getMarketIdFromTokenAddress(soloAddress, _token);\n        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n        operations[0] = _getWithdrawAction(marketId, _amount);\n        operations[1] = _getCallAction(\n            abi.encode(\n                MyCustomData({\n                    token: _token,\n                    pairAddress: address(0),\n                    repayAmount: repayAmount,\n                    lendProject: uint256(0),\n                    dexList: _dexList,\n                    tokens: _tokens\n                })\n            )\n        );\n        operations[2] = _getDepositAction(marketId, repayAmount);\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n        solo.operate(accountInfos, operations);\n    }\n\n    function uniLoan(\n        address _token,\n        address pairAddress,\n        uint256 lendProject,\n        uint256 _amount,\n        uint256[] calldata _dexList,\n        address[] calldata _tokens\n    ) external {\n        require(\n            _dexList.length >= 2 && _dexList.length == _tokens.length,\n            \"Length inconsistency!\"\n        );\n        approvalToken(_token);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            approvalToken(_tokens[i]);\n        }\n        uint256 _amount0 = 0;\n        uint256 _amount1 = 0;\n        if (IUniswapV2Pair(pairAddress).token0() == _token) {\n            _amount0 = _amount;\n        } else {\n            _amount1 = _amount;\n        }\n\n        bytes memory data =\n            abi.encode(\n                MyCustomData({\n                    token: _token,\n                    pairAddress: pairAddress,\n                    repayAmount: uint256(0),\n                    lendProject: lendProject,\n                    dexList: _dexList,\n                    tokens: _tokens\n                })\n            );\n        IUniswapV2Pair(pairAddress).swap(\n            _amount0,\n            _amount1,\n            address(this),\n            data\n        );\n    }\n\n    function callFunction(\n        address sender,\n        Account.Info memory account,\n        bytes memory data\n    ) public override {\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\n\n        address[] memory path = new address[](2);\n        uint256[] memory amounts;\n        address _lendToken = address(mcd.token);\n        uint256 _repayAmount = mcd.repayAmount.sub(2);\n        for (uint256 i = 0; i < mcd.dexList.length; i++) {\n            path[0] = address(_lendToken);\n            path[1] = address(mcd.tokens[i]);\n\n            if (mcd.dexList[i] == 1) {\n                amounts = IUniswapV2Router01(uniRouter)\n                    .swapExactTokensForTokens(\n                    _repayAmount,\n                    0,\n                    path,\n                    address(this),\n                    now + 1800\n                );\n            }\n            if (mcd.dexList[i] == 2) {\n                amounts = IUniswapV2Router01(sushiRouter)\n                    .swapExactTokensForTokens(\n                    _repayAmount,\n                    0,\n                    path,\n                    address(this),\n                    now + 1800\n                );\n            }\n            _lendToken = address(mcd.tokens[i]);\n            _repayAmount = amounts[1];\n        }\n\n        uint256 newBal = IERC20(mcd.token).balanceOf(address(this));\n\n        require(\n            newBal > mcd.repayAmount,\n            \"Not enough funds to repay dydx loan!\"\n        );\n\n        uint256 profit = newBal - mcd.repayAmount;\n        uint256 transferAmount = (profit * (10000 - percent)) / 10000;\n        // bytes4(keccak256(bytes(\"transfer(address,uint256)\"))) = 0xa9059cbb\n        (bool success, bytes memory result) =\n            mcd.token.call(\n                abi.encodeWithSelector(0xa9059cbb, tx.origin, transferAmount)\n            );\n        require(\n            success && (result.length == 0 || abi.decode(result, (bool))),\n            \"Failed to transfer to sender!\"\n        );\n        profitAll[mcd.token] += profit;\n        profitAddress[tx.origin][mcd.token] += profit;\n        if (profit > transferAmount) {\n            IERC20(mcd.token).transfer(manager, profit - transferAmount);\n        }\n    }\n\n    function uniswapV2Call(\n        address account,\n        uint256 amount0,\n        uint256 amount1,\n        bytes memory data\n    ) public {\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\n\n        address[] memory path = new address[](2);\n        uint256[] memory amounts;\n        address _lendToken = address(mcd.token);\n        uint256 swapResult = IERC20(mcd.token).balanceOf(address(this));\n        for (uint256 i = 0; i < mcd.dexList.length; i++) {\n            path[0] = address(_lendToken);\n            path[1] = address(mcd.tokens[i]);\n            if (mcd.dexList[i] == 1) {\n                amounts = IUniswapV2Router01(uniRouter)\n                    .swapExactTokensForTokens(\n                    swapResult,\n                    0,\n                    path,\n                    address(this),\n                    now + 1800\n                );\n            }\n            if (mcd.dexList[i] == 2) {\n                amounts = IUniswapV2Router01(sushiRouter)\n                    .swapExactTokensForTokens(\n                    swapResult,\n                    0,\n                    path,\n                    address(this),\n                    now + 1800\n                );\n            }\n            _lendToken = address(mcd.tokens[i]);\n            swapResult = amounts[1];\n        }\n\n        // 计算需要还的数量\n        uint256 reply = 0;\n        if (mcd.lendProject == 1) {\n            path[0] = address(mcd.tokens[mcd.tokens.length - 1]);\n            path[1] = address(mcd.token);\n            amounts = IUniswapV2Router01(uniRouter).getAmountsIn(\n                amount0 > 0 ? amount0 : amount1,\n                path\n            );\n            reply = amounts[0];\n        } else if (mcd.lendProject == 2) {\n            path[0] = address(mcd.tokens[mcd.tokens.length - 1]);\n            path[1] = address(mcd.token);\n            amounts = IUniswapV2Router01(sushiRouter).getAmountsIn(\n                amount0 > 0 ? amount0 : amount1,\n                path\n            );\n            reply = amounts[0];\n        }\n\n        uint256 newBal =\n            IERC20(mcd.tokens[mcd.tokens.length - 1]).balanceOf(address(this));\n\n        require(\n            newBal > reply,\n            \"Not enough funds to repay uniswap or sushiswap!\"\n        );\n\n        IERC20(mcd.tokens[mcd.tokens.length - 1]).transfer(\n            mcd.pairAddress,\n            reply\n        );\n        uint256 profit = newBal - reply;\n        uint256 transferAmount = (profit * (10000 - percent)) / 10000;\n        // bytes4(keccak256(bytes(\"transfer(address,uint256)\"))) = 0xa9059cbb\n        (bool success, bytes memory result) =\n            address(mcd.tokens[mcd.tokens.length - 1]).call(\n                abi.encodeWithSelector(0xa9059cbb, tx.origin, transferAmount)\n            );\n        require(\n            success && (result.length == 0 || abi.decode(result, (bool))),\n            \"Failed to transfer to sender!\"\n        );\n\n        profitAll[mcd.tokens[mcd.tokens.length - 1]] += profit;\n        profitAddress[tx.origin][mcd.tokens[mcd.tokens.length - 1]] += profit;\n        if (profit > transferAmount) {\n            IERC20(mcd.tokens[mcd.tokens.length - 1]).transfer(\n                manager,\n                profit - transferAmount\n            );\n        }\n    }\n\n    function calculate(\n        address lendToken,\n        uint256 lendNumber,\n        uint256 lendProject,\n        uint256[] memory dexList,\n        address[] memory tokens\n    ) public view returns (uint256 swapResult, uint256 reply) {\n        require(\n            dexList.length >= 2 && dexList.length == tokens.length,\n            \"Length inconsistency!\"\n        );\n        address[] memory path = new address[](2);\n        uint256[] memory amounts;\n        address _lendToken = address(lendToken);\n        swapResult = lendNumber;\n        for (uint256 i = 0; i < dexList.length; i++) {\n            path[0] = address(_lendToken);\n            path[1] = address(tokens[i]);\n            if (dexList[i] == 1) {\n                amounts = IUniswapV2Router01(uniRouter).getAmountsOut(\n                    swapResult,\n                    path\n                );\n            } else if (dexList[i] == 2) {\n                amounts = IUniswapV2Router01(sushiRouter).getAmountsOut(\n                    swapResult,\n                    path\n                );\n            } else {\n                require(false, \"Not the DEX id!\");\n            }\n            _lendToken = tokens[i];\n            swapResult = amounts[1];\n        }\n        // swapResult 最终兑换回来的数量\n        reply = lendNumber; // 需要还的数量\n        if (lendToken != _lendToken) {\n            path[0] = lendToken;\n            path[1] = _lendToken;\n            if (lendProject == 1) {\n                amounts = IUniswapV2Router01(uniRouter).getAmountsOut(\n                    lendNumber,\n                    path\n                );\n                reply = amounts[1];\n            } else if (lendProject == 2) {\n                amounts = IUniswapV2Router01(sushiRouter).getAmountsOut(\n                    lendNumber,\n                    path\n                );\n                reply = amounts[1];\n            }\n        }\n    }\n\n    function approvalToken(address _token) public {\n        if (!approvalList[_token]) {\n            address[] memory adds = new address[](3);\n            adds[0] = uniRouter;\n            adds[1] = sushiRouter;\n            adds[2] = soloAddress;\n            // bytes4(keccak256(bytes('approve(address,uint256)'))) = 0x095ea7b3\n            for (uint256 i = 0; i < adds.length; i++) {\n                (bool success, bytes memory data) =\n                    _token.call(\n                        abi.encodeWithSelector(0x095ea7b3, adds[i], uint256(-1))\n                    );\n                require(\n                    success && (data.length == 0 || abi.decode(data, (bool))),\n                    \"Approval of failure!\"\n                );\n            }\n            approvalList[_token] = true;\n        }\n    }\n}\n\ninterface IUniswapV2Router01 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Pair {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function token0() external view returns (address);\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvalList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lendNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendProject\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dexList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_dexList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"dydxLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lendProject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_dexList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"uniLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FUCK","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}