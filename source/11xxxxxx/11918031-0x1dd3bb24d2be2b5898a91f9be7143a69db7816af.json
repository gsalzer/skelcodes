{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/StakingManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./templates/Initializable.sol\\\";\\nimport \\\"./interfaces/IStakingManager.sol\\\";\\n\\n\\n/**\\n * @title StakingManager\\n * @dev Staking manager contract\\n */\\ncontract StakingManager is Initializable, IStakingManager {\\n    using SafeMath for uint256;\\n\\n    uint256 constant private XBE_AMOUNT = 12000 ether;\\n    uint256[7] private DAILY_XBE_REWARD = [\\n        999900 finney, // first day - 33.33%\\n        585000 finney, // second day - 19.50%\\n        414900 finney, // third day - 13.83%\\n        321600 finney, // 4th day - 10.72%\\n        263100 finney, // 5th day - 8,77%\\n        222600 finney, // 6th day - 7,42%\\n        192900 finney]; // 7th day - 6,43%\\n\\n    struct Accumulator {\\n        uint256 lpTotalAmount;\\n        uint256 xbeTotalReward;\\n    }\\n\\n    event StakerAdded(address user, address pool, uint256 day, uint256 amount);\\n    event StakerHasClaimedReward(address user, uint256[4] lpTokens, uint256 xbeTokens);\\n\\n    /// all available pools\\n    address[4] private _pools;\\n\\n    /// pool address => status\\n    mapping(address => bool) private _allowListOfPools;\\n\\n    /// user address => pool address => daily lp balance\\n    mapping(address => mapping(address => uint256[7])) private _stakes;\\n\\n    /// pool address => total LP tokens value which was added per day and daily reward\\n    mapping(address => Accumulator[7]) private _dailyAccumulator;\\n\\n    IERC20 private _tokenXbe;\\n\\n    uint256 private _startTime;\\n\\n    constructor(\\n        address xbe,\\n        uint256 startTime\\n    ) public {\\n        _tokenXbe = IERC20(xbe);\\n        _startTime = startTime;\\n    }\\n\\n    /**\\n     * @dev add all pools address for staking\\n     */\\n    function configure(address[4] calldata pools) external initializer {\\n        _tokenXbe.transferFrom(_msgSender(), address(this), XBE_AMOUNT);\\n\\n        for (uint i = 0; i < 4; ++i) {\\n            address pool = pools[i];\\n            _allowListOfPools[pool] = true;\\n            _pools[i] = pools[i];\\n            for (uint j = 0; j < 7; ++j) {\\n                _dailyAccumulator[pool][j].xbeTotalReward = DAILY_XBE_REWARD[j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @return start time\\n     */\\n    function startTime() external view override returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    /**\\n     * @return end time\\n     */\\n    function endTime() public view override returns (uint256) {\\n        return _startTime + 7 days;\\n    }\\n\\n    /**\\n     * @return day number from startTime\\n     */\\n    function currentDay() external view returns (uint256) {\\n        if (block.timestamp < _startTime) {\\n            return 0;\\n        }\\n        uint256 day = (block.timestamp - _startTime) / 1 days;\\n        return (day < 7)? (day + 1) : 0;\\n    }\\n\\n    function tokenXbe() external view returns (address) {\\n        return address(_tokenXbe);\\n    }\\n\\n    function getPools() external view override returns (address[4] memory) {\\n        return _pools;\\n    }\\n\\n    function totalRewardForPool(address pool) external view returns (uint256, uint256[7] memory) {\\n        uint256 poolReward = 0;\\n        uint256[7] memory dailyRewards;\\n        for (uint256 i = 0; i < 7; ++i) {\\n            dailyRewards[i] = _dailyAccumulator[pool][i].xbeTotalReward;\\n            poolReward = poolReward.add(dailyRewards[i]);\\n\\n        }\\n        return (poolReward, dailyRewards);\\n    }\\n\\n    function totalLPForPool(address pool) external view returns (uint256, uint256[7] memory) {\\n        uint256 lpAmount = 0;\\n        uint256[7] memory dailyLP;\\n        for (uint256 i = 0; i < 7; ++i) {\\n            dailyLP[i] = _dailyAccumulator[pool][i].lpTotalAmount;\\n            lpAmount = lpAmount.add(dailyLP[i]);\\n\\n        }\\n        return (lpAmount, dailyLP);\\n    }\\n\\n    function getStake(address user) external view returns (uint256[4] memory) {\\n        uint256[4] memory lpTokens;\\n        for (uint256 i = 0; i < 4; ++i) {\\n            lpTokens[i] = 0;\\n            for (uint256 j = 0; j < 7; ++j) {\\n                lpTokens[i] = lpTokens[i].add(_stakes[user][_pools[i]][j]);\\n            }\\n        }\\n        return lpTokens;\\n    }\\n\\n    function getStakeInfoPerDay(address user, address pool) external view returns (uint256[7] memory) {\\n        uint256[7] memory lpTokens;\\n        for (uint256 i = 0; i < 7; ++i) {\\n            lpTokens[i] = _stakes[user][pool][i];\\n        }\\n        return lpTokens;\\n    }\\n\\n    function calculateReward(address user, uint256 timestamp) external view returns(uint256[4] memory, uint256[4] memory) {\\n        uint256[4] memory usersLP;\\n        uint256[4] memory xbeReward;\\n\\n        uint256 _endTime = endTime();\\n        if (timestamp == 0) {\\n            timestamp = _endTime;\\n        } else if (timestamp > _endTime) {\\n            timestamp = _endTime;\\n        }\\n\\n        for (uint256 i = 0; i < 4; ++i) {\\n            address pool = _pools[i];\\n            uint256 accumulateTotalLP = 0;\\n            uint256 accumulateUserLP = 0;\\n            for (uint256 j = 0; j < 7 && timestamp >= _startTime + (j + 1) * 86400; ++j) {\\n                Accumulator memory dailyAccumulator = _dailyAccumulator[pool][j];\\n                accumulateTotalLP = accumulateTotalLP.add(dailyAccumulator.lpTotalAmount);\\n                uint256 stake = _stakes[user][pool][j];\\n                if (stake > 0) {\\n                    accumulateUserLP = accumulateUserLP.add(stake);\\n                    usersLP[i] = usersLP[i].add(stake);\\n                }\\n                if (accumulateUserLP > 0) {\\n                    uint256 dailyReward = dailyAccumulator.xbeTotalReward.mul(accumulateUserLP).div(accumulateTotalLP);\\n                    xbeReward[i] = xbeReward[i].add(dailyReward);\\n                }\\n            }\\n        }\\n\\n        return (usersLP, xbeReward);\\n    }\\n\\n    /**\\n     * @dev Add stake\\n     * @param user user address\\n     * @param pool pool address\\n     * @param amount number of LP tokens\\n     */\\n    function addStake(address user, address pool, uint256 amount) external override {\\n        require(block.timestamp >= _startTime, \\\"The time has not come yet\\\");\\n        require(block.timestamp <= _startTime + 7 days, \\\"stakings has finished\\\");\\n        require(_allowListOfPools[pool], \\\"Pool not found\\\");\\n\\n        // transfer LP tokens from sender to contract\\n        IERC20(pool).transferFrom(_msgSender(), address(this), amount);\\n\\n        uint256 day = (block.timestamp - _startTime) / 1 days;\\n\\n        // add amount to daily LP total value\\n        Accumulator storage dailyAccumulator = _dailyAccumulator[pool][day];\\n        dailyAccumulator.lpTotalAmount = dailyAccumulator.lpTotalAmount.add(amount);\\n\\n        // add stake info\\n        _stakes[user][pool][day] = _stakes[user][pool][day].add(amount);\\n\\n        emit StakerAdded(user, pool, day + 1, amount);\\n    }\\n\\n    /**\\n     * @dev Pick up reward and LP tokens\\n     */\\n    function claimReward(address user) external {\\n        require(block.timestamp > endTime(), \\\"wait end time\\\");\\n        uint256 xbeReward = 0;\\n        uint256[4] memory usersLP;\\n\\n        for (uint256 i = 0; i < 4; ++i) {\\n            address pool = _pools[i];\\n            uint256 accumulateTotalLP = 0;\\n            uint256 accumulateUserLP = 0;\\n            for (uint256 j = 0; j < 7; ++j) {\\n                Accumulator storage dailyAccumulator = _dailyAccumulator[pool][j];\\n                accumulateTotalLP = accumulateTotalLP.add(dailyAccumulator.lpTotalAmount);\\n                uint256 stake = _stakes[user][pool][j];\\n                if (stake > 0) {\\n                    _stakes[user][pool][j] = 0;\\n                    dailyAccumulator.lpTotalAmount = dailyAccumulator.lpTotalAmount.sub(stake);\\n                    accumulateUserLP = accumulateUserLP.add(stake);\\n                    usersLP[i] = usersLP[i].add(stake);\\n                }\\n                if (accumulateUserLP > 0) {\\n                    uint256 dailyReward = dailyAccumulator.xbeTotalReward.mul(accumulateUserLP).div(accumulateTotalLP);\\n                    dailyAccumulator.xbeTotalReward = dailyAccumulator.xbeTotalReward.sub(dailyReward);\\n                    xbeReward = xbeReward.add(dailyReward);\\n                }\\n            }\\n            if (usersLP[i] > 0) {\\n                IERC20(_pools[i]).transfer(user, usersLP[i]);\\n            }\\n        }\\n\\n        require(xbeReward > 0, \\\"Reward is empty\\\");\\n\\n        _tokenXbe.transfer(user, xbeReward);\\n\\n        emit StakerHasClaimedReward(user, usersLP, xbeReward);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/interfaces/IStakingManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title IStakingManager\\n * @dev Staking manager interface\\n */\\ninterface IStakingManager {\\n    function addStake(\\n        address user,\\n        address pool,\\n        uint256 amount\\n    ) external;\\n\\n    function startTime() external view returns (uint256);\\n\\n    function endTime() external view returns (uint256);\\n\\n    function getPools() external view returns (address[4] memory);\\n}\\n\"\r\n    },\r\n    \"/home/user/Documents/Project/solidity/miris-sc/contracts/templates/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n\\n/**\\n * @title Initializable allows to create initializable contracts\\n * so that only deployer can initialize contract and only once\\n */\\ncontract Initializable is Context {\\n    bool private _isContractInitialized;\\n    address private _deployer;\\n\\n    constructor() public {\\n        _deployer = _msgSender();\\n    }\\n\\n    modifier initializer {\\n        require(_msgSender() == _deployer, \\\"user not allowed to initialize\\\");\\n        require(!_isContractInitialized, \\\"contract already initialized\\\");\\n        _;\\n        _isContractInitialized = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xbe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"lpTokens\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xbeTokens\",\"type\":\"uint256\"}],\"name\":\"StakerHasClaimedReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"pools\",\"type\":\"address[4]\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"\",\"type\":\"address[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStakeInfoPerDay\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenXbe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"totalLPForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"totalRewardForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingManager","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005de7cc4bcbca31c473f6d2f27825cfb09cc0bb1600000000000000000000000000000000000000000000000000000000603631b0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}