{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// a library for performing various math operations\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface Balancer {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n\r\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        address tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint256 maxAmountIn,\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external returns (uint256 poolAmountOut);\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint256 poolAmountIn,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 tokenAmountOut);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getNormalizedWeight(address token) external view returns (uint256);\r\n\r\n    function getDenormalizedWeight(address token) external view returns (uint256);\r\n}\r\n\r\ninterface OneSplitAudit {\r\n    function swap(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    ) external payable returns (uint256 returnAmount);\r\n\r\n    function getExpectedReturn(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\r\n}\r\n\r\ninterface ILpPairConverter {\r\n    function lpPair() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function accept(address _input) external view returns (bool);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function convert_rate(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) external view returns (uint256 _outputAmount);\r\n\r\n    function calc_add_liquidity(uint256 _amount0, uint256 _amount1) external view returns (uint256);\r\n\r\n    function calc_remove_liquidity(uint256 _shares) external view returns (uint256 _amount0, uint256 _amount1);\r\n\r\n    function convert(\r\n        address _input,\r\n        address _output,\r\n        address _to\r\n    ) external returns (uint256 _outputAmount);\r\n\r\n    function add_liquidity(address _to) external returns (uint256 _outputAmount);\r\n\r\n    function remove_liquidity(address _to) external returns (uint256 _amount0, uint256 _amount1);\r\n}\r\n\r\ninterface IVaultMaster {\r\n    function bank(address) external view returns (address);\r\n\r\n    function isVault(address) external view returns (bool);\r\n\r\n    function isController(address) external view returns (bool);\r\n\r\n    function isStrategy(address) external view returns (bool);\r\n\r\n    function slippage(address) external view returns (uint256);\r\n\r\n    function convertSlippage(address _input, address _output) external view returns (uint256);\r\n\r\n    function valueToken() external view returns (address);\r\n\r\n    function govVault() external view returns (address);\r\n\r\n    function insuranceFund() external view returns (address);\r\n\r\n    function performanceReward() external view returns (address);\r\n\r\n    function govVaultProfitShareFee() external view returns (uint256);\r\n\r\n    function gasFee() external view returns (uint256);\r\n\r\n    function insuranceFee() external view returns (uint256);\r\n\r\n    function withdrawalProtectionFee() external view returns (uint256);\r\n}\r\n\r\nlibrary ConverterHelper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c1 = c0 + (1e18 / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c2 = c1 / 1e18;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint256 c0 = a * 1e18;\r\n        require(a == 0 || c0 / a == 1e18, \"ERR_DIV_INTERNAL\");\r\n        // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\");\r\n        //  badd require\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function calculateAddBptLiquidity(\r\n        Balancer _balPool,\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _amount0,\r\n        uint256 _amount1\r\n    ) internal view returns (uint256 _poolAmountOut) {\r\n        require(_amount0 > 0 && _amount1 > 0, \"Insufficient liquidity amount\");\r\n        uint256 _balTotalSupply = _balPool.totalSupply();\r\n        uint256 _balToken0Amount = _balPool.getBalance(_token0);\r\n        uint256 _balToken1Amount = _balPool.getBalance(_token1);\r\n        uint256 _poolOutByAmount0 = bdiv(bmul(_amount0, _balTotalSupply), _balToken0Amount);\r\n        uint256 _poolOutByAmount1 = bdiv(bmul(_amount1, _balTotalSupply), _balToken1Amount);\r\n        //        uint _poolOutByAmount0 = bmul(bdiv(_amount0, _balToken0Amount), _balTotalSupply);\r\n        //        uint _poolOutByAmount1 = bmul(bdiv(_amount1, _balToken1Amount), _balTotalSupply);\r\n        return bmul(Math.min(_poolOutByAmount0, _poolOutByAmount1), 1e18 - 1e10);\r\n    }\r\n\r\n    function calculateRemoveBptLiquidity(\r\n        Balancer _balPool,\r\n        uint256 _poolAmountIn,\r\n        address _token0,\r\n        address _token1\r\n    ) internal view returns (uint256 _amount0, uint256 _amount1) {\r\n        uint256 _balTotalSupply = _balPool.totalSupply();\r\n        uint256 _balToken0Amount = _balPool.getBalance(_token0);\r\n        uint256 _balToken1Amount = _balPool.getBalance(_token1);\r\n        _amount0 = bdiv(bmul(_balToken0Amount, _poolAmountIn), _balTotalSupply);\r\n        _amount1 = bdiv(bmul(_balToken1Amount, _poolAmountIn), _balTotalSupply);\r\n    }\r\n\r\n    function calculateAddUniLpLiquidity(\r\n        IUniswapV2Pair _pair,\r\n        uint256 _amount0,\r\n        uint256 _amount1\r\n    ) internal view returns (uint256) {\r\n        uint256 _pairTotalSupply = _pair.totalSupply();\r\n        uint256 _reserve0 = 0;\r\n        uint256 _reserve1 = 0;\r\n        (_reserve0, _reserve1, ) = _pair.getReserves();\r\n        return Math.min(_amount0.mul(_pairTotalSupply) / _reserve0, _amount1.mul(_pairTotalSupply) / _reserve1);\r\n    }\r\n\r\n    function calculateRemoveUniLpLiquidity(IUniswapV2Pair _pair, uint256 _shares) internal view returns (uint256 _amount0, uint256 _amount1) {\r\n        uint256 _pairSupply = _pair.totalSupply();\r\n        uint256 _reserve0 = 0;\r\n        uint256 _reserve1 = 0;\r\n        (_reserve0, _reserve1, ) = _pair.getReserves();\r\n        _amount0 = _shares.mul(_reserve0).div(_pairSupply);\r\n        _amount1 = _shares.mul(_reserve1).div(_pairSupply);\r\n        return (_amount0, _amount1);\r\n    }\r\n\r\n    function skim(address _token, address _to) internal returns (uint256) {\r\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\r\n        if (_amount > 0) {\r\n            IERC20(_token).safeTransfer(_to, _amount);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    function addUniLpLiquidity(\r\n        IUniswapV2Router _router,\r\n        IUniswapV2Pair _pair,\r\n        address _to\r\n    ) internal returns (uint256 _outputAmount) {\r\n        address _token0 = _pair.token0();\r\n        address _token1 = _pair.token1();\r\n        uint256 _amount0 = IERC20(_token0).balanceOf(address(this));\r\n        uint256 _amount1 = IERC20(_token1).balanceOf(address(this));\r\n        require(_amount0 > 0 && _amount1 > 0, \"Insufficient liquidity amount\");\r\n        (, , _outputAmount) = _router.addLiquidity(_token0, _token1, _amount0, _amount1, 0, 0, _to, block.timestamp + 1);\r\n        skim(_token0, _to);\r\n        skim(_token1, _to);\r\n    }\r\n\r\n    function removeBptLiquidity(Balancer _pool) internal returns (uint256 _poolAmountIn) {\r\n        uint256[] memory _minAmountsOut = new uint256[](2);\r\n        _poolAmountIn = _pool.balanceOf(address(this));\r\n        require(_poolAmountIn > 0, \"Insufficient liquidity amount\");\r\n        _pool.exitPool(_poolAmountIn, _minAmountsOut);\r\n    }\r\n\r\n    function removeUniLpLiquidity(\r\n        IUniswapV2Router _router,\r\n        IUniswapV2Pair _pair,\r\n        address _to\r\n    ) internal returns (uint256 _amount0, uint256 _amount1) {\r\n        uint256 _liquidityAmount = _pair.balanceOf(address(this));\r\n        require(_liquidityAmount > 0, \"Insufficient liquidity amount\");\r\n        return _router.removeLiquidity(_pair.token0(), _pair.token1(), _liquidityAmount, 0, 0, _to, block.timestamp + 1);\r\n    }\r\n\r\n    function convertRateUniToUniInternal(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) internal view returns (uint256) {\r\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\r\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\r\n        uint256 _amount0;\r\n        uint256 _amount1;\r\n        (_amount0, _amount1) = calculateRemoveUniLpLiquidity(_inputPair, _inputAmount);\r\n        return calculateAddUniLpLiquidity(_outputPair, _amount0, _amount1);\r\n    }\r\n\r\n    function convertUniToUniLp(\r\n        address _input,\r\n        address _output,\r\n        IUniswapV2Router _inputRouter,\r\n        IUniswapV2Router _outputRouter,\r\n        address _to\r\n    ) internal returns (uint256) {\r\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\r\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\r\n        removeUniLpLiquidity(_inputRouter, _inputPair, address(this));\r\n        return addUniLpLiquidity(_outputRouter, _outputPair, _to);\r\n    }\r\n\r\n    function convertUniLpToBpt(\r\n        address _input,\r\n        address _output,\r\n        IUniswapV2Router _inputRouter,\r\n        address _to\r\n    ) internal returns (uint256) {\r\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\r\n        Balancer _balPool = Balancer(_output);\r\n        address _token0 = _inputPair.token0();\r\n        address _token1 = _inputPair.token1();\r\n        uint256 _amount0;\r\n        uint256 _amount1;\r\n        (_amount0, _amount1) = removeUniLpLiquidity(_inputRouter, _inputPair, address(this));\r\n        uint256 _balPoolAmountOut = calculateAddBptLiquidity(_balPool, _token0, _token1, _amount0, _amount1);\r\n        uint256 _outputAmount = addBalancerLiquidity(_balPool, _balPoolAmountOut, _to);\r\n        skim(_token0, _to);\r\n        skim(_token1, _to);\r\n        return _outputAmount;\r\n    }\r\n\r\n    function convertBPTToUniLp(\r\n        address _input,\r\n        address _output,\r\n        IUniswapV2Router _outputRouter,\r\n        address _to\r\n    ) internal returns (uint256) {\r\n        removeBptLiquidity(Balancer(_input));\r\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\r\n        return addUniLpLiquidity(_outputRouter, _outputPair, _to);\r\n    }\r\n\r\n    function convertRateUniLpToBpt(\r\n        address _input,\r\n        address _lpBpt,\r\n        uint256 _inputAmount\r\n    ) internal view returns (uint256) {\r\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\r\n        uint256 _amount0;\r\n        uint256 _amount1;\r\n        (_amount0, _amount1) = calculateRemoveUniLpLiquidity(_inputPair, _inputAmount);\r\n        return calculateAddBptLiquidity(Balancer(_lpBpt), _inputPair.token0(), _inputPair.token1(), _amount0, _amount1);\r\n    }\r\n\r\n    function convertRateBptToUniLp(\r\n        address _lpBpt,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) internal view returns (uint256) {\r\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\r\n        uint256 _amount0;\r\n        uint256 _amount1;\r\n        (_amount0, _amount1) = calculateRemoveBptLiquidity(Balancer(_lpBpt), _inputAmount, _outputPair.token0(), _outputPair.token1());\r\n        return calculateAddUniLpLiquidity(_outputPair, _amount0, _amount1);\r\n    }\r\n\r\n    function addBalancerLiquidity(\r\n        Balancer _pool,\r\n        uint256 _poolAmountOut,\r\n        address _to\r\n    ) internal returns (uint256 _outputAmount) {\r\n        uint256[] memory _maxAmountsIn = new uint256[](2);\r\n        _maxAmountsIn[0] = type(uint256).max;\r\n        _maxAmountsIn[1] = type(uint256).max;\r\n        _pool.joinPool(_poolAmountOut, _maxAmountsIn);\r\n        return skim(address(_pool), _to);\r\n    }\r\n}\r\n\r\ninterface IDecimals {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract BaseConverter is ILpPairConverter {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public governance;\r\n\r\n    IUniswapV2Router public uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router public sushiswapRouter = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    address public lpUni;\r\n    address public lpSlp;\r\n    address public lpBpt;\r\n\r\n    // To calculate virtual_price (dollar value)\r\n    OneSplitAudit public oneSplitAudit = OneSplitAudit(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\r\n    IERC20 public tokenUSDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    uint256 private unlocked = 1;\r\n    uint256 public preset_virtual_price = 0;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Converter: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(\r\n        IUniswapV2Router _uniswapRouter,\r\n        IUniswapV2Router _sushiswapRouter,\r\n        address _lpUni,\r\n        address _lpSlp,\r\n        address _lpBpt,\r\n        OneSplitAudit _oneSplitAudit,\r\n        IERC20 _usdc\r\n    ) public {\r\n        if (address(_uniswapRouter) != address(0)) uniswapRouter = _uniswapRouter;\r\n        if (address(_sushiswapRouter) != address(0)) sushiswapRouter = _sushiswapRouter;\r\n\r\n        lpUni = _lpUni;\r\n        lpSlp = _lpSlp;\r\n        lpBpt = _lpBpt;\r\n\r\n        if (lpUni != address(0)) {\r\n            address token0_ = IUniswapV2Pair(lpUni).token0();\r\n            address token1_ = IUniswapV2Pair(lpUni).token1();\r\n\r\n            IERC20(lpUni).safeApprove(address(uniswapRouter), type(uint256).max);\r\n            IERC20(token0_).safeApprove(address(uniswapRouter), type(uint256).max);\r\n            IERC20(token1_).safeApprove(address(uniswapRouter), type(uint256).max);\r\n\r\n            IERC20(token0_).safeApprove(address(sushiswapRouter), type(uint256).max);\r\n            IERC20(token1_).safeApprove(address(sushiswapRouter), type(uint256).max);\r\n\r\n            IERC20(token0_).safeApprove(address(lpBpt), type(uint256).max);\r\n            IERC20(token1_).safeApprove(address(lpBpt), type(uint256).max);\r\n        }\r\n        if (lpSlp != address(0)) {\r\n            IERC20(lpSlp).safeApprove(address(sushiswapRouter), type(uint256).max);\r\n        }\r\n\r\n        if (address(_oneSplitAudit) != address(0)) oneSplitAudit = _oneSplitAudit;\r\n        if (address(_usdc) != address(0)) tokenUSDC = _usdc;\r\n\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function getName() public pure virtual returns (string memory);\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function approveForSpender(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function set_preset_virtual_price(uint256 _preset_virtual_price) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        preset_virtual_price = _preset_virtual_price;\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 amount,\r\n        address to\r\n    ) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract BarnBridgeConverter is BaseConverter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public stableToken = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\r\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public susd = address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n\r\n    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\r\n\r\n    constructor(\r\n        IUniswapV2Router _uniswapRouter,\r\n        IUniswapV2Router _sushiswapRouter,\r\n        address _lpUni,\r\n        address _lpSlp,\r\n        address _lpBpt,\r\n        OneSplitAudit _oneSplitAudit,\r\n        IERC20 _usdc,\r\n        address _stableToken\r\n    ) public BaseConverter(_uniswapRouter, _sushiswapRouter, _lpUni, _lpSlp, _lpBpt, _oneSplitAudit, _usdc) {\r\n        if (_stableToken != address(0)) stableToken = _stableToken;\r\n\r\n        uniswapPaths[susd][stableToken] = [susd, address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), stableToken];\r\n        uniswapPaths[stableToken][susd] = [stableToken, address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), susd];\r\n    }\r\n\r\n    function getName() public pure override returns (string memory) {\r\n        return \"BarnBridgeConverter:[To_be_replaced_by_pair_name]\";\r\n    }\r\n\r\n    function lpPair() external view override returns (address) {\r\n        return stableToken;\r\n    }\r\n\r\n    function token0() public view override returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function token1() public view override returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function accept(address _input) external view override returns (bool) {\r\n        return (_input == stableToken) || (_input == dai) || (_input == susd);\r\n    }\r\n\r\n    function get_virtual_price() external view override returns (uint256) {\r\n        if (preset_virtual_price > 0) return preset_virtual_price;\r\n\r\n        IDecimals _token0 = IDecimals(stableToken);\r\n        uint256 _amount = uint256(10)**_token0.decimals();\r\n        uint256 _returnAmount;\r\n        (_returnAmount, ) = oneSplitAudit.getExpectedReturn(address(_token0), address(tokenUSDC), _amount, 1, 0);\r\n        // precision 1e18\r\n        return _returnAmount.mul(10**30).div(_amount);\r\n    }\r\n\r\n    function convert_rate(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) external view override returns (uint256 _outputAmount) {\r\n        if (_input == _output) return _inputAmount;\r\n        if (_inputAmount == 0) return 0;\r\n\r\n        return _getExchangeRateTokens(_input, _output, _inputAmount);\r\n    }\r\n\r\n    function calc_add_liquidity(uint256, uint256) external view override returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function calc_remove_liquidity(uint256) external view override returns (uint256 _amount0, uint256 _amount1) {\r\n        return (0, 0);\r\n    }\r\n\r\n    function convert(\r\n        address _input,\r\n        address _output,\r\n        address _to\r\n    ) external override lock returns (uint256 _outputAmount) {\r\n        require(_input != _output, \"same asset\");\r\n        _swapTokens(_input, _output, IERC20(_input).balanceOf(address(this)));\r\n        _outputAmount = IERC20(_output).balanceOf(address(this));\r\n        IERC20(_output).safeTransfer(_to, _outputAmount);\r\n    }\r\n\r\n    function add_liquidity(address) external override lock returns (uint256 _outputAmount) {\r\n        return 0;\r\n    }\r\n\r\n    function remove_liquidity(address) external override lock returns (uint256 _amount0, uint256 _amount1) {\r\n        return (0, 0);\r\n    }\r\n\r\n    function setDai(address _dai) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        dai = _dai;\r\n    }\r\n\r\n    function setSusd(address _susd) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        susd = _susd;\r\n    }\r\n\r\n    function setUnirouterPath(\r\n        address _input,\r\n        address _output,\r\n        address[] memory _path\r\n    ) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        uniswapPaths[_input][_output] = _path;\r\n    }\r\n\r\n    function _swapTokens(\r\n        address _input,\r\n        address _output,\r\n        uint256 _amount\r\n    ) internal {\r\n        // use Uniswap\r\n        address[] memory path = uniswapPaths[_input][_output];\r\n        if (path.length == 0) {\r\n            // path: _input -> valueToken\r\n            path = new address[](2);\r\n            path[0] = _input;\r\n            path[1] = _output;\r\n        }\r\n        IERC20(_input).safeApprove(address(uniswapRouter), 0);\r\n        IERC20(_input).safeApprove(address(uniswapRouter), _amount);\r\n        uniswapRouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\r\n    }\r\n\r\n    function _getExchangeRateTokens(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) internal view returns (uint256 _outputAmount) {\r\n        if (_inputAmount == 0) return 0;\r\n        // use Uniswap\r\n\r\n        address[] memory path = uniswapPaths[_input][_output];\r\n        if (path.length == 0) {\r\n            // path: _input -> _output\r\n            path = new address[](2);\r\n            path[0] = _input;\r\n            path[1] = _output;\r\n        }\r\n\r\n        uint256[] memory amounts = uniswapRouter.getAmountsOut(_inputAmount, path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpUni\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpSlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpBpt\",\"type\":\"address\"},{\"internalType\":\"contract OneSplitAudit\",\"name\":\"_oneSplitAudit\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"}],\"name\":\"accept\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"add_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calc_add_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calc_remove_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneSplitAudit\",\"outputs\":[{\"internalType\":\"contract OneSplitAudit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preset_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remove_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"name\":\"setDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_susd\",\"type\":\"address\"}],\"name\":\"setSusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUnirouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preset_virtual_price\",\"type\":\"uint256\"}],\"name\":\"set_preset_virtual_price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BarnBridgeConverter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f0decb1f2c3a758ecf99cda1af72ed178e99260f7c1ec877715b4fa97a51e301"}]}