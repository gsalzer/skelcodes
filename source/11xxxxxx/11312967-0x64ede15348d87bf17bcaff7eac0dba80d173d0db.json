{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/synthetic/SyntheticTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Amount} from \\\"../lib/Amount.sol\\\";\\n\\nimport {SyntheticStorage} from \\\"./SyntheticStorage.sol\\\";\\n\\nimport {Adminable} from \\\"../lib/Adminable.sol\\\";\\n\\ncontract SyntheticTokenV1 is Adminable, SyntheticStorage, IERC20 {\\n\\n    using SafeMath for uint256;\\n    using Amount for Amount.Principal;\\n\\n    /* ========== Events ========== */\\n\\n    event MinterAdded(address _minter, uint256 _limit);\\n\\n    event MinterRemoved(address _minter);\\n\\n    event MinterLimitUpdated(address _minter, uint256 _limit);\\n\\n    event MetadataChanged();\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyMinter() {\\n        require(\\n            _minters[msg.sender] == true,\\n            \\\"SyntheticToken: only callable by minter\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== Init Function ========== */\\n\\n    /**\\n     * @dev Initialise the synthetic token\\n     *\\n     * @param name The name of the token\\n     * @param symbol The symbol of the token\\n     * @param version The version number of this token\\n     */\\n    function init(\\n        string memory name,\\n        string memory symbol,\\n        uint8 version\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        _name = name;\\n        _symbol = symbol;\\n        _version = version;\\n    }\\n\\n    /* ========== View Functions ========== */\\n\\n    function name()\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return _name;\\n    }\\n\\n    function symbol()\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n\\n    function decimals()\\n        external\\n        pure\\n        returns (uint8)\\n    {\\n        return 18;\\n    }\\n\\n    function version()\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        return _version;\\n    }\\n\\n    function totalSupply()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function getAllMinters()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _mintersArray;\\n    }\\n\\n    function isValidMinter(\\n        address _minter\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _minters[_minter];\\n    }\\n\\n    function getMinterIssued(\\n        address _minter\\n    )\\n        external\\n        view\\n        returns (Amount.Principal memory)\\n    {\\n        return _minterIssued[_minter];\\n    }\\n\\n    function getMinterLimit(\\n        address _minter\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _minterLimits[_minter];\\n    }\\n\\n    /* ========== Admin Functions ========== */\\n\\n    /**\\n     * @dev Add a new minter to the synthetic token.\\n     *\\n     * @param _minter The address of the minter to add\\n     * @param _limit The starting limit for how much this synth can mint\\n     */\\n    function addMinter(\\n        address _minter,\\n        uint256 _limit\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            _minters[_minter] != true,\\n            \\\"Minter already exists\\\"\\n        );\\n\\n        _mintersArray.push(_minter);\\n        _minters[_minter] = true;\\n        _minterLimits[_minter] = _limit;\\n\\n        emit MinterAdded(_minter, _limit);\\n    }\\n\\n    /**\\n     * @dev Remove a minter from the synthetic token\\n     *\\n     * @param _minter Address to remove the minter\\n     */\\n    function removeMinter(\\n        address _minter\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            _minters[_minter] == true,\\n            \\\"Minter does not exist\\\"\\n        );\\n\\n        for (uint i = 0; i < _mintersArray.length; i++) {\\n            if (address(_mintersArray[i]) == _minter) {\\n                delete _mintersArray[i];\\n                _mintersArray[i] = _mintersArray[_mintersArray.length - 1];\\n                _mintersArray.length--;\\n\\n                break;\\n            }\\n        }\\n\\n        delete _minters[_minter];\\n        delete _minterLimits[_minter];\\n\\n        emit MinterRemoved(_minter);\\n    }\\n\\n    /**\\n     * @dev Update the limit of the minter\\n     *\\n     * @param _minter The address of the minter to set\\n     * @param _limit The new limit to set for this address\\n     */\\n    function updateMinterLimit(\\n        address _minter,\\n        uint256 _limit\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        require(\\n            _minters[_minter] == true,\\n            \\\"Minter does not exist\\\"\\n        );\\n\\n        _minterLimits[_minter] = _limit;\\n\\n        emit MinterLimitUpdated(_minter, _limit);\\n    }\\n\\n    /* ========== Minter Functions ========== */\\n\\n    /**\\n     * @dev Mint synthetic tokens\\n     *\\n     * @notice Can only be called by a valid minter.\\n     *\\n     * @param to The destination to mint the synth to\\n     * @param value The amount of synths to mint\\n     */\\n    function mint(\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        onlyMinter\\n    {\\n        Amount.Principal memory issuedAmount = _minterIssued[msg.sender].add(\\n            Amount.Principal({ sign: true, value: value })\\n        );\\n\\n        require(\\n            issuedAmount.value <= _minterLimits[msg.sender] || issuedAmount.sign == false,\\n            \\\"Minter limit reached\\\"\\n        );\\n\\n        _minterIssued[msg.sender] = issuedAmount;\\n        _mint(to, value);\\n    }\\n\\n    /**\\n     * @dev Burn synthetic tokens\\n     *\\n     * @notice Can only be called by a valid minter.\\n     *\\n     * @param from The destination to burn the synth from\\n     * @param value The amount of the synth to burn\\n     */\\n    function burn(\\n        address from,\\n        uint256 value\\n    )\\n        external\\n        onlyMinter\\n    {\\n        _minterIssued[msg.sender] = _minterIssued[msg.sender].sub(\\n            Amount.Principal({ sign: true, value: value })\\n        );\\n\\n        _burn(from, value);\\n    }\\n\\n    /**\\n     * @dev Transfer any collateral held to another address\\n     *\\n     * @param token The address of the token to transfer\\n     * @param to The destination to send the collateral to\\n     * @param value The amount of the tokens to transfer\\n     */\\n    function transferCollateral(\\n        address token,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        onlyMinter\\n        returns (bool)\\n    {\\n        return IERC20(token).transfer(\\n            to,\\n            value\\n        );\\n    }\\n\\n    /* ========== ERC20 Functions ========== */\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        public\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        returns (bool)\\n    {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount)\\n        );\\n\\n        return true;\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(\\n            sender != address(0),\\n            \\\"ERC20: transfer from the zero address\\\"\\n        );\\n\\n        require(\\n            recipient != address(0),\\n            \\\"ERC20: transfer to the zero address\\\"\\n        );\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.16;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Amount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"../lib/Math.sol\\\";\\n\\nlibrary Amount {\\n\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // A Principal Amount is an amount that's been adjusted by an index\\n\\n    struct Principal {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n\\n    function zero()\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: false,\\n            value: 0\\n        });\\n    }\\n\\n    function sub(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return add(a, negative(b));\\n    }\\n\\n    function add(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        Principal memory result;\\n\\n        if (a.sign == b.sign) {\\n            result.sign = a.sign;\\n            result.value = SafeMath.add(a.value, b.value);\\n        } else {\\n            if (a.value >= b.value) {\\n                result.sign = a.sign;\\n                result.value = SafeMath.sub(a.value, b.value);\\n            } else {\\n                result.sign = b.sign;\\n                result.value = SafeMath.sub(b.value, a.value);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function equals(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (a.value == b.value) {\\n            if (a.value == 0) {\\n                return true;\\n            }\\n            return a.sign == b.sign;\\n        }\\n        return false;\\n    }\\n\\n    function negative(\\n        Principal memory a\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: !a.sign,\\n            value: a.value\\n        });\\n    }\\n\\n    function calculateAdjusted(\\n        Principal memory a,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(a.value, index, BASE);\\n    }\\n\\n    function calculatePrincipal(\\n        uint256 value,\\n        uint256 index,\\n        bool sign\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: sign,\\n            value: Math.getPartial(value, BASE, index)\\n        });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Math\\n *\\n * Library for non-standard Math functions\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function to128(\\n        uint256 number\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 result = uint128(number);\\n        require(\\n            result == number,\\n            \\\"Math: Unsafe cast to uint128\\\"\\n        );\\n        return result;\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/synthetic/SyntheticStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Amount} from \\\"../lib/Amount.sol\\\";\\n\\ncontract SyntheticStorageV1 {\\n\\n    /**\\n     * @dev ERC20 Properties\\n     */\\n    uint8   internal _version;\\n    string  internal _name;\\n    string  internal _symbol;\\n    uint256 internal _totalSupply;\\n\\n    mapping (address => uint256)                      internal _balances;\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n    /**\\n     * @dev Minter Properties\\n     */\\n    address[]                            internal _mintersArray;\\n    mapping(address => bool)             internal _minters;\\n    mapping(address => uint256)          internal _minterLimits;\\n    mapping(address => Amount.Principal) internal _minterIssued;\\n}\\n\\ncontract SyntheticStorage is SyntheticStorageV1 { /* solium-disable-line no-empty-blocks */ }\\n\"\r\n    },\r\n    \"./contracts/lib/Adminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { Storage } from \\\"./Storage.sol\\\";\\n\\n/**\\n * @title Adminable\\n * @author dYdX\\n *\\n * @dev EIP-1967 Proxy Admin contract.\\n */\\ncontract Adminable {\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     *  This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    bytes32 internal constant ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n    * @dev Modifier to check whether the `msg.sender` is the admin.\\n    *  If it is, it will run the function. Otherwise, it will revert.\\n    */\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == getAdmin(),\\n            \\\"Adminable: caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @return The EIP-1967 proxy admin\\n     */\\n    function getAdmin()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\\n    }\\n}\"\r\n    },\r\n    \"./contracts/lib/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Storage {\\n\\n    /**\\n     * @dev Performs an SLOAD and returns the data in the slot.\\n     */\\n    function load(\\n        bytes32 slot\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 result;\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            result := sload(slot)\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs an SSTORE to save the value to the slot.\\n     */\\n    function store(\\n        bytes32 slot,\\n        bytes32 value\\n    )\\n        internal\\n    {\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            sstore(slot, value)\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MinterLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getMinterIssued\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Amount.Principal\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getMinterLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isValidMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"updateMinterLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SyntheticTokenV1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}