{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n                                       `.-:+osyhhhhhhyso+:-.`\r\n                                   .:+ydmNNNNNNNNNNNNNNNNNNmdy+:.\r\n                                .+ymNNNNNNNNNNNNNNNNNNNNNNNNNNNNmy+.\r\n                             `/hmNNNNNNNNmdys+//:::://+sydmNNNNNNNNmh/`\r\n                           .odNNNNNNNdy+-.`              `.-+ydNNNNNNNdo.\r\n                         `omNNNNNNdo-`                        `-odNNNNNNmo`\r\n                        :dNNNNNNh/`                              `/hNNNNNNd:\r\n                      `oNNNNNNh:                     /-/.           :hNNNNNNo`\r\n                     `yNNNNNm+`                      mNNm-           `+mNNNNNy`\r\n                    `hNNNNNd-                        hNNNm.            -dNNNNNh`\r\n                    yNNNNNd.                         .ymNNh             .dNNNNNy\r\n                   /NNNNNm.                            -mNNys+.          .mNNNNN/\r\n                  `mNNNNN:                           `:hNNNNNNNs`         :NNNNNm`\r\n                  /NNNNNh                          `+dNNNNNNNNNNd.         hNNNNN/\r\n                  yNNNNN/               .:+syyhhhhhmNNNNNNNNNNNNNm`        /NNNNNy\r\n                  dNNNNN.            `+dNNNNNNNNNNNNNNNNNNNNNNNmd+         .NNNNNd\r\n                  mNNNNN`           -dNNNNNNNNNNNNNNNNNNNNNNm-             `NNNNNm\r\n                  dNNNNN.          -NNNNNNNNNNNNNNNNNNNNNNNN+              .NNNNNd\r\n                  yNNNNN/          dNNNNNNNNNNNNNNNNNNNNNNNN:              /NNNNNy\r\n                  /NNNNNh         .NNNNNNNNNNNNNNNNNNNNNNNNd`              hNNNNN/\r\n                  `mNNNNN:        -NNNNNNNNNNNNNNNNNNNNNNNh.              :NNNNNm`\r\n                   /NNNNNm.       `NNNNNNNNNNNNNNNNNNNNNh:               .mNNNNN/\r\n                    yNNNNNd.      .yNNNNNNNNNNNNNNNdmNNN/               .dNNNNNy\r\n                    `hNNNNNd-    `dmNNNNNNNNNNNNdo-`.hNNh              -dNNNNNh`\r\n                     `yNNNNNm+`   oNNmmNNNNNNNNNy.   `sNNdo.         `+mNNNNNy`\r\n                      `oNNNNNNh:   ....++///+++++.     -+++.        :hNNNNNNo`\r\n                        :dNNNNNNh/`                              `/hNNNNNNd:\r\n                         `omNNNNNNdo-`                        `-odNNNNNNmo`\r\n                           .odNNNNNNNdy+-.`              `.-+ydNNNNNNNdo.\r\n                             `/hmNNNNNNNNmdys+//:::://+sydmNNNNNNNNmh/`\r\n                                .+ymNNNNNNNNNNNNNNNNNNNNNNNNNNNNmy+.\r\n                                   .:+ydmNNNNNNNNNNNNNNNNNNmdy+:.\r\n                                       `.-:+yourewelcome+:-.`\r\n /$$$$$$$  /$$                                               /$$      /$$\r\n| $$__  $$| $$                                              | $$$    /$$$\r\n| $$  \\ $$| $$  /$$$$$$  /$$   /$$ /$$   /$$  /$$$$$$$      | $$$$  /$$$$  /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$\r\n| $$$$$$$/| $$ /$$__  $$|  $$ /$$/| $$  | $$ /$$_____/      | $$ $$/$$ $$ /$$__  $$| $$__  $$ /$$__  $$| $$  | $$\r\n| $$____/ | $$| $$$$$$$$ \\  $$$$/ | $$  | $$|  $$$$$$       | $$  $$$| $$| $$  \\ $$| $$  \\ $$| $$$$$$$$| $$  | $$\r\n| $$      | $$| $$_____/  >$$  $$ | $$  | $$ \\____  $$      | $$\\  $ | $$| $$  | $$| $$  | $$| $$_____/| $$  | $$\r\n| $$      | $$|  $$$$$$$ /$$/\\  $$|  $$$$$$/ /$$$$$$$/      | $$ \\/  | $$|  $$$$$$/| $$  | $$|  $$$$$$$|  $$$$$$$\r\n|__/      |__/ \\_______/|__/  \\__/ \\______/ |_______/       |__/     |__/ \\______/ |__/  |__/ \\_______/ \\____  $$\r\n                                                                                                        /$$  | $$\r\n                                                                                                       |  $$$$$$/\r\n                                                                                                       \\______/\r\n//Based Bancor Interaction developed by:\r\n// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n///@author Zapper\r\n///@notice This contract adds liquidity to BancorV2 Pools using ETH or ERC20 Tokens\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n\r\n\r\n interface WrappedETH {\r\n    function totalSupply() external view returns(uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns(uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns(bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns(uint remaining);\r\n\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n}\r\n\r\ninterface UniswapV2{\r\n\r\n\r\n   function addLiquidity ( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );\r\n   function addLiquidityETH ( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );\r\n   function removeLiquidityETH ( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns ( uint256 amountToken, uint256 amountETH );\r\n   function removeLiquidity ( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB );\r\n\r\n   function swapExactTokensForTokens ( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns ( uint256[] memory amounts );\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n   function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\ninterface UniswapFactory{\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\ninterface BANGetter{\r\n    function getConvertibleTokenAnchors(address tokenAddress) external view returns(address[] calldata banAddresses);\r\n    function getConvertersByAnchors(address[] calldata) external view returns(address[] calldata);\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor()  {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor()  {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IBancorV2Converter {\r\n    function anchor() external view returns (address);\r\n}\r\n\r\ninterface IBancorLiquidityProtection {\r\n    function addLiquidityFor(\r\n        address _owner,\r\n        address _poolAnchor,\r\n        address _reserveToken,\r\n        uint256 _amount\r\n    ) external payable returns (uint256 poolTokenAmount);\r\n\r\n    function baseTokenAvailableSpace(address pool) view external returns(uint256);\r\n}\r\n\r\ninterface IBancorLiquidityProtectionStore {\r\n    function protectedLiquidity(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IBancorContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\ncontract BancorPlexusWrapper is ReentrancyGuard, Ownable {\r\n\r\n    address public ETH_TOKEN_ADDRESS  = address(0x0);\r\n  address public WETH_TOKEN_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n  WrappedETH wethToken = WrappedETH(WETH_TOKEN_ADDRESS);\r\n  uint256 approvalAmount = 1000000000000000000000000000000;\r\n  uint256 longTimeFromNow = 1000000000000000000000000000;\r\n  address uniAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  address uniFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n  address bancorConverterRegistryAddress = 0xC0205e203F423Bcd8B2a4d6f8C8A154b0Aa60F19;\r\n  BANGetter bConv = BANGetter(bancorConverterRegistryAddress);\r\n  UniswapV2 uniswapExchange = UniswapV2(uniAddress);\r\n  UniswapFactory factory = UniswapFactory(uniFactoryAddress);\r\n  mapping (address => address[]) public lpTokenAddressToPairs;\r\n  mapping(string=>address) public stablecoins;\r\n  mapping(address=>mapping(address=>address[])) public presetPaths;\r\n\r\n  bool public changeRecpientIsOwner;\r\n   uint256 public fee = 0;\r\n  uint256 public maxfee = 0;\r\n\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public stopped = false;\r\n    uint16 public goodwill;\r\n\r\n    address\r\n        private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address\r\n        private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable\r\n        private constant zgoodwillAddress = 0x3CE37278de6388532C3949ce4e886F365B14fB56;\r\n\r\n    bytes32 private constant liquidityProtectionName = \"LiquidityProtection\";\r\n    bytes32\r\n        private constant liquidityProtectionStoreName = \"LiquidityProtectionStore\";\r\n\r\n    IBancorContractRegistry\r\n        public constant bancorRegistry = IBancorContractRegistry(\r\n        0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4\r\n    );\r\n\r\n    event Zapin(\r\n        address toWhomToIssue,\r\n        address toPoolAnchor,\r\n        uint256 LPTRec,\r\n        uint256 id\r\n    );\r\n\r\n    constructor() public {\r\n\r\n        goodwill = 1;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function wrap(address sourceToken, address[] memory destinationTokens, uint256 amount) public payable returns(address, uint256){\r\n\r\n        address[] memory banConvAddresses = bConv.getConvertibleTokenAnchors(destinationTokens[0]);\r\n        address[] memory bancConAddrs = bConv.getConvertersByAnchors(banConvAddresses);\r\n        address theBanConverterAddress = bancConAddrs[0];\r\n        bytes memory swapData;\r\n        address theAllowanceTarget = address(0x0);\r\n        address theSwapTarget = address(0x0);\r\n        (uint256 lpsRec, uint256 idInfo) = ZapInSingleSided(sourceToken, theBanConverterAddress, destinationTokens[0], amount,theAllowanceTarget,theSwapTarget, swapData);\r\n        return(theBanConverterAddress, lpsRec);\r\n\r\n    }\r\n\r\n\r\n    function spaceAvailable(address tokenAddress) view public returns (address, uint256){\r\n        address[] memory banConvAddresses = bConv.getConvertibleTokenAnchors(tokenAddress);\r\n\r\n        address[] memory bancConAddrs = bConv.getConvertersByAnchors(banConvAddresses);\r\n        address theBanConverterAddress = bancConAddrs[0];\r\n       // return(theBanConverterAddress, 0);\r\n\r\n         address poolAnchor = IBancorV2Converter(theBanConverterAddress)\r\n            .anchor();\r\n        address bancorLiquidityProtectionAddress = bancorRegistry.addressOf(\r\n            liquidityProtectionName\r\n        );\r\n         IBancorLiquidityProtection bancorLiquidityProtection\r\n         = IBancorLiquidityProtection(bancorLiquidityProtectionAddress);\r\n\r\n        uint256 spaceAvailable = bancorLiquidityProtection.baseTokenAvailableSpace(poolAnchor);\r\n        return (poolAnchor, spaceAvailable);\r\n\r\n\r\n    }\r\n\r\n\r\n    function ZapInSingleSided(\r\n        address _fromTokenAddress,\r\n        address _toBanConverterAddress,\r\n        address _toReserveTokenAddress,\r\n        uint256 _amount,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes memory swapData\r\n    )\r\n        public\r\n        payable\r\n        nonReentrant\r\n        stopInEmergency\r\n        returns (uint256 lptReceived, uint256 id)\r\n    {\r\n        uint256 valueToSend;\r\n        address tokenToSend;\r\n        address poolAnchor = IBancorV2Converter(_toBanConverterAddress)\r\n            .anchor();\r\n\r\n        if (_fromTokenAddress == address(0)) {\r\n            require(msg.value > 0, \"ERR: No ETH sent\");\r\n            valueToSend = _transferGoodwill(_fromTokenAddress, msg.value);\r\n        } else {\r\n            require(_amount > 0, \"Err: No Tokens Sent\");\r\n            require(msg.value == 0, \"ERR: ETH sent with Token\");\r\n            tokenToSend = _fromTokenAddress;\r\n            IERC20(tokenToSend).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n            valueToSend = _transferGoodwill(_fromTokenAddress, _amount);\r\n        }\r\n\r\n        if (_fromTokenAddress == _toReserveTokenAddress) {\r\n            (lptReceived, id) = _enterBancor(\r\n                poolAnchor,\r\n                tokenToSend,\r\n                valueToSend\r\n            );\r\n        } else {\r\n            /*\r\n            uint256 reserveTokensBought = _fillQuote(\r\n                tokenToSend,\r\n                _toReserveTokenAddress,\r\n                valueToSend,\r\n                _allowanceTarget,\r\n                _swapTarget,\r\n                swapData\r\n            );\r\n            */\r\n\r\n            uint256 reserveTokensBought= conductUniswap(tokenToSend, _toReserveTokenAddress, valueToSend);\r\n\r\n            if(fee>0 && _toReserveTokenAddress != address(0x0)  && _toReserveTokenAddress != ETHAddress){\r\n              IERC20 resToken =  IERC20(_toReserveTokenAddress);\r\n            uint256 totalFee = (reserveTokensBought.mul(fee)).div(10000);\r\n            if(totalFee >0){\r\n               resToken.transfer(_owner, totalFee);\r\n            }\r\n            reserveTokensBought = resToken.balanceOf(address(this));\r\n\r\n            }\r\n\r\n\r\n            (lptReceived, id) = _enterBancor(\r\n                poolAnchor,\r\n                _toReserveTokenAddress,\r\n                reserveTokensBought\r\n            );\r\n        }\r\n        emit Zapin(msg.sender, poolAnchor, lptReceived, id);\r\n    }\r\n\r\n    function _enterBancor(\r\n        address _poolAnchor,\r\n        address _reserveToken,\r\n        uint256 _amount\r\n    ) internal returns (uint256 lptReceived, uint256 id) {\r\n        uint256 valueToSend;\r\n        address reserveToken = _reserveToken;\r\n        address bancorLiquidityProtectionAddress = bancorRegistry.addressOf(\r\n            liquidityProtectionName\r\n        );\r\n\r\n        if (_reserveToken != address(0)) {\r\n            IERC20 toReserveToken = IERC20(_reserveToken);\r\n            toReserveToken.safeApprove(bancorLiquidityProtectionAddress, 0);\r\n            toReserveToken.safeApprove(\r\n                bancorLiquidityProtectionAddress,\r\n                _amount\r\n            );\r\n        } else {\r\n            valueToSend = _amount;\r\n            reserveToken = ETHAddress;\r\n        }\r\n\r\n\r\n            IBancorLiquidityProtection bancorLiquidityProtection\r\n         = IBancorLiquidityProtection(bancorLiquidityProtectionAddress);\r\n\r\n        id = bancorLiquidityProtection.addLiquidityFor{value:valueToSend}(\r\n            msg.sender,\r\n            _poolAnchor,\r\n            reserveToken,\r\n            _amount\r\n        );\r\n\r\n\r\n            IBancorLiquidityProtectionStore liquidityProtectionStore\r\n         = IBancorLiquidityProtectionStore(\r\n            bancorRegistry.addressOf(liquidityProtectionStoreName)\r\n        );\r\n\r\n        (, , , lptReceived, , , , ) = liquidityProtectionStore\r\n            .protectedLiquidity(id);\r\n    }\r\n\r\n    function _fillQuote(\r\n        address _fromTokenAddress,\r\n        address _toReserveTokenAddress,\r\n        uint256 _amount,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes memory swapData\r\n    ) internal returns (uint256) {\r\n        uint256 valueToSend;\r\n        if (_fromTokenAddress == address(0)) {\r\n            valueToSend = _amount;\r\n        } else {\r\n            IERC20 fromToken = IERC20(_fromTokenAddress);\r\n            fromToken.safeApprove(address(_allowanceTarget), 0);\r\n            fromToken.safeApprove(address(_allowanceTarget), _amount);\r\n        }\r\n\r\n        uint256 initialBalance = _toReserveTokenAddress == address(0)\r\n            ? address(this).balance\r\n            : IERC20(_toReserveTokenAddress).balanceOf(address(this));\r\n\r\n        (bool success, ) = _swapTarget.call{value:valueToSend}(swapData);\r\n        require(success, \"Error Swapping Tokens\");\r\n\r\n        uint256 finalBalance = _toReserveTokenAddress == address(0)\r\n            ? (address(this).balance).sub(initialBalance)\r\n            : IERC20(_toReserveTokenAddress).balanceOf(address(this)).sub(\r\n                initialBalance\r\n            );\r\n\r\n        require(finalBalance > 0, \"Swapped to Invalid Intermediate\");\r\n\r\n        return finalBalance;\r\n    }\r\n\r\n    /**\r\n    @dev This function is used to calculate and transfer goodwill\r\n    @param _tokenContractAddress Token from which goodwill is deducted\r\n    @param valueToSend The total value being zapped in\r\n    @return The quantity of remaining tokens\r\n     */\r\n    function _transferGoodwill(\r\n        address _tokenContractAddress,\r\n        uint256 valueToSend\r\n    ) internal returns (uint256) {\r\n        if (goodwill == 0) return valueToSend;\r\n\r\n        uint256 goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(valueToSend, goodwill),\r\n            10000\r\n        );\r\n        if (_tokenContractAddress == address(0)) {\r\n            zgoodwillAddress.transfer(goodwillPortion);\r\n        } else {\r\n            IERC20(_tokenContractAddress).safeTransfer(\r\n                zgoodwillAddress,\r\n                goodwillPortion\r\n            );\r\n        }\r\n        return valueToSend.sub(goodwillPortion);\r\n    }\r\n\r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(address _tokenAddress) public onlyOwner {\r\n        IERC20 tokenAddress = IERC20(_tokenAddress);\r\n        uint256 qty = tokenAddress.balanceOf(address(this));\r\n        tokenAddress.safeTransfer(owner(), qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n\r\n\r\n  function conductUniswap(address sellToken, address buyToken, uint amount) internal returns (uint256 amounts1){\r\n\r\n            if(sellToken ==ETH_TOKEN_ADDRESS && buyToken == WETH_TOKEN_ADDRESS){\r\n                wethToken.deposit{value:msg.value}();\r\n\r\n            }\r\n            else if(sellToken == address(0x0) || sellToken == ETHAddress){\r\n\r\n               // address [] memory addresses = new address[](2);\r\n               address [] memory addresses = getBestPath(WETH_TOKEN_ADDRESS, buyToken, amount);\r\n                //addresses[0] = WETH_TOKEN_ADDRESS;\r\n                //addresses[1] = buyToken;\r\n                uniswapExchange.swapExactETHForTokens{value:msg.value}(0, addresses, address(this), 1000000000000000 );\r\n\r\n            }\r\n\r\n            else if(sellToken == WETH_TOKEN_ADDRESS){\r\n                wethToken.withdraw(amount);\r\n\r\n                //address [] memory addresses = new address[](2);\r\n                address [] memory addresses = getBestPath(WETH_TOKEN_ADDRESS, buyToken, amount);\r\n                //addresses[0] = WETH_TOKEN_ADDRESS;\r\n                //addresses[1] = buyToken;\r\n                uniswapExchange.swapExactETHForTokens{value:amount}(0, addresses, address(this), 1000000000000000 );\r\n\r\n            }\r\n\r\n\r\n\r\n            else{\r\n\r\n          address [] memory addresses = getBestPath(sellToken, buyToken, amount);\r\n           uint256 [] memory amounts = conductUniswapT4T(addresses, amount );\r\n           uint256 resultingTokens = amounts[amounts.length-1];\r\n           return resultingTokens;\r\n            }\r\n    }\r\n\r\n\r\n    //gets the best path to route the transaction on Uniswap\r\n    function getBestPath(address sellToken, address buyToken, uint256 amount) public view returns (address[] memory){\r\n\r\n        address [] memory defaultPath =new address[](2);\r\n        defaultPath[0]=sellToken;\r\n        defaultPath[1] = buyToken;\r\n\r\n\r\n        if(presetPaths[sellToken][buyToken].length !=0){\r\n            return presetPaths[sellToken][buyToken];\r\n        }\r\n\r\n\r\n        if(sellToken == stablecoins[\"DAI\"] || sellToken == stablecoins[\"USDC\"] || sellToken == stablecoins[\"USDT\"]){\r\n            return defaultPath;\r\n        }\r\n        if(buyToken == stablecoins[\"DAI\"] || buyToken == stablecoins[\"USDC\"] || buyToken == stablecoins[\"USDT\"]){\r\n            return defaultPath;\r\n        }\r\n\r\n\r\n\r\n        address[] memory daiPath = new address[](3);\r\n        address[] memory usdcPath =new address[](3);\r\n        address[] memory usdtPath =new address[](3);\r\n\r\n        daiPath[0] = sellToken;\r\n        daiPath[1] = stablecoins[\"DAI\"];\r\n        daiPath[2] = buyToken;\r\n\r\n        usdcPath[0] = sellToken;\r\n        usdcPath[1] = stablecoins[\"USDC\"];\r\n        usdcPath[2] = buyToken;\r\n\r\n        usdtPath[0] = sellToken;\r\n        usdtPath[1] = stablecoins[\"USDT\"];\r\n        usdtPath[2] = buyToken;\r\n\r\n\r\n        uint256 directPathOutput =  getPriceFromUniswap(defaultPath, amount)[1];\r\n\r\n\r\n        uint256[] memory daiPathOutputRaw = getPriceFromUniswap(daiPath, amount);\r\n        uint256[]  memory usdtPathOutputRaw = getPriceFromUniswap(usdtPath, amount);\r\n        uint256[]  memory usdcPathOutputRaw = getPriceFromUniswap(usdcPath, amount);\r\n\r\n        //uint256 directPathOutput = directPathOutputRaw[directPathOutputRaw.length-1];\r\n        uint256 daiPathOutput = daiPathOutputRaw[daiPathOutputRaw.length-1];\r\n        uint256 usdtPathOutput = usdtPathOutputRaw[usdtPathOutputRaw.length-1];\r\n        uint256 usdcPathOutput = usdcPathOutputRaw[usdcPathOutputRaw.length-1];\r\n\r\n        uint256 bestPathOutput = directPathOutput;\r\n        address[] memory bestPath = new address[](2);\r\n        address[] memory bestPath3 = new address[](3);\r\n        //return defaultPath;\r\n        bestPath = defaultPath;\r\n\r\n        bool isTwoPath = true;\r\n\r\n        if(directPathOutput < daiPathOutput){\r\n            isTwoPath=false;\r\n            bestPathOutput = daiPathOutput;\r\n            bestPath3 = daiPath;\r\n        }\r\n        if(bestPathOutput < usdcPathOutput){\r\n            isTwoPath=false;\r\n            bestPathOutput = usdcPathOutput;\r\n            bestPath3 = usdcPath;\r\n        }\r\n         if(bestPathOutput < usdtPathOutput){\r\n             isTwoPath=false;\r\n            bestPathOutput = usdtPathOutput;\r\n            bestPath3 = usdtPath;\r\n        }\r\n\r\n        require(bestPathOutput >0, \"This trade will result in getting zero tokens back. Reverting\");\r\n\r\n        if(isTwoPath==true){\r\n              return bestPath;\r\n        }\r\n        else{\r\n            return bestPath3;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function getPriceFromUniswap(address  [] memory theAddresses, uint amount) public view returns (uint256[] memory amounts1){\r\n\r\n\r\n        try uniswapExchange.getAmountsOut(amount,theAddresses ) returns (uint256[] memory amounts){\r\n            return amounts;\r\n        }\r\n        catch  {\r\n            uint256 [] memory amounts2= new uint256[](2);\r\n            amounts2[0]=0;\r\n            amounts2[1]=0;\r\n            return amounts2;\r\n\r\n        }\r\n\r\n    }\r\n     function conductUniswapT4T(address  [] memory theAddresses, uint amount) internal returns (uint256[] memory amounts1){\r\n\r\n           uint256 deadline = 1000000000000000;\r\n           uint256 [] memory amounts =  uniswapExchange.swapExactTokensForTokens(amount, 0, theAddresses, address(this),deadline );\r\n           return amounts;\r\n\r\n    }\r\n\r\n     function updateOwnerAddress(address payable newOwner) onlyOwner public returns (bool){\r\n     _owner = newOwner;\r\n     return true;\r\n   }\r\n\r\n   function updateUniswapExchange(address newAddress ) public onlyOwner returns (bool){\r\n\r\n    uniswapExchange = UniswapV2( newAddress);\r\n    uniAddress = newAddress;\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n  function updateBancorConverter(address newAddress ) public onlyOwner returns (bool){\r\n\r\n    bancorConverterRegistryAddress =newAddress;\r\n    bConv = BANGetter(newAddress);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n function adminEmergencyWithdrawTokens(address token, uint amount, address payable destination) public onlyOwner returns(bool) {\r\n\r\n      if (address(token) == ETH_TOKEN_ADDRESS) {\r\n          destination.transfer(amount);\r\n      }\r\n      else {\r\n          IERC20 tokenToken = IERC20(token);\r\n          require(tokenToken.transfer(destination, amount));\r\n      }\r\n      return true;\r\n  }\r\n\r\n\r\n  function setFee(uint256 newFee) public onlyOwner returns (bool){\r\n    require(newFee<=maxfee, \"Admin cannot set the fee higher than the current maxfee\");\r\n    fee = newFee;\r\n    return true;\r\n  }\r\n\r\n\r\n  function setMaxFee(uint256 newMax) public onlyOwner returns (bool){\r\n    require(maxfee==0, \"Admin can only set max fee once and it is perm\");\r\n    maxfee = newMax;\r\n    return true;\r\n  }\r\n\r\n  function updateUniswapFactory(address newAddress ) public onlyOwner returns (bool){\r\n\r\n   factory = UniswapFactory( newAddress);\r\n   uniFactoryAddress = newAddress;\r\n   return true;\r\n\r\n }\r\n\r\n function updateStableCoinAddress(string memory coinName, address newAddress) public onlyOwner returns(bool){\r\n        stablecoins[coinName] = newAddress;\r\n        return true;\r\n\r\n    }\r\n\r\n  function updatePresetPaths(address sellToken, address buyToken, address[] memory newPath ) public onlyOwner returns(bool){\r\n        presetPaths[sellToken][buyToken] = newPath;\r\n        return true;\r\n    }\r\n\r\n    //owner can turn on ability to collect a small fee from trade imbalances on LP conversions\r\n    function updateChangeRecipientBool(bool changeRecpientIsOwnerBool ) public onlyOwner returns(bool){\r\n        changeRecpientIsOwner = changeRecpientIsOwnerBool;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toPoolAnchor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPTRec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Zapin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toBanConverterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toReserveTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"ZapInSingleSided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lptReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"adminEmergencyWithdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bancorRegistry\",\"outputs\":[{\"internalType\":\"contract IBancorContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRecpientIsOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBestPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromUniswap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts1\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokenAddressToPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presetPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"spaceAvailable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBancorConverter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"changeRecpientIsOwnerBool\",\"type\":\"bool\"}],\"name\":\"updateChangeRecipientBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwnerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"updatePresetPaths\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateStableCoinAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"destinationTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BancorPlexusWrapper","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f781c644acbad5b99dfebf5d2084f1234e32a2c018dad97e5186f1a99062590"}]}