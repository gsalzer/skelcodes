{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  uint8 public _Tokendecimals;\r\n  string public _Tokenname;\r\n  string public _Tokensymbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n   \r\n    _Tokendecimals = decimals;\r\n    _Tokenname = name;\r\n    _Tokensymbol = symbol;\r\n    \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _Tokenname;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _Tokensymbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _Tokendecimals;\r\n  }\r\n}\r\n\r\ncontract BitGold is ERC20Detailed {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public BASE_PRICE = 20000000000000000;\r\n    uint256 constant public FINAL_PRICE = 20000000000000000;\r\n    uint256 constant public HARDCAP = 80 ether;\r\n\r\n    uint256 public fStage;\r\n    uint256 public end;\r\n    uint256 public totalUsers;\r\n    uint256 public totalDeposit;\r\n    bool public ended;\r\n    bool public reached;\r\n    address[] public shareholders;\r\n\r\n    address payable public _owner = 0xF2bD6A873aD2248bBe10F2a3DAF6519951864fe8;\r\n\r\n    mapping (address => uint256) public _BITGOLDTokenBalances;\r\n    mapping (address => mapping (address => uint256)) public _allowed;\r\n    string constant tokenName = \"BitGold\";\r\n    string constant tokenSymbol = \"BITG\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply;\r\n\r\n    struct User {\r\n        bool isClaimed;\r\n        uint256 claimed;\r\n        uint256 deposited_amount;\r\n        uint256 token_amount;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Claimed(address indexed user, uint256 amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n\r\n    constructor () public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals){\r\n        fStage = now + 10 days;\r\n        end = now + 15 days;\r\n\r\n        ended = false;\r\n        reached = false;\r\n        _totalSupply = 0;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    function isEnded() public view returns(bool) {\r\n        return (now >= end || totalDeposit >= HARDCAP) ? true: false;\r\n    }\r\n\r\n    function buy(address referrer) external payable {\r\n        require(!isEnded(), \"ICO Already Ended\");\r\n        purchaseTokens(msg.sender, msg.value, referrer);\r\n    }\r\n\r\n    \r\n    function purchaseTokens(address _sender, uint256 _incoming, address referrer) internal {\r\n        uint256 _tokens = calcTokenAmount(_incoming);\r\n        User storage user = users[_sender];\r\n\r\n        if (user.referrer == address(0) && users[referrer].deposited_amount > 0 && referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n\r\n            address upline = user.referrer;\r\n            \r\n\t\t\tif (upline != address(0)) {\r\n\t\t\t\tuint256 _amount = _tokens.mul(5).div(100);\r\n\t\t\t\tusers[upline].bonus = users[upline].bonus.add(_amount);\r\n                _totalSupply = _totalSupply.add(_amount);\r\n\t\t\t\temit RefBonus(upline, msg.sender, _amount);\r\n\t\t\t}\r\n        }\r\n\r\n        if(user.deposited_amount > 0) {\r\n            user.deposited_amount = user.deposited_amount.add(_incoming);\r\n            user.token_amount = user.token_amount.add(_tokens);\r\n        } else {\r\n            user.deposited_amount = _incoming;\r\n            user.token_amount = _tokens;\r\n            totalUsers = totalUsers.add(1);\r\n            shareholders.push(_sender);\r\n\r\n            emit Newbie(_sender);\r\n        }\r\n\r\n        totalDeposit = totalDeposit.add(_incoming);\r\n        _totalSupply = _totalSupply.add(_tokens);\r\n\r\n        emit NewDeposit(_sender, _incoming);\r\n        emit Transfer(address(0), address(this), _tokens);\r\n    }\r\n\r\n    function claim() external {\r\n        require(isEnded(), \"ICO is still being holding\");\r\n        User storage user = users[msg.sender];\r\n        require(user.token_amount > 0, \"Invalid User\");\r\n        require(!user.isClaimed, \"Already claimed\");\r\n\r\n        uint256 totalAmount;\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            totalAmount = user.token_amount.add(referralBonus);\r\n            user.bonus = 0;\r\n        }\r\n\r\n        _BITGOLDTokenBalances[msg.sender] = totalAmount;\r\n\r\n        user.isClaimed = true;\r\n        user.claimed = now;\r\n\r\n        emit Claimed(msg.sender, totalAmount);\r\n        emit Transfer(address(this), msg.sender, totalAmount);\r\n    }\r\n\r\n    function calcDepositAmount(uint256 _tokens) public view returns (uint256) {\r\n        uint256 ethAmount = 0;\r\n        if(now <= fStage) {\r\n            ethAmount = _tokens.mul(BASE_PRICE).mul(100).div(1 ether).div(110);\r\n        } else {\r\n            ethAmount = _tokens.mul(FINAL_PRICE).div(1 ether);\r\n        }\r\n        return ethAmount;\r\n    }\r\n\r\n    function calcTokenAmount(uint256 _incoming) public view returns (uint256) {\r\n        uint256 _tokens = 0;\r\n        if(now <= fStage) {\r\n            _tokens = _incoming.mul(1 ether).div(BASE_PRICE);\r\n            _tokens = _tokens.mul(110).div(100);\r\n        } else {\r\n            _tokens = _incoming.mul(1 ether).div(FINAL_PRICE);\r\n        }\r\n\r\n        return _tokens;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress) public view returns(address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns(uint256) {\r\n        (uint256 tokenBalance, bool isClaimed) = checkTokenBalance(userAddress);\r\n        return getUserReferralBonus(userAddress).add(tokenBalance);\r\n    }\r\n\r\n    function checkTokenBalance(address _sender) public view returns (uint256, bool) {\r\n        User storage user = users[_sender];\r\n\r\n        return (user.token_amount, user.isClaimed);\r\n    }\r\n\r\n    function withdraw_eth() external onlyOwner returns (bool) {\r\n        require(isEnded(), \"ICO is still being holding\");\r\n        require(address(this).balance > 0, \"Invalid Balance of Eth\");\r\n\r\n        (bool success, ) = _owner.call.value(address(this).balance)(\"\");\r\n        return success;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _BITGOLDTokenBalances[owner];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= _BITGOLDTokenBalances[msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _BITGOLDTokenBalances[msg.sender] = _BITGOLDTokenBalances[msg.sender].sub(value);\r\n        _BITGOLDTokenBalances[to] = _BITGOLDTokenBalances[to].add(value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _BITGOLDTokenBalances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _BITGOLDTokenBalances[from] = _BITGOLDTokenBalances[from].sub(value);\r\n\r\n        _BITGOLDTokenBalances[to] = _BITGOLDTokenBalances[to].add(value);\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"checkTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_Tokenname\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_Tokendecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_Tokensymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"calcDepositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_incoming\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isClaimed\",\"type\":\"bool\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"deposited_amount\",\"type\":\"uint256\"},{\"name\":\"token_amount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_BITGOLDTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINAL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BitGold","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d7598e0396c9079bf7207c3fefc662c54cd00824478edb51b9dc0f4e55e749db"}]}