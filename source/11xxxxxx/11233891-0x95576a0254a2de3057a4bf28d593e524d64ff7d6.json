{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface BerserkRewards {\r\n    function stakingPower(address account) external view returns (uint256);\r\n}\r\n\r\ncontract BerserkVote {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public constant MAX_VOTERS_PER_ITEM = 50;\r\n\r\n    uint16 public constant MIN_VOTING_VALUE = 50; // 50% (x0.5 times)\r\n    uint16 public constant MAX_VOTING_VALUE = 200; // 200% (x2 times)\r\n\r\n    mapping(address => mapping(uint256 => uint8)) public numVoters; // poolAddress -> votingItem (periodFinish) -> numVoters (the number of voters in this round)\r\n    mapping(address => mapping(uint256 => address[MAX_VOTERS_PER_ITEM])) public voters; // poolAddress -> votingItem (periodFinish) -> voters (array)\r\n    mapping(address => mapping(uint256 => mapping(address => bool))) public isInTopVoters; // poolAddress -> votingItem (periodFinish) -> isInTopVoters (map: voter -> in_top (true/false))\r\n    mapping(address => mapping(uint256 => mapping(address => uint16))) public voter2VotingValue; // poolAddress -> votingItem (periodFinish) -> voter2VotingValue (map: voter -> voting value)\r\n\r\n    event Voted(address poolAddress, address indexed user, uint256 votingItem, uint16 votingValue);\r\n\r\n    function getNumVotes( address poolAddressStake, uint256 valueAmount ) public view returns (uint256){\r\n        return numVoters[poolAddressStake][valueAmount];\r\n    }\r\n\r\n    function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {\r\n        // already voted\r\n        if (voter2VotingValue[poolAddress][votingItem][account] > 0) return false;\r\n\r\n        BerserkRewards rewards = BerserkRewards(poolAddress);\r\n        // hasn't any staking power\r\n        if (rewards.stakingPower(account) == 0) return false;\r\n\r\n        // number of voters is under limit still\r\n        if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) return true;\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function averageVotingValue(address poolAddress, uint256 votingItem) public view returns (uint16) {\r\n        if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes\r\n        uint256 totalStakingPower = 0;\r\n        uint256 totalWeightVotingValue = 0;\r\n        BerserkRewards rewards = BerserkRewards(poolAddress);\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            address voter = voters[poolAddress][votingItem][i];\r\n            totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));\r\n            totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));\r\n        }\r\n        return (uint16) (totalWeightVotingValue.div(totalStakingPower));\r\n    }\r\n\r\n    function vote(address poolAddress, uint256 votingItem, uint16 votingValue) public {\r\n        require(votingValue >= MIN_VOTING_VALUE, \"votingValue is smaller than MIN_VOTING_VALUE\");\r\n        require(votingValue <= MAX_VOTING_VALUE, \"votingValue is greater than MAX_VOTING_VALUE\");\r\n        if (!isInTopVoters[poolAddress][votingItem][msg.sender]) {\r\n            require(isVotable(poolAddress, msg.sender, votingItem), \"This account is not votable\");\r\n            uint8 voterIndex = MAX_VOTERS_PER_ITEM;\r\n            if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) {\r\n                voterIndex = numVoters[poolAddress][votingItem];\r\n            } else {\r\n                BerserkRewards rewards = BerserkRewards(poolAddress);\r\n                uint256 minStakingPower = rewards.stakingPower(msg.sender);\r\n                for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n                    if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {\r\n                        voterIndex = i;\r\n                        minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);\r\n                    }\r\n                }\r\n            }\r\n            if (voterIndex < MAX_VOTERS_PER_ITEM) {\r\n                if (voterIndex < numVoters[poolAddress][votingItem]) {\r\n                    isInTopVoters[poolAddress][votingItem][voters[poolAddress][votingItem][voterIndex]] = false; // remove lower power previous voter\r\n                } else {\r\n                    ++numVoters[poolAddress][votingItem];\r\n                }\r\n                isInTopVoters[poolAddress][votingItem][msg.sender] = true;\r\n                voters[poolAddress][votingItem][voterIndex] = msg.sender;\r\n            }\r\n        }\r\n        voter2VotingValue[poolAddress][votingItem][msg.sender] = votingValue;\r\n        emit Voted(poolAddress, msg.sender, votingItem, votingValue);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"votingValue\",\"type\":\"uint16\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTERS_PER_ITEM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_VALUE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_VOTING_VALUE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"averageVotingValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddressStake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueAmount\",\"type\":\"uint256\"}],\"name\":\"getNumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInTopVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"isVotable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVoters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"votingValue\",\"type\":\"uint16\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voter2VotingValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BerserkVote","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://38563728c6816ee93cced8abac6b21ac9c36e84f7ca1fe5b272239083b7b1289"}]}