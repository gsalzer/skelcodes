{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is Initializable, IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/ERC721Lending.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract Sablier {\n  function createSalary(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime) public returns(uint256);\n  function cancelSalary(uint256 salaryId) public returns (bool);\n}\n\ncontract ERC721Lending is Initializable {\n  address public acceptedPayTokenAddress;\n\n  struct ERC721ForLend {\n    uint256 durationHours;\n    uint256 initialWorth;\n    uint256 earningGoal;\n    uint256 borrowedAtTimestamp;\n    address lender;\n    address borrower;\n    bool lenderClaimedCollateral;\n    uint256 sablierSalaryId;\n  }\n\n  // V1 mapping\n  mapping(address => mapping(uint256 => ERC721ForLend)) public lentERC721List;\n\n  struct ERC721TokenEntry {\n    address lenderAddress;\n    address tokenAddress;\n    uint256 tokenId;\n  }\n\n  ERC721TokenEntry[] public lendersWithTokens;\n\n  event ERC721ForLendUpdated(address tokenAddress, uint256 tokenId);\n  event ERC721ForLendRemoved(address tokenAddress, uint256 tokenId);\n\n  address public sablierContractAddress;\n\n  // V2, token address -> token id -> owner (lender) address -> lending details\n  mapping(address => mapping(uint256 => mapping(address => ERC721ForLend))) public lendingPool;\n\n  // Note: version helper for migrations\n  uint256 migrateVersion;\n\n  event ERC721ForLendUpdatedV2(address lenderAddress, address tokenAddress, uint256 tokenId);\n  event ERC721ForLendRemovedV2(address lenderAddress, address tokenAddress, uint256 tokenId);\n\n  function initialize(address tokenAddress) public initializer {\n    acceptedPayTokenAddress = tokenAddress;\n  }\n\n  // V1 -> V2 single migration\n  function migrateERC721ListToLendingPool() public {\n    require(migrateVersion == 0, 'Migration: This version already migrated');\n\n    uint totalCount = lendersWithTokens.length;\n    if (totalCount > 1) {\n      for (uint i = 0; i<totalCount; i++) {\n        ERC721TokenEntry memory tokenEntry = lendersWithTokens[i];\n        ERC721ForLend memory existingEntry = lentERC721List[tokenEntry.tokenAddress][tokenEntry.tokenId];\n        lendingPool[tokenEntry.tokenAddress][tokenEntry.tokenId][existingEntry.lender] = ERC721ForLend(\n          existingEntry.durationHours,\n          existingEntry.initialWorth,\n          existingEntry.earningGoal,\n          existingEntry.borrowedAtTimestamp,\n          existingEntry.lender,\n          existingEntry.borrower,\n          existingEntry.lenderClaimedCollateral,\n          existingEntry.sablierSalaryId\n        );\n      }\n    }\n\n    migrateVersion = 1; // version up\n  }\n\n  function setSablierContractAddress(address contractAddress) public {\n    require(sablierContractAddress == address(0), 'Sablier contract address already set');\n    sablierContractAddress = contractAddress;\n  }\n\n  function setLendSettings(address tokenAddress, uint256 tokenId, uint256 durationHours, uint256 initialWorth, uint256 earningGoal) public {\n    require(initialWorth > 0, 'Lending: Initial token worth must be above 0');\n    require(earningGoal > 0, 'Lending: Earning goal must be above 0');\n    require(durationHours > 0, 'Lending: Lending duration must be above 0');\n    require(lentERC721List[tokenAddress][tokenId].borrower == address(0), 'Lending: Cannot change settings, token already lent');\n    require(lentERC721List[tokenAddress][tokenId].lenderClaimedCollateral == false, 'Lending: Collateral already claimed');\n\n    // assuming token transfer is approved\n    IERC721(tokenAddress).transferFrom(msg.sender, address(this), tokenId);\n\n    lentERC721List[tokenAddress][tokenId] = ERC721ForLend(durationHours, initialWorth, earningGoal, 0, msg.sender, address(0), false, 0);\n\n    lendersWithTokens.push(ERC721TokenEntry(msg.sender, tokenAddress, tokenId));\n\n    emit ERC721ForLendUpdated(tokenAddress, tokenId);\n  }\n\n  function startBorrowing(address tokenAddress, uint256 tokenId) public {\n    require(lentERC721List[tokenAddress][tokenId].borrower == address(0), 'Borrowing: Already lent');\n    require(lentERC721List[tokenAddress][tokenId].earningGoal > 0, 'Borrowing: Lender did not set earning goal yet');\n    require(lentERC721List[tokenAddress][tokenId].initialWorth > 0, 'Borrowing: Lender did not set initial worth yet');\n\n    IERC20 _payToken = IERC20(acceptedPayTokenAddress);\n    uint256 _requiredSum = calculateLendSum(tokenAddress, tokenId);\n    uint256 _allowedCollateral = _payToken.allowance(msg.sender, address(this));\n    require(_allowedCollateral >= _requiredSum, 'Borrowing: Not enough collateral received');\n\n    IERC20(acceptedPayTokenAddress).transferFrom(msg.sender, address(this), _requiredSum);\n\n    // check if needs approval as some tokens fail due this\n    (bool success,) = tokenAddress.call(abi.encodeWithSignature(\n      \"approve(address,uint256)\",\n      address(this),\n      tokenId\n    ));\n    if (success) {\n      IERC721(tokenAddress).approve(address(this), tokenId);\n    }\n    IERC721(tokenAddress).transferFrom(address(this), msg.sender, tokenId);\n\n    lentERC721List[tokenAddress][tokenId].borrower = msg.sender;\n    lentERC721List[tokenAddress][tokenId].borrowedAtTimestamp = now;\n\n    address lenderAddress = lentERC721List[tokenAddress][tokenId].lender;\n\n    // check if sablier address set and setup salary\n    if (sablierContractAddress != address(0)) {\n      uint256 _salaryStartTime = now + 60;\n      uint256 _salaryStopTime = _salaryStartTime + (lentERC721List[tokenAddress][tokenId].durationHours * 3600);\n      uint256 _actualSalaryAmount = lentERC721List[tokenAddress][tokenId].earningGoal;\n\n      // per Sablier docs – deposit amount must be divided by the time delta\n      // and then the remainder subtracted from the initial deposit number\n      uint256 _timeDelta = _salaryStopTime - _salaryStartTime;\n      uint256 _salaryAmount = _actualSalaryAmount - (_actualSalaryAmount % _timeDelta);\n\n      _payToken.approve(sablierContractAddress, _salaryAmount);\n\n      // the salary id is needed later to withdraw from or cancel the salary\n      uint256 _sablierSalaryId = Sablier(sablierContractAddress).createSalary(lenderAddress, _salaryAmount, acceptedPayTokenAddress, _salaryStartTime, _salaryStopTime);\n      lentERC721List[tokenAddress][tokenId].sablierSalaryId = _sablierSalaryId;\n    }\n\n    emit ERC721ForLendUpdated(tokenAddress, tokenId);\n  }\n\n  function stopBorrowing(address tokenAddress, uint256 tokenId) public {\n    address _borrower = lentERC721List[tokenAddress][tokenId].borrower;\n    require(_borrower == msg.sender, 'Borrowing: Can be stopped only by active borrower');\n\n    if (lentERC721List[tokenAddress][tokenId].lenderClaimedCollateral == false) {\n      // assuming token transfer is approved\n      IERC721(tokenAddress).transferFrom(msg.sender, address(this), tokenId);\n\n      uint256 _initialWorth = lentERC721List[tokenAddress][tokenId].initialWorth;\n\n      IERC20(acceptedPayTokenAddress).transfer(_borrower, _initialWorth);\n\n      lentERC721List[tokenAddress][tokenId].borrower = address(0);\n      lentERC721List[tokenAddress][tokenId].borrowedAtTimestamp = 0;\n\n      address lenderAddress = lentERC721List[tokenAddress][tokenId].lender;\n\n      uint256 _sablierSalaryId = lentERC721List[tokenAddress][tokenId].sablierSalaryId;\n      if (_sablierSalaryId != 0) {\n        // cancel salary to lender if sablier salary exists\n        Sablier(sablierContractAddress).cancelSalary(_sablierSalaryId);\n        lentERC721List[tokenAddress][tokenId].sablierSalaryId = 0;\n      } else {\n        // send lender his interest\n        uint256 _earningGoal = lentERC721List[tokenAddress][tokenId].earningGoal;\n        IERC20(acceptedPayTokenAddress).transfer(lenderAddress, _earningGoal);\n      }\n    } else {\n      // lender claimed collateral, this is borrower's last call, let's reset everything\n      lentERC721List[tokenAddress][tokenId] = ERC721ForLend(0, 0, 0, 0, address(0), address(0), false, 0); // reset details\n    }\n\n    emit ERC721ForLendUpdated(tokenAddress, tokenId);\n  }\n\n  function calculateLendSum(address tokenAddress, uint256 tokenId) public view returns(uint256) {\n    uint256 _earningGoal = lentERC721List[tokenAddress][tokenId].earningGoal;\n    uint256 _initialWorth = lentERC721List[tokenAddress][tokenId].initialWorth;\n    return _initialWorth + _earningGoal;\n  }\n\n  function isDurationExpired(uint256 borrowedAtTimestamp, uint256 durationHours) public view returns(bool) {\n    uint256 secondsPassed = now - borrowedAtTimestamp;\n    uint256 hoursPassed = secondsPassed * 60 * 60;\n    return hoursPassed > durationHours;\n  }\n\n  function removeFromLendersWithTokens(address tokenAddress, uint256 tokenId) internal {\n    // reset lenders to sent token mapping, swap with last element to fill the gap\n    uint totalCount = lendersWithTokens.length;\n    if (totalCount > 1) {\n      for (uint i = 0; i<totalCount; i++) {\n        ERC721TokenEntry memory tokenEntry = lendersWithTokens[i];\n        if (tokenEntry.lenderAddress == msg.sender && tokenEntry.tokenAddress == tokenAddress && tokenEntry.tokenId == tokenId) {\n          lendersWithTokens[i] = lendersWithTokens[totalCount-1]; // insert last from array\n        }\n      }\n      lendersWithTokens.length--;\n    } else {\n      delete lendersWithTokens[0];\n    }\n  }\n\n  function removeFromLending(address tokenAddress, uint256 tokenId) public {\n    require(lentERC721List[tokenAddress][tokenId].lender == msg.sender, 'Claim: Cannot claim not owned lend');\n\n    require(lentERC721List[tokenAddress][tokenId].borrower == address(0), 'Lending: Cannot cancel if lent');\n    require(lentERC721List[tokenAddress][tokenId].lenderClaimedCollateral == false, 'Lending: Collateral claimed');\n\n    // check if needs approval as some tokens fail due this\n    (bool success,) = tokenAddress.call(abi.encodeWithSignature(\n        \"approve(address,uint256)\",\n        address(this),\n        tokenId\n      ));\n    if (success) {\n      IERC721(tokenAddress).approve(address(this), tokenId);\n    }\n    IERC721(tokenAddress).transferFrom(address(this), msg.sender, tokenId);\n\n    lentERC721List[tokenAddress][tokenId] = ERC721ForLend(0, 0, 0, 0, address(0), address(0), false, 0); // reset details\n\n    // reset lenders to sent token mapping, swap with last element to fill the gap\n    removeFromLendersWithTokens(tokenAddress, tokenId);\n\n    emit ERC721ForLendRemoved(tokenAddress, tokenId);\n  }\n\n  function claimBorrowerCollateral(address tokenAddress, uint256 tokenId) public {\n    require(lentERC721List[tokenAddress][tokenId].borrower != address(0), 'Claim: Cannot claim if stopped');\n    require(lentERC721List[tokenAddress][tokenId].lender == msg.sender, 'Claim: Cannot claim not owned lend');\n\n    uint256 _borrowedAtTimestamp = lentERC721List[tokenAddress][tokenId].borrowedAtTimestamp;\n    uint256 _durationHours = lentERC721List[tokenAddress][tokenId].durationHours;\n    require(isDurationExpired(_borrowedAtTimestamp, _durationHours), 'Claim: Cannot claim before lending expired');\n\n    require(lentERC721List[tokenAddress][tokenId].lenderClaimedCollateral == false, 'Claim: Already claimed');\n\n    lentERC721List[tokenAddress][tokenId].lenderClaimedCollateral = true;\n\n    uint256 _sablierSalaryId = lentERC721List[tokenAddress][tokenId].sablierSalaryId;\n    if (_sablierSalaryId != 0) {\n      // if salary exists cancel salary and send only initial worth collateral amount\n      IERC20(acceptedPayTokenAddress).transfer(msg.sender, lentERC721List[tokenAddress][tokenId].initialWorth);\n      Sablier(sablierContractAddress).cancelSalary(_sablierSalaryId);\n      lentERC721List[tokenAddress][tokenId].sablierSalaryId = 0;\n    } else {\n      // send interest and collateral sum amount\n      uint256 _collateralSum = calculateLendSum(tokenAddress, tokenId);\n      IERC20(acceptedPayTokenAddress).transfer(msg.sender, _collateralSum);\n    }\n\n    // reset lenders to sent token mapping, swap with last element to fill the gap\n    removeFromLendersWithTokens(tokenAddress, tokenId);\n\n    emit ERC721ForLendUpdated(tokenAddress, tokenId);\n  }\n\n  function isValidNFT(address tokenAddress, uint256 tokenId) public view returns(bool) {\n    // no owner is most likely burnt NFT\n    return IERC721(tokenAddress).ownerOf(tokenId) != address(0);\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ForLendRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ForLendRemovedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ForLendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ForLendUpdatedV2\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedPayTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateLendSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBorrowerCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAtTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"}],\"name\":\"isDurationExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValidNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendersWithTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialWorth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAtTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lenderClaimedCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sablierSalaryId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lentERC721List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialWorth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAtTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lenderClaimedCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sablierSalaryId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateERC721ListToLendingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeFromLending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sablierContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialWorth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningGoal\",\"type\":\"uint256\"}],\"name\":\"setLendSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setSablierContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startBorrowing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stopBorrowing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721Lending","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}