{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a); \r\n    return a - b; \r\n  } \r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a + b; assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Btspal {\r\n   using SafeMath for uint;\r\n   \r\n    // public information about the contribution of a specific investor\r\n    mapping (address => uint) public investor_balance;\r\n    // public information last payment time\r\n    mapping (address => uint) public investor_payout_time;\r\n    // public information how much the user received money\r\n    mapping(address => uint) public investor_payout;\r\n    // public information how much the user received bonus\r\n    mapping(address => bool) public investor_bonus;\r\n    // public information how much the user received bonus\r\n    mapping(address => uint) public investor_ETH_bonus;\r\n    \r\n    // all deposits below the minimum will be sent directly to the developer's wallet and will\r\n    // be used for the development of the project\r\n    uint constant  MINIMAL_DEPOSIT = 0.01 ether;\r\n    //bonus 10% for a deposit above 10 ETH\r\n    uint constant  LOYALTY_BONUS = 10;\r\n    //bonus 2,5 % for a deposit above 10 ETH\r\n    uint constant  PUBLIC_BONUS = 25;\r\n    // Time after which you can request the next payment\r\n    uint constant  PAYOUT_TIME = 1 hours;\r\n    // 0.1% per hour, 2.4 % per day\r\n    uint constant  HOURLY_PERCENT = 1000;\r\n    //commission 7%\r\n    uint constant PROJECT_COMMISSION = 7;\r\n    //commission 3%\r\n    uint constant CHARITY_COMMISSION = 3;\r\n    // developer wallet for advertising and server payments\r\n    address payable constant DEVELOPER_WALLET  = 0xA4B37b7cBdA57cF0c8a12EAe77ce51Eb9d067a7C;\r\n    // Charity Found wallet\r\n    address payable constant CHARITY_FOUND = 0x1C888e48336778CC279a59f4b7588aa788588265;\r\n    // The wallet from which the contract will be replenished after the exchange of bitcoin on the exchange\r\n    address payable constant FOUND = 0x5FCa4a6a4A1A6A2e7435bf8b3E83595bf96e582A;\r\n    \r\n    event NewInvestor(address indexed investor, uint value, uint time);\r\n    event PayDividends(address indexed investor, uint value, uint time);\r\n    event NewDeposit(address indexed investor, uint value,uint time);\r\n    event BonusCrediting(address indexed investor, uint value, uint time);\r\n    event Refund(address indexed investor, uint value, uint time);\r\n    event Reinvest(address indexed investor, uint value, uint time);\r\n    \r\n\r\n    uint public total_deposits;\r\n    uint public number_contributors;\r\n    uint public last_payout;\r\n    uint public total_payout;\r\n    uint public total_bonus;\r\n    \r\n    /**\r\n     * The modifier checking the positive balance of the beneficiary\r\n    */\r\n    modifier checkInvestor(){\r\n        require(investor_balance[msg.sender] > 0,  \"Deposit not found\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * modifier checking the next payout time\r\n     */\r\n    modifier checkPaymentTime(){\r\n         require(block.timestamp >= investor_payout_time[msg.sender].add(PAYOUT_TIME), \"You can request payments at least 1 time per hour\");\r\n         _;\r\n    }\r\n    \r\n    function get_credit()public view  returns(uint){\r\n        uint hourly_rate = (investor_balance[msg.sender].add(investor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);\r\n        uint debt = block.timestamp.sub(investor_payout_time[msg.sender]).div(PAYOUT_TIME);\r\n        return(debt.mul(hourly_rate));\r\n    }\r\n    \r\n    // Take the remainder of the deposit and exit the project\r\n    function refund() checkInvestor public payable {\r\n        uint balance = investor_balance[msg.sender];\r\n        uint payout_left = balance.sub(investor_payout[msg.sender]);\r\n        uint amount;\r\n        uint system_comission;\r\n        uint charity_payment;\r\n        if(investor_bonus[msg.sender] || investor_payout[msg.sender] > 0){\r\n            system_comission = payout_left.mul(PROJECT_COMMISSION).div(100);\r\n            charity_payment = payout_left.mul(CHARITY_COMMISSION).div(100);\r\n            amount = balance-system_comission-charity_payment;\r\n            msg.sender.transfer(amount);\r\n            CHARITY_FOUND.transfer(charity_payment);\r\n        }else{\r\n            amount = payout_left;\r\n            msg.sender.transfer(amount);\r\n        }\r\n        investor_balance[msg.sender] = 0;\r\n        investor_payout_time[msg.sender] = 0;\r\n        investor_payout[msg.sender] = 0;\r\n        investor_bonus[msg.sender] = false;\r\n        investor_ETH_bonus[msg.sender] = 0;\r\n        \r\n        emit Refund(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    \r\n    // Reinvest the dividends into the project\r\n    function reinvest()public checkInvestor payable{\r\n        require(investor_bonus[msg.sender], 'Get bonus to reinvest');\r\n        uint credit = get_credit();\r\n        \r\n        if (credit > 0){\r\n            uint bonus = credit.mul(PUBLIC_BONUS).div(1000);\r\n            investor_payout_time[msg.sender] = block.timestamp;\r\n            investor_balance[msg.sender] += credit;\r\n            investor_ETH_bonus[msg.sender] += bonus;\r\n            total_bonus += bonus;\r\n            emit Reinvest(msg.sender, credit, block.timestamp);\r\n            emit BonusCrediting(msg.sender, bonus, block.timestamp);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // Get payment of dividends\r\n    function receivePayment()checkPaymentTime public payable{\r\n        uint credit = get_credit();\r\n        investor_payout_time[msg.sender] = block.timestamp;\r\n        investor_payout[msg.sender] += credit;\r\n        // 1 percent held on hedging\r\n        msg.sender.transfer(credit.sub(credit.div(100)));\r\n        total_payout += credit;\r\n        last_payout = block.timestamp;\r\n        emit PayDividends(msg.sender, credit, block.timestamp);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * The method of accepting payments, if a zero payment has come, then we start the procedure for refunding\r\n     * the interest on the deposit, if the payment is not empty, we record the number of broadcasts on the contract\r\n     * and the payment time\r\n     */\r\n    function makeInvest() private{\r\n            \r\n        if (investor_balance[msg.sender] == 0){\r\n            emit NewInvestor(msg.sender, msg.value, block.timestamp);\r\n            number_contributors+=1;\r\n        }\r\n        \r\n        // transfer developer commission\r\n        DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));\r\n        \r\n        if(block.timestamp >= investor_payout_time[msg.sender].add(PAYOUT_TIME) && investor_balance[msg.sender] != 0){\r\n            receivePayment();\r\n        }\r\n        \r\n        investor_balance[msg.sender] += msg.value;\r\n        investor_payout_time[msg.sender] = block.timestamp;\r\n        \r\n        if (msg.value >= 10 ether){\r\n            uint bonus = msg.value.mul(LOYALTY_BONUS).div(100);\r\n            investor_ETH_bonus[msg.sender] += bonus;\r\n            total_bonus += bonus;\r\n            emit BonusCrediting(msg.sender, bonus, block.timestamp);\r\n        }\r\n        \r\n        total_deposits += msg.value;\r\n        emit NewDeposit(msg.sender, msg.value, block.timestamp);\r\n    }\r\n    \r\n    // Get bonus for contribution\r\n    function getBonus()checkInvestor external payable{\r\n        uint balance = investor_balance[msg.sender];\r\n        if (!investor_bonus[msg.sender]){\r\n            investor_bonus[msg.sender] = true;\r\n            uint bonus = balance.mul(PUBLIC_BONUS).div(1000);\r\n            investor_ETH_bonus[msg.sender] += bonus;\r\n            total_bonus += bonus;\r\n            emit BonusCrediting(msg.sender, bonus, block.timestamp);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // Get information on the contributor\r\n    function getInvestor() public view returns(uint balance, uint payout, uint payout_time, bool bonus, uint ETH_bonus, uint payout_balance) {\r\n        balance = investor_balance[msg.sender];\r\n        payout = investor_payout[msg.sender];\r\n        payout_time = investor_payout_time[msg.sender];\r\n        bonus = investor_bonus[msg.sender];\r\n        ETH_bonus = investor_ETH_bonus[msg.sender];\r\n        payout_balance = get_credit();\r\n    }\r\n\r\n    /**\r\n     * function that is launched when transferring money to a contract\r\n     */\r\n    function() external payable{\r\n        if (msg.value >= MINIMAL_DEPOSIT){\r\n            //if the sender is not a found wallet, then we make out a deposit otherwise we do nothing,\r\n            // but simply put money on the balance of the contract\r\n            if(msg.sender != FOUND){\r\n                makeInvest();\r\n            }\r\n            \r\n            \r\n        }else{\r\n           DEVELOPER_WALLET.transfer(msg.value); \r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BonusCrediting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETH_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor_ETH_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor_bonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor_payout_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"number_contributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receivePayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Btspal","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6decce7fe454d141f7e096f990114fee0470ff6c331c0d2beeb4abf1f80fece1"}]}