{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/interfaces/IChainLinkOracle.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IChainLinkOracle {\r\n    function latestAnswer() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IKeeperOracle.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IKeeperOracle {\r\n    function current(address, uint, address) external view returns (uint);\r\n    function pairFor(address, address) external view returns (address);\r\n    function pairs() external view returns (address[] memory);\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/Initializable.sol\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n * @author crypto-pumpkin\r\n *\r\n * By initialization, the owner account will be the one that called initializeOwner. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Ruler: Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initializeOwner() internal initializer {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Oracle.sol\r\n\r\npragma solidity ^0.8.0;\r\ncontract Oracle is Ownable {\r\n    mapping(address => address) public assetsUSD;\r\n    mapping(address => address) public assetsETH;\r\n\r\n    address constant public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IKeeperOracle public keeperOracle = IKeeperOracle(0xf67Ab1c914deE06Ba0F264031885Ea7B276a7cDa);\r\n\r\n    constructor () {\r\n        assetsUSD[weth] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // WETH\r\n        assetsUSD[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // wBTC\r\n        assetsUSD[0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // renBTC\r\n        assetsUSD[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9; // DAI\r\n        assetsUSD[0x514910771AF9Ca656af840dff83E8264EcF986CA] = 0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c; // LINK\r\n        assetsUSD[0x408e41876cCCDC0F92210600ef50372656052a38] = 0x0f59666EDE214281e956cb3b2D0d69415AfF4A01; // REN\r\n        assetsUSD[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F] = 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699; // SNX\r\n        assetsUSD[0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9] = 0x547a514d5e3769680Ce22B2361c10Ea13619e8a9; // AAVE\r\n\r\n        assetsETH[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xdeb288F737066589598e9214E782fa5A8eD689e8; // wBTC\r\n        assetsETH[0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D] = 0xdeb288F737066589598e9214E782fa5A8eD689e8; // renBTC\r\n        assetsETH[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 0x773616E4d11A78F511299002da57A0a94577F1f4; // DAI\r\n        assetsETH[0x514910771AF9Ca656af840dff83E8264EcF986CA] = 0xDC530D9457755926550b59e8ECcdaE7624181557; // LINK\r\n        assetsETH[0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2] = 0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2; // MKR\r\n        assetsETH[0x408e41876cCCDC0F92210600ef50372656052a38] = 0x3147D7203354Dc06D9fd350c7a2437bcA92387a4; // REN\r\n        assetsETH[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F] = 0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c; // SNX\r\n        assetsETH[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] = 0x8e0b7e6062272B5eF4524250bFFF8e5Bd3497757; // SUSD\r\n        assetsETH[0x0000000000085d4780B73119b644AE5ecd22b376] = 0x3886BA987236181D98F2401c507Fb8BeA7871dF2; // TUSD\r\n        assetsETH[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 0x986b5E1e1755e3C2440e960477f25201B0a8bbD4; // USDC\r\n        assetsETH[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46; // USDT\r\n        assetsETH[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e] = 0xB7B1C8F4095D819BDAE25e7a63393CDF21fd02Ea; // YFI\r\n        assetsETH[0x6B3595068778DD592e39A122f4f5a5cF09C90fE2] = 0xe572CeF69f43c2E488b33924AF04BDacE19079cf; // SUSHI\r\n        assetsETH[0xD533a949740bb3306d119CC777fa900bA034cd52] = 0x8a12Be339B0cD1829b91Adc01977caa5E9ac121e; // CRV\r\n    }\r\n\r\n    /// @notice Returns price in USD multiplied by 1e8\r\n    function getPriceUSD(address _asset) external view returns (uint256) {\r\n        uint256 _price = 0;\r\n        if (assetsUSD[_asset] != address(0)) {\r\n            _price = IChainLinkOracle(assetsUSD[_asset]).latestAnswer();\r\n        } else if (assetsETH[_asset] != address(0)) {\r\n            _price = IChainLinkOracle(assetsETH[_asset]).latestAnswer();\r\n            _price = _price * IChainLinkOracle(assetsUSD[weth]).latestAnswer() / 1e18;\r\n        } else {\r\n            address pair = keeperOracle.pairFor(_asset, weth);\r\n            address[] memory pairs = keeperOracle.pairs();\r\n            for (uint i = 0; i < pairs.length; i++) {\r\n                if (pairs[i] == pair) {\r\n                    _price = keeperOracle.current(_asset, 10 ** IERC20(_asset).decimals(), weth);\r\n                    _price = _price * IChainLinkOracle(assetsUSD[weth]).latestAnswer() / 1e18;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return _price;\r\n    }\r\n\r\n    function addFeedETH(address _asset, address _feed) external onlyOwner {\r\n        assetsETH[_asset] = _feed;\r\n    }\r\n    \r\n    function addFeedUSD(address _asset, address _feed) external onlyOwner {\r\n        assetsUSD[_asset] = _feed;\r\n    }\r\n    \r\n    function removeFeedETH(address _asset) external onlyOwner {\r\n        assetsETH[_asset] = address(0);\r\n    }\r\n    \r\n    function removeFeedUSD(address _asset) external onlyOwner {\r\n        assetsUSD[_asset] = address(0);\r\n    }\r\n\r\n    function setKeeperOracle(IKeeperOracle _oracle) external onlyOwner {\r\n        keeperOracle = _oracle;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"addFeedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"addFeedUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperOracle\",\"outputs\":[{\"internalType\":\"contract IKeeperOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeFeedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeFeedUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeeperOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setKeeperOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b7cb0c667d932a6f4a7ce08225078d058bd00d13e95b5107cd63ff42dd3fadef"}]}