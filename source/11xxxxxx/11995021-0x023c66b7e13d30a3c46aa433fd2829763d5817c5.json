{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SpartanCouncil.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title Custom NFT contract based off ERC721 but restricted by access control.\r\n * @dev made for https://sips.synthetix.io/sips/sip-93\r\n */\r\ncontract SpartanCouncil is Ownable {\r\n    // Event that is emitted when a new SpartanCouncil token is minted\r\n    event Mint(uint256 indexed tokenId, address to);\r\n    // Event that is emitted when an existing SpartanCouncil token is burned\r\n    event Burn(uint256 indexed tokenId);\r\n    // Event that is emitted when an existing SpartanCouncil token is Transferred\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    // Event that is emitted when an existing SpartanCouncil token's uri is altered\r\n    event TokenURISet(uint256 tokenId, string tokenURI);\r\n\r\n    // Array of token ids\r\n    uint256[] public tokens;\r\n    // Map between an owner and their tokens\r\n    mapping(address => uint256) public tokenOwned;\r\n    // Maps a token to the owner address\r\n    mapping(uint256 => address) public ownerOf;\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private tokenURIs;\r\n    // Token name\r\n    string public name;\r\n    // Token symbol\r\n    string public symbol;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     * @param _name the name of the token\r\n     * @param _symbol the symbol of the token\r\n     */\r\n    constructor(string memory _name, string memory _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to check that an address is not the \"0\" address\r\n     * @param to address the address to check\r\n     */\r\n    modifier isValidAddress(address to) {\r\n        require(to != address(0), \"Method called with the zero address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to retrieve whether an address owns a token\r\n     * @param owner address the address to check the balance of\r\n     */\r\n    function balanceOf(address owner) public view isValidAddress(owner) returns (uint256) {\r\n        return tokenOwned[owner] > 0 ? 1 : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer function to assign a token to another address\r\n     * Reverts if the address already owns a token\r\n     * @param from address the address that currently owns the token\r\n     * @param to address the address to assign the token to\r\n     * @param tokenId uint256 ID of the token to transfer\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public isValidAddress(to) isValidAddress(from) onlyOwner {\r\n        require(tokenOwned[to] == 0, \"Destination address already owns a token\");\r\n        require(ownerOf[tokenId] == from, \"From address does not own token\");\r\n\r\n        tokenOwned[from] = 0;\r\n        tokenOwned[to] = tokenId;\r\n\r\n        ownerOf[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint function to mint a new token given a tokenId and assign it to an address\r\n     * Reverts if the tokenId is 0 or the token already exist\r\n     * @param to address the address to assign the token to\r\n     * @param tokenId uint256 ID of the token to mint\r\n     */\r\n    function mint(address to, uint256 tokenId) public onlyOwner isValidAddress(to) {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint function to mint a new token given a tokenId and assign it to an address\r\n     * Reverts if the tokenId is 0 or the token already exist\r\n     * @param to address the address to assign the token to\r\n     * @param tokenId uint256 ID of the token to mint\r\n     */\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public onlyOwner isValidAddress(to) {\r\n        require(bytes(uri).length > 0, \"URI must be supplied\");\r\n\r\n        _mint(to, tokenId);\r\n\r\n        tokenURIs[tokenId] = uri;\r\n        emit TokenURISet(tokenId, uri);\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) private {\r\n        require(tokenOwned[to] == 0, \"Destination address already owns a token\");\r\n        require(ownerOf[tokenId] == address(0), \"ERC721: token already minted\");\r\n        require(tokenId != 0, \"Token ID must be greater than 0\");\r\n\r\n        tokens.push(tokenId);\r\n        tokenOwned[to] = tokenId;\r\n        ownerOf[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n        emit Mint(tokenId, to);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn function to remove a given tokenId\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to burn\r\n     */\r\n    function burn(uint256 tokenId) public onlyOwner {\r\n        address previousOwner = ownerOf[tokenId];\r\n        require(previousOwner != address(0), \"ERC721: token does not exist\");\r\n\r\n        delete tokenOwned[previousOwner];\r\n        delete ownerOf[tokenId];\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] == tokenId) {\r\n                tokens[i] = tokens[tokens.length - 1];\r\n                break;\r\n            }\r\n        }\r\n\r\n        tokens.pop();\r\n\r\n        if (bytes(tokenURIs[tokenId]).length != 0) {\r\n            delete tokenURIs[tokenId];\r\n        }\r\n\r\n        emit Burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get the total supply of tokens currently available\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get the token URI for a given token.\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to retrieve the uri for\r\n     */\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(ownerOf[tokenId] != address(0), \"ERC721: token does not exist\");\r\n        string memory _tokenURI = tokenURIs[tokenId];\r\n        return _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set the token URI for a given token.\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param uri string URI to assign\r\n     */\r\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyOwner {\r\n        require(ownerOf[tokenId] != address(0), \"ERC721: token does not exist\");\r\n        tokenURIs[tokenId] = uri;\r\n        emit TokenURISet(tokenId, uri);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"TokenURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpartanCouncil","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f5370617274616e20436f756e63696c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653432d4e46540000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2f53951fa61c084458065bb41b9b29232696f996758893e31ca31b0530db5126"}]}