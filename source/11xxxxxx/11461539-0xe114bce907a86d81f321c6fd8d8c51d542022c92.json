{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/introspection/IERC165.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/introspection/ERC165.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, basic interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * Note: The ERC-165 identifier for this interface is 0xd9b67a26.\r\n */\r\ninterface IERC1155 {\r\n\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _value\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _values\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    event URI(\r\n        string _value,\r\n        uint256 indexed _id\r\n    );\r\n\r\n    /**\r\n     * @notice Transfers `value` amount of an `id` from  `from` to `to`  (with safety call).\r\n     * @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \"Approval\" section of the standard).\r\n     * @dev MUST revert if `to` is the zero address.\r\n     * @dev MUST revert if balance of holder for token `id` is lower than the `value` sent.\r\n     * @dev MUST revert on any other error.\r\n     * @dev MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n     * @dev After the above conditions are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n     * @param from    Source address\r\n     * @param to      Target address\r\n     * @param id      ID of the token type\r\n     * @param value   Transfer amount\r\n     * @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `to`\r\n    */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified (with safety call).\r\n     * @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \"Approval\" section of the standard).\r\n     * @dev MUST revert if `to` is the zero address.\r\n     * @dev MUST revert if length of `ids` is not the same as length of `values`.\r\n     * @dev MUST revert if any of the balance(s) of the holder(s) for token(s) in `ids` is lower than the respective amount(s) in `values` sent to the recipient.\r\n     * @dev MUST revert on any other error.\r\n     * @dev MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n     * @dev Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n     * @dev After the above conditions for the transfer(s) in the batch are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n     * @param from    Source address\r\n     * @param to      Target address\r\n     * @param ids     IDs of each token type (order and length must match _values array)\r\n     * @param values  Transfer amounts per token type (order and length must match _ids array)\r\n     * @param data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `to`\r\n    */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Get the balance of an account's tokens.\r\n     * @param owner  The address of the token holder\r\n     * @param id     ID of the token\r\n     * @return       The _owner's balance of the token type requested\r\n     */\r\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param owners The addresses of the token holders\r\n     * @param ids    ID of the tokens\r\n     * @return       The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata owners,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\r\n     * @dev MUST emit the ApprovalForAll event on success.\r\n     * @param operator Address to add to the set of authorized operators\r\n     * @param approved True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @notice Queries the approval status of an operator for a given owner.\r\n     * @param owner     The owner of the tokens\r\n     * @param operator  Address of authorized operator\r\n     * @return          True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155MetadataURI.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, optional metadata URI extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * Note: The ERC-165 identifier for this interface is 0x0e89341c.\r\n */\r\ninterface IERC1155MetadataURI {\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n     * @dev URIs are defined in RFC 3986.\r\n     * @dev The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\r\n     * @dev The uri function SHOULD be used to retrieve values if no event was emitted.\r\n     * @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\r\n     * @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for an implementation to return a valid string even if the token does not exist.\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155Inventory.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, optional Inventory extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\r\n * Interface for fungible/non-fungible tokens management on a 1155-compliant contract.\r\n *\r\n * This interface rationalizes the co-existence of fungible and non-fungible tokens\r\n * within the same contract. As several kinds of fungible tokens can be managed under\r\n * the Multi-Token standard, we consider that non-fungible tokens can be classified\r\n * under their own specific type. We introduce the concept of non-fungible collection\r\n * and consider the usage of 3 types of identifiers:\r\n * (a) Fungible Token identifiers, each representing a set of Fungible Tokens,\r\n * (b) Non-Fungible Collection identifiers, each representing a set of Non-Fungible Tokens (this is not a token),\r\n * (c) Non-Fungible Token identifiers. \r\n\r\n * Identifiers nature\r\n * |       Type                | isFungible  | isCollection | isToken |\r\n * |  Fungible Token           |   true      |     true     |  true   |\r\n * |  Non-Fungible Collection  |   false     |     true     |  false  |\r\n * |  Non-Fungible Token       |   false     |     false    |  true   |\r\n *\r\n * Identifiers compatibilities\r\n * |       Type                |  transfer  |   balance    |   supply    |  owner  |\r\n * |  Fungible Token           |    OK      |     OK       |     OK      |   NOK   |\r\n * |  Non-Fungible Collection  |    NOK     |     OK       |     OK      |   NOK   |\r\n * |  Non-Fungible Token       |    OK      |   0 or 1     |   0 or 1    |   OK    |\r\n *\r\n * Note: The ERC-165 identifier for this interface is 0x469bd23f.\r\n */\r\ninterface IERC1155Inventory {\r\n\r\n    /**\r\n     * Optional event emitted when a collection is created.\r\n     *  This event SHOULD NOT be emitted twice for the same `collectionId`.\r\n     * \r\n     *  The parameters in the functions `collectionOf` and `ownerOf` are required to be\r\n     *  non-fungible token identifiers, so they should not be called with any collection\r\n     *  identifiers, else they will revert.\r\n     * \r\n     *  On the contrary, the functions `balanceOf`, `balanceOfBatch` and `totalSupply` are\r\n     *  best used with collection identifiers, which will return meaningful information for\r\n     *  the owner.\r\n     */\r\n    event CollectionCreated (uint256 indexed collectionId, bool indexed fungible);\r\n\r\n    /**\r\n     * Retrieves the owner of a non-fungible token.\r\n     * @dev Reverts if `nftId` is owned by the zero address. // ERC721 compatibility\r\n     * @dev Reverts if `nftId` does not represent a non-fungible token.\r\n     * @param nftId The token identifier to query.\r\n     * @return Address of the current owner of the token.\r\n     */\r\n    function ownerOf(uint256 nftId) external view returns (address);\r\n\r\n    /**\r\n     * Retrieves the total supply of `id`.\r\n     *  If `id` represents a fungible or non-fungible collection, returns the supply of tokens for this collection.\r\n     *  If `id` represents a non-fungible token, returns 1 if the token exists, else 0.\r\n     * @param id The identifier for which to retrieve the supply of.\r\n     * @return The supplies for each identifier in `ids`.\r\n     */\r\n    function totalSupply(uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * Introspects whether or not `id` represents afungible token.\r\n     *  This function MUST return true even for afungible tokens which is not-yet created.\r\n     * @param id The identifier to query.\r\n     * @return bool True if `id` represents afungible token, false otherwise.\r\n     */\r\n    function isFungible(uint256 id) external pure returns (bool);\r\n\r\n    /**\r\n     * Introspects the non-fungible collection to which `nftId` belongs.\r\n     *  This function MUST return a value representing a non-fungible collection.\r\n     *  This function MUST return a value for a non-existing token, and SHOULD NOT be used to check the existence of a non-fungible token.\r\n     * @dev Reverts if `nftId` does not represent a non-fungible token.\r\n     * @param nftId The token identifier to query the collection of.\r\n     * @return uint256 the non-fungible collection identifier to which `nftId` belongs.\r\n     */\r\n    function collectionOf(uint256 nftId) external pure returns (uint256);\r\n\r\n    /**\r\n     * @notice this definition replaces the original {ERC1155-balanceOf}.\r\n     * Retrieves the balance of `id` owned by account `owner`.\r\n     *  If `id` represents a fungible or non-fungible collection, returns the balance of tokens for this collection.\r\n     *  If `id` represents a non-fungible token, returns 1 if the token is owned by `owner`, else 0.\r\n     * @param owner The account to retrieve the balance of.\r\n     * @param id The identifier to retrieve the balance of.\r\n     * @return The balance of `id` owned by account `owner`.\r\n     */\r\n    // function balanceOf(address owner, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice this definition replaces the original {ERC1155-balanceOfBatch}.\r\n     * Retrieves the balances of `ids` owned by accounts `owners`. For each pair:\r\n     *  if `id` represents a fungible or non-fungible collection, returns the balance of tokens for this collection,\r\n     *  if `id` represents a non-fungible token, returns 1 if the token is owned by `owner`, else 0.\r\n     * @param owners The addresses of the token holders\r\n     * @param ids The identifiers to retrieve the balance of.\r\n     * @return The balances of `ids` owned by accounts `owners`.\r\n     */\r\n    // function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155TokenReceiver.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, token receiver\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\r\n * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n     * This function MUST revert if it rejects the transfer.\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param id        The ID of the token being transferred\r\n     * @param value     The amount of tokens being transferred\r\n     * @param data      Additional data with no specified format\r\n     * @return bytes4   `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n     * This function MUST revert if it rejects the transfer(s).\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n     * @param data      Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/ERC1155InventoryBase.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ERC1155InventoryBase is IERC1155, IERC1155MetadataURI, IERC1155Inventory, ERC165, Context {\r\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\r\n\r\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\r\n\r\n    // Burnt non-fungible token owner's magic value\r\n    uint256 internal constant _BURNT_NFT_OWNER = 0xdead000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    // Non-fungible bit. If an id has this bit set, it is a non-fungible (either collection or token)\r\n    uint256 internal constant _NF_BIT = 1 << 255;\r\n\r\n    // Mask for non-fungible collection (including the nf bit)\r\n    uint256 internal constant _NF_COLLECTION_MASK = uint256(type(uint32).max) << 224;\r\n    uint256 internal constant _NF_TOKEN_MASK = ~_NF_COLLECTION_MASK;\r\n\r\n    /* owner => operator => approved */\r\n    mapping(address => mapping(address => bool)) internal _operators;\r\n\r\n    /* collection ID => owner => balance */\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    /* collection ID => supply */\r\n    mapping(uint256 => uint256) internal _supplies;\r\n\r\n    /* NFT ID => owner */\r\n    mapping(uint256 => uint256) internal _owners;\r\n\r\n    /* collection ID => creator */\r\n    mapping(uint256 => address) internal _creators;\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor() internal {\r\n        _registerInterface(type(IERC1155).interfaceId);\r\n        _registerInterface(type(IERC1155MetadataURI).interfaceId);\r\n        _registerInterface(type(IERC1155Inventory).interfaceId);\r\n    }\r\n\r\n    //================================== ERC1155 =======================================/\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     */\r\n    function balanceOf(address owner, uint256 id) public virtual override view returns (uint256) {\r\n        require(owner != address(0), \"Inventory: zero address\");\r\n\r\n        if (isNFT(id)) {\r\n            return _owners[id] == uint256(owner) ? 1 : 0;\r\n        }\r\n\r\n        return _balances[id][owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     */\r\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        require(owners.length == ids.length, \"Inventory: inconsistent arrays\");\r\n\r\n        uint256[] memory balances = new uint256[](owners.length);\r\n\r\n        for (uint256 i = 0; i != owners.length; ++i) {\r\n            balances[i] = balanceOf(owners[i], ids[i]);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        address sender = _msgSender();\r\n        require(operator != sender, \"Inventory: self-approval\");\r\n        _operators[sender][operator] = approved;\r\n        emit ApprovalForAll(sender, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address tokenOwner, address operator) public virtual override view returns (bool) {\r\n        return _operators[tokenOwner][operator];\r\n    }\r\n\r\n    //================================== ERC1155MetadataURI =======================================/\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     */\r\n    function uri(uint256 id) external virtual override view returns (string memory) {\r\n        return _uri(id);\r\n    }\r\n\r\n    //================================== ERC1155Inventory =======================================/\r\n\r\n    /**\r\n     * @dev See {IERC1155Inventory-isFungible}.\r\n     */\r\n    function isFungible(uint256 id) public virtual override pure returns (bool) {\r\n        return id & _NF_BIT == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155Inventory-collectionOf}.\r\n     */\r\n    function collectionOf(uint256 nftId) public virtual override pure returns (uint256) {\r\n        require(isNFT(nftId), \"Inventory: not an NFT\");\r\n        return nftId & _NF_COLLECTION_MASK;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155Inventory-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 nftId) public virtual override view returns (address) {\r\n        address owner = address(_owners[nftId]);\r\n        require(owner != address(0), \"Inventory: non-existing NFT\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155Inventory-totalSupply}.\r\n     */\r\n    function totalSupply(uint256 id) public virtual override view returns (uint256) {\r\n        if (isNFT(id)) {\r\n            return address(_owners[id]) == address(0) ? 0 : 1;\r\n        } else {\r\n            return _supplies[id];\r\n        }\r\n    }\r\n\r\n    //================================== ERC1155Inventory Non-standard helpers =======================================/\r\n\r\n    /**\r\n     * @dev Introspects whether an identifier represents an non-fungible token.\r\n     * @param id Identifier to query.\r\n     * @return True if `id` represents an non-fungible token.\r\n     */\r\n    function isNFT(uint256 id) public virtual pure returns (bool) {\r\n        return (id & _NF_BIT) != 0 && (id & _NF_TOKEN_MASK != 0);\r\n    }\r\n\r\n    //================================== Inventory Internal Functions =======================================/\r\n\r\n    /**\r\n     * Creates a collection (optional).\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @dev Reverts if `collectionId` has already been created.\r\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\r\n     * @param collectionId Identifier of the collection.\r\n     */\r\n    function _createCollection(uint256 collectionId) internal virtual {\r\n        require(!isNFT(collectionId), \"Inventory: not a collection\");\r\n        require(_creators[collectionId] == address(0), \"Inventory: existing collection\");\r\n        _creators[collectionId] = _msgSender();\r\n        emit CollectionCreated(collectionId, isFungible(collectionId));\r\n    }\r\n\r\n    /**\r\n     * @dev (abstract) Returns an URI for a given identifier.\r\n     * @param id Identifier to query the URI of.\r\n     * @return The metadata URI for `id`.\r\n     */\r\n    function _uri(uint256 id) internal virtual view returns (string memory);\r\n\r\n    /**\r\n     * Returns whether `sender` is authorised to make a transfer on behalf of `from`.\r\n     * @param from The address to check operatibility upon.\r\n     * @param sender The sender address.\r\n     * @return True if sender is `from` or an operator for `from`, false otherwise.\r\n     */\r\n    function _isOperatable(address from, address sender) internal virtual view returns (bool) {\r\n        return (from == sender) || _operators[from][sender];\r\n    }\r\n\r\n    //================================== Token Receiver Calls Internal =======================================/\r\n\r\n    /**\r\n     * Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\r\n     * @dev Reverts if `to` is not a contract.\r\n     * @dev Reverts if the call to the target fails or is refused.\r\n     * @param from Previous token owner.\r\n     * @param to New token owner.\r\n     * @param id Identifier of the token transferred.\r\n     * @param value Amount of token transferred.\r\n     * @param data Optional data to send along with the receiver contract call.\r\n     */\r\n    function _callOnERC1155Received(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        require(\r\n            IERC1155TokenReceiver(to).onERC1155Received(_msgSender(), from, id, value, data) == _ERC1155_RECEIVED,\r\n            \"Inventory: transfer refused\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calls {IERC1155TokenReceiver-onERC1155batchReceived} on a target contract.\r\n     * @dev Reverts if `to` is not a contract.\r\n     * @dev Reverts if the call to the target fails or is refused.\r\n     * @param from Previous tokens owner.\r\n     * @param to New tokens owner.\r\n     * @param ids Identifiers of the tokens to transfer.\r\n     * @param values Amounts of tokens to transfer.\r\n     * @param data Optional data to send along with the receiver contract call.\r\n     */\r\n    function _callOnERC1155BatchReceived(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        require(\r\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(_msgSender(), from, ids, values, data) ==\r\n                _ERC1155_BATCH_RECEIVED,\r\n            \"Inventory: transfer refused\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/ERC1155Inventory.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @title ERC1155Inventory, a contract which manages up to multiple Collections of Fungible and Non-Fungible Tokens\r\n * @dev In this implementation, with N representing the Non-Fungible Collection mask length, identifiers can represent either:\r\n * (a) a Fungible Token:\r\n *     - most significant bit == 0\r\n * (b) a Non-Fungible Collection:\r\n *     - most significant bit == 1\r\n *     - (256-N) least significant bits == 0\r\n * (c) a Non-Fungible Token:\r\n *     - most significant bit == 1\r\n *     - (256-N) least significant bits != 0\r\n * with N = 32.\r\n *\r\n */\r\nabstract contract ERC1155Inventory is ERC1155InventoryBase {\r\n    using Address for address;\r\n\r\n    //================================== ERC1155 =======================================/\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _safeTransferFrom(from, to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _safeBatchTransferFrom(from, to, ids, values, data);\r\n    }\r\n\r\n    //============================== Minting Core Internal Helpers =================================/\r\n\r\n    function _mintFungible(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 supply = _supplies[id];\r\n        uint256 newSupply = supply + value;\r\n        require(newSupply > supply, \"Inventory: supply overflow\");\r\n        _supplies[id] = newSupply;\r\n        // cannot overflow as any balance is bounded up by the supply which cannot overflow\r\n        _balances[id][to] += value;\r\n    }\r\n\r\n    function _mintNFT(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(_owners[id] == 0, \"Inventory: existing/burnt NFT\");\r\n\r\n        _owners[id] = uint256(to);\r\n\r\n        if (!isBatch) {\r\n            uint256 collectionId = id & _NF_COLLECTION_MASK;\r\n            // it is virtually impossible that a non-fungible collection supply\r\n            // overflows due to the cost of minting individual tokens\r\n            ++_supplies[collectionId];\r\n            // cannot overflow as supply cannot overflow\r\n            ++_balances[collectionId][to];\r\n        }\r\n    }\r\n\r\n    //============================== Minting Internal Functions ====================================/\r\n\r\n    /**\r\n     * Mints some token.\r\n     * @dev Reverts if `isBatch` is false and `to` is the zero address.\r\n     * @dev Reverts if `id` represents a non-fungible collection.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token which is owned by a non-zero address.\r\n     * @dev Reverts if `id` represents afungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents afungible token and there is an overflow of supply.\r\n     * @dev Reverts if `isBatch` is false, `safe` is true and the call to the receiver contract fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferSingle} event if `isBatch` is false.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to mint.\r\n     * @param value Amount of token to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n\r\n        if (isFungible(id)) {\r\n            _mintFungible(to, id, value);\r\n        } else if (id & _NF_TOKEN_MASK != 0) {\r\n            _mintNFT(to, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(_msgSender(), address(0), to, id, value);\r\n        if (to.isContract()) {\r\n            _callOnERC1155Received(address(0), to, id, value, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mints a batch of tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if one of `ids` represents a non-fungible collection.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and its paired value is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token which is owned by a non-zero address.\r\n     * @dev Reverts if one of `ids` represents afungible token and its paired value is 0.\r\n     * @dev Reverts if one of `ids` represents afungible token and there is an overflow of supply.\r\n     * @dev Reverts if `safe` is true and the call to the receiver contract fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param to Address of the new tokens owner.\r\n     * @param ids Identifiers of the tokens to mint.\r\n     * @param values Amounts of tokens to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function _safeBatchMint(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (isFungible(id)) {\r\n                _mintFungible(to, id, value); \r\n            } else if (id & _NF_TOKEN_MASK != 0) {\r\n                _mintNFT(to, id, value, true);\r\n                uint256 nextCollectionId = id & _NF_COLLECTION_MASK;\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _balances[nfCollectionId][to] += nfCollectionCount;\r\n                        _supplies[nfCollectionId] += nfCollectionCount;\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        nfCollectionCount++;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _balances[nfCollectionId][to] += nfCollectionCount;\r\n            _supplies[nfCollectionId] += nfCollectionCount;\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), address(0), to, ids, values);\r\n        if (to.isContract()) {\r\n            _callOnERC1155BatchReceived(address(0), to, ids, values, data);\r\n        }\r\n    }\r\n\r\n    //============================== Transfer Core Internal Helpers =================================/\r\n\r\n    function _transferFungible(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 balance = _balances[id][from];\r\n        require(balance >= value, \"Inventory: not enough balance\");\r\n        _balances[id][from] = balance - value;\r\n        // cannot overflow as supply cannot overflow\r\n        _balances[id][to] += value;\r\n    }\r\n\r\n    function _transferNFT(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(from == address(_owners[id]), \"Inventory: non-owned NFT\");\r\n        _owners[id] = uint256(to);\r\n        if (!isBatch) {\r\n            uint256 collectionId = id & _NF_COLLECTION_MASK;\r\n            // cannot underflow as balance is verified through ownership\r\n            _balances[collectionId][from] -= 1;\r\n            // cannot overflow as supply cannot overflow\r\n            _balances[collectionId][to] += 1;\r\n        }\r\n    }\r\n\r\n    //============================== Transfer Internal Functions =======================================/\r\n\r\n    /**\r\n     * Transfers tokens to another address.\r\n     * @dev Reverts if `isBatch` is false and `to` is the zero address.\r\n     * @dev Reverts if `isBatch` is false the sender is not approved.\r\n     * @dev Reverts if `id` represents a non-fungible collection.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token and is not owned by `from`.\r\n     * @dev Reverts if `id` represents afungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents afungible token and `from` doesn't have enough balance.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param from Current token owner.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to transfer.\r\n     * @param value Amount of token to transfer.\r\n     * @param data Optional data to pass to the receiver contract.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        address sender = _msgSender();\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        if (isFungible(id)) {\r\n            _transferFungible(from, to, id, value);\r\n        } else if (id & _NF_TOKEN_MASK != 0) {\r\n            _transferNFT(from, to, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(sender, from, to, id, value);\r\n        if (to.isContract()) {\r\n            _callOnERC1155Received(from, to, id, value, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfers multiple tokens to another address\r\n     * @dev Reverts if `ids` and `values` have inconsistent lengths.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` does not represent a token.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and is not owned by `from`.\r\n     * @dev Reverts if one of `ids` represents afungible token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents afungible token and `from` doesn't have enough balance.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Current token owner.\r\n     * @param to Address of the new token owner.\r\n     * @param ids Identifiers of the tokens to transfer.\r\n     * @param values Amounts of tokens to transfer.\r\n     * @param data Optional data to pass to the receiver contract.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (isFungible(id)) {\r\n                _transferFungible(from, to, id, value); \r\n            } else if (id & _NF_TOKEN_MASK != 0) {\r\n                _transferNFT(from, to, id, value, true);\r\n                uint256 nextCollectionId = id & _NF_COLLECTION_MASK;\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _balances[nfCollectionId][from] -= nfCollectionCount;\r\n                        _balances[nfCollectionId][to] += nfCollectionCount;\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        nfCollectionCount++;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _balances[nfCollectionId][from] -= nfCollectionCount;\r\n            _balances[nfCollectionId][to] += nfCollectionCount;\r\n        }\r\n\r\n        emit TransferBatch(sender, from, to, ids, values);\r\n        if (to.isContract()) {\r\n            _callOnERC1155BatchReceived(from, to, ids, values, data);\r\n        }\r\n    }\r\n\r\n    //============================== Burning Core Internal Helpers =================================/\r\n\r\n    function _burnFungible(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 balance = _balances[id][from];\r\n        require(balance >= value, \"Inventory: not enough balance\");\r\n        _balances[id][from] = balance - value;\r\n        // Cannot underflow\r\n        _supplies[id] -= value;\r\n    }\r\n\r\n    function _burnNFT(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(from == address(_owners[id]), \"Inventory: non-owned NFT\");\r\n        _owners[id] = _BURNT_NFT_OWNER;\r\n\r\n        if (!isBatch) {\r\n            uint256 collectionId = id & _NF_COLLECTION_MASK;\r\n            // cannot underflow as balance is confirmed through ownership\r\n            --_balances[collectionId][from];\r\n            // Cannot underflow\r\n            --_supplies[collectionId];\r\n        }\r\n    }\r\n\r\n    //================================ Burning Internal Functions ======================================/\r\n\r\n    /**\r\n     * Burns some token.\r\n     * @dev Reverts if `isBatch` is false and the sender is not approved.\r\n     * @dev Reverts if `id` represents a non-fungible collection.\r\n     * @dev Reverts if `id` represents afungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents afungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferSingle} event if `isBatch` is false.\r\n     * @param from Address of the current token owner.\r\n     * @param id Identifier of the token to burn.\r\n     * @param value Amount of token to burn.\r\n     */\r\n    function _burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        if (isFungible(id)) {\r\n            _burnFungible(from, id, value);\r\n        } else if (id & _NF_TOKEN_MASK != 0) {\r\n            _burnNFT(from, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(sender, from, address(0), id, value);\r\n    }\r\n\r\n    /**\r\n     * Burns multiple tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` represents a non-fungible collection.\r\n     * @dev Reverts if one of `ids` represents afungible token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents afungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Address of the current tokens owner.\r\n     * @param ids Identifiers of the tokens to burn.\r\n     * @param values Amounts of tokens to burn.\r\n     */\r\n    function _batchBurnFrom(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) internal virtual {\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (isFungible(id)) {\r\n                _burnFungible(from, id, value); \r\n            } else if (id & _NF_TOKEN_MASK != 0) {\r\n                _burnNFT(from, id, value, true);\r\n                uint256 nextCollectionId = id & _NF_COLLECTION_MASK;\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _balances[nfCollectionId][from] -= nfCollectionCount;\r\n                        _supplies[nfCollectionId] -= nfCollectionCount;\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        nfCollectionCount++;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _balances[nfCollectionId][from] -= nfCollectionCount;\r\n            _supplies[nfCollectionId] -= nfCollectionCount;\r\n        }\r\n\r\n        emit TransferBatch(sender, from, address(0), ids, values);\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155InventoryMintable.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Inventory, additional minting interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\ninterface IERC1155InventoryMintable {\r\n    /**\r\n     * Safely mints some token.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if `id` is not a token.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token which has already been minted.\r\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents a fungible token and there is an overflow of supply.\r\n     * @dev Reverts if `id` represents a fungible token and there is an overflow of supply.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to mint.\r\n     * @param value Amount of token to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\r\n\r\n    /**\r\n     * Safely mints a batch of tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if one of `ids` is not a token.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and its paired value is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token which has already been minted.\r\n     * @dev Reverts if one of `ids` represents a fungible token and its paired value is 0.\r\n     * @dev Reverts if one of `ids` represents a fungible token and there is an overflow of supply.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param to Address of the new tokens owner.\r\n     * @param ids Identifiers of the tokens to mint.\r\n     * @param values Amounts of tokens to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155InventoryBurnable.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Inventory additional burning interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\ninterface IERC1155InventoryBurnable {\r\n    /**\r\n     * Burns some token.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `id` does not represent a token.\r\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\r\n     * @dev Reverts if `id` represents a fungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param from Address of the current token owner.\r\n     * @param id Identifier of the token to burn.\r\n     * @param value Amount of token to burn.\r\n     */\r\n    function burnFrom(address from, uint256 id, uint256 value) external;\r\n\r\n    /**\r\n     * Burns multiple tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` does not represent a token.\r\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Address of the current tokens owner.\r\n     * @param ids Identifiers of the tokens to burn.\r\n     * @param values Amounts of tokens to burn.\r\n     */\r\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155InventoryCreator.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Inventory, additional creator interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\ninterface IERC1155InventoryCreator {\r\n    /**\r\n     * Returns the creator of a collection, or the zero address if the collection has not been created.\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @param collectionId Identifier of the collection.\r\n     * @return The creator of a collection, or the zero address if the collection has not been created.\r\n     */\r\n    function creator(uint256 collectionId) external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-core_library/contracts/utils/types/UInt256ToDecimalString.sol@v3.1.1\r\n\r\npragma solidity 0.6.8;\r\n\r\nlibrary UInt256ToDecimalString {\r\n\r\n    function toDecimalString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OpenZeppelin's String.toString() implementation - MIT licence\r\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8b10cb38d8fedf34f2d89b0ed604f2dceb76d6a9/contracts/utils/Strings.sol\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/metadata/BaseMetadataURI.sol@v6.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\ncontract BaseMetadataURI is Ownable {\r\n    using UInt256ToDecimalString for uint256;\r\n\r\n    event BaseMetadataURISet(string baseMetadataURI);\r\n\r\n    string public baseMetadataURI;\r\n\r\n    function setBaseMetadataURI(string calldata baseMetadataURI_) external onlyOwner {\r\n        baseMetadataURI = baseMetadataURI_;\r\n        emit BaseMetadataURISet(baseMetadataURI_);\r\n    }\r\n\r\n    function _uri(uint256 id) internal view virtual returns (string memory) {\r\n        return string(abi.encodePacked(baseMetadataURI, id.toDecimalString()));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/EnumerableSet.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v3.2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-core_library/contracts/access/MinterRole.sol@v3.1.1\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * Contract module which allows derived contracts access control over token\r\n * minting operations.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyMinter`, which can be applied to the minting functions of your contract.\r\n * Those functions will only be accessible to accounts with the minter role\r\n * once the modifer is put in place.\r\n */\r\ncontract MinterRole is AccessControl {\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    /**\r\n     * Modifier to make a function callable only by accounts with the minter role.\r\n     */\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    constructor () internal {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        emit MinterAdded(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * Validates whether or not the given account has been granted the minter role.\r\n     * @param account The account to validate.\r\n     * @return True if the account has been granted the minter role, false otherwise.\r\n     */\r\n    function isMinter(address account) public view returns (bool) {\r\n        require(account != address(0), \"MinterRole: address zero cannot be minter\");\r\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\r\n    }\r\n\r\n    /**\r\n     * Grants the minter role to a non-minter.\r\n     * @param account The account to grant the minter role to.\r\n     */\r\n    function addMinter(address account) public onlyMinter {\r\n        require(!isMinter(account), \"MinterRole: add an account already minter\");\r\n        grantRole(DEFAULT_ADMIN_ROLE, account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    /**\r\n     * Renounces the granted minter role.\r\n     */\r\n    function renounceMinter() public onlyMinter {\r\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        emit MinterRemoved(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/solc-0.6/token/ERC1155/GameeVouchers.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GameeVouchers is ERC1155Inventory, IERC1155InventoryMintable, IERC1155InventoryBurnable, IERC1155InventoryCreator, BaseMetadataURI, MinterRole {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant name = \"GameeVouchers\";\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant symbol = \"GameeVouchers\";\r\n\r\n    // ===================================================================================================\r\n    //                               Admin Public Functions\r\n    // ===================================================================================================\r\n\r\n    /**\r\n     * Creates a collection.\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @dev Reverts if `collectionId` has already been created.\r\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\r\n     * @param collectionId Identifier of the collection.\r\n     */\r\n    function createCollection(uint256 collectionId) external onlyOwner {\r\n        require(isFungible(collectionId), \"GameeVouchers: only fungibles\");\r\n        _createCollection(collectionId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\r\n     */\r\n    function safeMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external override onlyMinter {\r\n        require(isFungible(id), \"GameeVouchers: only fungibles\");\r\n        _safeMint(to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\r\n     */\r\n    function safeBatchMint(\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external override onlyMinter {\r\n        _safeBatchMint(to, ids, values, data);\r\n        for (uint256 i; i!= ids.length; ++i) {\r\n            require(isFungible(ids[i]), \"GameeVouchers: only fungibles\");\r\n        }\r\n    }\r\n\r\n    // ===================================================================================================\r\n    //                                 User Public Functions\r\n    // ===================================================================================================\r\n\r\n    /**\r\n     * @dev See {IERC1155InventoryCreator-creator(uint256)}.\r\n     */\r\n    function creator(uint256 collectionId) external override view returns(address) {\r\n        require(!isNFT(collectionId), \"Inventory: not a collection\");\r\n        return _creators[collectionId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155InventoryBurnable-burnFrom(address,uint256,uint256)}.\r\n     */\r\n    function burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) external override {\r\n        _burnFrom(from, id, value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155InventoryBurnable-batchBurnFrom(address,uint256[],uint256[])}.\r\n     */\r\n    function batchBurnFrom(\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values\r\n    ) external override {\r\n        _batchBurnFrom(from, ids, values);\r\n    }\r\n\r\n    // ===================================================================================================\r\n    //                                  ERC1155 Internal Functions\r\n    // ===================================================================================================\r\n\r\n    function _uri(uint256 id) internal override(ERC1155InventoryBase, BaseMetadataURI) view returns (string memory) {\r\n        return BaseMetadataURI._uri(id);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"fungible\",\"type\":\"bool\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseMetadataURI_\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GameeVouchers","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d90c5ca1ae096b880ef0fbde383c771beff89dff35876b7e28589dd0b134811c"}]}