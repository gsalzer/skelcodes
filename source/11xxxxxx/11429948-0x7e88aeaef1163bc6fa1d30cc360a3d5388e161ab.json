{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\ncontract MPondLogic is Initializable {\r\n    /// @notice EIP-20 token name for this token\r\n    string public name;\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public symbol;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public decimals;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint256 public totalSupply; // 10k mPond\r\n    uint256 public bridgeSupply; // 3k mPond\r\n\r\n    address public dropBridge;\r\n    /// @notice Allowance amounts on behalf of others\r\n    mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping(address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address => mapping(address => uint96)) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public DOMAIN_TYPEHASH;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public DELEGATION_TYPEHASH;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public UNDELEGATION_TYPEHASH;\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// customized params\r\n    address public admin;\r\n    mapping(address => bool) public isWhiteListed;\r\n    bool public enableAllTranfers;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @notice Initializer a new mPond token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n    function initialize(\r\n        address account,\r\n        address bridge,\r\n        address dropBridgeAddress\r\n    ) public initializer {\r\n        createConstants();\r\n        require(\r\n            account != bridge,\r\n            \"Bridge and account should not be the same address\"\r\n        );\r\n        balances[bridge] = uint96(bridgeSupply);\r\n        delegates[bridge][address(0)] = uint96(bridgeSupply);\r\n        isWhiteListed[bridge] = true;\r\n        emit Transfer(address(0), bridge, bridgeSupply);\r\n\r\n        uint96 remainingSupply = sub96(\r\n            uint96(totalSupply),\r\n            uint96(bridgeSupply),\r\n            \"mPond: Subtraction overflow in the constructor\"\r\n        );\r\n        balances[account] = remainingSupply;\r\n        delegates[account][address(0)] = remainingSupply;\r\n        isWhiteListed[account] = true;\r\n        dropBridge = dropBridgeAddress;\r\n        emit Transfer(address(0), account, uint256(remainingSupply));\r\n    }\r\n\r\n    function createConstants() internal {\r\n        name = \"Marlin Governance Token\";\r\n        symbol = \"MPOND\";\r\n        decimals = 18;\r\n        totalSupply = 10000e18;\r\n        bridgeSupply = 7000e18;\r\n        DOMAIN_TYPEHASH = keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        DELEGATION_TYPEHASH = keccak256(\r\n            \"Delegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)\"\r\n        );\r\n        UNDELEGATION_TYPEHASH = keccak256(\r\n            \"Unelegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)\"\r\n        );\r\n        admin = msg.sender;\r\n        // enableAllTranfers = true; //This is only for testing, will be false\r\n    }\r\n\r\n    function addWhiteListAddress(address _address)\r\n        external\r\n        onlyAdmin(\"Only admin can whitelist\")\r\n        returns (bool)\r\n    {\r\n        isWhiteListed[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function enableAllTransfers()\r\n        external\r\n        onlyAdmin(\"Only enable can enable all transfers\")\r\n        returns (bool)\r\n    {\r\n        enableAllTranfers = true;\r\n        return true;\r\n    }\r\n\r\n    function changeDropBridge(address _updatedBridge)\r\n        public\r\n        onlyAdmin(\"Only admin can change drop bridge\")\r\n    {\r\n        dropBridge = _updatedBridge;\r\n    }\r\n\r\n    function isWhiteListedTransfer(address _address1, address _address2)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_address1 == dropBridge) {\r\n            return true;\r\n        } else if (_address2 == dropBridge) {\r\n            return (isWhiteListed[_address1] || enableAllTranfers);\r\n        }\r\n        return\r\n            (isWhiteListed[_address1] || isWhiteListed[_address2]) ||\r\n            enableAllTranfers;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 rawAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (rawAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                rawAmount,\r\n                \"mPond::approve: amount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (addedAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                addedAmount,\r\n                \"mPond::approve: addedAmount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = add96(\r\n            allowances[msg.sender][spender],\r\n            amount,\r\n            \"mPond: increaseAllowance allowance value overflows\"\r\n        );\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 removedAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (removedAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                removedAmount,\r\n                \"mPond::approve: removedAmount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = sub96(\r\n            allowances[msg.sender][spender],\r\n            amount,\r\n            \"mPond: decreaseAllowance allowance value underflows\"\r\n        );\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n        require(\r\n            isWhiteListedTransfer(msg.sender, dst),\r\n            \"Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()\"\r\n        );\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"mPond::transfer: amount exceeds 96 bits\"\r\n        );\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 rawAmount\r\n    ) external returns (bool) {\r\n        require(\r\n            isWhiteListedTransfer(msg.sender, dst),\r\n            \"Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()\"\r\n        );\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"mPond::approve: amount exceeds 96 bits\"\r\n        );\r\n\r\n        if (spender != src && spenderAllowance != uint96(-1)) {\r\n            uint96 newAllowance = sub96(\r\n                spenderAllowance,\r\n                amount,\r\n                \"mPond::transferFrom: transfer amount exceeds spender allowance\"\r\n            );\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee, uint96 amount) public {\r\n        return _delegate(msg.sender, delegatee, amount);\r\n    }\r\n\r\n    function undelegate(address delegatee, uint96 amount) public {\r\n        return _undelegate(msg.sender, delegatee, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint96 amount\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"mPond::delegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"mPond::delegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"mPond::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee, amount);\r\n    }\r\n\r\n    function undelegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint96 amount\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(UNDELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"mPond::undelegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"mPond::undelegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"mPond::undelegateBySig: signature expired\");\r\n        return _undelegate(signatory, delegatee, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints != 0\r\n                ? checkpoints[account][nCheckpoints - 1].votes\r\n                : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        returns (uint96)\r\n    {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"mPond::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(\r\n        address delegator,\r\n        address delegatee,\r\n        uint96 amount\r\n    ) internal {\r\n        delegates[delegator][address(0)] = sub96(\r\n            delegates[delegator][address(0)],\r\n            amount,\r\n            \"mPond: delegates underflow\"\r\n        );\r\n        delegates[delegator][delegatee] = add96(\r\n            delegates[delegator][delegatee],\r\n            amount,\r\n            \"mPond: delegates overflow\"\r\n        );\r\n\r\n        emit DelegateChanged(delegator, address(0), delegatee);\r\n\r\n        _moveDelegates(address(0), delegatee, amount);\r\n    }\r\n\r\n    function _undelegate(\r\n        address delegator,\r\n        address delegatee,\r\n        uint96 amount\r\n    ) internal {\r\n        delegates[delegator][delegatee] = sub96(\r\n            delegates[delegator][delegatee],\r\n            amount,\r\n            \"mPond: undelegates underflow\"\r\n        );\r\n        delegates[delegator][address(0)] = add96(\r\n            delegates[delegator][address(0)],\r\n            amount,\r\n            \"mPond: delegates underflow\"\r\n        );\r\n        emit DelegateChanged(delegator, delegatee, address(0));\r\n        _moveDelegates(delegatee, address(0), amount);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address src,\r\n        address dst,\r\n        uint96 amount\r\n    ) internal {\r\n        require(\r\n            src != address(0),\r\n            \"mPond::_transferTokens: cannot transfer from the zero address\"\r\n        );\r\n        require(\r\n            delegates[src][address(0)] >= amount,\r\n            \"mPond: _transferTokens: undelegated amount should be greater than transfer amount\"\r\n        );\r\n        require(\r\n            dst != address(0),\r\n            \"mPond::_transferTokens: cannot transfer to the zero address\"\r\n        );\r\n\r\n        balances[src] = sub96(\r\n            balances[src],\r\n            amount,\r\n            \"mPond::_transferTokens: transfer amount exceeds balance\"\r\n        );\r\n        delegates[src][address(0)] = sub96(\r\n            delegates[src][address(0)],\r\n            amount,\r\n            \"mPond: _tranferTokens: undelegate subtraction error\"\r\n        );\r\n\r\n        balances[dst] = add96(\r\n            balances[dst],\r\n            amount,\r\n            \"mPond::_transferTokens: transfer amount overflows\"\r\n        );\r\n        delegates[dst][address(0)] = add96(\r\n            delegates[dst][address(0)],\r\n            amount,\r\n            \"mPond: _transferTokens: undelegate addition error\"\r\n        );\r\n        emit Transfer(src, dst, amount);\r\n\r\n        // _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint96 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount != 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum != 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint96 srcRepNew = sub96(\r\n                    srcRepOld,\r\n                    amount,\r\n                    \"mPond::_moveVotes: vote amount underflows\"\r\n                );\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum != 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint96 dstRepNew = add96(\r\n                    dstRepOld,\r\n                    amount,\r\n                    \"mPond::_moveVotes: vote amount overflows\"\r\n                );\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint96 oldVotes,\r\n        uint96 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(\r\n            block.number,\r\n            \"mPond::_writeCheckpoint: block number exceeds 32 bits\"\r\n        );\r\n\r\n        if (\r\n            nCheckpoints != 0 &&\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n\r\n    modifier onlyAdmin(string memory _error) {\r\n        require(msg.sender == admin, _error);\r\n        _;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNDELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhiteListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedBridge\",\"type\":\"address\"}],\"name\":\"changeDropBridge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"removedAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dropBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableAllTranfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableAllTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dropBridgeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"}],\"name\":\"isWhiteListedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"undelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"undelegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MPondLogic","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000f7f42f8f26c84898f8a32590da797c94af06104c00000000000000000000000013dd8a5e6bb1b96fb791d19a92938e90260064d7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8bd498fbbcf17e8f7abd25cb8e725a959e57c7f599f71dc058c9d9da510147aa"}]}