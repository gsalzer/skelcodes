{"status":"1","message":"OK","result":[{"SourceCode":"//\"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract LeadTimelock {\r\n    using SafeMath for uint;\r\n\r\n    uint8 private nextSubtract = 0;\r\n    uint8 private nextScheduleId = 0;\r\n    address public lead;\r\n    address[] private beneficiaries; \r\n    uint[] private scheduleList; \r\n\r\n    mapping(uint8 => uint) private schedules;\r\n    mapping(address => uint) private percentages;        \r\n    mapping(address => uint) private proportions;\r\n    \r\n    event Distributed(address executor, uint indexed round);\r\n    \r\n    constructor(address token, address[] memory _beneficiary, uint[] memory _percentages, uint[] memory _schedules) public {\r\n        lead = token;\r\n        _addVesting(_beneficiary, _percentages, _schedules);\r\n    }\r\n    \r\n    function _addVesting(address[] memory _beneficiary, uint[] memory _percentages, uint[] memory _schedules) private {\r\n        require(_beneficiary.length == _percentages.length, 'Beneficiary and percentage arrays must have the same length');\r\n        uint totalPercentages;\r\n        for(uint i = 0; i < _beneficiary.length; i++) {\r\n            beneficiaries.push(_beneficiary[i]);\r\n            percentages[_beneficiary[i]] = _percentages[i];\r\n            totalPercentages = totalPercentages.add(_percentages[i]);\r\n        }\r\n        require(totalPercentages == 100, 'Percentages must sum up to 100');\r\n        for(uint8 i = 0; i < _schedules.length; i++) {\r\n            scheduleList.push(_schedules[i]);\r\n            schedules[i] = now + _schedules[i];\r\n        }\r\n    }\r\n    \r\n    function getSchedules() external view returns(uint[] memory schedule){\r\n        return scheduleList;\r\n    }\r\n    \r\n    function currentSchedule() external view returns(uint schedule){\r\n        return scheduleList[nextScheduleId];\r\n    }\r\n    \r\n    function getPercentage(address _beneficiary) external view returns(uint percent){\r\n        return percentages[_beneficiary];\r\n    }\r\n    \r\n    function getBeneficiaries() external view returns(address[] memory beneficiary) {\r\n        return beneficiaries;\r\n    }\r\n    \r\n    function nextScheduleTime() external view returns(uint secondsLeft){\r\n        uint time = schedules[nextScheduleId];\r\n        uint nextTime = time - now;\r\n        if (time < now) {\r\n            revert ('distribute payment for previous round(s)');\r\n        } else {\r\n            return nextTime;\r\n        }\r\n    }\r\n    \r\n    function endingTime() external view returns(uint secondsLeft){\r\n        uint allTime = scheduleList.length;\r\n        uint time = schedules[uint8(allTime) - 1];\r\n        require(time > now, 'Contract has been completed');\r\n        return time - now;\r\n    }\r\n    \r\n    function _calculatePayment(address _beneficiary) private view returns(uint){\r\n        uint balance = IERC20(lead).balanceOf(address(this));\r\n        require(balance > 0, 'Empty pool');\r\n        return (percentages[_beneficiary] * balance) / ((scheduleList.length - nextSubtract) * (100));\r\n    }\r\n\r\n    function distributePayment() external {\r\n        require(now >= schedules[nextScheduleId], 'Realease time not reached');\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            proportions[beneficiaries[i]] = proportions[beneficiaries[i]].add(_calculatePayment(beneficiaries[i]));\r\n        }\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            IERC20(lead).transfer(beneficiaries[i], proportions[beneficiaries[i]]);\r\n            proportions[beneficiaries[i]] = 0;\r\n        }\r\n        nextScheduleId++; \r\n        nextSubtract++;\r\n        emit Distributed(msg.sender, nextScheduleId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiary\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_schedules\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"schedule\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiary\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchedules\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"schedule\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextScheduleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LeadTimelock","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001dd80016e3d4ae146ee2ebb484e8edd92dacc4ce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000287ecbe76553600e08379e499f8ab276be93e8f2000000000000000000000000ba7d11ee74bec716b1fe93fb330c4fcbcd3cc54e000000000000000000000000b1eae79c0c76ca4bfca038c56ec1ca16b4da26fd0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000015000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000054600000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000004f1a00000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000000000000000009e34000000000000000000000000000000000000000000000000000000000000c5c1000000000000000000000000000000000000000000000000000000000000ed4e00000000000000000000000000000000000000000000000000000000000114db0000000000000000000000000000000000000000000000000000000000013c6800000000000000000000000000000000000000000000000000000000000163f500","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8d58a9e2a4ce4859524a17bfbdb59d32e779b9b51b7a91049656caafe0e23ec3"}]}