{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ninterface ISTAKE {\r\n    function stakeOf(address account) external view returns (uint);\r\n    function totalStake() external view returns (uint);\r\n}\r\ninterface IPROFIESTAKE {\r\n    function pureStakeOf(address account) external view returns (uint);\r\n    function totalStake() external view returns (uint);\r\n}\r\n\r\ninterface IPOWER {\r\n    function powerOf(address account) external view returns (uint);\r\n    function currentUserCount() external view returns (uint32);\r\n    function userList(uint32 i) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ETH2_READER is Ownable{\r\n    IPROFIESTAKE public fixedStakeContract;\r\n    ISTAKE public floatStakeContract;\r\n    IPOWER public powerContract;\r\n\r\n    function setFixed(IPROFIESTAKE _target)onlyOwner public {\r\n        fixedStakeContract = _target;\r\n    }\r\n\r\n    function setFloat(ISTAKE _target)onlyOwner public {\r\n        floatStakeContract = _target;\r\n    }\r\n\r\n    function setPower(IPOWER _target)onlyOwner public {\r\n        powerContract = _target;\r\n    }\r\n\r\n    function powerOf(address _addr) public view returns (uint) {\r\n        uint sum = 0;\r\n        uint p = powerContract.powerOf(_addr);\r\n        sum = sum + fixedStakeContract.pureStakeOf(_addr) * 1000 / 1 ether;\r\n        sum = sum + floatStakeContract.stakeOf(_addr) * 100 / 1 ether;\r\n        sum = sum * (10+p)/10;\r\n        return sum;\r\n    }\r\n\r\n    function totalPower() public view returns (uint) {\r\n        uint sum = 0;\r\n        sum = sum + fixedStakeContract.totalStake() * 1000 / 1 ether;\r\n        sum = sum + floatStakeContract.totalStake() *100 / 1 ether;\r\n\r\n        uint count = powerContract.currentUserCount();\r\n        for(uint32 i = 0;i<count;i++){\r\n            address addr = powerContract.userList(i);\r\n            uint p = powerContract.powerOf(addr);\r\n            uint pSum = fixedStakeContract.pureStakeOf(addr) * 1000 / 1 ether;\r\n            pSum = pSum + floatStakeContract.stakeOf(addr) * 100 / 1 ether;\r\n            sum = sum + pSum * p /10;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"fixedStakeContract\",\"outputs\":[{\"internalType\":\"contract IPROFIESTAKE\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floatStakeContract\",\"outputs\":[{\"internalType\":\"contract ISTAKE\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerContract\",\"outputs\":[{\"internalType\":\"contract IPOWER\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"powerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPROFIESTAKE\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setFixed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISTAKE\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setFloat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPOWER\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setPower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETH2_READER","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b2367471747a474b425ecd75e9f795fd94ba98a9c81e958091c1dcc2195c8b1f"}]}