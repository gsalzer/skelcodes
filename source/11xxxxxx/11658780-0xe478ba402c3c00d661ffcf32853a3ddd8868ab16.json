{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.1;\r\n\r\n/**\r\n * @title Context\r\n * @dev Provide context functions\r\n */\r\nabstract contract Context {\r\n    address public owner;            //Contract owner address\r\n    bool public isContractActive;           //Make sure this contract can be used or not\r\n    \r\n    /**\r\n     * Make sure the sender is the owner of contract\r\n     */ \r\n    modifier onlyOwner{\r\n        require(_msgSender() == owner, \"Only owner can process\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Make sure the contract is active to execute\r\n    */ \r\n    modifier contractActive{\r\n        require(isContractActive, \"This contract is deactived\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * \r\n    * Implementations:\r\n    *   1. Set the owner of contract\r\n    *   2. Set contract is active\r\n    */\r\n    constructor(){\r\n       owner = _msgSender();           //Set owner address when contract is created\r\n       isContractActive = true;        //Contract is active when it is created\r\n    }\r\n\r\n    /**\r\n     * Get sender address\r\n     */ \r\n    function _msgSender() internal view returns(address){\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Get current time in unix timestamp\r\n     */\r\n    function _now() internal view returns(uint){\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * Update contract status to make sure this contract can be executed or not\r\n     */\r\n    function setContractStatus(bool status) external onlyOwner{\r\n        require(isContractActive != status,\"The current contract's status is the same with updating status\");\r\n        isContractActive = status;\r\n    }\r\n\r\n    /**\r\n    * @dev Change contract's owner\r\n    * @return If success return true; else return false\r\n    * \r\n    * Requirements:\r\n    *   1. Only current owner can execute\r\n    *   2. `newOwner` is not zero address\r\n    *   3. `newOwner` is not current owner\r\n    * \r\n    * Implementations:\r\n    *   1. Validate requirements\r\n    *   2. Set current owner is newOwner\r\n    *   3. Emit Events\r\n    *   4. Return result\r\n    */\r\n    function setOwner(address newOwner) external onlyOwner returns(bool){\r\n        require(newOwner != address(0), \"New owner is zero address\");\r\n        require(newOwner != owner, \"New owner is current owner\");\r\n\r\n        owner = newOwner;\r\n\r\n        emit OwnerChanged(owner);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Event that notifies contract's owner has been changed to `newOwner` \r\n    */\r\n    event OwnerChanged(address newOwner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20Token {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    /** \r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function burn(address account, uint amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nabstract contract ERC20Token is IERC20Token, Context {\r\n    using SafeMath for uint;\r\n    \r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n    mapping (address => uint) internal _balances;\r\n    uint internal _totalSupply;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    \r\n    function totalSupply() external view override virtual returns (uint){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) external override virtual view returns (uint){\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public override virtual contractActive returns(bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public virtual contractActive override returns(bool) {\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint value) public virtual override returns(bool) {\r\n        return _approve(_msgSender(), spender, value);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public virtual view override returns (uint) {\r\n        return _allowance(owner, spender);\r\n    }\r\n\r\n    function burn(address account, uint amount) external virtual override onlyOwner {\r\n        _burn(account, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw ERC-20 token of this contract\r\n     */ \r\n    function withdrawToken(address tokenAddress) external onlyOwner contractActive{\r\n        require(tokenAddress != address(0), \"Contract address is zero address\");\r\n        require(tokenAddress != address(this), \"Can not transfer self token\");\r\n        \r\n        IERC20Token tokenContract = IERC20Token(tokenAddress);\r\n        uint tokenBalance = tokenContract.balanceOf(address(this));\r\n        require(tokenBalance > 0, \"Balance is zero\");\r\n        \r\n        tokenContract.transfer(owner, tokenBalance);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(amount > 0, \"Transfer amount should be greater than zero\");\r\n        require(_balances[sender] >= amount);\r\n        \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _transferFrom(address sender, address recipient, uint amount) internal returns(bool) {\r\n        require(_allowance(sender, _msgSender()) >= amount, \"Allowance is not enough\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowance(sender, _msgSender()).sub(amount));\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint value) internal returns (bool){\r\n        require(value >= 0,\"Approval value can not be negative\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function _allowance(address owner, address spender) internal view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint amount) internal virtual returns(bool){\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface IBNFToken{\r\n    function createShareHolder(address account, uint amount) external returns(bool);\r\n\r\n    /**\r\n    * @dev Transfer BNF token from sender to recipient when sender transfers BNU token to recipient\r\n    */\r\n    function shareholderTransfer(address sender, address recipient, uint amount) external returns(bool);\r\n}\r\n\r\ncontract BNFToken is ERC20Token, IBNFToken {\r\n    using SafeMath for uint;\r\n    \r\n    modifier onlyTokenSaleContract{\r\n        require(_msgSender() == _tokenSaleContractAddress, \"BNFToken: Only factory contract can process\");\r\n        _;\r\n    }\r\n    \r\n    address public _tokenSaleContractAddress;\r\n    uint public _byteNextPercent;\r\n    address public _bnfSwapContractAddress;\r\n    address public _byteNextFundAddress;\r\n    \r\n    address [] _holderAddresses;\r\n\r\n    /**\r\n     * @dev Generate token information\r\n    */\r\n    constructor () {\r\n        name = 'ByteNext Fund';\r\n        symbol = 'BNF';\r\n        decimals = 18;\r\n        _totalSupply = 0;\r\n        \r\n        _byteNextPercent = 20;\r\n        _byteNextFundAddress = 0x77f42723192B4e9D76f752F3404Fff46Dc535ade;\r\n        _tokenSaleContractAddress = 0xA83D81113F57d63AF7EFDC4a12350365c7871266;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set factory contract address\r\n     */ \r\n    function setTokenSaleContractAddress(address contractAddress) external onlyOwner{\r\n        _tokenSaleContractAddress = contractAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set BNF swap contract address\r\n     */ \r\n    function setBNFSwapContractAddress(address contractAddress) external onlyOwner{\r\n        _bnfSwapContractAddress = contractAddress;\r\n    }\r\n    \r\n    /**\r\n     * Token can not be transfered directly between holders\r\n     */ \r\n    function transfer(address to, uint value) public pure override returns(bool){\r\n        revert(\"The transfer function is disabled\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Token can only transfered between holders via swap contract\r\n    */ \r\n    function transferFrom(address sender, address recipient, uint amount) public override returns(bool){\r\n        require(_msgSender() == _bnfSwapContractAddress, \"BNF token can be only transferred by BNF swap contract\");\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Create amount BNF token to account and increase totalSupply\r\n     * \r\n     * Details: \r\n     *      When an investor purchases BNT token in seed or private round of token sale times,\r\n     *      an new BNF token will be issued to make sure that investor's share\r\n     *      Note that: ByteNext always takes _byteNextPercent of this funds \r\n     *      so that another BNF token amount will be also issued and added to ByteNext address\r\n     * Implementations\r\n     * 1. Make sure: This funtion can be only called from BNT token address and this contract should be active to process\r\n     * 2. Validate account address\r\n     * 3. Increase total supply of BNF token, issue more token and add to account address\r\n     * 4. Add account to list of holders\r\n     * 5. Calculate to issue token amount for ByteNext to make sure taking _byteNextPercent of this fund\r\n     * 6. emit Event\r\n     */ \r\n    function createShareHolder(address account, uint amount) external override onlyTokenSaleContract contractActive returns(bool){\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        \r\n        if(!_isHolderExisted(account))\r\n            _holderAddresses.push(account);\r\n        \r\n        _calculateByteNextBNF(amount);\r\n        \r\n        emit Transfer(address(0), account, amount);\r\n        emit Issue(account, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check whether holder exists or not\r\n     */ \r\n    function _isHolderExisted(address account) internal view returns(bool){\r\n        for(uint index = 0; index < _holderAddresses.length; index++){\r\n            if(_holderAddresses[index] == account)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw share\r\n     * When an investors makes a withdrawal request, their BNF will be converted to ETH\r\n     * Investors will pay token to take ETH\r\n     * \r\n     * Implementations \r\n     * 1. Validate amount should be greater than or equals sender balance\r\n     * 2. Calculate percentage of share holder to calculate ETH to pay\r\n     * 3. Reduce sender token balance and token supply balance\r\n     * 4. emit Event\r\n     */\r\n    function withdrawShare(uint amount) external returns(bool){\r\n        address payable sender = payable(_msgSender());\r\n        uint tokenBalance = _balances[sender];\r\n        require(tokenBalance >= amount, \"BNF token balance is not enough\");\r\n        \r\n        uint ethBalance = address(this).balance;\r\n        require(ethBalance > 0, \"This fund has had no profit yet\");\r\n        \r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        uint ethReceive = amount.mul(ethBalance).div(_totalSupply);\r\n        sender.transfer(ethReceive);\r\n        \r\n        emit WithdrawShare(sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *@dev withdraw all ETH of this contract\r\n     *\r\n     * When all investors withdrawed 100% share,\r\n     * the owner of contract can withdarw all ETH of this contract if ETH is transfered\r\n     * \r\n     */ \r\n    function withdrawETH() external onlyOwner{\r\n        require(_totalSupply == 0,\"Can only withdraw all ETH when contract has no shareholder\");\r\n        uint balance = address(this).balance;\r\n        require(balance > 0, \"Balance is zero\");\r\n        \r\n        msg.sender.transfer(balance);\r\n        emit WithdrawETH(_msgSender(), balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev \r\n     *      Pay profit for all shareholders base on shareholders' percentage and ETH balance percentage\r\n     *      This function can be called any time\r\n     * \r\n     * Implements\r\n     * MAKE SURE: This function can be only called by contract's owner\r\n     * 1. Validate ETH balance\r\n     * 2. Calculate ETH to payProfit\r\n     * 3. Calculate and pay annual profit for shareholders\r\n     * 4. emit Event\r\n     */ \r\n    function payAnnualProfit(uint percentage) external onlyOwner contractActive{\r\n        require(percentage > 0 && percentage < 100, \"Percentage should be greater than zero and less than 100\");\r\n        uint ethBalance = address(this).balance;\r\n        require(ethBalance > 0, \"Balance is zero\");\r\n        \r\n        require(_holderAddresses.length > 0, \"No shareholder found\");\r\n        \r\n        uint totalEthToPay = ethBalance.mul(100).div(percentage);\r\n        for(uint index = 0; index < _holderAddresses.length; index++){\r\n            address holderAddress = _holderAddresses[index];\r\n            uint ethToPay = _balances[holderAddress].mul(totalEthToPay).div(_totalSupply);\r\n            \r\n            payable(holderAddress).transfer(ethToPay);\r\n        }\r\n        \r\n        emit PayAnnualProfit(_now());\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer BNF token from sender to recipient when sender transfers BNU token to recipient\r\n    *\r\n    * Implementations:\r\n    *   1. Add recipent to shareholder list if does not exists\r\n    *   2. Transfer `amount` BNF token from `sender` to `recipient`\r\n    */\r\n    function shareholderTransfer(address sender, address recipient, uint amount) external override onlyTokenSaleContract contractActive returns(bool){\r\n        if(!_isHolderExisted(recipient))\r\n            _holderAddresses.push(recipient);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate ByteNext BNF amount when BNF token minted\r\n     */\r\n    function _calculateByteNextBNF(uint investAmount) internal{\r\n        uint investorPercent = uint(100).sub(_byteNextPercent);\r\n        \r\n        //Calculate token to minted for ByteNext to remain _byteNextPercent%;\r\n        uint amountToMint = investAmount.mul(_byteNextPercent).div(investorPercent);\r\n        \r\n        //Total supply\r\n        _totalSupply = _totalSupply.add(amountToMint);\r\n        _balances[_byteNextFundAddress] = _balances[_byteNextFundAddress].add(amountToMint);\r\n        \r\n        if(!_isHolderExisted(_byteNextFundAddress))\r\n            _holderAddresses.push(_byteNextFundAddress);\r\n        \r\n        emit Issue(_byteNextFundAddress, amountToMint);\r\n        emit Transfer(address(0), _byteNextFundAddress, amountToMint);\r\n    }\r\n\r\n    /**\r\n    * @dev Enable to receive ETH\r\n     */\r\n    receive () external payable{}\r\n\r\n    event Issue(address account, uint amount);\r\n    event WithdrawShare(address account, uint amount);\r\n    event WithdrawETH(address account, uint amount);\r\n    event PayAnnualProfit(uint time);\r\n}\r\n\r\n//SPDX-License-Identifier: MIT","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PayAnnualProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawShare\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bnfSwapContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_byteNextFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_byteNextPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenSaleContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createShareHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"payAnnualProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBNFSwapContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setTokenSaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shareholderTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BNFToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0eac39c2d7f0262ecec2b16e4c4a8c7f92da219a9114cccc7f49532853523941"}]}