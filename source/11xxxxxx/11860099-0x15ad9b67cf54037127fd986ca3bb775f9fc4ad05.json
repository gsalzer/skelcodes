{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/PToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC721.sol\\\";\\r\\nimport \\\"../interface/IPToken.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"../math/UnsignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol non-fungible position token implementation\\r\\n */\\r\\ncontract PToken is IERC721, IPToken, ERC721 {\\r\\n\\r\\n    using UnsignedSafeMath for uint256;\\r\\n\\r\\n    // Pool address this PToken associated with\\r\\n    address private _pool;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Total ever minted PToken\\r\\n    uint256 private _totalMinted;\\r\\n\\r\\n    // Total existent PToken\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    // Mapping from tokenId to Position\\r\\n    mapping (uint256 => Position) private _tokenIdPosition;\\r\\n\\r\\n    modifier _pool_() {\\r\\n        require(msg.sender == _pool, \\\"PToken: called by non-associative pool, probably the original pool has been migrated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_, address pool_) {\\r\\n        require(pool_ != address(0), \\\"PToken: construct with 0 address pool\\\");\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _pool = pool_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{setPool}\\r\\n     */\\r\\n    function setPool(address newPool) public override {\\r\\n        require(newPool != address(0), \\\"PToken: setPool to 0 address\\\");\\r\\n        require(msg.sender == _pool, \\\"PToken: setPool caller is not current pool\\\");\\r\\n        _pool = newPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{pool}\\r\\n     */\\r\\n    function pool() public view override returns (address) {\\r\\n        return _pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{name}\\r\\n     */\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{symbol}\\r\\n     */\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{totalMinted}\\r\\n     */\\r\\n    function totalMinted() public view override returns (uint256) {\\r\\n        return _totalMinted;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{totalSupply}\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{exists}\\r\\n     */\\r\\n    function exists(address owner) public view override returns (bool) {\\r\\n        return _exists(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{exists}\\r\\n     */\\r\\n    function exists(uint256 tokenId) public view override returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{getPosition}\\r\\n     */\\r\\n    function getPosition(address owner) public view override returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    ) {\\r\\n        require(_exists(owner), \\\"PToken: getPosition for nonexistent owner\\\");\\r\\n        Position storage p = _tokenIdPosition[_ownerTokenId[owner]];\\r\\n        return (\\r\\n            p.volume,\\r\\n            p.cost,\\r\\n            p.lastCumuFundingRate,\\r\\n            p.margin,\\r\\n            p.lastUpdateTimestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{getPosition}\\r\\n     */\\r\\n    function getPosition(uint256 tokenId) public view override returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    ) {\\r\\n        require(_exists(tokenId), \\\"PToken: getPosition for nonexistent tokenId\\\");\\r\\n        Position storage p = _tokenIdPosition[tokenId];\\r\\n        return (\\r\\n            p.volume,\\r\\n            p.cost,\\r\\n            p.lastCumuFundingRate,\\r\\n            p.margin,\\r\\n            p.lastUpdateTimestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{mint}\\r\\n     */\\r\\n    function mint(address owner, uint256 margin) public override _pool_ {\\r\\n        require(owner != address(0), \\\"PToken: mint to 0 address\\\");\\r\\n        require(!_exists(owner), \\\"PToken: mint to existent owner\\\");\\r\\n\\r\\n        _totalMinted = _totalMinted.add(1);\\r\\n        _totalSupply = _totalSupply.add(1);\\r\\n        uint256 tokenId = _totalMinted;\\r\\n        require(!_exists(tokenId), \\\"PToken: mint to existent tokenId\\\");\\r\\n\\r\\n        _ownerTokenId[owner] = tokenId;\\r\\n        _tokenIdOwner[tokenId] = owner;\\r\\n        Position storage p = _tokenIdPosition[tokenId];\\r\\n        p.margin = margin;\\r\\n\\r\\n        emit Transfer(address(0), owner, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{update}\\r\\n     */\\r\\n    function update(\\r\\n        address owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    ) public override _pool_\\r\\n    {\\r\\n        require(_exists(owner), \\\"PToken: update to nonexistent owner\\\");\\r\\n        Position storage p = _tokenIdPosition[_ownerTokenId[owner]];\\r\\n        p.volume = volume;\\r\\n        p.cost = cost;\\r\\n        p.lastCumuFundingRate = lastCumuFundingRate;\\r\\n        p.margin = margin;\\r\\n        p.lastUpdateTimestamp = lastUpdateTimestamp;\\r\\n\\r\\n        emit Update(owner, volume, cost, lastCumuFundingRate, margin, lastUpdateTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPToken}.{burn}\\r\\n     */\\r\\n    function burn(address owner) public override _pool_ {\\r\\n        require(_exists(owner), \\\"PToken: burn nonexistent owner\\\");\\r\\n        uint256 tokenId = _ownerTokenId[owner];\\r\\n        Position storage p = _tokenIdPosition[tokenId];\\r\\n        require(p.volume == 0, \\\"PToken: burn non empty token\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(1);\\r\\n\\r\\n        // clear ownership and approvals\\r\\n        delete _ownerTokenId[owner];\\r\\n        delete _tokenIdOwner[tokenId];\\r\\n        delete _tokenIdPosition[tokenId];\\r\\n        delete _tokenIdOperator[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `operator` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `operator` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address\\r\\n     * clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address operator, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first\\r\\n     * that contract recipients are aware of the ERC721 protocol to prevent\\r\\n     * tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol non-fungible position token interface\\r\\n */\\r\\ninterface IPToken is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner`'s position is updated\\r\\n     */\\r\\n    event Update(\\r\\n        address indexed owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Position struct\\r\\n     */\\r\\n    struct Position {\\r\\n        // Position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // Position cost, long position cost is positive, short position cost is negative\\r\\n        int256 cost;\\r\\n        // The last cumuFundingRate since last funding settlement for this position\\r\\n        // The overflow for this value is intended\\r\\n        int256 lastCumuFundingRate;\\r\\n        // Margin associated with this position\\r\\n        uint256 margin;\\r\\n        // Last timestamp this position updated\\r\\n        uint256 lastUpdateTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set pool address of position token\\r\\n     * pool is the only controller of this contract\\r\\n     * can only be called by current pool\\r\\n     */\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of current pool\\r\\n     */\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of ever minted position tokens, including those burned\\r\\n     */\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of existent position tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if `owner` owns a position token in this contract\\r\\n     */\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if position token of `tokenId` exists\\r\\n     */\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the position of owner `owner`\\r\\n     *\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function getPosition(address owner) external view returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the position of token `tokenId`\\r\\n     *\\r\\n     * `tokenId` must exist\\r\\n     */\\r\\n    function getPosition(uint256 tokenId) external view returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Mint a position token for `owner` with intial margin of `margin`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` cannot be zero address\\r\\n     * `owner` must not exist before calling\\r\\n     */\\r\\n    function mint(address owner, uint256 margin) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Update the position token for `owner`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function update(\\r\\n        address owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Burn the position token owned of `owner`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function burn(address owner) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC721.sol\\\";\\r\\nimport \\\"../interface/IERC721Receiver.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC721 Non-Fungible Token Implementation\\r\\n *\\r\\n * Exert uniqueness of owner: one owner can only have one token\\r\\n */\\r\\ncontract ERC721 is IERC721, ERC165 {\\r\\n\\r\\n    using Address for address;\\r\\n\\r\\n    /*\\r\\n     * Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n     * which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n     */\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\r\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\r\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\r\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\r\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\r\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\r\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\r\\n     *\\r\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x081812fc ^ 0xe985e9c5 ^\\r\\n     *        0x095ea7b3 ^ 0xa22cb465 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    // Mapping from owner address to tokenId\\r\\n    // tokenId starts from 1, 0 is reserved for nonexistent token\\r\\n    // One owner can only own one token in this contract\\r\\n    mapping (address => uint256) _ownerTokenId;\\r\\n\\r\\n    // Mapping from tokenId to owner\\r\\n    mapping (uint256 => address) _tokenIdOwner;\\r\\n\\r\\n    // Mapping from tokenId to approved operator\\r\\n    mapping (uint256 => address) _tokenIdOperator;\\r\\n\\r\\n    // Mapping from owner to operator for all approval\\r\\n    mapping (address => mapping (address => bool)) _ownerOperator;\\r\\n\\r\\n\\r\\n    constructor () {\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{balanceOf}\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        if (_exists(owner)) {\\r\\n            return 1;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{ownerOf}\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: ownerOf for nonexistent tokenId\\\");\\r\\n        return _tokenIdOwner[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{getApproved}\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: getApproved for nonexistent tokenId\\\");\\r\\n        return _tokenIdOperator[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{isApprovedForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\r\\n        require(_exists(owner), \\\"ERC721: isApprovedForAll for nonexistent owner\\\");\\r\\n        return _ownerOperator[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{approve}\\r\\n     */\\r\\n    function approve(address operator, uint256 tokenId) public override {\\r\\n        require(msg.sender == ownerOf(tokenId), \\\"ERC721: approve caller is not owner\\\");\\r\\n        _approve(msg.sender, operator, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{setApprovalForAll}\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public override {\\r\\n        require(_exists(msg.sender), \\\"ERC721: setApprovalForAll caller is not existent owner\\\");\\r\\n        _ownerOperator[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{transferFrom}\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\r\\n        _validateTransfer(msg.sender, from, to, tokenId);\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{safeTransferFrom}\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721}.{safeTransferFrom}\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\r\\n        public override\\r\\n    {\\r\\n        _validateTransfer(msg.sender, from, to, tokenId);\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if owner exists.\\r\\n     */\\r\\n    function _exists(address owner) internal view returns (bool) {\\r\\n        return _ownerTokenId[owner] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if tokenId exists.\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return _tokenIdOwner[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to manage `tokenId`, owned by `owner`\\r\\n     *\\r\\n     * Validation check on parameters should be carried out before calling this function.\\r\\n     */\\r\\n    function _approve(address owner, address operator, uint256 tokenId) internal {\\r\\n        _tokenIdOperator[tokenId] = operator;\\r\\n        emit Approval(owner, operator, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate transferFrom parameters\\r\\n     */\\r\\n    function _validateTransfer(address operator, address from, address to, uint256 tokenId)\\r\\n        internal view\\r\\n    {\\r\\n        require(from == ownerOf(tokenId), \\\"ERC721: transfer not owned token\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to 0 address\\\");\\r\\n        require(!_exists(to), \\\"ERC721: transfer to already existent owner\\\");\\r\\n        require(\\r\\n            operator == from || _tokenIdOperator[tokenId] == operator || _ownerOperator[from][operator],\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Validation check on parameters should be carried out before calling this function.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\r\\n        // clear previous ownership and approvals\\r\\n        delete _ownerTokenId[from];\\r\\n        delete _tokenIdOperator[tokenId];\\r\\n\\r\\n        // set up new owner\\r\\n        _ownerTokenId[to] = tokenId;\\r\\n        _tokenIdOwner[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract\\r\\n     * recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Validation check on parameters should be carried out before calling this function.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     *      The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID.\\r\\n     * @param to target address that will receive the tokens.\\r\\n     * @param tokenId uint256 ID of the token to be transferred.\\r\\n     * @param data bytes optional data to send along with the call.\\r\\n     * @return bool whether the call correctly returned the expected magic value.\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data)\\r\\n        internal returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\r\\n            IERC721Receiver(to).onERC721Received.selector,\\r\\n            msg.sender,\\r\\n            from,\\r\\n            tokenId,\\r\\n            data\\r\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/math/UnsignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Unsigned safe math\\r\\n */\\r\\nlibrary UnsignedSafeMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Addition of unsigned integers, counterpart to `+`\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"UnsignedSafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction of unsigned integers, counterpart to `-`\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(a >= b, \\\"UnsignedSafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication of unsigned integers, counterpart to `*`\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"UnsignedSafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of unsigned integers, counterpart to `/`\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modulo of unsigned integers, counterpart to `%`\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: modulo by zero\\\");\\r\\n        uint256 c = a % b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via\\r\\n     * {IERC721-safeTransferFrom} by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient,\\r\\n     * the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\r\\n        external returns (bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000007137cc9f252dc405dadc35f597da8b32e865360300000000000000000000000000000000000000000000000000000000000000134465726920506f736974696f6e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034450540000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}