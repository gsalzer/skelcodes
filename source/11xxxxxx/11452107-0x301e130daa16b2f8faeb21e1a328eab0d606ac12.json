{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gelatonetwork/core/contracts/external/Address.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/external/IERC20.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/external/Ownable.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/external/SafeERC20.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @notice Adapted by @gitpusha from Gelato to include error strings.\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value, string memory context)\\n        internal\\n    {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value),\\n            context\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        string memory context\\n    )\\n        internal\\n    {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value),\\n            context\\n        );\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value, string memory context)\\n        internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            string(\\n                abi.encodePacked(\\n                    context, \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n                )\\n            )\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value),\\n            context\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value,\\n        string memory context\\n    )\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance),\\n            context\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value,\\n        string memory context\\n    )\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(\\n            address(this),\\n            spender\\n        ).sub(\\n            value,\\n            string(abi.encodePacked(context, \\\"SafeERC20: decreased allowance below zero\\\")\\n        ));\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance),\\n            context\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param context Debugging Info for the revert message (addition to original library)\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data, string memory context)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            address(token).isContract(),\\n            string(abi.encodePacked(context, \\\"SafeERC20: call to non-contract\\\"))\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(\\n            success, string(abi.encodePacked(context, \\\"SafeERC20: low-level call failed\\\"))\\n        );\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                string(\\n                    abi.encodePacked(context, \\\"SafeERC20: ERC20 operation did not succeed\\\")\\n                )\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/external/SafeMath.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_actions/GelatoActionsStandard.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {IGelatoAction} from \\\"./IGelatoAction.sol\\\";\\nimport {DataFlow} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n/// @title GelatoActionsStandard\\n/// @dev find all the NatSpecs inside IGelatoAction\\nabstract contract GelatoActionsStandard is IGelatoAction {\\n\\n    string internal constant OK = \\\"OK\\\";\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public immutable thisActionAddress;\\n\\n    constructor() public { thisActionAddress = address(this); }\\n\\n    modifier delegatecallOnly(string memory _tracingInfo) {\\n        require(\\n            thisActionAddress != address(this),\\n            string(abi.encodePacked(_tracingInfo, \\\":delegatecallOnly\\\"))\\n        );\\n        _;\\n    }\\n\\n    function termsOk(\\n        uint256,  // _taskReceiptId\\n        address,  // _userProxy\\n        bytes calldata,  // _actionData\\n        DataFlow,\\n        uint256,  // _value: for actions that send ETH around\\n        uint256  // cycleId\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns(string memory)  // actionTermsOk\\n    {\\n        // Standard return value for actionConditions fulfilled and no erros:\\n        return OK;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_actions/IGelatoAction.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport {DataFlow} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    event LogOneWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination\\n    );\\n\\n    event LogTwoWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination,\\n        address receiveToken,\\n        uint256 receiveAmount,\\n        address receiver\\n    );\\n\\n    /// @notice Providers can use this for pre-execution sanity checks, to prevent reverts.\\n    /// @dev GelatoCore checks this in canExec and passes the parameters.\\n    /// @param _taskReceiptId The id of the task from which all arguments are passed.\\n    /// @param _userProxy The userProxy of the task. Often address(this) for delegatecalls.\\n    /// @param _actionData The encoded payload to be used in the Action.\\n    /// @param _dataFlow The dataFlow of the Action.\\n    /// @param _value A special param for ETH sending Actions. If the Action sends ETH\\n    ///  in its Action function implementation, one should expect msg.value therein to be\\n    ///  equal to _value. So Providers can check in termsOk that a valid ETH value will\\n    ///  be used because they also have access to the same value when encoding the\\n    ///  execPayload on their ProviderModule.\\n    /// @param _cycleId For tasks that are part of a Cycle.\\n    /// @return Returns OK, if Task can be executed safely according to the Provider's\\n    ///  terms laid out in this function implementation.\\n    function termsOk(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        bytes calldata _actionData,\\n        DataFlow _dataFlow,\\n        uint256 _value,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(string memory);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoSysAdmin.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\ninterface IGelatoSysAdmin {\\n    struct GelatoSysAdminInitialState {\\n        address gelatoGasPriceOracle;\\n        bytes oracleRequestData;\\n        uint256 gelatoMaxGas;\\n        uint256 internalGasRequirement;\\n        uint256 minExecutorStake;\\n        uint256 executorSuccessShare;\\n        uint256 sysAdminSuccessShare;\\n        uint256 totalSuccessShare;\\n    }\\n\\n    // Events\\n    event LogGelatoGasPriceOracleSet(address indexed oldOracle, address indexed newOracle);\\n    event LogOracleRequestDataSet(bytes oldData, bytes newData);\\n\\n    event LogGelatoMaxGasSet(uint256 oldMaxGas, uint256 newMaxGas);\\n    event LogInternalGasRequirementSet(uint256 oldRequirment, uint256 newRequirment);\\n\\n    event LogMinExecutorStakeSet(uint256 oldMin, uint256 newMin);\\n\\n    event LogExecutorSuccessShareSet(uint256 oldShare, uint256 newShare, uint256 total);\\n    event LogSysAdminSuccessShareSet(uint256 oldShare, uint256 newShare, uint256 total);\\n\\n    event LogSysAdminFundsWithdrawn(uint256 oldBalance, uint256 newBalance);\\n\\n    // State Writing\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newOracle Address of new oracle\\n    function setGelatoGasPriceOracle(address _newOracle) external;\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _requestData The encoded payload for the staticcall to the oracle.\\n    function setOracleRequestData(bytes calldata _requestData) external;\\n\\n    /// @notice Assign new maximum gas limit providers can consume in executionWrapper()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMaxGas New maximum gas limit\\n    function setGelatoMaxGas(uint256 _newMaxGas) external;\\n\\n    /// @notice Assign new interal gas limit requirement for exec()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newRequirement New internal gas requirement\\n    function setInternalGasRequirement(uint256 _newRequirement) external;\\n\\n    /// @notice Assign new minimum executor stake\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMin New minimum executor stake\\n    function setMinExecutorStake(uint256 _newMin) external;\\n\\n    /// @notice Assign new success share for executors to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setExecutorSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Assign new success share for sysAdmin to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setSysAdminSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Withdraw sysAdmin funds\\n    /// @dev Only callable by sysAdmin\\n    /// @param _amount Amount to withdraw\\n    /// @param _to Address to receive the funds\\n    function withdrawSysAdminFunds(uint256 _amount, address payable _to) external returns(uint256);\\n\\n    // State Reading\\n    /// @notice Unaccounted tx overhead that will be refunded to executors\\n    function EXEC_TX_OVERHEAD() external pure returns(uint256);\\n\\n    /// @notice Addess of current Gelato Gas Price Oracle\\n    function gelatoGasPriceOracle() external view returns(address);\\n\\n    /// @notice Getter for oracleRequestData state variable\\n    function oracleRequestData() external view returns(bytes memory);\\n\\n    /// @notice Gas limit an executor has to submit to get refunded even if actions revert\\n    function gelatoMaxGas() external view returns(uint256);\\n\\n    /// @notice Internal gas limit requirements ti ensure executor payout\\n    function internalGasRequirement() external view returns(uint256);\\n\\n    /// @notice Minimum stake required from executors\\n    function minExecutorStake() external view returns(uint256);\\n\\n    /// @notice % Fee executors get as a reward for a successful execution\\n    function executorSuccessShare() external view returns(uint256);\\n\\n    /// @notice Total % Fee executors and sysAdmin collectively get as a reward for a successful execution\\n    /// @dev Saves a state read\\n    function totalSuccessShare() external view returns(uint256);\\n\\n    /// @notice Get total fee providers pay executors for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function executorSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns(uint256);\\n\\n    /// @notice % Fee sysAdmin gets as a reward for a successful execution\\n    function sysAdminSuccessShare() external view returns(uint256);\\n\\n    /// @notice Get total fee providers pay sysAdmin for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function sysAdminSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns(uint256);\\n\\n    /// @notice Get sysAdminds funds\\n    function sysAdminFunds() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ActionWithdrawLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@gelatonetwork/core/contracts/external/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@gelatonetwork/core/contracts/external/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@gelatonetwork/core/contracts/external/SafeMath.sol\\\";\\nimport {\\n    GelatoActionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_actions/GelatoActionsStandard.sol\\\";\\nimport {\\n    IGelatoSysAdmin\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoSysAdmin.sol\\\";\\nimport {OracleAggregator} from \\\"./OracleAggregator.sol\\\";\\nimport {\\n    IConditionalTokens,\\n    IERC1155,\\n    IFixedProductMarketMaker\\n} from \\\"./dapp_interfaces/conditional_tokens/IConditionalTokens.sol\\\";\\nimport {IGasPriceOracle} from \\\"./dapp_interfaces/chainlink/IGasPriceOracle.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./dapp_interfaces/uniswap_v2/IUniswapV2.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title ActionWithdrawLiquidity\\n/// @author @hilmarx\\n/// @notice Gelato Action that\\n///  1) withdraws conditional tokens from FPMM\\n///  2) merges position on conditional tokens contract\\n///  3) transfers merged tokens back to user\\ncontract ActionWithdrawLiquidity is GelatoActionsStandard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event LogWithdrawSuccess(\\n        uint256 indexed withdrawAmount,\\n        uint256 indexed fee\\n    );\\n\\n    IGelatoSysAdmin public immutable gelatoCore;\\n    // solhint-disable var-name-mixedcase\\n    address public immutable ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // solhint-disable var-name-mixedcase\\n    IERC20 public immutable WETH;\\n    // solhint-disable const-name-snakecase\\n    uint256 public constant OVERHEAD = 160000;\\n    IUniswapV2Router02 public immutable uniRouter;\\n    OracleAggregator public immutable oracleAggregator;\\n\\n    constructor(\\n        IGelatoSysAdmin _gelatoCore,\\n        IERC20 _weth,\\n        IUniswapV2Router02 _uniRouter,\\n        OracleAggregator _oracleAggregator\\n    ) public {\\n        gelatoCore = _gelatoCore;\\n        WETH = _weth;\\n        uniRouter = _uniRouter;\\n        oracleAggregator = _oracleAggregator;\\n    }\\n\\n    // ======= ACTION IMPLEMENTATION DETAILS =========\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    function action(\\n        IConditionalTokens _conditionalTokens,\\n        IFixedProductMarketMaker _fixedProductMarketMaker,\\n        uint256[] memory _positionIds,\\n        bytes32 _conditionId,\\n        bytes32 _parentCollectionId,\\n        address _collateralToken,\\n        address _receiver\\n    ) public virtual {\\n        uint256 startGas = gasleft();\\n\\n        require(\\n            _positionIds.length > 0,\\n            \\\"ActionWithdrawLiquidity: Position Ids must be at least of length 1\\\"\\n        );\\n\\n        // 1. Fetch the balance of liquidity pool tokens\\n        uint256 lpTokensToWithdraw =\\n            IERC20(address(_fixedProductMarketMaker)).balanceOf(address(this));\\n\\n        require(\\n            lpTokensToWithdraw > 0,\\n            \\\"ActionWithdrawLiquidity: No LP tokens to withdraw\\\"\\n        );\\n\\n        // 2. Fetch Current collateral token balance to know how much the proxy already has\\n        // and avoid more state reads by calling feesWithdrawablyBy\\n        uint256 collateralTokenBalancePre =\\n            IERC20(_collateralToken).balanceOf(address(this));\\n\\n        // 3. Remove funding from fixedProductMarketMaker\\n        _fixedProductMarketMaker.removeFunding(lpTokensToWithdraw);\\n\\n        // 4. Check balances of conditional tokens\\n        address[] memory proxyAddresses = new address[](_positionIds.length);\\n\\n        for (uint256 i; i < _positionIds.length; i++) {\\n            proxyAddresses[i] = address(this);\\n        }\\n\\n        // stack-to-deep-avoidance\\n        {\\n            uint256[] memory outcomeTokenBalances =\\n                IERC1155(address(_conditionalTokens)).balanceOfBatch(\\n                    proxyAddresses,\\n                    _positionIds\\n                );\\n\\n            // 5. Find the lowest balance of all outcome tokens\\n            uint256 amountToMerge = outcomeTokenBalances[0];\\n            for (uint256 i = 1; i < outcomeTokenBalances.length; i++) {\\n                uint256 outcomeTokenBalance = outcomeTokenBalances[i];\\n                if (outcomeTokenBalance < amountToMerge)\\n                    amountToMerge = outcomeTokenBalance;\\n            }\\n\\n            require(\\n                amountToMerge > 0,\\n                \\\"ActionWithdrawLiquidity: No outcome tokens to merge\\\"\\n            );\\n\\n            uint256[] memory partition = new uint256[](_positionIds.length);\\n            for (uint256 i; i < partition.length; i++) {\\n                partition[i] = 1 << i;\\n            }\\n\\n            // 6. Merge outcome tokens\\n            _conditionalTokens.mergePositions(\\n                IERC20(_collateralToken),\\n                _parentCollectionId,\\n                _conditionId,\\n                partition,\\n                amountToMerge\\n            );\\n        }\\n\\n        // 7. Calculate exactly how many collateral tokens were recevied\\n        uint256 collateralTokensReceived =\\n            IERC20(_collateralToken).balanceOf(address(this)).sub(\\n                collateralTokenBalancePre\\n            );\\n\\n        // 8. Calculate how much this action consumed\\n        // console.log(\\\"Gas measured in action: %s\\\", startGas - gasleft());\\n        uint256 ethToBeRefunded =\\n            startGas\\n                .add(OVERHEAD)\\n                .sub(gasleft())\\n                .mul(fetchCurrentGasPrice())\\n                .mul(136)\\n                .div(100);\\n\\n        // 9. Calculate how much of the collateral token needs be refunded to the provider\\n        uint256 collateralTokenFee;\\n        if (address(WETH) == _collateralToken)\\n            collateralTokenFee = ethToBeRefunded;\\n        else {\\n            try\\n                oracleAggregator.getExpectedReturnAmount(\\n                    ethToBeRefunded,\\n                    ETH,\\n                    _collateralToken\\n                )\\n            returns (uint256 returnAmount) {\\n                if (returnAmount != 0) collateralTokenFee = returnAmount;\\n                else {\\n                    collateralTokenFee = getUniswapRate(\\n                        address(WETH),\\n                        ethToBeRefunded,\\n                        _collateralToken\\n                    );\\n                }\\n            } catch {\\n                revert(\\\"ActionWithdrawLiquidity: OracleAggregator Error\\\");\\n            }\\n        }\\n\\n        require(\\n            collateralTokenFee <= collateralTokensReceived,\\n            \\\"ActionWithdrawLiquidity: Insufficient Collateral to pay for withdraw transaction\\\"\\n        );\\n\\n        // 10. Transfer received collateral minus Fee back to user\\n        IERC20(_collateralToken).safeTransfer(\\n            _receiver,\\n            collateralTokensReceived - collateralTokenFee,\\n            \\\"Transfer Collateral to receiver failed\\\"\\n        );\\n\\n        // 11. Transfer Fee back to provider\\n        IERC20(_collateralToken).safeTransfer(\\n            tx.origin,\\n            collateralTokenFee,\\n            \\\"Transfer Collateral to receiver failed\\\"\\n        );\\n\\n        emit LogWithdrawSuccess(\\n            collateralTokensReceived - collateralTokenFee,\\n            collateralTokenFee\\n        );\\n    }\\n\\n    function fetchCurrentGasPrice() public view returns (uint256) {\\n        return\\n            uint256(\\n                IGasPriceOracle(gelatoCore.gelatoGasPriceOracle())\\n                    .latestAnswer()\\n            );\\n    }\\n\\n    function getUniswapRate(\\n        address _sellToken,\\n        uint256 _amountIn,\\n        address _buyToken\\n    ) public view returns (uint256 expectedRate) {\\n        address[] memory tokenPath = _getPaths(_sellToken, _buyToken);\\n\\n        try uniRouter.getAmountsOut(_amountIn, tokenPath) returns (\\n            uint256[] memory expectedRates\\n        ) {\\n            expectedRate = expectedRates[1];\\n        } catch {\\n            revert(\\\"ActionWithdrawLiquidity: UniswapV2GetExpectedRateError\\\");\\n        }\\n    }\\n\\n    function _getPaths(address _sellToken, address _buyToken)\\n        internal\\n        pure\\n        returns (address[] memory paths)\\n    {\\n        paths = new address[](2);\\n        paths[0] = _sellToken;\\n        paths[1] = _buyToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OracleAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\n\\nimport {Ownable} from \\\"@gelatonetwork/core/contracts/external/Ownable.sol\\\";\\nimport {SafeMath} from \\\"@gelatonetwork/core/contracts/external/SafeMath.sol\\\";\\nimport {IGasPriceOracle} from \\\"./dapp_interfaces/chainlink/IGasPriceOracle.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// solhint-disable max-states-count\\ncontract OracleAggregator is Ownable {\\n    using SafeMath for uint256;\\n    // solhint-disable var-name-mixedcase\\n    address private _ETH_ADDRESS;\\n    // solhint-disable var-name-mixedcase\\n    address private _USD_ADDRESS;\\n\\n    mapping(address => mapping(address => address)) private _tokenPairAddress;\\n    mapping(address => uint256) private _nrOfDecimalsUSD;\\n\\n    // solhint-disable function-max-lines\\n    constructor() public {\\n        _nrOfDecimalsUSD[0x7354C81fbCb229187480c4f497F945C6A312d5C3] = 8; // USD\\n        _nrOfDecimalsUSD[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 6; // USDT\\n        _nrOfDecimalsUSD[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 6; // USDC\\n        _nrOfDecimalsUSD[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 18; // DAI\\n        _nrOfDecimalsUSD[0x4Fabb145d64652a948d72533023f6E7A623C7C53] = 18; // BUSD\\n        _nrOfDecimalsUSD[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] = 18; // SUSD\\n        _nrOfDecimalsUSD[0x0000000000085d4780B73119b644AE5ecd22b376] = 18; // TUSD\\n\\n        _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n        _USD_ADDRESS = 0x7354C81fbCb229187480c4f497F945C6A312d5C3; // Random address\\n\\n        _tokenPairAddress[0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9][\\n            _ETH_ADDRESS\\n        ] = 0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012; // AAVE/ETH\\n        _tokenPairAddress[0xADE00C28244d5CE17D72E40330B1c318cD12B7c3][\\n            _USD_ADDRESS\\n        ] = 0x231e764B44b2C1b7Ca171fa8021A24ed520Cde10; // ADX/USD\\n\\n        _tokenPairAddress[0x0D8775F648430679A709E98d2b0Cb6250d2887EF][\\n            _ETH_ADDRESS\\n        ] = 0x0d16d4528239e9ee52fa531af613AcdB23D88c94; // BAT/ETH\\n        _tokenPairAddress[0xB8c77482e45F1F44dE1745F52C74426C631bDD52][\\n            _USD_ADDRESS\\n        ] = 0x14e613AC84a31f709eadbdF89C6CC390fDc9540A; // BNB/USD\\n        _tokenPairAddress[0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C][\\n            _ETH_ADDRESS\\n        ] = 0xCf61d1841B178fe82C8895fe60c2EDDa08314416; // BNT/ETH\\n        _tokenPairAddress[0x56d811088235F11C8920698a204A5010a788f4b3][\\n            _ETH_ADDRESS\\n        ] = 0x8f7C7181Ed1a2BA41cfC3f5d064eF91b67daef66; // BZRX/ETH\\n\\n        _tokenPairAddress[0xc00e94Cb662C3520282E6f5717214004A7f26888][\\n            _ETH_ADDRESS\\n        ] = 0x1B39Ee86Ec5979ba5C322b826B3ECb8C79991699; // COMP/ETH\\n        _tokenPairAddress[0xc00e94Cb662C3520282E6f5717214004A7f26888][\\n            _USD_ADDRESS\\n        ] = 0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5; // COMP/USD\\n        _tokenPairAddress[0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b][\\n            _ETH_ADDRESS\\n        ] = 0xcA696a9Eb93b81ADFE6435759A29aB4cf2991A96; // CRO/ETH\\n\\n        _tokenPairAddress[0xEd91879919B71bB6905f23af0A68d231EcF87b14][\\n            _ETH_ADDRESS\\n        ] = 0xD010e899f7ab723AC93f825cDC5Aa057669557c2; // DMG/ETH\\n\\n        _tokenPairAddress[0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c][\\n            _ETH_ADDRESS\\n        ] = 0x24D9aB51950F3d62E9144fdC2f3135DAA6Ce8D1B; // ENJ/ETH\\n        _tokenPairAddress[_ETH_ADDRESS][\\n            _USD_ADDRESS\\n        ] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // ETH/USD\\n\\n        _tokenPairAddress[0xdd974D5C2e2928deA5F71b9825b8b646686BD200][\\n            _ETH_ADDRESS\\n        ] = 0x656c0544eF4C98A6a98491833A89204Abb045d6b; // KNC/ETH\\n        _tokenPairAddress[0xdd974D5C2e2928deA5F71b9825b8b646686BD200][\\n            _USD_ADDRESS\\n        ] = 0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc; // KNC/USD\\n\\n        _tokenPairAddress[0x514910771AF9Ca656af840dff83E8264EcF986CA][\\n            _USD_ADDRESS\\n        ] = 0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c; // LINK/USD\\n        _tokenPairAddress[0x514910771AF9Ca656af840dff83E8264EcF986CA][\\n            _ETH_ADDRESS\\n        ] = 0xDC530D9457755926550b59e8ECcdaE7624181557; // LINK/ETH\\n        _tokenPairAddress[0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD][\\n            _ETH_ADDRESS\\n        ] = 0x160AC928A16C93eD4895C2De6f81ECcE9a7eB7b4; // LRC/ETH\\n        _tokenPairAddress[0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD][\\n            _USD_ADDRESS\\n        ] = 0x231e764B44b2C1b7Ca171fa8021A24ed520Cde10; // LRC/USD\\n\\n        _tokenPairAddress[0x0F5D2fB29fb7d3CFeE444a200298f468908cC942][\\n            _ETH_ADDRESS\\n        ] = 0x82A44D92D6c329826dc557c5E1Be6ebeC5D5FeB9; // MANA/ETH\\n        _tokenPairAddress[0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2][\\n            _ETH_ADDRESS\\n        ] = 0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2; // MKR/ETH\\n\\n        _tokenPairAddress[0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671][\\n            _ETH_ADDRESS\\n        ] = 0x9cB2A01A7E64992d32A34db7cEea4c919C391f6A; // NMR/ETH\\n\\n        _tokenPairAddress[0x408e41876cCCDC0F92210600ef50372656052a38][\\n            _ETH_ADDRESS\\n        ] = 0x3147D7203354Dc06D9fd350c7a2437bcA92387a4; // REN/ETH\\n        _tokenPairAddress[0x408e41876cCCDC0F92210600ef50372656052a38][\\n            _USD_ADDRESS\\n        ] = 0x0f59666EDE214281e956cb3b2D0d69415AfF4A01; // REN/USD\\n        _tokenPairAddress[0x221657776846890989a759BA2973e427DfF5C9bB][\\n            _ETH_ADDRESS\\n        ] = 0xD4CE430C3b67b3E2F7026D86E7128588629e2455; // REP/ETH\\n\\n        _tokenPairAddress[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F][\\n            _ETH_ADDRESS\\n        ] = 0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c; // SNX/ETH\\n        _tokenPairAddress[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F][\\n            _USD_ADDRESS\\n        ] = 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699; // SNX/USD\\n        _tokenPairAddress[0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9][\\n            _USD_ADDRESS\\n        ] = 0xFb0CfD6c19e25DB4a08D8a204a387cEa48Cc138f; // SXP/USD\\n\\n        _tokenPairAddress[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984][\\n            _ETH_ADDRESS\\n        ] = 0xD6aA3D25116d8dA79Ea0246c4826EB951872e02e; // UNI/ETH\\n        _tokenPairAddress[_USD_ADDRESS][\\n            _ETH_ADDRESS\\n        ] = 0x986b5E1e1755e3C2440e960477f25201B0a8bbD4; // USDC/ETH\\n\\n        _tokenPairAddress[0xa982B2e19e90b2D9F7948e9C1b65D119F1CE88D6][\\n            _ETH_ADDRESS\\n        ] = 0xcEBD2026d3C99F2a7CE028acf372C154aB4638a9; // WOM/ETH\\n\\n        _tokenPairAddress[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e][\\n            _ETH_ADDRESS\\n        ] = 0x7c5d4F8345e66f68099581Db340cd65B078C41f4; // YFI/ETH\\n\\n        _tokenPairAddress[0xE41d2489571d322189246DaFA5ebDe1F4699F498][\\n            _ETH_ADDRESS\\n        ] = 0x2Da4983a622a8498bb1a21FaE9D8F6C664939962; // ZRX/ETH\\n    }\\n\\n    function addToken(\\n        address tokenAddressA,\\n        address tokenAddressB,\\n        address __tokenPairAddress\\n    ) public onlyOwner {\\n        _tokenPairAddress[tokenAddressA][tokenAddressB] = __tokenPairAddress;\\n    }\\n\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    /// @dev Get expected return amount for tokenA / tokenB\\n    function getExpectedReturnAmount(\\n        uint256 amount,\\n        address tokenAddressA,\\n        address tokenAddressB\\n    ) public view returns (uint256 returnAmount) {\\n        require(amount > 0, \\\"OracleAggregator: Amount is Zero\\\");\\n        require(\\n            tokenAddressA != address(0),\\n            \\\"OracleAggregator: tokenAddressA is Zero\\\"\\n        );\\n        require(\\n            tokenAddressB != address(0),\\n            \\\"OracleAggregator: tokenAddressB is Zero\\\"\\n        );\\n\\n        uint256 nrOfDecimalsIn;\\n        if (tokenAddressA != _ETH_ADDRESS) {\\n            try ERC20(tokenAddressA).decimals() returns (uint8 _inputDecimals) {\\n                nrOfDecimalsIn = uint256(_inputDecimals);\\n            } catch {\\n                revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n            }\\n        } else {\\n            nrOfDecimalsIn = 18;\\n        }\\n\\n        address stableCoinAddress =\\n            _nrOfDecimalsUSD[tokenAddressB] > 0 ? tokenAddressB : address(0);\\n\\n        (tokenAddressA, tokenAddressB) = _convertUSD(\\n            tokenAddressA,\\n            tokenAddressB\\n        );\\n\\n        // when token_b is ETH or USD\\n        if (tokenAddressB == _ETH_ADDRESS || tokenAddressB == _USD_ADDRESS) {\\n            // oracle of token_a / token_b exists\\n            // e.g. calculating KNC/ETH\\n            // KNC/ETH oracle available\\n            if (_tokenPairAddress[tokenAddressA][tokenAddressB] != address(0)) {\\n                (uint256 returnRateA, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressA, tokenAddressB);\\n\\n                returnAmount = stableCoinAddress != address(0)\\n                    ? _matchStableCoinDecimal(\\n                        stableCoinAddress,\\n                        amount,\\n                        nrOfDecimals,\\n                        0,\\n                        returnRateA,\\n                        1\\n                    )\\n                    : amount.mul(returnRateA);\\n\\n                nrOfDecimals = stableCoinAddress != address(0)\\n                    ? _nrOfDecimalsUSD[stableCoinAddress]\\n                    : nrOfDecimals;\\n\\n                return (returnAmount.div(10**nrOfDecimalsIn));\\n            } else {\\n                // oracle of token_a / token_b does not exist\\n                // e.g. calculating UNI/USD\\n                // UNI/ETH and USD/ETH oracles available\\n                (address pairA, address pairB) =\\n                    _checkAvailablePair(tokenAddressA, tokenAddressB);\\n                if (pairA == address(0) && pairB == address(0)) return (0);\\n\\n                (uint256 returnRateA, ) = _getRate(tokenAddressA, pairA);\\n\\n                (uint256 returnRateB, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressB, pairB);\\n\\n                returnAmount = stableCoinAddress != address(0)\\n                    ? _matchStableCoinDecimal(\\n                        stableCoinAddress,\\n                        amount,\\n                        nrOfDecimals,\\n                        nrOfDecimals,\\n                        returnRateA,\\n                        returnRateB\\n                    )\\n                    : amount.mul(returnRateA.mul(10**nrOfDecimals)).div(\\n                        returnRateB\\n                    );\\n\\n                nrOfDecimals = stableCoinAddress != address(0)\\n                    ? _nrOfDecimalsUSD[stableCoinAddress]\\n                    : nrOfDecimals;\\n\\n                returnAmount = amount\\n                    .mul(returnRateA.mul(10**nrOfDecimals))\\n                    .div(returnRateB);\\n                if (tokenAddressB != _ETH_ADDRESS) {\\n                    return (returnAmount.div(10**nrOfDecimalsIn));\\n                } else {\\n                    return returnAmount.div(10**_nrOfDecimalsUSD[_USD_ADDRESS]);\\n                }\\n            }\\n        } else {\\n            // when token_b is not ETH or USD\\n            (address pairA, address pairB) =\\n                _checkAvailablePair(tokenAddressA, tokenAddressB);\\n\\n            if (pairA == address(0) && pairB == address(0)) return (0);\\n            // oracle of token_a/ETH, token_b/ETH || token_a/USD, token_b/USD exists\\n            // e.g. calculating KNC/UNI where\\n            // KNC/ETH and UNI/ETH oracles available\\n            if (pairA == pairB) {\\n                (uint256 returnRateA, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressA, pairA);\\n\\n                (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n\\n                returnAmount = amount\\n                    .mul(returnRateA.mul(10**nrOfDecimals))\\n                    .div(returnRateB);\\n                if (pairA == _ETH_ADDRESS) {\\n                    return returnAmount.div(10**nrOfDecimalsIn);\\n                } else {\\n                    return returnAmount.div(10**_nrOfDecimalsUSD[_USD_ADDRESS]);\\n                }\\n            } else if (pairA == _ETH_ADDRESS && pairB == _USD_ADDRESS) {\\n                // oracle of token_a/ETH and token_b/USD exists\\n                // e.g. calculating UNI/SXP where\\n                // UNI/ETH and SXP/USD oracles available\\n                {\\n                    (uint256 returnRateA, ) = _getRate(tokenAddressA, pairA);\\n                    (uint256 returnRate_ETHUSD, ) =\\n                        _getRate(_ETH_ADDRESS, _USD_ADDRESS);\\n                    (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n\\n                    uint256 returnRateAUSD = returnRateA.mul(returnRate_ETHUSD);\\n                    returnAmount = amount.mul(returnRateAUSD).div(returnRateB);\\n                }\\n                return returnAmount.div(10**nrOfDecimalsIn);\\n            } else if (pairA == _USD_ADDRESS && pairB == _ETH_ADDRESS) {\\n                // oracle of token_a/USD and token_b/ETH exists\\n                // e.g. calculating SXP/UNI where\\n                // SXP/USD and UNI/ETH oracles available\\n                uint256 numerator;\\n                {\\n                    (uint256 returnRateA, uint256 nrOfDecimals) =\\n                        _getRate(tokenAddressA, pairA);\\n\\n                    (uint256 returnRate_USDETH, uint256 nrOfDecimals_USDETH) =\\n                        _getRate(_USD_ADDRESS, _ETH_ADDRESS);\\n\\n                    numerator = returnRate_USDETH\\n                        .mul(10**(nrOfDecimals_USDETH.sub(nrOfDecimals)))\\n                        .mul(returnRateA)\\n                        .div(10**nrOfDecimals_USDETH);\\n                }\\n                (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n                returnAmount = amount.mul(numerator).div(returnRateB);\\n                return returnAmount;\\n            }\\n        }\\n    }\\n\\n    /// @dev check the available oracles for token a & b\\n    /// and choose which oracles to use\\n    function _checkAvailablePair(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (\\n            _tokenPairAddress[tokenAddressA][_USD_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_USD_ADDRESS] != address(0)\\n        ) {\\n            return (_USD_ADDRESS, _USD_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_ETH_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_ETH_ADDRESS] != address(0)\\n        ) {\\n            return (_ETH_ADDRESS, _ETH_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_ETH_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_USD_ADDRESS] != address(0)\\n        ) {\\n            return (_ETH_ADDRESS, _USD_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_USD_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_ETH_ADDRESS] != address(0)\\n        ) {\\n            return (_USD_ADDRESS, _ETH_ADDRESS);\\n        } else {\\n            return (address(0), address(0));\\n        }\\n    }\\n\\n    function _getRate(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (uint256 tokenPrice, uint256 nrOfDecimals)\\n    {\\n        if (tokenAddressA == tokenAddressB) {\\n            return (1, 0);\\n        } else {\\n            IGasPriceOracle priceFeed =\\n                IGasPriceOracle(\\n                    _tokenPairAddress[tokenAddressA][tokenAddressB]\\n                );\\n            tokenPrice = uint256(priceFeed.latestAnswer());\\n            nrOfDecimals = priceFeed.decimals();\\n        }\\n    }\\n\\n    /// @dev converting all usd pegged stablecoins to single USD address\\n    function _convertUSD(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (\\n            _nrOfDecimalsUSD[tokenAddressA] > 0 &&\\n            _nrOfDecimalsUSD[tokenAddressB] > 0\\n        ) {\\n            return (_USD_ADDRESS, _USD_ADDRESS);\\n        } else if (_nrOfDecimalsUSD[tokenAddressA] > 0) {\\n            return (_USD_ADDRESS, tokenAddressB);\\n        } else if (_nrOfDecimalsUSD[tokenAddressB] > 0) {\\n            return (tokenAddressA, _USD_ADDRESS);\\n        } else {\\n            return (tokenAddressA, tokenAddressB);\\n        }\\n    }\\n\\n    /// @dev modify nrOfDecimlas and amount to follow stableCoin's nrOfDecimals\\n    function _matchStableCoinDecimal(\\n        address stableCoinAddress,\\n        uint256 amount,\\n        uint256 nrOfDecimals,\\n        uint256 padding,\\n        uint256 returnRateA,\\n        uint256 returnRateB\\n    ) private view returns (uint256 returnAmount) {\\n        uint256 div =\\n            _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n                ? 10**(_nrOfDecimalsUSD[stableCoinAddress] - nrOfDecimals)\\n                : 10**(nrOfDecimals - _nrOfDecimalsUSD[stableCoinAddress]);\\n        returnAmount = _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n            ? amount.mul(returnRateA.mul(10**padding)).div(returnRateB).mul(div)\\n            : amount.mul(returnRateA.mul(10**padding)).div(returnRateB).div(\\n                div\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dapp_interfaces/chainlink/IGasPriceOracle.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {IERC20} from \\\"@gelatonetwork/core/contracts/external/IERC20.sol\\\";\\n\\ninterface IGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/dapp_interfaces/conditional_tokens/IConditionalTokens.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {IERC20} from \\\"@gelatonetwork/core/contracts/external/IERC20.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId)\\n        external\\n        pure\\n        returns (uint256);\\n}\\n\\ninterface IERC1155 {\\n    function balanceOf(address owner, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] calldata);\\n}\\n\\ninterface IFixedProductMarketMaker {\\n    function removeFunding(uint256 sharesToBurn) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dapp_interfaces/uniswap_v2/IUniswapV2.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function factory() external pure returns (IUniswapV2Factory);\\n\\n    // solhint-disable func-name-mixedcase\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IGelatoSysAdmin\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"contract OracleAggregator\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"LogOneWay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogTwoWay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IFixedProductMarketMaker\",\"name\":\"_fixedProductMarketMaker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_positionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"action\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchCurrentGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoCore\",\"outputs\":[{\"internalType\":\"contract IGelatoSysAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"}],\"name\":\"getUniswapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"contract OracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisActionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ActionWithdrawLiquidity","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000025030bdaa159f281cae63873e68313a703725a5000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000074c0ea021931edc193db561b096c40908c0d1f8b","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}