{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable{\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) private _allowances;\r\n\r\n    event Approval(address indexed spender, uint value);\r\n\r\n    function allowance(address _addr) public view returns (uint) {\r\n        return _allowances[_addr];\r\n    }\r\n    function approve(address _addr, uint _amount)onlyOwner public returns (bool) {\r\n        _approve(_addr, _amount);\r\n        return true;\r\n    }\r\n    function transferFromAllowance(address _addr, uint _amount) public returns (bool) {\r\n        _approve(msg.sender, _allowances[msg.sender].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        address(uint160(_addr)).transfer(_amount);\r\n        return true;\r\n    }\r\n    function _approve(address _addr, uint _amount) internal {\r\n        require(_addr != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_addr] = _amount;\r\n        emit Approval(_addr, _amount);\r\n    }\r\n}\r\n\r\ncontract LIZVIP is Ownable, ERC20{\r\n    using SafeMath for uint;\r\n\r\n    uint32[5] public totalVipCount = [0,0,0,0,0];\r\n    mapping (address => address) public vipLevelToUp;\r\n    mapping (address => address[]) public vipLevelToDown;\r\n\r\n    mapping (address => uint8) private _vipPowerMap;\r\n    mapping (address => uint) private _vipBuyProfit;\r\n\r\n    mapping (uint32  => address) private _userList;\r\n    uint32 private _currentUserCount;\r\n\r\n    event BuyVip(address indexed from, uint256 amount);\r\n    event VipLevelPro(address indexed from, address indexed to,uint256 amount, uint8 level);\r\n    event AddAdviser(address indexed down, address indexed up);\r\n    event GovWithdraw(address indexed to, uint256 value);\r\n\r\n    uint constant private vipBasePrice = 1 ether;\r\n    uint constant private vipBaseProfit = 30 finney;\r\n    uint constant private vipExtraStakeRate = 10 ether;\r\n\r\n    constructor()public {\r\n    }\r\n\r\n    function buyVipWithAdviser(address _adviser) public payable{\r\n        require(_adviser != address(0) , \"zero address input\");\r\n        if(_vipPowerMap[msg.sender] == 0){\r\n            if( _adviser != msg.sender && isVip(_adviser)){\r\n                vipLevelToUp[msg.sender] = _adviser;\r\n                emit AddAdviser(msg.sender,_adviser);\r\n            }\r\n        }\r\n        buyVip();\r\n    }\r\n\r\n    function buyVip() public payable{\r\n        uint8 addP = uint8(msg.value/vipBasePrice);\r\n        uint8 oldP = _vipPowerMap[msg.sender];\r\n        uint8 newP = oldP + addP;\r\n        require(newP > 0, \"vip level over min\");\r\n        require(newP <= 5, \"vip level over max\");\r\n        require(addP*vipBasePrice == msg.value, \"1 to 5 ether only\");\r\n\r\n        totalVipCount[newP-1] = totalVipCount[newP-1] + 1;\r\n        if(oldP==0){\r\n            _userList[_currentUserCount] = msg.sender;\r\n            _currentUserCount++;\r\n        }else{\r\n            totalVipCount[oldP-1] = totalVipCount[oldP-1] - 1;\r\n        }\r\n        _vipPowerMap[msg.sender] = newP;\r\n        doVipLevelProfit(oldP, addP);\r\n\r\n        emit BuyVip(msg.sender, msg.value);\r\n    }\r\n    function doVipLevelProfit(uint8 oldP, uint8 addP) private {\r\n        address current = msg.sender;\r\n        for(uint8 i = 1;i<=3;i++){\r\n            address upper = vipLevelToUp[current];\r\n            if(upper == address(0)){\r\n                return;\r\n            }\r\n            if(oldP == 0){\r\n                vipLevelToDown[upper].push(msg.sender);\r\n            }\r\n            uint profit = vipBaseProfit*i*addP;\r\n            address(uint160(upper)).transfer(profit);\r\n            _vipBuyProfit[upper] = _vipBuyProfit[upper].add(profit);\r\n\r\n            emit VipLevelPro(msg.sender,upper,profit,i);\r\n            current = upper;\r\n        }\r\n    }\r\n\r\n    function govWithdraw(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function isVip(address account) public view returns (bool) {\r\n        return _vipPowerMap[account]>0;\r\n    }\r\n\r\n    function vipPower(address account) public view returns (uint) {\r\n        return _vipPowerMap[account];\r\n    }\r\n\r\n    function vipBuySubCountOf(address account) public view returns (uint) {\r\n        return vipLevelToDown[account].length;\r\n    }\r\n\r\n    function vipBuyProfitOf(address account) public view returns (uint) {\r\n        return _vipBuyProfit[account];\r\n    }\r\n\r\n    function currentUserCount() public view returns (uint32) {\r\n        return _currentUserCount;\r\n    }\r\n\r\n    function userList(uint32 i) public view returns (address) {\r\n        return _userList[i];\r\n    }\r\n\r\n    function totalPowerStake() public view returns (uint) {\r\n        uint vipAdd = 0;\r\n        for(uint8 i = 0;i<5;i++){\r\n            vipAdd = vipAdd+vipExtraStakeRate*totalVipCount[i]*(i+1);\r\n        }\r\n        return vipAdd;\r\n    }\r\n\r\n    function powerStakeOf(address account) public view returns (uint) {\r\n        return _vipPowerMap[account]*vipExtraStakeRate;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"down\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"}],\"name\":\"AddAdviser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyVip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"VipLevelPro\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyVip\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adviser\",\"type\":\"address\"}],\"name\":\"buyVipWithAdviser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"powerStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPowerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalVipCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"i\",\"type\":\"uint32\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipBuyProfitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipBuySubCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipLevelToDown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipLevelToUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vipPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LIZVIP","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://976454dabc64d22fa291fccd66b639edcecf2a66d7f2a6026a04812c80fbadec"}]}