{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ONXStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./modules/BaseShareField.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ninterface IONXStrategy {\\n    function invest(address user, uint256 amount) external; \\n    function withdraw(address user, uint256 amount) external;\\n    function liquidation(address user) external;\\n    function claim(address user, uint256 amount, uint256 total) external;\\n    function query() external view returns (uint256);\\n    function mint() external;\\n    function interestToken() external view returns (address);\\n    function farmToken() external view returns (address);\\n}\\n\\ninterface IONXFarm {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function pendingOnX(uint256 _pid, address _user) external view returns (uint256);\\n    function poolInfo(uint _index) external view returns(address, uint256, uint256, uint256);\\n}\\n\\ncontract ONXStrategy is IONXStrategy, BaseShareField, Initializable {\\n\\tevent Mint(address indexed user, uint256 amount);\\n\\tusing SafeMath for uint256;\\n\\taddress public override interestToken;\\n\\taddress public override farmToken;\\n\\taddress public poolAddress;\\n\\taddress public onxFarm;\\n\\tuint256 public lpPoolpid;\\n\\taddress public owner;\\n\\n\\tfunction initialize(\\n\\t\\taddress _interestToken,\\n\\t\\taddress _farmToken,\\n\\t\\taddress _poolAddress,\\n\\t\\taddress _onxFarm,\\n\\t\\tuint256 _lpPoolpid\\n\\t) public initializer {\\n\\t\\towner = msg.sender;\\n\\t\\tinterestToken = _interestToken;\\n\\t\\tfarmToken = _farmToken;\\n\\t\\tpoolAddress = _poolAddress;\\n\\t\\tonxFarm = _onxFarm;\\n\\t\\tlpPoolpid = _lpPoolpid;\\n\\t\\t_setShareToken(_interestToken);\\n\\t}\\n\\n\\tfunction invest(address user, uint256 amount) external override {\\n\\t\\trequire(msg.sender == poolAddress, \\\"INVALID CALLER\\\");\\n\\t\\tTransferHelper.safeTransferFrom(farmToken, msg.sender, address(this), amount);\\n\\t\\tIERC20(farmToken).approve(onxFarm, amount);\\n\\t\\tIONXFarm(onxFarm).deposit(lpPoolpid, amount);\\n\\t\\t_increaseProductivity(user, amount);\\n\\t}\\n\\n\\tfunction withdraw(address user, uint256 amount) external override {\\n\\t\\trequire(msg.sender == poolAddress, \\\"INVALID CALLER\\\");\\n\\t\\tIONXFarm(onxFarm).withdraw(lpPoolpid, amount);\\n\\t\\tTransferHelper.safeTransfer(farmToken, msg.sender, amount);\\n\\t\\t_decreaseProductivity(user, amount);\\n\\t}\\n\\n\\tfunction liquidation(address user) external override {\\n\\t\\trequire(msg.sender == poolAddress, \\\"INVALID CALLER\\\");\\n\\t\\tuint256 amount = users[user].amount;\\n\\t\\t_decreaseProductivity(user, amount);\\n\\t\\tuint256 reward = users[user].rewardEarn;\\n\\t\\tusers[msg.sender].rewardEarn = users[msg.sender].rewardEarn.add(reward);\\n\\t\\tusers[user].rewardEarn = 0;\\n\\t\\t_increaseProductivity(msg.sender, amount);\\n\\t}\\n\\n\\tfunction claim(\\n\\t\\taddress user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 total\\n\\t) external override {\\n\\t\\trequire(msg.sender == poolAddress, \\\"INVALID CALLER\\\");\\n\\t\\tIONXFarm(onxFarm).withdraw(lpPoolpid, amount);\\n\\t\\tTransferHelper.safeTransfer(farmToken, msg.sender, amount);\\n\\t\\t_decreaseProductivity(msg.sender, amount);\\n\\t\\tuint256 claimAmount = users[msg.sender].rewardEarn.mul(amount).div(total);\\n\\t\\tusers[user].rewardEarn = users[user].rewardEarn.add(claimAmount);\\n\\t\\tusers[msg.sender].rewardEarn = users[msg.sender].rewardEarn.sub(claimAmount);\\n\\t}\\n\\n\\tfunction _currentReward() internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tmintedShare\\n\\t\\t\\t\\t.add(IERC20(shareToken).balanceOf(address(this)))\\n\\t\\t\\t\\t.add(IONXFarm(onxFarm).pendingOnX(lpPoolpid, address(this)))\\n\\t\\t\\t\\t.sub(totalShare);\\n\\t}\\n\\n\\tfunction query() external view override returns (uint256) {\\n\\t\\treturn _takeWithAddress(msg.sender);\\n\\t}\\n\\n\\tfunction mint() external override {\\n\\t\\tIONXFarm(onxFarm).deposit(lpPoolpid, 0);\\n\\t\\tuint256 amount = _mint(msg.sender);\\n\\t\\temit Mint(msg.sender, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary TransferHelper {\\n\\tfunction safeApprove(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t// bytes4(keccak256(bytes('approve(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeTransfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t// bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress token,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t// bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\tuint256 c = a - b;\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\tuint256 c = a / b;\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts with custom message when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/modules/BaseShareField.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\n\\ninterface IERC20 {\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n}\\n\\ncontract BaseShareField {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public totalProductivity;\\n\\tuint256 public accAmountPerShare;\\n\\n\\tuint256 public totalShare;\\n\\tuint256 public mintedShare;\\n\\tuint256 public mintCumulation;\\n\\n\\tuint256 private unlocked = 1;\\n\\taddress public shareToken;\\n\\n\\tmodifier lock() {\\n\\t\\trequire(unlocked == 1, \\\"Locked\\\");\\n\\t\\tunlocked = 0;\\n\\t\\t_;\\n\\t\\tunlocked = 1;\\n\\t}\\n\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount; // How many tokens the user has provided.\\n\\t\\tuint256 rewardDebt; // Reward debt.\\n\\t\\tuint256 rewardEarn; // Reward earn and not minted\\n\\t\\tbool initialize; // already setup.\\n\\t}\\n\\n\\tmapping(address => UserInfo) public users;\\n\\n\\tfunction _setShareToken(address _shareToken) internal {\\n\\t\\tshareToken = _shareToken;\\n\\t}\\n\\n\\t// Update reward variables of the given pool to be up-to-date.\\n\\tfunction _update() internal virtual {\\n\\t\\tif (totalProductivity == 0) {\\n\\t\\t\\ttotalShare = totalShare.add(_currentReward());\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 reward = _currentReward();\\n\\t\\taccAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n\\t\\ttotalShare += reward;\\n\\t}\\n\\n\\tfunction _currentReward() internal view virtual returns (uint256) {\\n\\t\\treturn mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n\\t}\\n\\n\\t// Audit user's reward to be up-to-date\\n\\tfunction _audit(address user) internal virtual {\\n\\t\\tUserInfo storage userInfo = users[user];\\n\\t\\tif (userInfo.amount > 0) {\\n\\t\\t\\tuint256 pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n\\t\\t\\tuserInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n\\t\\t\\tmintCumulation = mintCumulation.add(pending);\\n\\t\\t\\tuserInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n\\t\\t}\\n\\t}\\n\\n\\t// External function call\\n\\t// This function increase user's productivity and updates the global productivity.\\n\\t// the users' actual share percentage will calculated by:\\n\\t// Formula:     user_productivity / global_productivity\\n\\tfunction _increaseProductivity(address user, uint256 value) internal virtual returns (bool) {\\n\\t\\trequire(value > 0, \\\"PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO\\\");\\n\\t\\tUserInfo storage userInfo = users[user];\\n\\t\\t_update();\\n\\t\\t_audit(user);\\n\\t\\ttotalProductivity = totalProductivity.add(value);\\n\\t\\tuserInfo.amount = userInfo.amount.add(value);\\n\\t\\tuserInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// External function call\\n\\t// This function will decreases user's productivity by value, and updates the global productivity\\n\\t// it will record which block this is happenning and accumulates the area of (productivity * time)\\n\\tfunction _decreaseProductivity(address user, uint256 value) internal virtual returns (bool) {\\n\\t\\tUserInfo storage userInfo = users[user];\\n\\t\\trequire(value > 0 && userInfo.amount >= value, \\\"INSUFFICIENT_PRODUCTIVITY\\\");\\n\\n\\t\\t_update();\\n\\t\\t_audit(user);\\n\\n\\t\\tuserInfo.amount = userInfo.amount.sub(value);\\n\\t\\tuserInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n\\t\\ttotalProductivity = totalProductivity.sub(value);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _transferTo(\\n\\t\\taddress user,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal virtual returns (bool) {\\n\\t\\tUserInfo storage userInfo = users[user];\\n\\t\\trequire(value > 0 && userInfo.amount >= value, \\\"INSUFFICIENT_PRODUCTIVITY\\\");\\n\\n\\t\\t_update();\\n\\t\\t_audit(user);\\n\\t\\tuint256 transferAmount = value.mul(userInfo.rewardEarn).div(userInfo.amount);\\n\\t\\tuserInfo.rewardEarn = userInfo.rewardEarn.sub(transferAmount);\\n\\t\\tusers[to].rewardEarn = users[to].rewardEarn.add(transferAmount);\\n\\n\\t\\tuserInfo.amount = userInfo.amount.sub(value);\\n\\t\\tuserInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n\\t\\ttotalProductivity = totalProductivity.sub(value);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _takeWithAddress(address user) internal view returns (uint256) {\\n\\t\\tUserInfo storage userInfo = users[user];\\n\\t\\tuint256 _accAmountPerShare = accAmountPerShare;\\n\\t\\tif (totalProductivity != 0) {\\n\\t\\t\\tuint256 reward = _currentReward();\\n\\t\\t\\t_accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n\\t\\t}\\n\\t\\treturn userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\\n\\t}\\n\\n\\t// External function call\\n\\t// When user calls this function, it will calculate how many token will mint to user from his productivity * time\\n\\t// Also it calculates global token supply from last time the user mint to this time.\\n\\tfunction _mint(address user) internal virtual lock returns (uint256) {\\n\\t\\t_update();\\n\\t\\t_audit(user);\\n\\t\\trequire(users[user].rewardEarn > 0, \\\"NOTHING TO MINT SHARE\\\");\\n\\t\\tuint256 amount = users[user].rewardEarn;\\n\\t\\tTransferHelper.safeTransfer(shareToken, user, amount);\\n\\t\\tusers[user].rewardEarn = 0;\\n\\t\\tmintedShare += amount;\\n\\t\\treturn amount;\\n\\t}\\n\\n\\tfunction _mintTo(address user, address to) internal virtual lock returns (uint256) {\\n\\t\\t_update();\\n\\t\\t_audit(user);\\n\\t\\tuint256 amount = users[user].rewardEarn;\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tTransferHelper.safeTransfer(shareToken, to, amount);\\n\\t\\t}\\n\\n\\t\\tusers[user].rewardEarn = 0;\\n\\t\\tmintedShare += amount;\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t// Returns how many productivity a user has and global has.\\n\\tfunction getProductivity(address user) public view virtual returns (uint256, uint256) {\\n\\t\\treturn (users[user].amount, totalProductivity);\\n\\t}\\n\\n\\t// Returns the current gorss product rate.\\n\\tfunction interestsPerBlock() public view virtual returns (uint256) {\\n\\t\\treturn accAmountPerShare;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accAmountPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onxFarm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpPoolpid\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolpid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onxFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ONXStrategy","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}