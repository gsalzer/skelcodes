{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract AssetInterface {\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performGeneric(bytes memory, address) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20Interface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\n// File: contracts\\AssetProxyInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public returns(bool);\r\n\r\n    function etoken2() external view returns(address); // To be replaced by the implicit getter;\r\n\r\n    // To be replaced by the implicit getter;\r\n    function etoken2Symbol() external view returns(bytes32);\r\n}\r\n\r\n// File: @orderbook\\smart-contracts-common\\contracts\\Bytes32.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Bytes32 {\r\n    function _bytes32(string memory _input) internal pure returns(bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_input, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: @orderbook\\smart-contracts-common\\contracts\\ReturnData.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ReturnData {\r\n    function _returnReturnData(bool _success) internal pure {\r\n        assembly {\r\n            let returndatastart := 0\r\n            returndatacopy(returndatastart, 0, returndatasize)\r\n            switch _success case 0 { revert(returndatastart, returndatasize) }\r\n                default { return(returndatastart, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _assemblyCall(address _destination, uint _value, bytes memory _data)\r\n    internal returns(bool success) {\r\n        assembly {\r\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\Asset.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EToken2 Asset implementation contract.\r\n *\r\n * Basic asset implementation contract, without any additional logic.\r\n * Every other asset implementation contracts should derive from this one.\r\n * Receives calls from the proxy, and calls back immediately without arguments modification.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Asset is AssetInterface, Bytes32, ReturnData {\r\n    // Assigned asset proxy contract, immutable.\r\n    AssetProxyInterface public proxy;\r\n\r\n    /**\r\n     * Only assigned proxy is allowed to call.\r\n     */\r\n    modifier onlyProxy() {\r\n        if (address(proxy) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets asset proxy address.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _proxy asset proxy contract address.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function init(AssetProxyInterface _proxy) public returns(bool) {\r\n        if (address(proxy) != address(0)) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferToICAPWithReference(\r\n                bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _sender, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _sender, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferFromToICAPWithReference(\r\n                _from, bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _approve(address _spender, uint _value, address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardApprove(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return bytes32 result.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performGeneric(bytes memory _data, address _sender)\r\n    public payable onlyProxy() {\r\n        _generic(_data, msg.value, _sender);\r\n    }\r\n\r\n    modifier onlyMe() {\r\n        if (address(this) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Most probably the following should never be redefined in child contracts.\r\n    address public genericSender;\r\n\r\n    function _generic(bytes memory _data, uint _value, address _msgSender) internal {\r\n        // Restrict reentrancy.\r\n        require(genericSender == address(0));\r\n        genericSender = _msgSender;\r\n        bool success = _assemblyCall(address(this), _value, _data);\r\n        delete genericSender;\r\n        _returnReturnData(success);\r\n    }\r\n\r\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\r\n    function _sender() internal view returns(address) {\r\n        return address(this) == msg.sender ? genericSender : msg.sender;\r\n    }\r\n\r\n    // Interface functions to allow specifying ICAP addresses as strings.\r\n    function transferToICAP(string memory _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)\r\n    public returns(bool) {\r\n        return _transferToICAPWithReference(\r\n            _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function transferFromToICAP(address _from, string memory _icap, uint _value)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        string memory _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function isICAP(address _address) public pure returns(bool) {\r\n        bytes20 a = bytes20(_address);\r\n        if (a[0] != 'X' || a[1] != 'E') {\r\n            return false;\r\n        }\r\n        if (uint8(a[2]) < 48 || uint8(a[2]) > 57 || uint8(a[3]) < 48 || uint8(a[3]) > 57) {\r\n            return false;\r\n        }\r\n        for (uint i = 4; i < 20; i++) {\r\n            uint char = uint8(a[i]);\r\n            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ambi2Enabled.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) public returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) public view returns(bool);\r\n    function isOwner(address _node, address _owner) public view returns(bool);\r\n}\r\n\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 public ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && ambi2.hasRole(address(this), _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ambi2EnabledFull.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(address(this), msg.sender) &&\r\n            !_ambi2.isOwner(address(this), msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetWithAmbi.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\ncontract AssetWithAmbi is Asset, Ambi2EnabledFull {\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {\r\n            _;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetWithWhitelist.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ninterface INUXAsset {\r\n    function availableBalanceOf(address _holder) external view returns(uint);\r\n    function scheduleReleaseStart() external;\r\n    function transferLock(address _to, uint _value) external;\r\n}\r\n\r\ncontract NUXConstants {\r\n    uint constant NUX = 10**18;\r\n}\r\n\r\ncontract Readable {\r\n    function since(uint _timestamp) internal view returns(uint) {\r\n        if (not(passed(_timestamp))) {\r\n            return 0;\r\n        }\r\n        return block.timestamp - _timestamp;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\n\r\ncontract NUXAsset is AssetWithAmbi, NUXConstants, Readable {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant RELEASE_PERIOD = 760 days; // ~25 months\r\n    uint constant UNSET = uint(-1);\r\n    uint public releaseStart = UNSET;\r\n    \r\n    mapping(address => uint) public locked;\r\n\r\n    event LockTransfer(address _from, address _to, uint _value);\r\n    event ReleaseScheduled(uint _releaseStart);\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        require(address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender())),\r\n            'Access denied');\r\n        _;\r\n    }\r\n\r\n    modifier validateAvailableBalance(address _sender, uint _value) {\r\n        require(availableBalanceOf(_sender) >= _value, 'Insufficient available balance');\r\n        _;\r\n    }\r\n\r\n    modifier validateAllowance(address _from, address _spender, uint _value) {\r\n        require(proxy.allowance(_from, _spender) >= _value, 'Insufficient allowance');\r\n        _;\r\n    }\r\n\r\n    constructor(address _treasury) public {\r\n        uint totalLocked = 32000000 * NUX;\r\n        locked[_treasury] = totalLocked;\r\n        emit LockTransfer(address(0), _treasury, totalLocked);\r\n    }\r\n\r\n    function availableBalanceOf(address _holder) public view returns(uint) {\r\n        uint totalBalance = proxy.balanceOf(_holder);\r\n        uint sinceRelease = since(releaseStart);\r\n        if (sinceRelease > RELEASE_PERIOD) {\r\n            return totalBalance;\r\n        }\r\n        uint lock = locked[_holder];\r\n        uint released = (lock * sinceRelease) / RELEASE_PERIOD;\r\n        uint stillLocked = lock - released;\r\n        if (totalBalance < stillLocked) {\r\n            return 0;\r\n        }\r\n        return totalBalance - stillLocked;\r\n    }\r\n\r\n    function scheduleReleaseStart() public onlyRole('admin') {\r\n        require(releaseStart == UNSET, 'Already scheduled');\r\n        releaseStart = block.timestamp + 14 days;\r\n        emit ReleaseScheduled(releaseStart);\r\n    }\r\n\r\n    function transferLock(address _to, uint _value) public onlyRole('distributor') {\r\n        address _from = _sender();\r\n        uint lock = locked[_from];\r\n        require(lock >= _value, 'Not enough locked');\r\n        require(proxy.balanceOf(_from) >= lock, 'Cannot transfer released');\r\n        locked[_from] = lock - _value;\r\n        locked[_to] = locked[_to] + _value;\r\n        require(super._transferWithReference(_to, _value, '', _from), 'Transfer failed');\r\n        emit LockTransfer(_from, _to, _value);\r\n    }\r\n\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal validateAvailableBalance(_sender, _value) returns(bool) {\r\n        return super._transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal\r\n    validateAvailableBalance(_from, _value)\r\n    validateAllowance(_from, _sender, _value)\r\n    returns(bool) {\r\n        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal validateAvailableBalance(_sender, _value) returns(bool) {\r\n        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal\r\n    validateAvailableBalance(_from, _value)\r\n    validateAllowance(_from, _sender, _value)\r\n    returns(bool) {\r\n        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"scheduleReleaseStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genericSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambi2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_releaseStart\",\"type\":\"uint256\"}],\"name\":\"ReleaseScheduled\",\"type\":\"event\"}]","ContractName":"NUXAsset","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000bb12800e7446a51395b2d853d6ce7f22210bb5e5","EVMVersion":"petersburg","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://08a1fc4f6b53d147e95a7dff715221c44f54ce3b334e376da711ba0305644a91"}]}