{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract KimbapHodl {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event Deposit(address indexed hodler, address token, uint256 amount, uint letGoTime);\r\n    event Claim(address indexed hodler, address token, uint256 amount, uint claimTime);\r\n    event PanicClaim(address indexed hodler, address token, uint256 amount, uint claimTime);\r\n    \r\n    struct TokenHodling {\r\n        uint256 tokenAmount;\r\n        uint256 depositTime;\r\n        uint256 letGoTime;\r\n        bool claimed;\r\n        uint256 rewardsIssued;\r\n    }\r\n    \r\n    address payable public owner;\r\n    \r\n    mapping(address => mapping(address => TokenHodling[])) public hodlers;\r\n    address public kimbapAddress;\r\n    IERC20 public kimbapToken;\r\n    \r\n    uint256 public rewardsPerBlock;\r\n    uint256 public kimbapDepositPayment;\r\n    uint256 public kimbapPanicClaimPenalty;\r\n    \r\n    mapping (address => bool) public tokenWhitelist;\r\n    bool useWhitelist;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        kimbapAddress = 0xa9af9CB36d7FCBB21149628BDF76Cc8Aa8987FA5;\r\n        kimbapToken = IERC20(kimbapAddress);\r\n        kimbapPanicClaimPenalty = 1000000000000000000000;\r\n        useWhitelist = false;\r\n    }\r\n    \r\n    function deposit(address tokenAddress, uint256 tokenAmount, uint256 letGoTime) external {\r\n        require(tokenAmount > 0, \"Deposit amount cannot be 0.\");\r\n        require(letGoTime > block.timestamp, \"Time to claim must be in the future.\");\r\n        \r\n        if (useWhitelist == true) {\r\n            require(tokenWhitelist[tokenAddress] == true, \"Token is not whitelisted.\");\r\n        }\r\n        \r\n        if (kimbapDepositPayment > 0) {\r\n            uint256 kimbapBalance = kimbapToken.balanceOf(msg.sender);\r\n            require(kimbapBalance >= kimbapDepositPayment, \"Insufficient KIMBAP for payment.\");\r\n            kimbapToken.transferFrom(msg.sender, address(this), kimbapDepositPayment);\r\n        }\r\n        \r\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n        hodlers[msg.sender][tokenAddress].push(TokenHodling(tokenAmount, block.timestamp, letGoTime, false, 0));\r\n        emit Deposit(msg.sender, tokenAddress, tokenAmount, letGoTime);\r\n    }\r\n    \r\n    function claim(address tokenAddress, uint256 depositSlot) external {\r\n        TokenHodling memory hodling = hodlers[msg.sender][tokenAddress][depositSlot];\r\n        require(block.timestamp > hodling.letGoTime, \"Not time to sell yet!\");\r\n        require(hodling.claimed != true, \"Already claimed!\");\r\n        \r\n        uint256 kimbapRewards = (block.timestamp.sub(hodling.depositTime)).mul(rewardsPerBlock);\r\n        uint256 hodlKimbapBalance = kimbapToken.balanceOf(address(this));\r\n        \r\n        if (hodlKimbapBalance > kimbapRewards) {\r\n            kimbapToken.transfer(msg.sender, kimbapRewards);\r\n        }\r\n        else {\r\n            kimbapToken.transfer(msg.sender, hodlKimbapBalance);\r\n        }\r\n        \r\n        hodlers[msg.sender][tokenAddress][depositSlot].claimed = true;\r\n        hodlers[msg.sender][tokenAddress][depositSlot].rewardsIssued = kimbapRewards;\r\n        IERC20(tokenAddress).transfer(msg.sender, hodling.tokenAmount);\r\n        emit Claim(msg.sender, tokenAddress, hodling.tokenAmount, block.timestamp);\r\n    }\r\n    \r\n    function panicClaim(address tokenAddress, uint256 depositSlot) external {\r\n        TokenHodling memory hodling = hodlers[msg.sender][tokenAddress][depositSlot];\r\n        require(hodling.claimed != true, \"Already claimed!\");\r\n        \r\n        if (kimbapPanicClaimPenalty > 0) {\r\n            uint256 kimbapBalance = kimbapToken.balanceOf(msg.sender);\r\n            require(kimbapBalance >= kimbapPanicClaimPenalty, \"Insufficient KIMBAP for penalty payment.\");\r\n            kimbapToken.transferFrom(msg.sender, address(this), kimbapPanicClaimPenalty);\r\n        }\r\n        \r\n        hodlers[msg.sender][tokenAddress][depositSlot].claimed = true;\r\n        IERC20(tokenAddress).transfer(msg.sender, hodling.tokenAmount);\r\n        emit PanicClaim(msg.sender, tokenAddress, hodling.tokenAmount, block.timestamp);\r\n    }\r\n    \r\n    function setRewardsPerBlock(uint256 _rewardsPerBlock) external isOwner {\r\n        rewardsPerBlock = _rewardsPerBlock;\r\n    }\r\n    \r\n    function setKimbapDepositPayment(uint256 _kimbapDepositPayment) external isOwner {\r\n        kimbapDepositPayment = _kimbapDepositPayment;\r\n    }\r\n    \r\n    function setKimbapPanicClaimPenalty(uint256 _kimbapPanicClaimPenalty) external isOwner {\r\n        kimbapPanicClaimPenalty = _kimbapPanicClaimPenalty;\r\n    }\r\n    \r\n    function addTokenToWhitelist(address token) public isOwner {\r\n        tokenWhitelist[token] = true;\r\n    }\r\n    \r\n    function removeTokenFromWhitelist(address token) public isOwner {\r\n        tokenWhitelist[token] = false;\r\n    }\r\n    \r\n    function setUseWhitelist(bool _useWhitelist) public isOwner {\r\n        useWhitelist = _useWhitelist;\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address payable newOwner) external isOwner {\r\n        owner = newOwner;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"letGoTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"PanicClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addTokenToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositSlot\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"letGoTime\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hodlers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"letGoTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardsIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kimbapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kimbapDepositPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kimbapPanicClaimPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kimbapToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositSlot\",\"type\":\"uint256\"}],\"name\":\"panicClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kimbapDepositPayment\",\"type\":\"uint256\"}],\"name\":\"setKimbapDepositPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kimbapPanicClaimPenalty\",\"type\":\"uint256\"}],\"name\":\"setKimbapPanicClaimPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useWhitelist\",\"type\":\"bool\"}],\"name\":\"setUseWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KimbapHodl","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd713019649e32ba5b9e85e1a282ee791b150ed9f112d1c7d677571122ee6c7f"}]}