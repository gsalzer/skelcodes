{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    //GOVERNANCE\r\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\r\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\r\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\r\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\r\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\r\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\r\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\r\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\r\n\r\n    // POOL\r\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\r\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\r\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\r\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\r\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\r\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\r\n    \r\n    //NOT GOVERNANCE\r\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\r\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\r\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\r\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\r\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\r\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\r\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\r\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\r\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\r\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\r\n\r\n    //POOL\r\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\r\n\r\n    //wallet\r\n    bytes32 public constant TEAM = bytes32('team'); \r\n    bytes32 public constant SPARE = bytes32('spare');\r\n    bytes32 public constant REWARD = bytes32('reward');\r\n}\r\n\r\n// Root file: contracts/AAAAConfig.sol\r\n\r\npragma solidity >=0.5.16;\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import 'contracts/modules/ConfigNames.sol';\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IAAAAPool {\r\n    function collateralToken() external view returns(address);\r\n}\r\n\r\ncontract AAAAConfig {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint8;\r\n    address public owner;\r\n    address public factory;\r\n    address public platform;\r\n    address public developer;\r\n    address public mint;\r\n    address public token;\r\n    address public share;\r\n    address public base;\r\n    address public governor;\r\n    address public WETH;\r\n\r\n    address[] public mintTokenList;\r\n\r\n    uint public lastPriceBlock;\r\n\r\n    uint public DAY = 6400;\r\n    uint public HOUR = 267;\r\n    \r\n    struct ConfigItem {\r\n        uint min;\r\n        uint max;\r\n        uint span;\r\n        uint value;\r\n    }\r\n    \r\n    mapping (address => mapping (bytes32 => ConfigItem)) public poolParams;\r\n    mapping (bytes32 => ConfigItem) public params;\r\n    mapping (bytes32 => address) public wallets;\r\n    mapping (address => uint) public prices;\r\n\r\n    event PriceChange(address token, uint value);\r\n    event ParameterChange(bytes32 key, uint value);\r\n    event PoolParameterChange(address pool, bytes32 key, uint value);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        developer = msg.sender;\r\n        uint id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        if(id != 1) {\r\n            DAY = 28800;\r\n            HOUR = 1200;\r\n        }\r\n    }\r\n    \r\n    function initialize (address _platform, address _factory, address _mint, address _token, address _share, address _governor, address _base, address _WETH) external {\r\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\r\n        mint        = _mint;\r\n        platform    = _platform;\r\n        factory     = _factory;\r\n        token       = _token;\r\n        share       = _share;\r\n        governor    = _governor;\r\n        base        = _base;\r\n        WETH        = _WETH;\r\n    }\r\n\r\n    function addMintToken(address _token) external {\r\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\r\n        mintTokenList.push(_token);\r\n    }\r\n\r\n    function isMintToken(address _token) public view returns (bool)  {\r\n        for(uint i = 0;i < mintTokenList.length;i++) {\r\n            if(_token == mintTokenList[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function changeDeveloper(address _developer) external {\r\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\r\n        developer = _developer;\r\n    }\r\n\r\n    function setWallets(bytes32[] calldata _names, address[] calldata _wallets) external {\r\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: ONLY DEVELOPER\");\r\n        require(_names.length == _wallets.length ,\"AAAA: WALLETS LENGTH MISMATCH\");\r\n        for(uint i = 0; i < _names.length; i ++)\r\n        {\r\n            wallets[_names[i]] = _wallets[i];\r\n        }\r\n    }\r\n\r\n    function initParameter() external {\r\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\r\n        _setParams(ConfigNames.PROPOSAL_VOTE_DURATION ,   1*DAY,  7*DAY , 1*DAY,  1*DAY);\r\n        _setParams(ConfigNames.PROPOSAL_EXECUTE_DURATION, 1*HOUR, 48*HOUR, 1*HOUR, 1*HOUR);\r\n        _setParams(ConfigNames.PROPOSAL_CREATE_COST, 0, 10000 * 1e18, 100 * 1e18, 0);\r\n        _setParams(ConfigNames.STAKE_LOCK_TIME, 0, 7*DAY, 1*DAY, 0);\r\n        _setParams(ConfigNames.MINT_AMOUNT_PER_BLOCK, 0, 10000 * 1e18, 1e17, 1e17);\r\n        _setParams(ConfigNames.INTEREST_PLATFORM_SHARE, 0, 1e18, 1e17, 1e17);\r\n        _setParams(ConfigNames.INTEREST_BUYBACK_SHARE, 10000, 10000, 0, 10000);\r\n        _setParams(ConfigNames.CHANGE_PRICE_DURATION, 0, 500, 100, 0);\r\n        _setParams(ConfigNames.CHANGE_PRICE_PERCENT, 1, 100, 1, 20);\r\n\r\n        _setParams(ConfigNames.AAAA_USER_MINT, 0, 0, 0, 3000);\r\n        _setParams(ConfigNames.AAAA_TEAM_MINT, 0, 0, 0, 7142);\r\n        _setParams(ConfigNames.AAAA_REWAED_MINT, 0, 0, 0, 5000);\r\n        _setParams(ConfigNames.DEPOSIT_ENABLE, 0, 0, 0, 1);\r\n        _setParams(ConfigNames.WITHDRAW_ENABLE, 0, 0, 0, 1);\r\n        _setParams(ConfigNames.BORROW_ENABLE, 0, 0, 0, 1);\r\n        _setParams(ConfigNames.REPAY_ENABLE, 0, 0, 0, 1);\r\n        _setParams(ConfigNames.LIQUIDATION_ENABLE, 0, 0, 0, 1);\r\n        _setParams(ConfigNames.REINVEST_ENABLE, 0, 0, 0, 1);\r\n    }\r\n\r\n    function initPoolParams(address _pool) external {\r\n        require(msg.sender == factory, \"Config FORBIDDEN\");\r\n        _setPoolParams(_pool, ConfigNames.POOL_BASE_INTERESTS, 0, 1e18, 1e16, 2e17);\r\n        _setPoolParams(_pool, ConfigNames.POOL_MARKET_FRENZY, 0, 1e18, 1e16, 2e17);\r\n        _setPoolParams(_pool, ConfigNames.POOL_PLEDGE_RATE, 0, 1e18, 1e16, 6e17);\r\n        _setPoolParams(_pool, ConfigNames.POOL_LIQUIDATION_RATE, 0, 1e18, 1e16, 9e17);\r\n        _setPoolParams(_pool, ConfigNames.POOL_MINT_POWER, 0, 0, 0, 10000);\r\n        _setPoolParams(_pool, ConfigNames.POOL_MINT_BORROW_PERCENT, 0, 10000, 1000, 5000);\r\n    }\r\n\r\n    function _setPoolValue(address _pool, bytes32 _key, uint _value) internal {\r\n        poolParams[_pool][_key].value = _value;\r\n        emit PoolParameterChange(_pool, _key, _value);\r\n    }\r\n\r\n    function _setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) internal {\r\n        params[_key] = ConfigItem(_min, _max, _span, _value);\r\n        emit ParameterChange(_key, _value);\r\n    }\r\n\r\n    function _setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _span, uint _value) internal {\r\n        poolParams[_pool][_key] = ConfigItem(_min, _max, _span, _value);\r\n        emit PoolParameterChange(_pool, _key, _value);\r\n    }\r\n\r\n    function _setPrice(address _token, uint _value) internal {\r\n        prices[_token] = _value;\r\n        emit PriceChange(_token, _value);\r\n    }\r\n\r\n    function setTokenPrice(address[] calldata _tokens, uint[] calldata _prices) external {\r\n        uint duration = params[ConfigNames.CHANGE_PRICE_DURATION].value;\r\n        uint maxPercent = params[ConfigNames.CHANGE_PRICE_PERCENT].value;\r\n        require(block.number >= lastPriceBlock.add(duration), \"AAAA: Price Duration\");\r\n        require(msg.sender == wallets[bytes32(\"price\")], \"AAAA: Config FORBIDDEN\");\r\n        require(_tokens.length == _prices.length ,\"AAAA: PRICES LENGTH MISMATCH\");\r\n\r\n        for(uint i = 0; i < _tokens.length; i++)\r\n        {\r\n            if(prices[_tokens[i]] == 0) {\r\n                _setPrice(_tokens[i], _prices[i]);\r\n            } else {\r\n                uint currentPrice = prices[_tokens[i]];\r\n                if(_prices[i] > currentPrice) {\r\n                    uint maxPrice = currentPrice.add(currentPrice.mul(maxPercent).div(10000));\r\n                    _setPrice(_tokens[i], _prices[i] > maxPrice ? maxPrice: _prices[i]);\r\n                } else {\r\n                    uint minPrice = currentPrice.sub(currentPrice.mul(maxPercent).div(10000));\r\n                    _setPrice(_tokens[i], _prices[i] < minPrice ? minPrice: _prices[i]);\r\n                }\r\n            } \r\n        }\r\n\r\n        lastPriceBlock = block.number;\r\n    }\r\n    \r\n    function setValue(bytes32 _key, uint _value) external {\r\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: ONLY DEVELOPER\");\r\n        params[_key].value = _value;\r\n        emit ParameterChange(_key, _value);\r\n    }\r\n    \r\n    function setPoolValue(address _pool, bytes32 _key, uint _value) external {\r\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\r\n        _setPoolValue(_pool, _key, _value);\r\n    }\r\n    \r\n    function getValue(bytes32 _key) external view returns (uint){\r\n        return params[_key].value;\r\n    }\r\n    \r\n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint) {\r\n        return poolParams[_pool][_key].value;\r\n    } \r\n\r\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external {\r\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\r\n        _setParams(_key, _min, _max, _span, _value);\r\n    }\r\n\r\n    function setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _span, uint _value) external {\r\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\r\n        _setPoolParams(_pool, _key, _min, _max, _span, _value);\r\n    }\r\n\r\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint) {\r\n        ConfigItem memory item = params[_key];\r\n        return (item.min, item.max, item.span, item.value);\r\n    }\r\n\r\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint) {\r\n        ConfigItem memory item = poolParams[_pool][_key];\r\n        return (item.min, item.max, item.span, item.value);\r\n    }\r\n\r\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns(uint toAmount) {\r\n        uint fromPrice = prices[_fromToken];\r\n        uint toPrice = prices[_toToken];\r\n        uint8 fromDecimals = IERC20(_fromToken).decimals();\r\n        uint8 toDecimals = IERC20(_toToken).decimals();\r\n        toAmount = _fromAmount.mul(fromPrice).div(toPrice);\r\n        if(fromDecimals > toDecimals) {\r\n            toAmount = toAmount.div(10 ** (fromDecimals.sub(toDecimals)));\r\n        } else if(toDecimals > fromDecimals) {\r\n            toAmount = toAmount.mul(10 ** (toDecimals.sub(fromDecimals)));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PoolParameterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addMintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"convertTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPoolParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isMintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"poolParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPoolValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AAAAConfig","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e0a99372ad3d0f57a542ee792fd79c6bbf610808951f5eb75a3ec9ecd0935c70"}]}