{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/Compound.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface Compound {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/Aave.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface Aave {\r\n    function deposit(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint16 _code\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/AToken.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface AToken {\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/ICurve.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ICurve {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/CToken.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface CToken {\r\n    function exchangeRateStored() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IYToken.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IYToken {\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function withdraw(uint256 _shares) external;\r\n\r\n    function deposit(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/LimaSwapV3.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract AddressStorage is OwnableUpgradeSafe {\r\n    enum Lender {NOT_FOUND, COMPOUND, AAVE}\r\n    enum TokenType {NOT_FOUND, STABLE_COIN, INTEREST_TOKEN, YTOKEN}\r\n\r\n    address internal constant dai = address(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n    address internal constant usdc = address(\r\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    );\r\n    address internal constant usdt = address(\r\n        0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n    );\r\n\r\n    //governance token\r\n    address internal constant AAVE = address(\r\n        0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\r\n    );\r\n    address internal constant COMP = address(\r\n        0xc00e94Cb662C3520282E6f5717214004A7f26888\r\n    );\r\n\r\n    address public aaveLendingPool;\r\n    address public aaveCore;\r\n    address public curve;\r\n\r\n    mapping(address => Lender) public lenders;\r\n    mapping(address => TokenType) public tokenTypes;\r\n    mapping(address => address) public interestTokenToUnderlyingStablecoin;\r\n\r\n    // @dev get ERC20 address for governance token from Compound or AAVE\r\n    // @param _token ERC20 address\r\n    function getGovernanceToken(address token) public view returns (address) {\r\n        if (lenders[token] == Lender.COMPOUND) {\r\n            return COMP;\r\n        } else if (lenders[token] == Lender.AAVE) {\r\n            return AAVE;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    // @dev get interest bearing token information\r\n    // @param _token ERC20 address\r\n    // @return lender protocol (Lender) and TokenTypes enums\r\n    function getTokenInfo(address interestBearingToken)\r\n        public\r\n        view\r\n        returns (Lender, TokenType)\r\n    {\r\n        return (\r\n            lenders[interestBearingToken],\r\n            tokenTypes[interestBearingToken]\r\n        );\r\n    }\r\n\r\n    // @dev set new Aave lending pool address\r\n    // @param _newAaveLendingPool Aave lending pool address\r\n    function setNewAaveLendingPool(address _newAaveLendingPool)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _newAaveLendingPool != address(0),\r\n            \"new _newAaveLendingPool is empty\"\r\n        );\r\n        aaveLendingPool = _newAaveLendingPool;\r\n    }\r\n\r\n    // @dev set new Aave core address\r\n    // @param _newAaveCore Aave core address\r\n    function setNewAaveCore(address _newAaveCore) public onlyOwner {\r\n        require(_newAaveCore != address(0), \"new _newAaveCore is empty\");\r\n        aaveCore = _newAaveCore;\r\n    }\r\n\r\n    // @dev set new curve pool\r\n    // @param _newCurvePool Curve pool address\r\n    function setNewCurvePool(address _newCurvePool) public onlyOwner {\r\n        require(_newCurvePool != address(0), \"new _newCurvePool is empty\");\r\n        curve = _newCurvePool;\r\n    }\r\n\r\n    // @dev set interest bearing token to its stable coin underlying\r\n    // @param interestToken ERC20 address\r\n    // @param underlyingToken stable coin ERC20 address\r\n    function setInterestTokenToUnderlyingStablecoin(\r\n        address interestToken,\r\n        address underlyingToken\r\n    ) public onlyOwner {\r\n        require(\r\n            interestToken != address(0) && underlyingToken != address(0),\r\n            \"token addresses must be entered\"\r\n        );\r\n\r\n        interestTokenToUnderlyingStablecoin[interestToken] = underlyingToken;\r\n    }\r\n\r\n    // @dev set interest bearing token to a lender protocol\r\n    // @param _token ERC20 address\r\n    // @param _lender Integer which represents LENDER enum\r\n    function setAddressToLender(address _token, Lender _lender)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"!_token\");\r\n\r\n        lenders[_token] = _lender;\r\n    }\r\n\r\n    // @dev set token to its type\r\n    // @param _token ERC20 address\r\n    // @param _tokenType Integer which represents TokenType enum\r\n    function setAddressTokenType(address _token, TokenType _tokenType)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"!_token\");\r\n\r\n        tokenTypes[_token] = _tokenType;\r\n    }\r\n}\r\n\r\ncontract LimaSwapV3 is AddressStorage, ReentrancyGuardUpgradeSafe {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MAX_UINT256 = 2**256 - 1;\r\n    uint16 public constant aaveCode = 94;\r\n\r\n    IUniswapV2Router02 private constant uniswapRouter = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    event Swapped(address from, address to, uint256 amount, uint256 result);\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        aaveLendingPool = address(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n        aaveCore = address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3);\r\n        curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51); // yPool\r\n\r\n        address cDai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n        address cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n        address cUsdt = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\r\n        address aDai = 0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d;\r\n        address aUsdc = 0x9bA00D6856a4eDF4665BcA2C2309936572473B7E;\r\n        address aUsdt = 0x71fc860F7D3A592A4a98740e39dB31d25db65ae8;\r\n\r\n        // set token types\r\n        setAddressTokenType(dai, TokenType.STABLE_COIN);\r\n        setAddressTokenType(usdc, TokenType.STABLE_COIN);\r\n        setAddressTokenType(usdt, TokenType.STABLE_COIN);\r\n\r\n        setAddressTokenType(cDai, TokenType.INTEREST_TOKEN);\r\n        setAddressTokenType(cUsdc, TokenType.INTEREST_TOKEN);\r\n        setAddressTokenType(cUsdt, TokenType.INTEREST_TOKEN);\r\n\r\n        setAddressTokenType(aDai, TokenType.INTEREST_TOKEN);\r\n        setAddressTokenType(aUsdc, TokenType.INTEREST_TOKEN);\r\n        setAddressTokenType(aUsdt, TokenType.INTEREST_TOKEN);\r\n\r\n        // set interest bearing tokens to lenders\r\n        setAddressToLender(cDai, Lender.COMPOUND); // compoundDai\r\n        setAddressToLender(cUsdc, Lender.COMPOUND); // compoundUSDC\r\n        setAddressToLender(cUsdt, Lender.COMPOUND); // compoundUSDT\r\n\r\n        setAddressToLender(aDai, Lender.AAVE); // aaveDai\r\n        setAddressToLender(aUsdc, Lender.AAVE); // aaveUSDC\r\n        setAddressToLender(aUsdt, Lender.AAVE); // aaveUSDT\r\n\r\n        // set interest tokens to their underlying stable coins\r\n        setInterestTokenToUnderlyingStablecoin(cDai, dai); //compoundDai\r\n        setInterestTokenToUnderlyingStablecoin(aDai, dai); // aaveDai\r\n        setInterestTokenToUnderlyingStablecoin(cUsdc, usdc); //compoundUsdc\r\n        setInterestTokenToUnderlyingStablecoin(aUsdc, usdc); //aaveUsdc\r\n        setInterestTokenToUnderlyingStablecoin(cUsdt, usdt); // compoundUsdt\r\n        setInterestTokenToUnderlyingStablecoin(aUsdt, usdt); // aaveUsdt\r\n\r\n        // infinitely approve tokens\r\n        IERC20(dai).safeApprove(aaveCore, MAX_UINT256);\r\n        IERC20(dai).safeApprove(cDai, MAX_UINT256); // compoundDai\r\n        IERC20(dai).safeApprove(curve, MAX_UINT256); // curve\r\n\r\n        IERC20(usdc).safeApprove(aaveCore, MAX_UINT256);\r\n        IERC20(usdc).safeApprove(cUsdc, MAX_UINT256); // compoundUSDC\r\n        IERC20(usdc).safeApprove(curve, MAX_UINT256); // curve\r\n\r\n        IERC20(usdt).safeApprove(aaveCore, MAX_UINT256);\r\n        IERC20(usdt).safeApprove(cUsdt, MAX_UINT256); // compoundUSDT\r\n        IERC20(usdt).safeApprove(curve, MAX_UINT256); // curve\r\n    }\r\n    // v3\r\n    bool public initializedV3;\r\n    mapping(address => address) public underlyingStablecoinToYToken;\r\n\r\n    function initializeV3() public {\r\n        require(!initializedV3, \"already initialized\"); // LImaSwap v3 can only be initialized once\r\n        address yDai = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01;\r\n        address yUsdc = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e;\r\n        address yUsdt = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D;\r\n        address yTusd = 0x73a052500105205d34Daf004eAb301916DA8190f;\r\n        address tusd = 0x0000000000085d4780B73119b644AE5ecd22b376;\r\n\r\n        setAddressTokenType(tusd, TokenType.STABLE_COIN);\r\n\r\n        setAddressTokenType(yDai, TokenType.YTOKEN);\r\n        setAddressTokenType(yUsdc, TokenType.YTOKEN);\r\n        setAddressTokenType(yUsdt, TokenType.YTOKEN);\r\n        setAddressTokenType(yTusd, TokenType.YTOKEN);\r\n\r\n        underlyingStablecoinToYToken[dai] = yDai;\r\n        underlyingStablecoinToYToken[usdc] = yUsdc;\r\n        underlyingStablecoinToYToken[usdt] = yUsdt;\r\n        underlyingStablecoinToYToken[tusd] = yTusd;\r\n        setInterestTokenToUnderlyingStablecoin(yDai, dai);\r\n        setInterestTokenToUnderlyingStablecoin(yUsdc, usdc);\r\n        setInterestTokenToUnderlyingStablecoin(yUsdt, usdt);\r\n        setInterestTokenToUnderlyingStablecoin(yTusd, tusd); // TrueUSD\r\n\r\n        // approvals\r\n        IERC20(dai).safeApprove(yDai, MAX_UINT256);\r\n        IERC20(usdt).safeApprove(yUsdt, MAX_UINT256);\r\n        IERC20(usdc).safeApprove(yUsdc, MAX_UINT256);\r\n        IERC20(tusd).safeApprove(yTusd, MAX_UINT256);\r\n        IERC20(tusd).safeApprove(curve, MAX_UINT256);\r\n\r\n        IERC20(yDai).safeApprove(curve, MAX_UINT256);\r\n        IERC20(yUsdt).safeApprove(curve, MAX_UINT256);\r\n        IERC20(yUsdc).safeApprove(curve, MAX_UINT256);\r\n        IERC20(yTusd).safeApprove(curve, MAX_UINT256);\r\n\r\n        initializedV3 = true;\r\n    }\r\n    // end v3\r\n\r\n    /* ============ Public ============ */\r\n\r\n    // @dev used for getting aproximate return amount from exchanging stable coins or interest bearing tokens to usdt usdc or dai\r\n    // used to calculate min return amount\r\n    // @param fromToken from ERC20 address\r\n    // @param toToken destination ERC20 address\r\n    // @param amount Number in fromToken\r\n    function getExpectedReturn(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) public view returns (uint256 returnAmount) {\r\n        // v3\r\n        if (\r\n            tokenTypes[fromToken] == TokenType.YTOKEN || tokenTypes[toToken] == TokenType.YTOKEN\r\n        ) {\r\n            // no need to get Expected return when underlying token from Ytoken is toToken\r\n            if(_normalizeToken(fromToken) == toToken || fromToken == _normalizeToken(toToken))  {\r\n                return amount;\r\n            }\r\n\r\n            if (tokenTypes[fromToken] == TokenType.STABLE_COIN) {\r\n                fromToken = _normalizeToYToken(fromToken);\r\n                amount = amount.mul(IYToken(fromToken).getPricePerFullShare());\r\n            }\r\n\r\n            // get Ytoken or get the Ytoken for the toToken if these are stablecoin\r\n            toToken = _normalizeToYToken(toToken);\r\n\r\n            // get yTokens index in curve selector\r\n            (int128 i, int128 j) = _calculateCurveSelectorForYTokens(\r\n                IERC20(fromToken),\r\n                IERC20(toToken)\r\n            );\r\n            returnAmount = ICurve(curve).get_dy(i, j, amount);\r\n            return returnAmount;\r\n        }\r\n        // end v3\r\n\r\n        //get unwrapped token or keep if allready unwrapped\r\n        toToken = _normalizeToken(toToken);\r\n\r\n        //get unwrapped from token and amount\r\n        if (\r\n            tokenTypes[fromToken] == TokenType.INTEREST_TOKEN &&\r\n            lenders[fromToken] == Lender.COMPOUND\r\n        ) {\r\n            uint256 compoundRate = CToken(fromToken).exchangeRateStored();\r\n            amount = amount.mul(compoundRate).div(1e18);\r\n            fromToken = interestTokenToUnderlyingStablecoin[fromToken];\r\n        } else if (\r\n            tokenTypes[fromToken] == TokenType.INTEREST_TOKEN &&\r\n            lenders[fromToken] == Lender.AAVE\r\n        ) {\r\n            fromToken = interestTokenToUnderlyingStablecoin[fromToken];\r\n        }\r\n        //only wrap or unwrap\r\n        if (toToken == fromToken) {\r\n            return amount;\r\n        }\r\n        if (\r\n            tokenTypes[toToken] == TokenType.NOT_FOUND ||\r\n            tokenTypes[fromToken] == TokenType.NOT_FOUND\r\n        ) {\r\n            //uniswap\r\n            returnAmount = _getExpectedReturnUniswap(\r\n                fromToken,\r\n                toToken,\r\n                amount\r\n            );\r\n        } else {\r\n            //curve\r\n            (int128 i, int128 j) = _calculateCurveSelector(\r\n                IERC20(fromToken),\r\n                IERC20(toToken)\r\n            );\r\n            returnAmount = ICurve(curve).get_dy_underlying(i, j, amount);\r\n        }\r\n        return returnAmount;\r\n    }\r\n\r\n    function getUnderlyingAmount(address token, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 underlyingAmount)\r\n    {\r\n        underlyingAmount = amount;\r\n        if (\r\n            tokenTypes[token] == TokenType.INTEREST_TOKEN &&\r\n            lenders[token] == Lender.COMPOUND\r\n        ) {\r\n            uint256 compoundRate = CToken(token).exchangeRateStored();\r\n            underlyingAmount = amount.mul(compoundRate).div(1e18);\r\n        }\r\n        // v3\r\n        else if (\r\n            tokenTypes[token] == TokenType.YTOKEN\r\n        ) {\r\n            underlyingAmount = amount.mul(IYToken(token).getPricePerFullShare());\r\n        }\r\n        // end v3\r\n    }\r\n\r\n    // @dev Add function to remove locked tokens that may be sent by users accidently to the contract\r\n    // @param token ERC20 address of token\r\n    // @param recipient Beneficiary of the token transfer\r\n    // @param amount Number to tranfer\r\n    function removeLockedErc20(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    // @dev balance of an ERC20 token within swap contract\r\n    // @param token ERC20 token address\r\n    function balanceOfToken(address token) public view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // @dev swap from token A to token B for sender. Receiver of funds needs to be passed. Sender needs to approve LimaSwap to use her tokens\r\n    // @param recipient Beneficiary of the swap tx\r\n    // @param from ERC20 address of token to swap from\r\n    // @param to ERC20 address to swap to\r\n    // @param amount from Token value to swap\r\n    // @param minReturnAmount Minimum amount that needs to be returned. Used to prevent frontrunning\r\n    function swap(\r\n        address recipient,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minReturnAmount\r\n    ) public nonReentrant returns (uint256) {\r\n        require(from != to, \"LS2\"); // swapping requires different tokens\r\n\r\n        _transferAmountToSwap(from, amount);\r\n\r\n        // v3\r\n        if (tokenTypes[from] == TokenType.YTOKEN || tokenTypes[to] == TokenType.YTOKEN) {\r\n            return _swapBasedOnYtoken(recipient, from, to, amount, minReturnAmount);\r\n        }\r\n        // end v3\r\n\r\n        uint256 amountToTransfer = balanceOfToken(to);\r\n        address unwrappedFrom = _normalizeToken(from); // unwrap token to underlying if possible (aDai => dai, dai => dai, aave => aave)\r\n        uint256 amountToSwap = amount;\r\n        if (unwrappedFrom != from) {\r\n            amountToSwap = balanceOfToken(unwrappedFrom);\r\n            _unwrap(from);\r\n            amountToSwap = balanceOfToken(unwrappedFrom).sub(amountToSwap);\r\n        }\r\n        address unwrappedTo = _normalizeToken(to);\r\n\r\n        if (unwrappedFrom != unwrappedTo) {\r\n            // non core swaps\r\n            if (\r\n                tokenTypes[from] == TokenType.NOT_FOUND ||\r\n                tokenTypes[to] == TokenType.NOT_FOUND\r\n            ) {\r\n                _swapViaUniswap(\r\n                    unwrappedFrom,\r\n                    unwrappedTo,\r\n                    amountToSwap,\r\n                    minReturnAmount,\r\n                    address(this)\r\n                );\r\n            } else {\r\n                // core swaps\r\n                _swapViaCurve(\r\n                    unwrappedFrom,\r\n                    unwrappedTo,\r\n                    amountToSwap,\r\n                    minReturnAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        if (unwrappedTo != to) {\r\n            _wrap(to);\r\n        }\r\n        amountToTransfer = balanceOfToken(to).sub(amountToTransfer);\r\n\r\n        IERC20(to).safeTransfer(recipient, amountToTransfer);\r\n\r\n        emit Swapped(from, to, amount, amountToTransfer);\r\n\r\n        return amountToTransfer;\r\n    }\r\n\r\n    // v3\r\n    function _swapBasedOnYtoken(\r\n        address recipient,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minReturnAmount\r\n    ) internal returns (uint256) {\r\n        // DAI to YDai or YDai to Dai - swap Ytoken to its underlying or vice-versa\r\n        if (_normalizeToken(from) == to)  {\r\n            IYToken(from).withdraw(amount);\r\n        } else if (from == _normalizeToken(to)) {\r\n            IYToken(to).deposit(amount);\r\n        // USDC to Ydai\r\n        } else if (tokenTypes[from] == TokenType.STABLE_COIN && tokenTypes[to] == TokenType.YTOKEN) {\r\n            address fromYToken = _normalizeToYToken(from);\r\n            IYToken(fromYToken).deposit(amount);\r\n            uint256 underlyingToYtokenAmount = balanceOfToken(fromYToken);\r\n            _swapViaCurveYToken(fromYToken, to, underlyingToYtokenAmount, minReturnAmount);\r\n\r\n        // YUsdt to USDT\r\n        } else if (tokenTypes[from] == TokenType.YTOKEN && tokenTypes[to] == TokenType.STABLE_COIN) {\r\n            // get Ytoken or get the Ytoken for the toToken if these are stablecoin\r\n            address toYToken = _normalizeToYToken(to);\r\n\r\n            _swapViaCurveYToken(from, toYToken, amount, minReturnAmount);\r\n            uint256 amountOfTokenToSwapToStablecoin = balanceOfToken(toYToken);\r\n            IYToken(toYToken).withdraw(amountOfTokenToSwapToStablecoin);\r\n\r\n        } else if (tokenTypes[from] == TokenType.YTOKEN && tokenTypes[to] == TokenType.YTOKEN) {\r\n            _swapViaCurveYToken(from, to, amount, minReturnAmount);\r\n        } else if (tokenTypes[from] == TokenType.INTEREST_TOKEN) {\r\n            _unwrap(from); // unwrap say aUSDC to USDC\r\n            address unwrappedToken = _normalizeToken(from);  // find unwrapped stable coin\r\n            uint256 balanceFromUnwrapped = balanceOfToken(unwrappedToken);\r\n\r\n            address fromYToken = _normalizeToYToken(unwrappedToken); // find YToken from stable coin\r\n            IYToken(fromYToken).deposit(balanceFromUnwrapped);\r\n            uint256 underlyingToYtokenAmount = balanceOfToken(fromYToken);\r\n\r\n            _swapViaCurveYToken(fromYToken, to, underlyingToYtokenAmount, minReturnAmount);\r\n        } else {\r\n            revert('Ytoken only swappable to stablecoin or other Ytoken');\r\n        }\r\n\r\n        uint256 amountToTransfer = balanceOfToken(to);\r\n        IERC20(to).safeTransfer(recipient, amountToTransfer);\r\n\r\n        emit Swapped(from, to, amount, amountToTransfer);\r\n\r\n        return amountToTransfer;\r\n    }\r\n    // env v3\r\n\r\n    // @dev swap interesting bearing token to its underlying from either AAve or Compound\r\n    // @param interestBearingToken ERC20 address of interest bearing token\r\n    // @param amount Interest bearing token value\r\n    // @param recipient Beneficiary of the tx\r\n    function unwrap(\r\n        address interestBearingToken,\r\n        uint256 amount,\r\n        address recipient\r\n    ) public nonReentrant {\r\n        (, TokenType t) = getTokenInfo(interestBearingToken);\r\n        require(t == TokenType.INTEREST_TOKEN || t == TokenType.YTOKEN, \"not an interest bearing token or YToken\");\r\n        _transferAmountToSwap(interestBearingToken, amount);\r\n\r\n        _unwrap(interestBearingToken);\r\n        address u = interestTokenToUnderlyingStablecoin[interestBearingToken];\r\n\r\n        uint256 balanceofSwappedtoken = balanceOfToken(u);\r\n        IERC20(u).safeTransfer(recipient, balanceofSwappedtoken);\r\n    }\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    function _swapViaCurve(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minAmountToPreventFrontrunning\r\n    ) internal {\r\n        (int128 i, int128 j) = _calculateCurveSelector(\r\n            IERC20(from),\r\n            IERC20(to)\r\n        );\r\n\r\n        ICurve(curve).exchange_underlying(\r\n            i,\r\n            j,\r\n            amount,\r\n            minAmountToPreventFrontrunning\r\n        );\r\n    }\r\n\r\n    function _swapViaCurveYToken(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minAmountToPreventFrontrunning\r\n    ) internal {\r\n        (int128 i, int128 j) = _calculateCurveSelectorForYTokens(\r\n            IERC20(from),\r\n            IERC20(to)\r\n        );\r\n\r\n        ICurve(curve).exchange(\r\n            i,\r\n            j,\r\n            amount,\r\n            minAmountToPreventFrontrunning\r\n        );\r\n    }\r\n\r\n    function _swapViaUniswap(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minReturnAmount,\r\n        address recipient\r\n    ) internal {\r\n        IERC20(from).safeIncreaseAllowance(address(uniswapRouter), amount);\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = from;\r\n        path[1] = uniswapRouter.WETH();\r\n        path[2] = to;\r\n        uniswapRouter.swapExactTokensForTokens(\r\n            amount,\r\n            minReturnAmount,\r\n            path,\r\n            recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnUniswap(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        address[] memory path = new address[](3);\r\n        path[0] = from;\r\n        path[1] = uniswapRouter.WETH();\r\n        path[2] = to;\r\n        uint256[] memory minOuts = uniswapRouter.getAmountsOut(amount, path);\r\n        return minOuts[minOuts.length - 1];\r\n    }\r\n\r\n    function _normalizeToken(address token) internal view returns (address) {\r\n        if (interestTokenToUnderlyingStablecoin[token] == address(0)) {\r\n            return token;\r\n        }\r\n        return interestTokenToUnderlyingStablecoin[token];\r\n    }\r\n\r\n    // v3\r\n    function _normalizeToYToken(address token) internal view returns (address) {\r\n        if (underlyingStablecoinToYToken[token] == address(0)) {\r\n            return token;\r\n        }\r\n        return underlyingStablecoinToYToken[token];\r\n    }\r\n    // end v3\r\n\r\n    function _wrap(address interestBearingToken) internal {\r\n\r\n            address toTokenStablecoin\r\n         = interestTokenToUnderlyingStablecoin[interestBearingToken];\r\n        require(\r\n            toTokenStablecoin != address(0),\r\n            \"not an interest bearing token\"\r\n        );\r\n        uint256 balanceToTokenStableCoin = balanceOfToken(toTokenStablecoin);\r\n        if (balanceToTokenStableCoin > 0) {\r\n            if (lenders[interestBearingToken] == Lender.COMPOUND) {\r\n                _supplyCompound(interestBearingToken, balanceToTokenStableCoin);\r\n            }\r\n            else if (lenders[interestBearingToken] == Lender.AAVE) {\r\n                _supplyAave(toTokenStablecoin, balanceToTokenStableCoin);\r\n            }\r\n            else if (tokenTypes[interestBearingToken] == TokenType.YTOKEN) {\r\n                IYToken(interestBearingToken).deposit(balanceToTokenStableCoin);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _unwrap(address interestBearingToken) internal {\r\n        (Lender l, TokenType t) = getTokenInfo(interestBearingToken);\r\n        if (t == TokenType.INTEREST_TOKEN) {\r\n            if (l == Lender.COMPOUND) {\r\n                _withdrawCompound(interestBearingToken);\r\n            } else if (l == Lender.AAVE) {\r\n                _withdrawAave(interestBearingToken);\r\n            }\r\n        } else if (t == TokenType.YTOKEN) {\r\n            uint256 amountToWithdraw = balanceOfToken(interestBearingToken);\r\n            IYToken(interestBearingToken).withdraw(amountToWithdraw);\r\n        }\r\n    }\r\n\r\n    function _transferAmountToSwap(address from, uint256 amount) internal {\r\n        IERC20(from).safeTransferFrom(_msgSender(), address(this), amount);\r\n    }\r\n\r\n    // curve interface functions\r\n    function _calculateCurveSelector(IERC20 fromToken, IERC20 toToken)\r\n        internal\r\n        pure\r\n        returns (int128, int128)\r\n    {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = IERC20(dai);\r\n        tokens[1] = IERC20(usdc);\r\n        tokens[2] = IERC20(usdt);\r\n\r\n        int128 i = 0;\r\n        int128 j = 0;\r\n        for (uint256 t = 0; t < tokens.length; t++) {\r\n            if (address(fromToken) == address(tokens[t])) {\r\n                i = int128(t + 1);\r\n            }\r\n            if (address(toToken) == address(tokens[t])) {\r\n                j = int128(t + 1);\r\n            }\r\n        }\r\n\r\n        return (i - 1, j - 1);\r\n    }\r\n\r\n    function _calculateCurveSelectorForYTokens(IERC20 fromToken, IERC20 toToken)\r\n        internal\r\n        pure\r\n        returns (int128, int128)\r\n    {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = IERC20(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01); // yDai\r\n        tokens[1] = IERC20(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e); // yUsdc\r\n        tokens[2] = IERC20(0x83f798e925BcD4017Eb265844FDDAbb448f1707D); // yUsdt\r\n        tokens[3] = IERC20(0x73a052500105205d34Daf004eAb301916DA8190f); // yTusd\r\n\r\n        int128 i = 0;\r\n        int128 j = 0;\r\n        for (uint256 t = 0; t < tokens.length; t++) {\r\n            if (address(fromToken) == address(tokens[t])) {\r\n                i = int128(t + 1);\r\n            }\r\n            if (address(toToken) == address(tokens[t])) {\r\n                j = int128(t + 1);\r\n            }\r\n        }\r\n\r\n        return (i - 1, j - 1);\r\n    }\r\n\r\n    // compound interface functions\r\n    function _supplyCompound(address interestToken, uint256 amount) internal {\r\n        require(\r\n            Compound(interestToken).mint(amount) == 0,\r\n            \"COMPOUND: supply failed\"\r\n        );\r\n    }\r\n\r\n    function _withdrawCompound(address cToken) internal {\r\n        uint256 balanceInCToken = IERC20(cToken).balanceOf(address(this));\r\n        if (balanceInCToken > 0) {\r\n            require(\r\n                Compound(cToken).redeem(balanceInCToken) == 0,\r\n                \"COMPOUND: withdraw failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    // aave interface functions\r\n    function _supplyAave(address _underlyingToken, uint256 amount) internal {\r\n        Aave(aaveLendingPool).deposit(_underlyingToken, amount, aaveCode);\r\n    }\r\n\r\n    function _withdrawAave(address aToken) internal {\r\n        uint256 amount = IERC20(aToken).balanceOf(address(this));\r\n\r\n        if (amount > 0) {\r\n            AToken(aToken).redeem(amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveCode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getGovernanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interestBearingToken\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"enum AddressStorage.Lender\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum AddressStorage.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestTokenToUnderlyingStablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"enum AddressStorage.Lender\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLockedErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum AddressStorage.Lender\",\"name\":\"_lender\",\"type\":\"uint8\"}],\"name\":\"setAddressToLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum AddressStorage.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"setAddressTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"setInterestTokenToUnderlyingStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAaveCore\",\"type\":\"address\"}],\"name\":\"setNewAaveCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAaveLendingPool\",\"type\":\"address\"}],\"name\":\"setNewAaveLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCurvePool\",\"type\":\"address\"}],\"name\":\"setNewCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTypes\",\"outputs\":[{\"internalType\":\"enum AddressStorage.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingStablecoinToYToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interestBearingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LimaSwapV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ca83824a41cc5d8ee97f6afe2a3a9d3792fd841f43475653eaf56167dee4721b"}]}