{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IPepemonFactory {\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n    function mint(address _to, uint256 _id, uint256 _quantity, bytes calldata _data) external;\r\n    function burn(address _account, uint256 _id, uint256 _amount) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n}\r\n\r\ncontract PepemonStake is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IPepemonFactory public pepemonFactory;\r\n\r\n    struct StakingEvent {\r\n        uint256[] cardIdList;\r\n        uint256 cardAmountAny; // If this is > 0, cardAmountList will be ignored, and user will be able to stake multiple cards of any card accepted\r\n        uint256[] cardAmountList; // Will be ignored if cardAmountAny > 0\r\n        uint256 cardRewardId;\r\n        uint256 blockStakeLength; // Amounts of blocks of staking required to complete the event\r\n        uint256 blockEventClose; // Block at which this event will not accept any new stake\r\n        uint256[] toBurnIdList; // Id list of cards to burn on completion of event\r\n        uint256[] toBurnAmountList; // Amount list of cards to burn on completion of event\r\n    }\r\n\r\n    struct UserInfo {\r\n        bool isCompleted;\r\n        uint256 blockEnd; // Block at which user will have completed the event (If this is not 0, user is currently staking)\r\n    }\r\n\r\n    StakingEvent[] public stakingEvents;\r\n    mapping (address => mapping(uint256 => UserInfo)) public userInfo;\r\n    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public cardsStaked; // address => eventId => cardId => amountStaked\r\n\r\n    ////\r\n    // Events\r\n    ////\r\n\r\n    event StakingEventCreated(uint256 eventId);\r\n    event StakingEventEntered(address indexed user, uint256 eventId);\r\n    event StakingEventCompleted(address indexed user, uint256 eventId);\r\n    event StakingEventCancelled(address indexed user, uint256 eventId);\r\n\r\n    //////////////\r\n\r\n    constructor(IPepemonFactory _pepemonFactoryAddress) public {\r\n        pepemonFactory = _pepemonFactoryAddress;\r\n    }\r\n\r\n    ////\r\n    // View\r\n    ////\r\n\r\n    function getStakingEventsLength() external view returns(uint256) {\r\n        return stakingEvents.length;\r\n    }\r\n\r\n    // Return all staking events\r\n    function getAllEvents() public view returns(StakingEvent[] memory) {\r\n        return stakingEvents;\r\n    }\r\n\r\n    // Returns the id list of all active events\r\n    function getActiveEvents() external view returns(uint256[] memory) {\r\n        StakingEvent[] memory _events = getAllEvents();\r\n\r\n        uint256 nbActive = 0;\r\n        for (uint256 i = 0; i < _events.length; i++) {\r\n            if (_events[i].blockEventClose >= block.number) {\r\n                nbActive++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory _result = new uint256[](nbActive);\r\n        uint256 idx = 0;\r\n        for (uint256 i = 0; i < _events.length; i++) {\r\n            if (_events[i].blockEventClose >= block.number) {\r\n                _result[idx] = i;\r\n                idx++;\r\n            }\r\n        }\r\n\r\n        return _result;\r\n    }\r\n\r\n    // Returns the id list of all closed events\r\n    function getClosedEvents() external view returns(uint256[] memory) {\r\n        StakingEvent[] memory _events = getAllEvents();\r\n\r\n        uint256 nbCompleted = 0;\r\n        for (uint256 i = 0; i < _events.length; i++) {\r\n            if (_events[i].blockEventClose < block.number) {\r\n                nbCompleted++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory _result = new uint256[](nbCompleted);\r\n        uint256 idx = 0;\r\n        for (uint256 i = 0; i < _events.length; i++) {\r\n            if (_events[i].blockEventClose < block.number) {\r\n                _result[idx] = i;\r\n                idx++;\r\n            }\r\n        }\r\n\r\n        return _result;\r\n    }\r\n\r\n    function getCardIdListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {\r\n        return stakingEvents[_eventId].cardIdList;\r\n    }\r\n\r\n    function getCardAmountListOfEvent(uint256 _eventId) external view returns(uint256[] memory) {\r\n        return stakingEvents[_eventId].cardAmountList;\r\n    }\r\n\r\n    // Returns the % progress of the user towards completion of the event (100% = 1e5)\r\n    function getUserProgress(address _user, uint256 _eventId) external view returns(uint256) {\r\n        StakingEvent memory _event = stakingEvents[_eventId];\r\n        UserInfo memory _userInfo = userInfo[_user][_eventId];\r\n\r\n        if (_userInfo.blockEnd == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (_userInfo.isCompleted || block.number >= _userInfo.blockEnd) {\r\n            return 1e5;\r\n        }\r\n\r\n        uint256 blocksLeft = _userInfo.blockEnd.sub(block.number);\r\n        // Amount of blocks the user has been staked for this event\r\n        uint256 blocksStaked = _event.blockStakeLength.sub(blocksLeft);\r\n\r\n        return blocksStaked.mul(1e5).div(_event.blockStakeLength);\r\n    }\r\n\r\n\r\n    //////////////\r\n\r\n    // Create a new staking event\r\n    function createStakingEvent(uint256[] memory _cardIdList, uint256 _cardAmountAny, uint256[] memory _cardAmountList, uint256 _cardRewardId,\r\n        uint256 _blockStakeLength, uint256 _blockEventClose, uint256[] memory _toBurnIdList, uint256[] memory _toBurnAmountList) public onlyOwner {\r\n\r\n        require(_cardIdList.length > 0, \"Accepted card list is empty\");\r\n        require(_cardAmountAny > 0 || _cardAmountList.length > 0, \"Card amount required not specified\");\r\n        require(_blockEventClose > block.number, \"blockEventClose < current block\");\r\n        require(_toBurnIdList.length == _toBurnAmountList.length, \"ToBurn arrays have different length\");\r\n        require(_cardAmountAny == 0 || _toBurnIdList.length == 0, \"ToBurn not supported with anyEvent\");\r\n\r\n        stakingEvents.push(StakingEvent({\r\n        cardIdList: _cardIdList,\r\n        cardAmountAny: _cardAmountAny,\r\n        cardAmountList: _cardAmountList,\r\n        cardRewardId: _cardRewardId,\r\n        blockStakeLength: _blockStakeLength,\r\n        blockEventClose: _blockEventClose,\r\n        toBurnIdList: _toBurnIdList,\r\n        toBurnAmountList: _toBurnAmountList\r\n        }));\r\n\r\n        emit StakingEventCreated(stakingEvents.length - 1);\r\n    }\r\n\r\n    // Close prematurely a staking event\r\n    function closeStakingEvent(uint256 _eventId) public onlyOwner {\r\n        require(stakingEvents[_eventId].blockEventClose > block.number, \"Event already closed\");\r\n        stakingEvents[_eventId].blockEventClose = block.number;\r\n    }\r\n\r\n    //////////////\r\n\r\n    // Stake cards into a staking event\r\n    function stakeAny(uint256 _eventId, uint256[] memory _cardIdList, uint256[] memory _cardAmountList) public {\r\n        require(_cardIdList.length == _cardAmountList.length, \"Arrays have different length\");\r\n\r\n        StakingEvent storage _event = stakingEvents[_eventId];\r\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\r\n\r\n        require(block.number <= _event.blockEventClose, \"Event is closed\");\r\n        require(_userInfo.isCompleted == false, \"Address already completed event\");\r\n        require(_userInfo.blockEnd == 0, \"Address already staked for this event\");\r\n        require(_event.cardAmountAny > 0, \"Not a stakeAny event\");\r\n\r\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\r\n            require(_isInArray(_cardIdList[i], _event.cardIdList), \"Card not accepted\");\r\n        }\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < _cardAmountList.length; i++) {\r\n            total = total.add(_cardAmountList[i]);\r\n        }\r\n\r\n        require(total == _event.cardAmountAny, \"Wrong card total\");\r\n\r\n        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _cardIdList, _cardAmountList, \"\");\r\n\r\n        // Save list cards staked in storage\r\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\r\n            uint256 cardId = _cardIdList[i];\r\n            uint256 amount = _cardAmountList[i];\r\n\r\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\r\n        }\r\n\r\n        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\r\n\r\n        emit StakingEventEntered(msg.sender, _eventId);\r\n    }\r\n\r\n    // Function to use for staking with an event where cardId and cardAmount are fixed\r\n    function stake(uint256 _eventId) public {\r\n        StakingEvent storage _event = stakingEvents[_eventId];\r\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\r\n\r\n        require(block.number <= _event.blockEventClose, \"Event is closed\");\r\n        require(_userInfo.isCompleted == false, \"Address already completed event\");\r\n        require(_userInfo.blockEnd == 0, \"Address already staked for this event\");\r\n\r\n        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _event.cardIdList, _event.cardAmountList, \"\");\r\n\r\n        // Save list cards staked in storage\r\n        for (uint256 i = 0; i < _event.cardIdList.length; i++) {\r\n            uint256 cardId = _event.cardIdList[i];\r\n            uint256 amount = _event.cardAmountList[i];\r\n\r\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\r\n        }\r\n\r\n        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\r\n\r\n        emit StakingEventEntered(msg.sender, _eventId);\r\n    }\r\n\r\n    // Claim staked cards + reward\r\n    function claim(uint256 _eventId) public {\r\n        StakingEvent storage _event = stakingEvents[_eventId];\r\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\r\n\r\n        require(block.number >= _userInfo.blockEnd, \"BlockEnd not reached\");\r\n\r\n        _userInfo.isCompleted = true;\r\n        pepemonFactory.mint(msg.sender, _event.cardRewardId, 1, \"\");\r\n        _withdrawCardsStaked(_eventId, true);\r\n\r\n        emit StakingEventCompleted(msg.sender, _eventId);\r\n    }\r\n\r\n    // Withdraw staked cards, but reset event progress\r\n    function cancel(uint256 _eventId) public {\r\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\r\n\r\n        require(_userInfo.isCompleted == false, \"Address already completed event\");\r\n        require(_userInfo.blockEnd != 0, \"Address is not staked for this event\");\r\n\r\n        delete _userInfo.isCompleted;\r\n        delete _userInfo.blockEnd;\r\n\r\n        _withdrawCardsStaked(_eventId, false);\r\n\r\n        emit StakingEventCancelled(msg.sender, _eventId);\r\n    }\r\n\r\n    function _withdrawCardsStaked(uint256 _eventId, bool _burn) internal {\r\n        StakingEvent storage _event = stakingEvents[_eventId];\r\n\r\n        uint256[] memory _cardIdList = _event.cardIdList;\r\n        uint256[] memory _cardAmountList = new uint256[](_cardIdList.length);\r\n\r\n        uint256[] memory _toBurnIdList = _event.toBurnIdList;\r\n        uint256[] memory _toBurnAmountList = _event.toBurnAmountList;\r\n\r\n\r\n        // Burn cards which needs to be burn to complete the evend\r\n        if (_burn == true) {\r\n            for (uint256 i = 0; i < _toBurnIdList.length; i++) {\r\n                uint256 cardId = _toBurnIdList[i];\r\n                uint256 amount = _toBurnAmountList[i];\r\n\r\n                cardsStaked[msg.sender][_eventId][cardId] = cardsStaked[msg.sender][_eventId][cardId].sub(amount);\r\n                pepemonFactory.burn(address(this), cardId, amount);\r\n            }\r\n        }\r\n\r\n        // Get all cards staked by address, and set to 0 amount staked\r\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\r\n            uint256 cardId = _cardIdList[i];\r\n            _cardAmountList[i] = cardsStaked[msg.sender][_eventId][cardId];\r\n            delete cardsStaked[msg.sender][_eventId][cardId];\r\n        }\r\n\r\n        pepemonFactory.safeBatchTransferFrom(address(this), msg.sender, _cardIdList, _cardAmountList, \"\");\r\n    }\r\n\r\n    // Utility function to check if a value is inside an array\r\n    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\r\n        uint256 length = _array.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            if (_array[i] == _value) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /////////\r\n    /////////\r\n    /////////\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\r\n        return 0xf23a6e61;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\r\n        return 0xbc197c81;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\r\n        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPepemonFactory\",\"name\":\"_pepemonFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"StakingEventCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"StakingEventCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"StakingEventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"StakingEventEntered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"closeStakingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cardAmountAny\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cardRewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockStakeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockEventClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_toBurnIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toBurnAmountList\",\"type\":\"uint256[]\"}],\"name\":\"createStakingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"cardIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"cardAmountAny\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"cardAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"cardRewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStakeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEventClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"toBurnIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toBurnAmountList\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PepemonStake.StakingEvent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getCardAmountListOfEvent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getCardIdListOfEvent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClosedEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingEventsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getUserProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pepemonFactory\",\"outputs\":[{\"internalType\":\"contract IPepemonFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardAmountList\",\"type\":\"uint256[]\"}],\"name\":\"stakeAny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cardAmountAny\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardRewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStakeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEventClose\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PepemonStake","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cb6768a968440187157cfe13b67cac82ef6cc5a4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a08875ef3b644cf0c945068105649b441a889067a7f300efc47f2fe89c8bd5fa"}]}