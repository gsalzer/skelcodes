{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/staking/JointCampaign.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {Ownable} from \\\"../lib/Ownable.sol\\\";\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"../lib/SafeERC20.sol\\\";\\nimport {Decimal} from \\\"../lib/Decimal.sol\\\";\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\nimport {IMozartCoreV2} from \\\"../debt/mozart/IMozartCoreV2.sol\\\";\\nimport {MozartTypes} from \\\"../debt/mozart/MozartTypes.sol\\\";\\n\\ncontract JointCampaign is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== Structs ========== */\\n\\n    struct Staker {\\n        uint256 positionId;\\n        uint256 debtSnapshot;\\n        uint256 balance;\\n        uint256 arcRewardPerTokenPaid;\\n        uint256 collabRewardPerTokenPaid;\\n        uint256 arcRewardsEarned;\\n        uint256 collabRewardsEarned;\\n        uint256 arcRewardsReleased;\\n        uint256 collabRewardsReleased;\\n    }\\n\\n    /* ========== Variables ========== */\\n\\n    bool public isInitialized;\\n\\n    IERC20 public arcRewardToken;\\n    IERC20 public collabRewardToken;\\n    IERC20 public stakingToken;\\n\\n    IMozartCoreV2 public stateContract;\\n\\n    address public arcDAO;\\n    address public arcRewardsDistributor;\\n    address public collabRewardsDistributor;\\n\\n    mapping (address => Staker) public stakers;\\n\\n    uint256 public arcPeriodFinish = 0;\\n    uint256 public collabPeriodFinish = 0;\\n    uint256 public rewardsDuration = 0;\\n    uint256 public arcLastUpdateTime;\\n    uint256 public collabLastUpdateTime;\\n\\n    uint256 public arcRewardRate = 0;\\n    uint256 public collabRewardRate = 0;\\n\\n    uint256 public arcRewardPerTokenStored;\\n    uint256 public collabPerTokenStored;\\n\\n    Decimal.D256 public daoAllocation;\\n    Decimal.D256 public slasherCut;\\n\\n    uint8 public stakeToDebtRatio;\\n\\n    bool public arcTokensClaimable;\\n    bool public collabTokensClaimable;\\n\\n    uint256 private _totalSupply;\\n\\n    /* ========== Events ========== */\\n\\n    event RewardAdded (uint256 _reward, address _rewardToken);\\n\\n    event Staked(address indexed _user, uint256 _amount);\\n\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n\\n    event RewardPaid(address indexed _user, uint256 _arcReward, uint256 _collabReward);\\n\\n    event RewardsDurationUpdated(uint256 _newDuration);\\n\\n    event ERC20Recovered(address _token, uint256 _amount);\\n\\n    event PositionStaked(address _address, uint256 _positionId);\\n\\n    event ArcClaimableStatusUpdated(bool _status);\\n\\n    event CollabClaimableStatusUpdated(bool _status);\\n\\n    event UserSlashed(address _user, address _slasher, uint256 _arcPenalty, uint256 _collabPenalty);\\n\\n    event CollabRewardsDistributorUpdated(address _rewardsDistributor);\\n\\n    event ArcRewardsDistributorUpdated(address _rewardsDistributor);\\n\\n    event CollabRecovered(uint256 _amount);\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier updateReward(address _account, address _rewardToken) {\\n        _updateReward(_account, _rewardToken);\\n        _;\\n    }\\n\\n    modifier onlyRewardDistributors() {\\n        require(\\n            msg.sender == arcRewardsDistributor || msg.sender == collabRewardsDistributor,\\n            \\\"Caller is not a reward distributor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCollabDistributor() {\\n        require(\\n            msg.sender == collabRewardsDistributor,\\n            \\\"Caller is not the collab rewards distributor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier verifyRewardToken(address _rewardTokenAddress) {\\n        bool isArcToken = _rewardTokenAddress == address(arcRewardToken);\\n        bool iscollabToken = _rewardTokenAddress == address(collabRewardToken);\\n\\n        require (\\n            isArcToken || iscollabToken,\\n            \\\"The reward token address does not correspond to one of the rewards tokens.\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== Admin Functions ========== */\\n\\n    function setcollabRewardsDistributor(\\n        address _rewardsDistributor\\n    )\\n        external\\n        onlyCollabDistributor\\n    {\\n        require(\\n            collabRewardsDistributor != _rewardsDistributor,\\n            \\\"Cannot set the same rewards distributor\\\"\\n        );\\n\\n        collabRewardsDistributor = _rewardsDistributor;\\n        emit CollabRewardsDistributorUpdated(_rewardsDistributor);\\n    }\\n\\n    function setArcRewardsDistributor(\\n        address _rewardsDistributor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            arcRewardsDistributor != _rewardsDistributor,\\n            \\\"Cannot set the same rewards distributor\\\"\\n        );\\n\\n        arcRewardsDistributor = _rewardsDistributor;\\n        emit ArcRewardsDistributorUpdated(_rewardsDistributor);\\n    }\\n\\n    function setRewardsDuration(\\n        uint256 _rewardsDuration\\n    )\\n        external\\n        onlyOwner\\n    {\\n        uint256 periodFinish = arcPeriodFinish > collabPeriodFinish\\n            ? arcPeriodFinish\\n            : collabPeriodFinish;\\n\\n        require(\\n            periodFinish == 0 || getCurrentTimestamp() > periodFinish,\\n            \\\"Prev period must be complete before changing duration for new period\\\"\\n        );\\n\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    /**\\n     * @notice Sets the reward amount for the given reward token. There contract must\\n     *          already have at least as much amount as the given `_reward`\\n     *\\n     * @param _reward The amount of the reward\\n     * @param _rewardToken The address of the reward token\\n     */\\n    function notifyRewardAmount(\\n        uint256 _reward,\\n        address _rewardToken\\n    )\\n        external\\n        onlyRewardDistributors\\n        verifyRewardToken(_rewardToken)\\n        updateReward(address(0), _rewardToken)\\n    {\\n        require(\\n            rewardsDuration > 0,\\n            \\\"Rewards duration is not set\\\"\\n        );\\n\\n        uint256 remaining;\\n        uint256 leftover;\\n\\n        if (_rewardToken == address(arcRewardToken)) {\\n            require(\\n                msg.sender == arcRewardsDistributor,\\n                \\\"Only the ARCx rewards distributor can notify the amount of ARCx rewards\\\"\\n            );\\n\\n            if (getCurrentTimestamp() >= arcPeriodFinish) {\\n                arcRewardRate = _reward.div(rewardsDuration);\\n            } else {\\n                remaining = arcPeriodFinish.sub(getCurrentTimestamp());\\n                leftover = remaining.mul(arcRewardRate);\\n                arcRewardRate = _reward.add(leftover).div(rewardsDuration);\\n\\n            }\\n\\n            require(\\n                arcRewardRate <= arcRewardToken.balanceOf(address(this)).div(rewardsDuration),\\n                \\\"Provided reward too high for the balance of ARCx token\\\"\\n            );\\n\\n            arcPeriodFinish = getCurrentTimestamp().add(rewardsDuration);\\n            arcLastUpdateTime = getCurrentTimestamp();\\n        } else {\\n            require(\\n                msg.sender == collabRewardsDistributor,\\n                \\\"Only the collab rewards distributor can notify the amount of collab rewards\\\"\\n            );\\n\\n            // collab token\\n            if (getCurrentTimestamp() >= collabPeriodFinish) {\\n                collabRewardRate = _reward.div(rewardsDuration);\\n            } else {\\n                remaining = collabPeriodFinish.sub(getCurrentTimestamp());\\n                leftover = remaining.mul(collabRewardRate);\\n                collabRewardRate = _reward.add(leftover).div(rewardsDuration);\\n\\n            }\\n\\n            require(\\n                collabRewardRate <= collabRewardToken.balanceOf(address(this)).div(rewardsDuration),\\n                \\\"Provided reward too high for the balance of collab token\\\"\\n            );\\n\\n            collabPeriodFinish = getCurrentTimestamp().add(rewardsDuration);\\n            collabLastUpdateTime = getCurrentTimestamp();\\n        }\\n\\n        emit RewardAdded(_reward, _rewardToken);\\n    }\\n\\n    /**\\n     * @notice Allows owner to recover any ERC20 token sent to this contract, except the staking\\n     *          okens and the reward tokens - with the exception of ARCx surplus that was transfered.\\n     *\\n     * @param _tokenAddress the address of the token\\n     * @param _tokenAmount to amount to recover\\n     */\\n    function recoverERC20(\\n        address _tokenAddress,\\n        uint256 _tokenAmount\\n    )\\n        external\\n        onlyOwner\\n    {\\n        // If _tokenAddress is ARCx, only allow its recovery if the amount is not greater than\\n        // the current reward\\n        if (_tokenAddress == address(arcRewardToken) && rewardsDuration > 0) {\\n            uint256 arcBalance = arcRewardToken.balanceOf(address(this));\\n\\n            require(\\n                arcRewardRate <= arcBalance.sub(_tokenAmount).div(rewardsDuration),\\n                \\\"Only the surplus of the reward can be recovered, not more\\\"\\n            );\\n        }\\n\\n        // Cannot recover the staking token or the collab rewards token\\n        require(\\n            _tokenAddress != address(stakingToken) && _tokenAddress != address(collabRewardToken),\\n            \\\"Cannot withdraw the staking or collab reward tokens\\\"\\n        );\\n\\n        IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n        emit ERC20Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Lets the collab reward distributor recover a desired amount of collab as long as that\\n     *          amount is not greater than the reward to recover\\n     *\\n     * @param _amount The amount of collab to recover\\n     */\\n    function recovercollab(\\n        uint256 _amount\\n    )\\n        external\\n        onlyCollabDistributor\\n    {\\n        if (rewardsDuration > 0) {\\n            uint256 collabBalance = collabRewardToken.balanceOf(address(this));\\n\\n            require(\\n                collabRewardRate <= collabBalance.sub(_amount).div(rewardsDuration),\\n                \\\"Only the surplus of the reward can be recovered, not more\\\"\\n            );\\n        }\\n\\n        collabRewardToken.safeTransfer(msg.sender, _amount);\\n        emit CollabRecovered(_amount);\\n    }\\n\\n    function setArcTokensClaimable(\\n        bool _enabled\\n    )\\n        external\\n        onlyOwner\\n    {\\n        arcTokensClaimable = _enabled;\\n\\n        emit ArcClaimableStatusUpdated(_enabled);\\n    }\\n\\n    function setCollabTokensClaimable(\\n        bool _enabled\\n    )\\n        external\\n        onlyOwner\\n    {\\n        collabTokensClaimable = _enabled;\\n\\n        emit CollabClaimableStatusUpdated(_enabled);\\n    }\\n\\n    function init(\\n        address _arcDAO,\\n        address _arcRewardsDistributor,\\n        address _collabRewardsDistributor,\\n        address _arcRewardToken,\\n        address _collabRewardToken,\\n        address _stakingToken,\\n        Decimal.D256 memory _daoAllocation,\\n        Decimal.D256 memory _slasherCut,\\n        uint8 _stakeToDebtRatio,\\n        address _stateContract\\n    )\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            !isInitialized &&\\n            _arcDAO != address(0) &&\\n            _arcRewardsDistributor != address(0) &&\\n            _collabRewardsDistributor != address(0) &&\\n            _arcRewardToken != address(0) &&\\n            _collabRewardToken != address(0) &&\\n            _stakingToken != address(0) &&\\n            _daoAllocation.value > 0 &&\\n            _slasherCut.value > 0 &&\\n            _stakeToDebtRatio > 0 &&\\n            _stateContract != address(0),\\n            \\\"One or more values is empty\\\"\\n        );\\n\\n        isInitialized = true;\\n\\n        arcDAO = _arcDAO;\\n        arcRewardsDistributor = _arcRewardsDistributor;\\n        collabRewardsDistributor = _collabRewardsDistributor;\\n        arcRewardToken = IERC20(_arcRewardToken);\\n        collabRewardToken = IERC20(_collabRewardToken);\\n        stakingToken = IERC20(_stakingToken);\\n\\n        daoAllocation = _daoAllocation;\\n        slasherCut = _slasherCut;\\n        stakeToDebtRatio = _stakeToDebtRatio;\\n\\n        stateContract = IMozartCoreV2(_stateContract);\\n    }\\n\\n    /* ========== View Functions ========== */\\n\\n    function totalSupply()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return stakers[account].balance;\\n    }\\n\\n    function lastTimeRewardApplicable(\\n        address _rewardToken\\n    )\\n        public\\n        view\\n        verifyRewardToken(_rewardToken)\\n        returns (uint256)\\n    {\\n        uint256 relevantPeriod = _rewardToken == address(arcRewardToken) ? arcPeriodFinish : collabPeriodFinish;\\n\\n        return getCurrentTimestamp() < relevantPeriod ? getCurrentTimestamp() : relevantPeriod;\\n    }\\n\\n    function arcRewardPerTokenUser()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_totalSupply == 0) {\\n            return arcRewardPerTokenStored;\\n        }\\n\\n        return\\n            Decimal.mul(\\n                arcRewardPerTokenStored.add(\\n                    lastTimeRewardApplicable(address(arcRewardToken))\\n                        .sub(arcLastUpdateTime)\\n                        .mul(arcRewardRate)\\n                        .mul(1e18)\\n                        .div(_totalSupply)\\n                ),\\n                userAllocation()\\n            );\\n    }\\n\\n    function collabRewardPerToken()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_totalSupply == 0) {\\n            return collabPerTokenStored;\\n        }\\n\\n        return collabPerTokenStored.add(\\n            lastTimeRewardApplicable(address(collabRewardToken))\\n                .sub(collabLastUpdateTime)\\n                .mul(collabRewardRate)\\n                .mul(1e18)\\n                .div(_totalSupply)\\n        );\\n    }\\n\\n    function _actualEarned(\\n        address _account,\\n        address _rewardTokenAddress\\n    )\\n        internal\\n        view\\n        verifyRewardToken(_rewardTokenAddress)\\n        returns (uint256)\\n    {\\n        uint256 stakerBalance = stakers[_account].balance;\\n\\n        if (_rewardTokenAddress == address(arcRewardToken)) {\\n            return\\n                stakerBalance.mul(\\n                    _rewardPerToken(address(arcRewardToken))\\n                    .sub(stakers[_account].arcRewardPerTokenPaid)\\n                )\\n                .div(1e18)\\n                .add(stakers[_account].arcRewardsEarned);\\n        }\\n\\n        return\\n            stakerBalance.mul(\\n                _rewardPerToken(address(collabRewardToken))\\n                .sub(stakers[_account].collabRewardPerTokenPaid)\\n            )\\n            .div(1e18)\\n            .add(stakers[_account].collabRewardsEarned);\\n    }\\n\\n    function arcEarned(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return Decimal.mul(\\n            _actualEarned(_account, address(arcRewardToken)),\\n            userAllocation()\\n        );\\n    }\\n\\n    function collabEarned(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _actualEarned(_account, address(collabRewardToken));\\n    }\\n\\n    function getArcRewardForDuration()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return arcRewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getCollabRewardForDuration()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return collabRewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getCurrentTimestamp()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return block.timestamp;\\n    }\\n\\n    function isMinter(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _positionId\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        MozartTypes.Position memory position = stateContract.getPosition(_positionId);\\n\\n        if (position.owner != _user) {\\n            return false;\\n        }\\n\\n        return uint256(position.borrowedAmount.value) >= _amount;\\n    }\\n\\n    function  userAllocation()\\n        public\\n        view\\n        returns (Decimal.D256 memory)\\n    {\\n        return Decimal.sub(\\n            Decimal.one(),\\n            daoAllocation.value\\n        );\\n    }\\n\\n    /* ========== Mutative Functions ========== */\\n\\n    function stake(\\n        uint256 _amount,\\n        uint256 _positionId\\n    )\\n        external\\n        updateReward(msg.sender, address(0))\\n    {\\n        uint256 totalBalance = balanceOf(msg.sender).add(_amount);\\n\\n        // Setting each variable invididually means we don't overwrite\\n        Staker storage staker = stakers[msg.sender];\\n\\n        if (staker.positionId != 0) {\\n            require (\\n                staker.positionId == _positionId,\\n                \\\"You cannot stake based on a different debt position\\\"\\n            );\\n        }\\n\\n        require(\\n            stakeToDebtRatio != 0,\\n            \\\"The stake to debt ratio cannot be 0\\\"\\n        );\\n\\n        uint256 debtRequirement = totalBalance.div(uint256(stakeToDebtRatio));\\n\\n        require(\\n            isMinter(\\n                msg.sender,\\n                debtRequirement,\\n                _positionId\\n            ),\\n            \\\"Must be a valid minter\\\"\\n        );\\n\\n        // This stops an attack vector where a user stakes a lot of money\\n        // then drops the debt requirement by staking less before the deadline\\n        // to reduce the amount of debt they need to lock in\\n\\n        require(\\n            debtRequirement >= staker.debtSnapshot,\\n            \\\"Your new debt requirement cannot be lower than last time\\\"\\n        );\\n\\n        if (staker.positionId == 0) {\\n            staker.positionId = _positionId;\\n        }\\n        staker.debtSnapshot = debtRequirement;\\n        staker.balance = staker.balance.add(_amount);\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function slash(\\n        address _user\\n    )\\n        external\\n        updateReward(_user, address(0))\\n    {\\n        require(\\n            _user != msg.sender,\\n            \\\"You cannot slash yourself\\\"\\n        );\\n\\n        uint256 currentTime = getCurrentTimestamp();\\n        require(\\n            currentTime < arcPeriodFinish ||\\n            currentTime < collabPeriodFinish,\\n            \\\"You cannot slash after the reward period\\\"\\n        );\\n\\n        Staker storage userStaker = stakers[_user];\\n\\n        require(\\n            isMinter(\\n                _user,\\n                userStaker.debtSnapshot,\\n                userStaker.positionId\\n            ) == false,\\n            \\\"You can't slash a user who is a valid minter\\\"\\n        );\\n\\n        uint256 arcPenalty = userStaker.arcRewardsEarned.sub(userStaker.arcRewardsReleased);\\n        uint256 arcBounty = Decimal.mul(arcPenalty, slasherCut);\\n\\n        uint256 collabPenalty = userStaker.collabRewardsEarned.sub(userStaker.collabRewardsReleased);\\n\\n        stakers[msg.sender].arcRewardsEarned = stakers[msg.sender].arcRewardsEarned.add(arcBounty);\\n        stakers[msg.sender].collabRewardsEarned = stakers[msg.sender].collabRewardsEarned.add(collabPenalty);\\n\\n        stakers[arcRewardsDistributor].arcRewardsEarned = stakers[arcRewardsDistributor].arcRewardsEarned.add(\\n            arcPenalty.sub(arcBounty)\\n        );\\n\\n        userStaker.arcRewardsEarned = userStaker.arcRewardsEarned.sub(arcPenalty);\\n        userStaker.collabRewardsEarned = userStaker.collabRewardsEarned.sub(collabPenalty);\\n\\n        emit UserSlashed(\\n            _user,\\n            msg.sender,\\n            arcPenalty,\\n            collabPenalty\\n        );\\n    }\\n\\n    function getReward(address _user)\\n        public\\n        updateReward(_user, address(0))\\n    {\\n        Staker storage staker = stakers[_user];\\n        uint256 arcPayableAmount;\\n        uint256 collabPayableAmount;\\n\\n        require(\\n            collabTokensClaimable || arcTokensClaimable,\\n            \\\"At least one reward token must be claimable\\\"\\n        );\\n\\n        if (collabTokensClaimable) {\\n            collabPayableAmount = staker.collabRewardsEarned.sub(staker.collabRewardsReleased);\\n            staker.collabRewardsReleased = staker.collabRewardsReleased.add(collabPayableAmount);\\n\\n            collabRewardToken.safeTransfer(_user, collabPayableAmount);\\n        }\\n\\n        if (arcTokensClaimable) {\\n            arcPayableAmount = staker.arcRewardsEarned.sub(staker.arcRewardsReleased);\\n            staker.arcRewardsReleased = staker.arcRewardsReleased.add(arcPayableAmount);\\n\\n            uint256 daoPayable = Decimal.mul(arcPayableAmount, daoAllocation);\\n            arcRewardToken.safeTransfer(arcDAO, daoPayable);\\n            arcRewardToken.safeTransfer(_user, arcPayableAmount.sub(daoPayable));\\n        }\\n\\n        emit RewardPaid(_user, arcPayableAmount, collabPayableAmount);\\n    }\\n\\n    function withdraw(\\n        uint256 amount\\n    )\\n        public\\n        updateReward(msg.sender, address(0))\\n    {\\n        require(\\n            amount >= 0,\\n            \\\"Cannot withdraw less than 0\\\"\\n        );\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        stakers[msg.sender].balance = stakers[msg.sender].balance.sub(amount);\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit()\\n        external\\n    {\\n        getReward(msg.sender);\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    /* ========== Private Functions ========== */\\n\\n    function _updateReward(\\n        address _account,\\n        address _rewardToken\\n    )\\n        private\\n    {\\n        require(\\n            _rewardToken == address(0) ||\\n            _rewardToken == address(arcRewardToken) ||\\n            _rewardToken == address(collabRewardToken),\\n            \\\"The reward token can either be 0 or a valid reward token\\\"\\n        );\\n\\n        // If an individual reward token is updated, only update the relevant variables\\n        if (_rewardToken == address(0)) {\\n            arcRewardPerTokenStored = _rewardPerToken(address(arcRewardToken));\\n            collabPerTokenStored = _rewardPerToken(address(collabRewardToken));\\n\\n            arcLastUpdateTime = lastTimeRewardApplicable(address(arcRewardToken));\\n            collabLastUpdateTime = lastTimeRewardApplicable(address(collabRewardToken));\\n\\n        } else if (_rewardToken == address(arcRewardToken)) {\\n            arcRewardPerTokenStored = _rewardPerToken(address(arcRewardToken));\\n            arcLastUpdateTime = lastTimeRewardApplicable(address(arcRewardToken));\\n\\n        } else {\\n            collabPerTokenStored = _rewardPerToken(address(collabRewardToken));\\n            collabLastUpdateTime = lastTimeRewardApplicable(address(collabRewardToken));\\n        }\\n\\n        if (_account != address(0)) {\\n            stakers[_account].arcRewardsEarned = _actualEarned(_account, address(arcRewardToken));\\n            stakers[_account].arcRewardPerTokenPaid = arcRewardPerTokenStored;\\n\\n            stakers[_account].collabRewardsEarned = _actualEarned(_account, address(collabRewardToken));\\n            stakers[_account].collabRewardPerTokenPaid = collabPerTokenStored;\\n        }\\n    }\\n\\n    function _rewardPerToken(\\n        address _rewardTokenAddress\\n    )\\n        private\\n        view\\n        verifyRewardToken(_rewardTokenAddress)\\n        returns (uint256)\\n    {\\n        if (_rewardTokenAddress == address(arcRewardToken)) {\\n            if (_totalSupply == 0) {\\n                return arcRewardPerTokenStored;\\n            }\\n\\n            return arcRewardPerTokenStored.add(\\n                lastTimeRewardApplicable(address(arcRewardToken))\\n                    .sub(arcLastUpdateTime)\\n                    .mul(arcRewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n        } else {\\n            if (_totalSupply == 0) {\\n                return collabPerTokenStored;\\n            }\\n\\n            return collabPerTokenStored.add(\\n                lastTimeRewardApplicable(address(collabRewardToken))\\n                    .sub(collabLastUpdateTime)\\n                    .mul(collabRewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n        }\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.16;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.5.16;\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary SafeERC20 {\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(\\n                0x23b872dd,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one()\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function onePlus(\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(BASE) });\\n    }\\n\\n    function mul(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function mul(\\n        D256 memory d1,\\n        D256 memory d2\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\\n    }\\n\\n    function div(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n\\n    function add(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(amount) });\\n    }\\n\\n    function sub(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.sub(amount) });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Math\\n *\\n * Library for non-standard Math functions\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function to128(\\n        uint256 number\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 result = uint128(number);\\n        require(\\n            result == number,\\n            \\\"Math: Unsafe cast to uint128\\\"\\n        );\\n        return result;\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/debt/mozart/IMozartCoreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {MozartTypes} from \\\"./MozartTypes.sol\\\";\\n\\ninterface IMozartCoreV2 {\\n    function getPosition(\\n        uint256 id\\n    )\\n        external\\n        view\\n        returns (MozartTypes.Position memory);\\n}\\n\"\r\n    },\r\n    \"./contracts/debt/mozart/MozartTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Amount} from \\\"../../lib/Amount.sol\\\";\\n\\nlibrary MozartTypes {\\n\\n    /* ========== Structs ========== */\\n\\n    struct Position {\\n        address owner;\\n        Amount.Principal collateralAmount;\\n        Amount.Principal borrowedAmount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Amount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"../lib/Math.sol\\\";\\n\\nlibrary Amount {\\n\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // A Principal Amount is an amount that's been adjusted by an index\\n\\n    struct Principal {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n\\n    function zero()\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: false,\\n            value: 0\\n        });\\n    }\\n\\n    function sub(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return add(a, negative(b));\\n    }\\n\\n    function add(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        Principal memory result;\\n\\n        if (a.sign == b.sign) {\\n            result.sign = a.sign;\\n            result.value = SafeMath.add(a.value, b.value);\\n        } else {\\n            if (a.value >= b.value) {\\n                result.sign = a.sign;\\n                result.value = SafeMath.sub(a.value, b.value);\\n            } else {\\n                result.sign = b.sign;\\n                result.value = SafeMath.sub(b.value, a.value);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function equals(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (a.value == b.value) {\\n            if (a.value == 0) {\\n                return true;\\n            }\\n            return a.sign == b.sign;\\n        }\\n        return false;\\n    }\\n\\n    function negative(\\n        Principal memory a\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: !a.sign,\\n            value: a.value\\n        });\\n    }\\n\\n    function calculateAdjusted(\\n        Principal memory a,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(a.value, index, BASE);\\n    }\\n\\n    function calculatePrincipal(\\n        uint256 value,\\n        uint256 index,\\n        bool sign\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: sign,\\n            value: Math.getPartial(value, BASE, index)\\n        });\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ArcClaimableStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"ArcRewardsDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"CollabClaimableStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollabRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"CollabRewardsDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"PositionStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_arcReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collabReward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_arcPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collabPenalty\",\"type\":\"uint256\"}],\"name\":\"UserSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"arcEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcRewardPerTokenUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcRewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcTokensClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collabEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabRewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collabTokensClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArcRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollabRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arcDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arcRewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collabRewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arcRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collabRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"_daoAllocation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"_slasherCut\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_stakeToDebtRatio\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_stateContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recovercollab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setArcRewardsDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setArcTokensClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCollabTokensClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setcollabRewardsDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slasherCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeToDebtRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arcRewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collabRewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arcRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collabRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arcRewardsReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collabRewardsReleased\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stateContract\",\"outputs\":[{\"internalType\":\"contract IMozartCoreV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"JointCampaign","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}