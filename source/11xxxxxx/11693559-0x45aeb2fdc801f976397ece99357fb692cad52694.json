{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/ControllableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./GovernableInit.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract ControllableInit is GovernableInit {\\n\\n    constructor() public {\\n    }\\n\\n    function initialize(address _storage) public initializer {\\n        GovernableInit.initialize(_storage);\\n    }\\n\\n    modifier onlyController() {\\n        require(Storage(_storage()).isController(msg.sender), \\\"Not a controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyControllerOrGovernance(){\\n        require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\\n        \\\"The caller must be controller or governance\\\");\\n        _;\\n    }\\n\\n    function controller() public view returns (address) {\\n        return Storage(_storage()).controller();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/GovernableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract GovernableInit is Initializable {\\n\\n    bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\\n\\n    modifier onlyGovernance() {\\n        require(Storage(_storage()).isGovernance(msg.sender), \\\"Not governance\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.governableInit.storage\\\")) - 1));\\n    }\\n\\n    function initialize(address _store) public initializer {\\n        _setStorage(_store);\\n    }\\n\\n    function _setStorage(address newStorage) private {\\n        bytes32 slot = _STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        sstore(slot, newStorage)\\n        }\\n    }\\n\\n    function setStorage(address _store) public onlyGovernance {\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n        _setStorage(_store);\\n    }\\n\\n    function _storage() internal view returns (address str) {\\n        bytes32 slot = _STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        str := sload(slot)\\n        }\\n    }\\n\\n    function governance() public view returns (address) {\\n        return Storage(_storage()).governance();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n    address public governance;\\n    address public controller;\\n\\n    constructor() public {\\n        governance = msg.sender;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(isGovernance(msg.sender), \\\"Not governance\\\");\\n        _;\\n    }\\n\\n    function setGovernance(address _governance) public onlyGovernance {\\n        require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n        governance = _governance;\\n    }\\n\\n    function setController(address _controller) public onlyGovernance {\\n        require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n        controller = _controller;\\n    }\\n\\n    function isGovernance(address account) public view returns (bool) {\\n        return account == governance;\\n    }\\n\\n    function isController(address account) public view returns (bool) {\\n        return account == controller;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/Vault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"./hardworkInterface/IStrategy.sol\\\";\\nimport \\\"./hardworkInterface/IVault.sol\\\";\\nimport \\\"./hardworkInterface/IController.sol\\\";\\nimport \\\"./hardworkInterface/IUpgradeSource.sol\\\";\\nimport \\\"./ControllableInit.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract Vault is ERC20, ERC20Detailed, IVault, IUpgradeSource, ControllableInit, VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    event Withdraw(address indexed beneficiary, uint256 amount);\\n    event Deposit(address indexed beneficiary, uint256 amount);\\n    event Invest(uint256 amount);\\n    event StrategyAnnounced(address newStrategy, uint256 time);\\n    event StrategyChanged(address newStrategy, address oldStrategy);\\n\\n    constructor() public {\\n    }\\n\\n    // the function is name differently to not cause inheritance clash in truffle and allows tests\\n    function initializeVault(address _storage,\\n        address _underlying,\\n        uint256 _toInvestNumerator,\\n        uint256 _toInvestDenominator\\n    ) public initializer {\\n        require(_toInvestNumerator <= _toInvestDenominator, \\\"cannot invest more than 100%\\\");\\n        require(_toInvestDenominator != 0, \\\"cannot divide by 0\\\");\\n\\n        ERC20Detailed.initialize(\\n        string(abi.encodePacked(\\\"DELTA_\\\", ERC20Detailed(_underlying).symbol())),\\n        string(abi.encodePacked(\\\"d\\\", ERC20Detailed(_underlying).symbol())),\\n        ERC20Detailed(_underlying).decimals()\\n        );\\n        ControllableInit.initialize(\\n        _storage\\n        );\\n\\n        uint256 underlyingUnit = 10 ** uint256(ERC20Detailed(address(_underlying)).decimals());\\n        uint256 implementationDelay = 12 hours;\\n        uint256 strategyChangeDelay = 12 hours;\\n        VaultStorage.initialize(\\n        _underlying,\\n        _toInvestNumerator,\\n        _toInvestDenominator,\\n        underlyingUnit,\\n        implementationDelay,\\n        strategyChangeDelay\\n        );\\n    }\\n\\n    function strategy() public view returns(address) {\\n        return _strategy();\\n    }\\n\\n    function underlying() public view returns(address) {\\n        return _underlying();\\n    }\\n\\n    function underlyingUnit() public view returns(uint256) {\\n        return _underlyingUnit();\\n    }\\n\\n    function vaultFractionToInvestNumerator() public view returns(uint256) {\\n        return _vaultFractionToInvestNumerator();\\n    }\\n\\n    function vaultFractionToInvestDenominator() public view returns(uint256) {\\n        return _vaultFractionToInvestDenominator();\\n    }\\n\\n    function nextImplementation() public view returns(address) {\\n        return _nextImplementation();\\n    }\\n\\n    function nextImplementationTimestamp() public view returns(uint256) {\\n        return _nextImplementationTimestamp();\\n    }\\n\\n    function nextImplementationDelay() public view returns(uint256) {\\n        return _nextImplementationDelay();\\n    }\\n\\n    modifier whenStrategyDefined() {\\n        require(address(strategy()) != address(0), \\\"Strategy must be defined\\\");\\n        _;\\n    }\\n\\n    // Only smart contracts will be affected by this modifier\\n    modifier defense() {\\n        require(\\n        (msg.sender == tx.origin) ||                // If it is a normal user and not smart contract,\\n                                                    // then the requirement will pass\\n        !IController(controller()).greyList(msg.sender), // If it is a smart contract, then\\n        \\\"This smart contract has been grey listed\\\"  // make sure that it is not on our greyList.\\n        );\\n        _;\\n    }\\n\\n    /**\\n    * Chooses the best strategy and re-invests. If the strategy did not change, it just calls\\n    * doHardWork on the current strategy. Call this through controller to claim hard rewards.\\n    */\\n    function doHardWork() whenStrategyDefined onlyControllerOrGovernance external {\\n        // ensure that new funds are invested too\\n        invest();\\n        IStrategy(strategy()).doHardWork();\\n    }\\n\\n    /*\\n    * Returns the cash balance across all users in this contract.\\n    */\\n    function underlyingBalanceInVault() view public returns (uint256) {\\n        return IERC20(underlying()).balanceOf(address(this));\\n    }\\n\\n    /* Returns the current underlying (e.g., DAI's) balance together with\\n    * the invested amount (if DAI is invested elsewhere by the strategy).\\n    */\\n    function underlyingBalanceWithInvestment() view public returns (uint256) {\\n        if (address(strategy()) == address(0)) {\\n        // initial state, when not set\\n        return underlyingBalanceInVault();\\n        }\\n        return underlyingBalanceInVault().add(IStrategy(strategy()).investedUnderlyingBalance());\\n    }\\n\\n    function getPricePerFullShare() public view returns (uint256) {\\n        return totalSupply() == 0\\n            ? underlyingUnit()\\n            : underlyingUnit().mul(underlyingBalanceWithInvestment()).div(totalSupply());\\n    }\\n\\n    /* get the user's share (in underlying)\\n    */\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256) {\\n        if (totalSupply() == 0) {\\n        return 0;\\n        }\\n        return underlyingBalanceWithInvestment()\\n            .mul(balanceOf(holder))\\n            .div(totalSupply());\\n    }\\n\\n    function futureStrategy() public view returns (address) {\\n        return _futureStrategy();\\n    }\\n\\n    function strategyUpdateTime() public view returns (uint256) {\\n        return _strategyUpdateTime();\\n    }\\n\\n    function strategyTimeLock() public view returns (uint256) {\\n        return _strategyTimeLock();\\n    }\\n\\n    function canUpdateStrategy(address _strategy) public view returns(bool) {\\n        return strategy() == address(0) // no strategy was set yet\\n        || (_strategy == futureStrategy()\\n            && block.timestamp > strategyUpdateTime()\\n            && strategyUpdateTime() > 0); // or the timelock has passed\\n    }\\n\\n    /**\\n    * Indicates that the strategy update will happen in the future\\n    */\\n    function announceStrategyUpdate(address _strategy) public onlyControllerOrGovernance {\\n        // records a new timestamp\\n        uint256 when = block.timestamp.add(strategyTimeLock());\\n        _setStrategyUpdateTime(when);\\n        _setFutureStrategy(_strategy);\\n        emit StrategyAnnounced(_strategy, when);\\n    }\\n\\n    /**\\n    * Finalizes (or cancels) the strategy update by resetting the data\\n    */\\n    function finalizeStrategyUpdate() public onlyControllerOrGovernance {\\n        _setStrategyUpdateTime(0);\\n        _setFutureStrategy(address(0));\\n    }\\n\\n    function setStrategy(address _strategy) public onlyControllerOrGovernance {\\n        require(canUpdateStrategy(_strategy),\\n        \\\"The strategy exists and switch timelock did not elapse yet\\\");\\n        require(_strategy != address(0), \\\"new _strategy cannot be empty\\\");\\n        require(IStrategy(_strategy).underlying() == address(underlying()), \\\"Vault underlying must match Strategy underlying\\\");\\n        require(IStrategy(_strategy).vault() == address(this), \\\"the strategy does not belong to this vault\\\");\\n\\n        emit StrategyChanged(_strategy, strategy());\\n        if (address(_strategy) != address(strategy())) {\\n        if (address(strategy()) != address(0)) { // if the original strategy (no underscore) is defined\\n            IERC20(underlying()).safeApprove(address(strategy()), 0);\\n            IStrategy(strategy()).withdrawAllToVault();\\n        }\\n        _setStrategy(_strategy);\\n        IERC20(underlying()).safeApprove(address(strategy()), 0);\\n        IERC20(underlying()).safeApprove(address(strategy()), uint256(~0));\\n        }\\n        finalizeStrategyUpdate();\\n    }\\n\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external onlyGovernance {\\n        require(denominator > 0, \\\"denominator must be greater than 0\\\");\\n        require(numerator <= denominator, \\\"denominator must be greater than or equal to the numerator\\\");\\n        _setVaultFractionToInvestNumerator(numerator);\\n        _setVaultFractionToInvestDenominator(denominator);\\n    }\\n\\n    function rebalance() external onlyControllerOrGovernance {\\n        withdrawAll();\\n        invest();\\n    }\\n\\n    function availableToInvestOut() public view returns (uint256) {\\n        uint256 wantInvestInTotal = underlyingBalanceWithInvestment()\\n            .mul(vaultFractionToInvestNumerator())\\n            .div(vaultFractionToInvestDenominator());\\n        uint256 alreadyInvested = IStrategy(strategy()).investedUnderlyingBalance();\\n        if (alreadyInvested >= wantInvestInTotal) {\\n        return 0;\\n        } else {\\n        uint256 remainingToInvest = wantInvestInTotal.sub(alreadyInvested);\\n        return remainingToInvest <= underlyingBalanceInVault()\\n            // TODO: we think that the \\\"else\\\" branch of the ternary operation is not\\n            // going to get hit\\n            ? remainingToInvest : underlyingBalanceInVault();\\n        }\\n    }\\n\\n    function invest() internal whenStrategyDefined {\\n        uint256 availableAmount = availableToInvestOut();\\n        if (availableAmount > 0) {\\n        IERC20(underlying()).safeTransfer(address(strategy()), availableAmount);\\n        emit Invest(availableAmount);\\n        }\\n    }\\n\\n    /*\\n    * Allows for depositing the underlying asset in exchange for shares.\\n    * Approval is assumed.\\n    */\\n    function deposit(uint256 amount) external defense {\\n        _deposit(amount, msg.sender, msg.sender);\\n    }\\n\\n    /*\\n    * Allows for depositing the underlying asset in exchange for shares\\n    * assigned to the holder.\\n    * This facilitates depositing for someone else (using DepositHelper)\\n    */\\n    function depositFor(uint256 amount, address holder) public defense {\\n        _deposit(amount, msg.sender, holder);\\n    }\\n\\n    function withdrawAll() public onlyControllerOrGovernance whenStrategyDefined {\\n        IStrategy(strategy()).withdrawAllToVault();\\n    }\\n\\n    function withdraw(uint256 numberOfShares) external {\\n        require(totalSupply() > 0, \\\"Vault has no shares\\\");\\n        require(numberOfShares > 0, \\\"numberOfShares must be greater than 0\\\");\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, numberOfShares);\\n\\n        uint256 underlyingAmountToWithdraw = underlyingBalanceWithInvestment()\\n            .mul(numberOfShares)\\n            .div(totalSupply);\\n        if (underlyingAmountToWithdraw > underlyingBalanceInVault()) {\\n        // withdraw everything from the strategy to accurately check the share value\\n        if (numberOfShares == totalSupply) {\\n            IStrategy(strategy()).withdrawAllToVault();\\n        } else {\\n            uint256 missing = underlyingAmountToWithdraw.sub(underlyingBalanceInVault());\\n            IStrategy(strategy()).withdrawToVault(missing);\\n        }\\n        // recalculate to improve accuracy\\n        underlyingAmountToWithdraw = Math.min(underlyingBalanceWithInvestment()\\n            .mul(numberOfShares)\\n            .div(totalSupply), underlyingBalanceInVault());\\n        }\\n\\n        IERC20(underlying()).safeTransfer(msg.sender, underlyingAmountToWithdraw);\\n\\n        // update the withdrawal amount for the holder\\n        emit Withdraw(msg.sender, underlyingAmountToWithdraw);\\n    }\\n\\n    function _deposit(uint256 amount, address sender, address beneficiary) internal {\\n        require(amount > 0, \\\"Cannot deposit 0\\\");\\n        require(beneficiary != address(0), \\\"holder must be defined\\\");\\n\\n        if (address(strategy()) != address(0)) {\\n        require(IStrategy(strategy()).depositArbCheck(), \\\"Too much arb\\\");\\n        }\\n\\n        uint256 toMint = totalSupply() == 0\\n            ? amount\\n            : amount.mul(totalSupply()).div(underlyingBalanceWithInvestment());\\n        _mint(beneficiary, toMint);\\n\\n        IERC20(underlying()).safeTransferFrom(sender, address(this), amount);\\n\\n        // update the contribution amount for the beneficiary\\n        emit Deposit(beneficiary, amount);\\n    }\\n\\n    /**\\n    * Schedules an upgrade for this vault's proxy.\\n    */\\n    function scheduleUpgrade(address impl) public onlyGovernance {\\n        _setNextImplementation(impl);\\n        _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\\n    }\\n\\n    function shouldUpgrade() external view returns (bool, address) {\\n        return (\\n        nextImplementationTimestamp() != 0\\n            && block.timestamp > nextImplementationTimestamp()\\n            && nextImplementation() != address(0),\\n        nextImplementation()\\n        );\\n    }\\n\\n    function finalizeUpgrade() external onlyGovernance {\\n        _setNextImplementation(address(0));\\n        _setNextImplementationTimestamp(0);\\n    }\\n}\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/VaultStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\ncontract VaultStorage is Initializable {\\n\\n    bytes32 internal constant _STRATEGY_SLOT = 0xf1a169aa0f736c2813818fdfbdc5755c31e0839c8f49831a16543496b28574ea;\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x1994607607e11d53306ef62e45e3bd85762c58d9bf38b5578bc4a258a26a7371;\\n    bytes32 internal constant _UNDERLYING_UNIT_SLOT = 0xa66bc57d4b4eed7c7687876ca77997588987307cb13ecc23f5e52725192e5fff;\\n    bytes32 internal constant _VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT = 0x39122c9adfb653455d0c05043bd52fcfbc2be864e832efd3abc72ce5a3d7ed5a;\\n    bytes32 internal constant _VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT = 0x469a3bad2fab7b936c45eecd1f5da52af89cead3e2ed7f732b6f3fc92ed32308;\\n    bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0xb1acf527cd7cd1668b30e5a9a1c0d845714604de29ce560150922c9d8c0937df;\\n    bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x3bc747f4b148b37be485de3223c90b4468252967d2ea7f9fcbd8b6e653f434c9;\\n    bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82ddc3be3f0c1a6870327f78f4979a0b37b21b16736ef5be6a7a7a35e530bcf0;\\n    bytes32 internal constant _STRATEGY_TIME_LOCK_SLOT = 0x6d02338b2e4c913c0f7d380e2798409838a48a2c4d57d52742a808c82d713d8b;\\n    bytes32 internal constant _FUTURE_STRATEGY_SLOT = 0xb441b53a4e42c2ca9182bc7ede99bedba7a5d9360d9dfbd31fa8ee2dc8590610;\\n    bytes32 internal constant _STRATEGY_UPDATE_TIME_SLOT = 0x56e7c0e75875c6497f0de657009613a32558904b5c10771a825cc330feff7e72;\\n\\n    constructor() public {\\n        assert(_STRATEGY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.strategy\\\")) - 1));\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.underlying\\\")) - 1));\\n        assert(_UNDERLYING_UNIT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.underlyingUnit\\\")) - 1));\\n        assert(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.vaultFractionToInvestNumerator\\\")) - 1));\\n        assert(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.vaultFractionToInvestDenominator\\\")) - 1));\\n        assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.nextImplementation\\\")) - 1));\\n        assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.nextImplementationTimestamp\\\")) - 1));\\n        assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.nextImplementationDelay\\\")) - 1));\\n        assert(_STRATEGY_TIME_LOCK_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.strategyTimeLock\\\")) - 1));\\n        assert(_FUTURE_STRATEGY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.futureStrategy\\\")) - 1));\\n        assert(_STRATEGY_UPDATE_TIME_SLOT == bytes32(uint256(keccak256(\\\"eip1967.vaultStorage.strategyUpdateTime\\\")) - 1));\\n    }\\n\\n    function initialize(\\n        address _underlying,\\n        uint256 _toInvestNumerator,\\n        uint256 _toInvestDenominator,\\n        uint256 _underlyingUnit,\\n        uint256 _implementationChangeDelay,\\n        uint256 _strategyChangeDelay\\n    ) public initializer {\\n        _setUnderlying(_underlying);\\n        _setVaultFractionToInvestNumerator(_toInvestNumerator);\\n        _setVaultFractionToInvestDenominator(_toInvestDenominator);\\n        _setUnderlyingUnit(_underlyingUnit);\\n        _setNextImplementationDelay(_implementationChangeDelay);\\n        _setStrategyTimeLock(_strategyChangeDelay);\\n        _setStrategyUpdateTime(0);\\n        _setFutureStrategy(address(0));\\n    }\\n\\n    function _setStrategy(address _address) internal {\\n        setAddress(_STRATEGY_SLOT, _address);\\n    }\\n\\n    function _strategy() internal view returns (address) {\\n        return getAddress(_STRATEGY_SLOT);\\n    }\\n\\n    function _setUnderlying(address _address) internal {\\n        setAddress(_UNDERLYING_SLOT, _address);\\n    }\\n\\n    function _underlying() internal view returns (address) {\\n        return getAddress(_UNDERLYING_SLOT);\\n    }\\n\\n    function _setUnderlyingUnit(uint256 _value) internal {\\n        setUint256(_UNDERLYING_UNIT_SLOT, _value);\\n    }\\n\\n    function _underlyingUnit() internal view returns (uint256) {\\n        return getUint256(_UNDERLYING_UNIT_SLOT);\\n    }\\n\\n    function _setVaultFractionToInvestNumerator(uint256 _value) internal {\\n        setUint256(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT, _value);\\n    }\\n\\n    function _vaultFractionToInvestNumerator() internal view returns (uint256) {\\n        return getUint256(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT);\\n    }\\n\\n    function _setVaultFractionToInvestDenominator(uint256 _value) internal {\\n        setUint256(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT, _value);\\n    }\\n\\n    function _vaultFractionToInvestDenominator() internal view returns (uint256) {\\n        return getUint256(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT);\\n    }\\n\\n    function _setNextImplementation(address _address) internal {\\n        setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\\n    }\\n\\n    function _nextImplementation() internal view returns (address) {\\n        return getAddress(_NEXT_IMPLEMENTATION_SLOT);\\n    }\\n\\n    function _setNextImplementationTimestamp(uint256 _value) internal {\\n        setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\\n    }\\n\\n    function _nextImplementationTimestamp() internal view returns (uint256) {\\n        return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\\n    }\\n\\n    function _setNextImplementationDelay(uint256 _value) internal {\\n        setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\\n    }\\n\\n    function _nextImplementationDelay() internal view returns (uint256) {\\n        return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\\n    }\\n\\n    function _setStrategyTimeLock(uint256 _value) internal {\\n        setUint256(_STRATEGY_TIME_LOCK_SLOT, _value);\\n    }\\n\\n    function _strategyTimeLock() internal view returns (uint256) {\\n        return getUint256(_STRATEGY_TIME_LOCK_SLOT);\\n    }\\n\\n    function _setFutureStrategy(address _value) internal {\\n        setAddress(_FUTURE_STRATEGY_SLOT, _value);\\n    }\\n\\n    function _futureStrategy() internal view returns (address) {\\n        return getAddress(_FUTURE_STRATEGY_SLOT);\\n    }\\n\\n    function _setStrategyUpdateTime(uint256 _value) internal {\\n        setUint256(_STRATEGY_UPDATE_TIME_SLOT, _value);\\n    }\\n\\n    function _strategyUpdateTime() internal view returns (uint256) {\\n        return getUint256(_STRATEGY_UPDATE_TIME_SLOT);\\n    }\\n\\n    function setAddress(bytes32 slot, address _address) private {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        sstore(slot, _address)\\n        }\\n    }\\n\\n    function setUint256(bytes32 slot, uint256 _value) private {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        sstore(slot, _value)\\n        }\\n    }\\n\\n    function getAddress(bytes32 slot) private view returns (address str) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        str := sload(slot)\\n        }\\n    }\\n\\n    function getUint256(bytes32 slot) private view returns (uint256 str) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        str := sload(slot)\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/hardworkInterface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns (bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n    function hasVault(address _vault) external returns(bool);\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/hardworkInterface/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    \\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n    \\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/hardworkInterface/IUpgradeSource.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IUpgradeSource {\\n    function shouldUpgrade() external view returns (bool, address);\\n    function finalizeUpgrade() external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/hardworkInterface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n    function rebalance() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StrategyAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrategy\",\"type\":\"address\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"announceStrategyUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableToInvestOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"canUpdateStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeStrategyUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationChangeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyChangeDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestDenominator\",\"type\":\"uint256\"}],\"name\":\"initializeVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setVaultFractionToInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategyTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategyUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingBalanceInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingBalanceWithInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"underlyingBalanceWithInvestmentForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultFractionToInvestDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultFractionToInvestNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}