{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/// npm package/version - @openzeppelin/contracts-ethereum-package: 2.5.0\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.5.11;\r\n\r\n/// npm package/version - @openzeppelin/contracts-ethereum-package: 2.5.0\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.5.11;\r\n\r\n/// @notice  Interface of the official Deposit contract from the ETH\r\n///          Foundation.\r\ninterface IDeposit {\r\n\r\n    /// @notice Submit a Phase 0 DepositData object.\r\n    ///\r\n    /// @param pubkey - A BLS12-381 public key.\r\n    /// @param withdrawal_credentials - Commitment to a public key for withdrawals.\r\n    /// @param signature - A BLS12-381 signature.\r\n    /// @param deposit_data_root - The SHA-256 hash of the SSZ-encoded DepositData object.\r\n    ///                            Used as a protection against malformed input.\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) external payable;\r\n\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.5.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @notice  Batch ETH2 deposits, uses the official Deposit contract from the ETH\r\n///          Foundation for each atomic deposit. This contract acts as a for loop.\r\n///          Each deposit size will be an optimal 32 ETH.\r\n///\r\n/// @dev     The batch size has an upper bound due to the block gas limit. Each atomic\r\n///          deposit costs ~62,000 gas. The current block gas-limit is ~12,400,000 gas.\r\n///\r\n/// Author:  Staked Securely, Inc. (https://staked.us/)\r\ncontract BatchDeposit {\r\n    using Address for address payable;\r\n    using SafeMath for uint256;\r\n\r\n    /*************** STORAGE VARIABLE DECLARATIONS **************/\r\n\r\n    uint256 public constant DEPOSIT_AMOUNT = 32 ether;\r\n    // currently points at the Mainnet Deposit Contract\r\n    address public constant DEPOSIT_CONTRACT_ADDRESS = 0x00000000219ab540356cBB839Cbe05303d7705Fa;\r\n    IDeposit private constant DEPOSIT_CONTRACT = IDeposit(DEPOSIT_CONTRACT_ADDRESS);\r\n\r\n    /*************** EVENT DECLARATIONS **************/\r\n\r\n    /// @notice  Signals a refund of sent-in Ether that was extra and not required.\r\n    ///\r\n    /// @dev     The refund is sent to the msg.sender.\r\n    ///\r\n    /// @param  to - The ETH address receiving the ETH.\r\n    /// @param  amount - The amount of ETH being refunded.\r\n    event LogSendDepositLeftover(address to, uint256 amount);\r\n\r\n    /////////////////////// FUNCTION DECLARATIONS BEGIN ///////////////////////\r\n\r\n    /********************* PUBLIC FUNCTIONS **********************/\r\n\r\n    /// @notice  Empty constructor.\r\n    constructor() public {}\r\n\r\n    /// @notice  Fallback function.\r\n    ///\r\n    /// @dev     Used to address parties trying to send in Ether with a helpful\r\n    ///          error message.\r\n    function() external payable {\r\n        revert(\"#BatchDeposit fallback(): Use the `batchDeposit(...)` function to send Ether to this contract.\");\r\n    }\r\n\r\n    /// @notice Submit index-matching arrays that form Phase 0 DepositData objects.\r\n    ///         Will create a deposit transaction per index of the arrays submitted.\r\n    ///\r\n    /// @param pubkeys - An array of BLS12-381 public keys.\r\n    /// @param withdrawal_credentials - An array of public keys for withdrawals.\r\n    /// @param signatures - An array of BLS12-381 signatures.\r\n    /// @param deposit_data_roots - An array of the SHA-256 hash of the SSZ-encoded DepositData object.\r\n    function batchDeposit(\r\n        bytes[] calldata pubkeys,\r\n        bytes[] calldata withdrawal_credentials,\r\n        bytes[] calldata signatures,\r\n        bytes32[] calldata deposit_data_roots\r\n    ) external payable {\r\n        require(\r\n            pubkeys.length == withdrawal_credentials.length &&\r\n            pubkeys.length == signatures.length &&\r\n            pubkeys.length == deposit_data_roots.length,\r\n            \"#BatchDeposit batchDeposit(): All parameter array's must have the same length.\"\r\n        );\r\n        require(\r\n            pubkeys.length > 0,\r\n            \"#BatchDeposit batchDeposit(): All parameter array's must have a length greater than zero.\"\r\n        );\r\n        require(\r\n            msg.value >= DEPOSIT_AMOUNT.mul(pubkeys.length),\r\n            \"#BatchDeposit batchDeposit(): Ether deposited needs to be at least: 32 * (parameter `pubkeys[]` length).\"\r\n        );\r\n        uint256 deposited = 0;\r\n\r\n        // Loop through DepositData arrays submitting deposits\r\n        for (uint256 i = 0; i < pubkeys.length; i++) {\r\n            DEPOSIT_CONTRACT.deposit.value(DEPOSIT_AMOUNT)(\r\n                pubkeys[i],\r\n                withdrawal_credentials[i],\r\n                signatures[i],\r\n                deposit_data_roots[i]\r\n            );\r\n            deposited = deposited.add(DEPOSIT_AMOUNT);\r\n        }\r\n        assert(deposited == DEPOSIT_AMOUNT.mul(pubkeys.length));\r\n        uint256 ethToReturn = msg.value.sub(deposited);\r\n        if (ethToReturn > 0) {\r\n\r\n          // Emit `LogSendDepositLeftover` log\r\n          emit LogSendDepositLeftover(msg.sender, ethToReturn);\r\n\r\n          // This function doesn't guard against re-entrancy, and we're calling an\r\n          // untrusted address, but in this situation there is no state, etc. to\r\n          // take advantage of, so re-entrancy guard is unneccesary gas cost.\r\n          // This function uses call.value(), and handles return values/failures by\r\n          // reverting the transaction.\r\n          (msg.sender).sendValue(ethToReturn);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSendDepositLeftover\",\"type\":\"event\"}]","ContractName":"BatchDeposit","CompilerVersion":"v0.5.11+commit.22be8592","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e2656b628c68ffd1e92b24afd82b4ca42816054a2e4c9addcff9c1da6bf3c00b"}]}