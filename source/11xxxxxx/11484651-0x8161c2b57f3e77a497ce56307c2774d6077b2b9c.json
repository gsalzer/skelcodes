{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SPDX-License-Identifier: UNLICENSED\r\n*/\r\n\r\npragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external  view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n  function approve(address spender, uint value) external returns (bool success);\r\n}\r\n\r\ncontract rfiSantaSale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSold;\r\n  ERC20 public rfiSantaToken;\r\n  address payable public owner;\r\n  uint256 public collectedETH;\r\n  uint256 public startDate;\r\n  bool public softCapMet;\r\n  bool private presaleClosed = false;\r\n  uint256 private ethWithdrawals = 0;\r\n  uint256 private lastWithdrawal;\r\n\r\n  mapping(address => uint256) internal _contributions;\r\n  mapping(address => uint256) internal _averagePurchaseRate;\r\n  mapping(address => uint256) internal _numberOfContributions;\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender;\r\n    rfiSantaToken = ERC20(_wallet);\r\n  }\r\n\r\n  uint256 amount;\r\n  uint256 ratepereth = 25;\r\n \r\n  receive () external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 2 days);\r\n    require(rfiSantaToken.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 3 ether);\r\n    require(!presaleClosed);\r\n     \r\n    if (now.sub(startDate) <= 1 days) {\r\n       amount = msg.value.mul(25);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));\r\n    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {\r\n       amount = msg.value.mul(25);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));\r\n    }\r\n    \r\n    require(amount <= rfiSantaToken.balanceOf(address(this)));\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    _contributions[msg.sender] = _contributions[msg.sender].add(amount);\r\n    _numberOfContributions[msg.sender] = _numberOfContributions[msg.sender].add(1);\r\n    rfiSantaToken.transfer(msg.sender, amount);\r\n    if (!softCapMet && collectedETH >= 1 ether) {\r\n      softCapMet = true;\r\n    }\r\n  }\r\n\r\n  function contribute() external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 2 days);\r\n    require(rfiSantaToken.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 3 ether);\r\n    require(!presaleClosed);\r\n\r\n    if (now.sub(startDate) <= 1 days) {\r\n       amount = msg.value.mul(25);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));\r\n    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {\r\n       amount = msg.value.mul(25);\r\n       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));\r\n    }\r\n        \r\n    require(amount <= rfiSantaToken.balanceOf(address(this)));\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    _contributions[msg.sender] = _contributions[msg.sender].add(amount);\r\n    _numberOfContributions[msg.sender] = _numberOfContributions[msg.sender].add(1);\r\n    rfiSantaToken.transfer(msg.sender, amount);\r\n    if (!softCapMet && collectedETH >= 1 ether) {\r\n      softCapMet = true;\r\n    }\r\n  }\r\n\r\n  function numberOfContributions(address from) public view returns(uint256) {\r\n    return _numberOfContributions[address(from)]; \r\n  }\r\n\r\n  function contributions(address from) public view returns(uint256) {\r\n    return _contributions[address(from)];\r\n  }\r\n\r\n  function averagePurchaseRate(address from) public view returns(uint256) {\r\n    return _averagePurchaseRate[address(from)];\r\n  }\r\n\r\n  function buyBackETH(address payable from) public {\r\n    require(now.sub(startDate) > 3 days && !softCapMet);\r\n    require(_contributions[from] > 0);\r\n    uint256 exchangeRate = _averagePurchaseRate[from].div(10).div(_numberOfContributions[from]);\r\n    uint256 contribution = _contributions[from];\r\n    _contributions[from] = 0;\r\n    from.transfer(contribution.div(exchangeRate));\r\n  }\r\n\r\n  function withdrawETH() public {\r\n    require(msg.sender == owner && address(this).balance > 0);\r\n    require(softCapMet == true && presaleClosed == true);\r\n    uint256 withdrawAmount;\r\n    if (ethWithdrawals == 0) {\r\n      if (collectedETH <= 25 ether) {\r\n        withdrawAmount = collectedETH;\r\n      } else {\r\n        withdrawAmount = 25 ether;\r\n      }\r\n    } else {\r\n      uint256 currDate = now;\r\n      require(currDate.sub(lastWithdrawal) >= 1 days);\r\n      if (collectedETH <= 25 ether) {\r\n        withdrawAmount = collectedETH;\r\n      } else {\r\n        withdrawAmount = 25 ether;\r\n      }\r\n    }\r\n    lastWithdrawal = now;\r\n    ethWithdrawals = ethWithdrawals.add(1);\r\n    collectedETH = collectedETH.sub(withdrawAmount);\r\n    owner.transfer(withdrawAmount);\r\n  }\r\n\r\n  function endPresale() public {\r\n    require(msg.sender == owner);\r\n    presaleClosed = true;\r\n  }\r\n\r\n  function burnrfiSanta() public {\r\n    require(msg.sender == owner && rfiSantaToken.balanceOf(address(this)) > 0 && now.sub(startDate) > 1 days);\r\n    rfiSantaToken.transfer(address(0), rfiSantaToken.balanceOf(address(this)));\r\n  }\r\n  \r\n  function startSale() public {\r\n    require(msg.sender == owner && startDate==0);\r\n    startDate=now;\r\n  }\r\n  \r\n  function availablerfiSanta() public view returns(uint256) {\r\n    return rfiSantaToken.balanceOf(address(this));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"availablerfiSanta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"averagePurchaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnrfiSanta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"buyBackETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"numberOfContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rfiSantaToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"rfiSantaSale","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005d16fa1f2650e7e68a50a4fa447a871198be2070","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b49ecc4f4099b02cc822fd4cc298f734c814b31e99aeb15228155c473ff1cb8f"}]}