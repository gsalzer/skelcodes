{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface ZinFinance {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"zXYstaking.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2020-08-23\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\ncontract zinStake {\\r\\n     constructor( ZinFinance _token,address payable _admin) public {\\r\\n      token=_token;\\r\\n      owner = msg.sender;\\r\\n      admin=_admin;\\r\\n       }\\r\\n       //global Values\\r\\n     struct User{\\r\\n        uint256 stakes;\\r\\n        uint256 deposit_time;\\r\\n        uint256 deposit_payouts;\\r\\n    }\\r\\n    mapping(address=\\u003eUser) public userData;\\r\\n     using SafeMath for uint256;\\r\\n     /**\\r\\n     * @notice address of owener\\r\\n     */\\r\\n     address payable owner;\\r\\n     address payable admin;\\r\\n     /**\\r\\n     * @notice total stake holders.\\r\\n     */\\r\\n     address[] public stakeholders;\\r\\n     /**\\r\\n     * @notice The stakes for each stakeho      /**\\r\\n     * @notice deposit_time for each user!\\r\\n     */\\r\\n     mapping(address =\\u003e uint256) public deposit_time;\\r\\n\\r\\n    \\r\\n    ZinFinance public token;\\r\\n//========Modifiers========\\r\\n    modifier onlyOwner(){\\r\\n    require(msg.sender==owner);\\r\\n    _;\\r\\n    }\\r\\n//=========**============\\r\\n    function stakeEth()\\r\\n        public\\r\\n        payable\\r\\n    { \\r\\n        require(msg.value\\u003e=1e18,\\\"minimum 1 eth is required to participate!\\\");\\r\\n        require(userData[msg.sender].stakes==0,\\\"you have already staked!\\\");\\r\\n        userData[msg.sender].deposit_time=now;\\r\\n        userData[msg.sender].stakes=msg.value;\\r\\n        addStakeholder(msg.sender);    \\r\\n        }\\r\\n    //------------Add Stake holders----------\\r\\n        /**\\r\\n     * @notice A method to add a stakeholder.\\r\\n     * @param _stakeholder The stakeholder to add.\\r\\n     */\\r\\n    function addStakeholder(address _stakeholder)\\r\\n        private\\r\\n    {\\r\\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\\r\\n        if(!_isStakeholder) stakeholders.push(_stakeholder);\\r\\n    }\\r\\n    function transferOwnerShip(address payable _owner)public onlyOwner{\\r\\n        owner=_owner;\\r\\n    }\\r\\n      // ---------- STAKEHOLDERS ----------\\r\\n\\r\\n    /**\\r\\n     * @notice A method to check if an address is a stakeholder.\\r\\n     * @param _address The address to verify.\\r\\n     * @return bool, uint256 Whether the address is a stakeholder, \\r\\n     * and if so its position in the stakeholders array.\\r\\n     */\\r\\n    function isStakeholder(address _address)\\r\\n        public\\r\\n        view\\r\\n        returns(bool, uint256)\\r\\n    {\\r\\n        for (uint256 s = 0; s \\u003c stakeholders.length; s += 1){\\r\\n            if (_address == stakeholders[s]) return (true, s);\\r\\n        }\\r\\n        return (false, 0);\\r\\n    }\\r\\n     function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\\r\\n        return (_amount.mul(21)).div(10);\\r\\n    }\\r\\n\\r\\n    function rewardOfEachUser(address _addr) view external returns(uint256 payout, uint256 max_payout) {\\r\\n        max_payout = this.maxPayoutOf(userData[_addr].stakes);\\r\\n\\r\\n        if(userData[_addr].deposit_payouts \\u003c max_payout) {\\r\\n            payout = (calculateDividend(_addr) * ((block.timestamp - userData[_addr].deposit_time) /1 minutes)) - userData[_addr].deposit_payouts;\\r\\n            if(userData[_addr].deposit_payouts + payout \\u003e max_payout) {\\r\\n                payout = max_payout - userData[_addr].deposit_payouts;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n     /** \\r\\n     * @notice A simple method that calculates the rewards for each stakeholder.\\r\\n     * @param _stakeholder The stakeholder to calculate rewards for.\\r\\n     */\\r\\n    function calculateDividend(address _stakeholder)\\r\\n        public\\r\\n        view\\r\\n        returns(uint256)\\r\\n        \\r\\n    {\\r\\n           uint256 reward=208333333;\\r\\n           return ((userData[_stakeholder].stakes.div(1000000000000)).mul(reward));\\r\\n        \\r\\n    }\\r\\n      /**\\r\\n     * @notice A method to allow a stakeholder to withdraw his rewards.\\r\\n     */\\r\\n    function withdrawReward() \\r\\n     public\\r\\n     {\\r\\n        (uint256 reward,uint256 max_payout)=this.rewardOfEachUser(msg.sender);\\r\\n        require(reward\\u003e0,\\\"You have no reward!\\\");\\r\\n         require(token.balanceOf(address(this))\\u003e=reward,\\\"There are no token to collect right now!\\\");\\r\\n         token.transfer(msg.sender,reward);\\r\\n         userData[msg.sender].deposit_payouts+=reward;\\r\\n\\r\\n    }\\r\\n     function unstake() \\r\\n     public \\r\\n     {\\r\\n        require(now\\u003e=userData[msg.sender].deposit_time+1 weeks,\\\"You can\\u0027t unstake before 1 week\\\");\\r\\n        uint256 adminFee=(userData[msg.sender].stakes*1)/100;\\r\\n        uint256 stakes=userData[msg.sender].stakes.sub(adminFee);\\r\\n        require(stakes\\u003e0,\\\"You have nothing staked!\\\");\\r\\n        require(address(this).balance\\u003e=0,\\\"There are no Eth to collect right now\\\");\\r\\n        msg.sender.transfer(stakes);\\r\\n        userData[msg.sender].stakes=0;\\r\\n        userData[msg.sender].deposit_time=0;\\r\\n        userData[msg.sender].deposit_payouts=0;\\r\\n        if(userData[msg.sender].stakes==0){\\r\\n        (bool _isStakeholder, uint256 s) = isStakeholder(msg.sender);\\r\\n        if(_isStakeholder){\\r\\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\\r\\n            stakeholders.pop();\\r\\n        } \\r\\n        }\\r\\n    }\\r\\n    function liquidityDistribution(uint256 _amount)public onlyOwner{\\r\\n        owner.transfer(_amount);\\r\\n    }\\r\\n    function totalStakes()\\r\\n        public\\r\\n        view\\r\\n        returns(uint256)\\r\\n    {\\r\\n        uint256 _totalStakes = 0;\\r\\n        for (uint256 s = 0; s \\u003c stakeholders.length; s += 1){\\r\\n            _totalStakes = _totalStakes.add(userData[stakeholders[s]].stakes);\\r\\n        }\\r\\n        return _totalStakes;\\r\\n    }\\r\\n    function destroy()\\r\\n    public\\r\\n    onlyOwner\\r\\n    {\\r\\n        require(token.transfer(owner,token.balanceOf(address(this))),\\\"balance not transferring\\\");\\r\\n        selfdestruct(owner);\\r\\n    }\\r\\n\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ZinFinance\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"calculateDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidityDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"rewardOfEachUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ZinFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"zinStake","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ede47c87b51cc32f1c2f38a7ebe05376cc82966f000000000000000000000000c7b1bb215ddc38e2728ebf23b0b8b49549fa8e63","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://24488f505936c68bd898337f666b3aab70b8d8d41583d0cbabaac90ac27d00b7"}]}