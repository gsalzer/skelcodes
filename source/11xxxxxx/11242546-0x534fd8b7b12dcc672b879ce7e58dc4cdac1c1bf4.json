{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n//Library\r\nlibrary SafeMath {\r\n\r\n    //Functions\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        } \r\n        uint256 c = a * b; \r\n        assert(c / a == b); \r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b; \r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a); \r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b; \r\n        assert(c >= a); \r\n        return c;\r\n    }\r\n}\r\n\r\ncontract RespectingBitcoin {\r\n    using SafeMath for uint256;\r\n    \r\n    //Variables\r\n\r\n    uint8 public decimals;\r\n    \r\n    address public owner;\r\n    \r\n    address public deflaxPioneers;\r\n    \r\n    uint256 public supplyCap;\r\n    uint256 public totalSupply;\r\n    \r\n    bool private mintable = true;\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    //Events\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Mintable(address indexed from, bool enabled);\r\n    event OwnerChanged(address newOwner);\r\n    event ContractChanged(address indexed from, address newContract);\r\n\r\n    //Modifiers\r\n\r\n    modifier oO(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier oOOrContract(){\r\n        require(msg.sender == owner || msg.sender == deflaxPioneers); \r\n        _;\r\n    }\r\n    \r\n    modifier onlyMintable() {\r\n        require(mintable); \r\n        _;\r\n    }\r\n    \r\n    //Constructor\r\n    \r\n    function RespectingBitcoin(uint256 _supplyCap, uint8 _decimals) public {\r\n        owner = msg.sender; \r\n        decimals = _decimals;\r\n        supplyCap = _supplyCap * (10 ** uint256(decimals));\r\n    }\r\n    \r\n    //Functions\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0)); \r\n        require(_value <= balances[msg.sender]); \r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value); \r\n        balances[_to] = balances[_to].add(_value); \r\n        \r\n        Transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0)); \r\n        require(_value <= balances[_from]); \r\n        require(_value <= allowed[_from][msg.sender]); \r\n        \r\n        balances[_from] = balances[_from].sub(_value); \r\n        balances[_to] = balances[_to].add(_value); \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \r\n        \r\n        Transfer(_from, _to, _value); \r\n        return true;\r\n    }\r\n   \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value; \r\n        \r\n        Approval(msg.sender, _spender, _value); \r\n        return true;\r\n    }\r\n   \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n  \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); \r\n        \r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n        return true;\r\n    }\r\n  \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender]; \r\n        \r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        } \r\n        \r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n        return true;\r\n    }\r\n  \r\n    function mint(address _to, uint256 _amount) public oOOrContract onlyMintable returns (bool) {\r\n        require(totalSupply.add(_amount) <= supplyCap); \r\n        \r\n        totalSupply = totalSupply.add(_amount); \r\n        balances[_to] = balances[_to].add(_amount); \r\n        Mint(_to, _amount); \r\n        \r\n        Transfer(address(0), _to, _amount); \r\n        return true;\r\n    }\r\n  \r\n    function burn(uint256 _value) external {\r\n        require(_value <= balances[msg.sender]); \r\n        \r\n        address burner = msg.sender; \r\n        balances[burner] = balances[burner].sub(_value); \r\n        totalSupply = totalSupply.sub(_value);\r\n        \r\n        Burn(msg.sender, _value);\r\n    }\r\n    \r\n    function setMintable(bool _isMintable) external oO {\r\n        mintable = _isMintable;\r\n        \r\n        Mintable(msg.sender, _isMintable);\r\n    }\r\n    \r\n    function setOwner(address _newOwner) external oO {\r\n        require(_newOwner != address(0)); \r\n        \r\n        owner = _newOwner;\r\n        \r\n        OwnerChanged(_newOwner);\r\n    }\r\n  \r\n    function setContract(address _newContract) external oO {\r\n        require(_newContract != address(0)); \r\n        \r\n        deflaxPioneers = _newContract; \r\n        \r\n        ContractChanged(msg.sender, _newContract);\r\n    }\r\n}\r\n\r\ncontract DFX is RespectingBitcoin(20968750, 15) {\r\n    \r\n    //Token Details\r\n    \r\n    string public constant name = \"DEFLAx\";\r\n    string public constant symbol = \"DFX\";\r\n}\r\n\r\ncontract bDFP is RespectingBitcoin(3355, 8) {\r\n    \r\n    //Token Details\r\n    \r\n    string public constant name = \"DEFLAxP\";\r\n    string public constant symbol = \"bDFP\";\r\n}\r\n\r\ncontract DeflaxPioneers {\r\n    using SafeMath for uint256;\r\n    \r\n    //Variables\r\n\r\n    DFX public dfx;\r\n    bDFP public bdfp;\r\n    \r\n    string public constant NAME = \"DEFLAx PIONEERS\";\r\n    \r\n    address public wallet;\r\n    address public owner;\r\n    \r\n    uint8 public plot;\r\n    \r\n    uint256 public eta;\r\n    \r\n    uint24[3] public plotValue = [16775000,1000,4192750];\r\n\r\n    uint256 public funds;\r\n    \r\n    uint128 internal constant WAD = 10 ** 18;\r\n\r\n    mapping (uint8 => uint256) public plotTotal;\r\n    mapping (uint8 => mapping (address => uint256)) public contribution;\r\n    mapping (uint8 => mapping (address => bool)) public claimed;\r\n    \r\n    //Events\r\n    \r\n    event OwnerChanged(address newOwner);\r\n    event WalletChanged(address newWallet);\r\n    \r\n    event FundsCollected(address indexed to, uint256 amount);\r\n    event FundsForwarded(address indexed to, uint256 amount);\r\n    \r\n    event PioneerContribution(address indexed to, uint256 amount);\r\n    event PatronContribution(address indexed to, uint256 amount);\r\n    event ExcessTransferred(address indexed to, uint256 amount);\r\n    \r\n    event Donated(address indexed from, uint256 DFX, uint256 bDFP);\r\n    event Claimed(address indexed to, uint256 amount);\r\n    \r\n    //Modifiers\r\n    \r\n    modifier oO() {\r\n        require(msg.sender == owner); \r\n        _;\r\n    }\r\n    \r\n    //Constructor\r\n    \r\n    function DeflaxPioneers(address _baseToken, address _bonusToken) public {\r\n        dfx = DFX(_baseToken); \r\n        bdfp = bDFP(_bonusToken); \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    //Functions\r\n\r\n    function cast(uint256 x) private pure returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n    \r\n    function wdiv(uint128 x, uint128 y) private pure returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n    \r\n    function wmul(uint128 x, uint128 y) private pure returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n   \r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n    \r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != address(0)); \r\n        require(msg.value != 0); \r\n        \r\n        if (plot == 0) {\r\n            pioneer(_beneficiary);\r\n        } else {\r\n            patron(_beneficiary);\r\n        }\r\n    }\r\n    \r\n    function pioneer(address _beneficiary) internal {\r\n        \r\n        uint256 bonusRate = 2;\r\n        uint256 baseRate = 10000;\r\n        \r\n        uint256 excess;\r\n        uint256 participation = msg.value; \r\n        \r\n        uint256 maxEther = 1677.5 ether;\r\n\r\n        if (plotTotal[0] + participation > maxEther) {\r\n            excess = participation.sub(maxEther.sub(plotTotal[0])); \r\n            participation = participation.sub(excess); \r\n            plot++; \r\n            eta = now.add(24 hours);\r\n        } \r\n        \r\n        funds = funds.add(participation); \r\n        plotTotal[0] = plotTotal[0].add(participation); \r\n        \r\n        uint256 bonus = participation.div(10 ** 10).mul(bonusRate); \r\n        uint256 base = participation.div(10 ** 3).mul(baseRate);\r\n        \r\n        if (excess > 0) {\r\n            excessTransfer(_beneficiary, excess);\r\n        } \r\n        else forwardFunds(); \r\n        \r\n        bdfp.mint(_beneficiary, bonus); \r\n        dfx.mint(_beneficiary, base);\r\n        \r\n        PioneerContribution(_beneficiary, participation);\r\n    }\r\n    \r\n    function excessTransfer(address _beneficiary, uint256 _amount) internal {\r\n        uint256 participation = _amount;\r\n        \r\n        funds = funds.add(participation);\r\n        plotTotal[plot] = plotTotal[plot].add(participation);\r\n        contribution[plot][_beneficiary] = contribution[plot][_beneficiary].add(participation); \r\n        \r\n        ExcessTransferred(_beneficiary, _amount);\r\n    }\r\n    \r\n    function patron(address _beneficiary) internal {\r\n        if (now > eta) {\r\n            plot++; \r\n            eta = now.add(24 hours);\r\n        } \r\n        \r\n        uint256 participation = msg.value; \r\n        \r\n        funds = funds.add(participation); \r\n        plotTotal[plot] = plotTotal[plot].add(participation); \r\n        contribution[plot][_beneficiary] = contribution[plot][_beneficiary].add(participation); \r\n        \r\n        forwardFunds(); \r\n        \r\n        PatronContribution(_beneficiary, participation);\r\n    }\r\n    \r\n    function donate(uint256 _amount) public {\r\n        require(plot >= 0);\r\n        require(_amount > 0);\r\n        require(bdfp.totalSupply() < bdfp.supplyCap());\r\n        \r\n        uint256 donation = _amount;\r\n        uint256 donationConversion = donation.div(10**14) ;\r\n        uint256 donationRate = 20000;\r\n        \r\n        uint256 reward = donationConversion.div(donationRate).mul(10**7);\r\n        uint256 excess;\r\n        \r\n        if (bdfp.totalSupply() + reward > bdfp.supplyCap()) {\r\n            excess = reward.sub(bdfp.supplyCap()); \r\n            donation = donation.sub(excess); \r\n        }\r\n        require(dfx.transferFrom(msg.sender, address(this), donation));\r\n        bdfp.mint(msg.sender, reward);\r\n        \r\n        Donated(msg.sender, donation, reward);\r\n    }\r\n    \r\n    function donations() public view returns (uint) {\r\n        return (dfx.balanceOf(address(this)));\r\n    }\r\n    \r\n    function claim(uint8 _day, address _beneficiary) public {\r\n        assert(plot > _day); \r\n        \r\n        if (claimed[_day][_beneficiary] || plotTotal[_day] == 0) {\r\n            return;\r\n        } \r\n        var dailyTotal = cast(plotTotal[_day]); \r\n        var userTotal = cast(contribution[_day][_beneficiary]); \r\n        var price = wdiv(cast(uint256(plotValue[_day]) * (10 ** uint256(15))), dailyTotal); \r\n        var reward = wmul(price, userTotal); \r\n        \r\n        claimed[_day][_beneficiary] = true; \r\n        dfx.mint(_beneficiary, reward);\r\n        \r\n        Claimed(_beneficiary, reward);\r\n    }\r\n    \r\n    function claimEverything(address _beneficiary) public {\r\n        for (uint8 i = 1; i < plot; i++) {\r\n            claim(i, _beneficiary);\r\n        }\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n        \r\n        FundsForwarded(wallet, msg.value);\r\n    }\r\n    \r\n    function setOwner(address _newOwner) external oO {\r\n        require(_newOwner != address(0)); \r\n        owner = _newOwner;\r\n        \r\n        OwnerChanged(_newOwner);\r\n    }\r\n    \r\n    function setWallet(address _newWallet) external oO {\r\n        require(_newWallet != address(0)); \r\n        wallet = _newWallet;\r\n        \r\n        WalletChanged(_newWallet);\r\n    }\r\n    \r\n    function collectFunds() external oO {\r\n        wallet.transfer(this.balance);\r\n        \r\n        FundsCollected(wallet, this.balance);\r\n    }\r\n}\r\n\r\ncontract Distributor {\r\n    \r\n    //Variables\r\n    \r\n    DeflaxPioneers public deflaxPioneers;\r\n    \r\n    //Constructor\r\n    \r\n    function Distributor(DeflaxPioneers _setAddress) public {\r\n        deflaxPioneers = _setAddress;\r\n    }\r\n    \r\n    //Functions\r\n    \r\n    function () external payable {\r\n        deflaxPioneers.claimEverything(msg.sender); \r\n        \r\n        if(msg.value > 0) \r\n        msg.sender.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plotValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"plotTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimEverything\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bdfp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint8\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseToken\",\"type\":\"address\"},{\"name\":\"_bonusToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PioneerContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PatronContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExcessTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"DFX\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bDFP\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]","ContractName":"DeflaxPioneers","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bb006f16d4cda7a511c4d8bd58f8f14b2f7c0549000000000000000000000000fbd4717d91a6075795b8b77206e1dd842197722e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a27f1b0c10f3d8238a47c53daef5333cf9782f32c73ca9c282ebd4e76ff75081"}]}