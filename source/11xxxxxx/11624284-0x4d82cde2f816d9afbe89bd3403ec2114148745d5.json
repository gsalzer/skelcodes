{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function totalSupply() external view returns (uint);\r\n\r\n\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getEthAddr() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\ncontract UniswapHelpers is Helpers {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Return WETH address\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\r\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // kovan\r\n    }\r\n\r\n    /**\r\n     * @dev Return uniswap v2 router02 Address\r\n     */\r\n    function getUniswapAddr() internal pure returns (address) {\r\n        return 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\r\n        _sell = sell == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\r\n    }\r\n\r\n    function getExpectedBuyAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt\r\n    ) internal view returns(uint buyAmt) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address[] memory paths = new address[](2);\r\n        paths[0] = address(sellAddr);\r\n        paths[1] = address(buyAddr);\r\n        uint[] memory amts = router.getAmountsOut(\r\n            sellAmt,\r\n            paths\r\n        );\r\n        buyAmt = amts[1];\r\n    }\r\n\r\n    function getExpectedSellAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint buyAmt\r\n    ) internal view returns(uint sellAmt) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address[] memory paths = new address[](2);\r\n        paths[0] = address(sellAddr);\r\n        paths[1] = address(buyAddr);\r\n        uint[] memory amts = router.getAmountsIn(\r\n            buyAmt,\r\n            paths\r\n        );\r\n        sellAmt = amts[0];\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        TokenInterface buyAddr,\r\n        uint expectedAmt,\r\n        TokenInterface sellAddr,\r\n        uint sellAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18((sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getSellUnitAmt(\r\n        TokenInterface sellAddr,\r\n        uint expectedAmt,\r\n        TokenInterface buyAddr,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), buyAmt);\r\n        uint _sellAmt = convertTo18(sellAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_sellAmt, _buyAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n\r\n    function _getWithdrawUnitAmts(\r\n        TokenInterface tokenA,\r\n        TokenInterface tokenB,\r\n        uint amtA,\r\n        uint amtB,\r\n        uint uniAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmtA, uint unitAmtB) {\r\n        uint _amtA = convertTo18(tokenA.decimals(), amtA);\r\n        uint _amtB = convertTo18(tokenB.decimals(), amtB);\r\n        unitAmtA = wdiv(_amtA, uniAmt);\r\n        unitAmtA = wmul(unitAmtA, sub(WAD, slippage));\r\n        unitAmtB = wdiv(_amtB, uniAmt);\r\n        unitAmtB = wmul(unitAmtB, sub(WAD, slippage));\r\n    }\r\n\r\n    function _getWithdrawAmts(\r\n        TokenInterface _tokenA,\r\n        TokenInterface _tokenB,\r\n        uint uniAmt\r\n    ) internal view returns (uint amtA, uint amtB)\r\n    {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr != address(0), \"pair-not-found.\");\r\n        TokenInterface uniToken = TokenInterface(exchangeAddr);\r\n        uint share = wdiv(uniAmt, uniToken.totalSupply());\r\n        amtA = wmul(_tokenA.balanceOf(exchangeAddr), share);\r\n        amtB = wmul(_tokenB.balanceOf(exchangeAddr), share);\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n         return\r\n            Babylonian\r\n                .sqrt(\r\n                    reserveIn.mul(\r\n                        userIn.mul(3988000).add(reserveIn.mul(3988009))\r\n                    )\r\n                ).sub(reserveIn.mul(1997)) / 1994;\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is UniswapHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\r\n    public view returns (uint buyAmt, uint unitAmt)\r\n    {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        buyAmt = getExpectedBuyAmt(address(_buyAddr), address(_sellAddr), sellAmt);\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n\r\n    function getSellAmount(address buyAddr, address sellAddr, uint buyAmt, uint slippage)\r\n    public view returns (uint sellAmt, uint unitAmt)\r\n    {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        sellAmt = getExpectedSellAmt(address(_buyAddr), address(_sellAddr), buyAmt);\r\n        unitAmt = getSellUnitAmt(_sellAddr, sellAmt, _buyAddr, buyAmt, slippage);\r\n    }\r\n\r\n    function getDepositAmount(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountA,\r\n        uint slippageA,\r\n        uint slippageB\r\n    ) public view returns (uint amountB, uint uniAmount, uint amountAMin, uint amountBMin)\r\n    {       \r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(address(_tokenA), address(_tokenB)));\r\n        require(address(lpToken) != address(0), \"No-exchange-address\");\r\n        \r\n        (uint256 reserveA, uint256 reserveB, ) = lpToken.getReserves();\r\n        (reserveA, reserveB) = lpToken.token0() == address(_tokenA) ? (reserveA, reserveB) : (reserveB, reserveA);\r\n        \r\n        amountB = router.quote(amountA, reserveA, reserveB);\r\n         \r\n        uniAmount= mul(amountA, lpToken.totalSupply());\r\n        uniAmount= uniAmount / reserveA;\r\n        \r\n        amountAMin = wmul(sub(WAD, slippageA), amountA);\r\n        amountBMin = wmul(sub(WAD, slippageB), amountB);\r\n        \r\n    }\r\n\r\n    function getSingleDepositAmount(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountA,\r\n        uint slippage\r\n    ) public view returns (uint amtA, uint amtB, uint uniAmt, uint minUniAmt)\r\n    {       \r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(address(_tokenA), address(_tokenB)));\r\n        require(address(lpToken) != address(0), \"No-exchange-address\");\r\n        \r\n        (uint256 reserveA, uint256 reserveB, ) = lpToken.getReserves();\r\n        (reserveA, reserveB) = lpToken.token0() == address(_tokenA) ? (reserveA, reserveB) : (reserveB, reserveA);\r\n\r\n        uint256 swapAmtA = calculateSwapInAmount(reserveA, amountA);\r\n\r\n        amtB = getExpectedBuyAmt(address(_tokenB), address(_tokenA), swapAmtA);\r\n        amtA = sub(amountA, swapAmtA);\r\n\r\n        uniAmt = mul(amtA, lpToken.totalSupply());\r\n        uniAmt = uniAmt / add(reserveA, swapAmtA);\r\n\r\n        minUniAmt = wmul(sub(WAD, slippage), uniAmt);\r\n    }\r\n\r\n    function getDepositAmountNewPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amtA,\r\n        uint amtB\r\n    ) public view returns (uint unitAmt)\r\n    {\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr == address(0), \"pair-found.\");\r\n        uint _amtA18 = convertTo18(_tokenA.decimals(), amtA);\r\n        uint _amtB18 = convertTo18(_tokenB.decimals(), amtB);\r\n        unitAmt = wdiv(_amtB18, _amtA18);\r\n    }\r\n\r\n    function getWithdrawAmounts(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint uniAmt,\r\n        uint slippage\r\n    ) public view returns (uint amtA, uint amtB, uint unitAmtA, uint unitAmtB)\r\n    {\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        (amtA, amtB) = _getWithdrawAmts(\r\n            _tokenA,\r\n            _tokenB,\r\n            uniAmt\r\n        );\r\n        (unitAmtA, unitAmtB) = _getWithdrawUnitAmts(\r\n            _tokenA,\r\n            _tokenB,\r\n            amtA,\r\n            amtB,\r\n            uniAmt,\r\n            slippage\r\n        );\r\n    }\r\n\r\n    struct TokenPair {\r\n        address tokenA;\r\n        address tokenB;\r\n    }\r\n\r\n    struct PoolData {\r\n        address tokenA;\r\n        address tokenB;\r\n        address lpAddress;\r\n        uint reserveA;\r\n        uint reserveB;\r\n        uint tokenAShareAmt;\r\n        uint tokenBShareAmt;\r\n        uint tokenABalance;\r\n        uint tokenBBalance;\r\n        uint lpAmount;\r\n        uint totalSupply;\r\n    }\r\n\r\n    function getPositionByPair(\r\n        address owner,\r\n        TokenPair[] memory tokenPairs\r\n    ) public view returns (PoolData[] memory)\r\n    {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        uint _len = tokenPairs.length;\r\n        PoolData[] memory poolData = new PoolData[](_len);\r\n        for (uint i = 0; i < _len; i++) {\r\n            (TokenInterface tokenA, TokenInterface tokenB) = changeEthAddress(tokenPairs[i].tokenA, tokenPairs[i].tokenB);\r\n            address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(\r\n                address(tokenA),\r\n                address(tokenB)\r\n            );\r\n            if (exchangeAddr != address(0)) {\r\n                IUniswapV2Pair lpToken = IUniswapV2Pair(exchangeAddr);\r\n                (uint256 reserveA, uint256 reserveB, ) = lpToken.getReserves();\r\n                (reserveA, reserveB) = lpToken.token0() == address(tokenA) ? (reserveA, reserveB) : (reserveB, reserveA);\r\n        \r\n                uint lpAmount = lpToken.balanceOf(owner);\r\n                uint totalSupply = lpToken.totalSupply();\r\n                uint share = wdiv(lpAmount, totalSupply);\r\n                uint amtA = wmul(reserveA, share);\r\n                uint amtB = wmul(reserveB, share);\r\n                poolData[i] = PoolData(\r\n                    address(0),\r\n                    address(0),\r\n                    address(lpToken),\r\n                    reserveA,\r\n                    reserveB,\r\n                    amtA,\r\n                    amtB,\r\n                    0,\r\n                    0,\r\n                    lpAmount,\r\n                    totalSupply\r\n                );\r\n            }\r\n            poolData[i].tokenA = tokenPairs[i].tokenA;\r\n            poolData[i].tokenB = tokenPairs[i].tokenB;\r\n            poolData[i].tokenABalance = tokenPairs[i].tokenA == getEthAddr() ? owner.balance : tokenA.balanceOf(owner);\r\n            poolData[i].tokenBBalance = tokenPairs[i].tokenB == getEthAddr() ? owner.balance : tokenB.balanceOf(owner);\r\n        }\r\n        return poolData;\r\n    }\r\n\r\n    function getPosition(\r\n        address owner,\r\n        address[] memory lpTokens\r\n    ) public view returns (PoolData[] memory)\r\n    {\r\n        uint _len = lpTokens.length;\r\n        PoolData[] memory poolData = new PoolData[](_len);\r\n        address wethAddr = getAddressWETH();\r\n        address ethAddr = getEthAddr();\r\n        for (uint i = 0; i < _len; i++) {\r\n            IUniswapV2Pair lpToken = IUniswapV2Pair(lpTokens[i]);\r\n            (uint256 reserveA, uint256 reserveB, ) = lpToken.getReserves();\r\n            (address tokenA, address tokenB) = (lpToken.token0(), lpToken.token1());\r\n            {\r\n            uint lpAmount = lpToken.balanceOf(owner);\r\n            uint totalSupply = lpToken.totalSupply();\r\n            uint share = wdiv(lpAmount, totalSupply);\r\n            uint amtA = wmul(reserveA, share);\r\n            uint amtB = wmul(reserveB, share);\r\n            poolData[i] = PoolData(\r\n                tokenA == wethAddr ? ethAddr : tokenA,\r\n                tokenB == wethAddr ? ethAddr : tokenB,\r\n                address(lpToken),\r\n                reserveA,\r\n                reserveB,\r\n                amtA,\r\n                amtB,\r\n                0,\r\n                0,\r\n                lpAmount,\r\n                totalSupply\r\n            );\r\n            }\r\n            poolData[i].tokenABalance = tokenA == wethAddr ? owner.balance : TokenInterface(tokenA).balanceOf(owner);\r\n            poolData[i].tokenBBalance = tokenB == wethAddr ? owner.balance : TokenInterface(tokenB).balanceOf(owner);\r\n        }\r\n        return poolData;\r\n    }\r\n}\r\n\r\n\r\ncontract InstaUniswapV2Resolver is Resolver {\r\n    string public constant name = \"UniswapV2-Resolver-v1.1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageB\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"}],\"name\":\"getDepositAmountNewPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"internalType\":\"struct Resolver.TokenPair[]\",\"name\":\"tokenPairs\",\"type\":\"tuple[]\"}],\"name\":\"getPositionByPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getSingleDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUniAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaUniswapV2Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d0e350661c3695a04e69930986ec9688245760f06b8ec68c5b10b02438d81f9"}]}