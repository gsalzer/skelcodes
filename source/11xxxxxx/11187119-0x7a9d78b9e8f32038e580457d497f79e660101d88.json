{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ncontract BerserkToken {\r\n\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\tuint256 constant private INITIAL_SUPPLY = 10000 ether; \r\n\tuint256 public BURN_RATE = 5;\r\n\t\r\n\taddress public burnPoolAddress= address(0x0);\r\n\tuint256 public burnPoolAmount=0;\r\n\tuint256 public burnPoolAmountPrevious=0;\r\n\tbool public berserkSwapBool= false;\r\n\r\n\tstring constant public name = \"Berserk\";\r\n\tstring constant public symbol = \"BER\";\r\n\tuint8 constant public decimals = 18;\r\n\t\r\n\tmapping (address => bool) public minters;\r\n\taddress public governance;\r\n\taddress public burnOwner;\r\n\taddress public berserkSwapOwner;\r\n\taddress public berserkSwapAddress = address(0x0);\r\n\t\r\n    mapping(address => bool) public isAdmin;\r\n\r\n\tstruct User {\r\n\t\tbool whitelisted;\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 burnedSupply;\r\n\t\tmapping(address => User) users;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent Burn(uint256 tokens);\r\n\tevent Mint(uint256 amount);\r\n\r\n\tconstructor() public {\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\tinfo.users[msg.sender].balance = INITIAL_SUPPLY;\r\n\t\temit Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\r\n\t\tinfo.burnedSupply = 0;\r\n        governance = msg.sender;\r\n        burnOwner= msg.sender;\r\n        isAdmin[msg.sender]=true;\r\n        berserkSwapOwner = msg.sender;\r\n\t}\r\n\r\n\tfunction burn(uint256 _tokens) external {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tuint256 _burnedAmount = _tokens;\r\n\t\tinfo.totalSupply -= _burnedAmount;\r\n\t\temit Transfer(msg.sender, address(0x0), _burnedAmount);\r\n\t\tinfo.burnedSupply= info.burnedSupply + _tokens;\r\n\t\temit Burn(_burnedAmount);\r\n\t}\r\n    \r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\t\r\n\t function addMinter(address _minter) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minters[_minter] = false;\r\n    }\r\n    \r\n    function bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\r\n\t\trequire(_receivers.length == _amounts.length);\r\n\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\r\n\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\r\n\t\t}\r\n\t}\r\n    \r\n    function mint(address account, uint256 amount) public {\r\n        require(minters[msg.sender], \"!minter\");\r\n        _mint(account, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        info.totalSupply = info.totalSupply+amount;\r\n        info.users[msg.sender].balance = info.users[msg.sender].balance+amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function renounceBurnOwnership () external {\r\n        require (msg.sender == burnOwner);\r\n        burnOwner= address(0x0);\r\n    }\r\n    \r\n    function setBurnAmount(uint256 _burnAmount) public{\r\n        require(msg.sender == burnOwner, \"Not authorized!\");\r\n        BURN_RATE= _burnAmount;\r\n    }\r\n    \r\n    function setBurnPoolAddress(address _burnPoolAddress) public{\r\n        require(msg.sender == burnOwner, \"Not authorized!\");\r\n        burnPoolAddress= _burnPoolAddress;\r\n    }\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\t\r\n\tfunction burnedSupply() public view returns (uint256){\r\n\t    return info.burnedSupply;\r\n\t}\r\n\t\r\n\tfunction resetBurnAmount() public {\r\n\t    require(isAdmin[msg.sender]==true);\r\n\t    burnPoolAmountPrevious= burnPoolAmount;\r\n\t    burnPoolAmount= 0;\r\n\t}\r\n\t\r\n\tfunction getBurnAmount() public view returns (uint256){\r\n\t    return burnPoolAmount;\r\n\t}\r\n\t\r\n\tfunction getBurnAmountPrevious() public view returns (uint256){\r\n\t    return burnPoolAmountPrevious;\r\n\t}\r\n    \r\n    function getBurnPoolAddress() public view returns (address){\r\n        return burnPoolAddress;\r\n    }\r\n\t\r\n\tfunction setAdminStatus(address _admin) external {\r\n\t    require (msg.sender == governance);\r\n        isAdmin[_admin] = true;\r\n    }\r\n    \r\n    function setBerserkSwapAddress (address _berserkSwapAddress) external {\r\n        require (msg.sender == berserkSwapOwner);\r\n        berserkSwapAddress = _berserkSwapAddress;\r\n    }\r\n    \r\n    function setBerserkSwapBool () external {\r\n        require (msg.sender == berserkSwapOwner);\r\n        berserkSwapBool = true;\r\n    }\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance ;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 userBalance, uint256 totalBurnedSupply) {\r\n\t\treturn (totalSupply(), balanceOf(_user), burnedSupply());\r\n\t}\r\n\t\r\n\tfunction allInfoBurned() public view returns (uint256, uint256){\r\n\t    return (burnPoolAmount, burnPoolAmountPrevious);\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tuint256 _burnedAmount = _tokens * BURN_RATE;\r\n\t\t_burnedAmount= _burnedAmount / 100;\r\n\t\tuint256 _transferred = _tokens - _burnedAmount;\r\n\r\n        if (berserkSwapBool == true) {\r\n            if (_from == berserkSwapAddress || _to == berserkSwapAddress)\r\n                {\r\n                _burnedAmount = _tokens * BURN_RATE ;\r\n                _burnedAmount= _burnedAmount / 200;\r\n                _transferred = _tokens - _burnedAmount;\r\n                \r\n                info.users[_to].balance += _transferred;\r\n    \t    \temit Transfer(_from, _to, _transferred);\r\n    \t\t\t_burnedAmount /= 2;\r\n    \t\t\t\r\n    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\r\n    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\r\n    \t\t\t\r\n    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\r\n    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\r\n    \t\t\t\r\n    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\r\n    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\r\n    \t\t\temit Burn(_burnedAmount);\r\n                }\r\n                \r\n            else {\r\n                info.users[_to].balance += _transferred;\r\n    \t    \temit Transfer(_from, _to, _transferred);\r\n    \t\t\t_burnedAmount /= 2;\r\n    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\r\n    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\r\n    \t\t\t\r\n    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\r\n    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\r\n    \t\t\t\r\n    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\r\n    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\r\n    \t\t\temit Burn(_burnedAmount);\r\n            }\r\n        }\r\n\r\n        else {\r\n    \t\tif (burnPoolAddress != address(0x0)) {\r\n    \t    \tinfo.users[_to].balance = info.users[_to].balance + _transferred;\r\n    \t    \temit Transfer(_from, _to, _transferred);\r\n    \t\t\t_burnedAmount /= 2;\r\n    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\r\n    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\r\n    \t\t\t\r\n    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\r\n    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\r\n    \t\t\t\r\n    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\r\n    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\r\n    \t\t\temit Burn(_burnedAmount);\r\n    \t\t}\r\n    \t\t\r\n    \t\telse {\r\n    \t\t    _transferred= _tokens;\r\n    \t\t    info.users[_to].balance = info.users[_to].balance + _tokens;\r\n    \t\t    emit Transfer(_from, _to, _tokens);\r\n    \t\t}\r\n        }\r\n\t\t\r\n\t\treturn _transferred;\r\n\t}\r\n\r\n\t modifier onlyAdmin {\r\n        require(isAdmin[msg.sender], \"OnlyAdmin methods called by non-admin.\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allInfoBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurnedSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"berserkSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"berserkSwapBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"berserkSwapOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPoolAmountPrevious\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnAmountPrevious\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceBurnOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetBurnAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_berserkSwapAddress\",\"type\":\"address\"}],\"name\":\"setBerserkSwapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setBerserkSwapBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"setBurnAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnPoolAddress\",\"type\":\"address\"}],\"name\":\"setBurnPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BerserkToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f63616209d8c56fc44da26cb08da7638787596fce1344ca8e469ecc71c75f0d0"}]}