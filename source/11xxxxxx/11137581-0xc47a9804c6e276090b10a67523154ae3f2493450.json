{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface UNISWAPv2 {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n        \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ncontract MultiSendSell {\r\n    \r\n    address payable public  owner;\r\n    address public token_address;\r\n    uint256 public eth_amount;\r\n    uint256 public min_tokens;\r\n    address WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    receive() external payable { }\r\n    \r\n    function conf(address config_token_address, uint256 config_eth_amount, uint256 config_min_tokens) public payable returns (bool) {\r\n        require(msg.sender == owner, 'ERR: ONLY OWNER ALLOWED');\r\n        require(address(this).balance >= config_eth_amount, 'ETH_AMOUNT is higher than balance');\r\n        token_address = config_token_address;\r\n        eth_amount = config_eth_amount;\r\n        min_tokens = config_min_tokens;\r\n        return true;\r\n    }\r\n    \r\n    function tokenApprove(uint256 tokens) public returns (bool) {\r\n        require(msg.sender == owner, 'ERR: ONLY OWNER ALLOWED');\r\n        IERC20 token_contract = IERC20(token_address);\r\n        token_contract.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function sellTokens(uint256 amountOutMin) public returns (bool) {\r\n        require(msg.sender == owner, 'ERR: ONLY OWNER ALLOWED');\r\n        IERC20 token_contract = IERC20(token_address);\r\n        uint256 my_token_balance = token_contract.balanceOf(address(this));\r\n        UNISWAPv2 uniswap_contract = UNISWAPv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address[] memory addresses = new address[](2);\r\n        addresses[0] = token_address;\r\n        addresses[1] = WETHAddress;\r\n        uniswap_contract.swapExactTokensForETH(my_token_balance, amountOutMin, addresses, address(this), now+6000);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawETH() public returns (bool) {\r\n        require(msg.sender == owner, 'ERR: ONLY OWNER ALLOWED');\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    function widthdrawToken(address token_contract_addr) public returns (bool){\r\n        require(msg.sender == owner, 'ERR: ONLY OWNER ALLOWED');\r\n        IERC20 token_contract = IERC20(token_contract_addr);\r\n        uint256 my_token_balance = token_contract.balanceOf(address(this));\r\n        token_contract.transfer(owner, my_token_balance);\r\n        return true;\r\n    }\r\n    \r\n    function runtx() public returns (bool) {\r\n        UNISWAPv2 uniswap_contract = UNISWAPv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        //address[] memory addresses = [WETHAddress, token_address];\r\n        address[] memory addresses = new address[](2);\r\n        addresses[0] = WETHAddress;\r\n        addresses[1] = token_address;\r\n        uniswap_contract.swapExactETHForTokens{value:eth_amount}(min_tokens, addresses, address(this), now+6000);\r\n        return true;\r\n    } \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"config_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"config_eth_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"config_min_tokens\",\"type\":\"uint256\"}],\"name\":\"conf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runtx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_contract_addr\",\"type\":\"address\"}],\"name\":\"widthdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSendSell","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6fedee14adec9b63c430abbffc009b9438852816be642c92d53b084938a3bd7f"}]}