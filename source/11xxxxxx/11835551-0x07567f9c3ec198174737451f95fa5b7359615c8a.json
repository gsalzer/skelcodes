{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n    bool private _isTokenRescuable;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n        _isTokenRescuable = false;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function setRescuable(bool rescuable) public onlyOwner {\r\n        _isTokenRescuable = rescuable;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return token.transfer(to, value);\r\n    }\r\n\r\n    function rescueFunds(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner returns (bool) {\r\n        if (!_isTokenRescuable) {\r\n            require(\r\n                address(token) != tokenToRescue,\r\n                \"TokenPool: Cannot claim token held by the contract\"\r\n            );\r\n        }\r\n\r\n        return IERC20(tokenToRescue).transfer(to, amount);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title IOU vesting interface\r\n */\r\ninterface IIouVesting {\r\n    /**\r\n     * @dev Get current rewards amount for sender\r\n     * @param includeForfeited Include forfeited amount of other users who unstaked early\r\n     */\r\n    function getCurrentRewards(bool includeForfeited)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Get the total possible rewards, without forfeited rewards, if user stakes for the entire period\r\n     * @param includeForfeited Include forfeited amount of other users who unstaked early\r\n     */\r\n    function getTotalPossibleRewards(bool includeForfeited)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Used for burning user shares and withdrawing rewards based on the requested amount\r\n     * @param amount The amount of IOU you want to burn and get rewards for\r\n     * @param donationRatio The percentage ratio you want to donate (in 18 decimals; 0.15 * 10^18)\r\n     */\r\n    function unstake(uint256 amount, uint256 donationRatio) external;\r\n\r\n    /**\r\n     * @dev Used for adding user's shares into IouVesting contract\r\n     * @param amount The amount you want to stake\r\n     */\r\n    function stake(uint256 amount) external;\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    /**\r\n     * @return The total number of IOUs locked in the contract\r\n     */\r\n    function totalLocked() external view returns (uint256);\r\n\r\n    /**\r\n     * @return The total number of IOUs staked by user.\r\n     */\r\n    function totalStakedFor(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @return The total number of rewards tokens.\r\n     */\r\n    function totalRewards() external view returns (uint256);\r\n\r\n    /**\r\n     * @return Total earnings for a user\r\n     */\r\n    function getEarnings(address user) external view returns (uint256);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title IOU vesting contract\r\n */\r\ncontract IouVesting is IIouVesting, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public startTimestamp;\r\n    uint256 public availableForfeitedAmount;\r\n    uint256 public totalUsers = 0;\r\n\r\n    uint256 public constant ratio = 1449697206000000; //0.001449697206\r\n    uint256 public constant totalMonths = 6;\r\n\r\n    address public donationAddress;\r\n\r\n    mapping(address => uint256) userShares;\r\n    mapping(address => uint256) userEarnings;\r\n\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n    event RewardsDonated(address indexed user, uint256 amount);\r\n    event TokensLocked(address indexed user, uint256 amount);\r\n    event TokensStaked(address indexed user, uint256 amount, uint256 total);\r\n\r\n    TokenPool private _iouPool;\r\n    TokenPool private _lockedIouPool;\r\n    TokenPool private _rewardsPool;\r\n\r\n    /**\r\n     * @param iouToken The token users deposit as stake.\r\n     * @param rewardToken The token users receive as they unstake.\r\n     */\r\n    constructor(IERC20 iouToken, IERC20 rewardToken) public {\r\n        startTimestamp = block.timestamp;\r\n        availableForfeitedAmount = 0;\r\n        _iouPool = new TokenPool(iouToken);\r\n        _lockedIouPool = new TokenPool(iouToken);\r\n        _rewardsPool = new TokenPool(rewardToken);\r\n        _rewardsPool.setRescuable(true);\r\n    }\r\n\r\n    function setDonationAddress(address donationReceiver) external onlyOwner {\r\n        donationAddress = donationReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue rewards\r\n     */\r\n    function rescueRewards() external onlyOwner {\r\n        require(_rewardsPool.balance() > 0, \"IouVesting: Nothing to rescue\");\r\n        require(\r\n            _rewardsPool.transfer(msg.sender, _rewardsPool.balance()),\r\n            \"IouVesting: rescue rewards from rewards pool failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get current rewards amount for sender\r\n     * @param includeForfeited Include forfeited amount of other users who unstaked early\r\n     */\r\n    function getCurrentRewards(bool includeForfeited)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            msg.sender != address(0),\r\n            \"IouVesting: Cannot get rewards for address(0).\"\r\n        );\r\n\r\n        require(\r\n            userShares[msg.sender] != uint256(0),\r\n            \"IouVesting: Sender hasn't staked anything.\"\r\n        );\r\n\r\n        return computeRewards(msg.sender, includeForfeited);\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _iouPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getRewardToken() public view returns (IERC20) {\r\n        return _rewardsPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return Total earnings for a user\r\n     */\r\n    function getEarnings(address user) public view override returns (uint256) {\r\n        return userEarnings[user];\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public view override returns (uint256) {\r\n        return _iouPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return The total number of IOUs locked in the contract\r\n     */\r\n    function totalLocked() public view override returns (uint256) {\r\n        return _lockedIouPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return The total number of IOUs staked by user.\r\n     */\r\n    function totalStakedFor(address user)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return userShares[user];\r\n    }\r\n\r\n    /**\r\n     * @return The total number of rewards tokens.\r\n     */\r\n    function totalRewards() public view override returns (uint256) {\r\n        return _rewardsPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\r\n     * @param tokenToRescue Address of the token to be rescued.\r\n     * @param to Address to which the rescued funds are to be sent.\r\n     * @param amount Amount of tokens to be rescued.\r\n     * @return Transfer success.\r\n     */\r\n    function rescueFundsFromStakingPool(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        return _iouPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total possible rewards, without forfeited rewards, if user stakes for the entire period\r\n     * @param includeForfeited Include forfeited amount of other users who unstaked early\r\n     */\r\n    function getTotalPossibleRewards(bool includeForfeited)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return computeUserTotalPossibleRewards(msg.sender, includeForfeited);\r\n    }\r\n\r\n    function getRatio(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 precision\r\n    ) private view returns (uint256) {\r\n        uint256 _numerator = numerator * 10**(precision + 1);\r\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n\r\n    function computeUserTotalPossibleRewards(\r\n        address user,\r\n        bool includeForfeited\r\n    ) private view returns (uint256) {\r\n        uint256 originalAmount = (userShares[user] * ratio) / (10**18);\r\n        if (!includeForfeited) return originalAmount;\r\n\r\n        uint256 shareVsTotalStakedRatio =\r\n            getRatio(userShares[user], totalStaked(), 18);\r\n        uint256 forfeitedAmount =\r\n            (shareVsTotalStakedRatio * availableForfeitedAmount) / (10**18);\r\n\r\n        return originalAmount.add(forfeitedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get current rewards amount for sender\r\n     * @param user The address of the user you want to calculate rewards for\r\n     * @param includeForfeited Include forfeited amount of other users who unstaked early\r\n     */\r\n    function computeRewards(address user, bool includeForfeited)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 nowTimestamp = block.timestamp;\r\n        uint256 endTimestamp = startTimestamp + (totalMonths * 30 days);\r\n        if (nowTimestamp > endTimestamp) {\r\n            nowTimestamp = endTimestamp;\r\n        }\r\n\r\n        uint256 stakingMonths =\r\n            (nowTimestamp - startTimestamp) / 60 / 60 / 24 / 30; //months\r\n        if (stakingMonths == uint256(0)) {\r\n            //even if 1 second has passed, it's counted as 1 month\r\n            stakingMonths = 1;\r\n        }\r\n\r\n        if (includeForfeited) {\r\n            uint256 totalUserPossibleReward =\r\n                computeUserTotalPossibleRewards(user, true);\r\n\r\n            return (totalUserPossibleReward * stakingMonths) / totalMonths;\r\n        } else {\r\n            uint256 totalUserPossibleRewardWithoutForfeited =\r\n                computeUserTotalPossibleRewards(user, false);\r\n            uint256 rewardsWithoutForfeited =\r\n                ((totalUserPossibleRewardWithoutForfeited * stakingMonths) /\r\n                    totalMonths);\r\n\r\n            if (!includeForfeited) return rewardsWithoutForfeited;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used for adding the necessary warp tokens amount based on the IOU's token total supply at the given ratio\r\n     * @param iouToken The address of the IOU token\r\n     * @param amount The amount you want to lock into the rewards pool\r\n     */\r\n    function lockTokens(IERC20 iouToken, uint256 amount) external {\r\n        //11333\r\n        uint256 supply = iouToken.totalSupply();\r\n        uint256 necessaryRewardSupply = (supply * ratio) / (10**18);\r\n\r\n        require(\r\n            amount >= necessaryRewardSupply,\r\n            \"IouVesting: The amount provided for locking is not right\"\r\n        );\r\n\r\n        require(\r\n            _rewardsPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_rewardsPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into locked pool failed\"\r\n        );\r\n\r\n        emit TokensLocked(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Used for burning user shares and withdrawing rewards based on the requested amount\r\n     * @param amount The amount of IOU you want to burn and get rewards for\r\n     * @param donationRatio The percentage ratio you want to donate (in 18 decimals; 0.15 * 10^18)\r\n     */\r\n    function unstake(uint256 amount, uint256 donationRatio) external override {\r\n        require(\r\n            amount > uint256(0),\r\n            \"IouVesting: Unstake amount needs to be greater than 0\"\r\n        );\r\n        require(\r\n            userShares[msg.sender] != uint256(0),\r\n            \"IouVesting: There is nothing to unstake for you\"\r\n        );\r\n\r\n        require(\r\n            userShares[msg.sender] >= amount,\r\n            \"IouVesting: You cannot unstake more than you staked\"\r\n        );\r\n\r\n        require(\r\n            donationRatio <= uint256(100),\r\n            \"IouVesting: You cannot donate more than you earned\"\r\n        );\r\n\r\n        uint256 amountVsSharesRatio =\r\n            getRatio(amount, userShares[msg.sender], 18);\r\n        uint256 totalUserPossibleRewards =\r\n            (computeUserTotalPossibleRewards(msg.sender, false) *\r\n                amountVsSharesRatio) / (10**18);\r\n\r\n        uint256 totalCurrentUserRewards =\r\n            (getCurrentRewards(true) * amountVsSharesRatio) / (10**18);\r\n\r\n        //in case rewards were rescued\r\n        if (totalRewards() > 0) {\r\n            uint256 donationAmount = 0;\r\n            if (donationAddress != address(0) && donationRatio > 0) {\r\n                donationAmount =\r\n                    (donationRatio * totalCurrentUserRewards) /\r\n                    (10**18);\r\n            }\r\n\r\n            uint256 toTransferToUser = totalCurrentUserRewards;\r\n            if (donationAmount > 0) {\r\n                toTransferToUser = totalCurrentUserRewards - donationAmount;\r\n                require(\r\n                    _rewardsPool.transfer(donationAddress, donationAmount),\r\n                    \"IouVesting: transfer from rewards pool to donation receiver failed\"\r\n                );\r\n            }\r\n\r\n            require(\r\n                _rewardsPool.transfer(msg.sender, toTransferToUser),\r\n                \"IouVesting: transfer from rewards pool failed\"\r\n            );\r\n            emit RewardsClaimed(msg.sender, toTransferToUser);\r\n            emit RewardsDonated(msg.sender, donationAmount);\r\n\r\n            userEarnings[msg.sender] += totalCurrentUserRewards;\r\n\r\n            availableForfeitedAmount += (totalUserPossibleRewards -\r\n                totalCurrentUserRewards);\r\n        }\r\n\r\n        require(\r\n            _iouPool.transfer(address(_lockedIouPool), amount),\r\n            \"IouVesting: transfer from iou pool to locked iou pool failed\"\r\n        );\r\n\r\n        userShares[msg.sender] -= amount;\r\n        if (userShares[msg.sender] == uint256(0)) {\r\n            totalUsers--;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used for adding user's shares into IouVesting contract\r\n     * @param amount The amount you want to stake\r\n     */\r\n    function stake(uint256 amount) external override {\r\n        require(amount > 0, \"IouVesting: You cannot stake 0\");\r\n        require(\r\n            _rewardsPool.balance() > 0,\r\n            \"IouVesting: No rewards are available\"\r\n        );\r\n\r\n        require(\r\n            _iouPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_iouPool),\r\n                amount\r\n            ),\r\n            \"IouVesting: transfer into iou pool failed\"\r\n        );\r\n\r\n        if (userShares[msg.sender] == uint256(0)) {\r\n            totalUsers++;\r\n        }\r\n        userShares[msg.sender] += amount;\r\n\r\n        emit TokensStaked(msg.sender, amount, totalStaked());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"iouToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDonated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableForfeitedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"includeForfeited\",\"type\":\"bool\"}],\"name\":\"getCurrentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"includeForfeited\",\"type\":\"bool\"}],\"name\":\"getTotalPossibleRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"iouToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFundsFromStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"donationReceiver\",\"type\":\"address\"}],\"name\":\"setDonationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationRatio\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IouVesting","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002eb4861d1a049f3ad7284204e788446bcc543b9f000000000000000000000000ed40834a13129509a89be39a9be9c0e96a0ddd71","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://10303ea9fd20399390b08bc94a184dc1cf88f1a0482efcc43e8f32e8e5ca8881"}]}