{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        \r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        \r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n\r\n  function grantAdminRole(address) external;\r\n\r\n  function revokeAdminRole(address) external;\r\n\r\n  function grantMinterRole(address) external;\r\n\r\n  function revokeMinterRole(address) external;\r\n\r\n}\r\n\r\ninterface ITerminable {\r\n\r\n  function terminate() external;\r\n\r\n}\r\n\r\nstruct Pool {\r\n  uint8 reputationTotal;\r\n  mapping(address => bool) votes;\r\n}\r\n\r\ncontract FoundingCommitteeVoting is Ownable {\r\n  \r\n\r\n  uint8[7] public REPUTATIONS = [5, 4, 3, 2, 1, 1, 1];\r\n\r\n  address[7] public committee;\r\n  mapping(address => uint8) public indexes;\r\n  mapping(address => uint8) public reputations;\r\n\r\n  uint8 public constant UNANIMOUS_VOTE_REPUTATION = 17;\r\n  uint8 public constant SUPER_MAJORITY_VOTE_REPUTATION = 12;\r\n  uint8 public constant MAJORITY_VOTE_REPUTATION = 9;\r\n\r\n  address public DCARETokenContractAddress = address(0x0);\r\n\r\n  mapping(address => mapping(address => Pool)) public changeCommitteeMemberPools;\r\n  mapping(address => Pool) public setTokenContractAddressPools;\r\n  mapping(address => Pool) public addTokenAdminAddressPools;\r\n  mapping(address => Pool) public revokeTokenAdminAddressPools;\r\n  mapping(address => Pool) public addTokenMinterAddressPools;\r\n  mapping(address => Pool) public revokeTokenMinterAddressPools;\r\n  mapping(address => Pool) public terminateContractPools;\r\n\r\n  event ChangeCommitteeMemberPoolVote(address indexed _oldAddress, address indexed _newAddress, address indexed _voterAddress);\r\n  event CommitteeMemberAddressChanged(address indexed _oldAddress, address indexed _newAddress);\r\n  event TokenContractAddressPoolVote(address indexed _tokenContractAddress, address indexed _voterAddress);\r\n  event TokenContractAddressSetted(address indexed _tokenContractAddress);\r\n  event AddTokenAdminAddressPoolVote(address indexed _tokenAdminAddress, address indexed _voterAddress);\r\n  event TokenAdminAddressSetted(address indexed _tokenAdminAddress);\r\n  event RevokeTokenAdminAddressPoolVote(address indexed _tokenAdminAddress, address indexed _voterAddress);\r\n  event TokenAdminAddressRevoked(address indexed _tokenAdminAddress);\r\n  event AddTokenMinterAddressPoolVote(address indexed _tokenMinterAddress, address indexed _voterAddress);\r\n  event TokenMinterAddressSetted(address indexed _tokenMinterAddress);\r\n  event RevokeTokenMinterAddressPoolVote(address indexed _tokenMinterAddress, address indexed _voterAddress);\r\n  event TokenMinterAddressRevoked(address indexed _tokenMinterAddress);\r\n  event TerminateContractPoolVote(address indexed _contractAddress, address indexed _voterAddress);\r\n  event ContractTerminated(address indexed _contractAddress);\r\n\r\n  constructor() {\r\n    committee[0] = address(0x9C00434ac0AeE12C97Ea02e85ffaa9aB60197af7);\r\n    committee[1] = address(0xB8C9B2C823e4BAe85FFcb0Ef5A3b0472b1A20179);\r\n    committee[2] = address(0xFb9c83B7cD0F0f3D38bF2aAb98061AB46d1ee7Be);\r\n    committee[3] = address(0xdCCE1E1F8c4f00ECf5F076D8bC0f07D66ef17C14);\r\n    committee[4] = address(0x9b4B2FeA56eEaf67Af6914f7E34Bad7DD97B7C20);\r\n    committee[5] = address(0x1280497886EDF09b9fe8f8b5a666405811007058);\r\n    committee[6] = address(0x76D56bcEaa780cBBDC0fCc298d5520AC43b1378f);\r\n\r\n    for (uint8 i = 0; i < committee.length; i++) {\r\n      indexes[committee[i]] = i;\r\n      reputations[committee[i]] = REPUTATIONS[i];\r\n    }\r\n  }\r\n\r\n  modifier onlyCommitteeMember() {\r\n    require(reputations[msg.sender] > 0, \"Caller is not a committee member\");\r\n    _;\r\n  }\r\n\r\n  function changeCommitteeMemberAddress(address _oldAddress, address _newAddress) public onlyCommitteeMember {\r\n    require(_newAddress != address(0x0), \"Invalid address provided\");\r\n    require(_newAddress != _oldAddress, \"New address is the same as old address\");\r\n    require(reputations[_oldAddress] > 0, \"No committee member with such address\");\r\n    require(reputations[_newAddress] == 0, \"Committee member with such address already exists\");\r\n    require(msg.sender != _oldAddress, \"You can't vote for yourself\");\r\n    require(!changeCommitteeMemberPools[_oldAddress][_newAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    changeCommitteeMemberPools[_oldAddress][_newAddress].votes[msg.sender] = true;\r\n    changeCommitteeMemberPools[_oldAddress][_newAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit ChangeCommitteeMemberPoolVote(_oldAddress, _newAddress, msg.sender);\r\n\r\n    if (changeCommitteeMemberPools[_oldAddress][_newAddress].reputationTotal >= SUPER_MAJORITY_VOTE_REPUTATION) {\r\n      \r\n      uint8 idx = indexes[_oldAddress];\r\n\r\n      indexes[_oldAddress] = 0;\r\n      indexes[_newAddress] = idx;\r\n      committee[idx] = _newAddress;\r\n\r\n      reputations[_oldAddress] = 0;\r\n      reputations[_newAddress] = REPUTATIONS[idx];\r\n\r\n      \r\n      changeCommitteeMemberPools[_oldAddress][_newAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        changeCommitteeMemberPools[_oldAddress][_newAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit CommitteeMemberAddressChanged(_oldAddress, _newAddress);\r\n    }\r\n  }\r\n\r\n  function setTokenContractAddress(address _tokenContractAddress) public onlyCommitteeMember {\r\n    require(_tokenContractAddress != address(0x0), \"Invalid contract address\");\r\n    require(DCARETokenContractAddress == address(0x0), \"DCARE token contract address is already setted\");\r\n    require(Address.isContract(_tokenContractAddress), \"Provided address is not a contract address\");\r\n    require(!setTokenContractAddressPools[_tokenContractAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    setTokenContractAddressPools[_tokenContractAddress].votes[msg.sender] = true;\r\n    setTokenContractAddressPools[_tokenContractAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit TokenContractAddressPoolVote(_tokenContractAddress, msg.sender);\r\n\r\n    if (setTokenContractAddressPools[_tokenContractAddress].reputationTotal >= SUPER_MAJORITY_VOTE_REPUTATION) {\r\n      \r\n      DCARETokenContractAddress = _tokenContractAddress;\r\n\r\n      \r\n      \r\n\r\n      emit TokenContractAddressSetted(_tokenContractAddress);\r\n    }\r\n  }\r\n\r\n  function addTokenAdminAddress(address _tokenAdminAddress) public onlyCommitteeMember {\r\n    require(DCARETokenContractAddress != address(0x0), \"DCARE token contract address wasn't set\");\r\n    require(_tokenAdminAddress != address(0x0), \"Invalid contract address\");\r\n    require(Address.isContract(_tokenAdminAddress), \"Provided address is not a contract address\");\r\n    require(!addTokenAdminAddressPools[_tokenAdminAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    addTokenAdminAddressPools[_tokenAdminAddress].votes[msg.sender] = true;\r\n    addTokenAdminAddressPools[_tokenAdminAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit AddTokenAdminAddressPoolVote(_tokenAdminAddress, msg.sender);\r\n\r\n    if (addTokenAdminAddressPools[_tokenAdminAddress].reputationTotal >= UNANIMOUS_VOTE_REPUTATION) {\r\n      \r\n      IToken DCARETokenContract = IToken(DCARETokenContractAddress);\r\n      DCARETokenContract.grantAdminRole(_tokenAdminAddress);\r\n\r\n      \r\n      addTokenAdminAddressPools[_tokenAdminAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        addTokenAdminAddressPools[_tokenAdminAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit TokenAdminAddressSetted(_tokenAdminAddress);\r\n    }\r\n  }\r\n\r\n  function revokeTokenAdminAddress(address _tokenAdminAddress) public onlyCommitteeMember {\r\n    require(DCARETokenContractAddress != address(0x0), \"DCARE token contract address wasn't set\");\r\n    require(_tokenAdminAddress != address(0x0), \"Invalid contract address\");\r\n    require(!revokeTokenAdminAddressPools[_tokenAdminAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    revokeTokenAdminAddressPools[_tokenAdminAddress].votes[msg.sender] = true;\r\n    revokeTokenAdminAddressPools[_tokenAdminAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit RevokeTokenAdminAddressPoolVote(_tokenAdminAddress, msg.sender);\r\n\r\n    if (revokeTokenAdminAddressPools[_tokenAdminAddress].reputationTotal >= UNANIMOUS_VOTE_REPUTATION) {\r\n      \r\n      IToken DCARETokenContract = IToken(DCARETokenContractAddress);\r\n      DCARETokenContract.revokeAdminRole(_tokenAdminAddress);\r\n\r\n      \r\n      revokeTokenAdminAddressPools[_tokenAdminAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        revokeTokenAdminAddressPools[_tokenAdminAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit TokenAdminAddressRevoked(_tokenAdminAddress);\r\n    }\r\n  }\r\n\r\n  function addTokenMinterAddress(address _tokenMinterAddress) public onlyCommitteeMember {\r\n    require(DCARETokenContractAddress != address(0x0), \"DCARE token contract address wasn't set\");\r\n    require(_tokenMinterAddress != address(0x0), \"Invalid contract address\");\r\n    require(Address.isContract(_tokenMinterAddress), \"Provided address is not a contract address\");\r\n    require(!addTokenMinterAddressPools[_tokenMinterAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    addTokenMinterAddressPools[_tokenMinterAddress].votes[msg.sender] = true;\r\n    addTokenMinterAddressPools[_tokenMinterAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit AddTokenMinterAddressPoolVote(_tokenMinterAddress, msg.sender);\r\n\r\n    if (addTokenMinterAddressPools[_tokenMinterAddress].reputationTotal >= SUPER_MAJORITY_VOTE_REPUTATION) {\r\n      \r\n      IToken DCARETokenContract = IToken(DCARETokenContractAddress);\r\n      DCARETokenContract.grantMinterRole(_tokenMinterAddress);\r\n\r\n      \r\n      addTokenMinterAddressPools[_tokenMinterAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        addTokenMinterAddressPools[_tokenMinterAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit TokenMinterAddressSetted(_tokenMinterAddress);\r\n    }\r\n  }\r\n\r\n  function revokeTokenMinterAddress(address _tokenMinterAddress) public onlyCommitteeMember {\r\n    require(DCARETokenContractAddress != address(0x0), \"DCARE token contract address wasn't set\");\r\n    require(_tokenMinterAddress != address(0x0), \"Invalid contract address\");\r\n    require(!revokeTokenMinterAddressPools[_tokenMinterAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    revokeTokenMinterAddressPools[_tokenMinterAddress].votes[msg.sender] = true;\r\n    revokeTokenMinterAddressPools[_tokenMinterAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit RevokeTokenMinterAddressPoolVote(_tokenMinterAddress, msg.sender);\r\n\r\n    if (revokeTokenMinterAddressPools[_tokenMinterAddress].reputationTotal >= SUPER_MAJORITY_VOTE_REPUTATION) {\r\n      \r\n      IToken DCARETokenContract = IToken(DCARETokenContractAddress);\r\n      DCARETokenContract.revokeMinterRole(_tokenMinterAddress);\r\n\r\n      \r\n      revokeTokenMinterAddressPools[_tokenMinterAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        revokeTokenMinterAddressPools[_tokenMinterAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit TokenMinterAddressRevoked(_tokenMinterAddress);\r\n    }\r\n  }\r\n\r\n  function terminateContract(address _contractAddress) public onlyCommitteeMember {\r\n    require(_contractAddress != address(0x0), \"Invalid contract address\");\r\n    require(Address.isContract(_contractAddress), \"Provided address is not a contract address\");\r\n    require(!terminateContractPools[_contractAddress].votes[msg.sender], \"You have already voted in this pool\");\r\n\r\n    terminateContractPools[_contractAddress].votes[msg.sender] = true;\r\n    terminateContractPools[_contractAddress].reputationTotal+= reputations[msg.sender];\r\n\r\n    emit TerminateContractPoolVote(_contractAddress, msg.sender);\r\n\r\n    if (terminateContractPools[_contractAddress].reputationTotal >= SUPER_MAJORITY_VOTE_REPUTATION) {\r\n      \r\n      ITerminable terminableContract = ITerminable(_contractAddress);\r\n      terminableContract.terminate();\r\n\r\n      \r\n      terminateContractPools[_contractAddress].reputationTotal = 0;\r\n      for (uint8 i = 0; i < committee.length; i++) {\r\n        terminateContractPools[_contractAddress].votes[committee[i]] = false;\r\n      }\r\n\r\n      emit ContractTerminated(_contractAddress);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"AddTokenAdminAddressPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"AddTokenMinterAddressPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"ChangeCommitteeMemberPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"CommitteeMemberAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"ContractTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"RevokeTokenAdminAddressPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"RevokeTokenMinterAddressPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"TerminateContractPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"}],\"name\":\"TokenAdminAddressRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"}],\"name\":\"TokenAdminAddressSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"TokenContractAddressPoolVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"TokenContractAddressSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"}],\"name\":\"TokenMinterAddressRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"}],\"name\":\"TokenMinterAddressSetted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DCARETokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAJORITY_VOTE_REPUTATION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REPUTATIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_MAJORITY_VOTE_REPUTATION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNANIMOUS_VOTE_REPUTATION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"}],\"name\":\"addTokenAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addTokenAdminAddressPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"}],\"name\":\"addTokenMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addTokenMinterAddressPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeCommitteeMemberAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeCommitteeMemberPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAdminAddress\",\"type\":\"address\"}],\"name\":\"revokeTokenAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeTokenAdminAddressPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenMinterAddress\",\"type\":\"address\"}],\"name\":\"revokeTokenMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeTokenMinterAddressPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setTokenContractAddressPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"terminateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"terminateContractPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reputationTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FoundingCommitteeVoting","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe85699321971f06b2e26aa572cef7e4a644bdc3ff56823195f35e310025907a"}]}