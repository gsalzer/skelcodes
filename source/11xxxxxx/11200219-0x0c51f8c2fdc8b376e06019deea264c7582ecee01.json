{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n██╗     ███████╗██╗  ██╗                    \r\n██║     ██╔════╝╚██╗██╔╝                    \r\n██║     █████╗   ╚███╔╝                     \r\n██║     ██╔══╝   ██╔██╗                     \r\n███████╗███████╗██╔╝ ██╗                    \r\n╚══════╝╚══════╝╚═╝  ╚═╝                    \r\n████████╗ ██████╗ ██╗  ██╗███████╗███╗   ██╗\r\n╚══██╔══╝██╔═══██╗██║ ██╔╝██╔════╝████╗  ██║\r\n   ██║   ██║   ██║█████╔╝ █████╗  ██╔██╗ ██║\r\n   ██║   ██║   ██║██╔═██╗ ██╔══╝  ██║╚██╗██║\r\n   ██║   ╚██████╔╝██║  ██╗███████╗██║ ╚████║\r\n   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝\r\nDEAR MSG.SENDER(S):\r\n/ LexToken is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// Entry into LexToken shall not create an attorney/client relationship.\r\n//// Likewise, LexToken should not be construed as legal advice or replacement for professional counsel.\r\n///// STEAL THIS C0D3SL4W \r\n////// presented by LexDAO LLC\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.4;\r\n\r\ninterface IERC20 { // brief interface for erc20 token\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath { // arithmetic wrapper for unit under/overflow check\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract LexToken {\r\n    using SafeMath for uint256;\r\n    \r\n    address payable public manager; // account managing token rules & sale - see 'Manager Functions' - updateable by manager\r\n    uint8   public decimals; // fixed unit scaling factor - default 18 to match ETH\r\n    uint256 public saleRate; // rate of token purchase when sending ETH to contract - e.g., 10 saleRate returns 10 token per 1 ETH - updateable by manager\r\n    uint256 public totalSupply; // tracks outstanding token mint - mint updateable by manager\r\n    uint256 public totalSupplyCap; // maximum of token mintable\r\n    bytes32 public DOMAIN_SEPARATOR; // eip-2612 permit() pattern - hash identifies contract\r\n    bytes32 constant public PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"); // eip-2612 permit() pattern - hash identifies function for signature\r\n    string  public details; // details token offering, redemption, etc. - updateable by manager\r\n    string  public name; // fixed token name\r\n    string  public symbol; // fixed token symbol\r\n    bool    public forSale; // status of token sale - e.g., if `false`, ETH sent to token address will not return token per saleRate - updateable by manager\r\n    bool    private initialized; // internally tracks token deployment under eip-1167 proxy pattern\r\n    bool    public transferable; // transferability of token - does not affect token sale - updateable by manager\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Redeem(string details);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event UpdateGovernance(address indexed manager, string details);\r\n    event UpdateSale(uint256 saleRate, uint256 saleSupply, bool burnToken, bool forSale);\r\n    event UpdateTransferability(bool transferable);\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public nonces;\r\n    \r\n    modifier onlyManager {\r\n        require(msg.sender == manager, \"!manager\");\r\n        _;\r\n    }\r\n    \r\n    function init(\r\n        address payable _manager,\r\n        uint8 _decimals, \r\n        uint256 _managerSupply, \r\n        uint256 _saleRate, \r\n        uint256 _saleSupply, \r\n        uint256 _totalSupplyCap,\r\n        string calldata _details, \r\n        string calldata _name, \r\n        string calldata _symbol,  \r\n        bool _forSale, \r\n        bool _transferable\r\n    ) external {\r\n        require(!initialized, \"initialized\"); \r\n        manager = _manager; \r\n        decimals = _decimals; \r\n        saleRate = _saleRate; \r\n        totalSupplyCap = _totalSupplyCap; \r\n        details = _details; \r\n        name = _name; \r\n        symbol = _symbol;  \r\n        forSale = _forSale; \r\n        initialized = true; \r\n        transferable = _transferable; \r\n        if (_managerSupply > 0) {_mint(_manager, _managerSupply);}\r\n        if (_saleSupply > 0) {_mint(address(this), _saleSupply);}\r\n        // eip-2612 permit() pattern:\r\n        uint256 chainId;\r\n        assembly {chainId := chainid()}\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(\"1\")),\r\n            chainId,\r\n            address(this)));\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        allowances[owner][spender] = value; \r\n        emit Approval(owner, spender, value); \r\n    }\r\n    \r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value); \r\n        totalSupply = totalSupply.sub(value); \r\n        emit Transfer(from, address(0), value);\r\n    }\r\n    \r\n    function burn(uint256 value) external {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    function burnFrom(address from, uint256 value) external {\r\n        _approve(from, msg.sender, allowances[from][msg.sender].sub(value));\r\n        _burn(from, value);\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    // Adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= deadline, \"expired\");\r\n        bytes32 hashStruct = keccak256(abi.encode(\r\n                PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                value,\r\n                nonces[owner]++,\r\n                deadline));\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                hashStruct));\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"!signer\");\r\n        _approve(owner, spender, value);\r\n    }\r\n    \r\n    receive() external payable { // SALE \r\n        require(forSale, \"!forSale\");\r\n        (bool success, ) = manager.call{value: msg.value}(\"\");\r\n        require(success, \"!ethCall\");\r\n        _transfer(address(this), msg.sender, msg.value.mul(saleRate));\r\n    } \r\n    \r\n    function redeem(uint256 value, string calldata _details) external {\r\n        _burn(msg.sender, value);\r\n        emit Redeem(_details);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value); \r\n        balanceOf[to] = balanceOf[to].add(value); \r\n        emit Transfer(from, to, value); \r\n    }\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        require(transferable, \"!transferable\"); \r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferBatch(address[] calldata to, uint256[] calldata value) external {\r\n        require(to.length == value.length, \"!to/value\");\r\n        require(transferable, \"!transferable\");\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(msg.sender, to[i], value[i]);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        _approve(from, msg.sender, allowances[from][msg.sender].sub(value));\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    /****************\r\n    MANAGER FUNCTIONS\r\n    ****************/\r\n    function _mint(address to, uint256 value) internal {\r\n        require(totalSupply.add(value) <= totalSupplyCap, \"capped\"); \r\n        balanceOf[to] = balanceOf[to].add(value); \r\n        totalSupply = totalSupply.add(value); \r\n        emit Transfer(address(0), to, value); \r\n    }\r\n    \r\n    function mint(address to, uint256 value) external onlyManager {\r\n        _mint(to, value);\r\n    }\r\n    \r\n    function mintBatch(address[] calldata to, uint256[] calldata value) external onlyManager {\r\n        require(to.length == value.length, \"!to/value\");\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _mint(to[i], value[i]); \r\n        }\r\n    }\r\n    \r\n    function updateGovernance(address payable _manager, string calldata _details) external onlyManager {\r\n        manager = _manager;\r\n        details = _details;\r\n        emit UpdateGovernance(_manager, _details);\r\n    }\r\n\r\n    function updateSale(uint256 _saleRate, uint256 _saleSupply, bool _burnToken, bool _forSale) external onlyManager {\r\n        saleRate = _saleRate;\r\n        forSale = _forSale;\r\n        if (_saleSupply > 0 && _burnToken) {_burn(address(this), _saleSupply);}\r\n        if (_saleSupply > 0 && !_burnToken) {_mint(address(this), _saleSupply);}\r\n        emit UpdateSale(_saleRate, _saleSupply, _burnToken, _forSale);\r\n    }\r\n    \r\n    function updateTransferability(bool _transferable) external onlyManager {\r\n        transferable = _transferable;\r\n        emit UpdateTransferability(_transferable);\r\n    }\r\n    \r\n    function withdrawToken(address[] calldata token, address[] calldata withdrawTo, uint256[] calldata value, bool max) external onlyManager { // withdraw token sent to lextoken contract\r\n        require(token.length == withdrawTo.length && token.length == value.length, \"!token/withdrawTo/value\");\r\n        for (uint256 i = 0; i < token.length; i++) {\r\n            uint256 withdrawalValue = value[i];\r\n            if (max) {withdrawalValue = IERC20(token[i]).balanceOf(address(this));}\r\n            IERC20(token[i]).transfer(withdrawTo[i], withdrawalValue);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"UpdateGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burnToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"forSale\",\"type\":\"bool\"}],\"name\":\"UpdateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"UpdateTransferability\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_managerSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_forSale\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_forSale\",\"type\":\"bool\"}],\"name\":\"updateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"updateTransferability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"withdrawTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"max\",\"type\":\"bool\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LexToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://40a078146e2a166733930b681ec16cb16f3776737eff9c41054a30c33f5e7128"}]}