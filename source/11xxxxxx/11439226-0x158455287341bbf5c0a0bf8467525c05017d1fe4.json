{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-12\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function unlockedSupply() external view returns (uint256);\r\n    function totalLock() external view returns (uint256);\r\n    function lockOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IPair {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function getReserves() external view returns (uint112, uint112, uint32);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\r\n    function pendingbao(uint256 nr, address who) external view returns (uint256);\r\n}\r\n\r\ncontract BaoVotes {\r\n  using SafeMath for uint256;\r\n  \r\n  function name() public pure returns(string memory) { return \"BaoVotes\"; }\r\n  function symbol() public pure returns(string memory) { return \"BaoVotes\"; }\r\n  function decimals() public pure returns(uint8) { return 18; }  \r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    IPair pair = IPair(0x9973bb0fE5F8DF5dE730776dF09E946c74254fb3);\r\n    IERC20 bao = IERC20(0x374CB8C27130E2c9E04F44303f3c8351B9De61C1);\r\n    (uint256 lp_totalbao, , ) = pair.getReserves();\r\n    (uint256 unlockedTotal) = bao.unlockedSupply();\r\n    (uint256 lockedTotal) = bao.totalLock();\r\n\r\n    return lp_totalbao.mul(2).add(unlockedTotal.div(4)).add(lockedTotal.div(5));\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    IMasterChef chef = IMasterChef(0xBD530a1c060DC600b951f16dc656E4EA451d1A2D);\r\n    IERC20 bao = IERC20(0x374CB8C27130E2c9E04F44303f3c8351B9De61C1);\r\n    \r\n    (uint256 lp_totalbao, ) = chef.userInfo(0, owner);\r\n    uint256 locked_balance = bao.lockOf(owner);\r\n    uint256 bao_balance = bao.balanceOf(owner).mul(25).div(100);\r\n\r\n    // Add locked balance\r\n    uint256 lp_balance = lp_totalbao.mul(2);\r\n    lp_balance = lp_balance.add(locked_balance.mul(20).div(100));\r\n    \r\n    // Add user bao balance\r\n    uint256 lp_powah = lp_balance.add(bao_balance);\r\n\r\n    \r\n    return lp_powah;\r\n  }\r\n\r\n  function allowance(address, address) public pure returns (uint256) { return 0; }\r\n  function transfer(address, uint256) public pure returns (bool) { return false; }\r\n  function approve(address, uint256) public pure returns (bool) { return false; }\r\n  function transferFrom(address, address, uint256) public pure returns (bool) { return false; }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BaoVotes","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc8e9ecc0f647aca27176d9f08cd18c4e3dbeeb476ae0d34c918b1a4f1414cfc"}]}