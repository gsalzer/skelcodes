{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title Curve StableSwap Proxy\r\n@author Curve Finance\r\n@license MIT\r\n\"\"\"\r\n\r\ninterface Burner:\r\n    def burn(_coin: address) -> bool: payable\r\n\r\ninterface Curve:\r\n    def withdraw_admin_fees(): nonpayable\r\n    def kill_me(): nonpayable\r\n    def unkill_me(): nonpayable\r\n    def commit_transfer_ownership(new_owner: address): nonpayable\r\n    def apply_transfer_ownership(): nonpayable\r\n    def accept_transfer_ownership(): nonpayable\r\n    def revert_transfer_ownership(): nonpayable\r\n    def commit_new_parameters(amplification: uint256, new_fee: uint256, new_admin_fee: uint256): nonpayable\r\n    def apply_new_parameters(): nonpayable\r\n    def revert_new_parameters(): nonpayable\r\n    def commit_new_fee(new_fee: uint256, new_admin_fee: uint256): nonpayable\r\n    def apply_new_fee(): nonpayable\r\n    def ramp_A(_future_A: uint256, _future_time: uint256): nonpayable\r\n    def stop_ramp_A(): nonpayable\r\n    def set_aave_referral(referral_code: uint256): nonpayable\r\n    def donate_admin_fees(): nonpayable\r\n\r\ninterface AddressProvider:\r\n    def get_registry() -> address: view\r\n\r\ninterface Registry:\r\n    def get_decimals(_pool: address) -> uint256[8]: view\r\n    def get_underlying_balances(_pool: address) -> uint256[8]: view\r\n\r\n\r\nMAX_COINS: constant(int128) = 8\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\n\r\nstruct PoolInfo:\r\n    balances: uint256[MAX_COINS]\r\n    underlying_balances: uint256[MAX_COINS]\r\n    decimals: uint256[MAX_COINS]\r\n    underlying_decimals: uint256[MAX_COINS]\r\n    lp_token: address\r\n    A: uint256\r\n    fee: uint256\r\n\r\nevent CommitAdmins:\r\n    ownership_admin: address\r\n    parameter_admin: address\r\n    emergency_admin: address\r\n\r\nevent ApplyAdmins:\r\n    ownership_admin: address\r\n    parameter_admin: address\r\n    emergency_admin: address\r\n\r\nevent AddBurner:\r\n    burner: address\r\n\r\n\r\nownership_admin: public(address)\r\nparameter_admin: public(address)\r\nemergency_admin: public(address)\r\n\r\nfuture_ownership_admin: public(address)\r\nfuture_parameter_admin: public(address)\r\nfuture_emergency_admin: public(address)\r\n\r\nmin_asymmetries: public(HashMap[address, uint256])\r\n\r\nburners: public(HashMap[address, address])\r\nburner_kill: public(bool)\r\n\r\n# pool -> caller -> can call `donate_admin_fees`\r\ndonate_approval: public(HashMap[address, HashMap[address, bool]])\r\n\r\n@external\r\ndef __init__(\r\n    _ownership_admin: address,\r\n    _parameter_admin: address,\r\n    _emergency_admin: address\r\n):\r\n    self.ownership_admin = _ownership_admin\r\n    self.parameter_admin = _parameter_admin\r\n    self.emergency_admin = _emergency_admin\r\n\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    # required to receive ETH fees\r\n    pass\r\n\r\n\r\n@external\r\ndef commit_set_admins(_o_admin: address, _p_admin: address, _e_admin: address):\r\n    \"\"\"\r\n    @notice Set ownership admin to `_o_admin`, parameter admin to `_p_admin` and emergency admin to `_e_admin`\r\n    @param _o_admin Ownership admin\r\n    @param _p_admin Parameter admin\r\n    @param _e_admin Emergency admin\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    self.future_ownership_admin = _o_admin\r\n    self.future_parameter_admin = _p_admin\r\n    self.future_emergency_admin = _e_admin\r\n\r\n    log CommitAdmins(_o_admin, _p_admin, _e_admin)\r\n\r\n\r\n@external\r\ndef apply_set_admins():\r\n    \"\"\"\r\n    @notice Apply the effects of `commit_set_admins`\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    _o_admin: address = self.future_ownership_admin\r\n    _p_admin: address = self.future_parameter_admin\r\n    _e_admin: address = self.future_emergency_admin\r\n    self.ownership_admin = _o_admin\r\n    self.parameter_admin = _p_admin\r\n    self.emergency_admin = _e_admin\r\n\r\n    log ApplyAdmins(_o_admin, _p_admin, _e_admin)\r\n\r\n\r\n@internal\r\ndef _set_burner(_coin: address, _burner: address):\r\n    old_burner: address = self.burners[_coin]\r\n    if _coin != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE:\r\n        if old_burner != ZERO_ADDRESS:\r\n            # revoke approval on previous burner\r\n            response: Bytes[32] = raw_call(\r\n                _coin,\r\n                concat(\r\n                    method_id(\"approve(address,uint256)\"),\r\n                    convert(old_burner, bytes32),\r\n                    convert(0, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n\r\n        if _burner != ZERO_ADDRESS:\r\n            # infinite approval for current burner\r\n            response: Bytes[32] = raw_call(\r\n                _coin,\r\n                concat(\r\n                    method_id(\"approve(address,uint256)\"),\r\n                    convert(_burner, bytes32),\r\n                    convert(MAX_UINT256, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n\r\n    self.burners[_coin] = _burner\r\n\r\n    log AddBurner(_burner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_burner(_coin: address, _burner: address):\r\n    \"\"\"\r\n    @notice Set burner of `_coin` to `_burner` address\r\n    @param _coin Token address\r\n    @param _burner Burner contract address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    self._set_burner(_coin, _burner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_many_burners(_coins: address[20], _burners: address[20]):\r\n    \"\"\"\r\n    @notice Set burner of `_coin` to `_burner` address\r\n    @param _coins Token address\r\n    @param _burners Burner contract address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    for i in range(20):\r\n        coin: address = _coins[i]\r\n        if coin == ZERO_ADDRESS:\r\n            break\r\n        self._set_burner(coin, _burners[i])\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw_admin_fees(_pool: address):\r\n    \"\"\"\r\n    @notice Withdraw admin fees from `_pool`\r\n    @param _pool Pool address to withdraw admin fees from\r\n    \"\"\"\r\n    Curve(_pool).withdraw_admin_fees()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw_many(_pools: address[20]):\r\n    \"\"\"\r\n    @notice Withdraw admin fees from multiple pools\r\n    @param _pools List of pool address to withdraw admin fees from\r\n    \"\"\"\r\n    for pool in _pools:\r\n        if pool == ZERO_ADDRESS:\r\n            break\r\n        Curve(pool).withdraw_admin_fees()\r\n\r\n\r\n@external\r\n@nonreentrant('burn')\r\ndef burn(_coin: address):\r\n    \"\"\"\r\n    @notice Burn accrued `_coin` via a preset burner\r\n    @dev Only callable by an EOA to prevent flashloan exploits\r\n    @param _coin Coin address\r\n    \"\"\"\r\n    assert tx.origin == msg.sender\r\n    assert not self.burner_kill\r\n\r\n    _value: uint256 = 0\r\n    if _coin == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE:\r\n        _value = self.balance\r\n\r\n    Burner(self.burners[_coin]).burn(_coin, value=_value)  # dev: should implement burn()\r\n\r\n\r\n@external\r\n@nonreentrant('burn')\r\ndef burn_many(_coins: address[20]):\r\n    \"\"\"\r\n    @notice Burn accrued admin fees from multiple coins\r\n    @dev Only callable by an EOA to prevent flashloan exploits\r\n    @param _coins List of coin addresses\r\n    \"\"\"\r\n    assert tx.origin == msg.sender\r\n    assert not self.burner_kill\r\n\r\n    for coin in _coins:\r\n        if coin == ZERO_ADDRESS:\r\n            break\r\n\r\n        _value: uint256 = 0\r\n        if coin == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE:\r\n            _value = self.balance\r\n\r\n        Burner(self.burners[coin]).burn(coin, value=_value)  # dev: should implement burn()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef kill_me(_pool: address):\r\n    \"\"\"\r\n    @notice Pause the pool `_pool` - only remove_liquidity will be callable\r\n    @param _pool Pool address to pause\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_admin, \"Access denied\"\r\n    Curve(_pool).kill_me()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef unkill_me(_pool: address):\r\n    \"\"\"\r\n    @notice Unpause the pool `_pool`, re-enabling all functionality\r\n    @param _pool Pool address to unpause\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_admin or msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).unkill_me()\r\n\r\n\r\n@external\r\ndef set_burner_kill(_is_killed: bool):\r\n    \"\"\"\r\n    @notice Kill or unkill `burn` functionality\r\n    @param _is_killed Burner kill status\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_admin or msg.sender == self.ownership_admin, \"Access denied\"\r\n    self.burner_kill = _is_killed\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_transfer_ownership(_pool: address, new_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership for `_pool` pool to `new_owner` address\r\n    @param _pool Pool which ownership is to be transferred\r\n    @param new_owner New pool owner address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).commit_transfer_ownership(new_owner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_transfer_ownership(_pool: address):\r\n    \"\"\"\r\n    @notice Apply transferring ownership of `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).apply_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef accept_transfer_ownership(_pool: address):\r\n    \"\"\"\r\n    @notice Apply transferring ownership of `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).accept_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef revert_transfer_ownership(_pool: address):\r\n    \"\"\"\r\n    @notice Revert commited transferring ownership for `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).revert_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_new_parameters(_pool: address,\r\n                          amplification: uint256,\r\n                          new_fee: uint256,\r\n                          new_admin_fee: uint256,\r\n                          min_asymmetry: uint256):\r\n    \"\"\"\r\n    @notice Commit new parameters for `_pool`, A: `amplification`, fee: `new_fee` and admin fee: `new_admin_fee`\r\n    @param _pool Pool address\r\n    @param amplification Amplification coefficient\r\n    @param new_fee New fee\r\n    @param new_admin_fee New admin fee\r\n    @param min_asymmetry Minimal asymmetry factor allowed.\r\n            Asymmetry factor is:\r\n            Prod(balances) / (Sum(balances) / N) ** N\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    self.min_asymmetries[_pool] = min_asymmetry\r\n    Curve(_pool).commit_new_parameters(amplification, new_fee, new_admin_fee)  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_new_parameters(_pool: address):\r\n    \"\"\"\r\n    @notice Apply new parameters for `_pool` pool\r\n    @dev Only callable by an EOA\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == tx.origin\r\n\r\n    min_asymmetry: uint256 = self.min_asymmetries[_pool]\r\n\r\n    if min_asymmetry > 0:\r\n        registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\r\n        underlying_balances: uint256[8] = Registry(registry).get_underlying_balances(_pool)\r\n        decimals: uint256[8] = Registry(registry).get_decimals(_pool)\r\n\r\n        balances: uint256[MAX_COINS] = empty(uint256[MAX_COINS])\r\n        # asymmetry = prod(x_i) / (sum(x_i) / N) ** N =\r\n        # = prod( (N * x_i) / sum(x_j) )\r\n        S: uint256 = 0\r\n        N: uint256 = 0\r\n        for i in range(MAX_COINS):\r\n            x: uint256 = underlying_balances[i]\r\n            if x == 0:\r\n                N = i\r\n                break\r\n            x *= 10 ** (18 - decimals[i])\r\n            balances[i] = x\r\n            S += x\r\n\r\n        asymmetry: uint256 = N * 10 ** 18\r\n        for i in range(MAX_COINS):\r\n            x: uint256 = balances[i]\r\n            if x == 0:\r\n                break\r\n            asymmetry = asymmetry * x / S\r\n\r\n        assert asymmetry >= min_asymmetry, \"Unsafe to apply\"\r\n\r\n    Curve(_pool).apply_new_parameters()  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef revert_new_parameters(_pool: address):\r\n    \"\"\"\r\n    @notice Revert comitted new parameters for `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).revert_new_parameters()  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_new_fee(_pool: address, new_fee: uint256, new_admin_fee: uint256):\r\n    \"\"\"\r\n    @notice Commit new fees for `_pool` pool, fee: `new_fee` and admin fee: `new_admin_fee`\r\n    @param _pool Pool address\r\n    @param new_fee New fee\r\n    @param new_admin_fee New admin fee\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).commit_new_fee(new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_new_fee(_pool: address):\r\n    \"\"\"\r\n    @notice Apply new fees for `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).apply_new_fee()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef ramp_A(_pool: address, _future_A: uint256, _future_time: uint256):\r\n    \"\"\"\r\n    @notice Start gradually increasing A of `_pool` reaching `_future_A` at `_future_time` time\r\n    @param _pool Pool address\r\n    @param _future_A Future A\r\n    @param _future_time Future time\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).ramp_A(_future_A, _future_time)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef stop_ramp_A(_pool: address):\r\n    \"\"\"\r\n    @notice Stop gradually increasing A of `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).stop_ramp_A()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_aave_referral(_pool: address, referral_code: uint256):\r\n    \"\"\"\r\n    @notice Set Aave referral for undelying tokens of `_pool` to `referral_code`\r\n    @param _pool Pool address\r\n    @param referral_code Aave referral code\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).set_aave_referral(referral_code)  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\ndef set_donate_approval(_pool: address, _caller: address, _is_approved: bool):\r\n    \"\"\"\r\n    @notice Set approval of `_caller` to donate admin fees for `_pool`\r\n    @param _pool Pool address\r\n    @param _caller Adddress to set approval for\r\n    @param _is_approved Approval status\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    self.donate_approval[_pool][_caller] = _is_approved\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef donate_admin_fees(_pool: address):\r\n    \"\"\"\r\n    @notice Donate admin fees of `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    if msg.sender != self.ownership_admin:\r\n        assert self.donate_approval[_pool][msg.sender], \"Access denied\"\r\n\r\n    Curve(_pool).donate_admin_fees()  # dev: if implemented by the pool","ABI":"[{\"name\":\"CommitAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"parameter_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"parameter_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddBurner\",\"inputs\":[{\"type\":\"address\",\"name\":\"burner\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_ownership_admin\"},{\"type\":\"address\",\"name\":\"_parameter_admin\"},{\"type\":\"address\",\"name\":\"_emergency_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"commit_set_admins\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_o_admin\"},{\"type\":\"address\",\"name\":\"_p_admin\"},{\"type\":\"address\",\"name\":\"_e_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":109078},{\"name\":\"apply_set_admins\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":111238},{\"name\":\"set_burner\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"},{\"type\":\"address\",\"name\":\"_burner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":103723},{\"name\":\"set_many_burners\",\"outputs\":[],\"inputs\":[{\"type\":\"address[20]\",\"name\":\"_coins\"},{\"type\":\"address[20]\",\"name\":\"_burners\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":989368},{\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58106},{\"name\":\"withdraw_many\",\"outputs\":[],\"inputs\":[{\"type\":\"address[20]\",\"name\":\"_pools\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":93116},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":93478},{\"name\":\"burn_many\",\"outputs\":[],\"inputs\":[{\"type\":\"address[20]\",\"name\":\"_coins\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":780568},{\"name\":\"kill_me\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59139},{\"name\":\"unkill_me\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":60016},{\"name\":\"set_burner_kill\",\"outputs\":[],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37514},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"address\",\"name\":\"new_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59341},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58346},{\"name\":\"accept_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58376},{\"name\":\"revert_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59319},{\"name\":\"commit_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"amplification\"},{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"},{\"type\":\"uint256\",\"name\":\"min_asymmetry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":94512},{\"name\":\"apply_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":76224},{\"name\":\"revert_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59409},{\"name\":\"commit_new_fee\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59463},{\"name\":\"apply_new_fee\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58556},{\"name\":\"ramp_A\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"_future_A\"},{\"type\":\"uint256\",\"name\":\"_future_time\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59523},{\"name\":\"stop_ramp_A\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59529},{\"name\":\"set_aave_referral\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"referral_code\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59571},{\"name\":\"set_donate_approval\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"address\",\"name\":\"_caller\"},{\"type\":\"bool\",\"name\":\"_is_approved\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37487},{\"name\":\"donate_admin_fees\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":60697},{\"name\":\"ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1931},{\"name\":\"parameter_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1961},{\"name\":\"emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1991},{\"name\":\"future_ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2021},{\"name\":\"future_parameter_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2051},{\"name\":\"future_emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2081},{\"name\":\"min_asymmetries\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2326},{\"name\":\"burners\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2356},{\"name\":\"burner_kill\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2171},{\"name\":\"donate_approval\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2631}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}