{"status":"1","message":"OK","result":[{"SourceCode":"// const ENCORE_TOKEN = `0xe0E4839E0c7b2773c58764F9Ec3B9622d01A0428`\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\ninterface OWNABLE {\r\n    function owner() external view returns (address);\r\n    function superAdmin() external view returns (address);\r\n\r\n}\r\ninterface timelockholder{\r\n    function distributor() external view returns (address);\r\n}\r\n\r\ninterface PROXYADMIN {\r\n  function getProxyImplementation(address) external view returns (address);\r\n  function getProxyAdmin(address) external view returns (address);\r\n}\r\ninterface IENCORE {\r\n    function owner() external view returns (address);\r\n    function transferCheckerAddress() external view returns (address);\r\n    function feeDistributor() external view returns (address);\r\n}\r\n\r\n\r\ncontract  Distributor is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 contractStartTimestamp;\r\n    address public WETH_address;\r\n    address public encore_fee_approver_proxy;\r\n    address public encore_fee_approver_implementation;\r\n    address payable public CORE_MULTISIG;\r\n    address public encore_token;\r\n    address public proxy_admin;\r\n    address public timelock_holder;\r\n    address public timelock_vault;\r\n    address public encore_vault_proxy;\r\n    address public encore_vault_implementation;\r\n    uint256 public minimum_encore_vault_univ2_tokens;\r\n    address public encore_lp_address;\r\n    IENCORE public encore;\r\n\r\n\r\n\r\n\r\n    constructor() public {\r\n            contractStartTimestamp = block.timestamp;\r\n            CORE_MULTISIG = 0x5A16552f59ea34E44ec81E58b3817833E9fD5436;\r\n\r\n            // fee approver\r\n            encore_fee_approver_proxy = 0xF3c3ff0ea59d15e82b9620Ed7406fa3f6A261f98;\r\n            encore_fee_approver_implementation = 0x4E5FB14E7E7cC254aEeC9DB6f737682032E9660D;\r\n\r\n            // encore token\r\n            encore = IENCORE(0xe0E4839E0c7b2773c58764F9Ec3B9622d01A0428);\r\n\r\n            // proxy admin\r\n            proxy_admin = 0x1964784ba40c9fD5EED1070c1C38cd5D1d5F9f55;\r\n\r\n            // timelock holder\r\n            timelock_holder = 0x2a997EaD7478885a66e6961ac0837800A07492Fc;\r\n\r\n            // timelock vault\r\n            timelock_vault = 0xC2Cb86437355f36d42Fb8D979ab28b9816ac0545;\r\n\r\n            // encore vault \r\n            encore_vault_proxy = 0xdeF7BdF8eCb450c1D93C5dB7C8DBcE5894CCDaa9;\r\n            encore_vault_implementation =  0x56210Bf1f27794564E72c733dAF515B9762fB037;\r\n            minimum_encore_vault_univ2_tokens = 8000*1e18;\r\n\r\n            // Lp\r\n            encore_lp_address = 0x2e0721E6C951710725997928DcAAa05DaaFa031B;\r\n\r\n            //WETH\r\n            WETH_address = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    receive() external payable{\r\n        // console.log(\"Got a deposit of\", msg.value/1e18, \"ETH\");\r\n\r\n    }\r\n\r\n    function getSecondsLeft() public view returns (uint256) {\r\n        return contractStartTimestamp.add(2 days).sub(block.timestamp);\r\n    }\r\n\r\n    function distribute() public {\r\n        // We check the owner of encore is core multisig\r\n        require(encore.owner() == CORE_MULTISIG, \"CORE multisig is not the owner of encore token\");\r\n\r\n        // we check that the transfre checker is set to the correct address\r\n        require(encore.transferCheckerAddress() == encore_fee_approver_proxy, \"Encore token has the wrong transfer setter\");\r\n\r\n        // we check that the fee distributor is set to the correct address\r\n        require(encore.feeDistributor() == encore_vault_proxy, \"Encore token has the wrong vault set\");\r\n\r\n        // we check that balance of encore vault is as it should be\r\n        require(IERC20(encore_lp_address).balanceOf(encore_vault_proxy) >= minimum_encore_vault_univ2_tokens, \"Vault doesn't have enough LP tokens\");\r\n        \r\n        \r\n        // we check the owner of encore vault\r\n        // we check the implementation of encore vault\r\n        \r\n        // we check that the proxy admin for transfer checker is correct\r\n        require(PROXYADMIN(proxy_admin).getProxyImplementation(encore_vault_proxy) == encore_vault_implementation, \"encore vault implementation is wrong\");\r\n        require(PROXYADMIN(proxy_admin).getProxyAdmin(encore_vault_proxy) == proxy_admin, \"encore vault implementation is wrong\");\r\n        require(OWNABLE(encore_vault_proxy).owner() == CORE_MULTISIG, \"ownership of vault proxy is wrong\");\r\n        // require(OWNABLE(encore_vault_proxy).superAdmin() == CORE_MULTISIG, \"super ownership of vault proxy is wrong\");\r\n\r\n\r\n\r\n\r\n\r\n        // we check that transfer checker or fee approver has the correct implementaiton\r\n        // we check that the owner of transfer checker is correct\r\n        // we check that the proxyadmin for transfer checker is correct\r\n        require(PROXYADMIN(proxy_admin).getProxyImplementation(encore_fee_approver_proxy) == encore_fee_approver_implementation, \"encore fee approver implementation is wrong\");\r\n        require(PROXYADMIN(proxy_admin).getProxyAdmin(encore_fee_approver_proxy) == proxy_admin, \"encore fee approver admin is wrong\");\r\n        require(OWNABLE(encore_fee_approver_proxy).owner() == CORE_MULTISIG, \"ownership of vault proxy is wrong\");\r\n\r\n\r\n\r\n\r\n        // We check that proxy admin has the correct owner\r\n        require(OWNABLE(proxy_admin).owner() == CORE_MULTISIG, \"encore proxy admin is not set \");\r\n\r\n        // we check that timelock holder and timelock vault has the correct owner\r\n        require(OWNABLE(timelock_holder).owner() == CORE_MULTISIG, \"timelock holder owner is not set\");\r\n        require(timelockholder(timelock_holder).distributor() == timelock_vault, \"wrong distributor for locked tokens\");\r\n        require(OWNABLE(timelock_vault).owner() == CORE_MULTISIG, \"timelock holder owner is not set\");\r\n\r\n        // we check that the pair still has floor eth in it\r\n        require(IERC20(WETH_address).balanceOf(encore_lp_address) >= 9000*1e18, \"Encore pair doesn't have enough WETH\");\r\n\r\n\r\n        sendETH(0x856A4619fA7519D53E6F3a94260F55de62B83EEb, uint256(150 ether).mul(45).div(100));\r\n        sendETH(0x68b59573Da735e4e75F8A687908b6f3bEd7CB6fa, uint256(150 ether).mul(30).div(100));\r\n        sendETH(0xE35E342cd9F2021518D2cd53068e183FfA69eeb2, uint256(150 ether).mul(25).div(100));\r\n\r\n        selfdestruct(CORE_MULTISIG);\r\n    }\r\n\r\n    function destroyDeal() public onlyOwner {\r\n        require(block.timestamp > contractStartTimestamp.add(2 days), \"Deal still ongoing\");\r\n        sendETH(CORE_MULTISIG, address(this).balance);\r\n        selfdestruct(CORE_MULTISIG);\r\n    }\r\n\r\n    function sendETH(address payable to, uint256 amt) internal {\r\n        // console.log(\"I'm transfering ETH\", amt/1e18, to);\r\n        // throw exception on failure\r\n        to.transfer(amt);\r\n    }\r\n\r\n\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_MULTISIG\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore\",\"outputs\":[{\"internalType\":\"contract IENCORE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_fee_approver_implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_fee_approver_proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_lp_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_vault_implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encore_vault_proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_encore_vault_univ2_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Distributor","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1c21d221d28e124b5b86dfb9b0fae8db92f339455345f1377d3224bffcf957dc"}]}