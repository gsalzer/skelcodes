{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-05-31\r\n*/\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public override view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public override returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() public {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n/// @title Main contract for WrappedGEGO. This contract converts GEGO between the ERC721 standard and the\r\n///  ERC20 standard by locking gego into the contract and minting 1:1 backed ERC20 tokens, that\r\n///  can then be redeemed for gego when desired.\r\n/// @notice When wrapping a cryptogego, you get a generic WGEGO token. Since the WGEGO token is generic, it has no\r\n///  no information about what cryptogego you submitted, so you will most likely not receive the same gego\r\n///  back when redeeming the token unless you specify that gego's ID. The token only entitles you to receive \r\n///  *a* cryptogego in return, not necessarily the *same* cryptogego in return. A different user can submit\r\n///  their own WGEGO tokens to the contract and withdraw the gego that you originally deposited. WGEGO tokens have\r\n///  no information about which gego was originally deposited to mint WGEGO - this is due to the very nature of \r\n///  the ERC20 standard being fungible, and the ERC721 standard being nonfungible.\r\ncontract WrappedGEGO is ERC20, ReentrancyGuard {\r\n\r\n    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\r\n    using SafeMath for uint256;\r\n\r\n    //owner\r\n    address payable private satoshi;\r\n    //set a break for allowing admin harvest\r\n    bool private delay = false;\r\n    \r\n    mapping (uint256 => address) private latestPool;\r\n    \r\n    \r\n    string public _affCode = \"dego\";\r\n    \r\n    uint256 public _affPrice = 0.25 ether;\r\n    \r\n    uint256 public lastRefUpdate = block.timestamp;\r\n    \r\n    \r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    /// @dev This event is fired when a user deposits gego into the contract in exchange\r\n    ///  for an equal number of WGEGO ERC20 tokens.\r\n    /// @param gegoId  The cryptogego id of the gego that was deposited into the contract.\r\n    event DepositgegoAndMintToken(\r\n        uint256 gegoId\r\n    );\r\n\r\n    /// @dev This event is fired when a user deposits WGEGO ERC20 tokens into the contract in exchange\r\n    ///  for an equal number of locked gego.\r\n    /// @param gegoId  The cryptogego id of the gego that was withdrawn from the contract.\r\n    event BurnTokenAndWithdrawgego(\r\n        uint256 gegoId\r\n    );\r\n    \r\n    \r\n    \r\n    event NFTReceived(address operator, address from, uint256 tokenId, bytes data);\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    /// @dev An Array containing all of the gego that are locked in the contract, backing\r\n    ///  WGEGO ERC20 tokens 1:1\r\n    /// @notice Some of the gego in this array were indeed deposited to the contract, but they\r\n    ///  are no longer held by the contract. This is because withdrawSpecificgego() allows a \r\n    ///  user to withdraw a gego \"out of order\". Since it would be prohibitively expensive to \r\n    ///  shift the entire array once we've withdrawn a single element, we instead maintain this \r\n    ///  mapping to determine whether an element is still contained in the contract or not. \r\n    uint256[] private depositedGegoArray;\r\n\r\n    /// @dev A mapping keeping track of which gegoIDs are currently contained within the contract.\r\n    /// @notice We cannot rely on depositedGegoArray as the source of truth as to which cats are\r\n    ///  deposited in the contract. This is because burnTokensAndWithdrawGego() allows a user to \r\n    ///  withdraw a gego \"out of order\" of the order that they are stored in the array. Since it \r\n    ///  would be prohibitively expensive to shift the entire array once we've withdrawn a single \r\n    ///  element, we instead maintain this mapping to determine whether an element is still contained \r\n    ///  in the contract or not. \r\n    mapping (uint256 => bool) private gegoIsDepositedInContract;\r\n\r\n    /* ********* */\r\n    /* CONSTANTS */\r\n    /* ********* */\r\n\r\n    /// @dev The metadata details about the \"Wrapped GEGO\" WGEGO ERC20 token.\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"Wrapped GEGO\";\r\n    string constant public symbol = \"WGEGO\";\r\n\r\n    uint256 private depositedGegoArraylength;\r\n    /// @dev The address of official Gego contract that stores the metadata about each cat.\r\n    /// @notice The owner is not capable of changing the address of the GEGO Core contract\r\n    ///  once the contract has been deployed.\r\n    //address public gegoCoreAddress = 0x27b4bC90fBE56f02Ef50f2E2f79D7813Aa8941A7;\r\n    address public gegoCoreAddress;\r\n    \r\n    GegoCore gegoCore;\r\n    \r\n    //address public degoCoreAddress = 0x88ef27e69108b2633f8e1c184cc37940a075cc02;\r\n    address public degoCoreAddress;\r\n    \r\n    IERC20 degoCore;\r\n    \r\n    \r\n    \r\n    address public actualPool = address(0xB86021cbA87337dEa87bc055666146a263c9E0cd);\r\n    \r\n    \r\n    \r\n    NFTReward poolIs;\r\n    \r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n    \r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4) {\r\n        \r\n\r\n        emit NFTReceived(operator, from, tokenId, data);\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    /// @notice Allows a user to lock gego in the contract in exchange for an equal number\r\n    ///  of WGEGO ERC20 tokens.\r\n    /// @param _gegoIds  The ids of the gego that will be locked into the contract.\r\n    /// @notice The user must first call approve() in the GEGO Core contract on each gego\r\n    ///  that thye wish to deposit before calling depositGegoAndMintTokens(). There is no danger \r\n    ///  of this contract overreaching its approval, since the GEGO Core contract's approve() \r\n    ///  function only approves this contract for a single gego. Calling approve() allows this \r\n    ///  contract to transfer the specified gego in the depositGegoAndMintTokens() function.\r\n    function depositGegoAndMintTokens(uint256[] calldata _gegoIds) external nonReentrant {\r\n        require(_gegoIds.length > 0, 'you must submit an array with at least one element');\r\n        for(uint i = 0; i < _gegoIds.length; i++){\r\n            uint256 gegoToDeposit = _gegoIds[i];\r\n            require(msg.sender == gegoCore.ownerOf(gegoToDeposit), 'you do not own this cat');\r\n            require(gegoCore.isApprovedForAll(msg.sender,address(this)), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\r\n            gegoCore.safeTransferFrom(msg.sender, address(this), gegoToDeposit);\r\n            _pushgego(gegoToDeposit);\r\n            \r\n            //we mint dego here by putting in the pool, and if delay true we skip\r\n            if(!delay){\r\n                require(mine(gegoToDeposit));\r\n            }\r\n            \r\n            \r\n            emit DepositgegoAndMintToken(gegoToDeposit);\r\n        }\r\n        _mint(msg.sender, (_gegoIds.length).mul(10**18));\r\n    }\r\n\r\n    /// @notice Allows a user to burn WGEGO ERC20 tokens in exchange for an equal number of locked \r\n    ///  gego.\r\n    /// @param _am amount of tokens to burn\r\n    function burnTokensAndWithdrawGego(uint256[] calldata _am) external nonReentrant {\r\n        //require(_gegoIds.length == _destinationAddresses.length, 'you did not provide a destination address for each of the cats you wish to withdraw');\r\n        \r\n        uint256 numTokensToBurn = _am.length;\r\n        require(numTokensToBurn > 0, 'you must submit an array with at least one element');\r\n\r\n        require(balanceOf(msg.sender) >= numTokensToBurn.mul(10**18), 'you do not own enough tokens to withdraw this many ERC721 gego');\r\n        _burn(msg.sender, numTokensToBurn.mul(10**18));\r\n        \r\n        for(uint i = 0; i < numTokensToBurn; i++){\r\n            //we withdraw gego from the pool\r\n            \r\n            \r\n            uint256 gegoToWithdraw = _popgego();\r\n             \r\n            require(withdraw(gegoToWithdraw));\r\n            \r\n            gegoCore.safeTransferFrom(address(this),msg.sender, gegoToWithdraw);\r\n            \r\n            \r\n            \r\n            emit BurnTokenAndWithdrawgego(gegoToWithdraw);\r\n        }\r\n    }\r\n\r\n    /// @notice Adds a locked cryptogego to the end of the array\r\n    /// @param _gegoId  The id of the cryptogego that will be locked into the contract.\r\n    function _pushgego(uint256 _gegoId) internal {\r\n        depositedGegoArray.push(_gegoId);\r\n        depositedGegoArraylength++;\r\n        gegoIsDepositedInContract[_gegoId] = true;\r\n    }\r\n\r\n    /// @notice Removes an unlocked cryptogego from the end of the array\r\n    /// @notice The reason that this function must check if the gegoIsDepositedInContract\r\n    ///  is that the withdrawSpecificgego() function allows a user to withdraw a gego\r\n    ///  from the array out of order.\r\n    /// @return  The id of the cryptogego that will be unlocked from the contract.\r\n    function _popgego() internal returns(uint256){\r\n        require(depositedGegoArraylength > 0, 'there are no gego in the array');\r\n        uint256 gegoId = depositedGegoArray[depositedGegoArraylength - 1];\r\n        depositedGegoArraylength--;\r\n        while(gegoIsDepositedInContract[gegoId] == false){\r\n            gegoId = depositedGegoArray[depositedGegoArraylength - 1];\r\n            depositedGegoArraylength--;\r\n        }\r\n        gegoIsDepositedInContract[gegoId] = false;\r\n        return gegoId;\r\n    }\r\n\r\n    /// @notice Removes any gego that exist in the array but are no longer held in the\r\n    ///  contract, which happens if the first few gego have previously been withdrawn \r\n    ///  out of order using the withdrawSpecificgego() function.\r\n    /// @notice This function exists to prevent a griefing attack where a malicious attacker\r\n    ///  could call withdrawSpecificgego() on a large number of gego at the front of the\r\n    ///  array, causing the while-loop in _popgego to always run out of gas.\r\n    /// @param _numSlotsToCheck  The number of slots to check in the array.\r\n    function batchRemoveWithdrawnGegoFromStorage(uint256 _numSlotsToCheck) external {\r\n        require(_numSlotsToCheck <= depositedGegoArraylength, 'you are trying to batch remove more slots than exist in the array');\r\n        uint256 arrayIndex = depositedGegoArraylength;\r\n        for(uint i = 0; i < _numSlotsToCheck; i++){\r\n            arrayIndex = arrayIndex.sub(1);\r\n            uint256 gegoId = depositedGegoArray[arrayIndex];\r\n            if(gegoIsDepositedInContract[gegoId] == false){\r\n                depositedGegoArraylength--;\r\n                \r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setPools(address pool) public {\r\n        require(msg.sender == satoshi);\r\n        actualPool  = pool;  \r\n    }\r\n    \r\n    function setDelay(bool _delay) public {\r\n        require(msg.sender == satoshi);\r\n        delay = _delay;  \r\n    }\r\n    \r\n    function setSatochi(address payable who) public {\r\n        require(msg.sender == satoshi);\r\n        satoshi = who;  \r\n    }\r\n    \r\n    function setAffiliateCode(string memory newaffCode) public {\r\n        require(msg.sender == satoshi);\r\n        lastRefUpdate = block.timestamp;\r\n        _affCode = newaffCode;  \r\n    }\r\n    \r\n    function setAffiliatePrice(uint256 _newPrice) public {\r\n        require(msg.sender == satoshi);\r\n        _affPrice = _newPrice; \r\n    }\r\n    \r\n    function setDego(address _newDego) public {\r\n        require(msg.sender == satoshi);\r\n        degoCoreAddress = _newDego;\r\n        degoCore = IERC20(_newDego); \r\n    }\r\n    \r\n    function setGego(address _newGego) public {\r\n        require(msg.sender == satoshi);\r\n        gegoCoreAddress = _newGego;\r\n        gegoCore = GegoCore(_newGego); \r\n    }\r\n    \r\n     \r\n    function cashoutERC20(IERC20 token, uint256 amount) external {\r\n        require(msg.sender == satoshi);\r\n        token.transfer(satoshi, amount);\r\n    }\r\n    \r\n    function harvest(address pool) external {\r\n        require(msg.sender == satoshi);\r\n        poolIs = NFTReward(pool);\r\n        poolIs.getReward();\r\n    }\r\n    \r\n    \r\n    function updateRef(string calldata _newRef) external payable {\r\n        \r\n        require(block.timestamp >= (lastRefUpdate)+7 days);\r\n        require(msg.value >= _affPrice);\r\n        \r\n        \r\n        lastRefUpdate = block.timestamp;\r\n        _affCode = _newRef;\r\n        \r\n        satoshi.transfer(msg.value);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function mine(uint256 gegoId) internal returns(bool) {\r\n        \r\n        gegoCore.approve(actualPool, gegoId);\r\n        \r\n        poolIs = NFTReward(actualPool);\r\n        \r\n        poolIs.stakeGego(gegoId, _affCode);\r\n        \r\n        latestPool[gegoId] = actualPool;\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    function withdraw(uint256 gegoId) internal returns (bool) {\r\n        if(latestPool[gegoId] != address(0)){\r\n            poolIs = NFTReward(latestPool[gegoId]);\r\n        \r\n            poolIs.withdrawGego(gegoId);\r\n        \r\n            latestPool[gegoId] = address(0);\r\n        }\r\n        \r\n        return true;\r\n        \r\n        \r\n    }\r\n\r\n    /// @notice The owner is not capable of changing the address of the GEGO Core\r\n    ///  contract once the contract has been deployed.\r\n    constructor() public {\r\n        satoshi = msg.sender;\r\n    }\r\n\r\n\r\n}\r\n\r\n/// @title Interface for interacting with the GEGO Core contract created by Dapper Labs Inc.\r\ninterface GegoCore {\r\n    function ownerOf(uint256 _tokenId) external returns (address owner);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function isApprovedForAll(address owner, address operator) external returns (bool);\r\n    function approve(address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface NFTReward {\r\n    function stakeGego(uint256 gegoId, string calldata affCode) external;\r\n    function withdrawGego(uint256 gegoId) external;\r\n    function getReward() external;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gegoId\",\"type\":\"uint256\"}],\"name\":\"BurnTokenAndWithdrawgego\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gegoId\",\"type\":\"uint256\"}],\"name\":\"DepositgegoAndMintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_affCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_affPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numSlotsToCheck\",\"type\":\"uint256\"}],\"name\":\"batchRemoveWithdrawnGegoFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_am\",\"type\":\"uint256[]\"}],\"name\":\"burnTokensAndWithdrawGego\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashoutERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degoCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_gegoIds\",\"type\":\"uint256[]\"}],\"name\":\"depositGegoAndMintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gegoCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRefUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newaffCode\",\"type\":\"string\"}],\"name\":\"setAffiliateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setAffiliatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDego\",\"type\":\"address\"}],\"name\":\"setDego\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_delay\",\"type\":\"bool\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGego\",\"type\":\"address\"}],\"name\":\"setGego\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setSatochi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newRef\",\"type\":\"string\"}],\"name\":\"updateRef\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"WrappedGEGO","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c1cec666f39b2c7ba02408206038d3c0cb82c47caf27806ce316053f1609ca8b"}]}