{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;  \r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\nabstract contract ILendingPool {\r\n    function flashLoan(\r\n        address payable _receiver,\r\n        address _reserve,\r\n        uint256 _amount,\r\n        bytes calldata _params\r\n    ) external virtual;\r\n\r\n    function deposit(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint16 _referralCode\r\n    ) external payable virtual;\r\n\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral)\r\n        external\r\n        virtual;\r\n\r\n    function borrow(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode\r\n    ) external virtual;\r\n\r\n    function repay(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        address payable _onBehalfOf\r\n    ) external payable virtual;\r\n\r\n    function swapBorrowRateMode(address _reserve) external virtual;\r\n\r\n    function getReserves() external view virtual returns (address[] memory);\r\n\r\n    /// @param _reserve underlying token address\r\n    function getReserveData(address _reserve)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256 totalLiquidity, // reserve total liquidity\r\n            uint256 availableLiquidity, // reserve available liquidity for borrowing\r\n            uint256 totalBorrowsStable, // total amount of outstanding borrows at Stable rate\r\n            uint256 totalBorrowsVariable, // total amount of outstanding borrows at Variable rate\r\n            uint256 liquidityRate, // current deposit APY of the reserve for depositors, in Ray units.\r\n            uint256 variableBorrowRate, // current variable rate APY of the reserve pool, in Ray units.\r\n            uint256 stableBorrowRate, // current stable rate APY of the reserve pool, in Ray units.\r\n            uint256 averageStableBorrowRate, // current average stable borrow rate\r\n            uint256 utilizationRate, // expressed as total borrows/total liquidity.\r\n            uint256 liquidityIndex, // cumulative liquidity index\r\n            uint256 variableBorrowIndex, // cumulative variable borrow index\r\n            address aTokenAddress, // aTokens contract address for the specific _reserve\r\n            uint40 lastUpdateTimestamp // timestamp of the last update of reserve data\r\n        );\r\n\r\n    /// @param _user users address\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256 totalLiquidityETH, // user aggregated deposits across all the reserves. In Wei\r\n            uint256 totalCollateralETH, // user aggregated collateral across all the reserves. In Wei\r\n            uint256 totalBorrowsETH, // user aggregated outstanding borrows across all the reserves. In Wei\r\n            uint256 totalFeesETH, // user aggregated current outstanding fees in ETH. In Wei\r\n            uint256 availableBorrowsETH, // user available amount to borrow in ETH\r\n            uint256 currentLiquidationThreshold, // user current average liquidation threshold across all the collaterals deposited\r\n            uint256 ltv, // user average Loan-to-Value between all the collaterals\r\n            uint256 healthFactor // user current Health Factor\r\n        );\r\n\r\n    /// @param _reserve underlying token address\r\n    /// @param _user users address\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256 currentATokenBalance, // user current reserve aToken balance\r\n            uint256 currentBorrowBalance, // user current reserve outstanding borrow balance\r\n            uint256 principalBorrowBalance, // user balance of borrowed asset\r\n            uint256 borrowRateMode, // user borrow rate mode either Stable or Variable\r\n            uint256 borrowRate, // user current borrow rate APY\r\n            uint256 liquidityRate, // user current earn rate on _reserve\r\n            uint256 originationFee, // user outstanding loan origination fee\r\n            uint256 variableBorrowIndex, // user variable cumulative index\r\n            uint256 lastUpdateTimestamp, // Timestamp of the last data update\r\n            bool usageAsCollateralEnabled // Whether the user's current reserve is enabled as a collateral\r\n        );\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address rateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n        );\r\n\r\n    // ------------------ LendingPoolCoreData ------------------------\r\n    function getReserveATokenAddress(address _reserve) public view virtual returns (address);\r\n\r\n    function getReserveConfiguration(address _reserve)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentLiquidityRate(address _reserve) public view virtual returns (uint256);\r\n\r\n    function getReserveCurrentVariableBorrowRate(address _reserve)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function getReserveTotalLiquidity(address _reserve) public view virtual returns (uint256);\r\n\r\n    function getReserveAvailableLiquidity(address _reserve) public view virtual returns (uint256);\r\n\r\n    function getReserveTotalBorrowsVariable(address _reserve) public view virtual returns (uint256);\r\n\r\n    // ---------------- LendingPoolDataProvider ---------------------\r\n    function calculateUserGlobalData(address _user)\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256 totalLiquidityBalanceETH,\r\n            uint256 totalCollateralBalanceETH,\r\n            uint256 totalBorrowBalanceETH,\r\n            uint256 totalFeesETH,\r\n            uint256 currentLtv,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 healthFactor,\r\n            bool healthFactorBelowThreshold\r\n        );\r\n}\r\n\r\n\r\n\r\nabstract contract DSGuard {\r\n    function canCall(\r\n        address src_,\r\n        address dst_,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n\r\n    function permit(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function forbid(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function permit(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function forbid(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n}\r\n\r\nabstract contract DSGuardFactory {\r\n    function newGuard() public virtual returns (DSGuard guard);\r\n}  \r\n\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}  \r\n\r\n\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title ProxyPermission Proxy contract which works with DSProxy to give execute permission\r\ncontract ProxyPermission {\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n\r\n    /// @notice Called in the context of DSProxy to authorize an address\r\n    /// @param _contractAddr Address which will be authorized\r\n    function givePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        if (currAuthority == address(0)) {\r\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\r\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\r\n        }\r\n\r\n        guard.permit(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    /// @notice Called in the context of DSProxy to remove authority of an address\r\n    /// @param _contractAddr Auth address which will be removed from authority list\r\n    function removePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n\r\n        // if there is no authority, that means that contract doesn't have permission\r\n        if (currAuthority == address(0)) {\r\n            return;\r\n        }\r\n\r\n        DSGuard guard = DSGuard(currAuthority);\r\n        guard.forbid(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    function proxyOwner() internal view returns (address) {\r\n        return DSAuth(address(this)).owner();\r\n    }\r\n}  \r\n\r\n\r\n\r\nabstract contract IDFSRegistry {\r\n \r\n    function getAddr(bytes32 _id) public view virtual returns (address);\r\n\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public virtual;\r\n\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\r\n\r\n    function approveContractChange(bytes32 _id) public virtual;\r\n\r\n    function cancelContractChange(bytes32 _id) public virtual;\r\n\r\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\r\n}  \r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}  \r\n\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}  \r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {ERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}  \r\n\r\n\r\n\r\ncontract AdminVault {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        admin = _admin;\r\n    }\r\n\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title AdminAuth Handles owner/admin priviligies over smart contracts\r\ncontract AdminAuth {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\r\n\r\n    modifier onlyOwner() {\r\n        require(adminVault.owner() == msg.sender, \"msg.sender not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(adminVault.admin() == msg.sender, \"msg.sender not admin\");\r\n        _;\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Changes the admin vault that is currently used\r\n    /// @param _newAdminVault Address of the new Admin Vault contract\r\n    function changeAdminVault(address _newAdminVault) public onlyAdmin {\r\n        adminVault = AdminVault(_newAdminVault);\r\n    }\r\n}  \r\n\r\n\r\n\r\ncontract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(\r\n        address _contract,\r\n        address _caller,\r\n        string memory _logName,\r\n        bytes memory _data\r\n    ) public {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Stores all the important DFS addresses and can be changed (timelock)\r\ncontract DFSRegistry is AdminAuth {\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_ENTRY_ALREADY_EXISTS = \"Entry id already exists\";\r\n    string public constant ERR_ENTRY_NON_EXISTENT = \"Entry id doesn't exists\";\r\n    string public constant ERR_ENTRY_NOT_IN_CHANGE = \"Entry not in change process\";\r\n    string public constant ERR_WAIT_PERIOD_SHORTER = \"New wait period must be bigger\";\r\n    string public constant ERR_CHANGE_NOT_READY = \"Change not ready yet\";\r\n    string public constant ERR_EMPTY_PREV_ADDR = \"Previous addr is 0\";\r\n    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = \"Already in contract change\";\r\n    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = \"Already in wait period change\";\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes32 => Entry) public entries;\r\n    mapping(bytes32 => address) public previousAddresses;\r\n\r\n    mapping(bytes32 => address) public pendingAddresses;\r\n    mapping(bytes32 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registred address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes32 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registred\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes32 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        // Remember tha address so we can revert back to old addr if needed\r\n        previousAddresses[_id] = _contractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"AddNewContract\",\r\n            abi.encode(_id, _contractAddr, _waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Revertes to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"RevertToPreviousAddress\",\r\n            abi.encode(_id, currentAddr, previousAddresses[_id])\r\n        );\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartContractChange\",\r\n            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartWaitPeriodChange\",\r\n            abi.encode(_id, _newWaitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements Action interface and common helpers for pasing inputs\r\nabstract contract ActionBase {\r\n    address public constant REGISTRY_ADDR = 0xB0e1682D17A96E8551191c089673346dF7e1D467;\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\r\n    string public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\r\n\r\n    /// @dev Subscription params index range [128, 255]\r\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\r\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\r\n\r\n    /// @dev Return params index range [1, 127]\r\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\r\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\r\n\r\n    /// @dev If the input value should not be replaced\r\n    uint8 public constant NO_PARAM_MAPPING = 0;\r\n\r\n    /// @dev We need to parse Flash loan actions in a different way\r\n    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\r\n\r\n    /// @notice Parses inputs and runs the implemented action through a proxy\r\n    /// @dev Is called by the TaskExecutor chaining actions together\r\n    /// @param _callData Array of input values each value encoded as bytes\r\n    /// @param _subData Array of subscribed vales, replaces input values if specified\r\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\r\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\r\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\r\n    function executeAction(\r\n        bytes[] memory _callData,\r\n        bytes[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual returns (bytes32);\r\n\r\n    /// @notice Parses inputs and runs the single implemented action through a proxy\r\n    /// @dev Used to save gas when executing a single action directly\r\n    function executeActionDirect(bytes[] memory _callData) public virtual payable;\r\n\r\n    /// @notice Returns the type of action we are implementing\r\n    function actionType() public pure virtual returns (uint8);\r\n\r\n\r\n    //////////////////////////// HELPER METHODS ////////////////////////////\r\n\r\n    /// @notice Given an uint256 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamUint(\r\n        uint _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (uint) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n\r\n    /// @notice Given an addr input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamAddr(\r\n        address _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (address) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Given an bytes32 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamABytes32(\r\n        bytes32 _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (bytes32) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = (_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\r\n    /// @param _type Indicated the type of the input\r\n    function isReplacable(uint8 _type) internal pure returns (bool) {\r\n        return _type != NO_PARAM_MAPPING;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value is in the return value range\r\n    /// @param _type Indicated the type of the input\r\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\r\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in return array value\r\n    /// @param _type Indicated the type of the input\r\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\r\n\r\n        return (_type - RETURN_MIN_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in sub array value\r\n    /// @param _type Indicated the type of the input\r\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\r\n\r\n        return (_type - SUB_MIN_INDEX_VALUE);\r\n    }\r\n}  \r\n\r\n\r\n\r\nabstract contract IDSProxy {\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n\r\n    function owner() public view virtual returns (address);\r\n}  \r\n\r\n\r\n \r\n\r\n/// @title Struct Data in a separate contract soit can be used in multiple places\r\ncontract StrategyData {\r\n    struct Template {\r\n        string name;\r\n        bytes32[] triggerIds;\r\n        bytes32[] actionIds;\r\n        uint8[][] paramMapping;\r\n    }\r\n\r\n    struct Task {\r\n        string name;\r\n        bytes[][] callData;\r\n        bytes[][] subData;\r\n        bytes32[] actionIds;\r\n        uint8[][] paramMapping;\r\n    }\r\n\r\n    struct Strategy {\r\n        uint templateId;\r\n        address proxy;\r\n        bytes[][] subData;\r\n        bytes[][] triggerData;\r\n        bool active;\r\n\r\n        uint posInUserArr;\r\n    }\r\n}  \r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n/// @title Storage of strategies and templates\r\ncontract Subscriptions is StrategyData {\r\n    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\r\n\r\n    string public constant ERR_EMPTY_STRATEGY = \"Strategy does not exist\";\r\n    string public constant ERR_SENDER_NOT_OWNER = \"Sender is not strategy owner\";\r\n    string public constant ERR_USER_POS_EMPTY = \"No user positions\";\r\n\r\n    /// @dev The order of strategies might change as they are deleted\r\n    Strategy[] public strategies;\r\n\r\n    /// @dev Templates are fixed and are non removable\r\n    Template[] public templates;\r\n\r\n    /// @dev Keeps track of all the users strategies (their indexes in the array)\r\n    mapping (address => uint[]) public usersPos;\r\n\r\n    /// @dev Increments on state change, used for easier off chain tracking of changes\r\n    uint public updateCounter;\r\n\r\n    /// @notice Creates a new strategy with an existing template\r\n    /// @param _templateId Id of the template used for strategy\r\n    /// @param _active If the strategy is turned on at the start\r\n    /// @param _subData Subscription data for actions\r\n    /// @param _triggerData Subscription data for triggers\r\n    function createStrategy(\r\n        uint _templateId,\r\n        bool _active,\r\n        bytes[][] memory _subData,\r\n        bytes[][] memory _triggerData\r\n    ) public returns (uint) {\r\n        strategies.push(\r\n            Strategy({\r\n                templateId: _templateId,\r\n                proxy: msg.sender,\r\n                active: _active,\r\n                subData: _subData,\r\n                triggerData: _triggerData,\r\n                posInUserArr: (usersPos[msg.sender].length - 1)\r\n            })\r\n        );\r\n\r\n        usersPos[msg.sender].push(strategies.length - 1);\r\n\r\n        updateCounter++;\r\n\r\n        logger.Log(address(this), msg.sender, \"CreateStrategy\", abi.encode(strategies.length - 1));\r\n\r\n        return strategies.length - 1;\r\n    }\r\n\r\n    /// @notice Creates a new template to use in strategies\r\n    /// @dev Templates once created can't be changed\r\n    /// @param _name Name of template, used mainly for logging\r\n    /// @param _triggerIds Array of trigger ids which translate to trigger addresses\r\n    /// @param _actionIds Array of actions ids which translate to action addresses\r\n    /// @param _paramMapping Array that holds metadata of how inputs are mapped to sub/return data\r\n    function createTemplate(\r\n        string memory _name,\r\n        bytes32[] memory _triggerIds,\r\n        bytes32[] memory _actionIds,\r\n        uint8[][] memory _paramMapping\r\n    ) public returns (uint) {\r\n        \r\n        templates.push(\r\n            Template({\r\n                name: _name,\r\n                triggerIds: _triggerIds,\r\n                actionIds: _actionIds,\r\n                paramMapping: _paramMapping\r\n            })\r\n        );\r\n\r\n        updateCounter++;\r\n\r\n        logger.Log(address(this), msg.sender, \"CreateTemplate\", abi.encode(templates.length - 1));\r\n\r\n        return templates.length - 1;\r\n    }\r\n\r\n    /// @notice Updates the users strategy\r\n    /// @dev Only callable by proxy who created the strategy\r\n    /// @param _startegyId Id of the strategy to update\r\n    /// @param _templateId Id of the template used for strategy\r\n    /// @param _active If the strategy is turned on at the start\r\n    /// @param _subData Subscription data for actions\r\n    /// @param _triggerData Subscription data for triggers\r\n    function updateStrategy(\r\n        uint _startegyId,\r\n        uint _templateId,\r\n        bool _active,\r\n        bytes[][] memory _subData,\r\n        bytes[][] memory _triggerData\r\n    ) public {\r\n        Strategy storage s = strategies[_startegyId];\r\n\r\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\r\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\r\n\r\n        s.templateId = _templateId;\r\n        s.active = _active;\r\n        s.subData = _subData;\r\n        s.triggerData = _triggerData;\r\n\r\n        updateCounter++;\r\n\r\n        logger.Log(address(this), msg.sender, \"UpdateStrategy\", abi.encode(_startegyId));\r\n    }\r\n\r\n    /// @notice Unsubscribe an existing strategy\r\n    /// @dev Only callable by proxy who created the strategy\r\n    /// @param _subId Subscription id\r\n    function removeStrategy(uint256 _subId) public {\r\n        Strategy memory s = strategies[_subId];\r\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\r\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\r\n\r\n        uint lastSub = strategies.length - 1;\r\n\r\n        _removeUserPos(msg.sender, s.posInUserArr);\r\n\r\n        strategies[_subId] = strategies[lastSub]; // last strategy put in place of the deleted one\r\n        strategies.pop(); // delete last strategy, because it moved\r\n\r\n        logger.Log(address(this), msg.sender, \"Unsubscribe\", abi.encode(_subId));\r\n    }\r\n\r\n    function _removeUserPos(address _user, uint _index) internal {\r\n        require(usersPos[_user].length > 0, ERR_USER_POS_EMPTY);\r\n        uint lastPos = usersPos[_user].length - 1;\r\n\r\n        usersPos[_user][_index] = usersPos[_user][lastPos];\r\n        usersPos[_user].pop();\r\n    }\r\n\r\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\r\n\r\n    function getTemplateFromStrategy(uint _strategyId) public view returns (Template memory) {\r\n        uint templateId = strategies[_strategyId].templateId;\r\n        return templates[templateId];\r\n    }\r\n\r\n    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\r\n        return strategies[_strategyId];\r\n    }\r\n\r\n    function getTemplate(uint _templateId) public view returns (Template memory) {\r\n        return templates[_templateId];\r\n    }\r\n\r\n    function getStrategyCount() public view returns (uint256) {\r\n        return strategies.length;\r\n    }\r\n\r\n    function getTemplateCount() public view returns (uint256) {\r\n        return templates.length;\r\n    }\r\n\r\n    function getStrategies() public view returns (Strategy[] memory) {\r\n        return strategies;\r\n    }\r\n\r\n    function getTemplates() public view returns (Template[] memory) {\r\n        return templates;\r\n    }\r\n\r\n    function userHasStrategies(address _user) public view returns (bool) {\r\n        return usersPos[_user].length > 0;\r\n    }\r\n\r\n    function getUserStrategies(address _user) public view returns (Strategy[] memory) {\r\n        Strategy[] memory userStrategies = new Strategy[](usersPos[_user].length);\r\n        \r\n        for (uint i = 0; i < usersPos[_user].length; ++i) {\r\n            userStrategies[i] = strategies[usersPos[_user][i]];\r\n        }\r\n\r\n        return userStrategies;\r\n    }\r\n\r\n    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\r\n        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > strategiesPerPage.length) ? strategiesPerPage.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            strategiesPerPage[count] = strategies[i];\r\n            count++;\r\n        }\r\n\r\n        return strategiesPerPage;\r\n    }\r\n\r\n    function getPaginatedTemplates(uint _page, uint _perPage) public view returns (Template[] memory) {\r\n        Template[] memory templatesPerPage = new Template[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > templatesPerPage.length) ? templatesPerPage.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            templatesPerPage[count] = templates[i];\r\n            count++;\r\n        }\r\n\r\n        return templatesPerPage;\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\nabstract contract IGasToken is IERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}  \r\n\r\n\r\n\r\n\r\n\r\ncontract GasBurner {\r\n    IGasToken public constant gasToken = IGasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    IGasToken public constant chiToken = IGasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier burnGas {\r\n        uint gasBefore = gasleft();\r\n\r\n        _;\r\n\r\n        uint gasSpent = 21000 + gasBefore - gasleft() + 16 * msg.data.length;\r\n        uint gasTokenAmount = (gasSpent + 14154) / 41130;\r\n\r\n        if (gasToken.balanceOf(address(this)) >= gasTokenAmount) {\r\n            gasToken.free(gasTokenAmount);\r\n        } else if (chiToken.balanceOf(address(this)) >= gasTokenAmount) {\r\n            chiToken.free(gasTokenAmount);\r\n        }\r\n    }\r\n}  \r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Handles FL taking and executes actions\r\ncontract TaskExecutor is StrategyData, GasBurner, ProxyPermission {\r\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\r\n\r\n    address public constant REGISTRY_ADDR = 0xB0e1682D17A96E8551191c089673346dF7e1D467;\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    bytes32 constant ACTION_EXECUTOR_ID = keccak256(\"ActionExecutor\");\r\n    bytes32 constant SUBSCRIPTION_ID = keccak256(\"Subscriptions\");\r\n\r\n    /// @notice Called directly through DsProxy to execute a task\r\n    /// @dev This is the main entry point for Recipes/Tasks executed manually\r\n    /// @dev It will burn Gst2/Chi if the user has a balance on proxy\r\n    /// @param _currTask Task to be executed\r\n    function executeTask(Task memory _currTask) public payable burnGas {\r\n        _executeActions(_currTask);\r\n    }\r\n\r\n    /// @notice Called through the Strategy contract to execute a task\r\n    /// @dev Doesn't burn gst2/chi as it's handled in the StrategyExecutor\r\n    /// @param _strategyId Id of the strategy we want to execute\r\n    /// @param _actionCallData All the data related to the strategies Task\r\n    function executeStrategyTask(uint256 _strategyId, bytes[][] memory _actionCallData)\r\n        public\r\n        payable\r\n    {\r\n        address subAddr = registry.getAddr(SUBSCRIPTION_ID);\r\n        Strategy memory strategy = Subscriptions(subAddr).getStrategy(_strategyId);\r\n        Template memory template = Subscriptions(subAddr).getTemplate(strategy.templateId);\r\n\r\n        Task memory currTask = Task({\r\n            name: template.name,\r\n            callData: _actionCallData,\r\n            subData: strategy.subData,\r\n            actionIds: template.actionIds,\r\n            paramMapping: template.paramMapping\r\n        });\r\n\r\n        _executeActions(currTask);\r\n    }\r\n\r\n    /// @notice This is the callback function that FL actions call\r\n    /// @dev FL function must be the first action and repayment is done last\r\n    /// @param _currTask Task to be executed\r\n    /// @param _flAmount Result value from FL action\r\n    function _executeActionsFromFL(Task memory _currTask, bytes32 _flAmount) public payable {\r\n        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\r\n        returnValues[0] = _flAmount; // set the flash loan action as first return value\r\n\r\n        // skipes the first actions as it was the fl action\r\n        for (uint256 i = 1; i < _currTask.actionIds.length; ++i) {\r\n            returnValues[i] = _executeAction(_currTask, i, returnValues);\r\n        }\r\n    }\r\n\r\n    /// @notice Runs all actions from the task\r\n    /// @dev FL action must be first and is parsed separatly, execution will go to _executeActionsFromFL\r\n    /// @param _currTask to be executed\r\n    function _executeActions(Task memory _currTask) internal {\r\n        address firstActionAddr = registry.getAddr(_currTask.actionIds[0]);\r\n\r\n        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\r\n\r\n        if (isFL(firstActionAddr)) {\r\n            _parseFLAndExecute(_currTask, firstActionAddr, returnValues);\r\n        } else {\r\n            for (uint256 i = 0; i < _currTask.actionIds.length; ++i) {\r\n                returnValues[i] = _executeAction(_currTask, i, returnValues);\r\n            }\r\n        }\r\n\r\n        /// log the task name\r\n        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, _currTask.name, \"\");\r\n    }\r\n\r\n    /// @notice Gets the action address and executes it\r\n    /// @param _currTask Task to be executed\r\n    /// @param _index Index of the action in the task array\r\n    /// @param _returnValues Return values from previous actions\r\n    function _executeAction(\r\n        Task memory _currTask,\r\n        uint256 _index,\r\n        bytes32[] memory _returnValues\r\n    ) internal returns (bytes32 response) {\r\n\r\n        response = IDSProxy(address(this)).execute{value: address(this).balance}(\r\n            registry.getAddr(_currTask.actionIds[_index]),\r\n            abi.encodeWithSignature(\r\n                \"executeAction(bytes[],bytes[],uint8[],bytes32[])\",\r\n                _currTask.callData[_index],\r\n                _currTask.subData[_index],\r\n                _currTask.paramMapping[_index],\r\n                _returnValues\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Prepares and executes a flash loan action\r\n    /// @dev It addes to the last input value of the FL, the task data so it can be passed on\r\n    /// @param _currTask Task to be executed\r\n    /// @param _flActionAddr Address of the flash loan action \r\n    /// @param _returnValues An empty array of return values, beacuse it's the first action\r\n    function _parseFLAndExecute(\r\n        Task memory _currTask,\r\n        address _flActionAddr,\r\n        bytes32[] memory _returnValues\r\n    ) internal {\r\n        givePermission(_flActionAddr);\r\n\r\n        bytes memory taskData = abi.encode(_currTask, address(this));\r\n\r\n        // last input value is empty for FL action, attach task data there\r\n        _currTask.callData[0][_currTask.callData[0].length - 1] = taskData;\r\n\r\n        _executeAction(_currTask, 0, _returnValues);\r\n\r\n        removePermission(_flActionAddr);\r\n    }\r\n\r\n    /// @notice Checks if the specified address is of FL type action\r\n    /// @param _actionAddr Address of the action\r\n    function isFL(address _actionAddr) pure internal returns (bool) {\r\n        return ActionBase(_actionAddr).actionType() == uint8(ActionBase.ActionType.FL_ACTION);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[][]\",\"name\":\"callData\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes[][]\",\"name\":\"subData\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"actionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyData.Task\",\"name\":\"_currTask\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_flAmount\",\"type\":\"bytes32\"}],\"name\":\"_executeActionsFromFL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiToken\",\"outputs\":[{\"internalType\":\"contract IGasToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[][]\",\"name\":\"_actionCallData\",\"type\":\"bytes[][]\"}],\"name\":\"executeStrategyTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[][]\",\"name\":\"callData\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes[][]\",\"name\":\"subData\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"actionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyData.Task\",\"name\":\"_currTask\",\"type\":\"tuple\"}],\"name\":\"executeTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract IGasToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"givePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"removePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TaskExecutor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://96ecd772fe4db83e8b45fd8b4bd19aea1b507f49d84c1451cf7e726c7d29757f"}]}