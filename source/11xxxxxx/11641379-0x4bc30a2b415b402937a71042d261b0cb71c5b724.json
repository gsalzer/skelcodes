{"status":"1","message":"OK","result":[{"SourceCode":"/**---------------------------------------------------------------------------/\r\n/**--------------------------------------------------********##########*******/\r\n/**---************--**************--***************--*******###########*******/\r\n/**---************--**************--***************--******####        *******/\r\n/**---**     *****--    *****     --     *****     --*****####         *******/\r\n/**---**     *****--    *****     --     *****     --****############# *******/\r\n/**---**     *****--    *****     --     *****     --***############## *******/\r\n/**---**     *****--    *****     --     *****     --**           #### *******/\r\n/**---**     *****--    *****     --     *****     --**           #### *******/\r\n/**---************--    *****     --     *****     --**############### *******/\r\n/**---************------*****------------*****-------**############### *******/\r\n/**--------------------------------------------------------------------------*/\r\n/**--------------------------------------------------------------------------*/\r\n\r\npragma solidity ^0.7.5;\r\n\r\ncontract DTT_Liquidity_Pool_Manager {\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event Approval(\r\n        address indexed provider1, \r\n        address indexed provider2\r\n    );\r\n    event Send(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event Receive(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    /*==============================\r\n    ==============================*/\r\n    \r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    modifier onlyCreator(){\r\n        address _customerAddress = msg.sender;\r\n        require(_customerAddress == admin);\r\n        _;\r\n    }\r\n    \r\n    mapping(address => bool) internal administrators;\r\n    mapping(address => uint256) internal provider1Approval;\r\n    mapping(address => uint256) internal provider2Approval;\r\n    \r\n    address internal provider1;\r\n    address internal provider2;\r\n    address payable admin;\r\n    address payable _liquidity;\r\n    \r\n    constructor()\r\n    {\r\n        admin = msg.sender;\r\n        administrators[msg.sender] = true; \r\n    }\r\n    \r\n    receive() external payable\r\n    {\r\n        emit Receive(msg.sender,address(this),msg.value);\r\n    }\r\n    \r\n    function setProvider1(address payable _provider) public onlyCreator()\r\n    {\r\n        provider1 = _provider;\r\n        administrators[_provider] = true;\r\n    }\r\n    \r\n    function setProvider2(address payable _provider) public onlyCreator()\r\n    {\r\n        provider2 = _provider;\r\n        administrators[_provider] = true;\r\n    }\r\n    \r\n    function setMainAddress(address payable _contract) public onlyCreator()\r\n    {\r\n        _liquidity = _contract;\r\n    }\r\n    \r\n    function sendLiquidity(uint256 _amount) public onlyAdministrator()\r\n    {\r\n        require(!isContract(msg.sender),\"Sending from contract is not allowed\");\r\n        require(msg.sender == provider1 || msg.sender == provider2, \"Only Liquidity Provider Can Approve\");\r\n        if(msg.sender == provider1)\r\n        {\r\n            if(provider2Approval[_liquidity] == _amount)\r\n            {\r\n                _liquidity.transfer(_amount);\r\n                provider2Approval[_liquidity] = 0;\r\n                emit Send(address(this),_liquidity,_amount);\r\n            }\r\n            else\r\n            {\r\n                provider1Approval[_liquidity] = _amount;\r\n            }\r\n        }\r\n        if(msg.sender == provider2)\r\n        {\r\n            if(provider1Approval[_liquidity] == _amount)\r\n            {\r\n                _liquidity.transfer(_amount);\r\n                provider1Approval[_liquidity] = 0;\r\n                emit Send(address(this),_liquidity,_amount);\r\n            }\r\n            else\r\n            {\r\n                provider2Approval[_liquidity] = _amount;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function sendMoreLiquidity(address payable _other, uint256 _amount) public onlyAdministrator()\r\n    {\r\n        require(!isContract(msg.sender),\"Sending from contract is not allowed\");\r\n        require(msg.sender == provider1 || msg.sender == provider2, \"Only Liquidity Provider Can Approve\");\r\n        if(msg.sender == provider1)\r\n        {\r\n            if(provider2Approval[_other] == _amount)\r\n            {\r\n                _other.transfer(_amount);\r\n                provider2Approval[_other] = 0;\r\n                emit Send(address(this),_other,_amount);\r\n            }\r\n            else\r\n            {\r\n                provider1Approval[_other] = _amount;\r\n            }\r\n        }\r\n        if(msg.sender == provider2)\r\n        {\r\n            if(provider1Approval[_other] == _amount)\r\n            {\r\n                _other.transfer(_amount);\r\n                provider1Approval[_other] = 0;\r\n                emit Send(address(this),_other,_amount);\r\n            }\r\n            else\r\n            {\r\n                provider2Approval[_other] = _amount;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function isContract(address account) public view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function destruct() onlyCreator() public{\r\n        selfdestruct(admin);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider2\",\"type\":\"address\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_other\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendMoreLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setProvider1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setProvider2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DTT_Liquidity_Pool_Manager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b29bf92fc53577311df389082c515367664cfbe914af9db2b4d4e6cb1350a818"}]}