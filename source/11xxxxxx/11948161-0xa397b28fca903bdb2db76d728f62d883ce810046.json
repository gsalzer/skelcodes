{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.12;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(this));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\t\r\n}\r\n\r\ncontract PubeTokenSale is owned {\r\n\tusing SafeMath for uint;\r\n\tToken public tokenAddress;\r\n    bool public initialized = false;\r\n\r\n\taddress public receiverAddress;\r\n\t\r\n\tuint public rate = 4000000000000;\r\n\tuint public start;\r\n\tuint public end;\r\n\t\r\n\tuint public pre_sale = 40;\r\n    uint public bonus_1 = 30;\r\n    uint public bonus_2 = 20;\r\n    uint public bonus_3 = 15;\r\n    uint public bonus_4 = 10;\r\n    uint public bonus_5 = 5;\r\n\t\r\n    event Initialized();\r\n    event WithdrawTokens(address destination, uint256 amount);\r\n    event WithdrawAnyTokens(address tokenAddress, address destination, uint256 amount);\r\n    event WithdrawEther(address destination, uint256 amount);\r\n\t\r\n\r\n    /**\r\n     * Initialize contract\r\n     *\r\n     * @param _tokenAddress token address\r\n     */\r\n    function init(Token _tokenAddress) onlyOwner public {\r\n        require(!initialized);\r\n        initialized = true;\r\n        tokenAddress = _tokenAddress;\r\n        emit Initialized();\r\n    }\r\n\r\n\r\n    /**\r\n     * withdrawTokens\r\n     *\r\n     * Withdraw tokens from the contract\r\n     *\r\n     * @param amount is an amount of tokens\r\n     */\r\n    function withdrawTokens(\r\n        uint256 amount\r\n    )\r\n        onlyOwner public\r\n    {\r\n        require(initialized);\r\n        tokenAddress.transfer(msg.sender, amount);\r\n        emit WithdrawTokens(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * withdrawAnyTokens\r\n     *\r\n     * Withdraw any tokens from the contract\r\n     *\r\n     * @param _tokenAddress is a token contract address\r\n     * @param amount is an amount of tokens\r\n     */\r\n    function withdrawAnyTokens(\r\n        address _tokenAddress,\r\n        uint256 amount\r\n    )\r\n        onlyOwner public\r\n    {\r\n        Token(_tokenAddress).transfer(msg.sender, amount);\r\n        emit WithdrawAnyTokens(_tokenAddress, msg.sender, amount);\r\n    }\r\n    \r\n    /**\r\n     * withdrawEther\r\n     *\r\n     * Withdraw ether from the contract\r\n     *\r\n     * @param amount is a wei amount \r\n     */\r\n    function withdrawEther(\r\n        uint256 amount\r\n    )\r\n        onlyOwner public\r\n    {\r\n        msg.sender.transfer(amount);\r\n        emit WithdrawEther(msg.sender, amount);\r\n    }\r\n\t\r\n\tfunction SaleRate(uint _rate) public onlyOwner {\r\n\t\trate = _rate;\r\n\t}\r\n\t\r\n\tfunction StartSale(uint _start) public onlyOwner {\r\n\t\tstart = _start;\r\n\t}\r\n\t\r\n\tfunction EndSale(uint _last) public onlyOwner {\r\n\t\tend = _last;\r\n\t}\r\n\t\r\n\tfunction EthReceiver(address _receiverAddress) public onlyOwner {\r\n\t\treceiverAddress = _receiverAddress;\r\n\t}\r\n\t\r\n\tmodifier OnGoing() {\r\n    require(now > start && now < end);\r\n    _;\r\n\t}\r\n\t\r\n\tfunction SetBonus(uint _pre_sale, uint _bonus_1, uint _bonus_2, uint _bonus_3, uint _bonus_4, uint _bonus_5) public onlyOwner {\r\n\t\tpre_sale = _pre_sale;\r\n\t\tbonus_1 = _bonus_1;\r\n\t\tbonus_2 = _bonus_2;\r\n\t\tbonus_3 = _bonus_3;\r\n\t\tbonus_4 = _bonus_4;\r\n\t\tbonus_5 = _bonus_5; \r\n\t}\r\n\r\n\tfunction BuyPubes() OnGoing payable public {\r\n\t\t\r\n\t\tuint tokens = rate.mul(msg.value).div(1 ether);\r\n\t\t\r\n\t\tuint BonusPubes = 0;\r\n\t\t\r\n\t\tif(now < start)  {\r\n\t\t\tBonusPubes = tokens.div(100).mul(pre_sale);\r\n\t\t} else if(now >= start && now < start + 7 days) { \t// 1st week\r\n\t\t\tBonusPubes = tokens.div(100).mul(bonus_1);\r\n\t\t} else if(now >= start && now < start + 14 days) { \t// 2nd week\r\n\t\t\tBonusPubes = tokens.div(100).mul(bonus_2);\r\n\t\t} else if(now >= start && now < start + 21 days) { \t// 3rd week\r\n\t\t\tBonusPubes = tokens.div(100).mul(bonus_3);\r\n\t\t} else if(now >= start && now < start + 35 days) { \t// 4th week\r\n\t\t\tBonusPubes = tokens.div(100).mul(bonus_4);\r\n\t\t} else if(now >= start && now < start + 42 days) { \t// 5th week\r\n\t\t\tBonusPubes = tokens.div(100).mul(bonus_5);\r\n\t\t} \r\n\t\t\r\n\t\tuint amountTobuy = msg.value;\r\n\t\tuint TotalWithBonus = tokens.add(BonusPubes);\r\n\t\t\r\n        uint TokenLeft = Token(tokenAddress).balanceOf(address(this));\r\n        require(amountTobuy > 0, \"You need to send some Ether\");\r\n        require(TotalWithBonus <= TokenLeft, \"Not enough tokens available\");\r\n\t\t\r\n\t\taddress payable wallet = address(uint160(receiverAddress));\r\n\t\twallet.transfer(msg.value);\r\n\t\t\r\n        Token(tokenAddress).transfer(msg.sender, TotalWithBonus);\r\n\t\t\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t\tBuyPubes();\r\n\t}\r\n\t\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAnyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyPubes\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_last\",\"type\":\"uint256\"}],\"name\":\"EndSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"EthReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"SaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pre_sale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus_1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus_2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus_3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus_4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus_5\",\"type\":\"uint256\"}],\"name\":\"SetBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"StartSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_sale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PubeTokenSale","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://507a0b632a90bdcf09615c460833fc84eaefd796a22c9e28864d79280841822d"}]}