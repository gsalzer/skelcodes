{"status":"1","message":"OK","result":[{"SourceCode":"/* yLAND FARMING CONTRACT */\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// File: @openzeppelin\\contracts\\math\\Math.sol\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n\t/**A\r\n\t * @dev Returns the largest of two numbers.\r\n\t */\r\n\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the smallest of two numbers.\r\n\t */\r\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the average of two numbers. The result is rounded towards\r\n\t * zero.\r\n\t */\r\n\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// (a + b) / 2 can overflow, so we distribute\r\n\t\treturn (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\interfaces\\IStakedRewardsPool.sol\r\n\r\ninterface IStakedRewardsPool {\r\n\t/* Views */\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction earned(address account) external view returns (uint256);\r\n\r\n\tfunction rewardsToken() external view returns (IERC20);\r\n\r\n\tfunction stakingToken() external view returns (IERC20);\r\n\r\n\tfunction stakingTokenDecimals() external view returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/* Mutators */\r\n\r\n\tfunction exit() external;\r\n\r\n\tfunction getReward() external;\r\n\r\n\tfunction pause() external;\r\n\r\n\tfunction recoverUnsupportedERC20(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external;\r\n\r\n\tfunction stake(uint256 amount) external;\r\n\r\n\tfunction unpause() external;\r\n\r\n\tfunction updateReward() external;\r\n\r\n\tfunction updateRewardFor(address account) external;\r\n\r\n\tfunction withdraw(uint256 amount) external;\r\n\r\n\t/* Events */\r\n\r\n\tevent RewardPaid(address indexed account, uint256 amount);\r\n\tevent Staked(address indexed account, uint256 amount);\r\n\tevent Withdrawn(address indexed account, uint256 amount);\r\n\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\r\n}\r\n\r\n// File: contracts\\interfaces\\IStakedRewardsPoolTimedRate.sol\r\n\r\ninterface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\r\n\t/* Views */\r\n\r\n\tfunction accruedRewardPerToken() external view returns (uint256);\r\n\r\n\tfunction hasEnded() external view returns (bool);\r\n\r\n\tfunction hasStarted() external view returns (bool);\r\n\r\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n\tfunction periodDuration() external view returns (uint256);\r\n\r\n\tfunction periodEndTime() external view returns (uint256);\r\n\r\n\tfunction periodStartTime() external view returns (uint256);\r\n\r\n\tfunction rewardRate() external view returns (uint256);\r\n\r\n\tfunction timeRemainingInPeriod() external view returns (uint256);\r\n\r\n\t/* Mutators */\r\n\r\n\tfunction addToRewardsAllocation(uint256 amount) external;\r\n\r\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\r\n\r\n\t/* Events */\r\n\r\n\tevent RewardAdded(uint256 amount);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Pausable.sol\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n\t/**\r\n\t * @dev Emitted when the pause is triggered by `account`.\r\n\t */\r\n\tevent Paused(address account);\r\n\r\n\t/**\r\n\t * @dev Emitted when the pause is lifted by `account`.\r\n\t */\r\n\tevent Unpaused(address account);\r\n\r\n\tbool private _paused;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract in unpaused state.\r\n\t */\r\n\tconstructor () {\r\n\t\t_paused = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the contract is paused, and false otherwise.\r\n\t */\r\n\tfunction paused() public view returns (bool) {\r\n\t\treturn _paused;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must not be paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!_paused, \"Pausable: paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is paused.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must be paused.\r\n\t */\r\n\tmodifier whenPaused() {\r\n\t\trequire(_paused, \"Pausable: not paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers stopped state.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must not be paused.\r\n\t */\r\n\tfunction _pause() internal virtual whenNotPaused {\r\n\t\t_paused = true;\r\n\t\temit Paused(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns to normal state.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must be paused.\r\n\t */\r\n\tfunction _unpause() internal virtual whenPaused {\r\n\t\t_paused = false;\r\n\t\temit Unpaused(_msgSender());\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tconstructor () {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and make it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) { // Return data is optional\r\n\t\t\t// solhint-disable-next-line max-line-length\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts\\StakedRewardsPool.sol\r\n\r\nabstract contract StakedRewardsPool is\r\n\tContext,\r\n\tReentrancyGuard,\r\n\tOwnable,\r\n\tPausable,\r\n\tIStakedRewardsPool\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* Mutable Internal State */\r\n\r\n\tmapping(address => uint256) internal _rewards;\r\n\r\n\t/* Immutable Private State */\r\n\r\n\tuint8 private _stakingTokenDecimals;\r\n\tIERC20 private _rewardsToken;\r\n\tIERC20 private _stakingToken;\r\n\tuint256 private _stakingTokenBase;\r\n\r\n\t/* Mutable Private State */\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tuint256 private _totalSupply;\r\n\r\n\t/* Constructor */\r\n\r\n\tconstructor(\r\n\t\tIERC20 rewardsToken,\r\n\t\tIERC20 stakingToken,\r\n\t\tuint8 stakingTokenDecimals\r\n\t) Ownable() {\r\n\t\t// Prevent overflow, though 76 would create a safe but unusable contract\r\n\t\trequire(\r\n\t\t\tstakingTokenDecimals < 77,\r\n\t\t\t\"StakedRewardsPool: staking token has far too many decimals\"\r\n\t\t);\r\n\r\n\t\t_rewardsToken = rewardsToken;\r\n\r\n\t\t_stakingToken = stakingToken;\r\n\t\t_stakingTokenDecimals = stakingTokenDecimals;\r\n\t\t_stakingTokenBase = 10**stakingTokenDecimals;\r\n\t}\r\n\r\n\t/* Public Views */\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction earned(address account)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\toverride\r\n\t\treturns (uint256);\r\n\r\n\tfunction rewardsToken() public view override returns (IERC20) {\r\n\t\treturn _rewardsToken;\r\n\t}\r\n\r\n\tfunction stakingToken() public view override returns (IERC20) {\r\n\t\treturn _stakingToken;\r\n\t}\r\n\r\n\tfunction stakingTokenDecimals() public view override returns (uint8) {\r\n\t\treturn _stakingTokenDecimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/* Public Mutators */\r\n\r\n\tfunction exit() public override nonReentrant {\r\n\t\t_exit();\r\n\t}\r\n\r\n\tfunction getReward() public override nonReentrant {\r\n\t\t_getReward();\r\n\t}\r\n\r\n\tfunction pause() public override onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\t// In the unlikely event that unsupported tokens are successfully sent to the\r\n\t// contract. This will also allow for removal of airdropped tokens.\r\n\tfunction recoverUnsupportedERC20(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) public override onlyOwner {\r\n\t\t_recoverUnsupportedERC20(token, to, amount);\r\n\t}\r\n\r\n\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\r\n\t\t_stakeFrom(_msgSender(), amount);\r\n\t}\r\n\r\n\tfunction unpause() public override onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n\r\n\tfunction updateReward() public override nonReentrant {\r\n\t\t_updateRewardFor(_msgSender());\r\n\t}\r\n\r\n\tfunction updateRewardFor(address account) public override nonReentrant {\r\n\t\t_updateRewardFor(account);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) public override nonReentrant {\r\n\t\t_withdraw(amount);\r\n\t}\r\n\r\n\t/* Internal Views */\r\n\r\n\tfunction _getStakingTokenBase() internal view returns (uint256) {\r\n\t\treturn _stakingTokenBase;\r\n\t}\r\n\r\n\t/* Internal Mutators */\r\n\r\n\tfunction _exit() internal virtual {\r\n\t\t_withdraw(_balances[_msgSender()]);\r\n\t\t_getReward();\r\n\t}\r\n\r\n\tfunction _getReward() internal virtual {\r\n\t\t_updateRewardFor(_msgSender());\r\n\t\tuint256 reward = _rewards[_msgSender()];\r\n\t\tif (reward > 0) {\r\n\t\t\t_rewards[_msgSender()] = 0;\r\n\t\t\t_rewardsToken.safeTransfer(_msgSender(), reward);\r\n\t\t\temit RewardPaid(_msgSender(), reward);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _recoverUnsupportedERC20(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(\r\n\t\t\ttoken != _stakingToken,\r\n\t\t\t\"StakedRewardsPool: cannot withdraw the staking token\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\ttoken != _rewardsToken,\r\n\t\t\t\"StakedRewardsPool: cannot withdraw the rewards token\"\r\n\t\t);\r\n\t\ttoken.safeTransfer(to, amount);\r\n\t\temit Recovered(token, to, amount);\r\n\t}\r\n\r\n\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\r\n\t\trequire(\r\n\t\t\taccount != address(0),\r\n\t\t\t\"StakedRewardsPool: cannot stake from the zero address\"\r\n\t\t);\r\n\t\trequire(amount > 0, \"StakedRewardsPool: cannot stake zero\");\r\n\t\t_updateRewardFor(account);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\t_stakingToken.safeTransferFrom(account, address(this), amount);\r\n\t\temit Staked(account, amount);\r\n\t}\r\n\r\n\tfunction _updateRewardFor(address account) internal virtual;\r\n\r\n\tfunction _withdraw(uint256 amount) internal virtual {\r\n\t\trequire(amount > 0, \"StakedRewardsPool: cannot withdraw zero\");\r\n\t\t_updateRewardFor(_msgSender());\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\r\n\t\t_stakingToken.safeTransfer(_msgSender(), amount);\r\n\t\temit Withdrawn(_msgSender(), amount);\r\n\t}\r\n}\r\n\r\n// File: contracts\\StakedRewardsPoolTimedRate.sol\r\n\r\n// Accuracy in block.timestamps is not needed.\r\n// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\r\n/* solhint-disable not-rely-on-time */\r\n\r\ncontract StakedRewardsPoolTimedRate is\r\n\tStakedRewardsPool,\r\n\tIStakedRewardsPoolTimedRate\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* Mutable Private State */\r\n\r\n\tuint256 private _accruedRewardPerToken;\r\n\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\r\n\tuint256 private _lastUpdateTime;\r\n\tuint256 private _periodEndTime;\r\n\tuint256 private _periodStartTime;\r\n\tuint256 private _rewardRate;\r\n\r\n\t/* Modifiers */\r\n\r\n\tmodifier whenStarted {\r\n\t\trequire(\r\n\t\t\thasStarted(),\r\n\t\t\t\"StakedRewardsPoolTimedRate: current rewards distribution period has not yet begun\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\t/* Constructor */\r\n\r\n\tconstructor(\r\n\t\tIERC20 rewardsToken,\r\n\t\tIERC20 stakingToken,\r\n\t\tuint8 stakingTokenDecimals,\r\n\t\tuint256 periodStartTime,\r\n\t\tuint256 periodEndTime\r\n\t) StakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\r\n\t\t_periodStartTime = periodStartTime;\r\n\t\t_periodEndTime = periodEndTime;\r\n\t}\r\n\r\n\t/* Public Views */\r\n\r\n\t// Represents the ratio of reward token to staking token accrued thus far,\r\n\t// multiplied by 10**stakingTokenDecimal in case of a fraction.\r\n\tfunction accruedRewardPerToken() public view override returns (uint256) {\r\n\t\tuint256 totalSupply = totalSupply();\r\n\t\tif (totalSupply == 0) {\r\n\t\t\treturn _accruedRewardPerToken;\r\n\t\t}\r\n\r\n\t\tuint256 lastUpdateTime = _lastUpdateTime;\r\n\t\tuint256 lastTimeApplicable = lastTimeRewardApplicable();\r\n\r\n\t\t// Allow staking at any time without earning undue rewards\r\n\t\t// The following is guaranteed if the next `if` is true:\r\n\t\t// lastUpdateTime == previous _periodEndTime || lastUpdateTime == 0\r\n\t\tif (_periodStartTime > lastUpdateTime) {\r\n\t\t\t// Prevent underflow\r\n\t\t\tif (_periodStartTime > lastTimeApplicable) {\r\n\t\t\t\treturn _accruedRewardPerToken;\r\n\t\t\t}\r\n\t\t\tlastUpdateTime = _periodStartTime;\r\n\t\t}\r\n\r\n\t\tuint256 dt = lastTimeApplicable.sub(lastUpdateTime);\r\n\t\tif (dt == 0) {\r\n\t\t\treturn _accruedRewardPerToken;\r\n\t\t}\r\n\r\n\t\tuint256 accruedReward = _rewardRate.mul(dt);\r\n\r\n\t\treturn\r\n\t\t\t_accruedRewardPerToken.add(\r\n\t\t\t\taccruedReward.mul(_getStakingTokenBase()).div(totalSupply)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction earned(address account)\r\n\t\tpublic\r\n\t\tview\r\n\t\toverride(IStakedRewardsPool, StakedRewardsPool)\r\n\t\treturns (uint256)\r\n\t{\r\n\t\t// Divide by stakingTokenBase in accordance with accruedRewardPerToken()\r\n\t\treturn\r\n\t\t\tbalanceOf(account)\r\n\t\t\t\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\r\n\t\t\t\t.div(_getStakingTokenBase())\r\n\t\t\t\t.add(_rewards[account]);\r\n\t}\r\n\r\n\tfunction hasStarted() public view override returns (bool) {\r\n\t\treturn block.timestamp >= _periodStartTime;\r\n\t}\r\n\r\n\tfunction hasEnded() public view override returns (bool) {\r\n\t\treturn block.timestamp >= _periodEndTime;\r\n\t}\r\n\r\n\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\r\n\t\t// Returns 0 if we have never run a staking period.\r\n\t\t// Returns _periodEndTime if we have but we're not in a staking period.\r\n\t\tif (!hasStarted()) {\r\n\t\t\treturn _lastUpdateTime;\r\n\t\t}\r\n\t\treturn Math.min(block.timestamp, _periodEndTime);\r\n\t}\r\n\r\n\tfunction periodDuration() public view override returns (uint256) {\r\n\t\treturn _periodEndTime.sub(_periodStartTime);\r\n\t}\r\n\r\n\tfunction periodEndTime() public view override returns (uint256) {\r\n\t\treturn _periodEndTime;\r\n\t}\r\n\r\n\tfunction periodStartTime() public view override returns (uint256) {\r\n\t\treturn _periodStartTime;\r\n\t}\r\n\r\n\tfunction rewardRate() public view override returns (uint256) {\r\n\t\treturn _rewardRate;\r\n\t}\r\n\r\n\tfunction timeRemainingInPeriod()\r\n\t\tpublic\r\n\t\tview\r\n\t\toverride\r\n\t\twhenStarted\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif (hasEnded()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn _periodEndTime.sub(block.timestamp);\r\n\t}\r\n\r\n\t/* Public Mutators */\r\n\r\n\tfunction addToRewardsAllocation(uint256 amount)\r\n\t\tpublic\r\n\t\toverride\r\n\t\tnonReentrant\r\n\t\tonlyOwner\r\n\t{\r\n\t\t_addToRewardsAllocation(amount);\r\n\t}\r\n\r\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime)\r\n\t\tpublic\r\n\t\toverride\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(\r\n\t\t\t!hasStarted() || hasEnded(),\r\n\t\t\t\"StakedRewardsPoolTimedRate: cannot change an ongoing staking period\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tendTime > startTime,\r\n\t\t\t\"StakedRewardsPoolTimedRate: endTime must be greater than startTime\"\r\n\t\t);\r\n\t\t// The lastTimeRewardApplicable() function would not allow rewards for a\r\n\t\t// past period that was never started.\r\n\t\trequire(\r\n\t\t\tstartTime > block.timestamp,\r\n\t\t\t\"StakedRewardsPoolTimedRate: startTime must be greater than the current block time\"\r\n\t\t);\r\n\t\t// Ensure that rewards are fully granted before changing the period.\r\n\t\t_updateAccrual();\r\n\r\n\t\tif (hasEnded()) {\r\n\t\t\t// Reset reward rate if this a brand new period (not changing one)\r\n\t\t\t// Note that you MUST addToRewardsAllocation again if you forgot to call\r\n\t\t\t// this after the previous period ended but before adding rewards.\r\n\t\t\t_rewardRate = 0;\r\n\t\t} else {\r\n\t\t\t// Update reward rate for new duration\r\n\t\t\tuint256 totalReward = _rewardRate.mul(periodDuration());\r\n\t\t\t_rewardRate = totalReward.div(endTime.sub(startTime));\r\n\t\t}\r\n\r\n\t\t_periodStartTime = startTime;\r\n\t\t_periodEndTime = endTime;\r\n\t}\r\n\r\n\t/* Internal Mutators */\r\n\r\n\t// Ensure that the amount param is equal to the amount you've added to the contract, otherwise the funds will run out before _periodEndTime.\r\n\t// If called during an ongoing staking period, the amount will be allocated\r\n\t// to the current staking period.\r\n\t// If called before or after a staking period, the amount will only be\r\n\t// applied to the next staking period.\r\n\tfunction _addToRewardsAllocation(uint256 amount) internal {\r\n\t\t// TODO Require that amount <= available rewards.\r\n\t\t_updateAccrual();\r\n\r\n\t\t// Update reward rate based on remaining time\r\n\t\tuint256 remainingTime;\r\n\t\tif (!hasStarted() || hasEnded()) {\r\n\t\t\tremainingTime = periodDuration();\r\n\t\t} else {\r\n\t\t\tremainingTime = timeRemainingInPeriod();\r\n\t\t}\r\n\r\n\t\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\r\n\r\n\t\temit RewardAdded(amount);\r\n\t}\r\n\r\n\tfunction _updateAccrual() internal {\r\n\t\t_accruedRewardPerToken = accruedRewardPerToken();\r\n\t\t_lastUpdateTime = lastTimeRewardApplicable();\r\n\t}\r\n\r\n\t// This logic is needed for any interaction that may manipulate rewards.\r\n\tfunction _updateRewardFor(address account) internal override {\r\n\t\t_updateAccrual();\r\n\t\t// Allocate due rewards.\r\n\t\t_rewards[account] = earned(account);\r\n\t\t// Remove ability to earn rewards on or before the current timestamp.\r\n\t\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakingTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"periodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToRewardsAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setNewPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRemainingInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakedRewardsPoolTimedRate","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0658324074d6249a51876438916f7c423075451000000000000000000000000d24314cccb742cee02c23e815b5fbf930bdd16c50000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000005f874ab0000000000000000000000000000000000000000000000000000000005fd7b630","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://196fb66a4e85d80544dccd9b99a4aa7693cfde944f0adb60e64305e852f37c55"}]}