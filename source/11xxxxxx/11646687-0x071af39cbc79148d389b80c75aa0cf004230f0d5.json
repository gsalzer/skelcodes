{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/modules/common/IModule.sol\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.5.4 <0.7.0;\r\n\r\n/**\r\n * @title IModule\r\n * @notice Interface for a module.\r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface IModule {\r\n    /**\r\n     * @notice Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(address _wallet) external;\r\n\r\n    /**\t\r\n     * @notice Adds a module to a wallet. Cannot execute when wallet is locked (or under recovery)\t\r\n     * @param _wallet The target wallet.\t\r\n     * @param _module The modules to authorise.\t\r\n     */\t\r\n    function addModule(address _wallet, address _module) external;\r\n}\r\n\r\n// File: contracts/infrastructure/IModuleRegistry.sol\r\n\r\n// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.4 <0.7.0;\r\n\r\n/**\r\n * @title IModuleRegistry\r\n * @notice Interface for the registry of authorised modules.\r\n */\r\ninterface IModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n\r\n    function deregisterModule(address _module) external;\r\n\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n\r\n    function deregisterUpgrader(address _upgrader) external;\r\n\r\n    function recoverToken(address _token) external;\r\n\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\n// File: contracts/infrastructure/storage/ILockStorage.sol\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.4 <0.7.0;\r\n\r\ninterface ILockStorage {\r\n    function isLocked(address _wallet) external view returns (bool);\r\n\r\n    function getLock(address _wallet) external view returns (uint256);\r\n\r\n    function getLocker(address _wallet) external view returns (address);\r\n\r\n    function setLock(address _wallet, address _locker, uint256 _releaseAfter) external;\r\n}\r\n\r\n// File: contracts/wallet/IWallet.sol\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.4 <0.7.0;\r\n\r\n/**\r\n * @title IWallet\r\n * @notice Interface for the BaseWallet\r\n */\r\ninterface IWallet {\r\n    /**\r\n     * @notice Returns the wallet owner.\r\n     * @return The wallet owner address.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the number of authorised modules.\r\n     * @return The number of authorised modules.\r\n     */\r\n    function modules() external view returns (uint);\r\n\r\n    /**\r\n     * @notice Sets a new owner for the wallet.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function setOwner(address _newOwner) external;\r\n\r\n    /**\r\n     * @notice Checks if a module is authorised on the wallet.\r\n     * @param _module The module address to check.\r\n     * @return `true` if the module is authorised, otherwise `false`.\r\n     */\r\n    function authorised(address _module) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the module responsible for a static call redirection.\r\n     * @param _sig The signature of the static call.\r\n     * @return the module doing the redirection\r\n     */\r\n    function enabled(bytes4 _sig) external view returns (address);\r\n\r\n    /**\r\n     * @notice Enables/Disables a module.\r\n     * @param _module The target module.\r\n     * @param _value Set to `true` to authorise the module.\r\n     */\r\n    function authoriseModule(address _module, bool _value) external;\r\n\r\n    /**\r\n    * @notice Enables a static method by specifying the target module to which the call must be delegated.\r\n    * @param _module The target module.\r\n    * @param _method The static method signature.\r\n    */\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n}\r\n\r\n// File: contracts/modules/SimpleUpgrader.sol\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SimpleUpgrader\r\n * @notice Temporary module used to add/remove other modules.\r\n * @author Olivier VDB - <olivier@argent.xyz>, Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract SimpleUpgrader is IModule {\r\n\r\n    IModuleRegistry private registry;\r\n    ILockStorage private lockStorage;\r\n    address[] public toDisable;\r\n    address[] public toEnable;\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(\r\n        IModuleRegistry _registry,\r\n        ILockStorage _lockStorage,\r\n        address[] memory _toDisable,\r\n        address[] memory _toEnable\r\n    )\r\n        public\r\n    {\r\n        registry = _registry;\r\n        lockStorage = _lockStorage;\r\n        toDisable = _toDisable;\r\n        toEnable = _toEnable;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n     * @notice Perform the upgrade for a wallet. This method gets called when SimpleUpgrader is temporarily added as a module.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(address _wallet) external override {\r\n        require(msg.sender == _wallet, \"SU: only wallet can call init\");\r\n        require(!lockStorage.isLocked(_wallet), \"SU: wallet locked\");\r\n        require(registry.isRegisteredModule(toEnable), \"SU: Not all modules are registered\");\r\n\r\n        uint256 i = 0;\r\n        //add new modules\r\n        for (; i < toEnable.length; i++) {\r\n            IWallet(_wallet).authoriseModule(toEnable[i], true);\r\n        }\r\n        //remove old modules\r\n        for (i = 0; i < toDisable.length; i++) {\r\n            IWallet(_wallet).authoriseModule(toDisable[i], false);\r\n        }\r\n        // SimpleUpgrader did its job, we no longer need it as a module\r\n        IWallet(_wallet).authoriseModule(address(this), false);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModule\r\n     */\r\n    function addModule(address _wallet, address _module) external override {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IModuleRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract ILockStorage\",\"name\":\"_lockStorage\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_toDisable\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_toEnable\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toDisable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SimpleUpgrader","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fcfab7cdc0613fea78982ebd52559b7362db79760000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://461bb1a8db075d5f3bf51febabb8adf9c4ccad973b3caec4df88b23668c81c1d"}]}