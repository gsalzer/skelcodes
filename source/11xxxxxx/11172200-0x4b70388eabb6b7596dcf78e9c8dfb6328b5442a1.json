{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * \"Insure\" (v0.1 beta)\r\n * A tool to allow easy farming backed by collateral to protect your assets.\r\n * \r\n * For more info checkout: https://squirrel.finance\r\n * \r\n */\r\n\r\n\r\ncontract InsureCollateral {\r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 usdc = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n    OracleSimpleETHUSDC twap = OracleSimpleETHUSDC(0x27b4BADaDd381d92D927645a26F2E5e2E170140f);\r\n    UniswapV2 uniswap = UniswapV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address insure;\r\n    address blobby = msg.sender;\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => int256) payoutsTo;\r\n    mapping(address => uint256) public cashoutTimer;\r\n    mapping(address => uint256) public cashoutAmount;\r\n    \r\n    uint256 public totalDeposits;\r\n    uint256 public pendingCashouts;\r\n    \r\n    uint256 profitPerShare;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    \r\n    bool twapRequired = true;\r\n    uint256 twapPercentMin = 95; \r\n    \r\n    function setupInsure(address insureContract) external {\r\n        require(msg.sender == blobby && insure == 0); // One-off setup\r\n        insure = insureContract;\r\n    }\r\n    \r\n    function adjustTWAP(bool required, uint256 percentMin) external {\r\n        require(msg.sender == blobby);\r\n        require(percentMin < 100);\r\n        twapRequired = required;\r\n        twapPercentMin = percentMin;\r\n    }\r\n    \r\n    function deposit(address recipient) payable external {\r\n        require(recipient != 0);\r\n        uint256 amount = msg.value;\r\n        totalDeposits += amount;\r\n        balances[recipient] += amount;\r\n        payoutsTo[recipient] += (int256) (profitPerShare * amount);\r\n        twap.update();\r\n    }\r\n    \r\n    function beginCashout(uint256 amount) external {\r\n        address recipient = msg.sender;\r\n        require(cashoutTimer[recipient] == 0);\r\n        claimYield();\r\n        balances[recipient] = balances[recipient].sub(amount);\r\n        totalDeposits = totalDeposits.sub(amount);\r\n        pendingCashouts += amount;\r\n        payoutsTo[recipient] -= (int256) (profitPerShare * amount);\r\n        \r\n        cashoutAmount[recipient] = amount;\r\n        cashoutTimer[recipient] = now + 48 hours;\r\n    }\r\n    \r\n    function doCashout() external {\r\n        address recipient = msg.sender;\r\n        require(cashoutTimer[recipient] < now);\r\n        \r\n        uint256 amount = cashoutAmount[recipient];\r\n        uint256 ethShare = (address(this).balance * amount) / (totalDeposits + pendingCashouts);\r\n        \r\n        pendingCashouts = pendingCashouts.sub(amount);\r\n        cashoutTimer[recipient] = 0;\r\n        cashoutAmount[recipient] = 0;\r\n        \r\n        recipient.transfer(ethShare);\r\n        twap.update();\r\n    }\r\n    \r\n    function claimYield() public {\r\n        address recipient = msg.sender;\r\n        uint256 dividends = (uint256) ((int256)(profitPerShare * balances[recipient]) - payoutsTo[recipient]) / magnitude;\r\n        if (dividends > 0) {\r\n            payoutsTo[recipient] += (int256) (dividends * magnitude);\r\n            bond.transfer(recipient, dividends);\r\n        }\r\n        twap.update();\r\n    }\r\n    \r\n    function shareYield(uint256 amount) external {\r\n        require(bond.transferFrom(msg.sender, this, amount));\r\n        profitPerShare += (amount * magnitude) / totalDeposits;\r\n    }\r\n    \r\n    function compensate(uint256 amountShort, uint256 farmersAmount, uint256 systemAmount) external returns(uint256) {\r\n        require(msg.sender == insure);\r\n        require(farmersAmount > 0);\r\n        \r\n        uint256 portion = (address(this).balance * farmersAmount) / systemAmount;\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        path[1] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n        uint[] memory amounts = uniswap.getAmountsOut(portion, path);\r\n        \r\n        if (twapRequired) { // beta oracle protection for eth price\r\n            require(amounts[1] > (twap.consult(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, portion) * twapPercentMin) / 100);\r\n        }\r\n        \r\n        uint256 raised;\r\n        if (amounts[1] >= amountShort) {\r\n            amounts = uniswap.getAmountsIn(amountShort, path);\r\n            uniswap.swapETHForExactTokens.value(amounts[0])(amountShort, path, this, 2 ** 255);\r\n            raised = amountShort;\r\n        } else {\r\n            amounts = uniswap.swapExactETHForTokens.value(portion)(1, path, this, 2 ** 255);\r\n            raised = amounts[1];\r\n        }\r\n        require(usdc.transfer(msg.sender, raised));\r\n        return raised;\r\n    }\r\n    \r\n    function dividendsOf(address farmer) view public returns (uint256) {\r\n        return (uint256) ((int256)(profitPerShare * balances[farmer]) - payoutsTo[farmer]) / magnitude;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract NutsStaking {\r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 nuts = ERC20(0x84294FC9710e1252d407d3D80A84bC39001bd4A8);\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => int256) payoutsTo;\r\n    \r\n    uint256 public totalDeposits;\r\n    uint256 profitPerShare;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    \r\n    function receiveApproval(address player, uint256 amount, address, bytes) external {\r\n        require(msg.sender == address(nuts));\r\n        nuts.transferFrom(player, this, amount);\r\n        totalDeposits += amount;\r\n        balances[player] += amount;\r\n        payoutsTo[player] += (int256) (profitPerShare * amount);\r\n    }\r\n    \r\n    function cashout(uint256 amount) external {\r\n        address recipient = msg.sender;\r\n        claimYield();\r\n        balances[recipient] = balances[recipient].sub(amount);\r\n        totalDeposits = totalDeposits.sub(amount);\r\n        payoutsTo[recipient] -= (int256) (profitPerShare * amount);\r\n        nuts.transfer(recipient, amount);\r\n    }\r\n    \r\n    function claimYield() public {\r\n        address recipient = msg.sender;\r\n        uint256 dividends = (uint256) ((int256)(profitPerShare * balances[recipient]) - payoutsTo[recipient]) / magnitude;\r\n        payoutsTo[recipient] += (int256) (dividends * magnitude);\r\n        bond.transfer(recipient, dividends);\r\n    }\r\n    \r\n    function shareYield(uint256 amount) external {\r\n        require(bond.transferFrom(msg.sender, this, amount));\r\n        profitPerShare += (amount * magnitude) / totalDeposits;\r\n    }\r\n    \r\n    function dividendsOf(address farmer) view public returns (uint256) {\r\n        return (uint256) ((int256)(profitPerShare * balances[farmer]) - payoutsTo[farmer]) / magnitude;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface BarnBridgeStaking {\r\n    function deposit(address tokenAddress, uint256 amount) external;\r\n    function withdraw(address tokenAddress, uint256 amount) external;\r\n    function emergencyWithdraw(address tokenAddress) external;\r\n}\r\n\r\ninterface BarnBridgeRewards {\r\n    function massHarvest() external returns (uint);\r\n}\r\n\r\n\r\ninterface UniswapV2 {\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable external returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] path) external view returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// fixed window oracle that recomputes the average price for the entire period once every period\r\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\r\ncontract OracleSimpleETHUSDC {\r\n    using FixedPoint for *;\r\n\r\n    uint256 public constant PERIOD = 24 hours;\r\n    address public constant pair = address(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);\r\n    address public constant eth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint32 public blockTimestampLast;\r\n    FixedPoint.uq112x112 public price0Average;\r\n    FixedPoint.uq112x112 public price1Average;\r\n\r\n    function update() external {\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n\r\n        // ensure that at least one full period has passed since the last update\r\n       if (timeElapsed >= PERIOD) {\r\n            // overflow is desired, casting never truncates\r\n            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n            price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\r\n            price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\r\n    \r\n            price0CumulativeLast = price0Cumulative;\r\n            price1CumulativeLast = price1Cumulative;\r\n            blockTimestampLast = blockTimestamp;\r\n       }\r\n    }\r\n\r\n    function consult(address token, uint amountIn) external view returns (uint amountOut) {\r\n        if (token == usdc) {\r\n            amountOut = price0Average.mul(amountIn).decode144();\r\n        } else {\r\n            require(token == eth);\r\n            amountOut = price1Average.mul(amountIn).decode144();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n}\r\n\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\r\n    uint256 private constant Q224 = Q112 << RESOLUTION;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z = 0;\r\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint: MUL_OVERFLOW');\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // multiply a UQ112x112 by an int and decode, returning an int\r\n    // reverts on overflow\r\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\r\n        uint144 z = decode144(mul(self, uint256(y < 0 ? -y : y)));\r\n        return y < 0 ? -int256(z) : z;\r\n    }\r\n\r\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    // lossy\r\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        if (self._x == 0 || other._x == 0) {\r\n            return uq112x112(0);\r\n        }\r\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\r\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\r\n\r\n        // partial products\r\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\r\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\r\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\r\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\r\n\r\n        // so the bit shift does not overflow\r\n        require(upper <= uint112(-1), 'FixedPoint: MULUQ_OVERFLOW_UPPER');\r\n\r\n        // this cannot exceed 256 bits, all values are 224 bits\r\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\r\n\r\n        // so the cast does not overflow\r\n        require(sum <= uint224(-1), 'FixedPoint: MULUQ_OVERFLOW_SUM');\r\n\r\n        return uq112x112(uint224(sum));\r\n    }\r\n\r\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        require(other._x > 0, 'FixedPoint: DIV_BY_ZERO_DIVUQ');\r\n        if (self._x == other._x) {\r\n            return uq112x112(uint224(Q112));\r\n        }\r\n        if (self._x <= uint144(-1)) {\r\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\r\n            require(value <= uint224(-1), 'FixedPoint: DIVUQ_OVERFLOW');\r\n            return uq112x112(uint224(value));\r\n        }\r\n\r\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\r\n        require(result <= uint224(-1), 'FixedPoint: DIVUQ_OVERFLOW');\r\n        return uq112x112(uint224(result));\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // lossy\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint: DIV_BY_ZERO_FRACTION');\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    // reverts on overflow\r\n    // lossy\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x > 1, 'FixedPoint: DIV_BY_ZERO_RECIPROCAL_OR_OVERFLOW');\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    // lossy to 40 bits\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 32) << 40));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        require(h < z);\r\n        uint256 mm = mulmod(x, y, z);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        uint256 pow2 = z & -z;\r\n        z /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        return l * r;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"beginCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashoutTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountShort\",\"type\":\"uint256\"},{\"name\":\"farmersAmount\",\"type\":\"uint256\"},{\"name\":\"systemAmount\",\"type\":\"uint256\"}],\"name\":\"compensate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shareYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"insureContract\",\"type\":\"address\"}],\"name\":\"setupInsure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingCashouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"required\",\"type\":\"bool\"},{\"name\":\"percentMin\",\"type\":\"uint256\"}],\"name\":\"adjustTWAP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InsureCollateral","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0210681530b57cd653ba690d8fe8504d8179e0b9ff858046879e041480133da0"}]}