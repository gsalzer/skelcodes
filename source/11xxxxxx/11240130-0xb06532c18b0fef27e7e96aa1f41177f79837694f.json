{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal virtual view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal virtual view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/StonkMarket.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IStonkTaxPool {\r\n  function addRewards(uint256 _amount) external;\r\n}\r\n\r\ncontract StonkMarket is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct Negotiation {\r\n    uint256 amount;\r\n    address player;\r\n    address other;\r\n  }\r\n\r\n  mapping(address => uint256) public stakedBalances;\r\n  mapping(address => string) public spoNames;\r\n\r\n  mapping(address => uint8) public hasStaked;\r\n\r\n  address[] private _stakerAddresses;\r\n  uint256 private _stakerAddressesLength;\r\n  uint256 private _totalStaked;\r\n\r\n  bool public isNegotiationPaused = false;\r\n\r\n  IERC20 public stonkToken;\r\n  IStonkTaxPool public stonkTaxPool;\r\n\r\n  uint256 public taxPerNegotiation = 100; // 1% tax\r\n  uint256 public taxPerWithdrawal = 100; // 1% tax\r\n  uint256 public maxTakeoverPercent = 5000; // 50% max takeover\r\n  uint256 public negotiatorAdvantage = 200; // 2% advantage\r\n  uint256 public minimumStake = 1; // 1e-18 minimum stake\r\n\r\n  address payable public treasury;\r\n\r\n  event SPOCreated(\r\n    address player,\r\n    uint256 amount,\r\n    string name,\r\n    uint256 timestamp\r\n  );\r\n  event SPOWithdrawn(address player, uint256 amount, string name);\r\n  event AcquisitionNegotiated(\r\n    address spoA,\r\n    address spoB,\r\n    string spoAName,\r\n    string spoBName,\r\n    bool winner,\r\n    uint256 amount,\r\n    uint256 amountWon,\r\n    uint256 timestamp\r\n  );\r\n\r\n  modifier onlyEOA() {\r\n    require(msg.sender == tx.origin, 'Not eoa');\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    IERC20 _stonkToken,\r\n    IStonkTaxPool _stonkTaxPool,\r\n    address payable _treasury\r\n  ) public {\r\n    stonkToken = _stonkToken;\r\n    stonkTaxPool = _stonkTaxPool;\r\n    treasury = _treasury;\r\n  }\r\n\r\n  function stakerAddresses() public view returns (address[] memory) {\r\n    return _stakerAddresses;\r\n  }\r\n\r\n  function stakerAddressesLength() public view returns (uint256) {\r\n    return _stakerAddressesLength;\r\n  }\r\n\r\n  function totalStaked() public view returns (uint256) {\r\n    return _totalStaked;\r\n  }\r\n\r\n  function setTaxPerNegotiation(uint256 _taxPerNegotiation) external onlyOwner {\r\n    taxPerNegotiation = _taxPerNegotiation;\r\n  }\r\n\r\n  function setTaxPerWithdrawal(uint256 _taxPerWithdrawal) external onlyOwner {\r\n    taxPerWithdrawal = _taxPerWithdrawal;\r\n  }\r\n\r\n  function setStonkTaxPool(IStonkTaxPool _stonkTaxPool) external onlyOwner {\r\n    stonkTaxPool = _stonkTaxPool;\r\n  }\r\n\r\n  function setMinimumStake(uint256 _minimumStake) external onlyOwner {\r\n    minimumStake = _minimumStake;\r\n  }\r\n\r\n  function setNegotiationPaused(bool value) external onlyOwner {\r\n    isNegotiationPaused = value;\r\n  }\r\n\r\n  function setMaxTakeoverPercent(uint256 _maxTakeoverPercent)\r\n    external\r\n    onlyOwner\r\n  {\r\n    maxTakeoverPercent = _maxTakeoverPercent;\r\n  }\r\n\r\n  function addressesInRange(uint256 start, uint256 end)\r\n    external\r\n    view\r\n    returns (address[] memory)\r\n  {\r\n    require(end > start, 'Invalid bounds');\r\n\r\n    address[] memory addresses;\r\n\r\n    for (uint256 i; i < start - end; i++) {\r\n      addresses[i] = _stakerAddresses[start + i];\r\n    }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  function _rng(uint256 _seed) internal view returns (uint256) {\r\n    return\r\n      uint256(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            (block.timestamp)\r\n              .add(_seed)\r\n              .add(block.difficulty)\r\n              .add(\r\n              (uint256(keccak256(abi.encodePacked(block.coinbase)))) /\r\n                block.timestamp\r\n            )\r\n              .add(block.gaslimit)\r\n              .add(\r\n              (uint256(keccak256(abi.encodePacked(msg.sender)))) /\r\n                block.timestamp\r\n            )\r\n              .add(block.number)\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  function launchSPO(uint256 amount, string memory name) public {\r\n    require(amount > minimumStake, 'Invalid amount.');\r\n    require(bytes(name).length >= 1, 'SPO name must be >= 1 byte');\r\n    require(bytes(name).length <= 4, 'SPO name must be <= 4 bytes');\r\n\r\n    require(\r\n      stonkToken.transferFrom(msg.sender, address(this), amount),\r\n      'Transfer failed'\r\n    );\r\n\r\n    spoNames[msg.sender] = name;\r\n    stakedBalances[msg.sender] = stakedBalances[msg.sender].add(amount);\r\n\r\n    _totalStaked = _totalStaked.add(amount);\r\n\r\n    if (hasStaked[msg.sender] == 0) {\r\n      _stakerAddresses.push(msg.sender);\r\n      _stakerAddressesLength++;\r\n      hasStaked[msg.sender] = 1;\r\n    }\r\n\r\n    emit SPOCreated(msg.sender, amount, name, block.timestamp);\r\n  }\r\n\r\n  function maxNegotiationAmount(address spo) public view returns (uint256) {\r\n    return stakedBalances[spo].mul(maxTakeoverPercent).div(10000);\r\n  }\r\n\r\n  function enterNegotiation(address opponentSpo, uint256 amount)\r\n    external\r\n    onlyEOA\r\n  {\r\n    require(amount > minimumStake, 'Invalid amount.');\r\n    require(isNegotiationPaused == false, 'Negotiations are paused');\r\n    require(opponentSpo != msg.sender, 'Invalid opponent');\r\n    require(stakedBalances[msg.sender] >= amount, 'Insufficient balance');\r\n\r\n    require(\r\n      maxNegotiationAmount(opponentSpo) >= amount,\r\n      'Insufficient opponent balance'\r\n    );\r\n\r\n    address player = msg.sender;\r\n    address other = opponentSpo;\r\n    uint256 amountTaxed = amount.mul(taxPerNegotiation).div(10000);\r\n    uint256 amountWon = amount.sub(amountTaxed);\r\n\r\n    stonkToken.approve(address(stonkTaxPool), amountTaxed);\r\n    stonkTaxPool.addRewards(amountTaxed);\r\n\r\n    uint256 midpoint = uint256(5000).sub(\r\n      uint256(10000).mul(negotiatorAdvantage.div(2)).div(10000)\r\n    );\r\n    uint256 rngBetweenOneAndOneHundred = _rng(stakedBalances[player]) % 10000;\r\n    bool winner = false;\r\n\r\n    if (rngBetweenOneAndOneHundred >= midpoint) {\r\n      winner = true;\r\n\r\n      stakedBalances[player] = stakedBalances[player].add(amountWon);\r\n      stakedBalances[other] = stakedBalances[other].sub(amount);\r\n    } else {\r\n      stakedBalances[other] = stakedBalances[other].add(amountWon);\r\n      stakedBalances[player] = stakedBalances[player].sub(amount);\r\n    }\r\n\r\n    emit AcquisitionNegotiated(\r\n      player,\r\n      other,\r\n      spoNames[player],\r\n      spoNames[other],\r\n      winner,\r\n      amount,\r\n      amountWon,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function withdraw(uint256 amount) external {\r\n    require(stakedBalances[msg.sender] >= amount, 'Insufficient balance');\r\n\r\n    uint256 amountTaxed = amount.mul(taxPerWithdrawal).div(10000);\r\n    stonkToken.approve(address(stonkTaxPool), amountTaxed);\r\n    stonkTaxPool.addRewards(amountTaxed);\r\n\r\n    uint256 amountAfterTax = amount.sub(amountTaxed);\r\n\r\n    stakedBalances[msg.sender] = stakedBalances[msg.sender].sub(amount);\r\n    _totalStaked = _totalStaked.sub(amount);\r\n\r\n    require(safeStonkTransfer(msg.sender, amountAfterTax), 'Transfer failed');\r\n\r\n    emit SPOWithdrawn(msg.sender, amount, spoNames[msg.sender]);\r\n  }\r\n\r\n  function safeStonkTransfer(address _to, uint256 _amount)\r\n    internal\r\n    returns (bool)\r\n  {\r\n    uint256 stonkBal = stonkToken.balanceOf(address(this));\r\n\r\n    if (_amount > stonkBal) {\r\n      return stonkToken.transfer(_to, stonkBal);\r\n    } else {\r\n      return stonkToken.transfer(_to, _amount);\r\n    }\r\n  }\r\n\r\n  // This function send any eth remaining from oracle fees, to treasury\r\n  function flushEth() public {\r\n    treasury.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stonkToken\",\"type\":\"address\"},{\"internalType\":\"contract IStonkTaxPool\",\"name\":\"_stonkTaxPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spoA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spoB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"spoAName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"spoBName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AcquisitionNegotiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SPOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"SPOWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"addressesInRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opponentSpo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enterNegotiation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNegotiationPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"launchSPO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spo\",\"type\":\"address\"}],\"name\":\"maxNegotiationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTakeoverPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"negotiatorAdvantage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTakeoverPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTakeoverPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setNegotiationPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStonkTaxPool\",\"name\":\"_stonkTaxPool\",\"type\":\"address\"}],\"name\":\"setStonkTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPerNegotiation\",\"type\":\"uint256\"}],\"name\":\"setTaxPerNegotiation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPerWithdrawal\",\"type\":\"uint256\"}],\"name\":\"setTaxPerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spoNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stonkTaxPool\",\"outputs\":[{\"internalType\":\"contract IStonkTaxPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stonkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPerNegotiation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPerWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StonkMarket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000060ca261e14f26e8daae8b1a7f8e783d64859126c0000000000000000000000001ee1a9bcbcebe4397e7256d6fae16090c60127ba0000000000000000000000007fcb8aaea5f30620aa69d1978f1dc814cf0502ad","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://220e091f9db2105d3e076a08053cae11c7ca1a87ab1e8ab4f59f94e75630cb42"}]}