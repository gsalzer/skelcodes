{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\u0027./Context.sol\\u0027;\\nimport \\u0027./IERC20.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) internal _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the number of decimal places.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IJar.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IJar is IERC20 {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\\r\\n\\r\\n    function getRatio() external view returns (uint256);\\r\\n\\r\\n    function depositAll() external;\\r\\n\\r\\n    function deposit(uint256) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function earn() external;\\r\\n\\r\\n    function decimals() external override view returns (uint8);\\r\\n}\"},\"IStakingRewards.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n    function notifyRewardAmount(uint256 reward) external;\\r\\n\\r\\n    function periodFinish() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n    function rewardRate() external view returns (uint256);\\r\\n\\r\\n    function rewards(address) external view returns (uint256);\\r\\n\\r\\n    function rewardsDistribution() external view returns (address);\\r\\n\\r\\n    function rewardsDuration() external view returns (uint256);\\r\\n\\r\\n    function rewardsToken() external view returns (address);\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function stakeLocked(uint256 amount, uint256 secs) external;\\r\\n\\r\\n    function stakeWithPermit(\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function stakingToken() external view returns (address);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function withdrawLocked(bytes32 kek_id) external;\\r\\n}\"},\"IUniswapRouterV2.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapRouterV2 {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"\\npragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\u0027./Context.sol\\u0027;\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./Address.sol\\u0027;\\nimport \\u0027./IERC20.sol\\u0027;\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"StrategyBase.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IJar.sol\\\";\\r\\nimport \\\"./IStakingRewards.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapRouterV2.sol\\\";\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\n\\r\\nabstract contract StrategyBase is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Tokens\\r\\n    address public want; //The LP token, Harvest calls this \\\"rewardToken\\\", which is a better name tbh\\r\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    // User accounts\\r\\n    address public strategist; //The address the performance fee is sent to\\r\\n    address public jar;\\r\\n\\r\\n    // Dex\\r\\n    address public uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\r\\n    address public currentRouter = uniRouter;\\r\\n    \\r\\n\\r\\n    constructor(\\r\\n        address _want,\\r\\n        address _strategist\\r\\n    ) public {\\r\\n        require(_want != address(0));\\r\\n        require(_strategist != address(0));\\r\\n\\r\\n        want = _want;\\r\\n        strategist = _strategist;\\r\\n    }\\r\\n\\r\\n    // **** Modifiers **** //\\r\\n    \\r\\n    //Replaced with Ownable, which allows me to transfer ownership of the contract\\r\\n    /*modifier onlyStrategist { \\r\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\r\\n        _;\\r\\n    }*/\\r\\n\\r\\n    // **** Views **** //\\r\\n\\r\\n    function balanceOfWant() public view returns (uint256) {\\r\\n        return IERC20(want).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function balanceOfPool() public virtual view returns (uint256);\\r\\n\\r\\n    function getHarvestable() external virtual view returns (uint256);\\r\\n\\r\\n    function balanceOf() public view returns (uint256) {\\r\\n        return balanceOfWant().add(balanceOfPool());\\r\\n    }\\r\\n\\r\\n    function getName() external virtual pure returns (string memory);\\r\\n\\r\\n    // **** Setters **** //\\r\\n\\r\\n    function setJar(address _jar) external onlyOwner {\\r\\n        require(jar == address(0), \\\"jar already set\\\");\\r\\n        jar = _jar;\\r\\n    }\\r\\n\\r\\n    // **** State mutations **** //\\r\\n    function deposit() public virtual;\\r\\n\\r\\n    function depositLocked(uint256 _secs) public virtual;\\r\\n\\r\\n    // Jar only function for creating additional rewards from dust\\r\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\r\\n        require(msg.sender == jar, \\\"!jar\\\");\\r\\n        require(want != address(_asset), \\\"want\\\");\\r\\n        balance = _asset.balanceOf(address(this));\\r\\n        _asset.safeTransfer(jar, balance);\\r\\n    }\\r\\n\\r\\n    // Withdraw partial funds, normally used with a jar withdrawal\\r\\n    function withdraw(uint256 _amount) external {\\r\\n        require(msg.sender == jar, \\\"!jar\\\");\\r\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\r\\n        if (_balance \\u003c _amount) {\\r\\n            _amount = _withdrawSome(_amount.sub(_balance));\\r\\n            _amount = _amount.add(_balance);\\r\\n        }\\r\\n\\r\\n        IERC20(want).safeTransfer(jar, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw funds, used to swap between strategies\\r\\n    function withdrawForSwap(uint256 _amount)\\r\\n        external\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        require(msg.sender == jar, \\\"!jar\\\");\\r\\n        _withdrawSome(_amount);\\r\\n\\r\\n        balance = IERC20(want).balanceOf(address(this));\\r\\n\\r\\n        IERC20(want).safeTransfer(jar, balance);\\r\\n    }\\r\\n    \\r\\n    // Withdraw locked funds\\r\\n    function withdrawLocked(bytes32 kek_id)\\r\\n        external\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        require(msg.sender == jar, \\\"!jar\\\");\\r\\n        _withdrawSomeLocked(kek_id);\\r\\n\\r\\n        balance = IERC20(want).balanceOf(address(this));\\r\\n\\r\\n        IERC20(want).safeTransfer(jar, balance);\\r\\n    }\\r\\n\\r\\n    function _withdrawAll() internal {\\r\\n        _withdrawSome(balanceOfPool());\\r\\n    }\\r\\n\\r\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\r\\n\\r\\n    function _withdrawSomeLocked(bytes32 kek_id) internal virtual;\\r\\n\\r\\n    function harvest() public virtual;\\r\\n\\r\\n    // **** Emergency functions ****\\r\\n\\r\\n    //In case of an emergency, pass ownership to the Frax deployer\\r\\n    address public frax_deployer = 0xa448833bEcE66fD8803ac0c390936C79b5FD6eDf;\\r\\n\\r\\n    /**\\r\\n     * @param _target address of the target contract\\r\\n     * @param _data calldata used to identify what function to execute on the target \\r\\n     */\\r\\n    function execute(address _target, bytes memory _data)\\r\\n        public\\r\\n        payable\\r\\n        onlyOwner\\r\\n        returns (bytes memory response)\\r\\n    {\\r\\n        require(_target != address(0), \\\"!target\\\");\\r\\n        require(msg.sender == frax_deployer);\\r\\n\\r\\n        // call contract in current context\\r\\n        assembly {\\r\\n            let succeeded := delegatecall(\\r\\n                sub(gas(), 5000),\\r\\n                _target,\\r\\n                add(_data, 0x20),\\r\\n                mload(_data),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n            let size := returndatasize()\\r\\n\\r\\n            response := mload(0x40)\\r\\n            mstore(\\r\\n                0x40,\\r\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\r\\n            )\\r\\n            mstore(response, size)\\r\\n            returndatacopy(add(response, 0x20), 0, size)\\r\\n\\r\\n            switch iszero(succeeded)\\r\\n                case 1 {\\r\\n                    // throw if delegatecall failed\\r\\n                    revert(add(response, 0x20), size)\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // **** Internal functions ****\\r\\n    function _swapUniswap(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(_to != address(0));\\r\\n\\r\\n        // Swap with uniswap (we give unlimited approval to the Uniswap/Sushiswap routers)\\r\\n        //IERC20(_from).safeApprove(univ2Router2, 0);\\r\\n        //IERC20(_from).safeApprove(univ2Router2, _amount);\\r\\n\\r\\n        address[] memory path;\\r\\n\\r\\n        if (_from == weth || _to == weth) {\\r\\n            path = new address[](2);\\r\\n            path[0] = _from;\\r\\n            path[1] = _to;\\r\\n        } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = _from;\\r\\n            path[1] = weth;\\r\\n            path[2] = _to;\\r\\n        }\\r\\n\\r\\n        IUniswapRouterV2(currentRouter).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            now.add(60)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapUniswapWithPath(\\r\\n        address[] memory path,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(path[1] != address(0));\\r\\n\\r\\n        // Swap with uniswap\\r\\n        //IERC20(path[0]).safeApprove(univ2Router2, 0);\\r\\n        //IERC20(path[0]).safeApprove(univ2Router2, _amount);\\r\\n\\r\\n        IUniswapRouterV2(currentRouter).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            now.add(60)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Distribution of performance fee is handled in StrategyFraxFarmBase.harvest()\\r\\n    function _distributePerformanceFeesAndDeposit() internal {\\r\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\r\\n\\r\\n        if (_want \\u003e 0) {\\r\\n            deposit();\\r\\n        }\\r\\n    }\\r\\n}\"},\"StrategyFxsFrax.sol\":{\"content\":\"pragma solidity ^0.6.7;\\r\\n\\r\\nimport \\\"./StrategyStakingRewardsBase.sol\\\";\\r\\nimport \\\"./IStakingRewards.sol\\\";\\r\\n\\r\\nabstract contract StrategyFraxFarmBase is StrategyStakingRewardsBase {\\r\\n    \\r\\n    // FXS reward staking contracts\\r\\n    address public FXS_FRAX_UNI_STAKING_CONTRACT = 0xda2c338350a0E59Ce71CDCED9679A3A590Dd9BEC;\\r\\n    address public FXS_FRAX_SUSHI_STAKING_CONTRACT = 0x35302f77E5Bd7A93cbec05d585e414e14B2A84a8;\\r\\n\\r\\n    // Token addresses\\r\\n    address public fxs = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\\r\\n    address public frax = 0x853d955aCEf822Db058eb8505911ED77F175b99e;\\r\\n    address public sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\r\\n\\r\\n    // LP Token addresses\\r\\n    address public FXS_FRAX_UNI_LP = 0xE1573B9D29e2183B1AF0e743Dc2754979A40D237;\\r\\n    address public FXS_FRAX_SUSHI_LP = 0xc218001e3D102e3d1De9bf2c0F7D9626d76C6f30;\\r\\n\\r\\n    // 15% performance fee to pay for gas (est. cost of calling harvest() is $100+), remainder will be staked\\r\\n    uint256 public keepFXS = 1500;\\r\\n    uint256 public constant keepFXSmax = 10000;\\r\\n\\r\\n    // Uniswap swap paths\\r\\n    address[] public fxs_frax_path;\\r\\n    address[] public sushi_fxs_path;\\r\\n\\r\\n    constructor(\\r\\n        address _stakingContract,\\r\\n        address _want,\\r\\n        address _strategist\\r\\n    )\\r\\n        public\\r\\n        StrategyStakingRewardsBase(\\r\\n            _stakingContract,\\r\\n            _want,\\r\\n            _strategist\\r\\n        )\\r\\n    {\\r\\n        fxs_frax_path = new address[](2);\\r\\n        fxs_frax_path[0] = fxs;\\r\\n        fxs_frax_path[1] = frax;\\r\\n\\r\\n        sushi_fxs_path = new address[](3);\\r\\n        sushi_fxs_path[0] = sushi;\\r\\n        sushi_fxs_path[1] = weth;\\r\\n        sushi_fxs_path[2] = fxs;\\r\\n    }\\r\\n\\r\\n    // **** State Mutations ****\\r\\n\\r\\n    function harvest() public override onlyOwner {\\r\\n        // Collects FXS tokens\\r\\n        IStakingRewards(stakingContract).getReward();\\r\\n        \\r\\n        //Swap 1/2 of FXS for Frax\\r\\n        uint256 _fxsBalance = IERC20(fxs).balanceOf(address(this));\\r\\n        if (_fxsBalance \\u003e 0) {\\r\\n            _swapUniswapWithPath(fxs_frax_path, _fxsBalance.div(2));\\r\\n        }\\r\\n        \\r\\n        // Add liquidity for FXS/FRAX\\r\\n        uint256 _frax = IERC20(frax).balanceOf(address(this));\\r\\n        uint256 _fxs = IERC20(fxs).balanceOf(address(this));\\r\\n        if (_frax \\u003e 0 \\u0026\\u0026 _fxs \\u003e 0) {\\r\\n            //should be no danger in giving the router infinite approval, the Curve depositer does the same thing\\r\\n            //IERC20(frax).safeApprove(currentRouter, 0);\\r\\n            //IERC20(frax).safeApprove(currentRouter, _frax);\\r\\n            //IERC20(fxs).safeApprove(currentRouter, 0);\\r\\n            //IERC20(fxs).safeApprove(currentRouter, _fxs);\\r\\n\\r\\n            IUniswapRouterV2(currentRouter).addLiquidity(\\r\\n                frax,\\r\\n                fxs,\\r\\n                _frax,\\r\\n                _fxs,\\r\\n                0,\\r\\n                0,\\r\\n                address(this),\\r\\n                now + 60\\r\\n            );\\r\\n\\r\\n            // Donates DUST\\r\\n            // Costs more to claim dust than it\\u0027s worth \\r\\n            /*IERC20(frax).safeTransfer(\\r\\n                strategist,\\r\\n                IERC20(frax).balanceOf(address(this))\\r\\n            );\\r\\n            IERC20(fxs).safeTransfer(\\r\\n                strategist,\\r\\n                IERC20(fxs).balanceOf(address(this))\\r\\n            );*/\\r\\n        }\\r\\n\\r\\n        //Send performance fee to strategist\\r\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\r\\n        if (_want \\u003e 0) {\\r\\n            uint256 performanceFee = _want.mul(keepFXS).div(keepFXSmax);\\r\\n            IERC20(want).safeTransfer(\\r\\n                strategist,\\r\\n                performanceFee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Stake the LP tokens\\r\\n        // We don\\u0027t ever distribute the performance fee in _distributePerformanceFeesAndDeposit(), it should be renamed tbh\\r\\n        _distributePerformanceFeesAndDeposit();\\r\\n    }\\r\\n\\r\\n    //Due to the lower total value of Sushi tokens farmed, converting Sushi to FXS/FRAX LP has been split into a different function to save gas\\r\\n    function exchangeSushiForUnderlying() public onlyOwner {\\r\\n        //Swap Sushi to FXS (routed through Sushi -\\u003e ETH -\\u003e FXS)\\r\\n        uint256 _sushiBalance = IERC20(sushi).balanceOf(address(this));\\r\\n        if (_sushiBalance \\u003e 0) {\\r\\n            _swapUniswapWithPath(sushi_fxs_path, _sushiBalance);\\r\\n        }\\r\\n        \\r\\n        //Swap 1/2 of FXS for Frax\\r\\n        uint256 _fxsBalance = IERC20(fxs).balanceOf(address(this));\\r\\n        if (_fxsBalance \\u003e 0) {\\r\\n            _swapUniswapWithPath(fxs_frax_path, _fxsBalance.div(2));\\r\\n        }\\r\\n        \\r\\n        // Add liquidity for FXS/FRAX\\r\\n        uint256 _frax = IERC20(frax).balanceOf(address(this));\\r\\n        uint256 _fxs = IERC20(fxs).balanceOf(address(this));\\r\\n        if (_frax \\u003e 0 \\u0026\\u0026 _fxs \\u003e 0) {\\r\\n            IUniswapRouterV2(currentRouter).addLiquidity(\\r\\n                frax,\\r\\n                fxs,\\r\\n                _frax,\\r\\n                _fxs,\\r\\n                0,\\r\\n                0,\\r\\n                address(this),\\r\\n                now + 60\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //Send performance fee to strategist\\r\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\r\\n        if (_want \\u003e 0) {\\r\\n            uint256 performanceFee = _want.mul(keepFXS).div(keepFXSmax);\\r\\n            IERC20(want).safeTransfer(\\r\\n                strategist,\\r\\n                performanceFee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Stake the LP tokens\\r\\n        // We don\\u0027t ever distribute the performance fee in _distributePerformanceFeesAndDeposit(), it should be renamed tbh\\r\\n        _distributePerformanceFeesAndDeposit();\\r\\n    }\\r\\n\\r\\n    function salvage(address recipient, address token, uint256 amount) public onlyOwner {\\r\\n        //Sushi is the only token that will remain in this contract in any sizable amount after any function calls, so block it from being salvaged\\r\\n        require(token != sushi);\\r\\n        IERC20(token).safeTransfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function migrate() external {\\r\\n        require(msg.sender == jar, \\\"unauthorized\\\");\\r\\n        //Withdraw all staked tokens and remove FXS/FRAX liquidity from Uniswap\\r\\n        _withdrawSome(balanceOfPool());\\r\\n        uint256 amount = IERC20(FXS_FRAX_UNI_LP).balanceOf(address(this));\\r\\n\\r\\n        IERC20(FXS_FRAX_UNI_LP).safeApprove(uniRouter, 0);\\r\\n        IERC20(FXS_FRAX_UNI_LP).safeApprove(uniRouter, amount);\\r\\n        IUniswapRouterV2(uniRouter).removeLiquidity(\\r\\n                fxs,\\r\\n                frax,\\r\\n                amount,\\r\\n                0,\\r\\n                0,\\r\\n                address(this),\\r\\n                now + 60\\r\\n            );\\r\\n\\r\\n        //Change from Uniswap to Sushiswap\\r\\n        currentRouter = sushiRouter;\\r\\n        stakingContract = FXS_FRAX_SUSHI_STAKING_CONTRACT;\\r\\n        want = FXS_FRAX_SUSHI_LP;\\r\\n\\r\\n        // Add FXS/FRAX liquidity to Sushiswap\\r\\n        uint256 _frax = IERC20(frax).balanceOf(address(this));\\r\\n        uint256 _fxs = IERC20(fxs).balanceOf(address(this));\\r\\n        IUniswapRouterV2(sushiRouter).addLiquidity(\\r\\n                frax,\\r\\n                fxs,\\r\\n                _frax,\\r\\n                _fxs,\\r\\n                0,\\r\\n                0,\\r\\n                address(this),\\r\\n                now + 60\\r\\n            );\\r\\n\\r\\n        //Deposit to FXS_FRAX_SUSHI_STAKING_CONTRACT\\r\\n        deposit();\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract StrategyFxsFrax is StrategyFraxFarmBase {\\r\\n\\r\\n    constructor(address _strategist)\\r\\n        public\\r\\n        StrategyFraxFarmBase(\\r\\n            FXS_FRAX_UNI_STAKING_CONTRACT,\\r\\n            FXS_FRAX_UNI_LP,\\r\\n            _strategist\\r\\n        )\\r\\n    {}\\r\\n\\r\\n    // **** Views ****\\r\\n\\r\\n    function getName() external override pure returns (string memory) {\\r\\n        return \\\"StrategyFxsFrax\\\";\\r\\n    }\\r\\n\\r\\n    //Give the Uniswap and Sushiswap routers infinite approval to save gas, since they are known not to be malicious\\r\\n    function approveForever() public onlyOwner {\\r\\n        IERC20(frax).approve(uniRouter, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\r\\n        IERC20(fxs).approve(uniRouter, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\r\\n        IERC20(frax).approve(sushiRouter, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\r\\n        IERC20(fxs).approve(sushiRouter, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\r\\n        IERC20(sushi).approve(sushiRouter, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\r\\n    }\\r\\n}\"},\"StrategyStakingRewardsBase.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0;\\r\\n\\r\\nimport \\\"./StrategyBase.sol\\\";\\r\\n\\r\\nabstract contract StrategyStakingRewardsBase is StrategyBase {\\r\\n    //Old name for this variable was \\\"rewards\\\"\\r\\n    address public stakingContract; \\r\\n\\r\\n    // **** Getters ****\\r\\n    constructor(\\r\\n        address _stakingContract,\\r\\n        address _want,\\r\\n        address _strategist\\r\\n    )\\r\\n        public\\r\\n        StrategyBase(_want, _strategist)\\r\\n    {\\r\\n        stakingContract = _stakingContract;\\r\\n    }\\r\\n\\r\\n    //Note to self: Frax pool\\u0027s balanceOf() returns sum of unlocked + locked stakes\\r\\n    function balanceOfPool() public override view returns (uint256) {\\r\\n        return IStakingRewards(stakingContract).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getHarvestable() external override view returns (uint256) {\\r\\n        return IStakingRewards(stakingContract).earned(address(this));\\r\\n    }\\r\\n\\r\\n    // **** Setters ****\\r\\n\\r\\n    function deposit() public override {\\r\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\r\\n        if (_want \\u003e 0) {\\r\\n            IERC20(want).safeApprove(stakingContract, 0);\\r\\n            IERC20(want).safeApprove(stakingContract, _want);\\r\\n            IStakingRewards(stakingContract).stake(_want);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositLocked(uint256 _secs) public override {\\r\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\r\\n        if (_want \\u003e 0) {\\r\\n            IERC20(want).safeApprove(stakingContract, 0);\\r\\n            IERC20(want).safeApprove(stakingContract, _want);\\r\\n            IStakingRewards(stakingContract).stakeLocked(_want, _secs);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdrawSome(uint256 _amount)\\r\\n        internal\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IStakingRewards(stakingContract).withdraw(_amount);\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    //Not all the reserves need to be available if the pool is large enough\\r\\n    function _withdrawSomeLocked(bytes32 kek_id)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        IStakingRewards(stakingContract).withdrawLocked(kek_id);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FXS_FRAX_SUSHI_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXS_FRAX_SUSHI_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXS_FRAX_UNI_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXS_FRAX_UNI_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"depositLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeSushiForUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fxs_frax_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepFXS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepFXSmax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jar\",\"type\":\"address\"}],\"name\":\"setJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sushi_fxs_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyFxsFrax","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b29cd9c87a624b940335d6d5e1d4aadf7d95beec","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba6feebb5d1da8f6fd2ffa99fa6a9a5f759d946121a39b5ba7d69aafde142d22"}]}