{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function updateCumulative() external;\r\n\r\n    function update() external;\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function consultDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _dollarPrice);\r\n\r\n    function twap(uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function twapDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _amountOut);\r\n}\r\n\r\ninterface IValueLiquidFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function isPair(address) external view returns (bool);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair);\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint256) external;\r\n}\r\n\r\ninterface IValueLiquidPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n    function getSwapFee() external view returns (uint32);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        uint32,\r\n        uint32\r\n    ) external;\r\n}\r\n\r\ninterface IEpochController {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function nextEpochLength() external view returns (uint256);\r\n\r\n    function nextEpochAllocatedReward(address _pool) external view returns (uint256);\r\n}\r\n\r\ninterface IAggregatorInterface {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\r\n    uint256 private constant Q224 = Q112 << RESOLUTION;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z;\r\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// fixed window oracle that recomputes the average price for the entire epochPeriod once every epochPeriod\r\n// note that the price average is only guaranteed to be over at least 1 epochPeriod, but may be over a longer epochPeriod\r\ncontract OracleMultiPair is Ownable, IOracle {\r\n    using FixedPoint for *;\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n    address public factory;\r\n\r\n    uint256 public oracleReserveMinimum; // $10k\r\n\r\n    // epoch\r\n    address public epochController;\r\n    uint256 public maxEpochPeriod;\r\n\r\n    // 1-hour update\r\n    uint256 public lastUpdateHour;\r\n    uint256 public updatePeriod;\r\n\r\n    mapping(uint256 => uint256) public epochDollarPrice;\r\n\r\n    // chain-link price feed\r\n    mapping(address => address) public chainLinkOracle;\r\n\r\n    // ValueLiquidPair\r\n    address public mainToken;\r\n    bool[] public isToken0s;\r\n    uint256[] public decimalFactors;\r\n    uint32[] public mainTokenWeights;\r\n    IValueLiquidPair[] public pairs;\r\n\r\n    // Pair price for update in cumulative epochPeriod\r\n    uint256 public priceCumulative;\r\n    uint256[] public priceMainCumulativeLast;\r\n\r\n    // oracle\r\n    uint256 public priceCumulativeLast;\r\n    FixedPoint.uq112x112 public priceAverage;\r\n\r\n    uint32 public blockTimestampCumulativeLast;\r\n    uint32 public blockTimestampLast;\r\n\r\n    event Updated(uint256 priceCumulativeLast);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address[] memory _pairs,\r\n        address _mainToken,\r\n        address _epochController,\r\n        uint256 _maxEpochPeriod,\r\n        uint256 _updatePeriod,\r\n        uint256 _lastUpdateHour,\r\n        address _pairFactory,\r\n        address _defaultOracle,\r\n        uint256 _oracleReserveMinimum\r\n    ) {\r\n        for (uint256 i = 0; i < _pairs.length; i++) {\r\n            IValueLiquidPair pair = IValueLiquidPair(_pairs[i]);\r\n            {\r\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n                require(reserve0 != 0 && reserve1 != 0, \"OracleMultiPair: NO_RESERVES\"); // ensure that there's liquidity in the pair\r\n            }\r\n\r\n            pairs.push(pair);\r\n            bool isToken0 = pair.token0() == _mainToken;\r\n            isToken0s.push(isToken0);\r\n            priceMainCumulativeLast.push(0);\r\n            {\r\n                uint256 decimal = IERC20(isToken0 ? pair.token1() : pair.token0()).decimals();\r\n                decimalFactors.push(10**(uint256(18).sub(decimal)));\r\n            }\r\n            (uint32 _tokenWeight0, uint32 _tokenWeight1, ) = IValueLiquidFactory(_pairFactory).getWeightsAndSwapFee(_pairs[i]);\r\n            mainTokenWeights.push(isToken0 ? _tokenWeight0 : _tokenWeight1);\r\n        }\r\n\r\n        epochController = _epochController;\r\n        maxEpochPeriod = _maxEpochPeriod;\r\n        lastUpdateHour = _lastUpdateHour;\r\n        updatePeriod = _updatePeriod;\r\n        factory = _pairFactory;\r\n        mainToken = _mainToken;\r\n        chainLinkOracle[address(0)] = _defaultOracle;\r\n        oracleReserveMinimum = _oracleReserveMinimum;\r\n\r\n        operator = msg.sender;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setEpochController(address _epochController) external onlyOperator {\r\n        epochController = _epochController;\r\n    }\r\n\r\n    function setChainLinkOracle(address _token, address _priceFeed) external onlyOperator {\r\n        chainLinkOracle[_token] = _priceFeed;\r\n    }\r\n\r\n    function setOracleReserveMinimum(uint256 _oracleReserveMinimum) external onlyOperator {\r\n        oracleReserveMinimum = _oracleReserveMinimum;\r\n    }\r\n\r\n    function setMaxEpochPeriod(uint256 _maxEpochPeriod) external onlyOperator {\r\n        require(_maxEpochPeriod <= 48 hours, \"_maxEpochPeriod is not valid\");\r\n        maxEpochPeriod = _maxEpochPeriod;\r\n    }\r\n\r\n    function setLastUpdateHour(uint256 _lastUpdateHour) external onlyOperator {\r\n        require(_lastUpdateHour % 3600 == 0, \"_lastUpdateHour is not valid\");\r\n        lastUpdateHour = _lastUpdateHour;\r\n    }\r\n\r\n    function addPair(address _pair) public onlyOperator {\r\n        IValueLiquidPair pair = IValueLiquidPair(_pair);\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        require(reserve0 != 0 && reserve1 != 0, \"OracleMultiPair: NO_RESERVES\");\r\n        // ensure that there's liquidity in the pair\r\n\r\n        pairs.push(pair);\r\n        bool isToken0 = pair.token0() == mainToken;\r\n        isToken0s.push(isToken0);\r\n        priceMainCumulativeLast.push(isToken0 ? pair.price0CumulativeLast() : pair.price1CumulativeLast());\r\n        {\r\n            uint256 decimal = IERC20(isToken0 ? pair.token1() : pair.token0()).decimals();\r\n            decimalFactors.push(10**(uint256(18).sub(decimal)));\r\n        }\r\n        (uint32 _tokenWeight0, uint32 _tokenWeight1, ) = IValueLiquidFactory(factory).getWeightsAndSwapFee(_pair);\r\n        mainTokenWeights.push(isToken0 ? _tokenWeight0 : _tokenWeight1);\r\n    }\r\n\r\n    function removePair(address _pair) public onlyOperator {\r\n        uint256 last = pairs.length - 1;\r\n\r\n        for (uint256 i = 0; i < pairs.length; i++) {\r\n            if (address(pairs[i]) == _pair) {\r\n                pairs[i] = pairs[last];\r\n                isToken0s[i] = isToken0s[last];\r\n                priceMainCumulativeLast[i] = priceMainCumulativeLast[last];\r\n                decimalFactors[i] = decimalFactors[last];\r\n                mainTokenWeights[i] = mainTokenWeights[last];\r\n\r\n                pairs.pop();\r\n                isToken0s.pop();\r\n                mainTokenWeights.pop();\r\n                priceMainCumulativeLast.pop();\r\n                decimalFactors.pop();\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier checkEpoch {\r\n        require(block.timestamp >= nextEpochPoint(), \"OracleMultiPair: not opened yet\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"OracleMultiPair: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function epoch() public view override returns (uint256) {\r\n        return IEpochController(epochController).epoch();\r\n    }\r\n\r\n    function nextEpochPoint() public view override returns (uint256) {\r\n        return IEpochController(epochController).nextEpochPoint();\r\n    }\r\n\r\n    function nextEpochLength() external view returns (uint256) {\r\n        return IEpochController(epochController).nextEpochLength();\r\n    }\r\n\r\n    function nextUpdateHour() public view returns (uint256) {\r\n        return lastUpdateHour.add(updatePeriod);\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function updateCumulative() public override {\r\n        uint256 _updatePeriod = updatePeriod;\r\n        uint256 _nextUpdateHour = lastUpdateHour.add(_updatePeriod);\r\n        if (block.timestamp >= _nextUpdateHour) {\r\n            uint256 totalMainPriceWeight;\r\n            uint256 totalSidePairBal;\r\n\r\n            uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n            if (blockTimestamp != blockTimestampCumulativeLast) {\r\n                for (uint256 i = 0; i < pairs.length; i++) {\r\n                    (uint256 priceMainCumulative, , uint256 reserveSideToken) =\r\n                        currentTokenCumulativePriceAndReserves(pairs[i], isToken0s[i], mainTokenWeights[i], blockTimestamp);\r\n\r\n                    uint256 _decimalFactor = decimalFactors[i];\r\n                    uint256 reserveBal = reserveSideToken.mul(_decimalFactor);\r\n                    require(reserveBal >= oracleReserveMinimum, \"!min reserve\");\r\n\r\n                    totalMainPriceWeight = totalMainPriceWeight.add(\r\n                        (priceMainCumulative - priceMainCumulativeLast[i]).mul(reserveSideToken.mul(_decimalFactor))\r\n                    );\r\n                    totalSidePairBal = totalSidePairBal.add(reserveSideToken);\r\n                    priceMainCumulativeLast[i] = priceMainCumulative;\r\n                }\r\n\r\n                require(totalSidePairBal <= uint112(-1), \"OracleMultiPair: OVERFLOW\");\r\n                if (totalSidePairBal != 0) {\r\n                    priceCumulative += totalMainPriceWeight.div(totalSidePairBal);\r\n                    blockTimestampCumulativeLast = blockTimestamp;\r\n                }\r\n            }\r\n\r\n            for (;;) {\r\n                if (block.timestamp < _nextUpdateHour.add(_updatePeriod)) {\r\n                    lastUpdateHour = _nextUpdateHour;\r\n                    break;\r\n                } else {\r\n                    _nextUpdateHour = _nextUpdateHour.add(_updatePeriod);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @dev Updates 1-day EMA price.  */\r\n    function update() external override checkEpoch {\r\n        updateCumulative();\r\n\r\n        uint32 _blockTimestampCumulativeLast = blockTimestampCumulativeLast; // gas saving\r\n        uint32 timeElapsed = _blockTimestampCumulativeLast - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed == 0) {\r\n            // prevent divided by zero\r\n            return;\r\n        }\r\n\r\n        // overflow is desired, casting never truncates\r\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n        uint256 _priceCumulative = priceCumulative; //gas saving\r\n        priceAverage = FixedPoint.uq112x112(uint224((_priceCumulative - priceCumulativeLast) / timeElapsed));\r\n\r\n        priceCumulativeLast = _priceCumulative;\r\n        blockTimestampLast = _blockTimestampCumulativeLast;\r\n\r\n        epochDollarPrice[epoch()] = consultDollarPrice(address(0), 1e18);\r\n        emit Updated(_priceCumulative);\r\n    }\r\n\r\n    // note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(address _token, uint256 _amountIn) public view override returns (uint144 _amountOut) {\r\n        require(_token == mainToken, \"OracleMultiPair: INVALID_TOKEN\");\r\n        require(block.timestamp.sub(blockTimestampLast) <= maxEpochPeriod, \"OracleMultiPair: Price out-of-date\");\r\n        _amountOut = priceAverage.mul(_amountIn).decode144();\r\n    }\r\n\r\n    function consultDollarPrice(address _sideToken, uint256 _amountIn) public view override returns (uint256) {\r\n        address _priceFeed = chainLinkOracle[_sideToken];\r\n        if (_priceFeed == address(0)) {\r\n            _priceFeed = chainLinkOracle[address(0)];\r\n        }\r\n        require(_priceFeed != address(0), \"OracleMultiPair: No price feed\");\r\n        int256 _price = IAggregatorInterface(_priceFeed).latestAnswer();\r\n        uint144 _amountOut = consult(mainToken, _amountIn);\r\n        return uint256(_amountOut).mul(uint256(_price)).div(1e8);\r\n    }\r\n\r\n    function twap(uint256 _amountIn) public view override returns (uint144 _amountOut) {\r\n        uint32 timeElapsed = blockTimestampCumulativeLast - blockTimestampLast;\r\n        _amountOut = (timeElapsed == 0)\r\n            ? priceAverage.mul(_amountIn).decode144()\r\n            : FixedPoint.uq112x112(uint224((priceCumulative - priceCumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\r\n    }\r\n\r\n    function twapDollarPrice(address _sideToken, uint256 _amountIn) external view override returns (uint256) {\r\n        address _priceFeed = chainLinkOracle[_sideToken];\r\n        if (_priceFeed == address(0)) {\r\n            _priceFeed = chainLinkOracle[address(0)];\r\n        }\r\n        require(_priceFeed != address(0), \"OracleMultiPair: No price feed\");\r\n        int256 _price = IAggregatorInterface(_priceFeed).latestAnswer();\r\n        uint144 _amountOut = twap(_amountIn);\r\n        return uint256(_amountOut).mul(uint256(_price)).div(1e8);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync\r\n    function currentTokenCumulativePriceAndReserves(\r\n        IValueLiquidPair pair,\r\n        bool isToken0,\r\n        uint32 mainTokenWeight,\r\n        uint32 blockTimestamp\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 _priceCumulative,\r\n            uint256 reserveMain,\r\n            uint256 reserveSideToken\r\n        )\r\n    {\r\n        uint32 _blockTimestampLast;\r\n        if (isToken0) {\r\n            (reserveMain, reserveSideToken, _blockTimestampLast) = pair.getReserves();\r\n            _priceCumulative = pair.price0CumulativeLast();\r\n        } else {\r\n            (reserveSideToken, reserveMain, _blockTimestampLast) = pair.getReserves();\r\n            _priceCumulative = pair.price1CumulativeLast();\r\n        }\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        if (_blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            uint112 mReserveMain = uint112(reserveMain) * (100 - mainTokenWeight);\r\n            uint112 mReserveSide = uint112(reserveSideToken) * mainTokenWeight;\r\n            _priceCumulative += uint256(FixedPoint.fraction(mReserveSide, mReserveMain)._x) * timeElapsed;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_epochController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEpochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdateHour\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pairFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oracleReserveMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampCumulativeLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainLinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"_amountOut\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consultDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimalFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isToken0s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainTokenWeights\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUpdateHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleReserveMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"contract IValueLiquidPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverage\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceMainCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setChainLinkOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_epochController\",\"type\":\"address\"}],\"name\":\"setEpochController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastUpdateHour\",\"type\":\"uint256\"}],\"name\":\"setLastUpdateHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEpochPeriod\",\"type\":\"uint256\"}],\"name\":\"setMaxEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleReserveMinimum\",\"type\":\"uint256\"}],\"name\":\"setOracleReserveMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"twap\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"_amountOut\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"twapDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCumulative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OracleMultiPair","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001200000000000000000000000003479b0acf875405d7853f44142fe06470a40f6cc00000000000000000000000071535ad4c7c5925382cdeadc806371cc89a5085d00000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000006012d1700000000000000000000000005021470fc598373fba4fe3384745940eab3e653d0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d85ac23daaf52c307a78bcdd9abbd31e351e54a1000000000000000000000000c00d386b24f2690fcbe8a1b7bd7045de4ec540b5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2338b66fcfb70cc5945c7ca2b655b8a64be9af73c20974140f2a3392d7692973"}]}