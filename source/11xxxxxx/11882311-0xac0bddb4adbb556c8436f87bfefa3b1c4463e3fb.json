{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\fixed-inflation\\FixedInflationData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct FixedInflationEntry {\r\n    string name;\r\n    uint256 blockInterval;\r\n    uint256 lastBlock;\r\n    uint256 callerRewardPercentage;\r\n}\r\n\r\nstruct FixedInflationOperation {\r\n\r\n    address inputTokenAddress;\r\n    uint256 inputTokenAmount;\r\n    bool inputTokenAmountIsPercentage;\r\n    bool inputTokenAmountIsByMint;\r\n\r\n    address ammPlugin;\r\n    address[] liquidityPoolAddresses;\r\n    address[] swapPath;\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n\r\n    address[] receivers;\r\n    uint256[] receiversPercentages;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflationExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflationExtension {\r\n\r\n    function init(address host) external;\r\n\r\n    function setHost(address host) external;\r\n\r\n    function data() external view returns(address fixedInflationContract, address host);\r\n\r\n    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) external;\r\n\r\n    function flushBack(address[] memory tokenAddresses) external;\r\n\r\n    function deactivationByFailure() external;\r\n\r\n    function setEntry(FixedInflationEntry memory entryData, FixedInflationOperation[] memory operations) external;\r\n\r\n    function active() external view returns(bool);\r\n\r\n    function setActive(bool _active) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\util\\IERC20.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\util\\IERC20Mintable.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20Mintable {\r\n    function mint(address wallet, uint256 amount) external returns (bool);\r\n    function burn(address wallet, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflation.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflation {\r\n\r\n    function setEntry(FixedInflationEntry memory entryData, FixedInflationOperation[] memory operations) external;\r\n\r\n    function flushBack(address[] memory tokenAddresses) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\FixedInflationExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FixedInflationExtension is IFixedInflationExtension {\r\n\r\n    address private _host;\r\n\r\n    address private _fixedInflationContract;\r\n\r\n    bool public override active;\r\n\r\n    modifier fixedInflationOnly() {\r\n        require(_fixedInflationContract == msg.sender, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier hostOnly() {\r\n        require(_host == msg.sender, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function init(address host) override public {\r\n        require(_host == address(0), \"Already init\");\r\n        require((_host = host) != address(0), \"blank host\");\r\n        _fixedInflationContract = msg.sender;\r\n    }\r\n\r\n    function setHost(address host) public virtual override hostOnly {\r\n        _host = host;\r\n    }\r\n\r\n    function data() view public override returns(address fixedInflationContract, address host) {\r\n        return(_fixedInflationContract, _host);\r\n    }\r\n\r\n    function setActive(bool _active) public override virtual hostOnly {\r\n        active = _active;\r\n    }\r\n\r\n    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) public override fixedInflationOnly {\r\n        for(uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            if(transferAmounts[i] > 0) {\r\n                if(tokenAddresses[i] == address(0)) {\r\n                    payable(msg.sender).transfer(transferAmounts[i]);\r\n                    continue;\r\n                }\r\n                _safeTransfer(tokenAddresses[i], msg.sender, transferAmounts[i]);\r\n            }\r\n            if(amountsToMint[i] > 0) {\r\n                _mintAndTransfer(tokenAddresses[i], msg.sender, amountsToMint[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setEntry(FixedInflationEntry memory newEntry, FixedInflationOperation[] memory newOperations) public override hostOnly {\r\n        IFixedInflation(_fixedInflationContract).setEntry(newEntry, newOperations);\r\n    }\r\n\r\n    function flushBack(address[] memory tokenAddresses) public override hostOnly {\r\n        IFixedInflation(_fixedInflationContract).flushBack(tokenAddresses);\r\n    }\r\n\r\n    function deactivationByFailure() public override fixedInflationOnly {\r\n        active = false;\r\n    }\r\n\r\n    /** INTERNAL METHODS */\r\n\r\n    function _mintAndTransfer(address erc20TokenAddress, address recipient, uint256 value) internal virtual {\r\n        IERC20Mintable(erc20TokenAddress).mint(recipient, value);\r\n    }\r\n\r\n    /** @dev function used to safe transfer ERC20 tokens.\r\n      * @param erc20TokenAddress address of the token to transfer.\r\n      * @param to receiver of the tokens.\r\n      * @param value amount of tokens to transfer.\r\n     */\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fixedInflationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivationByFailure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"flushBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"transferAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToMint\",\"type\":\"uint256[]\"}],\"name\":\"receiveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedInflationEntry\",\"name\":\"newEntry\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsByMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedInflationOperation[]\",\"name\":\"newOperations\",\"type\":\"tuple[]\"}],\"name\":\"setEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FixedInflationExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e09bc82f00d1da9122b1fd0482be94a9407320a20b820258e448cda72653e5cf"}]}