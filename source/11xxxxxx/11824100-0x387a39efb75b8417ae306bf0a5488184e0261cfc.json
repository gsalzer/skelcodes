{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SubBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/** OpenZeppelin Dependencies */\\n// import \\\"@openzeppelin/contracts-upgradeable/contracts/proxy/Initializable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n/** Local Interfaces */\\nimport './interfaces/IToken.sol';\\nimport './interfaces/IAuction.sol';\\nimport './interfaces/IForeignSwap.sol';\\nimport './interfaces/IBPD.sol';\\nimport './interfaces/ISubBalances.sol';\\nimport './interfaces/ISubBalancesV1.sol';\\n\\ncontract SubBalances is ISubBalances, Initializable, AccessControlUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /** Events */\\n    event PoolCreated(uint256 paydayTime, uint256 poolAmount);\\n\\n    /** Structs */\\n    struct StakeSession {\\n        address staker;\\n        uint256 shares;\\n        uint256 start;\\n        uint256 end;\\n        uint256 finishTime;\\n        bool[5] payDayEligible;\\n        bool withdrawn;\\n    }\\n\\n    struct SubBalance {\\n        uint256 totalShares;\\n        uint256 totalWithdrawAmount;\\n        uint256 payDayTime;\\n        uint256 requiredStakePeriod;\\n        bool minted;\\n    }\\n\\n    struct Addresses {\\n        address mainToken;\\n        address foreignSwap;\\n        address bigPayDayPool;\\n        address auction;\\n    }\\n\\n    Addresses public addresses;\\n    ISubBalancesV1 public subBalancesV1;\\n\\n    /** Role vars */\\n    bytes32 public constant MIGRATOR_ROLE = keccak256('MIGRATOR_ROLE');\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n    bytes32 public constant STAKING_ROLE = keccak256('CALLER_ROLE');\\n\\n    uint256 public startTimestamp;\\n    uint256 public stepTimestamp;\\n    uint256 public basePeriod; // NOT USED\\n    uint256 public currentSharesTotalSupply; // NOT USED\\n\\n    SubBalance[5] public subBalanceList;\\n    uint256[5] public periods; // NOT USED\\n    mapping(uint256 => StakeSession) public stakeSessions;\\n\\n    bool public init_;\\n\\n    /* New variables must go below here. */\\n\\n    /** No longer needed with initializable */\\n    modifier onlyManager() {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), 'Caller is not a manager');\\n        _;\\n    }\\n    modifier onlyMigrator() {\\n        require(\\n            hasRole(MIGRATOR_ROLE, _msgSender()),\\n            'Caller is not a migrator'\\n        );\\n        _;\\n    }\\n\\n    /** Start Init functins */\\n    function initialize(address _manager, address _migrator)\\n        public\\n        initializer\\n    {\\n        _setupRole(MANAGER_ROLE, _manager);\\n        _setupRole(MIGRATOR_ROLE, _migrator);\\n    }\\n\\n    function init(\\n        address _mainTokenAddress,\\n        address _foreignSwapAddress,\\n        address _bigPayDayPoolAddress,\\n        address _auctionAddress,\\n        address _subBalancesV1Address,\\n        address _stakingAddress,\\n        uint256 _stepTimestamp,\\n        uint256 _basePeriod\\n    ) external onlyMigrator {\\n        require(!init_, 'NativeSwap: init is active');\\n        init_ = true;\\n        /** Setup */\\n        _setupRole(STAKING_ROLE, _stakingAddress);\\n\\n        addresses = Addresses({\\n            mainToken: _mainTokenAddress,\\n            foreignSwap: _foreignSwapAddress,\\n            bigPayDayPool: _bigPayDayPoolAddress,\\n            auction: _auctionAddress\\n        });\\n\\n        subBalancesV1 = ISubBalancesV1(_subBalancesV1Address);\\n\\n        stepTimestamp = _stepTimestamp;\\n        basePeriod = _basePeriod;\\n\\n        if (startTimestamp == 0) {\\n            startTimestamp = now;\\n\\n            for (uint256 i = 0; i < subBalanceList.length; i++) {\\n                periods[i] = _basePeriod * (i + 1);\\n                SubBalance storage subBalance = subBalanceList[i];\\n                subBalance.payDayTime = startTimestamp.add(\\n                    stepTimestamp.mul(periods[i])\\n                );\\n                subBalance.requiredStakePeriod = periods[i];\\n            }\\n        }\\n    }\\n\\n    /** END INIT FUNCS */\\n    function getStartTimes()\\n        public\\n        view\\n        returns (uint256[5] memory startTimes)\\n    {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            startTimes[i] = subBalanceList[i].payDayTime;\\n        }\\n    }\\n\\n    function getPoolsMinted() public view returns (bool[5] memory poolsMinted) {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            poolsMinted[i] = subBalanceList[i].minted;\\n        }\\n    }\\n\\n    function getPoolsMintedAmounts()\\n        public\\n        view\\n        returns (uint256[5] memory poolsMintedAmounts)\\n    {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            poolsMintedAmounts[i] = subBalanceList[i].totalWithdrawAmount;\\n        }\\n    }\\n\\n    function getClosestYearShares() public view returns (uint256 shareAmount) {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            if (!subBalanceList[i].minted) {\\n                continue;\\n            } else {\\n                shareAmount = subBalanceList[i].totalShares;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getStakeSession(uint256 sessionId)\\n        public\\n        view\\n        returns (\\n            address staker,\\n            uint256 shares,\\n            uint256 start,\\n            uint256 end,\\n            uint256 finishTime,\\n            bool withdrawn,\\n            bool[5] memory payDayEligible\\n        )\\n    {\\n        StakeSession storage stakeSession = stakeSessions[sessionId];\\n\\n        staker = stakeSession.staker;\\n        shares = stakeSession.shares;\\n        start = stakeSession.start;\\n        end = stakeSession.end;\\n        finishTime = stakeSession.finishTime;\\n        withdrawn = stakeSession.withdrawn;\\n        payDayEligible = stakeSession.payDayEligible;\\n    }\\n\\n    function calculateSessionPayout(\\n        uint256 start,\\n        uint256 end,\\n        uint256 finishTime,\\n        uint256 shares,\\n        bool[5] memory payDayEligible\\n    ) public view returns (uint256, uint256) {\\n        uint256 subBalancePayoutAmount;\\n        uint256[5] memory bpdRawAmounts =\\n            IBPD(addresses.bigPayDayPool).getPoolYearAmounts();\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n\\n            uint256 subBalanceAmount;\\n            uint256 addAmount;\\n            if (subBalance.minted) {\\n                subBalanceAmount = subBalance.totalWithdrawAmount;\\n            } else {\\n                (subBalanceAmount, addAmount) = _bpdAmountFromRaw(\\n                    bpdRawAmounts[i]\\n                );\\n            }\\n            if (payDayEligible[i]) {\\n                uint256 stakerShare =\\n                    shares.mul(1e18).div(subBalance.totalShares);\\n                uint256 stakerAmount =\\n                    subBalanceAmount.mul(stakerShare).div(1e18);\\n                subBalancePayoutAmount = subBalancePayoutAmount.add(\\n                    stakerAmount\\n                );\\n            }\\n        }\\n\\n        uint256 stakingDays = end.sub(start).div(stepTimestamp);\\n        uint256 stakeEnd;\\n        if (finishTime != 0) {\\n            stakeEnd = finishTime;\\n        } else {\\n            stakeEnd = end;\\n        }\\n\\n        uint256 daysStaked = stakeEnd.sub(start).div(stepTimestamp);\\n\\n        // Early unstaked\\n        if (stakingDays > daysStaked) {\\n            uint256 payoutAmount =\\n                subBalancePayoutAmount.mul(daysStaked).div(stakingDays);\\n            uint256 earlyUnstakePenalty =\\n                subBalancePayoutAmount.sub(payoutAmount);\\n            return (payoutAmount, earlyUnstakePenalty);\\n            // Unstaked in time, no penalty\\n        } else if (daysStaked < stakingDays.add(14)) {\\n            return (subBalancePayoutAmount, 0);\\n            // Unstaked late\\n        } else if (daysStaked < stakingDays.add(714)) {\\n            uint256 daysAfterStaking = daysStaked.sub(stakingDays);\\n            uint256 payoutAmount =\\n                subBalancePayoutAmount\\n                    .mul(uint256(714).sub(daysAfterStaking))\\n                    .div(700);\\n            uint256 lateUnstakePenalty =\\n                subBalancePayoutAmount.sub(payoutAmount);\\n            return (payoutAmount, lateUnstakePenalty);\\n            // Too much time\\n        } else {\\n            return (0, subBalancePayoutAmount);\\n        }\\n    }\\n\\n    function withdrawPayout(uint256 sessionId) public {\\n        StakeSession storage stakeSession = stakeSessions[sessionId];\\n\\n        require(stakeSession.finishTime != 0, 'cannot withdraw before unclaim');\\n        require(!stakeSession.withdrawn, 'already withdrawn');\\n        require(\\n            _msgSender() == stakeSession.staker,\\n            'caller not matching sessionId'\\n        );\\n\\n        (uint256 payoutAmount, uint256 penaltyAmount) =\\n            calculateSessionPayout(\\n                stakeSession.start,\\n                stakeSession.end,\\n                stakeSession.finishTime,\\n                stakeSession.shares,\\n                stakeSession.payDayEligible\\n            );\\n\\n        stakeSession.withdrawn = true;\\n\\n        if (payoutAmount > 0) {\\n            IERC20Upgradeable(addresses.mainToken).transfer(\\n                _msgSender(),\\n                payoutAmount\\n            );\\n        }\\n\\n        if (penaltyAmount > 0) {\\n            IERC20Upgradeable(addresses.mainToken).transfer(\\n                addresses.auction,\\n                penaltyAmount\\n            );\\n            IAuction(addresses.auction).callIncomeDailyTokensTrigger(\\n                penaltyAmount\\n            );\\n        }\\n    }\\n\\n    function createMaxShareSession(\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 newShares,\\n        uint256 oldShares\\n    ) external override {\\n        require(\\n            hasRole(STAKING_ROLE, _msgSender()),\\n            'SUBBALANCES: Caller is not a staking role'\\n        );\\n        require(\\n            end > start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        StakeSession storage stakeSession = stakeSessions[sessionId];\\n\\n        stakeSession.payDayEligible = handleExistingMaxShareEligibility(\\n            newShares,\\n            oldShares,\\n            stakeSession.payDayEligible\\n        );\\n        stakeSession.start = start;\\n        stakeSession.end = end;\\n        stakeSession.shares = newShares;\\n    }\\n\\n    function createMaxShareSessionV1(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 newShares,\\n        uint256 oldShares\\n    ) external override {\\n        require(\\n            hasRole(STAKING_ROLE, _msgSender()),\\n            'SUBBALANCES: Caller is not a staking role'\\n        );\\n        require(\\n            end > start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        bool[5] memory payDayEligible =\\n            subBalancesV1.getSessionEligibility(sessionId);\\n\\n        payDayEligible = handleExistingMaxShareEligibility(\\n            newShares,\\n            oldShares,\\n            payDayEligible\\n        );\\n\\n        stakeSessions[sessionId] = StakeSession({\\n            staker: staker,\\n            shares: newShares,\\n            start: start,\\n            end: end,\\n            finishTime: 0,\\n            payDayEligible: payDayEligible,\\n            withdrawn: false\\n        });\\n    }\\n\\n    function handleExistingMaxShareEligibility(\\n        uint256 newShares,\\n        uint256 oldShares,\\n        bool[5] memory payDayEligible\\n    ) internal returns (bool[5] memory) {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n\\n            // Setting eligibility only if payday is not passed and stake end more that this pay day\\n            if (payDayEligible[i]) {\\n                subBalance.totalShares = subBalance.totalShares.add(\\n                    newShares - oldShares\\n                );\\n            } else {\\n                payDayEligible[i] = true;\\n                subBalance.totalShares = subBalance.totalShares.add(newShares);\\n            }\\n        }\\n\\n        return payDayEligible;\\n    }\\n\\n    function callIncomeStakerTrigger(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 shares\\n    ) external override {\\n        require(\\n            hasRole(STAKING_ROLE, _msgSender()),\\n            'SUBBALANCES: Caller is not a staking role'\\n        );\\n        require(\\n            end > start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        // Setting pay day eligibility for user in advance when he stakes\\n        bool[5] memory stakerPayDays;\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n\\n            // Setting eligibility only if payday is not passed and stake end more that this pay day\\n            if (subBalance.payDayTime > start && end > subBalance.payDayTime) {\\n                stakerPayDays[i] = true;\\n\\n                subBalance.totalShares = subBalance.totalShares.add(shares);\\n            }\\n        }\\n\\n        // Saving user\\n        stakeSessions[sessionId] = StakeSession({\\n            staker: staker,\\n            shares: shares,\\n            start: start,\\n            end: end,\\n            finishTime: 0,\\n            payDayEligible: stakerPayDays,\\n            withdrawn: false\\n        });\\n    }\\n\\n    function callOutcomeStakerTrigger(\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 actualEnd,\\n        uint256 shares\\n    ) external override {\\n        require(\\n            hasRole(STAKING_ROLE, _msgSender()),\\n            'SUBBALANCES: Caller is not a staking role'\\n        );\\n        require(\\n            end > start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        StakeSession storage stakeSession = stakeSessions[sessionId];\\n\\n        stakeSession.finishTime = actualEnd;\\n        stakeSession.payDayEligible = handleBpdEligibility(\\n            shares,\\n            actualEnd,\\n            stakeSession.payDayEligible\\n        );\\n    }\\n\\n    function callOutcomeStakerTriggerV1(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 actualEnd,\\n        uint256 shares\\n    ) external override {\\n        require(\\n            hasRole(STAKING_ROLE, _msgSender()),\\n            'SUBBALANCES: Caller is not a staking role'\\n        );\\n        require(\\n            end > start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        bool[5] memory payDayEligible =\\n            subBalancesV1.getSessionEligibility(sessionId);\\n\\n        payDayEligible = handleBpdEligibility(\\n            shares,\\n            actualEnd,\\n            payDayEligible\\n        );\\n\\n        stakeSessions[sessionId] = StakeSession({\\n            staker: staker,\\n            shares: shares,\\n            start: start,\\n            end: end,\\n            finishTime: actualEnd,\\n            payDayEligible: payDayEligible,\\n            withdrawn: false\\n        });\\n    }\\n\\n    function handleBpdEligibility(\\n        uint256 shares,\\n        uint256 realStakeEnd,\\n        bool[5] memory stakePayDays\\n    ) internal returns (bool[5] memory) {\\n        // Rechecking eligibility of paydays\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n\\n            // Removing from payday if unstaked before\\n            if (realStakeEnd < subBalance.payDayTime) {\\n                bool wasEligible = stakePayDays[i];\\n                stakePayDays[i] = false;\\n\\n                if (wasEligible) {\\n                    if (shares > subBalance.totalShares) {\\n                        subBalance.totalShares = 0;\\n                    } else {\\n                        subBalance.totalShares = subBalance.totalShares.sub(\\n                            shares\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        return stakePayDays;\\n    }\\n\\n    // Pool logic\\n    function generatePool() external returns (bool) {\\n        for (uint256 i = 0; i < subBalanceList.length; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n\\n            if (now > subBalance.payDayTime && !subBalance.minted) {\\n                uint256 yearTokens = getPoolFromBPD(i);\\n                (uint256 bpdTokens, uint256 addAmount) =\\n                    _bpdAmountFromRaw(yearTokens);\\n\\n                IToken(addresses.mainToken).mint(address(this), addAmount);\\n                subBalance.totalWithdrawAmount = bpdTokens;\\n                subBalance.minted = true;\\n\\n                emit PoolCreated(now, bpdTokens);\\n                return true;\\n            }\\n        }\\n    }\\n\\n    // Pool logic\\n    function getPoolFromBPD(uint256 poolNumber)\\n        internal\\n        returns (uint256 poolAmount)\\n    {\\n        poolAmount = IBPD(addresses.bigPayDayPool).transferYearlyPool(\\n            poolNumber\\n        );\\n    }\\n\\n    // Pool logic\\n    function _bpdAmountFromRaw(uint256 yearTokenAmount)\\n        internal\\n        view\\n        returns (uint256 totalAmount, uint256 addAmount)\\n    {\\n        uint256 currentTokenTotalSupply =\\n            IERC20Upgradeable(addresses.mainToken).totalSupply();\\n\\n        uint256 inflation = uint256(8).mul(currentTokenTotalSupply).div(36500);\\n\\n        uint256 criticalMassCoeff =\\n            IForeignSwap(addresses.foreignSwap)\\n                .getCurrentClaimedAmount()\\n                .mul(1e18)\\n                .div(\\n                IForeignSwap(addresses.foreignSwap).getTotalSnapshotAmount()\\n            );\\n\\n        uint256 viralityCoeff =\\n            IForeignSwap(addresses.foreignSwap)\\n                .getCurrentClaimedAddresses()\\n                .mul(1e18)\\n                .div(\\n                IForeignSwap(addresses.foreignSwap).getTotalSnapshotAddresses()\\n            );\\n\\n        uint256 totalUprisingCoeff =\\n            uint256(1e18).add(criticalMassCoeff).add(viralityCoeff);\\n\\n        totalAmount = yearTokenAmount\\n            .add(inflation)\\n            .mul(totalUprisingCoeff)\\n            .div(1e18);\\n        addAmount = totalAmount.sub(yearTokenAmount);\\n    }\\n\\n    /** Roles management - only for multi sig address */\\n    function setupRole(bytes32 role, address account) external onlyManager {\\n        _setupRole(role, account);\\n    }\\n\\n    function addBPDShares(uint256[5] calldata _shares) external onlyMigrator {\\n        for (uint256 i = 0; i < 5; i++) {\\n            SubBalance storage subBalance = subBalanceList[i];\\n            uint256 _sharesToAdd = _shares[i];\\n            subBalance.totalShares = subBalance.totalShares.add(_sharesToAdd);\\n        }\\n    }\\n\\n    function maxShareMigratorHelper(\\n        uint256 sessionId,\\n        uint256 end,\\n        uint256 shares\\n    ) external onlyMigrator {\\n        StakeSession storage session = stakeSessions[sessionId];\\n\\n        require(\\n            end > session.start,\\n            'SUBBALANCES: Stake end must be after stake start'\\n        );\\n\\n        session.shares = shares;\\n        session.end = end;\\n        session.payDayEligible = [true, true, true, true, true];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IAuction {\\n    function callIncomeDailyTokensTrigger(uint256 amount) external;\\n\\n    function callIncomeWeeklyTokensTrigger(uint256 amount) external;\\n\\n    function addReservesToAuction(uint256 daysInFuture, uint256 amount) external returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IForeignSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IForeignSwap {\\n    function getCurrentClaimedAmount() external view returns (uint256);\\n\\n    function getTotalSnapshotAmount() external view returns (uint256);\\n\\n    function getCurrentClaimedAddresses() external view returns (uint256);\\n\\n    function getTotalSnapshotAddresses() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBPD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBPD {\\n    function callIncomeTokensTrigger(uint256 incomeAmountToken) external;\\n    function transferYearlyPool(uint256 poolNumber) external returns (uint256);\\n\\tfunction getPoolYearAmounts() external view returns (uint256[5] memory poolAmounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISubBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ISubBalances {\\n    function callIncomeStakerTrigger(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 shares\\n    ) external;\\n\\n    function callOutcomeStakerTrigger(\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 actualEnd,\\n        uint256 shares\\n    ) external;\\n\\n    function callOutcomeStakerTriggerV1(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 actualEnd,\\n        uint256 shares\\n    ) external;\\n\\n    function createMaxShareSession(\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 newShares,\\n        uint256 oldShares\\n    ) external;\\n\\n    function createMaxShareSessionV1(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 newShares,\\n        uint256 oldShares\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISubBalancesV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ISubBalancesV1 {\\n    function callIncomeStakerTrigger(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 shares\\n    ) external;\\n\\n    function callOutcomeStakerTrigger(\\n        address staker,\\n        uint256 sessionId,\\n        uint256 start,\\n        uint256 end,\\n        uint256 shares\\n    ) external;\\n    \\n    function getSessionStats(uint256 sessionId) \\n        external view returns (address, uint256, uint256, uint256, bool);\\n\\n    function getSessionEligibility(uint256 sessionId) external view returns (bool[5] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paydayTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_shares\",\"type\":\"uint256[5]\"}],\"name\":\"addBPDShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foreignSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bigPayDayPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool[5]\",\"name\":\"payDayEligible\",\"type\":\"bool[5]\"}],\"name\":\"calculateSessionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"callIncomeStakerTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"callOutcomeStakerTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"callOutcomeStakerTriggerV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldShares\",\"type\":\"uint256\"}],\"name\":\"createMaxShareSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldShares\",\"type\":\"uint256\"}],\"name\":\"createMaxShareSessionV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSharesTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generatePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClosestYearShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsMinted\",\"outputs\":[{\"internalType\":\"bool[5]\",\"name\":\"poolsMinted\",\"type\":\"bool[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsMintedAmounts\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"poolsMintedAmounts\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"getStakeSession\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool[5]\",\"name\":\"payDayEligible\",\"type\":\"bool[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTimes\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"startTimes\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foreignSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bigPayDayPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subBalancesV1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stepTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePeriod\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"maxShareMigratorHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setupRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeSessions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subBalanceList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDayTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredStakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subBalancesV1\",\"outputs\":[{\"internalType\":\"contract ISubBalancesV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"withdrawPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SubBalances","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}